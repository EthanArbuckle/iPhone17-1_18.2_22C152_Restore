uint64_t closure #1 in static UIKitMenuButton._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void v12[6];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v13 = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v7 = type metadata accessor for UIKitMenuButton();
  v8 = a1 + *(int *)(v7 + 64);
  v12[2] = v7;
  v12[3] = a3;
  v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v12, a3, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v10);
  return v13;
}

uint64_t closure #2 in static UIKitMenuButton._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v7 = type metadata accessor for UIKitMenuButton();
  uint64_t v8 = a1 + *(int *)(v7 + 60);
  v12[2] = v7;
  v12[3] = a2;
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v12, a2, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v10);
  return v13;
}

uint64_t closure #3 in static UIKitMenuButton._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v5 = a1 + 16;
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  v10[2] = type metadata accessor for UIKitMenuButton();
  uint64_t v6 = MEMORY[0x1E4FBB390];
  uint64_t v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v5, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_0, (uint64_t)v10, v6, MEMORY[0x1E4FBC248], v7, MEMORY[0x1E4FBC278], v8);
  return v11;
}

uint64_t key path getter for UIKitMenuButton.action : <A, B>UIKitMenuButton<A, B>@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;

  return outlined copy of AppIntentExecutor?(v3);
}

uint64_t key path setter for UIKitMenuButton.action : <A, B>UIKitMenuButton<A, B>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *a2;
  outlined copy of AppIntentExecutor?(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v7);
  *a2 = (uint64_t)v6;
  a2[1] = v5;
  return result;
}

uint64_t implicit closure #2 in static UIKitMenuButton._makeView(view:inputs:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  v10[0] = a1;
  v10[1] = a2;
  int v11 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v17 = a6;
  uint64_t v18 = a7;
  uint64_t v13 = type metadata accessor for UIKitMenuButton.TransformItemList();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for WeakBox<UIButton>?(0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v10, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v12, v13, MEMORY[0x1E4FBC248], v7, MEMORY[0x1E4FBC278], v8);
  return v15;
}

uint64_t UIKitMenuButton.Child.menuButton.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UIKitMenuButton();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t UIKitMenuButton.Child.value.getter@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v11 = a1;
  uint64_t v59 = a7;
  uint64_t v73 = a3;
  uint64_t v74 = a4;
  unint64_t v62 = HIDWORD(a1);
  uint64_t v63 = a6;
  uint64_t v75 = a5;
  *(void *)v76 = a6;
  unint64_t v61 = HIDWORD(a2);
  uint64_t v60 = type metadata accessor for UIKitMenuButton();
  uint64_t v12 = *(void *)(v60 - 8);
  MEMORY[0x1F4188790](v60);
  uint64_t v58 = (uint64_t)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v55 = (uint64_t)&v47 - v15;
  MEMORY[0x1F4188790](v16);
  uint64_t v53 = (uint64_t)&v47 - v17;
  MEMORY[0x1F4188790](v18);
  uint64_t v51 = (uint64_t)&v47 - v19;
  MEMORY[0x1F4188790](v20);
  v22 = (char *)&v47 - v21;
  MEMORY[0x1F4188790](v23);
  v25 = (uint64_t *)((char *)&v47 - v24);
  UIKitMenuButton.Child.menuButton.getter((uint64_t)&v47 - v24);
  uint64_t v26 = v25[1];
  uint64_t v57 = *v25;
  uint64_t v56 = v26;
  outlined copy of AppIntentExecutor?(v57);
  v27 = *(void (**)(uint64_t *, uint64_t))(v12 + 8);
  uint64_t v28 = v60;
  v27(v25, v60);
  uint64_t v64 = a3;
  uint64_t v48 = a5;
  UIKitMenuButton.Child.menuButton.getter((uint64_t)v22);
  int v54 = v22[16];
  v27((uint64_t *)v22, v28);
  uint64_t v29 = v51;
  UIKitMenuButton.Child.menuButton.getter(v51);
  int v52 = *(unsigned __int8 *)(v29 + 17);
  uint64_t v30 = v28;
  v27((uint64_t *)v29, v28);
  uint64_t v51 = AGCreateWeakAttribute();
  uint64_t v31 = v53;
  uint64_t v32 = a4;
  uint64_t v33 = v48;
  UIKitMenuButton.Child.menuButton.getter(v53);
  int v50 = *(unsigned __int8 *)(v31 + *(int *)(v30 + 68));
  v27((uint64_t *)v31, v30);
  uint64_t v34 = v55;
  LODWORD(v30) = v11;
  unint64_t v49 = a2;
  uint64_t v35 = v32;
  uint64_t v36 = v63;
  UIKitMenuButton.Child.menuButton.getter(v55);
  LODWORD(v53) = *(unsigned __int8 *)(v34 + *(int *)(v60 + 72));
  uint64_t v37 = v34;
  uint64_t v38 = v60;
  ((void (*)(uint64_t))v27)(v37);
  uint64_t v55 = AGCreateWeakAttribute();
  uint64_t v39 = v58;
  uint64_t v40 = v33;
  UIKitMenuButton.Child.menuButton.getter(v58);
  uint64_t v41 = v38;
  v42 = (uint64_t *)(v39 + *(int *)(v38 + 76));
  uint64_t v43 = v39;
  uint64_t v44 = *v42;
  uint64_t v45 = v42[1];
  outlined copy of AppIntentExecutor?(*v42);
  v27((uint64_t *)v43, v41);
  LOWORD(v73) = 256;
  uint64_t v74 = v57;
  uint64_t v75 = v56;
  v76[0] = v54;
  v76[1] = v52;
  *(void *)&v76[4] = v51;
  char v77 = 0;
  char v78 = v50;
  char v79 = v53;
  uint64_t v80 = v55;
  __int16 v81 = 0;
  uint64_t v82 = v44;
  uint64_t v83 = v45;
  uint64_t v65 = v64;
  uint64_t v66 = v35;
  uint64_t v67 = v40;
  uint64_t v68 = v36;
  int v69 = v30;
  int v70 = v62;
  int v71 = v49;
  int v72 = v61;
  return UIKitButton.init(configuration:label:)((uint64_t)&v73, partial apply for closure #1 in UIKitMenuButton.Child.value.getter, v59);
}

uint64_t closure #1 in UIKitMenuButton.Child.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a2);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v13 - v8;
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, Value, a3);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  int v11 = *(void (**)(char *, uint64_t))(v4 + 8);
  v11(v6, a3);
  static ViewBuilder.buildExpression<A>(_:)(v9);
  return ((uint64_t (*)(char *, uint64_t))v11)(v9, a3);
}

uint64_t (*UIKitMenuButton.TransformItemList.primaryAction.getter())()
{
  type metadata accessor for (())?(0);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v1 = *Value;
  uint64_t v2 = Value[1];
  if (*Value)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  }
  else
  {
    uint64_t v4 = 0;
  }
  outlined copy of AppIntentExecutor?(v1);
  return v4;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance UIKitMenuButton<A, B>.Child@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UIKitButton();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance UIKitMenuButton<A, B>.Child@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return UIKitMenuButton.Child.value.getter(*v2, v2[1], a1[2], a1[3], a1[4], a1[5], a2);
}

uint64_t (*UIKitMenuButton.TransformItemList.value.getter(unint64_t a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))(uint64_t *a1)
{
  int v11 = a2;
  int v12 = a1;
  unint64_t v13 = HIDWORD(a1);
  unint64_t v14 = HIDWORD(a2);
  uint64_t v15 = *(void *)AGGraphGetValue();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a4;
  *(void *)(v16 + 24) = a5;
  *(void *)(v16 + 32) = a6;
  *(void *)(v16 + 40) = a7;
  *(void *)(v16 + 48) = v15;
  *(_DWORD *)(v16 + 56) = v12;
  *(_DWORD *)(v16 + 60) = v13;
  *(_DWORD *)(v16 + 64) = v11;
  *(_DWORD *)(v16 + 68) = v14;
  *(_DWORD *)(v16 + 72) = a3;
  swift_bridgeObjectRetain();
  return partial apply for closure #1 in UIKitMenuButton.TransformItemList.value.getter;
}

uint64_t closure #1 in UIKitMenuButton.TransformItemList.value.getter(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v41 = a7;
  uint64_t v42 = a8;
  uint64_t v40 = a6;
  int v38 = a5;
  v37[1] = a4;
  v37[2] = a3;
  uint64_t v39 = a9;
  uint64_t v11 = type metadata accessor for PlatformItemList.Item();
  uint64_t v12 = v11 - 8;
  uint64_t v43 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v44 = (uint64_t)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (void **)((char *)v37 - v15);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)v37 - v18;
  char v20 = *(unsigned char *)AGGraphGetValue();
  _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v47);
  uint64_t v21 = MEMORY[0x1E4F41550];
  _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_0((uint64_t)v47, (uint64_t)v50, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
  v48[0] = xmmword_18834BB90;
  memset(&v48[1], 0, 48);
  char v49 = 0;
  __n128 v45 = 0uLL;
  uint64_t v46 = 0;
  PlatformItemList.Item.init(text:image:selectionBehavior:accessibility:tint:imageColorResolver:)(0, (uint64_t)v50, v48, &v45, 0, 0, (uint64_t)v19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v19 + 77) = a2;
  v19[632] = v20;
  v22 = a1;
  outlined consume of PlatformItemList.Item.SystemItem?(*((void **)v19 + 37), *((void *)v19 + 38), *((void *)v19 + 39), *((void *)v19 + 40), *((void *)v19 + 41), *((void *)v19 + 42), *((void *)v19 + 43), *((void *)v19 + 44), *((void *)v19 + 45), *((void *)v19 + 46), *((void *)v19 + 47), *((void *)v19 + 48), *((void *)v19 + 49));
  *(_OWORD *)(v19 + 296) = 0u;
  *(_OWORD *)(v19 + 312) = 0u;
  *((void *)v19 + 41) = 0x3FFFFFFFCLL;
  *((_OWORD *)v19 + 21) = 0u;
  *((_OWORD *)v19 + 22) = 0u;
  *((_OWORD *)v19 + 23) = 0u;
  *((_OWORD *)v19 + 24) = 0u;
  PlatformItemList.mergedContentItem.getter(*a1, (uint64_t)v16);
  swift_bridgeObjectRelease();
  uint64_t v23 = *v16;
  uint64_t v24 = *(void **)v19;
  *(void *)uint64_t v19 = *v16;
  id v25 = v23;

  uint64_t v26 = v16[72];
  v27 = (void *)*((void *)v19 + 72);
  *((void *)v19 + 72) = v26;
  id v28 = v26;

  _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_0((uint64_t)(v16 + 8), (uint64_t)v48, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v21);
  _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_0((uint64_t)(v19 + 64), (uint64_t)v50, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v21);
  _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_0((uint64_t)v48, (uint64_t)(v19 + 64), (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v21);
  outlined retain of Image.Resolved?((uint64_t)v48, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of Image.Resolved?);
  outlined retain of Image.Resolved?((uint64_t)v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
  v19[*(int *)(v12 + 132)] = *(unsigned char *)AGGraphGetValue();
  v19[*(int *)(v12 + 136)] = *(unsigned char *)AGGraphGetValue();
  uint64_t v29 = UIKitMenuButton.TransformItemList.primaryAction.getter();
  if (v29)
  {
    uint64_t v31 = v29;
    uint64_t v32 = v30;
    outlined consume of PlatformItemList.Item.SelectionBehavior?(*((void *)v19 + 50), *((void *)v19 + 51), *((void *)v19 + 52), *((void *)v19 + 53), *((void *)v19 + 54), *((void *)v19 + 55));
    *((void *)v19 + 50) = 1;
    *((void *)v19 + 51) = v31;
    *((void *)v19 + 52) = v32;
    *(_OWORD *)(v19 + 424) = 0u;
    *(_OWORD *)(v19 + 440) = 0u;
    *(_OWORD *)(v19 + 449) = 0u;
  }
  uint64_t v33 = v44;
  outlined init with copy of WeakBox<UIButton>?((uint64_t)v19, v44, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  type metadata accessor for WeakBox<UIButton>?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBBE00]);
  unint64_t v34 = (*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_18834BB80;
  outlined init with take of WeakBox<UIButton>(v33, v35 + v34, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  outlined destroy of UIKitSystemButtonConfigurationModifier((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  uint64_t *v22 = v35;
  return outlined destroy of UIKitSystemButtonConfigurationModifier((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
}

uint64_t protocol witness for Rule.value.getter in conformance UIKitMenuButton<A, B>.TransformItemList@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  uint64_t v4 = UIKitMenuButton.TransformItemList.value.getter(*(void *)v2, *(void *)(v2 + 8), *(_DWORD *)(v2 + 16), a1[2], a1[3], a1[4], a1[5]);
  uint64_t v6 = v5;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v4;
  *(void *)(result + 24) = v6;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a2[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

double protocol witness for static View._makeView(view:inputs:) in conformance UIKitMenuButton<A, B>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, unint64_t *a4@<X8>)
{
  return static UIKitMenuButton._makeView(view:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance UIKitMenuButton<A, B>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance UIKitMenuButton<A, B>()
{
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance UIKitMenuButton<A, B>()
{
}

uint64_t protocol witness for Rule.value.getter in conformance BridgedPopUpButtonProvider@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (void *)MEMORY[0x18C119DF0](v1);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();

  uint64_t result = outlined init with take of WeakBox<UIButton>((uint64_t)v5, a1, (uint64_t (*)(void))type metadata accessor for WeakBox<UIButton>);
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance BridgedPopUpButtonPreferenceKey(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t))
{
  uint64_t v4 = outlined init with take of WeakBox<UIButton>(a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WeakBox<UIButton>?);
  if (v6[8])
  {
    a2(&v7, v4);
    outlined destroy of UIKitSystemButtonConfigurationModifier((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WeakBox<UIButton>?);
  }
  else
  {
    outlined init with take of WeakBox<UIButton>((uint64_t)v6, (uint64_t)&v7, (uint64_t (*)(void))type metadata accessor for WeakBox<UIButton>);
    char v8 = 0;
  }
  return outlined init with take of WeakBox<UIButton>((uint64_t)&v7, a1, (uint64_t (*)(void))type metadata accessor for WeakBox<UIButton>?);
}

uint64_t View.uikitButtonConfiguration(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UIKitSystemButtonConfigurationModifier(0);
  MEMORY[0x1F4188790](v6);
  char v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UIButton.Configuration();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v8, a1, v9);
  uint64_t v10 = &v8[*(int *)(v6 + 20)];
  *(void *)uint64_t v10 = swift_getKeyPath();
  v10[8] = 0;
  MEMORY[0x18C113660](v8, a2, v6, a3);
  return outlined destroy of UIKitSystemButtonConfigurationModifier((uint64_t)v8, type metadata accessor for UIKitSystemButtonConfigurationModifier);
}

uint64_t UIKitButtonStyleModifier.styleBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v41 = a3;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v36 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = *(void *)(v7 + 24);
  uint64_t v8 = type metadata accessor for UIKitButtonStyleModifier.ResolvedBody();
  uint64_t v40 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x1F4188790](v11);
  uint64_t v37 = (char *)&v27 - v13;
  char v14 = *(unsigned char *)a1;
  int v15 = *(unsigned __int8 *)(a1 + 1);
  uint64_t v16 = *(void *)(a1 + 8);
  uint64_t v17 = *(void *)(a1 + 16);
  int v34 = *(unsigned __int8 *)(a1 + 24);
  int v35 = v15;
  int v33 = *(unsigned __int8 *)(a1 + 25);
  uint64_t v32 = *(void *)(a1 + 28);
  int v18 = *(unsigned __int8 *)(a1 + 36);
  int v30 = *(unsigned __int16 *)(a1 + 37);
  int v31 = v18;
  uint64_t v29 = *(void *)(a1 + 40);
  int v19 = *(unsigned __int8 *)(a1 + 48);
  int v27 = *(unsigned __int8 *)(a1 + 49);
  int v28 = v19;
  uint64_t v20 = *(void *)(a1 + 56);
  uint64_t v21 = *(void *)(a1 + 64);
  uint64_t v22 = (uint64_t)v36;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v36, v38, v4, v12);
  v42[0] = v14;
  v42[1] = v35;
  uint64_t v43 = v16;
  uint64_t v44 = v17;
  char v45 = v34;
  char v46 = v33;
  uint64_t v47 = v32;
  char v48 = v31;
  __int16 v49 = v30;
  uint64_t v50 = v29;
  char v51 = v28;
  char v52 = v27;
  uint64_t v53 = v20;
  uint64_t v54 = v21;
  uint64_t KeyPath = swift_getKeyPath();
  UIKitButtonStyleModifier.ResolvedBody.init(style:configuration:isEnabled:)(v22, v42, KeyPath, 0, v4, (uint64_t)v10);
  swift_getWitnessTable();
  uint64_t v24 = v37;
  static ViewBuilder.buildExpression<A>(_:)(v10);
  outlined copy of AppIntentExecutor?(v16);
  outlined copy of AppIntentExecutor?(v20);
  id v25 = *(void (**)(char *, uint64_t))(v40 + 8);
  v25(v10, v8);
  static ViewBuilder.buildExpression<A>(_:)(v24);
  return ((uint64_t (*)(char *, uint64_t))v25)(v24, v8);
}

uint64_t UIKitButtonStyleModifier.ResolvedBody.init(style:configuration:isEnabled:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v7 = *a2;
  char v8 = a2[1];
  uint64_t v9 = *((void *)a2 + 1);
  uint64_t v10 = *((void *)a2 + 2);
  char v11 = a2[24];
  char v12 = a2[25];
  uint64_t v13 = *(void *)(a2 + 28);
  char v14 = a2[36];
  __int16 v23 = *(_WORD *)(a2 + 37);
  uint64_t v22 = *((void *)a2 + 5);
  char v20 = a2[49];
  char v21 = a2[48];
  uint64_t v18 = *((void *)a2 + 8);
  uint64_t v19 = *((void *)a2 + 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a6, a1, a5);
  uint64_t result = type metadata accessor for UIKitButtonStyleModifier.ResolvedBody();
  uint64_t v16 = a6 + *(int *)(result + 36);
  *(unsigned char *)uint64_t v16 = v7;
  *(unsigned char *)(v16 + 1) = v8;
  *(void *)(v16 + 8) = v9;
  *(void *)(v16 + 16) = v10;
  *(unsigned char *)(v16 + 24) = v11;
  *(unsigned char *)(v16 + 25) = v12;
  *(void *)(v16 + 28) = v13;
  *(unsigned char *)(v16 + 36) = v14;
  *(_WORD *)(v16 + 37) = v23;
  *(void *)(v16 + 40) = v22;
  *(unsigned char *)(v16 + 48) = v21;
  *(unsigned char *)(v16 + 49) = v20;
  *(void *)(v16 + 56) = v19;
  *(void *)(v16 + 64) = v18;
  uint64_t v17 = a6 + *(int *)(result + 40);
  *(void *)uint64_t v17 = a3;
  *(unsigned char *)(v17 + 8) = a4 & 1;
  return result;
}

uint64_t UIKitButtonStyleModifier.ResolvedBody.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v52 = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  type metadata accessor for HStack<UIKitButtonConfiguration.Label>(255, &lazy cache variable for type metadata for HStack<UIKitButtonConfiguration.Label>, (uint64_t)&type metadata for UIKitButtonConfiguration.Label, (uint64_t)&protocol witness table for UIKitButtonConfiguration.Label, MEMORY[0x1E4F415B8]);
  uint64_t v6 = v5;
  uint64_t v51 = v5;
  uint64_t v7 = *(void *)(a1 + 24);
  unint64_t v49 = lazy protocol witness table accessor for type HStack<UIKitButtonConfiguration.Label> and conformance HStack<A>();
  uint64_t v64 = v4;
  uint64_t v65 = v6;
  uint64_t v66 = v7;
  *(void *)uint64_t v67 = v49;
  type metadata accessor for ButtonStyleContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v44 = type metadata accessor for UIKitButtonAdaptor();
  uint64_t v47 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44);
  uint64_t v9 = (char *)&v41 - v8;
  type metadata accessor for StaticSourceWriter<ButtonStyleConfiguration.Label, HStack<UIKitButtonConfiguration.Label>>();
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v50 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v43 = (char *)&v41 - v11;
  type metadata accessor for HStack<UIKitButtonConfiguration.Label>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<ActionPlatformItemListFlags>, (uint64_t)&type metadata for ActionPlatformItemListFlags, (uint64_t)&protocol witness table for ActionPlatformItemListFlags, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v48 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v42 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  char v46 = (char *)&v41 - v15;
  uint64_t v16 = v2 + *(int *)(a1 + 36);
  char v17 = *(unsigned char *)(v16 + 1);
  uint64_t v18 = *(void *)(v16 + 8);
  uint64_t v19 = *(void *)(v16 + 16);
  char v20 = *(unsigned char *)(v16 + 24);
  LOBYTE(v15) = *(unsigned char *)(v16 + 25);
  uint64_t v21 = *(void *)(v16 + 28);
  char v22 = *(unsigned char *)(v16 + 36);
  __int16 v23 = *(_WORD *)(v16 + 37);
  uint64_t v24 = *(void *)(v16 + 40);
  char v25 = *(unsigned char *)(v16 + 48);
  char v26 = *(unsigned char *)(v16 + 49);
  uint64_t v27 = *(void *)(v16 + 56);
  uint64_t v28 = *(void *)(v16 + 64);
  LOBYTE(v64) = *(unsigned char *)v16;
  BYTE1(v64) = v17;
  uint64_t v65 = v18;
  uint64_t v66 = v19;
  v67[0] = v20;
  v67[1] = v15;
  *(void *)&v67[4] = v21;
  char v68 = v22;
  __int16 v69 = v23;
  uint64_t v70 = v24;
  char v71 = v25;
  char v72 = v26;
  uint64_t v73 = v27;
  uint64_t v74 = v28;
  uint64_t v57 = v4;
  uint64_t v58 = v7;
  uint64_t v59 = v2;
  outlined copy of AppIntentExecutor?(v18);
  outlined copy of AppIntentExecutor?(v27);
  UIKitButtonAdaptor.init(configuration:options:content:)((uint64_t)&v64, 0, (void (*)(uint64_t))partial apply for closure #1 in UIKitButtonStyleModifier.ResolvedBody.body.getter, (uint64_t)v9);
  uint64_t v54 = v4;
  uint64_t v29 = v4;
  uint64_t v55 = v7;
  uint64_t v30 = v7;
  uint64_t v56 = v2;
  lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label();
  int v31 = v43;
  uint64_t v32 = v44;
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for ButtonStyleConfiguration.Label, (void (*)(double))UIKitButtonConfiguration.label.getter, (uint64_t)v53, v44, (uint64_t)&type metadata for ButtonStyleConfiguration.Label, v51, (uint64_t)&protocol witness table for UIKitButtonAdaptor<A>);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v9, v32);
  int v33 = implicit closure #1 in UIKitButtonStyleModifier.ResolvedBody.body.getter(v2, v29, v30);
  uint64_t v35 = v34;
  unint64_t v62 = &protocol witness table for UIKitButtonAdaptor<A>;
  uint64_t v63 = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t v36 = swift_getWitnessTable();
  uint64_t v37 = v42;
  View.transformPlatformItemList<A>(_:_:)((uint64_t)&type metadata for ActionPlatformItemListFlags, (uint64_t)v33, v35, v10, (uint64_t)&type metadata for ActionPlatformItemListFlags, v36);
  swift_release();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v31, v10);
  uint64_t v60 = v36;
  unint64_t v61 = &protocol witness table for PlatformItemListTransformModifier<A>;
  swift_getWitnessTable();
  uint64_t v38 = v46;
  static ViewBuilder.buildExpression<A>(_:)(v37);
  uint64_t v39 = *(void (**)(char *, uint64_t))(v48 + 8);
  v39(v37, v12);
  static ViewBuilder.buildExpression<A>(_:)(v38);
  return ((uint64_t (*)(char *, uint64_t))v39)(v38, v12);
}

uint64_t closure #1 in UIKitButtonStyleModifier.ResolvedBody.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v6 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v16[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v8, a1, a2, v6);
  uint64_t v10 = (char *)(a1 + *(int *)(type metadata accessor for UIKitButtonStyleModifier.ResolvedBody() + 36));
  char v11 = *v10;
  LOBYTE(v10) = v10[1];
  v18[0] = v11;
  v18[1] = (char)v10;
  v16[0] = static VerticalAlignment.center.getter();
  v16[1] = 0;
  char v17 = 1;
  type metadata accessor for HStack<UIKitButtonConfiguration.Label>(0, &lazy cache variable for type metadata for HStack<UIKitButtonConfiguration.Label>, (uint64_t)&type metadata for UIKitButtonConfiguration.Label, (uint64_t)&protocol witness table for UIKitButtonConfiguration.Label, MEMORY[0x1E4F415B8]);
  uint64_t v13 = v12;
  lazy protocol witness table accessor for type HStack<UIKitButtonConfiguration.Label> and conformance HStack<A>();
  return ButtonStyleContent.init(_:role:label:)((uint64_t)v8, v18, (uint64_t)v16, a2, v13, a3);
}

uint64_t ButtonStyleContent.init(_:role:label:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v11 = *a2;
  char v12 = a2[1];
  uint64_t v13 = (int *)type metadata accessor for ButtonStyleContent();
  uint64_t v14 = a6 + v13[13];
  *(_WORD *)uint64_t v14 = 256;
  uint64_t v15 = a6 + v13[15];
  *(void *)uint64_t v15 = swift_getKeyPath();
  *(unsigned char *)(v15 + 8) = 0;
  uint64_t v16 = a6 + v13[16];
  *(unsigned char *)uint64_t v16 = 0;
  *(void *)(v16 + 8) = 0;
  uint64_t v17 = a6 + v13[17];
  *(unsigned char *)uint64_t v17 = 0;
  *(void *)(v17 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a6, a1, a4);
  *(unsigned char *)uint64_t v14 = v11;
  *(unsigned char *)(v14 + 1) = v12;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a6 + v13[14], a3, a5);
}

uint64_t specialized UIKitButtonAdaptor.init(configuration:options:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(_OWORD *__return_ptr, uint64_t)@<X2>, _OWORD *a4@<X8>)
{
  *(void *)&long long v24 = &type metadata for AnyButtonStyleType.Unknown;
  *((void *)&v24 + 1) = lazy protocol witness table accessor for type AnyButtonStyleType.Unknown and conformance AnyButtonStyleType.Unknown();
  *(void *)&long long v25 = swift_getKeyPath();
  BYTE8(v25) = 0;
  *(void *)&long long v26 = swift_getKeyPath();
  BYTE8(v26) = 0;
  *(void *)&long long v27 = swift_getKeyPath();
  BYTE8(v27) = 0;
  *(void *)&long long v28 = swift_getKeyPath();
  BYTE8(v28) = 0;
  *(void *)&long long v29 = swift_getKeyPath();
  BYTE8(v29) = 0;
  *(void *)&long long v30 = swift_getKeyPath();
  BYTE8(v30) = 0;
  char v22 = *(unsigned char *)(a1 + 24);
  if ((v22 & 1) != 0
    && (outlined init with take of WeakBox<UIButton>(a1 + 28, (uint64_t)v39, (uint64_t (*)(void))type metadata accessor for WeakAttribute<PlatformItemList>?), outlined init with take of WeakBox<UIButton>((uint64_t)v39, (uint64_t)v40, (uint64_t (*)(void))type metadata accessor for WeakAttribute<PlatformItemList>?), v40[8] == 1))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)&long long v31 = v7;
    *((void *)&v31 + 1) = *(void *)(a1 + 16);
    LOBYTE(v32) = *(unsigned char *)(a1 + 25);
    outlined init with take of WeakBox<UIButton>(a1 + 28, (uint64_t)v38, (uint64_t (*)(void))type metadata accessor for WeakAttribute<PlatformItemList>?);
    outlined init with take of WeakBox<UIButton>((uint64_t)v38, (uint64_t)&v32 + 4, (uint64_t (*)(void))type metadata accessor for WeakAttribute<PlatformItemList>?);
    int v8 = *(unsigned __int8 *)(a1 + 37);
    *(_WORD *)((char *)&v32 + 13) = *(_WORD *)(a1 + 37);
    outlined init with take of WeakAttribute<WeakBox<UIButton>?>?(a1 + 40, (uint64_t)v37);
    outlined init with take of WeakAttribute<WeakBox<UIButton>?>?((uint64_t)v37, (uint64_t)&v33);
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = *(void *)(a1 + 64);
    *((void *)&v35 + 1) = a2;
    *(void *)&long long v36 = v9;
    *((void *)&v36 + 1) = v10;
    outlined copy of AppIntentExecutor?(v7);
    uint64_t v11 = outlined copy of AppIntentExecutor?(v9);
    a3(v34, v11);
    uint64_t result = (uint64_t)outlined retain of UIKitButtonConfiguration((void *)a1, (void (*)(void, void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    if ((v22 & 1) != 0 && (a2 & 0x80) == 0)
    {
      a2 |= 0x80uLL;
      *((void *)&v35 + 1) = a2;
    }
    int v13 = *(unsigned __int8 *)(a1 + 49);
    BOOL v14 = (a2 & 0x100) == 0;
    char v15 = v13 & v14;
    if ((v13 & v14) != 0) {
      uint64_t v16 = a2 | 0x100;
    }
    else {
      uint64_t v16 = a2;
    }
    BOOL v18 = (v16 & 1) == 0 && v8 == 1;
    if ((v15 & 1) != 0 || v18) {
      *((void *)&v35 + 1) = v16 | v18;
    }
    long long v19 = v34[1];
    a4[10] = v34[0];
    a4[11] = v19;
    long long v20 = v36;
    a4[12] = v35;
    a4[13] = v20;
    a4[6] = v30;
    a4[7] = v31;
    long long v21 = v33;
    a4[8] = v32;
    a4[9] = v21;
    a4[2] = v26;
    a4[3] = v27;
    a4[4] = v28;
    a4[5] = v29;
    *a4 = v24;
    a4[1] = v25;
  }
  return result;
}

uint64_t specialized UIKitButtonAdaptor.init(configuration:options:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X8>)
{
  unint64_t v7 = lazy protocol witness table accessor for type AnyButtonStyleType.Unknown and conformance AnyButtonStyleType.Unknown();
  *(void *)a4 = &type metadata for AnyButtonStyleType.Unknown;
  *(void *)(a4 + 8) = v7;
  *(void *)(a4 + 16) = swift_getKeyPath();
  *(unsigned char *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = swift_getKeyPath();
  *(unsigned char *)(a4 + 40) = 0;
  *(void *)(a4 + 48) = swift_getKeyPath();
  *(unsigned char *)(a4 + 56) = 0;
  *(void *)(a4 + 64) = swift_getKeyPath();
  *(unsigned char *)(a4 + 72) = 0;
  *(void *)(a4 + 80) = swift_getKeyPath();
  *(unsigned char *)(a4 + 88) = 0;
  *(void *)(a4 + 96) = swift_getKeyPath();
  *(unsigned char *)(a4 + 104) = 0;
  char v25 = *(unsigned char *)(a1 + 24);
  if ((v25 & 1) != 0
    && (outlined init with take of WeakBox<UIButton>(a1 + 28, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for WeakAttribute<PlatformItemList>?), outlined init with take of WeakBox<UIButton>((uint64_t)v29, (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for WeakAttribute<PlatformItemList>?), v30[8] == 1))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for UIKitButtonAdaptor<PlatformItemContent>(0);
    uint64_t v9 = v8;
    uint64_t v10 = (uint64_t *)(a4 + *(int *)(v8 + 92));
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = *(void *)(a1 + 16);
    *(void *)(a4 + 112) = v11;
    *(void *)(a4 + 120) = v12;
    *(unsigned char *)(a4 + 128) = *(unsigned char *)(a1 + 25);
    outlined init with take of WeakBox<UIButton>(a1 + 28, (uint64_t)v28, (uint64_t (*)(void))type metadata accessor for WeakAttribute<PlatformItemList>?);
    outlined init with take of WeakBox<UIButton>((uint64_t)v28, a4 + 132, (uint64_t (*)(void))type metadata accessor for WeakAttribute<PlatformItemList>?);
    int v24 = *(unsigned __int8 *)(a1 + 37);
    *(unsigned char *)(a4 + 141) = v24;
    *(unsigned char *)(a4 + 142) = *(unsigned char *)(a1 + 38);
    outlined init with take of WeakAttribute<WeakBox<UIButton>?>?(a1 + 40, (uint64_t)v27);
    outlined init with take of WeakAttribute<WeakBox<UIButton>?>?((uint64_t)v27, a4 + 144);
    uint64_t v13 = *(int *)(v9 + 88);
    *(void *)(a4 + v13) = a2;
    uint64_t v14 = *(void *)(a1 + 56);
    uint64_t v15 = *(void *)(a1 + 64);
    *uint64_t v10 = v14;
    v10[1] = v15;
    outlined copy of AppIntentExecutor?(v11);
    uint64_t v16 = outlined copy of AppIntentExecutor?(v14);
    a3(v16);
    uint64_t result = (uint64_t)outlined retain of UIKitButtonConfiguration((void *)a1, (void (*)(void, void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    if ((v25 & 1) != 0 && (a2 & 0x80) == 0)
    {
      a2 |= 0x80uLL;
      *(void *)(a4 + v13) = a2;
    }
    int v18 = *(unsigned __int8 *)(a1 + 49);
    BOOL v19 = (a2 & 0x100) == 0;
    char v20 = v18 & v19;
    if ((v18 & v19) != 0) {
      uint64_t v21 = a2 | 0x100;
    }
    else {
      uint64_t v21 = a2;
    }
    BOOL v23 = (v21 & 1) == 0 && v24 == 1;
    if ((v20 & 1) != 0 || v23) {
      *(void *)(a4 + v13) = v21 | v23;
    }
  }
  return result;
}

uint64_t UIKitButtonAdaptor.init(configuration:options:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  int v8 = *(unsigned __int8 *)(a1 + 24);
  char v31 = *(unsigned char *)(a1 + 25);
  uint64_t v30 = *(void *)(a1 + 28);
  char v9 = *(unsigned char *)(a1 + 36);
  int v10 = *(unsigned __int8 *)(a1 + 37);
  char v29 = *(unsigned char *)(a1 + 38);
  uint64_t v28 = *(void *)(a1 + 40);
  char v27 = *(unsigned char *)(a1 + 48);
  int v33 = *(unsigned __int8 *)(a1 + 49);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  unint64_t v13 = lazy protocol witness table accessor for type AnyButtonStyleType.Unknown and conformance AnyButtonStyleType.Unknown();
  *(void *)a4 = &type metadata for AnyButtonStyleType.Unknown;
  *(void *)(a4 + 8) = v13;
  *(void *)(a4 + 16) = swift_getKeyPath();
  *(unsigned char *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = swift_getKeyPath();
  *(unsigned char *)(a4 + 40) = 0;
  *(void *)(a4 + 48) = swift_getKeyPath();
  *(unsigned char *)(a4 + 56) = 0;
  *(void *)(a4 + 64) = swift_getKeyPath();
  *(unsigned char *)(a4 + 72) = 0;
  *(void *)(a4 + 80) = swift_getKeyPath();
  *(unsigned char *)(a4 + 88) = 0;
  *(void *)(a4 + 96) = swift_getKeyPath();
  *(unsigned char *)(a4 + 104) = 0;
  int v34 = v8;
  if (v8 == 1 && (v9 & 1) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v14 = type metadata accessor for UIKitButtonAdaptor();
    uint64_t v15 = (uint64_t *)(a4 + *(int *)(v14 + 92));
    *(void *)(a4 + 112) = v6;
    *(void *)(a4 + 120) = v7;
    *(unsigned char *)(a4 + 128) = v31;
    *(void *)(a4 + 132) = v30;
    *(unsigned char *)(a4 + 140) = v9;
    *(unsigned char *)(a4 + 141) = v10;
    *(unsigned char *)(a4 + 142) = v29;
    *(void *)(a4 + 144) = v28;
    *(unsigned char *)(a4 + 152) = v27;
    int v16 = v10;
    uint64_t v17 = *(int *)(v14 + 88);
    *(void *)(a4 + v17) = a2;
    *uint64_t v15 = v11;
    v15[1] = v12;
    outlined copy of AppIntentExecutor?(v6);
    uint64_t v18 = outlined copy of AppIntentExecutor?(v11);
    a3(v18);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v6);
    uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v11);
    BOOL v20 = (a2 & 0x80) == 0;
    char v21 = v34 & v20;
    if ((v34 & v20) != 0) {
      uint64_t v22 = a2 | 0x80;
    }
    else {
      uint64_t v22 = a2;
    }
    BOOL v23 = (v22 & 0x100) == 0;
    char v24 = v33 & v23;
    if ((v33 & v23) != 0) {
      v22 |= 0x100uLL;
    }
    BOOL v26 = (v22 & 1) == 0 && v16 == 1;
    if ((v21 & 1) != 0 || (v24 & 1) != 0 || v26) {
      *(void *)(a4 + v17) = v22 | v26;
    }
  }
  return result;
}

uint64_t (*implicit closure #1 in UIKitButtonStyleModifier.ResolvedBody.body.getter(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t *a1)
{
  uint64_t v6 = type metadata accessor for UIKitButtonStyleModifier.ResolvedBody();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x1F4188790](v6);
  int v10 = (char *)&v14 - v9;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v14 - v9, a1, v6, v8);
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a2;
  *(void *)(v12 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v12 + v11, v10, v6);
  return partial apply for implicit closure #2 in implicit closure #1 in UIKitButtonStyleModifier.ResolvedBody.body.getter;
}

uint64_t UIKitButtonStyleModifier.ResolvedBody.transform(itemList:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for PlatformItemList.Item();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5 - 8);
  double v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  unint64_t v11 = (char *)&v18 - v10;
  PlatformItemList.mergedContentItem.getter(*a1, (uint64_t)&v18 - v10);
  swift_bridgeObjectRelease();
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  if (UIKitButtonStyleModifier.ResolvedBody.isEnabled.getter(a2))
  {
    uint64_t v14 = v2 + *(int *)(a2 + 36);
    uint64_t v12 = *(void *)(v14 + 8);
    uint64_t v13 = *(void *)(v14 + 16);
    outlined copy of AppIntentExecutor?(v12);
  }
  outlined consume of PlatformItemList.Item.SelectionBehavior?(*((void *)v11 + 50), *((void *)v11 + 51), *((void *)v11 + 52), *((void *)v11 + 53), *((void *)v11 + 54), *((void *)v11 + 55));
  *((void *)v11 + 50) = 1;
  *((void *)v11 + 51) = v12;
  *((void *)v11 + 52) = v13;
  *(_OWORD *)(v11 + 424) = 0u;
  *(_OWORD *)(v11 + 440) = 0u;
  *(_OWORD *)(v11 + 449) = 0u;
  v11[56] = UIKitButtonStyleModifier.ResolvedBody.isEnabled.getter(a2) & 1;
  outlined init with copy of WeakBox<UIButton>?((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  type metadata accessor for WeakBox<UIButton>?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBBE00]);
  unint64_t v15 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_18834BB80;
  outlined init with take of WeakBox<UIButton>((uint64_t)v8, v16 + v15, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  *a1 = v16;
  return outlined destroy of UIKitSystemButtonConfigurationModifier((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
}

uint64_t protocol witness for StyleModifier.init(style:) in conformance UIKitButtonStyleModifier<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return OptionalFormatInputToString.init(format:)(a1, *(void *)(a2 + 16), a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance UIKitButtonStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF78](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitButtonStyleModifier<A>()
{
  return static StyleModifier._viewListCount(inputs:body:)();
}

uint64_t UIKitSystemButtonConfigurationModifier.styleBody(configuration:)@<X0>(long long *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent(0);
  MEMORY[0x1F4188790](v5);
  double v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v9 = a1[3];
  long long v26 = a1[2];
  long long v27 = v9;
  uint64_t v28 = *((void *)a1 + 8);
  long long v10 = a1[1];
  long long v24 = *a1;
  long long v25 = v10;
  if (BYTE8(v10))
  {
    BOOL v19 = &v8[*(int *)(v6 + 20)];
    uint64_t v20 = type metadata accessor for UIButton.Configuration();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v19, v2, v20);
    long long v21 = v27;
    *((_OWORD *)v8 + 2) = v26;
    *((_OWORD *)v8 + 3) = v21;
    *((void *)v8 + 8) = v28;
    long long v22 = v25;
    *(_OWORD *)double v8 = v24;
    *((_OWORD *)v8 + 1) = v22;
    outlined init with copy of WeakBox<UIButton>?((uint64_t)v8, (uint64_t)a2, type metadata accessor for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent);
    type metadata accessor for _ConditionalContent<UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent, UIKitButtonAdaptor<ViewContent<HStack<UIKitButtonConfiguration.Label>>>>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent, UIKitButtonAdaptor<ViewContent<HStack<UIKitButtonConfiguration.Label>>>>.Storage, MEMORY[0x1E4F40568]);
    swift_storeEnumTagMultiPayload();
    outlined retain of UIKitButtonConfiguration(&v24, (void (*)(void, void))outlined copy of AppIntentExecutor?, (void (*)(uint64_t, uint64_t))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    return outlined destroy of UIKitSystemButtonConfigurationModifier((uint64_t)v8, type metadata accessor for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent);
  }
  else
  {
    MEMORY[0x1F4188790](v6);
    *(void *)&v23[-1] = &v24;
    *((void *)&v23[-1] + 1) = v2;
    outlined retain of UIKitButtonConfiguration(&v24, (void (*)(void, void))outlined copy of AppIntentExecutor?, (void (*)(uint64_t, uint64_t))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    specialized UIKitButtonAdaptor.init(configuration:options:content:)((uint64_t)&v24, 0, (void (*)(_OWORD *__return_ptr, uint64_t))partial apply for closure #1 in UIKitSystemButtonConfigurationModifier.viewContent(configuration:), v23);
    long long v11 = v23[11];
    a2[10] = v23[10];
    a2[11] = v11;
    long long v12 = v23[13];
    a2[12] = v23[12];
    a2[13] = v12;
    long long v13 = v23[7];
    a2[6] = v23[6];
    a2[7] = v13;
    long long v14 = v23[9];
    a2[8] = v23[8];
    a2[9] = v14;
    long long v15 = v23[3];
    a2[2] = v23[2];
    a2[3] = v15;
    long long v16 = v23[5];
    a2[4] = v23[4];
    a2[5] = v16;
    long long v17 = v23[1];
    *a2 = v23[0];
    a2[1] = v17;
    type metadata accessor for _ConditionalContent<UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent, UIKitButtonAdaptor<ViewContent<HStack<UIKitButtonConfiguration.Label>>>>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent, UIKitButtonAdaptor<ViewContent<HStack<UIKitButtonConfiguration.Label>>>>.Storage, MEMORY[0x1E4F40568]);
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t closure #1 in UIKitSystemButtonConfigurationModifier.viewContent(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_0(a1, (uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for ButtonRole?, (uint64_t)&type metadata for ButtonRole);
  uint64_t v5 = a2 + *(int *)(type metadata accessor for UIKitSystemButtonConfigurationModifier(0) + 20);
  uint64_t v6 = *(void *)v5;
  char v7 = *(unsigned char *)(v5 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v5, v7);
  char v8 = specialized Environment.wrappedValue.getter(v6, v7);
  outlined consume of Environment<Bool>.Content(v6, v7);
  _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_0((uint64_t)v10, a3 + 17, (unint64_t *)&lazy cache variable for type metadata for ButtonRole?, (uint64_t)&type metadata for ButtonRole);
  *(void *)(a3 + 24) = 1;
  *(unsigned char *)(a3 + 32) = v8 & 1;
  uint64_t result = static VerticalAlignment.center.getter();
  *(void *)a3 = result;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

double static UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent._makeView(view:inputs:)@<D0>(double *a1@<X8>)
{
  type metadata accessor for WeakBox<UIButton>?(0, &lazy cache variable for type metadata for _GraphValue<UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent>, type metadata accessor for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  swift_getKeyPath();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for HStack<UIKitButtonConfiguration.Label>(0, &lazy cache variable for type metadata for HStack<UIKitButtonConfiguration.Label>, (uint64_t)&type metadata for UIKitButtonConfiguration.Label, (uint64_t)&protocol witness table for UIKitButtonConfiguration.Label, MEMORY[0x1E4F415B8]);
  type metadata accessor for Focus<UIKitButtonConfiguration, HStack<UIKitButtonConfiguration.Label>>();
  lazy protocol witness table accessor for type UIKitSystemButtonConfigurationModifier and conformance UIKitSystemButtonConfigurationModifier(&lazy protocol witness table cache variable for type Focus<UIKitButtonConfiguration, HStack<UIKitButtonConfiguration.Label>> and conformance Focus<A, B>, (void (*)(uint64_t))type metadata accessor for Focus<UIKitButtonConfiguration, HStack<UIKitButtonConfiguration.Label>>);
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  id v1 = (id)AGSubgraphGetCurrent();
  if (!v1) {
    __break(1u);
  }
  uint64_t v2 = v1;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for PlatformItemListGenerator<LabelPlatformItemListFlags, HStack<UIKitButtonConfiguration.Label>>();
  lazy protocol witness table accessor for type UIKitSystemButtonConfigurationModifier and conformance UIKitSystemButtonConfigurationModifier(&lazy protocol witness table cache variable for type PlatformItemListGenerator<LabelPlatformItemListFlags, HStack<UIKitButtonConfiguration.Label>> and conformance PlatformItemListGenerator<A, B>, (void (*)(uint64_t))type metadata accessor for PlatformItemListGenerator<LabelPlatformItemListFlags, HStack<UIKitButtonConfiguration.Label>>);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  id v3 = v2;
  Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  specialized static UseUIButtonConfigurationPredicate.evaluate(inputs:)();
  _GraphInputs.suppressTrailingInset.getter();
  lazy protocol witness table accessor for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  _GraphInputs.interfaceIdiom.getter();
  AnyInterfaceIdiom.accepts<A>(_:)();
  _GraphValue.value.getter();
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitButtonAdaptor<PlatformItemContent>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, MEMORY[0x1E4F3FBA0]);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor and conformance UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  lazy protocol witness table accessor for type ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
  static View.makeDebuggableView(view:inputs:)();
  uint64_t v4 = static StyleContextAcceptsPredicate.evaluate(inputs:)();
  if (v4)
  {
    MEMORY[0x1F4188790](v4);
    MEMORY[0x1F4188790](v5);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  *(void *)a1 = v8;
  double result = v9;
  a1[1] = v9;
  return result;
}

uint64_t _GraphInputs.suppressTrailingInset.getter()
{
  if ((AnyInterfaceIdiom.accepts<A>(_:)() & 1) == 0
    && ((static StyleContextAcceptsPredicate.evaluate(inputs:)() & 1) != 0
     || (static StyleContextAcceptsPredicate.evaluate(inputs:)() & 1) != 0))
  {
    return static SemanticFeature.isEnabled.getter() & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t implicit closure #1 in static UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent._makeView(view:inputs:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

void protocol witness for View.body.getter in conformance UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent()
{
}

uint64_t UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor.value.getter@<X0>(unint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char v3 = a2;
  int v4 = a1;
  uint64_t v24 = a3;
  unint64_t v5 = HIDWORD(a1);
  int v23 = a2 & 1;
  int v6 = a2 & 0x100;
  unsigned int v7 = a2 & 0x10000;
  int v8 = a2 & 0x1000000;
  type metadata accessor for UIKitButtonAdaptor<PlatformItemContent>(0);
  MEMORY[0x1F4188790](v9 - 8);
  long long v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1F4188790](v12 - 8);
  long long v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  AGGraphGetValue();
  uint64_t v15 = swift_bridgeObjectRetain();
  PlatformItemList.mergedContentItem.getter(v15, (uint64_t)v14);
  swift_bridgeObjectRelease();
  type metadata accessor for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent(0);
  uint64_t Value = AGGraphGetValue();
  v25[0] = *(_OWORD *)Value;
  long long v18 = *(_OWORD *)(Value + 32);
  long long v17 = *(_OWORD *)(Value + 48);
  long long v19 = *(_OWORD *)(Value + 16);
  uint64_t v26 = *(void *)(Value + 64);
  v25[2] = v18;
  v25[3] = v17;
  v25[1] = v19;
  if (v3)
  {
    if (v6)
    {
      if (v7) {
        uint64_t v20 = 56;
      }
      else {
        uint64_t v20 = 24;
      }
      if (!v8) {
        goto LABEL_21;
      }
    }
    else
    {
      if (v7) {
        uint64_t v20 = 40;
      }
      else {
        uint64_t v20 = 8;
      }
      if (!v8) {
        goto LABEL_21;
      }
    }
LABEL_20:
    v20 |= 0x40uLL;
    goto LABEL_21;
  }
  if (!v6)
  {
    uint64_t v20 = v7 >> 11;
    if (!v8) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v7) {
    uint64_t v20 = 48;
  }
  else {
    uint64_t v20 = 16;
  }
  if (v8) {
    goto LABEL_20;
  }
LABEL_21:
  MEMORY[0x1F4188790](Value);
  *(void *)&v22[-32] = v14;
  *(_DWORD *)&v22[-24] = v4;
  *(_DWORD *)&v22[-20] = v5;
  v22[-16] = v23;
  v22[-15] = BYTE1(v6);
  v22[-14] = BYTE2(v7);
  v22[-13] = HIBYTE(v8);
  outlined retain of UIKitButtonConfiguration(v25, (void (*)(void, void))outlined copy of AppIntentExecutor?, (void (*)(uint64_t, uint64_t))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  specialized UIKitButtonAdaptor.init(configuration:options:content:)((uint64_t)v25, v20, (void (*)(uint64_t))partial apply for closure #1 in UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor.value.getter, (uint64_t)v11);
  specialized View.accessibility(platformItem:)((uint64_t)v14, v24);
  outlined destroy of UIKitSystemButtonConfigurationModifier((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for UIKitButtonAdaptor<PlatformItemContent>);
  return outlined destroy of UIKitSystemButtonConfigurationModifier((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
}

uint64_t closure #1 in UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of WeakBox<UIButton>?(a1, a2, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  uint64_t v3 = type metadata accessor for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent(0);
  uint64_t Value = (char *)AGGraphGetValue();
  char v5 = *Value;
  char v6 = Value[1];
  unsigned int v7 = &Value[*(int *)(v3 + 20)];
  uint64_t v8 = type metadata accessor for PlatformItemContent(0);
  uint64_t v9 = a2 + *(int *)(v8 + 24);
  uint64_t v10 = type metadata accessor for UIButton.Configuration();
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v9, v7, v10);
  uint64_t v12 = (unsigned char *)(a2 + *(int *)(v8 + 20));
  *uint64_t v12 = v5;
  v12[1] = v6;
  return result;
}

void specialized View.accessibility(platformItem:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a1 + 528);
  if (v6)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v6 = Dictionary.init(minimumCapacity:)();
  }
  uint64_t v42 = v6;
  uint64_t v7 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v7, (uint64_t)&v32);
  swift_bridgeObjectRelease();
  uint64_t v8 = v32;
  swift_bridgeObjectRelease();
  if (!v8) {
    goto LABEL_7;
  }
  uint64_t v9 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v9, (uint64_t)&v32);
  swift_bridgeObjectRelease();
  if (v32)
  {
    uint64_t v10 = v32[2];
    swift_bridgeObjectRelease();
    if (v10)
    {
LABEL_9:
      uint64_t v38 = v6;
      static AccessibilityAttachment.properties(_:)();
      uint64_t v26 = v32;
      uint64_t v27 = v33;
      type metadata accessor for Attribute<PlatformItemList>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
      uint64_t v28 = swift_allocObject();
      *(void *)(v28 + 16) = v26;
      *(void *)(v28 + 24) = v27;
      outlined init with copy of WeakBox<UIButton>?(v3, a2, (uint64_t (*)(void))type metadata accessor for UIKitButtonAdaptor<PlatformItemContent>);
      swift_bridgeObjectRelease();
      type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitButtonAdaptor<PlatformItemContent>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, MEMORY[0x1E4F3FBA0]);
      uint64_t v30 = (uint64_t *)(a2 + *(int *)(v29 + 36));
      *uint64_t v30 = v28;
      v30[1] = 0;
      return;
    }
LABEL_7:
    long long v11 = *(void **)a1;
    if (*(void *)a1)
    {
      type metadata accessor for Attribute<PlatformItemList>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4FBBE00]);
      uint64_t v12 = swift_allocObject();
      *(_OWORD *)(v12 + 16) = xmmword_18834BB80;
      uint64_t v36 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
      long long v32 = v11;
      char v31 = v11;
      AccessibilityText.init(_:)();
      uint64_t v13 = v3;
      long long v14 = (void *)v38;
      uint64_t v15 = v39;
      char v16 = v40;
      long long v32 = (void *)v38;
      uint64_t v33 = v39;
      char v34 = v40;
      char v35 = v41;
      uint64_t v17 = AccessibilityText.text.getter();
      uint64_t v19 = v18;
      char v21 = v20;
      uint64_t v23 = v22;
      uint64_t v24 = v14;
      uint64_t v3 = v13;
      outlined consume of AccessibilityText.Storage(v24, v15, v16);
      *(void *)(v12 + 32) = v17;
      *(void *)(v12 + 40) = v19;
      *(unsigned char *)(v12 + 48) = v21 & 1;
      *(void *)(v12 + 56) = v23;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool?>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>, &lazy cache variable for type metadata for AccessibilityLabelStorage?, MEMORY[0x1E4F40E40], MEMORY[0x1E4F41090]);
      uint64_t v36 = v25;
      unint64_t v37 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>();
      long long v32 = (void *)v12;
      LOBYTE(v33) = 2;
      specialized Dictionary.subscript.setter((uint64_t)&v32, MEMORY[0x1E4F40B88]);

      uint64_t v6 = v42;
    }
    goto LABEL_9;
  }
  __break(1u);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitButtonAdaptor<PlatformItemContent>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, MEMORY[0x1E4F3FBA0]);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor@<X0>(uint64_t a1@<X8>)
{
  if (*(unsigned char *)(v1 + 9)) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  int v3 = v2 | *(unsigned __int8 *)(v1 + 8);
  if (*(unsigned char *)(v1 + 10)) {
    int v4 = 0x10000;
  }
  else {
    int v4 = 0;
  }
  if (*(unsigned char *)(v1 + 11)) {
    int v5 = 0x1000000;
  }
  else {
    int v5 = 0;
  }
  return UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor.value.getter(*(void *)v1, v3 | v4 | v5, a1);
}

uint64_t closure #1 in UIKitSystemButtonConfigurationModifier.PlatformItemTransform.value.getter(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PlatformItemList.Item();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRelease();
  PlatformItemList.mergedContentItem.getter(a2, (uint64_t)v7);
  type metadata accessor for WeakBox<UIButton>?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBBE00]);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_18834BB80;
  uint64_t result = outlined init with take of WeakBox<UIButton>((uint64_t)v7, v9 + v8, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  *a1 = v9;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance UIKitSystemButtonConfigurationModifier.PlatformItemTransform@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)AGGraphGetValue();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = partial apply for closure #1 in UIKitSystemButtonConfigurationModifier.PlatformItemTransform.value.getter;
  *(void *)(v4 + 24) = v3;
  *a1 = thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ()partial apply;
  a1[1] = v4;

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for StyleModifier.init(style:) in conformance UIKitSystemButtonConfigurationModifier@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for UIButton.Configuration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a3, a1, v6);
  uint64_t v7 = a3 + *(int *)(a2 + 20);
  uint64_t result = swift_getKeyPath();
  *(void *)uint64_t v7 = result;
  *(unsigned char *)(v7 + 8) = 0;
  return result;
}

uint64_t protocol witness for StyleModifier.style.getter in conformance UIKitSystemButtonConfigurationModifier@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UIButton.Configuration();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t protocol witness for StyleModifier.style.setter in conformance UIKitSystemButtonConfigurationModifier(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UIButton.Configuration();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance UIKitSystemButtonConfigurationModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = lazy protocol witness table accessor for type UIKitSystemButtonConfigurationModifier and conformance UIKitSystemButtonConfigurationModifier(&lazy protocol witness table cache variable for type UIKitSystemButtonConfigurationModifier and conformance UIKitSystemButtonConfigurationModifier, (void (*)(uint64_t))type metadata accessor for UIKitSystemButtonConfigurationModifier);

  return MEMORY[0x1F40FDF88](a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance UIKitSystemButtonConfigurationModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = lazy protocol witness table accessor for type UIKitSystemButtonConfigurationModifier and conformance UIKitSystemButtonConfigurationModifier(&lazy protocol witness table cache variable for type UIKitSystemButtonConfigurationModifier and conformance UIKitSystemButtonConfigurationModifier, (void (*)(uint64_t))type metadata accessor for UIKitSystemButtonConfigurationModifier);

  return MEMORY[0x1F40FDF78](a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance UIKitSystemButtonConfigurationModifier()
{
  return static StyleModifier._viewListCount(inputs:body:)();
}

void protocol witness for ViewModifier.body(content:) in conformance UIKitSystemButtonConfigurationModifier()
{
}

uint64_t UIKitButtonAdaptor.resolvedOptions.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (ValueMetadata **)((char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v7 = *(unint64_t *)((char *)v1 + *(int *)(v6 + 88));
  unint64_t v8 = *v1;
  lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle();
  (*(void (**)(ValueMetadata **, ValueMetadata **, uint64_t))(v3 + 16))(v5, v1, a1);
  if (v8 == &type metadata for PlainButtonStyle)
  {
    (*(void (**)(ValueMetadata **, uint64_t))(v3 + 8))(v5, a1);
    if ((v7 & 2) != 0) {
      goto LABEL_8;
    }
LABEL_7:
    v7 |= 2uLL;
    goto LABEL_8;
  }
  uint64_t v9 = *v5;
  (*(void (**)(ValueMetadata **, uint64_t))(v3 + 8))(v5, a1);
  lazy protocol witness table accessor for type AnyButtonStyleType.Unknown and conformance AnyButtonStyleType.Unknown();
  if (v9 == &type metadata for AnyButtonStyleType.Unknown && (v7 & 2) == 0) {
    goto LABEL_7;
  }
LABEL_8:
  uint64_t v11 = *v1;
  lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle();
  uint64_t v12 = (v7 >> 2) & 1;
  if (v11 != &type metadata for BorderedButtonStyle) {
    LODWORD(v12) = 1;
  }
  if (v12) {
    return v7;
  }
  else {
    return v7 | 4;
  }
}

id UIKitButtonAdaptor.makeCoordinator()()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 120);
  id v3 = objc_allocWithZone((Class)type metadata accessor for Coordinator());
  outlined copy of AppIntentExecutor?(v1);
  id v4 = specialized Coordinator.init(action:)(v1, v2);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
  return v4;
}

id UIKitButtonAdaptor.makeUIView(context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for WeakBox<UIButton>?(0, &lazy cache variable for type metadata for UIButton.Configuration?, MEMORY[0x1E4FB1290], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8);
  unint64_t v8 = (char *)&v41 - v7;
  uint64_t v9 = type metadata accessor for UIButton.Configuration.Indicator();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UIButton.Configuration();
  uint64_t v41 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = *(void *)(a1 + 40);
  char v15 = UIKitButtonAdaptor.resolvedOptions.getter(a2);
  uint64_t v16 = *(void *)(a2 + 24);
  uint64_t v17 = *(uint64_t (**)(void))(v16 + 24);
  uint64_t v43 = *(void *)(a2 + 16);
  uint64_t v44 = v16;
  uint64_t v18 = (void *)v17();
  uint64_t v19 = *(void *)(v2 + 16);
  char v20 = *(unsigned char *)(v3 + 24);
  id v21 = v18;
  outlined copy of Environment<Bool>.Content(v19, v20);
  specialized Environment.wrappedValue.getter(v19, v20, &aBlock);
  outlined consume of Environment<Bool>.Content(v19, v20);
  objc_msgSend(v21, sel_setPreferredMenuElementOrder_, qword_1883515E8[(char)aBlock]);

  if ((v15 & 8) != 0)
  {
    UIKitButtonAdaptor.resolvedConfiguration.getter(a2, (uint64_t)v14);
    UIKitButtonAdaptor.resolvedIndicator.getter(a2, (uint64_t)v11);
    UIButton.Configuration.indicator.setter();
    UIButton.Configuration.titleLineBreakMode.setter();
    LODWORD(v22) = 1132068864;
    objc_msgSend(v21, sel_setContentCompressionResistancePriority_forAxis_, 0, v22);
    uint64_t v23 = v8;
    uint64_t v24 = v41;
    if ((v15 & 0x20) != 0)
    {
      uint64_t v25 = *(void *)(v3 + 32);
      uint64_t v26 = *(unsigned __int8 *)(v3 + 40);
      id v27 = v21;
      outlined copy of Environment<Color?>.Content(v25, v26);
      uint64_t v28 = specialized Environment.wrappedValue.getter(v25, v26);
      outlined consume of Environment<Color?>.Content(v25, v26);
      if (!v28) {
        uint64_t v28 = static Color.secondary.getter();
      }
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
      id v29 = UIColor.init(_:)(v28);
      objc_msgSend(v27, sel_setTintColor_, v29);

      UIButton.Configuration.titleLineBreakMode.setter();
    }
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v23, v14, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v23, 0, 1, v12);
    id v30 = v21;
    UIButton.configuration.setter();

    (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v12);
  }
  if ((Axis.Set.contains(_:)() & 1) == 0)
  {
    LODWORD(v31) = 1144750080;
    objc_msgSend(v21, sel_setContentHuggingPriority_forAxis_, 0, v31);
  }
  if ((Axis.Set.contains(_:)() & 1) == 0)
  {
    LODWORD(v32) = 1144750080;
    objc_msgSend(v21, sel_setContentHuggingPriority_forAxis_, 1, v32);
  }
  objc_msgSend(v21, sel_addTarget_action_forControlEvents_, v42, sel_primaryActionTriggered_, 0x2000);
  uint64_t v33 = swift_allocObject();
  swift_unknownObjectWeakInit();
  char v34 = (void *)swift_allocObject();
  uint64_t v35 = v44;
  _OWORD v34[2] = v43;
  v34[3] = v35;
  v34[4] = v33;
  unint64_t v49 = partial apply for closure #1 in UIKitButtonAdaptor.makeUIView(context:);
  uint64_t v50 = v34;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v46 = 1107296256;
  uint64_t v47 = thunk for @escaping @callee_guaranteed () -> (@unowned Bool);
  uint64_t v48 = &block_descriptor_132;
  uint64_t v36 = _Block_copy(&aBlock);
  swift_release();
  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = v36;
  unint64_t v49 = partial apply for thunk for @escaping @callee_unowned @convention(block) () -> (@unowned Bool);
  uint64_t v50 = (void *)v37;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v46 = 1107296256;
  uint64_t v47 = thunk for @escaping @callee_guaranteed () -> (@unowned Bool);
  uint64_t v48 = &block_descriptor_138;
  uint64_t v38 = _Block_copy(&aBlock);
  id v39 = v21;
  _Block_copy(v36);
  swift_release();
  objc_msgSend(v39, sel_setAccessibilitySwiftUIDefaultActionStoredBlock_, v38);
  _Block_release(v38);

  _Block_release(v36);
  return v39;
}

uint64_t UIKitButtonAdaptor.resolvedConfiguration.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for UIButton.Configuration();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = &v23[-v10];
  uint64_t v12 = *(ValueMetadata **)v2;
  lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle();
  if (v12 == &type metadata for PlainButtonStyle)
  {
    static UIButton.Configuration.plain()();
  }
  else
  {
    lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle();
    if (v12 != &type metadata for BorderlessButtonStyle)
    {
      lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle();
      if (v12 == &type metadata for BorderedButtonStyle)
      {
        static UIButton.Configuration.bordered()();
        goto LABEL_9;
      }
      lazy protocol witness table accessor for type BorderedProminentButtonStyle and conformance BorderedProminentButtonStyle();
      if (v12 == &type metadata for BorderedProminentButtonStyle)
      {
        static UIButton.Configuration.borderedProminent()();
        goto LABEL_9;
      }
    }
    static UIButton.Configuration.borderless()();
  }
LABEL_9:
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v6 + 32))(a2, v11, v5);
  uint64_t result = UIKitButtonAdaptor.resolvedOptions.getter(a1);
  if ((result & 0x10) != 0)
  {
    uint64_t v14 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16);
    v14(v11, a2, v5);
    static UIButton.Configuration.borderless()();
    char v15 = static UIButton.Configuration.== infix(_:_:)();
    uint64_t v16 = *(void (**)(unsigned char *, uint64_t))(v6 + 8);
    v16(v8, v5);
    v16(v11, v5);
    if ((v15 & 1) != 0
      || (v14(v11, a2, v5),
          static UIButton.Configuration.plain()(),
          char v17 = static UIButton.Configuration.== infix(_:_:)(),
          v16(v8, v5),
          uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))v16)(v11, v5),
          (v17 & 1) != 0))
    {
      uint64_t v18 = *(void *)(v2 + 96);
      char v19 = *(unsigned char *)(v2 + 104);
      outlined copy of Environment<Bool>.Content(v18, v19);
      char v20 = specialized Environment.wrappedValue.getter(v18, v19);
      uint64_t result = outlined consume of Environment<Bool>.Content(v18, v19);
      if ((v20 & 1) == 0)
      {
        id v21 = (uint64_t (*)(unsigned char *, void))UIButton.Configuration.contentInsets.modify();
        *(void *)(v22 + 24) = 0;
        return v21(v23, 0);
      }
    }
  }
  return result;
}

uint64_t UIKitButtonAdaptor.resolvedIndicator.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(v2 + 142))
  {
    if (*(unsigned char *)(v2 + 142) == 1) {
      id v4 = (unsigned int *)MEMORY[0x1E4FB1280];
    }
    else {
      id v4 = (unsigned int *)MEMORY[0x1E4FB1278];
    }
    uint64_t v9 = *v4;
    uint64_t v10 = type metadata accessor for UIButton.Configuration.Indicator();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 104);
    uint64_t v6 = v10;
    uint64_t v11 = a2;
    uint64_t v12 = v9;
  }
  else
  {
    char v5 = UIKitButtonAdaptor.resolvedOptions.getter(a1);
    uint64_t v6 = type metadata accessor for UIButton.Configuration.Indicator();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104);
    if ((v5 & 0x40) != 0) {
      unint64_t v8 = (unsigned int *)MEMORY[0x1E4FB1280];
    }
    else {
      unint64_t v8 = (unsigned int *)MEMORY[0x1E4FB1288];
    }
    uint64_t v12 = *v8;
    uint64_t v11 = a2;
  }

  return v7(v11, v12, v6);
}

uint64_t closure #1 in UIKitButtonAdaptor.makeUIView(context:)(uint64_t a1)
{
  uint64_t v2 = (NSString *)MEMORY[0x18C115780](0x4774694B49555841, 0xEB0000000065756CLL);
  Class v3 = NSClassFromString(v2);

  if (!v3) {
    return (uint64_t)v3;
  }
  uint64_t v4 = a1 + 16;
  swift_beginAccess();
  uint64_t v5 = MEMORY[0x18C119DF0](a1 + 16);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = (void *)v5;
  swift_beginAccess();
  uint64_t result = MEMORY[0x18C119DF0](v4);
  if (result)
  {
    unint64_t v8 = (void *)result;
    Class v3 = (Class)objc_msgSend(v6, sel__accessibilityShowContextMenuForElement_targetPointValue_, result, 0);

    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

id UIKitButtonAdaptor.updateUIView(_:context:)(char *a1, uint64_t a2, char *a3)
{
  uint64_t v4 = v3;
  char v77 = a1;
  uint64_t v81 = *((void *)a3 - 1);
  MEMORY[0x1F4188790](a1);
  char v79 = (char *)&v77 - ((unint64_t)(v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = v6;
  MEMORY[0x1F4188790](v7);
  char v78 = (char *)&v77 - v8;
  uint64_t v10 = *(void *)v9;
  uint64_t v11 = *(void *)(v9 + 8);
  uint64_t v13 = *(void *)(v9 + 16);
  uint64_t v12 = *(void *)(v9 + 24);
  int v14 = *(unsigned __int8 *)(v9 + 32);
  char v15 = *(unsigned char **)(v9 + 40);
  uint64_t v83 = UIKitButtonAdaptor.resolvedOptions.getter(v16);
  uint64_t v17 = *((void *)v3 + 14);
  uint64_t v18 = *((void *)v3 + 15);
  char v19 = (uint64_t *)&v15[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_action];
  uint64_t v20 = *(void *)&v15[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_action];
  *char v19 = v17;
  v19[1] = v18;
  outlined copy of AppIntentExecutor?(v17);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v20);
  uint64_t v91 = v10;
  uint64_t v92 = v11;
  uint64_t v93 = v13;
  uint64_t v94 = v12;
  uint64_t v85 = v12;
  int v80 = v14;
  char v95 = v14;
  v96 = v15;
  swift_getWitnessTable();
  uint64_t v21 = type metadata accessor for UIViewRepresentableContext();
  UIViewRepresentableContext.environment.getter(v21, v90);
  uint64_t v87 = v11;
  uint64_t v88 = v10;
  uint64_t v86 = v13;
  if (v90[1])
  {
    type metadata accessor for HStack<UIKitButtonConfiguration.Label>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonKeyboardShortcutKey>, (uint64_t)&type metadata for ButtonKeyboardShortcutKey, (uint64_t)&protocol witness table for ButtonKeyboardShortcutKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonKeyboardShortcutKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonKeyboardShortcutKey>, (uint64_t)&type metadata for ButtonKeyboardShortcutKey, (uint64_t)&protocol witness table for ButtonKeyboardShortcutKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for HStack<UIKitButtonConfiguration.Label>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonKeyboardShortcutKey>, (uint64_t)&type metadata for ButtonKeyboardShortcutKey, (uint64_t)&protocol witness table for ButtonKeyboardShortcutKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonKeyboardShortcutKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonKeyboardShortcutKey>, (uint64_t)&type metadata for ButtonKeyboardShortcutKey, (uint64_t)&protocol witness table for ButtonKeyboardShortcutKey);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t v22 = v81;
  swift_release_n();
  uint64_t v84 = v21;
  if (!v92)
  {
    swift_bridgeObjectRelease();
LABEL_12:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  uint64_t v23 = v93;
  int v24 = v94;
  if ((v91 != 13 || v92 != 0xE100000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  if (v23)
  {
LABEL_13:
    uint64_t v25 = v77;
    goto LABEL_14;
  }
  uint64_t v25 = v77;
  if (!v24)
  {
    uint64_t v26 = 1;
    goto LABEL_21;
  }
LABEL_14:
  (*(void (**)(uint64_t *__return_ptr, void))(*((void *)a3 + 3) + 16))(&v91, *((void *)a3 + 2));
  if ((v91 & 0x100) != 0)
  {
    uint64_t v26 = 0;
  }
  else
  {
    uint64_t v27 = 3;
    if (v91 != 1) {
      uint64_t v27 = 0;
    }
    if (v91 == 4) {
      uint64_t v26 = 2;
    }
    else {
      uint64_t v26 = v27;
    }
  }
LABEL_21:
  objc_msgSend(v25, sel_setRole_, v26, v77);
  uint64_t v28 = *(void *)(v4 + 132);
  char v29 = v4[140];
  id v30 = &v15[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_menuAttribute];
  swift_beginAccess();
  *(void *)id v30 = v28;
  v30[8] = v29;
  uint64_t v31 = *((void *)v4 + 6);
  LOBYTE(v28) = v4[56];
  outlined copy of Environment<Bool>.Content(v31, v28);
  char v32 = specialized Environment.wrappedValue.getter(v31, v28);
  outlined consume of Environment<Bool>.Content(v31, v28);
  v15[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_menuControlGroupSize] = v32;
  uint64_t v33 = *((void *)v4 + 8);
  LOBYTE(v28) = v4[72];
  outlined copy of Environment<Bool>.Content(v33, v28);
  specialized Environment.wrappedValue.getter(v33, v28, &v91);
  outlined consume of Environment<Bool>.Content(v33, v28);
  *(void *)&v15[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_effectiveLabelStyle] = v91;
  char v34 = *(void (**)(unsigned char *, _UNKNOWN **))((*MEMORY[0x1E4FBC8C8] & *(void *)v25) + 0x60);
  uint64_t v35 = v15;
  v34(v15, &protocol witness table for Coordinator);
  uint64_t v36 = *(void (**)(char *, char *, char *))(v22 + 16);
  uint64_t v37 = v78;
  v36(v78, v4, a3);
  unint64_t v38 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  uint64_t v39 = swift_allocObject();
  char v40 = (char *)*((void *)a3 + 2);
  uint64_t v81 = *((void *)a3 + 3);
  uint64_t v41 = v81;
  uint64_t v82 = v40;
  *(void *)(v39 + 16) = v40;
  *(void *)(v39 + 24) = v41;
  (*(void (**)(unint64_t, char *, char *))(v22 + 32))(v39 + v38, v37, a3);
  uint64_t v42 = v35;
  uint64_t v43 = (uint64_t (**)(uint64_t))&v35[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_onMenuPresentationChanged];
  uint64_t v44 = *(void *)&v35[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_onMenuPresentationChanged];
  *uint64_t v43 = partial apply for closure #1 in UIKitButtonAdaptor.updateUIView(_:context:);
  v43[1] = (uint64_t (*)(uint64_t))v39;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v44);
  LOBYTE(v39) = v4[140];
  char v45 = v79;
  v36(v79, v4, a3);
  if (v39)
  {
    (*(void (**)(char *, char *))(v22 + 8))(v45, a3);
LABEL_25:
    if ((objc_msgSend(v25, sel_showsMenuAsPrimaryAction) & 1) == 0) {
      goto LABEL_28;
    }
    uint64_t v47 = 0;
    goto LABEL_27;
  }
  uint64_t v46 = *((void *)v45 + 14);
  outlined copy of AppIntentExecutor?(v46);
  (*(void (**)(char *, char *))(v22 + 8))(v45, a3);
  if (v46)
  {
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v46);
    goto LABEL_25;
  }
  if ((objc_msgSend(v25, sel_showsMenuAsPrimaryAction) & 1) == 0)
  {
    uint64_t v47 = 1;
LABEL_27:
    objc_msgSend(v25, sel_setShowsMenuAsPrimaryAction_, v47);
  }
LABEL_28:
  char v79 = a3;
  uint64_t v48 = &v4[*((int *)a3 + 21)];
  uint64_t v91 = v88;
  uint64_t v92 = v87;
  unint64_t v49 = v25;
  uint64_t v93 = v86;
  uint64_t v94 = v85;
  char v50 = v80;
  char v95 = v80;
  uint64_t v51 = v42;
  v96 = v42;
  uint64_t v52 = specialized ReferenceFileDocumentConfiguration.document.getter();
  uint64_t v53 = v81;
  uint64_t v54 = *(void (**)(char *, uint64_t, uint64_t, char *, uint64_t))(v81 + 32);
  swift_retain();
  char v77 = v48;
  v54(v25, v52, v83, v82, v53);
  swift_release();
  uint64_t v55 = *((void *)v4 + 2);
  char v78 = v4;
  LOBYTE(v52) = v4[24];
  outlined copy of Environment<Bool>.Content(v55, v52);
  specialized Environment.wrappedValue.getter(v55, v52, &v91);
  outlined consume of Environment<Bool>.Content(v55, v52);
  objc_msgSend(v25, sel_setPreferredMenuElementOrder_, qword_1883515E8[(char)v91]);
  uint64_t v91 = v88;
  uint64_t v92 = v87;
  uint64_t v93 = v86;
  uint64_t v94 = v85;
  char v95 = v50;
  v96 = v51;
  UIViewRepresentableContext.environment.getter(v84, v89);
  if (v89[1])
  {
    type metadata accessor for HStack<UIKitButtonConfiguration.Label>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarButtonHoverShapeKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarButtonHoverShapeKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarButtonHoverShapeKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarButtonHoverShapeKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for HStack<UIKitButtonConfiguration.Label>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarButtonHoverShapeKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarButtonHoverShapeKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarButtonHoverShapeKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarButtonHoverShapeKey);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t v56 = (uint64_t)v79;
  uint64_t v57 = v78;
  swift_release_n();
  int v58 = (unsigned __int16)v91 | (BYTE2(v91) << 16);
  if ((v91 & 0xFF00) != 0x200)
  {
    uint64_t v59 = (unsigned char *)swift_allocObject();
    v59[16] = v58;
    v59[17] = BYTE1(v58) & 1;
    v59[18] = BYTE2(v58) & 1;
  }
  UIButton.pointerStyleProvider.setter();
  uint64_t v60 = *((void *)v57 + 10);
  char v61 = v57[88];
  outlined copy of Environment<Bool>.Content(v60, v61);
  specialized Environment.wrappedValue.getter(v60, v61, &v91);
  outlined consume of Environment<Bool>.Content(v60, v61);
  objc_msgSend(v49, sel_setSpringLoaded_, v91 == 1);
  if ((v57[140] & 1) == 0)
  {
    if (v83)
    {
      uint64_t v63 = (*(uint64_t (**)(char *, char *))(v81 + 56))(v49, v82);
      uint64_t v64 = (uint64_t *)&v51[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_menuTitle];
      *uint64_t v64 = v63;
      v64[1] = v65;
    }
    else
    {
      unint64_t v62 = &v51[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_menuTitle];
      *unint64_t v62 = 0;
      v62[1] = 0;
    }
    swift_bridgeObjectRelease();
    id v66 = objc_msgSend(v49, sel_menu);

    if (!v66)
    {
      if ((UIKitButtonAdaptor.resolvedOptions.getter(v56) & 0x80) != 0)
      {
        __int16 v69 = Coordinator.makeMenu()();
        objc_msgSend(v49, sel_setMenu_, v69);
        if (!v69)
        {
LABEL_46:
          objc_msgSend(v49, sel_setChangesSelectionAsPrimaryAction_, ((unint64_t)UIKitButtonAdaptor.resolvedOptions.getter(v56) >> 7) & 1);
          objc_msgSend(v49, sel_addTarget_action_forControlEvents_, v51, sel_menuActionTriggered_, 0x4000);
          return objc_msgSend(v49, sel_setSelected_, ((unint64_t)UIKitButtonAdaptor.resolvedOptions.getter(v56) >> 8) & 1);
        }
        if ((v57[152] & 1) == 0)
        {
          uint64_t Attribute = AGWeakAttributeGetAttribute();
          if (Attribute != *MEMORY[0x1E4F4E7A0])
          {
            MEMORY[0x1F4188790](Attribute);
            char v72 = (char *)v81;
            *(&v77 - 4) = v82;
            *(&v77 - 3) = v72;
            MEMORY[0x1F4188790](v73);
            uint64_t v75 = partial apply for closure #3 in UIKitButtonAdaptor.updateUIView(_:context:);
            v76._rawuint64_t Value = v74;
            AGGraphMutateAttribute();

            goto LABEL_46;
          }
        }
      }
      else
      {
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
        v67._countAndFlagsBits = 0;
        v67._object = (void *)0xE000000000000000;
        v97.value.super.isa = 0;
        v97.is_nil = 0;
        UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(MEMORY[0x1E4FBC860], v67, (Swift::String_optional)0, v97, 0, 0xFFFFFFFFFFFFFFFFLL, MEMORY[0x1E4FBC860], v76);
        __int16 v69 = v68;
        objc_msgSend(v49, sel_setMenu_, v68);
      }

      goto LABEL_46;
    }
  }
  return objc_msgSend(v49, sel_setSelected_, ((unint64_t)UIKitButtonAdaptor.resolvedOptions.getter(v56) >> 8) & 1);
}

uint64_t closure #1 in UIKitButtonAdaptor.updateUIView(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UIKitButtonAdaptor();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 64))(a1, a3, a4);
  uint64_t v10 = (uint64_t (**)(uint64_t))(a2 + *(int *)(v8 + 92));
  if (*v10) {
    return (*v10)(a1 & 1);
  }
  return result;
}

uint64_t closure #2 in UIKitButtonAdaptor.updateUIView(_:context:)(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  __int16 v4 = a4;
  int v36 = a4;
  type metadata accessor for WeakBox<UIButton>?(0, (unint64_t *)&lazy cache variable for type metadata for UIPointerShape?, MEMORY[0x1E4FB0DD8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = &v35[-v7];
  uint64_t v37 = type metadata accessor for UIPointerEffect();
  uint64_t v9 = *(void *)(v37 - 8);
  MEMORY[0x1F4188790](v37);
  uint64_t v11 = &v35[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = type metadata accessor for UIPointerShape();
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = &v35[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  objc_msgSend(a1, sel_bounds, v14);
  ToolbarButtonHoverShape.adjustedRect(in:)(v4 & 0x1FF, v17, v18, v19, v20);
  *uint64_t v16 = v21;
  v16[1] = v22;
  void v16[2] = v23;
  v16[3] = v24;
  v16[4] = 0x4020000000000000;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v16, *MEMORY[0x1E4FB0DC8], v12);
  uint64_t v25 = (void *)UIPointerEffect.preview.getter();
  id v26 = objc_msgSend(v25, sel_view);

  id v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1B28]), sel_init);
  uint64_t v28 = (void *)UIPointerEffect.preview.getter();
  id v29 = objc_msgSend(v28, sel_target);

  id v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1D48]), sel_initWithView_parameters_target_, v26, v27, v29);
  uint64_t v31 = *(void (**)(void *, void, uint64_t))(v9 + 104);
  char v32 = (unsigned int *)MEMORY[0x1E4FB0E90];
  *uint64_t v11 = v30;
  if ((v36 & 0x10100) != 0) {
    char v32 = (unsigned int *)MEMORY[0x1E4FB0E70];
  }
  v31(v11, *v32, v37);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPointerStyle);
  (*(void (**)(unsigned char *, void *, uint64_t))(v13 + 16))(v8, v16, v12);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v13 + 56))(v8, 0, 1, v12);
  uint64_t v33 = UIPointerStyle.init(effect:shape:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v16, v12);
  return v33;
}

void *Coordinator.makeMenu()()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_menuAttribute;
  uint64_t v3 = swift_beginAccess();
  __int16 v4 = 0;
  if ((*(unsigned char *)(v2 + 8) & 1) == 0)
  {
    MEMORY[0x1F4188790](v3);
    static Update.ensure<A>(_:)();
    if (*(void *)(v29 + 16))
    {
      uint64_t v5 = *(ValueMetadata **)(v1
                             + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_effectiveLabelStyle);
      if (v5)
      {
        if (v5 == &type metadata for TitleAndIconLabelStyle) {
          uint64_t v6 = 16;
        }
        else {
          uint64_t v6 = 16 * (v5 == &type metadata for IconOnlyLabelStyle);
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      static Semantics.v6.getter();
      if (isLinkedOnOrAfter(_:)()) {
        v7.value = (UIMenuIdentifier)v6;
      }
      else {
        v7.value = 0;
      }
      uint64_t v8 = *(void **)(v1 + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_menuTitle + 8);
      uint64_t v28 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_menuTitle);
      if (v8)
      {
        v27.value = v7.value;
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
        UIMenuElementSize v9 = MEMORY[0x1E4FBC860];
        v30[0] = MEMORY[0x1E4FBC860];
        swift_bridgeObjectRetain();
        specialized Dictionary.init(dictionaryLiteral:)(v9);
        type metadata accessor for WeakBox<UIButton>?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, MEMORY[0x1E4FBBE00]);
        uint64_t v10 = type metadata accessor for MenuVisitor.MenuStackGroup();
        unint64_t v11 = (*(unsigned __int8 *)(*(void *)(v10 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v10 - 8) + 80);
        uint64_t v12 = swift_allocObject();
        *(_OWORD *)(v12 + 16) = xmmword_18834BB80;
        if (one-time initialization token for empty != -1) {
          swift_once();
        }
        uint64_t v13 = __swift_project_value_buffer(v10, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
        outlined init with copy of WeakBox<UIButton>?(v13, v12 + v11, (uint64_t (*)(void))type metadata accessor for MenuVisitor.MenuStackGroup);
        MenuVisitor.visit(_:uniqueNames:)(v29, v30);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v14._countAndFlagsBits = v28;
        v14._object = v8;
        v31.value.super.isa = 0;
        v31.is_nil = 0;
        UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v15, v14, (Swift::String_optional)0, v31, v27, 0xFFFFFFFFFFFFFFFFLL, v9, v26);
      }
      else
      {
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
        UIMenuElementSize v17 = MEMORY[0x1E4FBC860];
        v30[0] = MEMORY[0x1E4FBC860];
        specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
        type metadata accessor for WeakBox<UIButton>?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, MEMORY[0x1E4FBBE00]);
        uint64_t v18 = type metadata accessor for MenuVisitor.MenuStackGroup();
        unint64_t v19 = (*(unsigned __int8 *)(*(void *)(v18 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v18 - 8) + 80);
        uint64_t v20 = swift_allocObject();
        *(_OWORD *)(v20 + 16) = xmmword_18834BB80;
        if (one-time initialization token for empty != -1) {
          swift_once();
        }
        uint64_t v21 = __swift_project_value_buffer(v18, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
        outlined init with copy of WeakBox<UIButton>?(v21, v20 + v19, (uint64_t (*)(void))type metadata accessor for MenuVisitor.MenuStackGroup);
        MenuVisitor.visit(_:uniqueNames:)(v29, v30);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v22._countAndFlagsBits = 0;
        v22._object = (void *)0xE000000000000000;
        v32.value.super.isa = 0;
        v32.is_nil = 0;
        UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v23, v22, (Swift::String_optional)(unint64_t)v28, v32, v7, 0xFFFFFFFFFFFFFFFFLL, v17, v26);
      }
      __int16 v4 = v16;
      int v24 = *(unsigned __int8 *)(v1
                               + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_menuControlGroupSize);
      if (v24 != 2) {
        objc_msgSend(v16, sel_setPreferredElementSize_, (v24 & 1) == 0);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return v4;
}

uint64_t UIKitButtonAdaptor._identifiedViewTree(in:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 24) + 48))(a1, *(void *)(a2 + 16));
}

uint64_t static UIKitButtonAdaptor._modifyBridgedViewInputs(_:)()
{
  return PreferenceKeys.add(_:)();
}

id protocol witness for UIViewRepresentable.makeCoordinator() in conformance UIKitButtonAdaptor<A>@<X0>(void *a1@<X8>)
{
  id result = UIKitButtonAdaptor.makeCoordinator()();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UIViewRepresentable.sizeThatFits(_:uiView:context:) in conformance UIKitButtonAdaptor<A>(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return specialized UIKitButtonAdaptor.sizeThatFits(_:uiView:context:)(a1, a2 & 1, a3, a4 & 1, a5, a7);
}

uint64_t protocol witness for static UIViewRepresentable._modifyBridgedViewInputs(_:) in conformance UIKitButtonAdaptor<A>()
{
  return static UIKitButtonAdaptor._modifyBridgedViewInputs(_:)();
}

uint64_t Coordinator.__ivar_destroyer()
{
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(void *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_action));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(void *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_onMenuPresentationChanged));
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t vars8;

  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_F1E9485F33A623EEFA647AA5EC4AE09411Coordinator_configuration + 8);
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_F1E9485F33A623EEFA647AA5EC4AE09411Coordinator_configuration + 24);
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v2);

  return swift_release();
}

{
  uint64_t v0;
  uint64_t vars8;

  swift_release();
  swift_release();
  outlined destroy of _VariadicView_Children(v0 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_children);

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;

  outlined destroy of Binding<(TextSelection?, VersionSeed)>?(v0 + OBJC_IVAR____TtC7SwiftUIP33_87E15EBB5C00F49DEF8C638A73559D9211Coordinator_state, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
  return outlined destroy of Binding<(TextSelection?, VersionSeed)>?(v0 + OBJC_IVAR____TtC7SwiftUIP33_87E15EBB5C00F49DEF8C638A73559D9211Coordinator_selection, (uint64_t (*)(void))type metadata accessor for Binding<(TextSelection?, VersionSeed)>?);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t vars8;

  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_8AA246B2E0E916EFA5AD706DCC8A0FE811Coordinator_configuration + 64);
  uint64_t v2 = *(unsigned __int8 *)(v0
                          + OBJC_IVAR____TtC7SwiftUIP33_8AA246B2E0E916EFA5AD706DCC8A0FE811Coordinator_configuration
                          + 72);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return outlined consume of Environment<Color?>.Content(v1, v2);
}

id Coordinator.__deallocating_deinit()
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_sheetBridgeToken];
  if (v2)
  {
    uint64_t v3 = self;
    swift_unknownObjectRetain();
    id v4 = objc_msgSend(v3, sel_defaultCenter);
    objc_msgSend(v4, sel_removeObserver_, v2);
    swift_unknownObjectRelease();
  }
  uint64_t v5 = *(void *)&v0[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_inspectorBridgeToken];
  if (v5)
  {
    uint64_t v6 = self;
    swift_unknownObjectRetain();
    id v7 = objc_msgSend(v6, sel_defaultCenter);
    objc_msgSend(v7, sel_removeObserver_, v5);
    swift_unknownObjectRelease();
  }
  v9.receiver = v0;
  v9.super_class = ObjectType;
  return objc_msgSendSuper2(&v9, sel_dealloc);
}

{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Coordinator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

{
  return Coordinator.__deallocating_deinit((uint64_t (*)(void))type metadata accessor for Coordinator);
}

{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Coordinator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Coordinator(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Coordinator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t Coordinator.setupNotifications(_:)()
{
  id v1 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for willDismiss != -1) {
    swift_once();
  }
  uint64_t v2 = static SheetBridgeNotifications.willDismiss;
  uint64_t v3 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v15 = partial apply for closure #1 in Coordinator.setupNotifications(_:);
  uint64_t v16 = v3;
  uint64_t v11 = MEMORY[0x1E4F143A8];
  uint64_t v12 = 1107296256;
  uint64_t v13 = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  Swift::String v14 = &block_descriptor_0;
  id v4 = _Block_copy(&v11);
  swift_release();
  id v5 = objc_msgSend(v1, sel_addObserverForName_object_queue_usingBlock_, v2, 0, 0, v4);
  _Block_release(v4);
  if (one-time initialization token for willPresent != -1) {
    swift_once();
  }
  uint64_t v6 = static SheetInspectorBridgeNotifications.willPresent;
  uint64_t v7 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v15 = partial apply for closure #1 in Coordinator.setupNotifications(_:);
  uint64_t v16 = v7;
  uint64_t v11 = MEMORY[0x1E4F143A8];
  uint64_t v12 = 1107296256;
  uint64_t v13 = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  Swift::String v14 = &block_descriptor_74;
  uint64_t v8 = _Block_copy(&v11);
  swift_release();
  id v9 = objc_msgSend(v1, sel_addObserverForName_object_queue_usingBlock_, v6, 0, 0, v8);

  _Block_release(v8);
  *(void *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_sheetBridgeToken) = v5;
  swift_unknownObjectRelease();
  *(void *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_inspectorBridgeToken) = v9;
  return swift_unknownObjectRelease();
}

uint64_t closure #1 in Coordinator.makeMenu()@<X0>(uint64_t *a1@<X8>)
{
  if (AGGraphGetWeakValue()) {
    uint64_t result = swift_bridgeObjectRetain();
  }
  else {
    uint64_t result = MEMORY[0x1E4FBC860];
  }
  *a1 = result;
  return result;
}

uint64_t Coordinator.menuWillShow(interaction:)()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = v0 + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_menuAttribute;
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 8)) {
    return swift_endAccess();
  }
  int Attribute = AGWeakAttributeGetAttribute();
  int v4 = *MEMORY[0x1E4F4E7A0];
  uint64_t result = swift_endAccess();
  if (Attribute != v4)
  {
    MEMORY[0x18C113CA0](result);
    uint64_t v5 = v0 + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_menuChangeDetector;
    if ((*(unsigned char *)(v0
                   + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_menuChangeDetector
                   + 4) & 1) != 0)
    {
      id v6 = (id)AGGraphGetAttributeSubgraph();
      AGGraphClearUpdate();
      id v7 = (id)AGSubgraphGetCurrent();
      AGSubgraphSetCurrent();
      uint64_t v8 = AGCreateWeakAttribute();
      swift_unknownObjectWeakInit();
      uint64_t v16 = v8;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type UpdateContextMenuInteraction and conformance UpdateContextMenuInteraction();
      int v9 = Attribute.init<A>(body:value:flags:update:)();
      outlined destroy of UpdateContextMenuInteraction((uint64_t)v15);
      *(_DWORD *)uint64_t v5 = v9;
      *(unsigned char *)(v5 + 4) = 0;
      static AGAttributeFlags.transactional.getter();
      AGGraphSetFlags();
      AGSubgraphSetCurrent();

      AGGraphSetUpdate();
    }
    else
    {
      static AGAttributeFlags.transactional.getter();
      AGGraphGetFlags();
      uint64_t v10 = AGGraphSetFlags();
      MEMORY[0x1F4188790](v10);
      MEMORY[0x1F4188790](v11);
      AGGraphMutateAttribute();
    }
    uint64_t v12 = *(void *)(v0
                    + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_onMenuPresentationChanged);
    if (v12)
    {
      uint64_t v13 = *(void *)(v0
                      + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_onMenuPresentationChanged
                      + 8);
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = v12;
      *(void *)(v14 + 24) = v13;
      swift_retain_n();
      static Update.enqueueAction(_:)();
      swift_release();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v12);
    }
    return static Update.end()();
  }
  return result;
}

void closure #1 in Coordinator.setupNotifications(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = (void *)MEMORY[0x18C119DF0](v2);
  if (v3)
  {
    int v4 = v3;
    id v5 = objc_msgSend(v3, sel_contextMenuInteraction);

    objc_msgSend(v5, sel_dismissMenu);
  }
}

uint64_t type metadata accessor for UIKitIconPreferringButton()
{
  return self;
}

uint64_t UIKitButtonBase.delegate.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + OBJC_IVAR____TtC7SwiftUI15UIKitButtonBase_delegate + 8) = a2;
  swift_unknownObjectWeakAssign();

  return swift_unknownObjectRelease();
}

id UIKitButtonBase.contextMenuInteraction(_:willEndFor:animator:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = MEMORY[0x18C119DF0](&v3[OBJC_IVAR____TtC7SwiftUI15UIKitButtonBase_delegate]);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v7
                   + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_onMenuPresentationChanged);
    if (v9)
    {
      uint64_t v10 = *(void *)(v7
                      + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_onMenuPresentationChanged
                      + 8);
      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = v9;
      *(void *)(v11 + 24) = v10;
      swift_retain_n();
      static Update.enqueueAction(_:)();
      swift_release();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v9);
    }
    if ((*(unsigned char *)(v8
                   + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_menuChangeDetector
                   + 4) & 1) == 0)
    {
      static AGAttributeFlags.transactional.getter();
      AGGraphGetFlags();
      AGGraphSetFlags();
    }
    swift_unknownObjectRelease();
  }
  v13.receiver = v3;
  v13.super_class = (Class)type metadata accessor for UIKitButtonBase();
  return objc_msgSendSuper2(&v13, sel_contextMenuInteraction_willEndForConfiguration_animator_, a1, a2, a3);
}

id UIKitButtonBase.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UIKitButtonBase();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for UIKitButtonBase()
{
  return self;
}

void *UIKitButtonContentHost.__allocating_init(rootView:)(objc_class *a1)
{
  uint64_t v3 = specialized UIKitButtonContentHost.__allocating_init(rootView:)(a1);
  (*(void (**)(objc_class *))(*(void *)(*(void *)(v1 + 1600) - 8) + 8))(a1);
  return v3;
}

void @objc UIKitButtonContentHost.init(coder:)()
{
}

uint64_t sub_187701288(uint64_t a1)
{
  id v3 = v1;
  return a1;
}

uint64_t UIKitButtonContentHost.appendViewGraphFeatures()()
{
  specialized _UIHostingView.viewGraph.getter();
  lazy protocol witness table accessor for type ButtonContentViewGraph and conformance ButtonContentViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();

  return swift_release();
}

id UIKitButtonContentHost.hitTest(_:with:)(void *a1, double a2, double a3)
{
  uint64_t ObjectType = swift_getObjectType();
  if (!a1) {
    return 0;
  }
  uint64_t v8 = (objc_class *)ObjectType;
  if (objc_msgSend(a1, sel_type) != (id)11) {
    return 0;
  }
  v10.receiver = v3;
  v10.super_class = v8;
  return objc_msgSendSuper2(&v10, sel_hitTest_withEvent_, a1, a2, a3);
}

id @objc UIKitButtonContentHost.hitTest(_:with:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  id v10 = a1;
  id v11 = UIKitButtonContentHost.hitTest(_:with:)(a5, a2, a3);

  return v11;
}

uint64_t type metadata accessor for UIKitButtonContentHost()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for ViewBasedUIButton()
{
  return swift_initClassMetadata2();
}

uint64_t protocol witness for ViewGraphFeature.modifyViewInputs(inputs:graph:) in conformance ButtonContentViewGraph()
{
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for UIKitButtonAdaptorContent.role.getter in conformance PlatformItemContent@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  id v3 = (char *)(v2 + *(int *)(result + 20));
  char v4 = *v3;
  LOBYTE(v3) = v3[1];
  *a2 = v4;
  a2[1] = (_BYTE)v3;
  return result;
}

uint64_t protocol witness for UIKitButtonAdaptorContent.makeUIButton(options:) in conformance PlatformItemContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UIButton.Configuration();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UIKitIconPreferringButton();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(int *)(a2 + 24), v4);
  return UIButton.init(configuration:primaryAction:)();
}

double protocol witness for UIKitButtonAdaptorContent._identifiedViewTree(in:) in conformance PlatformItemContent@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 160) = 2;
  return result;
}

char *ViewContent.makeUIButton(options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  type metadata accessor for ViewBasedUIButton();
  uint64_t v6 = (char *)objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_buttonWithType_, *(void *)((char *)v2 + *(int *)(a2 + 40)));
  id v7 = objc_allocWithZone((Class)type metadata accessor for UIKitButtonContentHost());
  uint64_t v8 = specialized UIKitButtonContentHost.init(rootView:)(v2);
  lazy protocol witness table accessor for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options();
  if (OptionSet<>.contains(_:)())
  {
    uint64_t v9 = specialized _UIHostingView.viewGraph.getter();
    swift_beginAccess();
    int v10 = *(unsigned __int8 *)(v9 + 361);
    *(unsigned char *)(v9 + 361) = v10 | 2;
    if ((v10 | 2) != v10)
    {
      swift_retain();
      GraphHost.uninstantiate(immediately:)(0);
      swift_release();
    }
  }
  specialized _UIHostingView.viewGraph.getter();
  swift_retain();
  static _ProposedSize.unspecified.getter();
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = v4;
  v12[3] = v5;
  v12[4] = v11;
  swift_beginAccess();
  type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
  ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)();
  swift_endAccess();
  swift_release();
  swift_release();
  objc_super v13 = *(void **)&v6[direct field offset for ViewBasedUIButton.contentHost];
  *(void *)&v6[direct field offset for ViewBasedUIButton.contentHost] = v8;
  uint64_t v14 = v8;

  id v15 = objc_msgSend(v6, sel__effectiveContentView);
  objc_msgSend(v15, sel_addSubview_, v14);
  uint64_t v16 = v14;
  objc_msgSend(v15, sel_bounds);
  objc_msgSend(v16, sel_setFrame_);

  objc_msgSend(v16, sel_setAutoresizingMask_, 18);
  return v6;
}

void closure #1 in ViewContent.makeUIButton(options:)(double *a1, double *a2, uint64_t a3)
{
  if (*a1 != *a2 || a1[1] != a2[1])
  {
    uint64_t v4 = a3 + 16;
    swift_beginAccess();
    uint64_t v5 = (void *)MEMORY[0x18C119DF0](v4);
    if (v5)
    {
      uint64_t v6 = v5;
      objc_msgSend(v5, sel_invalidateIntrinsicContentSize);
    }
  }
}

void ViewContent.updateUIButton(_:transaction:options:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = *(void *)(a4 - 8);
  double v10 = MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v12, v5, v13, v10);
  if (objc_msgSend(a1, sel_buttonType) == *(id *)&v12[*(int *)(a4 + 40)])
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, a4);
    v18[0] = a3;
    v18[3] = 1;
    lazy protocol witness table accessor for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options();
    if (OptionSet<>.contains(_:)())
    {
      if (*(void *)&a1[direct field offset for ViewBasedUIButton.contentHost])
      {
        uint64_t v14 = specialized _UIHostingView.viewGraph.getter();
        swift_beginAccess();
        int v15 = *(unsigned __int8 *)(v14 + 361);
        *(unsigned char *)(v14 + 361) = v15 | 2;
        if ((v15 | 2) != v15)
        {
          swift_retain();
          GraphHost.uninstantiate(immediately:)(0);
          swift_release();
        }
      }
    }
    uint64_t v16 = *(void **)&a1[direct field offset for ViewBasedUIButton.contentHost];
    if (v16)
    {
      id v17 = v16;
      _UIHostingView.setRootView(_:transaction:)(v5);
    }
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t ViewContent._identifiedViewTree(in:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  id v3 = *(void **)(result + direct field offset for ViewBasedUIButton.contentHost);
  if (v3)
  {
    type metadata accessor for _UIHostingView();
    id v4 = v3;
    swift_getWitnessTable();
    ViewRendererHost.preferenceValue<A>(_:)();
    outlined init with copy of _IdentifiedViewTree((uint64_t)v13, (uint64_t)v11);
    if (v12 == 2
      && (int8x16_t v5 = vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v11[2], v11[6]), vorrq_s8(v11[4], v11[8])), vorrq_s8(vorrq_s8(v11[3], v11[7]), vorrq_s8(v11[5], v11[9]))), vorrq_s8(v11[0], v11[1])), !*(void *)&vorr_s8(*(int8x8_t *)v5.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL))))
    {

      outlined destroy of _IdentifiedViewTree((uint64_t)v11);
      uint64_t v6 = (char *)MEMORY[0x1E4FBC860];
    }
    else
    {
      outlined destroy of _IdentifiedViewTree((uint64_t)v11);
      outlined init with copy of _IdentifiedViewTree((uint64_t)v13, (uint64_t)v11);
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
      unint64_t v8 = *((void *)v6 + 2);
      unint64_t v7 = *((void *)v6 + 3);
      if (v8 >= v7 >> 1) {
        uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1, v6);
      }
      *((void *)v6 + 2) = v8 + 1;
      outlined init with take of _IdentifiedViewTree((uint64_t)v11, (uint64_t)&v6[168 * v8 + 32]);
    }
    uint64_t v9 = *((void *)v6 + 2);
    double result = outlined destroy of _IdentifiedViewTree((uint64_t)v13);
    if (v9)
    {
      char v10 = 1;
      *(void *)a2 = v6;
    }
    else
    {
      double result = swift_bridgeObjectRelease();
      *(void *)(a2 + 152) = 0;
      *(_OWORD *)(a2 + 136) = 0u;
      *(_OWORD *)(a2 + 120) = 0u;
      *(_OWORD *)(a2 + 104) = 0u;
      *(_OWORD *)(a2 + 88) = 0u;
      *(_OWORD *)(a2 + 72) = 0u;
      *(_OWORD *)(a2 + 56) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(_OWORD *)(a2 + 24) = 0u;
      char v10 = 2;
      *(_OWORD *)(a2 + 8) = 0u;
      *(void *)a2 = 0;
    }
  }
  else
  {
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    char v10 = 2;
  }
  *(unsigned char *)(a2 + 160) = v10;
  return result;
}

uint64_t protocol witness for UIKitButtonAdaptorContent.role.getter in conformance ViewContent<A>@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  id v3 = (char *)(v2 + *(int *)(result + 36));
  char v4 = *v3;
  LOBYTE(v3) = v3[1];
  *a2 = v4;
  a2[1] = (_BYTE)v3;
  return result;
}

uint64_t protocol witness for UIKitButtonAdaptorContent.sizeThatFits(_:uiButton:) in conformance ViewContent<A>(uint64_t a1, uint64_t a2)
{
  return specialized ViewContent.sizeThatFits(_:uiButton:)(a1, a2);
}

uint64_t ButtonStyleContent.resolvedBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v23 = type metadata accessor for ResolvedButtonStyleBody();
  uint64_t v5 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  unint64_t v7 = (char *)&v22 - v6;
  unint64_t v8 = (char *)(v2 + *(int *)(a1 + 52));
  char v9 = *v8;
  char v10 = v8[1];
  uint64_t v11 = (char *)(v2 + *(int *)(a1 + 64));
  char v12 = *v11;
  uint64_t v13 = *((void *)v11 + 1);
  LOBYTE(v25) = v12;
  uint64_t v26 = v13;
  type metadata accessor for Attribute<PlatformItemList>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
  State.wrappedValue.getter();
  LOBYTE(v25) = v9;
  BYTE1(v25) = v10;
  BYTE2(v25) = v27;
  ButtonStyle.resolvedBody(configuration:)((uint64_t)&v25, v4, (uint64_t)v7);
  uint64_t KeyPath = swift_getKeyPath();
  int v15 = (char *)(v2 + *(int *)(a1 + 68));
  char v16 = *v15;
  uint64_t v17 = *((void *)v15 + 1);
  LOBYTE(v25) = v16;
  uint64_t v26 = v17;
  State.wrappedValue.getter();
  if (v27) {
    char v18 = 1;
  }
  else {
    char v18 = 2;
  }
  uint64_t v25 = KeyPath;
  LOBYTE(v26) = v18;
  type metadata accessor for StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier>();
  uint64_t v19 = v23;
  MEMORY[0x18C113660](&v25, v23, v20, &protocol witness table for ResolvedButtonStyleBody<A>);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v19);
}

uint64_t ButtonStyleContent.base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = (char *)(v2 + *(int *)(a1 + 52));
  char v6 = *v5;
  char v7 = v5[1];
  uint64_t v8 = v2 + *(int *)(a1 + 60);
  uint64_t v9 = *(void *)v8;
  char v10 = *(unsigned char *)(v8 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v8, v10);
  char v11 = specialized Environment.wrappedValue.getter(v9, v10);
  outlined consume of Environment<Bool>.Content(v9, v10);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  type metadata accessor for ResolvedButtonStyleBody();
  type metadata accessor for StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  swift_getWitnessTable();
  char v16 = (int *)type metadata accessor for ViewContent();
  uint64_t v17 = (unsigned char *)(a2 + v16[9]);
  *uint64_t v17 = v6;
  v17[1] = v7;
  *(void *)(a2 + v16[10]) = 0;
  *(unsigned char *)(a2 + v16[11]) = v11 & 1;
  return closure #1 in ButtonStyleContent.base.getter(v2, v12, v13, v14, v15);
}

uint64_t closure #1 in ButtonStyleContent.base.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for ResolvedButtonStyleBody();
  type metadata accessor for StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier>();
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)v20 - v14;
  v20[2] = a2;
  v20[3] = a3;
  v20[4] = a4;
  v20[5] = a5;
  uint64_t v16 = type metadata accessor for ButtonStyleContent();
  ButtonStyleContent.resolvedBody.getter(v16, (uint64_t)v12);
  unint64_t IsVisionEnabled = lazy protocol witness table accessor for type StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v20[0] = &protocol witness table for ResolvedButtonStyleBody<A>;
  v20[1] = IsVisionEnabled;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v12);
  char v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v12, v9);
  static ViewBuilder.buildExpression<A>(_:)(v15);
  return ((uint64_t (*)(char *, uint64_t))v18)(v15, v9);
}

char *ButtonStyleContent.makeUIButton(options:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ResolvedButtonStyleBody();
  type metadata accessor for StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  uint64_t v24 = &protocol witness table for ResolvedButtonStyleBody<A>;
  unint64_t IsVisionEnabled = lazy protocol witness table accessor for type StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for ViewContent();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = &v19[-v7];
  ButtonStyleContent.base.getter(a2, (uint64_t)&v19[-v7]);
  uint64_t v9 = ViewContent.makeUIButton(options:)(a1, v5);
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v10 = (char *)(v2 + *(int *)(a2 + 64));
  char v11 = *v10;
  uint64_t v12 = *((void *)v10 + 1);
  v19[8] = v11;
  uint64_t v20 = v12;
  type metadata accessor for Attribute<PlatformItemList>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
  State.projectedValue.getter();
  uint64_t v13 = v22;
  char v14 = v23;
  uint64_t v15 = &v9[direct field offset for ViewBasedUIButton.isPressed];
  uint64_t v16 = *(void *)&v9[direct field offset for ViewBasedUIButton.isPressed];
  uint64_t v17 = *(void *)&v9[direct field offset for ViewBasedUIButton.isPressed + 8];
  *(void *)uint64_t v15 = v21;
  *((void *)v15 + 1) = v13;
  v15[16] = v14;
  outlined consume of Binding<NavigationSplitViewColumn>?(v16, v17);
  return v9;
}

uint64_t ButtonStyleContent.updateUIButton(_:transaction:options:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for ResolvedButtonStyleBody();
  type metadata accessor for StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  v13[0] = &protocol witness table for ResolvedButtonStyleBody<A>;
  v13[1] = lazy protocol witness table accessor for type StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for ViewContent();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  char v11 = (char *)v13 - v10;
  ButtonStyleContent.base.getter(a4, (uint64_t)v13 - v10);
  ViewContent.updateUIButton(_:transaction:options:)(a1, a2, a3, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t ButtonStyleContent.sizeThatFits(_:uiButton:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for ResolvedButtonStyleBody();
  type metadata accessor for StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  uint64_t v19 = &protocol witness table for ResolvedButtonStyleBody<A>;
  unint64_t IsVisionEnabled = lazy protocol witness table accessor for type StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for ViewContent();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v15 - v8;
  uint64_t v10 = *a1;
  char v11 = *((unsigned char *)a1 + 8);
  uint64_t v12 = a1[2];
  LOBYTE(a1) = *((unsigned char *)a1 + 24);
  ButtonStyleContent.base.getter(a3, (uint64_t)&v15 - v8);
  uint64_t v15 = v10;
  char v16 = v11;
  uint64_t v17 = v12;
  char v18 = (char)a1;
  uint64_t v13 = specialized ViewContent.sizeThatFits(_:uiButton:)((uint64_t)&v15, a2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v13;
}

uint64_t ButtonStyleContent._identifiedViewTree(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  type metadata accessor for ResolvedButtonStyleBody();
  type metadata accessor for StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  v11[0] = &protocol witness table for ResolvedButtonStyleBody<A>;
  v11[1] = lazy protocol witness table accessor for type StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for ViewContent();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v11 - v8;
  ButtonStyleContent.base.getter(a2, (uint64_t)v11 - v8);
  ViewContent._identifiedViewTree(in:)(a1, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ButtonStyleContent.menuTitle(uiButton:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ResolvedButtonStyleBody();
  type metadata accessor for StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  v10[0] = &protocol witness table for ResolvedButtonStyleBody<A>;
  v10[1] = lazy protocol witness table accessor for type StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for ViewContent();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v10 - v6;
  ButtonStyleContent.base.getter(a2, (uint64_t)v10 - v6);
  uint64_t v8 = specialized ViewContent.menuTitle(uiButton:)(a1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t ButtonStyleContent.updateMenuPresentationState(isPresented:)(char a1, uint64_t a2)
{
  type metadata accessor for ResolvedButtonStyleBody();
  type metadata accessor for StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  uint64_t v12 = &protocol witness table for ResolvedButtonStyleBody<A>;
  unint64_t IsVisionEnabled = lazy protocol witness table accessor for type StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for ViewContent();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = &v11[-v7];
  ButtonStyleContent.base.getter(a2, (uint64_t)&v11[-v7]);
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v10 = *(void *)(v2 + *(int *)(a2 + 68) + 8);
  v11[15] = a1;
  if (v10)
  {
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for UIKitButtonAdaptorContent.role.getter in conformance ButtonStyleContent<A, B>@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  id v3 = (char *)(v2 + *(int *)(result + 52));
  char v4 = *v3;
  LOBYTE(v3) = v3[1];
  *a2 = v4;
  a2[1] = (_BYTE)v3;
  return result;
}

uint64_t protocol witness for UIKitButtonAdaptorContent.sizeThatFits(_:uiButton:) in conformance ButtonStyleContent<A, B>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return ButtonStyleContent.sizeThatFits(_:uiButton:)(a1, a2, a3);
}

uint64_t protocol witness for static DynamicProperty._propertyBehaviors.getter in conformance ButtonStyleContent<A, B>()
{
  return MEMORY[0x1F40FE6D0]();
}

uint64_t @objc ViewBasedUIButton.isHighlighted.getter(void *a1)
{
  id v1 = a1;
  unsigned __int8 v2 = ViewBasedUIButton.isHighlighted.getter();

  return v2 & 1;
}

id ViewBasedUIButton.isHighlighted.getter()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_isHighlighted);
}

void @objc ViewBasedUIButton.isHighlighted.setter(void *a1, uint64_t a2, char a3)
{
  id v4 = a1;
  ViewBasedUIButton.isHighlighted.setter(a3);
}

void ViewBasedUIButton.isHighlighted.setter(char a1)
{
  v3.receiver = v1;
  v3.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v3, sel_setHighlighted_, a1 & 1);
  ViewBasedUIButton.isHighlighted.didset();
}

void ViewBasedUIButton.isHighlighted.didset()
{
  id v1 = &v0[direct field offset for ViewBasedUIButton.isPressed];
  uint64_t v2 = *(void *)&v0[direct field offset for ViewBasedUIButton.isPressed + 8];
  if (v2)
  {
    objc_super v3 = v0;
    uint64_t v4 = *(void *)v1;
    char v5 = v1[16] & 1;
    swift_retain();
    swift_retain();
    v9.receiver = v3;
    v9.super_class = (Class)swift_getObjectType();
    objc_msgSendSuper2(&v9, sel_isHighlighted);
    uint64_t v6 = static Animation.coreAnimationDefault(duration:)();
    uint64_t ObjectType = (objc_class *)swift_getObjectType();
    v9.receiver = v3;
    v9.super_class = ObjectType;
    LOBYTE(v3) = objc_msgSendSuper2(&v9, sel_isHighlighted);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v6;
    *(void *)(v8 + 24) = v4;
    *(void *)(v8 + 32) = v2;
    *(unsigned char *)(v8 + 40) = v5;
    *(unsigned char *)(v8 + 41) = (_BYTE)v3;
    swift_retain();
    swift_retain();
    swift_retain();
    onNextMainRunLoop(do:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
}

uint64_t closure #1 in closure #1 in ViewBasedUIButton.isHighlighted.didset()
{
  return swift_release();
}

double @objc ViewBasedUIButton.intrinsicContentSize.getter(void *a1)
{
  id v1 = a1;
  ViewBasedUIButton.intrinsicContentSize.getter();
  double v3 = v2;

  return v3;
}

id ViewBasedUIButton.intrinsicContentSize.getter()
{
  id v1 = *(void **)&v0[direct field offset for ViewBasedUIButton.contentHost];
  if (v1) {
    return objc_msgSend(v1, sel_intrinsicContentSize);
  }
  v3.receiver = v0;
  v3.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v3, sel_intrinsicContentSize);
}

id ViewBasedUIButton._baselineOffsets(at:)(double a1, double a2)
{
  char v5 = *(void **)&v2[direct field offset for ViewBasedUIButton.contentHost];
  if (v5) {
    return objc_msgSend(v5, sel__baselineOffsetsAtSize_, a1, a2);
  }
  v7.receiver = v2;
  v7.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v7, sel__baselineOffsetsAtSize_, a1, a2);
}

double @objc ViewBasedUIButton._baselineOffsets(at:)(void *a1, double a2, double a3)
{
  id v5 = a1;
  ViewBasedUIButton._baselineOffsets(at:)(a2, a3);
  double v7 = v6;

  return v7;
}

uint64_t @objc ViewBasedUIButton.isAccessibilityElement.getter()
{
  return 0;
}

Class @objc ViewBasedUIButton.automationElements.getter(void *a1)
{
  id v1 = a1;
  uint64_t v2 = ViewBasedUIButton.automationElements.getter();

  if (v2)
  {
    v3.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v3.super.isa = 0;
  }

  return v3.super.isa;
}

uint64_t ViewBasedUIButton.automationElements.getter()
{
  id v1 = *(void **)(v0 + direct field offset for ViewBasedUIButton.contentHost);
  if (!v1) {
    return 0;
  }
  id v2 = objc_msgSend(v1, sel_automationElements);
  if (!v2) {
    return 0;
  }
  NSArray v3 = v2;
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

void ViewBasedUIButton.didUpdateFocus(in:with:)(uint64_t a1, uint64_t a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v7, sel_didUpdateFocusInContext_withAnimationCoordinator_, a1, a2);
  id v5 = *(void **)&v2[direct field offset for ViewBasedUIButton.contentHost];
  if (v5)
  {
    type metadata accessor for _UIHostingView();
    id v6 = v5;
    swift_getWitnessTable();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
}

void @objc ViewBasedUIButton.didUpdateFocus(in:with:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a1;
  ViewBasedUIButton.didUpdateFocus(in:with:)((uint64_t)v6, (uint64_t)v7);
}

id ViewBasedUIButton.init(frame:)(double a1, double a2, double a3, double a4)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v4[direct field offset for ViewBasedUIButton.contentHost] = 0;
  uint64_t v10 = &v4[direct field offset for ViewBasedUIButton.isPressed];
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = 0;
  v10[16] = 0;
  v12.receiver = v4;
  v12.super_class = ObjectType;
  return objc_msgSendSuper2(&v12, sel_initWithFrame_, a1, a2, a3, a4);
}

id @objc ViewBasedUIButton.init(frame:)(double a1, double a2, double a3, double a4)
{
  return ViewBasedUIButton.init(frame:)(a1, a2, a3, a4);
}

id ViewBasedUIButton.init(coder:)(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v1[direct field offset for ViewBasedUIButton.contentHost] = 0;
  uint64_t v4 = &v1[direct field offset for ViewBasedUIButton.isPressed];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  v4[16] = 0;
  v7.receiver = v1;
  v7.super_class = ObjectType;
  id v5 = objc_msgSendSuper2(&v7, sel_initWithCoder_, a1);

  return v5;
}

id @objc ViewBasedUIButton.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  return ViewBasedUIButton.init(coder:)(a3);
}

uint64_t ViewBasedUIButton.__ivar_destroyer()
{
  uint64_t v1 = *(void *)(v0 + direct field offset for ViewBasedUIButton.isPressed);
  uint64_t v2 = *(void *)(v0 + direct field offset for ViewBasedUIButton.isPressed + 8);

  return outlined consume of Binding<NavigationSplitViewColumn>?(v1, v2);
}

uint64_t @objc ViewBasedUIButton.__ivar_destroyer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + direct field offset for ViewBasedUIButton.isPressed);
  uint64_t v3 = *(void *)(a1 + direct field offset for ViewBasedUIButton.isPressed + 8);

  return outlined consume of Binding<NavigationSplitViewColumn>?(v2, v3);
}

uint64_t type metadata accessor for ViewBasedUIButton()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for BridgedPopUpButtonPreferenceKey()
{
  return &type metadata for BridgedPopUpButtonPreferenceKey;
}

uint64_t getEnumTagSinglePayload for UIKitButtonStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for UIKitButtonStyleModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1877037A8);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        char v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for UIKitSystemButtonConfigurationModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a3;
    uint64_t v7 = type metadata accessor for UIButton.Configuration();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(v6 + 20);
    BOOL v9 = (char *)a1 + v8;
    unsigned int v10 = (char *)a2 + v8;
    uint64_t v11 = *(void *)v10;
    LOBYTE(v6) = v10[8];
    outlined copy of Environment<Bool>.Content(*(void *)v10, v6);
    *(void *)BOOL v9 = v11;
    v9[8] = v6;
  }
  return a1;
}

uint64_t assignWithCopy for UIKitSystemButtonConfigurationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UIButton.Configuration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)v9;
  LOBYTE(a2) = *(unsigned char *)(v9 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v9, a2);
  uint64_t v11 = *(void *)v8;
  char v12 = *(unsigned char *)(v8 + 8);
  *(void *)uint64_t v8 = v10;
  *(unsigned char *)(v8 + 8) = a2;
  outlined consume of Environment<Bool>.Content(v11, v12);
  return a1;
}

uint64_t initializeWithTake for UIKitSystemButtonConfigurationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UIButton.Configuration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  return a1;
}

uint64_t assignWithTake for UIKitSystemButtonConfigurationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UIButton.Configuration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  LOBYTE(v9) = *((unsigned char *)v9 + 8);
  uint64_t v11 = *(void *)v8;
  char v12 = *(unsigned char *)(v8 + 8);
  *(void *)uint64_t v8 = v10;
  *(unsigned char *)(v8 + 8) = (_BYTE)v9;
  outlined consume of Environment<Bool>.Content(v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitSystemButtonConfigurationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187703A94);
}

uint64_t sub_187703A94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UIButton.Configuration();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 > 1) {
      return (v10 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for UIKitSystemButtonConfigurationModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187703B68);
}

uint64_t sub_187703B68(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UIButton.Configuration();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20) + 8) = -(char)a2;
  }
  return result;
}

uint64_t type metadata completion function for UIKitMenuButton()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

_OWORD *initializeBufferWithCopyOfBuffer for UIKitMenuButton(_OWORD *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v5 - 8);
  unint64_t v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(v6 - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = *(void *)(v10 + 64);
  if ((v11 | v8) > 7
    || ((*(_DWORD *)(v10 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((v12 + ((v9 + v11 + ((v8 + 18) & ~v8)) & ~v11) + 9) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    unint64_t v15 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = (_OWORD *)(v15 + (((v11 | v8) & 0xF8 ^ 0x1F8) & ((v11 | v8) + 16)));
  }
  else
  {
    uint64_t v16 = ~v8;
    uint64_t v29 = ~v11;
    if (*a2 < 0xFFFFFFFF)
    {
      *a1 = *(_OWORD *)a2;
    }
    else
    {
      unint64_t v17 = a2[1];
      *(void *)uint64_t v4 = *a2;
      *((void *)v4 + 1) = v17;
      uint64_t v28 = v5;
      swift_retain();
      uint64_t v5 = v28;
    }
    *((unsigned char *)v4 + 16) = *((unsigned char *)a2 + 16);
    *((unsigned char *)v4 + 17) = *((unsigned char *)a2 + 17);
    uint64_t v18 = (uint64_t)a2 + v8;
    uint64_t v19 = ((unint64_t)v4 + v8 + 18) & v16;
    uint64_t v20 = (v18 + 18) & v16;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v19, v20, v5);
    uint64_t v21 = (v19 + v9 + v11) & v29;
    uint64_t v22 = (v20 + v9 + v11) & v29;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v21, v22, v6);
    char v23 = (unsigned char *)(v21 + v12);
    *char v23 = *(unsigned char *)(v22 + v12);
    v23[1] = *(unsigned char *)(v22 + v12 + 1);
    unint64_t v24 = (v21 + v12 + 9) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v25 = (v22 + v12 + 9) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v25 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v24 = *(_OWORD *)v25;
      return v4;
    }
    uint64_t v26 = *(void *)(v25 + 8);
    *(void *)unint64_t v24 = *(void *)v25;
    *(void *)(v24 + 8) = v26;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for UIKitMenuButton(void *a1, uint64_t a2)
{
  if (*a1 >= 0xFFFFFFFFuLL) {
    swift_release();
  }
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = ((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 18) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v6);
  uint64_t v7 = *(void *)(v5 + 56);
  uint64_t v8 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v9 = v8 + 8;
  unint64_t v10 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t))(v8 + 8))(v10);
  if (*(void *)((*(void *)(v9 + 56) + v10 + 9) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for UIKitMenuButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v6;
    swift_retain();
  }
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v8 = v7 + 16;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (v9 + 18 + a1) & ~v9;
  uint64_t v11 = (v9 + 18 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v10, v11);
  uint64_t v12 = *(void *)(v8 + 48);
  uint64_t v13 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v14 = v13 + 16;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = v12 + v15;
  uint64_t v17 = (v16 + v10) & ~v15;
  uint64_t v18 = (v16 + v11) & ~v15;
  (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v17, v18);
  uint64_t v19 = *(void *)(v14 + 48);
  uint64_t v20 = (unsigned char *)(v19 + v17);
  uint64_t v21 = v19 + v18;
  *uint64_t v20 = *(unsigned char *)(v19 + v18);
  v20[1] = *(unsigned char *)(v19 + v18 + 1);
  unint64_t v22 = (v19 + v17 + 9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (v21 + 9) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v23 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v22 = *(_OWORD *)v23;
  }
  else
  {
    uint64_t v24 = *(void *)(v23 + 8);
    *(void *)unint64_t v22 = *(void *)v23;
    *(void *)(v22 + 8) = v24;
    swift_retain();
  }
  return a1;
}

uint64_t assignWithCopy for UIKitMenuButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)a2;
  if (*(void *)a1 < 0xFFFFFFFFuLL)
  {
    if (v6 >= 0xFFFFFFFF)
    {
      uint64_t v8 = *(void *)(a2 + 8);
      *(void *)a1 = v6;
      *(void *)(a1 + 8) = v8;
      swift_retain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v6 >= 0xFFFFFFFF)
    {
      uint64_t v7 = *(void *)(a2 + 8);
      *(void *)a1 = v6;
      *(void *)(a1 + 8) = v7;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 24;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = (v11 + 18 + a1) & ~v11;
  uint64_t v13 = (v11 + 18 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 24))(v12, v13);
  uint64_t v14 = *(void *)(v10 + 40);
  uint64_t v15 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v16 = v15 + 24;
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = v14 + v17;
  uint64_t v19 = (v18 + v12) & ~v17;
  uint64_t v20 = (v18 + v13) & ~v17;
  (*(void (**)(uint64_t, uint64_t))(v15 + 24))(v19, v20);
  uint64_t v21 = *(void *)(v16 + 40);
  unint64_t v22 = (unsigned char *)(v21 + v19);
  unint64_t v23 = (unsigned char *)(v21 + v20);
  unsigned char *v22 = *v23;
  v22[1] = v23[1];
  uint64_t v24 = (void *)((unint64_t)(v22 + 9) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v25 = (unint64_t *)((unint64_t)(v23 + 9) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v26 = *v25;
  if (*v24 < 0xFFFFFFFFuLL)
  {
    if (v26 >= 0xFFFFFFFF)
    {
      unint64_t v28 = v25[1];
      *uint64_t v24 = v26;
      v24[1] = v28;
      swift_retain();
      return a1;
    }
LABEL_14:
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
    return a1;
  }
  if (v26 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_14;
  }
  unint64_t v27 = v25[1];
  *uint64_t v24 = v26;
  v24[1] = v27;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for UIKitMenuButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v5 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v5;
  }
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 32;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 + 18 + a1) & ~v8;
  uint64_t v10 = (v8 + 18 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 32);
  uint64_t v12 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v13 = v12 + 32;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = v11 + v14;
  uint64_t v16 = (v15 + v9) & ~v14;
  uint64_t v17 = (v15 + v10) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v16, v17);
  uint64_t v18 = *(void *)(v13 + 32);
  uint64_t v19 = (unsigned char *)(v18 + v16);
  uint64_t v20 = v18 + v17;
  *uint64_t v19 = *(unsigned char *)(v18 + v17);
  v19[1] = *(unsigned char *)(v18 + v17 + 1);
  unint64_t v21 = (v18 + v16 + 9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (uint64_t *)((v20 + 9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = *v22;
  if ((unint64_t)*v22 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v21 = *(_OWORD *)v22;
  }
  else
  {
    uint64_t v24 = v22[1];
    *(void *)unint64_t v21 = v23;
    *(void *)(v21 + 8) = v24;
  }
  return a1;
}

uint64_t assignWithTake for UIKitMenuButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)a2;
  if (*(void *)a1 < 0xFFFFFFFFuLL)
  {
    if (v6 >= 0xFFFFFFFF)
    {
      uint64_t v8 = *(void *)(a2 + 8);
      *(void *)a1 = v6;
      *(void *)(a1 + 8) = v8;
      goto LABEL_8;
    }
  }
  else
  {
    if (v6 >= 0xFFFFFFFF)
    {
      uint64_t v7 = *(void *)(a2 + 8);
      *(void *)a1 = v6;
      *(void *)(a1 + 8) = v7;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 40;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = (v11 + 18 + a1) & ~v11;
  uint64_t v13 = (v11 + 18 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 40))(v12, v13);
  uint64_t v14 = *(void *)(v10 + 24);
  uint64_t v15 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v16 = v15 + 40;
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = v14 + v17;
  uint64_t v19 = (v18 + v12) & ~v17;
  uint64_t v20 = (v18 + v13) & ~v17;
  (*(void (**)(uint64_t, uint64_t))(v15 + 40))(v19, v20);
  uint64_t v21 = *(void *)(v16 + 24);
  unint64_t v22 = (unsigned char *)(v21 + v19);
  uint64_t v23 = (unsigned char *)(v21 + v20);
  unsigned char *v22 = *v23;
  v22[1] = v23[1];
  uint64_t v24 = (void *)((unint64_t)(v22 + 9) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v25 = (unint64_t *)((unint64_t)(v23 + 9) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v26 = *v25;
  if (*v24 < 0xFFFFFFFFuLL)
  {
    if (v26 >= 0xFFFFFFFF)
    {
      unint64_t v28 = v25[1];
      *uint64_t v24 = v26;
      v24[1] = v28;
      return a1;
    }
LABEL_14:
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
    return a1;
  }
  if (v26 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_14;
  }
  unint64_t v27 = v25[1];
  *uint64_t v24 = v26;
  v24[1] = v27;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitMenuButton(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = *(void *)(v4 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  if (v5 <= v8) {
    unsigned int v12 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v4 + 84);
  }
  if (v12 <= 0x7FFFFFFE) {
    unsigned int v13 = 2147483646;
  }
  else {
    unsigned int v13 = v12;
  }
  if (!a2) {
    return 0;
  }
  if (v13 < a2)
  {
    unint64_t v14 = ((*(void *)(*(void *)(v6 - 8) + 64) + ((v10 + v11 + ((v9 + 18) & ~v9)) & ~v11) + 9) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    if ((v14 & 0xFFFFFFF8) != 0) {
      unsigned int v15 = 2;
    }
    else {
      unsigned int v15 = a2 - v13 + 1;
    }
    if (v15 >= 0x10000) {
      unsigned int v16 = 4;
    }
    else {
      unsigned int v16 = 2;
    }
    if (v15 < 0x100) {
      unsigned int v16 = 1;
    }
    if (v15 >= 2) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    switch(v17)
    {
      case 1:
        int v18 = *((unsigned __int8 *)a1 + v14);
        if (!*((unsigned char *)a1 + v14)) {
          break;
        }
        goto LABEL_25;
      case 2:
        int v18 = *(unsigned __int16 *)((char *)a1 + v14);
        if (*(_WORD *)((char *)a1 + v14)) {
          goto LABEL_25;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1877048F8);
      case 4:
        int v18 = *(_DWORD *)((char *)a1 + v14);
        if (!v18) {
          break;
        }
LABEL_25:
        int v20 = v18 - 1;
        if ((v14 & 0xFFFFFFF8) != 0)
        {
          int v20 = 0;
          int v21 = *a1;
        }
        else
        {
          int v21 = 0;
        }
        return v13 + (v21 | v20) + 1;
      default:
        break;
    }
  }
  if (v12 > 0x7FFFFFFE)
  {
    uint64_t v23 = ((unint64_t)a1 + v9 + 18) & ~v9;
    if (v5 == v13) {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))(v23);
    }
    else {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))((v23 + v10 + v11) & ~v11, v8, v6);
    }
  }
  else
  {
    uint64_t v22 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v22) = -1;
    }
    if ((v22 + 1) >= 2) {
      return v22;
    }
    else {
      return 0;
    }
  }
}

void storeEnumTagSinglePayload for UIKitMenuButton(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  if (v7 <= *(_DWORD *)(v9 + 84)) {
    unsigned int v13 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  if (v13 <= 0x7FFFFFFE) {
    unsigned int v14 = 2147483646;
  }
  else {
    unsigned int v14 = v13;
  }
  size_t v15 = ((*(void *)(*(void *)(v8 - 8) + 64) + ((v11 + v12 + ((v10 + 18) & ~v10)) & ~v12) + 9) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v14 >= a3)
  {
    int v19 = 0;
    int v20 = a2 - v14;
    if (a2 <= v14)
    {
LABEL_20:
      switch(v19)
      {
        case 1:
          a1[v15] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 2:
          *(_WORD *)&a1[v15] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 3:
          goto LABEL_49;
        case 4:
          *(_DWORD *)&a1[v15] = 0;
          goto LABEL_32;
        default:
LABEL_32:
          if (a2)
          {
LABEL_33:
            if (v13 > 0x7FFFFFFE)
            {
              unint64_t v23 = (unint64_t)&a1[v10 + 18] & ~v10;
              if (v7 == v14)
              {
                uint64_t v24 = *(void (**)(unint64_t))(v6 + 56);
                v24(v23);
              }
              else
              {
                unint64_t v25 = (v23 + v11 + v12) & ~v12;
                unint64_t v26 = *(void (**)(unint64_t))(v9 + 56);
                v26(v25);
              }
            }
            else if (a2 > 0x7FFFFFFE)
            {
              *(void *)a1 = 0;
              *((void *)a1 + 1) = 0;
              *(_DWORD *)a1 = a2 - 0x7FFFFFFF;
            }
            else
            {
              *(void *)a1 = a2;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v16 = a3 - v14;
    if (((*(_DWORD *)(*(void *)(v8 - 8) + 64)
         + ((v11 + v12 + ((v10 + 18) & ~v10)) & ~v12)
         + 9) & 0xFFFFFFF8) == 0xFFFFFFF0)
      unsigned int v17 = v16 + 1;
    else {
      unsigned int v17 = 2;
    }
    if (v17 >= 0x10000) {
      int v18 = 4;
    }
    else {
      int v18 = 2;
    }
    if (v17 < 0x100) {
      int v18 = 1;
    }
    if (v17 >= 2) {
      int v19 = v18;
    }
    else {
      int v19 = 0;
    }
    int v20 = a2 - v14;
    if (a2 <= v14) {
      goto LABEL_20;
    }
  }
  if (((*(_DWORD *)(*(void *)(v8 - 8) + 64)
       + ((v11 + v12 + ((v10 + 18) & ~v10)) & ~v12)
       + 9) & 0xFFFFFFF8) == 0xFFFFFFF0)
    int v21 = v20;
  else {
    int v21 = 1;
  }
  if (((*(_DWORD *)(*(void *)(v8 - 8) + 64)
       + ((v11 + v12 + ((v10 + 18) & ~v10)) & ~v12)
       + 9) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v22 = ~v14 + a2;
    bzero(a1, v15);
    *(_DWORD *)a1 = v22;
  }
  switch(v19)
  {
    case 1:
      a1[v15] = v21;
      break;
    case 2:
      *(_WORD *)&a1[v15] = v21;
      break;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x187704BCCLL);
    case 4:
      *(_DWORD *)&a1[v15] = v21;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for UIKitMenuButton()
{
  return swift_getGenericMetadata();
}

_UNKNOWN **base witness table accessor for View in UIKitMenuButton<A, B>()
{
  return &protocol witness table for UIKitMenuButton<A, B>;
}

_UNKNOWN **base witness table accessor for ViewModifier in UIKitSystemButtonConfigurationModifier()
{
  return &protocol witness table for UIKitSystemButtonConfigurationModifier;
}

uint64_t base witness table accessor for MultiViewModifier in UIKitSystemButtonConfigurationModifier()
{
  return lazy protocol witness table accessor for type UIKitSystemButtonConfigurationModifier and conformance UIKitSystemButtonConfigurationModifier(&lazy protocol witness table cache variable for type UIKitSystemButtonConfigurationModifier and conformance UIKitSystemButtonConfigurationModifier, (void (*)(uint64_t))type metadata accessor for UIKitSystemButtonConfigurationModifier);
}

uint64_t base witness table accessor for PrimitiveViewModifier in UIKitSystemButtonConfigurationModifier()
{
  return lazy protocol witness table accessor for type UIKitSystemButtonConfigurationModifier and conformance UIKitSystemButtonConfigurationModifier(&lazy protocol witness table cache variable for type UIKitSystemButtonConfigurationModifier and conformance UIKitSystemButtonConfigurationModifier, (void (*)(uint64_t))type metadata accessor for UIKitSystemButtonConfigurationModifier);
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in UIKitSystemButtonConfigurationModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in UIKitButtonStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined init with take of BridgedPopUpButtonProvider()
{
  return swift_unknownObjectWeakTakeInit();
}

unint64_t lazy protocol witness table accessor for type BridgedPopUpButtonProvider and conformance BridgedPopUpButtonProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type BridgedPopUpButtonProvider and conformance BridgedPopUpButtonProvider;
  if (!lazy protocol witness table cache variable for type BridgedPopUpButtonProvider and conformance BridgedPopUpButtonProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BridgedPopUpButtonProvider and conformance BridgedPopUpButtonProvider);
  }
  return result;
}

uint64_t type metadata accessor for UIKitButton()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for UIKitMenuButton.Child()
{
  return swift_getGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton()
{
  unint64_t result = lazy protocol witness table cache variable for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton;
  if (!lazy protocol witness table cache variable for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton;
  if (!lazy protocol witness table cache variable for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton;
  if (!lazy protocol witness table cache variable for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton;
  if (!lazy protocol witness table cache variable for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton;
  if (!lazy protocol witness table cache variable for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton);
  }
  return result;
}

uint64_t sub_187704E0C()
{
  return 32;
}

__n128 sub_187704E18(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void type metadata accessor for (())?(uint64_t a1)
{
}

uint64_t partial apply for implicit closure #2 in static UIKitMenuButton._makeView(view:inputs:)()
{
  return implicit closure #2 in static UIKitMenuButton._makeView(view:inputs:)(*(void *)(v0 + 48), *(void *)(v0 + 56), *(_DWORD *)(v0 + 64), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t type metadata accessor for UIKitMenuButton.TransformItemList()
{
  return swift_getGenericMetadata();
}

uint64_t sub_187704E94()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t type metadata accessor for UIKitButtonStyleModifier.ResolvedBody()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent);
}

uint64_t partial apply for closure #1 in UIKitSystemButtonConfigurationModifier.viewContent(configuration:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in UIKitSystemButtonConfigurationModifier.viewContent(configuration:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

void type metadata accessor for UIKitButtonAdaptor<ViewContent<HStack<UIKitButtonConfiguration.Label>>>()
{
  if (!lazy cache variable for type metadata for UIKitButtonAdaptor<ViewContent<HStack<UIKitButtonConfiguration.Label>>>)
  {
    type metadata accessor for ViewContent<HStack<UIKitButtonConfiguration.Label>>();
    lazy protocol witness table accessor for type UIKitSystemButtonConfigurationModifier and conformance UIKitSystemButtonConfigurationModifier(&lazy protocol witness table cache variable for type ViewContent<HStack<UIKitButtonConfiguration.Label>> and conformance ViewContent<A>, (void (*)(uint64_t))type metadata accessor for ViewContent<HStack<UIKitButtonConfiguration.Label>>);
    unint64_t v0 = type metadata accessor for UIKitButtonAdaptor();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitButtonAdaptor<ViewContent<HStack<UIKitButtonConfiguration.Label>>>);
    }
  }
}

void type metadata accessor for ViewContent<HStack<UIKitButtonConfiguration.Label>>()
{
  if (!lazy cache variable for type metadata for ViewContent<HStack<UIKitButtonConfiguration.Label>>)
  {
    type metadata accessor for HStack<UIKitButtonConfiguration.Label>(255, &lazy cache variable for type metadata for HStack<UIKitButtonConfiguration.Label>, (uint64_t)&type metadata for UIKitButtonConfiguration.Label, (uint64_t)&protocol witness table for UIKitButtonConfiguration.Label, MEMORY[0x1E4F415B8]);
    lazy protocol witness table accessor for type HStack<UIKitButtonConfiguration.Label> and conformance HStack<A>();
    unint64_t v0 = type metadata accessor for ViewContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewContent<HStack<UIKitButtonConfiguration.Label>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type HStack<UIKitButtonConfiguration.Label> and conformance HStack<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type HStack<UIKitButtonConfiguration.Label> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<UIKitButtonConfiguration.Label> and conformance HStack<A>)
  {
    type metadata accessor for HStack<UIKitButtonConfiguration.Label>(255, &lazy cache variable for type metadata for HStack<UIKitButtonConfiguration.Label>, (uint64_t)&type metadata for UIKitButtonConfiguration.Label, (uint64_t)&protocol witness table for UIKitButtonConfiguration.Label, MEMORY[0x1E4F415B8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<UIKitButtonConfiguration.Label> and conformance HStack<A>);
  }
  return result;
}

uint64_t type metadata accessor for ViewContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for UIKitButtonAdaptor()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type AnyButtonStyleType.Unknown and conformance AnyButtonStyleType.Unknown()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyButtonStyleType.Unknown and conformance AnyButtonStyleType.Unknown;
  if (!lazy protocol witness table cache variable for type AnyButtonStyleType.Unknown and conformance AnyButtonStyleType.Unknown)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyButtonStyleType.Unknown and conformance AnyButtonStyleType.Unknown);
  }
  return result;
}

uint64_t sub_187705160@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues._accessibilityShowButtonShapes.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1877051A0()
{
  return EnvironmentValues._accessibilityShowButtonShapes.setter();
}

void type metadata accessor for WeakAttribute<PlatformItemList>?()
{
  if (!lazy cache variable for type metadata for WeakAttribute<PlatformItemList>?)
  {
    type metadata accessor for Attribute<PlatformItemList>(255, &lazy cache variable for type metadata for WeakAttribute<PlatformItemList>, (uint64_t)&type metadata for PlatformItemList, MEMORY[0x1E4F4E730]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WeakAttribute<PlatformItemList>?);
    }
  }
}

uint64_t outlined init with take of WeakAttribute<WeakBox<UIButton>?>?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for WeakBox<UIButton>?(0, &lazy cache variable for type metadata for WeakAttribute<WeakBox<UIButton>?>?, (uint64_t (*)(uint64_t))type metadata accessor for WeakAttribute<WeakBox<UIButton>?>, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for WeakAttribute<WeakBox<UIButton>?>(uint64_t a1)
{
}

void *outlined retain of UIKitButtonConfiguration(void *a1, void (*a2)(void, void), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = a1[7];
  uint64_t v6 = a1[8];
  a2(a1[1], a1[2]);
  a3(v5, v6);
  return a1;
}

uint64_t sub_187705364()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ViewBasedUIButton.isHighlighted.didset()
{
  return withAnimation<A>(_:_:)();
}

uint64_t partial apply for closure #1 in closure #1 in ViewBasedUIButton.isHighlighted.didset()
{
  return closure #1 in closure #1 in ViewBasedUIButton.isHighlighted.didset();
}

unint64_t lazy protocol witness table accessor for type ButtonContentViewGraph and conformance ButtonContentViewGraph()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonContentViewGraph and conformance ButtonContentViewGraph;
  if (!lazy protocol witness table cache variable for type ButtonContentViewGraph and conformance ButtonContentViewGraph)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonContentViewGraph and conformance ButtonContentViewGraph);
  }
  return result;
}

uint64_t specialized static UseUIButtonConfigurationPredicate.evaluate(inputs:)()
{
  static Semantics.v5.getter();
  if (isLinkedOnOrAfter(_:)())
  {
    _GraphInputs.interfaceIdiom.getter();
    char v0 = AnyInterfaceIdiom.accepts<A>(_:)() ^ 1;
  }
  else
  {
    _GraphInputs.interfaceIdiom.getter();
    if (AnyInterfaceIdiom.accepts<A>(_:)())
    {
      char v0 = 1;
    }
    else
    {
      _GraphInputs.interfaceIdiom.getter();
      char v0 = AnyInterfaceIdiom.accepts<A>(_:)();
    }
  }
  return v0 & 1;
}

id specialized Coordinator.init(action:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v6 = (uint64_t *)&v2[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_action];
  *uint64_t v6 = 0;
  v6[1] = 0;
  unsigned int v7 = &v2[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_menuAttribute];
  *(void *)unsigned int v7 = 0;
  v7[8] = 1;
  uint64_t v8 = &v2[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_menuTitle];
  *uint64_t v8 = 0;
  v8[1] = 0;
  uint64_t v9 = &v2[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_onMenuPresentationChanged];
  *uint64_t v9 = 0;
  v9[1] = 0;
  v2[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_menuControlGroupSize] = 2;
  *(void *)&v2[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_effectiveLabelStyle] = 0;
  uint64_t v10 = &v2[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_menuChangeDetector];
  *(_DWORD *)uint64_t v10 = 0;
  void v10[4] = 1;
  *(void *)&v2[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_sheetBridgeToken] = 0;
  *(void *)&v2[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_inspectorBridgeToken] = 0;
  uint64_t v11 = *v6;
  *uint64_t v6 = a1;
  v6[1] = a2;
  outlined copy of AppIntentExecutor?(a1);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v11);
  v13.receiver = v2;
  v13.super_class = ObjectType;
  return objc_msgSendSuper2(&v13, sel_init);
}

void *specialized UIKitButtonContentHost.init(rootView:)(objc_class *a1)
{
  uint64_t v1 = specialized _UIHostingView.init(rootView:)(a1);
  _UIHostingView.safeAreaRegions.setter(0);

  return v1;
}

void *specialized UIKitButtonContentHost.__allocating_init(rootView:)(objc_class *a1)
{
  id v3 = objc_allocWithZone(v1);
  return specialized UIKitButtonContentHost.init(rootView:)(a1);
}

uint64_t specialized PlatformItemContent.updateUIButton(_:transaction:options:)()
{
  type metadata accessor for WeakBox<UIButton>?(0, &lazy cache variable for type metadata for UIButton.Configuration?, MEMORY[0x1E4FB1290], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v1 - 8);
  id v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)v15 - v5;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)v15 - v8;
  UIButton.configuration.getter();
  uint64_t v10 = type metadata accessor for UIButton.Configuration();
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
  if (v11(v9, 1, v10))
  {
    outlined init with copy of UIButton.Configuration?((uint64_t)v9, (uint64_t)v3);
    UIButton.configuration.setter();
    outlined destroy of UIButton.Configuration?((uint64_t)v9);
  }
  else
  {
    if (*v0)
    {
      id v12 = objc_msgSend(*v0, sel_string);
      v15[1] = v0;
      id v13 = v12;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    UIButton.Configuration.title.setter();
    UIButton.configuration.setter();
  }
  UIButton.configuration.getter();
  if (v11(v6, 1, v10))
  {
    outlined init with copy of UIButton.Configuration?((uint64_t)v6, (uint64_t)v3);
    UIButton.configuration.setter();
    return outlined destroy of UIButton.Configuration?((uint64_t)v6);
  }
  else
  {
    PlatformItemList.Item.image.getter();
    UIButton.Configuration.image.setter();
    return UIButton.configuration.setter();
  }
}

uint64_t specialized ViewContent.menuTitle(uiButton:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (void **)((char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v21 - v6;
  uint64_t v8 = *(void **)(a1 + direct field offset for ViewBasedUIButton.contentHost);
  if (v8)
  {
    uint64_t v9 = type metadata accessor for _UIHostingView();
    id v10 = v8;
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v12 = ViewRendererHost.platformItemList.getter(v9, WitnessTable);
    PlatformItemList.mergedContentItem.getter(v12, (uint64_t)v7);
    swift_bridgeObjectRelease();
    id v13 = (void *)*((void *)v7 + 72);
    if (v13)
    {
      id v14 = objc_msgSend(v13, sel_string);
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v17 = v16;

      outlined init with copy of WeakBox<UIButton>?((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      if (v17)
      {
LABEL_9:
        outlined destroy of UIKitSystemButtonConfigurationModifier((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);

        outlined destroy of UIKitSystemButtonConfigurationModifier((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        return v15;
      }
      int v18 = *v4;
      if (*v4)
      {
LABEL_5:
        id v19 = objc_msgSend(v18, sel_string);
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();

        goto LABEL_9;
      }
    }
    else
    {
      outlined init with copy of WeakBox<UIButton>?((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      int v18 = *v4;
      if (*v4) {
        goto LABEL_5;
      }
    }
    uint64_t v15 = 0;
    goto LABEL_9;
  }
  return 0;
}

uint64_t specialized PlatformItemContent.menuTitle(uiButton:)()
{
  uint64_t v1 = type metadata accessor for PlatformItemList.Item();
  double v2 = MEMORY[0x1F4188790](v1 - 8);
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = (void **)((char *)&v14 - v4);
  uint64_t v6 = *(void **)(v0 + 576);
  if (!v6)
  {
    outlined init with copy of WeakBox<UIButton>?(v0, (uint64_t)&v14 - v4, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    uint64_t v11 = *v5;
    if (*v5) {
      goto LABEL_4;
    }
    goto LABEL_6;
  }
  id v7 = objc_msgSend(v6, sel_string, v2);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  outlined init with copy of WeakBox<UIButton>?(v0, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  if (!v10)
  {
    uint64_t v11 = *v5;
    if (*v5)
    {
LABEL_4:
      id v12 = objc_msgSend(v11, sel_string);
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      goto LABEL_7;
    }
LABEL_6:
    uint64_t v8 = 0;
  }
LABEL_7:
  outlined destroy of UIKitSystemButtonConfigurationModifier((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  return v8;
}

uint64_t specialized ViewContent.sizeThatFits(_:uiButton:)(uint64_t a1, uint64_t a2)
{
  double v2 = *(void **)(a2 + direct field offset for ViewBasedUIButton.contentHost);
  if (!v2) {
    return 0;
  }
  type metadata accessor for _UIHostingView();
  id v3 = v2;
  swift_getWitnessTable();
  ViewRendererHost.sizeThatFits(_:)();
  uint64_t v5 = v4;

  return v5;
}

uint64_t specialized UIKitButtonAdaptor.sizeThatFits(_:uiView:context:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  LOBYTE(v13) = a2 & 1;
  _ProposedSize.init(_:)();
  uint64_t v9 = v13;
  char v10 = v14;
  uint64_t v11 = v15;
  char v12 = v16;
  return (*(uint64_t (**)(uint64_t *, uint64_t, void))(*(void *)(a6 + 24) + 40))(&v9, a5, *(void *)(a6 + 16));
}

void specialized UIKitButtonContentHost.init(coder:)()
{
}

uint64_t partial apply for closure #1 in Coordinator.menuWillDismiss()()
{
  return (*(uint64_t (**)(void))(v0 + 16))(0);
}

unint64_t lazy protocol witness table accessor for type UpdateContextMenuInteraction and conformance UpdateContextMenuInteraction()
{
  unint64_t result = lazy protocol witness table cache variable for type UpdateContextMenuInteraction and conformance UpdateContextMenuInteraction;
  if (!lazy protocol witness table cache variable for type UpdateContextMenuInteraction and conformance UpdateContextMenuInteraction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UpdateContextMenuInteraction and conformance UpdateContextMenuInteraction);
  }
  return result;
}

uint64_t outlined destroy of UpdateContextMenuInteraction(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #3 in Coordinator.menuWillShow(interaction:)()
{
  return (*(uint64_t (**)(uint64_t))(v0 + 16))(1);
}

void partial apply for closure #1 in Coordinator.setupNotifications(_:)(uint64_t a1)
{
  closure #1 in Coordinator.setupNotifications(_:)(a1, v1);
}

uint64_t partial apply for closure #1 in Coordinator.makeMenu()@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in Coordinator.makeMenu()(a1);
}

void *type metadata accessor for ButtonContentViewGraph()
{
  return &unk_1ED477890;
}

uint64_t type metadata completion function for UIKitButton()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for UIKitButton(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v7 + 72) & (unint64_t)~v7) + *(void *)(v6 + 64) > 0x18)
  {
    uint64_t v10 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v10 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    uint64_t v11 = a2[1];
    if (v11)
    {
      uint64_t v12 = a2[2];
      *(void *)(v4 + 8) = v11;
      *(void *)(v4 + 16) = v12;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    }
    uint64_t v13 = a2[7];
    *(_WORD *)(v4 + 24) = *((_WORD *)a2 + 12);
    *(void *)(v4 + 28) = *(uint64_t *)((char *)a2 + 28);
    *(unsigned char *)(v4 + 36) = *((unsigned char *)a2 + 36);
    *(_WORD *)(v4 + 37) = *(_WORD *)((char *)a2 + 37);
    *(void *)(v4 + 40) = a2[5];
    *(_WORD *)(v4 + 48) = *((_WORD *)a2 + 24);
    if (v13)
    {
      uint64_t v14 = a2[8];
      *(void *)(v4 + 56) = v13;
      *(void *)(v4 + 64) = v14;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 7);
    }
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))((v4 + v7 + 72) & ~v7, ((unint64_t)a2 + v7 + 72) & ~v7, v5);
  }
  return v4;
}

uint64_t destroy for UIKitButton(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8)) {
    swift_release();
  }
  if (*(void *)(a1 + 56)) {
    swift_release();
  }
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

uint64_t initializeWithCopy for UIKitButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  uint64_t v8 = *(void *)(a2 + 56);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(void *)(a1 + 28) = *(void *)(a2 + 28);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(_WORD *)(a1 + 37) = *(_WORD *)(a2 + 37);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 64);
    *(void *)(a1 + 56) = v8;
    *(void *)(a1 + 64) = v9;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  }
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 16))((*(unsigned __int8 *)(v10 + 80) + 72 + a1) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(unsigned __int8 *)(v10 + 80) + 72 + a2) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t assignWithCopy for UIKitButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v6 = (_OWORD *)(a1 + 8);
  uint64_t v8 = (_OWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8))
  {
    if (v7)
    {
      uint64_t v9 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v9;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v7)
  {
    uint64_t v10 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10;
    swift_retain();
    goto LABEL_8;
  }
  *uint64_t v6 = *v8;
LABEL_8:
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  uint64_t v11 = *(void *)(a2 + 28);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(void *)(a1 + 28) = v11;
  *(unsigned char *)(a1 + 37) = *(unsigned char *)(a2 + 37);
  *(unsigned char *)(a1 + 38) = *(unsigned char *)(a2 + 38);
  uint64_t v12 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v12;
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  uint64_t v13 = *(void *)(a2 + 56);
  if (!*(void *)(a1 + 56))
  {
    if (v13)
    {
      uint64_t v15 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = v13;
      *(void *)(a1 + 64) = v15;
      swift_retain();
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    goto LABEL_15;
  }
  if (!v13)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v14 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = v13;
  *(void *)(a1 + 64) = v14;
  swift_retain();
  swift_release();
LABEL_15:
  uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v16 + 24))((*(unsigned __int8 *)(v16 + 80) + 72 + a1) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (*(unsigned __int8 *)(v16 + 80) + 72 + a2) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  return a1;
}

uint64_t initializeWithTake for UIKitButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))((*(unsigned __int8 *)(v6 + 80) + 72 + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(unsigned __int8 *)(v6 + 80) + 72 + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t assignWithTake for UIKitButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v6 = (_OWORD *)(a1 + 8);
  uint64_t v8 = (_OWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8))
  {
    if (v7)
    {
      uint64_t v9 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v9;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v7)
  {
    uint64_t v10 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10;
    goto LABEL_8;
  }
  *uint64_t v6 = *v8;
LABEL_8:
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v12 = *(void *)(a1 + 56);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(void *)(a1 + 28) = *(void *)(a2 + 28);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(_WORD *)(a1 + 37) = *(_WORD *)(a2 + 37);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  if (!v12)
  {
    if (v11)
    {
      uint64_t v14 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = v11;
      *(void *)(a1 + 64) = v14;
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    goto LABEL_15;
  }
  if (!v11)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v13 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v13;
  swift_release();
LABEL_15:
  uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v15 + 40))((*(unsigned __int8 *)(v15 + 80) + 72 + a1) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), (*(unsigned __int8 *)(v15 + 80) + 72 + a2) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitButton(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 72) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 > 0x7FFFFFFE) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 72) & ~v6);
      }
      unint64_t v15 = *((void *)a1 + 1);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      int v16 = v15 - 1;
      if (v16 < 0) {
        int v16 = -1;
      }
      return (v16 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for UIKitButton(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 72) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187706BA4);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 > 0x7FFFFFFE)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 72] & ~v9;
          id v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if (a2 > 0x7FFFFFFE)
        {
          *(_OWORD *)(a1 + 40) = 0u;
          *(_OWORD *)(a1 + 24) = 0u;
          *(_OWORD *)(a1 + 8) = 0u;
          *(_OWORD *)(a1 + 56) = 0u;
          *(void *)a1 = a2 - 0x7FFFFFFF;
        }
        else
        {
          *((void *)a1 + 1) = a2;
        }
      }
      return;
  }
}

ValueMetadata *type metadata accessor for BridgedPopUpButtonProvider()
{
  return &type metadata for BridgedPopUpButtonProvider;
}

uint64_t type metadata completion function for UIKitButtonStyleModifier.ResolvedBody()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for UIKitButtonStyleModifier.ResolvedBody(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 79) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_WORD *)unint64_t v10 = *(_WORD *)v11;
    uint64_t v12 = *(void *)(v11 + 8);
    if (v12)
    {
      uint64_t v13 = *(void *)(v11 + 16);
      *(void *)(v10 + 8) = v12;
      *(void *)(v10 + 16) = v13;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v10 + 8) = *(_OWORD *)(v11 + 8);
    }
    *(unsigned char *)(v10 + 24) = *(unsigned char *)(v11 + 24);
    *(unsigned char *)(v10 + 25) = *(unsigned char *)(v11 + 25);
    uint64_t v14 = *(void *)(v11 + 28);
    *(unsigned char *)(v10 + 36) = *(unsigned char *)(v11 + 36);
    *(void *)(v10 + 28) = v14;
    *(unsigned char *)(v10 + 37) = *(unsigned char *)(v11 + 37);
    *(unsigned char *)(v10 + 38) = *(unsigned char *)(v11 + 38);
    uint64_t v15 = *(void *)(v11 + 40);
    *(unsigned char *)(v10 + 48) = *(unsigned char *)(v11 + 48);
    *(void *)(v10 + 40) = v15;
    *(unsigned char *)(v10 + 49) = *(unsigned char *)(v11 + 49);
    uint64_t v16 = *(void *)(v11 + 56);
    if (v16)
    {
      uint64_t v17 = *(void *)(v11 + 64);
      *(void *)(v10 + 56) = v16;
      *(void *)(v10 + 64) = v17;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v10 + 56) = *(_OWORD *)(v11 + 56);
    }
    unint64_t v18 = (v10 + 79) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v19 = (v11 + 79) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v20 = *(void *)v19;
    char v21 = *(unsigned char *)(v19 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v19, v21);
    *(void *)unint64_t v18 = v20;
    *(unsigned char *)(v18 + 8) = v21;
  }
  return v4;
}

uint64_t destroy for UIKitButtonStyleModifier.ResolvedBody(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = (a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v4 + 8)) {
    swift_release();
  }
  if (*(void *)(v4 + 56)) {
    swift_release();
  }
  unint64_t v5 = (v4 + 79) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)v5;
  char v7 = *(unsigned char *)(v5 + 8);

  return outlined consume of Environment<Bool>.Content(v6, v7);
}

uint64_t initializeWithCopy for UIKitButtonStyleModifier.ResolvedBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_WORD *)unint64_t v7 = *(_WORD *)v8;
  uint64_t v9 = *(void *)(v8 + 8);
  if (v9)
  {
    uint64_t v10 = *(void *)(v8 + 16);
    *(void *)(v7 + 8) = v9;
    *(void *)(v7 + 16) = v10;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v7 + 8) = *(_OWORD *)(v8 + 8);
  }
  *(unsigned char *)(v7 + 24) = *(unsigned char *)(v8 + 24);
  *(unsigned char *)(v7 + 25) = *(unsigned char *)(v8 + 25);
  uint64_t v11 = *(void *)(v8 + 28);
  *(unsigned char *)(v7 + 36) = *(unsigned char *)(v8 + 36);
  *(void *)(v7 + 28) = v11;
  *(unsigned char *)(v7 + 37) = *(unsigned char *)(v8 + 37);
  *(unsigned char *)(v7 + 38) = *(unsigned char *)(v8 + 38);
  uint64_t v12 = *(void *)(v8 + 40);
  *(unsigned char *)(v7 + 48) = *(unsigned char *)(v8 + 48);
  *(void *)(v7 + 40) = v12;
  *(unsigned char *)(v7 + 49) = *(unsigned char *)(v8 + 49);
  uint64_t v13 = *(void *)(v8 + 56);
  if (v13)
  {
    uint64_t v14 = *(void *)(v8 + 64);
    *(void *)(v7 + 56) = v13;
    *(void *)(v7 + 64) = v14;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
  }
  unint64_t v15 = (v7 + 79) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v8 + 79) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = *(void *)v16;
  char v18 = *(unsigned char *)(v16 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v16, v18);
  *(void *)unint64_t v15 = v17;
  *(unsigned char *)(v15 + 8) = v18;
  return a1;
}

uint64_t assignWithCopy for UIKitButtonStyleModifier.ResolvedBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_WORD *)unint64_t v7 = *(_WORD *)v8;
  uint64_t v9 = *(void *)(v8 + 8);
  if (*(void *)(v7 + 8))
  {
    if (v9)
    {
      uint64_t v10 = *(void *)(v8 + 16);
      *(void *)(v7 + 8) = v9;
      *(void *)(v7 + 16) = v10;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v9)
  {
    uint64_t v11 = *(void *)(v8 + 16);
    *(void *)(v7 + 8) = v9;
    *(void *)(v7 + 16) = v11;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(v7 + 8) = *(_OWORD *)(v8 + 8);
LABEL_8:
  *(unsigned char *)(v7 + 24) = *(unsigned char *)(v8 + 24);
  *(unsigned char *)(v7 + 25) = *(unsigned char *)(v8 + 25);
  uint64_t v12 = *(void *)(v8 + 28);
  *(unsigned char *)(v7 + 36) = *(unsigned char *)(v8 + 36);
  *(void *)(v7 + 28) = v12;
  *(unsigned char *)(v7 + 37) = *(unsigned char *)(v8 + 37);
  *(unsigned char *)(v7 + 38) = *(unsigned char *)(v8 + 38);
  uint64_t v13 = *(void *)(v8 + 40);
  *(unsigned char *)(v7 + 48) = *(unsigned char *)(v8 + 48);
  *(void *)(v7 + 40) = v13;
  *(unsigned char *)(v7 + 49) = *(unsigned char *)(v8 + 49);
  uint64_t v14 = *(void *)(v8 + 56);
  if (!*(void *)(v7 + 56))
  {
    if (v14)
    {
      uint64_t v16 = *(void *)(v8 + 64);
      *(void *)(v7 + 56) = v14;
      *(void *)(v7 + 64) = v16;
      swift_retain();
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
    goto LABEL_15;
  }
  if (!v14)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v15 = *(void *)(v8 + 64);
  *(void *)(v7 + 56) = v14;
  *(void *)(v7 + 64) = v15;
  swift_retain();
  swift_release();
LABEL_15:
  unint64_t v17 = (v7 + 79) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v8 + 79) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = *(void *)v18;
  char v20 = *(unsigned char *)(v18 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v18, v20);
  uint64_t v21 = *(void *)v17;
  char v22 = *(unsigned char *)(v17 + 8);
  *(void *)unint64_t v17 = v19;
  *(unsigned char *)(v17 + 8) = v20;
  outlined consume of Environment<Bool>.Content(v21, v22);
  return a1;
}

uint64_t initializeWithTake for UIKitButtonStyleModifier.ResolvedBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  long long v10 = *(_OWORD *)(v8 + 32);
  long long v9 = *(_OWORD *)(v8 + 48);
  long long v11 = *(_OWORD *)(v8 + 16);
  *(void *)(v7 + 64) = *(void *)(v8 + 64);
  *(_OWORD *)(v7 + 32) = v10;
  *(_OWORD *)(v7 + 48) = v9;
  *(_OWORD *)(v7 + 16) = v11;
  unint64_t v12 = (v7 + 79) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v8 + 79) & 0xFFFFFFFFFFFFFFF8;
  char v14 = *(unsigned char *)(v13 + 8);
  *(void *)unint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v14;
  return a1;
}

uint64_t assignWithTake for UIKitButtonStyleModifier.ResolvedBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_WORD *)unint64_t v7 = *(_WORD *)v8;
  uint64_t v9 = *(void *)(v8 + 8);
  if (*(void *)(v7 + 8))
  {
    if (v9)
    {
      uint64_t v10 = *(void *)(v8 + 16);
      *(void *)(v7 + 8) = v9;
      *(void *)(v7 + 16) = v10;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v9)
  {
    uint64_t v11 = *(void *)(v8 + 16);
    *(void *)(v7 + 8) = v9;
    *(void *)(v7 + 16) = v11;
    goto LABEL_8;
  }
  *(_OWORD *)(v7 + 8) = *(_OWORD *)(v8 + 8);
LABEL_8:
  *(unsigned char *)(v7 + 24) = *(unsigned char *)(v8 + 24);
  *(unsigned char *)(v7 + 25) = *(unsigned char *)(v8 + 25);
  uint64_t v12 = *(void *)(v8 + 28);
  *(unsigned char *)(v7 + 36) = *(unsigned char *)(v8 + 36);
  *(void *)(v7 + 28) = v12;
  *(unsigned char *)(v7 + 37) = *(unsigned char *)(v8 + 37);
  *(unsigned char *)(v7 + 38) = *(unsigned char *)(v8 + 38);
  uint64_t v13 = *(void *)(v8 + 40);
  *(unsigned char *)(v7 + 48) = *(unsigned char *)(v8 + 48);
  *(void *)(v7 + 40) = v13;
  *(unsigned char *)(v7 + 49) = *(unsigned char *)(v8 + 49);
  uint64_t v14 = *(void *)(v8 + 56);
  if (!*(void *)(v7 + 56))
  {
    if (v14)
    {
      uint64_t v16 = *(void *)(v8 + 64);
      *(void *)(v7 + 56) = v14;
      *(void *)(v7 + 64) = v16;
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
    goto LABEL_15;
  }
  if (!v14)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v15 = *(void *)(v8 + 64);
  *(void *)(v7 + 56) = v14;
  *(void *)(v7 + 64) = v15;
  swift_release();
LABEL_15:
  unint64_t v17 = (v7 + 79) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v8 + 79) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = *(void *)v18;
  LOBYTE(v18) = *(unsigned char *)(v18 + 8);
  uint64_t v20 = *(void *)v17;
  char v21 = *(unsigned char *)(v17 + 8);
  *(void *)unint64_t v17 = v19;
  *(unsigned char *)(v17 + 8) = v18;
  outlined consume of Environment<Bool>.Content(v20, v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitButtonStyleModifier.ResolvedBody(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 79) & 0xFFFFFFFFFFFFFFF8) + 9;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1877075A0);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v15 = 0;
        }
        if (((((v6 + 7) & 0xFFFFFFF8) + 79) & 0xFFFFFFF8) == 0xFFFFFFF8) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)&a1[v6 + 7] & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  int v18 = v17 - 1;
  if (v18 < 0) {
    int v18 = -1;
  }
  return (v18 + 1);
}

double storeEnumTagSinglePayload for UIKitButtonStyleModifier.ResolvedBody(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 79) & 0xFFFFFFFFFFFFFFF8) + 9;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_46;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v7 < 0x7FFFFFFE)
            {
              unint64_t v22 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
              if (a2 > 0x7FFFFFFE)
              {
                double result = 0.0;
                *(_OWORD *)(v22 + 40) = 0u;
                *(_OWORD *)(v22 + 24) = 0u;
                *(_OWORD *)(v22 + 8) = 0u;
                *(_OWORD *)(v22 + 56) = 0u;
                *(void *)unint64_t v22 = a2 - 0x7FFFFFFF;
              }
              else
              {
                *(void *)(v22 + 8) = a2;
              }
            }
            else
            {
              char v21 = *(void (**)(void))(v6 + 56);
              v21();
            }
          }
          break;
      }
      return result;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = ~v8 + a2;
  unsigned int v17 = (~(_BYTE)v8 + a2);
  if (v10 < 4) {
    int v18 = (v16 >> v11) + 1;
  }
  else {
    int v18 = 1;
  }
  if (v10 >= 4) {
    unsigned int v19 = v16;
  }
  else {
    unsigned int v19 = v17;
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v19;
  }
  else {
    *(_DWORD *)a1 = v19;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v18;
      break;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x1877077ECLL);
    case 4:
      *(_DWORD *)&a1[v10] = v18;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for UIKitButtonConfiguration.Label()
{
  return &type metadata for UIKitButtonConfiguration.Label;
}

uint64_t type metadata completion function for ViewContent()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ViewContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 9) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_WORD *)((char *)v4 + v6) = *(_WORD *)((char *)a2 + v6);
    unint64_t v10 = ((unint64_t)v4 + v6 + 9) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 9) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v10 = *(void *)v11;
    *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
  }
  return v4;
}

uint64_t initializeWithCopy for ViewContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  int v7 = (_WORD *)(v6 + a1);
  unsigned int v8 = (_WORD *)(v6 + a2);
  *int v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 9) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  return a1;
}

uint64_t assignWithCopy for ViewContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  int v7 = (_WORD *)(v6 + a1);
  unsigned int v8 = (_WORD *)(v6 + a2);
  *int v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 9) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  return a1;
}

uint64_t initializeWithTake for ViewContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  int v7 = (_WORD *)(v6 + a1);
  unsigned int v8 = (_WORD *)(v6 + a2);
  *int v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 9) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  return a1;
}

uint64_t assignWithTake for ViewContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  int v7 = (_WORD *)(v6 + a1);
  unsigned int v8 = (_WORD *)(v6 + a2);
  *int v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 9) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ViewContent(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 9) & 0xFFFFFFFFFFFFFFF8) + 9;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_21;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_21;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187707D60);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_21:
        int v14 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v14 = 0;
        }
        if (((v6 + 9) & 0xFFFFFFF8) == 0xFFFFFFF8) {
          int v15 = *a1;
        }
        else {
          int v15 = *(_DWORD *)a1;
        }
        return v7 + (v15 | v14) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v17 = *(unsigned __int8 *)(((unint64_t)&a1[v6 + 9] & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 >= 2) {
    return ((v17 + 2147483646) & 0x7FFFFFFF) + 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for ViewContent(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = ((v9 + 9) & 0xFFFFFFFFFFFFFFF8) + 9;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v7 < 0xFE)
            {
              *(unsigned char *)(((unint64_t)&a1[v9 + 9] & 0xFFFFFFFFFFFFFFF8) + 8) = a2 + 1;
            }
            else
            {
              uint64_t v20 = *(void (**)(void))(v6 + 56);
              v20();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = ~v8 + a2;
  unsigned int v17 = (~(_BYTE)v8 + a2);
  if (v10 < 4) {
    int v18 = (v16 >> v11) + 1;
  }
  else {
    int v18 = 1;
  }
  if (v10 >= 4) {
    unsigned int v19 = v16;
  }
  else {
    unsigned int v19 = v17;
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v19;
  }
  else {
    *(_DWORD *)a1 = v19;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v18;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x187707F78);
    case 4:
      *(_DWORD *)&a1[v10] = v18;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for UIKitButtonAdaptor()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for UIKitButtonAdaptor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64) + 7;
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((((v8 + ((v7 + 153) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v11 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v11 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
  }
  else
  {
    uint64_t v12 = ~v7;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    unint64_t v13 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v14 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v15 = *(void *)v14;
    char v16 = *(unsigned char *)(v14 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v14, v16);
    *(void *)unint64_t v13 = v15;
    *(unsigned char *)(v13 + 8) = v16;
    unint64_t v17 = ((unint64_t)v4 + 39) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v18 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v19 = *(void *)v18;
    unsigned __int8 v20 = *(unsigned char *)(v18 + 8);
    outlined copy of Environment<Color?>.Content(*(void *)v18, v20);
    *(void *)unint64_t v17 = v19;
    *(unsigned char *)(v17 + 8) = v20;
    unint64_t v21 = ((unint64_t)v4 + 55) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v22 = ((unint64_t)a2 + 55) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v23 = *(void *)v22;
    char v24 = *(unsigned char *)(v22 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v22, v24);
    *(void *)unint64_t v21 = v23;
    *(unsigned char *)(v21 + 8) = v24;
    unint64_t v25 = ((unint64_t)v4 + 71) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v26 = ((unint64_t)a2 + 71) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v27 = *(void *)v26;
    char v28 = *(unsigned char *)(v26 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v26, v28);
    *(void *)unint64_t v25 = v27;
    *(unsigned char *)(v25 + 8) = v28;
    unint64_t v29 = ((unint64_t)v4 + 87) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v30 = ((unint64_t)a2 + 87) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v31 = *(void *)v30;
    char v32 = *(unsigned char *)(v30 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v30, v32);
    *(void *)unint64_t v29 = v31;
    *(unsigned char *)(v29 + 8) = v32;
    unint64_t v33 = ((unint64_t)v4 + 103) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v34 = ((unint64_t)a2 + 103) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v35 = *(void *)v34;
    char v36 = *(unsigned char *)(v34 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v34, v36);
    *(void *)unint64_t v33 = v35;
    *(unsigned char *)(v33 + 8) = v36;
    unint64_t v37 = ((unint64_t)v4 + 119) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v38 = ((unint64_t)a2 + 119) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v38 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v37 = *(_OWORD *)v38;
    }
    else
    {
      uint64_t v39 = *(void *)(v38 + 8);
      *(void *)unint64_t v37 = *(void *)v38;
      *(void *)(v37 + 8) = v39;
      swift_retain();
    }
    *(unsigned char *)(v37 + 16) = *(unsigned char *)(v38 + 16);
    uint64_t v40 = *(void *)(v38 + 20);
    *(unsigned char *)(v37 + 28) = *(unsigned char *)(v38 + 28);
    *(void *)(v37 + 20) = v40;
    *(unsigned char *)(v37 + 29) = *(unsigned char *)(v38 + 29);
    *(unsigned char *)(v37 + 30) = *(unsigned char *)(v38 + 30);
    unint64_t v41 = (v37 + 34) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v42 = (v38 + 34) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v43 = *(void *)v42;
    *(unsigned char *)(v41 + 8) = *(unsigned char *)(v42 + 8);
    *(void *)unint64_t v41 = v43;
    uint64_t v44 = (v41 + v7 + 9) & v12;
    uint64_t v45 = (v42 + v7 + 9) & v12;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v44, v45, v5);
    uint64_t v46 = (void *)((v8 + v44) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v47 = (void *)((v8 + v45) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v46 = *v47;
    unint64_t v48 = ((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v49 = ((unint64_t)v47 + 15) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v49 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v48 = *(_OWORD *)v49;
      return v4;
    }
    uint64_t v50 = *(void *)(v49 + 8);
    *(void *)unint64_t v48 = *(void *)v49;
    *(void *)(v48 + 8) = v50;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for UIKitButtonAdaptor(uint64_t a1, uint64_t a2)
{
  outlined consume of Environment<Bool>.Content(*(void *)((a1 + 23) & 0xFFFFFFFFFFFFFFF8), *(unsigned char *)(((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
  outlined consume of Environment<Color?>.Content(*(void *)((a1 + 39) & 0xFFFFFFFFFFFFFFF8), *(unsigned __int8 *)(((a1 + 39) & 0xFFFFFFFFFFFFFFF8) + 8));
  outlined consume of Environment<Bool>.Content(*(void *)((a1 + 55) & 0xFFFFFFFFFFFFFFF8), *(unsigned char *)(((a1 + 55) & 0xFFFFFFFFFFFFFFF8) + 8));
  outlined consume of Environment<Bool>.Content(*(void *)((a1 + 71) & 0xFFFFFFFFFFFFFFF8), *(unsigned char *)(((a1 + 71) & 0xFFFFFFFFFFFFFFF8) + 8));
  outlined consume of Environment<Bool>.Content(*(void *)((a1 + 87) & 0xFFFFFFFFFFFFFFF8), *(unsigned char *)(((a1 + 87) & 0xFFFFFFFFFFFFFFF8) + 8));
  outlined consume of Environment<Bool>.Content(*(void *)((a1 + 103) & 0xFFFFFFFFFFFFFFF8), *(unsigned char *)(((a1 + 103) & 0xFFFFFFFFFFFFFFF8) + 8));
  uint64_t v4 = (void *)((a1 + 119) & 0xFFFFFFFFFFFFFFF8);
  if (*v4 >= 0xFFFFFFFFuLL) {
    swift_release();
  }
  unint64_t v5 = ((unint64_t)v4 + 34) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v6 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t))(v6 + 8))(v8);
  if (*(void *)((((*(void *)(v7 + 56) + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
  {
    return swift_release();
  }
  return result;
}

_OWORD *initializeWithCopy for UIKitButtonAdaptor(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v6 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)v7;
  char v9 = *(unsigned char *)(v7 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v7, v9);
  *(void *)unint64_t v6 = v8;
  *(unsigned char *)(v6 + 8) = v9;
  unint64_t v10 = ((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(void *)v11;
  unsigned __int8 v13 = *(unsigned char *)(v11 + 8);
  outlined copy of Environment<Color?>.Content(*(void *)v11, v13);
  *(void *)unint64_t v10 = v12;
  *(unsigned char *)(v10 + 8) = v13;
  unint64_t v14 = ((unint64_t)a1 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = ((unint64_t)a2 + 55) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = *(void *)v15;
  char v17 = *(unsigned char *)(v15 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v15, v17);
  *(void *)unint64_t v14 = v16;
  *(unsigned char *)(v14 + 8) = v17;
  unint64_t v18 = ((unint64_t)a1 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = ((unint64_t)a2 + 71) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = *(void *)v19;
  char v21 = *(unsigned char *)(v19 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v19, v21);
  *(void *)unint64_t v18 = v20;
  *(unsigned char *)(v18 + 8) = v21;
  unint64_t v22 = ((unint64_t)a1 + 87) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = ((unint64_t)a2 + 87) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = *(void *)v23;
  char v25 = *(unsigned char *)(v23 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v23, v25);
  *(void *)unint64_t v22 = v24;
  *(unsigned char *)(v22 + 8) = v25;
  unint64_t v26 = ((unint64_t)a1 + 103) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = ((unint64_t)a2 + 103) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v28 = *(void *)v27;
  char v29 = *(unsigned char *)(v27 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v27, v29);
  *(void *)unint64_t v26 = v28;
  *(unsigned char *)(v26 + 8) = v29;
  unint64_t v30 = ((unint64_t)a1 + 119) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v31 = ((unint64_t)a2 + 119) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v31 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v30 = *(_OWORD *)v31;
  }
  else
  {
    uint64_t v32 = *(void *)(v31 + 8);
    *(void *)unint64_t v30 = *(void *)v31;
    *(void *)(v30 + 8) = v32;
    swift_retain();
  }
  *(unsigned char *)(v30 + 16) = *(unsigned char *)(v31 + 16);
  uint64_t v33 = *(void *)(v31 + 20);
  *(unsigned char *)(v30 + 28) = *(unsigned char *)(v31 + 28);
  *(void *)(v30 + 20) = v33;
  *(unsigned char *)(v30 + 29) = *(unsigned char *)(v31 + 29);
  *(unsigned char *)(v30 + 30) = *(unsigned char *)(v31 + 30);
  unint64_t v34 = (v30 + 34) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v35 = (v31 + 34) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v36 = *(void *)v35;
  *(unsigned char *)(v34 + 8) = *(unsigned char *)(v35 + 8);
  *(void *)unint64_t v34 = v36;
  uint64_t v37 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v38 = v37 + 16;
  uint64_t v39 = *(unsigned __int8 *)(v37 + 80);
  uint64_t v40 = (v39 + 9 + v34) & ~v39;
  uint64_t v41 = (v39 + 9 + v35) & ~v39;
  (*(void (**)(uint64_t, uint64_t))(v37 + 16))(v40, v41);
  uint64_t v42 = *(void *)(v38 + 48) + 7;
  uint64_t v43 = (void *)((v42 + v40) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v44 = (void *)((v42 + v41) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v43 = *v44;
  unint64_t v45 = ((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v46 = ((unint64_t)v44 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v46 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v45 = *(_OWORD *)v46;
  }
  else
  {
    uint64_t v47 = *(void *)(v46 + 8);
    *(void *)unint64_t v45 = *(void *)v46;
    *(void *)(v45 + 8) = v47;
    swift_retain();
  }
  return a1;
}

_OWORD *assignWithCopy for UIKitButtonAdaptor(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 119;
  *a1 = *a2;
  unint64_t v7 = (unint64_t)a1 + 119;
  unint64_t v8 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)v9;
  char v11 = *(unsigned char *)(v9 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v9, v11);
  uint64_t v12 = *(void *)v8;
  char v13 = *(unsigned char *)(v8 + 8);
  *(void *)unint64_t v8 = v10;
  *(unsigned char *)(v8 + 8) = v11;
  outlined consume of Environment<Bool>.Content(v12, v13);
  unint64_t v14 = ((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = *(void *)v15;
  unsigned __int8 v17 = *(unsigned char *)(v15 + 8);
  outlined copy of Environment<Color?>.Content(*(void *)v15, v17);
  uint64_t v18 = *(void *)v14;
  uint64_t v19 = *(unsigned __int8 *)(v14 + 8);
  *(void *)unint64_t v14 = v16;
  *(unsigned char *)(v14 + 8) = v17;
  outlined consume of Environment<Color?>.Content(v18, v19);
  unint64_t v20 = ((unint64_t)a1 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = ((unint64_t)a2 + 55) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = *(void *)v21;
  char v23 = *(unsigned char *)(v21 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v21, v23);
  uint64_t v24 = *(void *)v20;
  char v25 = *(unsigned char *)(v20 + 8);
  *(void *)unint64_t v20 = v22;
  *(unsigned char *)(v20 + 8) = v23;
  outlined consume of Environment<Bool>.Content(v24, v25);
  unint64_t v26 = ((unint64_t)a1 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = ((unint64_t)a2 + 71) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v28 = *(void *)v27;
  char v29 = *(unsigned char *)(v27 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v27, v29);
  uint64_t v30 = *(void *)v26;
  char v31 = *(unsigned char *)(v26 + 8);
  *(void *)unint64_t v26 = v28;
  *(unsigned char *)(v26 + 8) = v29;
  outlined consume of Environment<Bool>.Content(v30, v31);
  unint64_t v32 = ((unint64_t)a1 + 87) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v33 = ((unint64_t)a2 + 87) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v34 = *(void *)v33;
  char v35 = *(unsigned char *)(v33 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v33, v35);
  uint64_t v36 = *(void *)v32;
  char v37 = *(unsigned char *)(v32 + 8);
  *(void *)unint64_t v32 = v34;
  *(unsigned char *)(v32 + 8) = v35;
  outlined consume of Environment<Bool>.Content(v36, v37);
  unint64_t v38 = ((unint64_t)a1 + 103) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v39 = ((unint64_t)a2 + 103) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v40 = *(void *)v39;
  LOBYTE(v34) = *(unsigned char *)(v39 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v39, v34);
  uint64_t v41 = *(void *)v38;
  char v42 = *(unsigned char *)(v38 + 8);
  *(void *)unint64_t v38 = v40;
  *(unsigned char *)(v38 + 8) = v34;
  outlined consume of Environment<Bool>.Content(v41, v42);
  unint64_t v43 = v7 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v44 = v6 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v45 = *(void *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if (*(void *)(v7 & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFuLL)
  {
    if (v45 >= 0xFFFFFFFF)
    {
      uint64_t v47 = *(void *)(v44 + 8);
      *(void *)unint64_t v43 = v45;
      *(void *)(v43 + 8) = v47;
      swift_retain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v45 >= 0xFFFFFFFF)
    {
      uint64_t v46 = *(void *)(v44 + 8);
      *(void *)unint64_t v43 = v45;
      *(void *)(v43 + 8) = v46;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)unint64_t v43 = *(_OWORD *)v44;
LABEL_8:
  *(unsigned char *)(v43 + 16) = *(unsigned char *)(v44 + 16);
  uint64_t v48 = *(void *)(v44 + 20);
  *(unsigned char *)(v43 + 28) = *(unsigned char *)(v44 + 28);
  *(void *)(v43 + 20) = v48;
  *(unsigned char *)(v43 + 29) = *(unsigned char *)(v44 + 29);
  *(unsigned char *)(v43 + 30) = *(unsigned char *)(v44 + 30);
  unint64_t v49 = (v43 + 34) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v50 = (v44 + 34) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v51 = *(void *)v50;
  *(unsigned char *)(v49 + 8) = *(unsigned char *)(v50 + 8);
  *(void *)unint64_t v49 = v51;
  uint64_t v52 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v53 = v52 + 24;
  uint64_t v54 = *(unsigned __int8 *)(v52 + 80);
  uint64_t v55 = (v54 + 9 + v49) & ~v54;
  uint64_t v56 = (v54 + 9 + v50) & ~v54;
  (*(void (**)(uint64_t, uint64_t))(v52 + 24))(v55, v56);
  uint64_t v57 = *(void *)(v53 + 40) + 7;
  int v58 = (void *)((v57 + v55) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v59 = (void *)((v57 + v56) & 0xFFFFFFFFFFFFFFF8);
  *int v58 = *v59;
  uint64_t v60 = (void *)(((unint64_t)v58 + 15) & 0xFFFFFFFFFFFFFFF8);
  char v61 = (unint64_t *)(((unint64_t)v59 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v62 = *v61;
  if (*v60 < 0xFFFFFFFFuLL)
  {
    if (v62 >= 0xFFFFFFFF)
    {
      unint64_t v64 = v61[1];
      *uint64_t v60 = v62;
      v60[1] = v64;
      swift_retain();
      return a1;
    }
LABEL_14:
    *(_OWORD *)uint64_t v60 = *(_OWORD *)v61;
    return a1;
  }
  if (v62 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_14;
  }
  unint64_t v63 = v61[1];
  *uint64_t v60 = v62;
  v60[1] = v63;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *initializeWithTake for UIKitButtonAdaptor(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)v5;
  *(unsigned char *)(v4 + 8) = *(unsigned char *)(v5 + 8);
  *(void *)unint64_t v4 = v6;
  unint64_t v7 = ((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  *(unsigned char *)(v7 + 8) = *(unsigned char *)(v8 + 8);
  *(void *)unint64_t v7 = v9;
  unint64_t v10 = ((unint64_t)a1 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = ((unint64_t)a2 + 55) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(void *)v11;
  *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
  *(void *)unint64_t v10 = v12;
  unint64_t v13 = ((unint64_t)a1 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = ((unint64_t)a2 + 71) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  *(void *)unint64_t v13 = v15;
  unint64_t v16 = ((unint64_t)a1 + 87) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = ((unint64_t)a2 + 87) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  *(void *)unint64_t v16 = v18;
  unint64_t v19 = ((unint64_t)a1 + 103) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = ((unint64_t)a2 + 103) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  *(void *)unint64_t v19 = v21;
  unint64_t v22 = ((unint64_t)a1 + 119) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = ((unint64_t)a2 + 119) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v23 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v22 = *(_OWORD *)v23;
  }
  else
  {
    uint64_t v24 = *(void *)(v23 + 8);
    *(void *)unint64_t v22 = *(void *)v23;
    *(void *)(v22 + 8) = v24;
  }
  *(unsigned char *)(v22 + 16) = *(unsigned char *)(v23 + 16);
  uint64_t v25 = *(void *)(v23 + 20);
  *(unsigned char *)(v22 + 28) = *(unsigned char *)(v23 + 28);
  *(void *)(v22 + 20) = v25;
  *(unsigned char *)(v22 + 29) = *(unsigned char *)(v23 + 29);
  *(unsigned char *)(v22 + 30) = *(unsigned char *)(v23 + 30);
  unint64_t v26 = (v22 + 34) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = (v23 + 34) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v28 = *(void *)v27;
  *(unsigned char *)(v26 + 8) = *(unsigned char *)(v27 + 8);
  *(void *)unint64_t v26 = v28;
  uint64_t v29 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v30 = v29 + 32;
  uint64_t v31 = *(unsigned __int8 *)(v29 + 80);
  uint64_t v32 = (v31 + 9 + v26) & ~v31;
  uint64_t v33 = (v31 + 9 + v27) & ~v31;
  (*(void (**)(uint64_t, uint64_t))(v29 + 32))(v32, v33);
  uint64_t v34 = *(void *)(v30 + 32) + 7;
  char v35 = (void *)((v34 + v32) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v36 = (void *)((v34 + v33) & 0xFFFFFFFFFFFFFFF8);
  *char v35 = *v36;
  unint64_t v37 = ((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v38 = (uint64_t *)(((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v39 = *v38;
  if ((unint64_t)*v38 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v37 = *(_OWORD *)v38;
  }
  else
  {
    uint64_t v40 = v38[1];
    *(void *)unint64_t v37 = v39;
    *(void *)(v37 + 8) = v40;
  }
  return a1;
}

_OWORD *assignWithTake for UIKitButtonAdaptor(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 119;
  *a1 = *a2;
  unint64_t v7 = (unint64_t)a1 + 119;
  unint64_t v8 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)v9;
  LOBYTE(v9) = *(unsigned char *)(v9 + 8);
  uint64_t v11 = *(void *)v8;
  char v12 = *(unsigned char *)(v8 + 8);
  *(void *)unint64_t v8 = v10;
  *(unsigned char *)(v8 + 8) = v9;
  outlined consume of Environment<Bool>.Content(v11, v12);
  unint64_t v13 = ((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = *(void *)v14;
  LOBYTE(v14) = *(unsigned char *)(v14 + 8);
  uint64_t v16 = *(void *)v13;
  uint64_t v17 = *(unsigned __int8 *)(v13 + 8);
  *(void *)unint64_t v13 = v15;
  *(unsigned char *)(v13 + 8) = v14;
  outlined consume of Environment<Color?>.Content(v16, v17);
  unint64_t v18 = ((unint64_t)a1 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = ((unint64_t)a2 + 55) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = *(void *)v19;
  LOBYTE(v19) = *(unsigned char *)(v19 + 8);
  uint64_t v21 = *(void *)v18;
  char v22 = *(unsigned char *)(v18 + 8);
  *(void *)unint64_t v18 = v20;
  *(unsigned char *)(v18 + 8) = v19;
  outlined consume of Environment<Bool>.Content(v21, v22);
  unint64_t v23 = ((unint64_t)a1 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = ((unint64_t)a2 + 71) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v25 = *(void *)v24;
  LOBYTE(v24) = *(unsigned char *)(v24 + 8);
  uint64_t v26 = *(void *)v23;
  char v27 = *(unsigned char *)(v23 + 8);
  *(void *)unint64_t v23 = v25;
  *(unsigned char *)(v23 + 8) = v24;
  outlined consume of Environment<Bool>.Content(v26, v27);
  unint64_t v28 = ((unint64_t)a1 + 87) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = ((unint64_t)a2 + 87) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v30 = *(void *)v29;
  LOBYTE(v29) = *(unsigned char *)(v29 + 8);
  uint64_t v31 = *(void *)v28;
  char v32 = *(unsigned char *)(v28 + 8);
  *(void *)unint64_t v28 = v30;
  *(unsigned char *)(v28 + 8) = v29;
  outlined consume of Environment<Bool>.Content(v31, v32);
  unint64_t v33 = ((unint64_t)a1 + 103) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v34 = ((unint64_t)a2 + 103) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v35 = *(void *)v34;
  LOBYTE(v34) = *(unsigned char *)(v34 + 8);
  uint64_t v36 = *(void *)v33;
  char v37 = *(unsigned char *)(v33 + 8);
  *(void *)unint64_t v33 = v35;
  *(unsigned char *)(v33 + 8) = v34;
  outlined consume of Environment<Bool>.Content(v36, v37);
  unint64_t v38 = v7 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v39 = v6 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v40 = *(void *)v39;
  if (*(void *)(v7 & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFuLL)
  {
    if (v40 >= 0xFFFFFFFF)
    {
      uint64_t v42 = *(void *)(v39 + 8);
      *(void *)unint64_t v38 = v40;
      *(void *)(v38 + 8) = v42;
      goto LABEL_8;
    }
  }
  else
  {
    if (v40 >= 0xFFFFFFFF)
    {
      uint64_t v41 = *(void *)(v39 + 8);
      *(void *)unint64_t v38 = v40;
      *(void *)(v38 + 8) = v41;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)unint64_t v38 = *(_OWORD *)v39;
LABEL_8:
  *(unsigned char *)(v38 + 16) = *(unsigned char *)(v39 + 16);
  uint64_t v43 = *(void *)(v39 + 20);
  *(unsigned char *)(v38 + 28) = *(unsigned char *)(v39 + 28);
  *(void *)(v38 + 20) = v43;
  *(unsigned char *)(v38 + 29) = *(unsigned char *)(v39 + 29);
  *(unsigned char *)(v38 + 30) = *(unsigned char *)(v39 + 30);
  unint64_t v44 = (v38 + 34) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v45 = (v39 + 34) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v46 = *(void *)v45;
  *(unsigned char *)(v44 + 8) = *(unsigned char *)(v45 + 8);
  *(void *)unint64_t v44 = v46;
  uint64_t v47 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v48 = v47 + 40;
  uint64_t v49 = *(unsigned __int8 *)(v47 + 80);
  uint64_t v50 = (v49 + 9 + v44) & ~v49;
  uint64_t v51 = (v49 + 9 + v45) & ~v49;
  (*(void (**)(uint64_t, uint64_t))(v47 + 40))(v50, v51);
  uint64_t v52 = *(void *)(v48 + 24) + 7;
  uint64_t v53 = (void *)((v52 + v50) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v54 = (void *)((v52 + v51) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v53 = *v54;
  uint64_t v55 = (void *)(((unint64_t)v53 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v56 = (unint64_t *)(((unint64_t)v54 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v57 = *v56;
  if (*v55 < 0xFFFFFFFFuLL)
  {
    if (v57 >= 0xFFFFFFFF)
    {
      unint64_t v59 = v56[1];
      *uint64_t v55 = v57;
      v55[1] = v59;
      return a1;
    }
LABEL_14:
    *(_OWORD *)uint64_t v55 = *(_OWORD *)v56;
    return a1;
  }
  if (v57 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_14;
  }
  unint64_t v58 = v56[1];
  *uint64_t v55 = v57;
  v55[1] = v58;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitButtonAdaptor(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 153) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1877090C0);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((((unint64_t)a1 + 103) & 0xFFFFFFFFFFFFFFF8)
  }
                                                                    + 50) & 0xFFFFFFFFFFFFFFF8)
                                                                  + v6
                                                                  + 9) & ~v6);
  uint64_t v17 = *(void *)a1;
  if (*(void *)a1 >= 0xFFFFFFFFuLL) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for UIKitButtonAdaptor(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 153) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if ((v7 & 0x80000000) != 0)
            {
              unint64_t v19 = (((((unint64_t)(a1 + 103) & 0xFFFFFFFFFFFFFFF8) + 50) & 0xFFFFFFFFFFFFFFF8) + v9 + 9) & ~v9;
              uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(v19);
            }
            else
            {
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v18 = a2 ^ 0x80000000;
                *((void *)a1 + 1) = 0;
              }
              else
              {
                uint64_t v18 = a2 - 1;
              }
              *(void *)a1 = v18;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 153) & ~v9) + 7) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8) == 0xFFFFFFF0)
      unsigned int v12 = v11 + 1;
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 153) & ~v9) + 7) & 0xFFFFFFF8)
       + 15) & 0xFFFFFFF8) == 0xFFFFFFF0)
    int v16 = v15;
  else {
    int v16 = 1;
  }
  if (((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 153) & ~v9) + 7) & 0xFFFFFFF8)
       + 15) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v17 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x1877092E0);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t initializeBufferWithCopyOfBuffer for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    uint64_t v7 = a2[1];
    if (v7)
    {
      uint64_t v8 = a2[2];
      *(void *)(v4 + 8) = v7;
      *(void *)(v4 + 16) = v8;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    }
    uint64_t v10 = a2[7];
    *(_WORD *)(v4 + 24) = *((_WORD *)a2 + 12);
    *(void *)(v4 + 28) = *(uint64_t *)((char *)a2 + 28);
    *(unsigned char *)(v4 + 36) = *((unsigned char *)a2 + 36);
    *(_WORD *)(v4 + 37) = *(_WORD *)((char *)a2 + 37);
    *(void *)(v4 + 40) = a2[5];
    *(_WORD *)(v4 + 48) = *((_WORD *)a2 + 24);
    if (v10)
    {
      uint64_t v11 = a2[8];
      *(void *)(v4 + 56) = v10;
      *(void *)(v4 + 64) = v11;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 7);
    }
    uint64_t v12 = *(int *)(a3 + 20);
    uint64_t v13 = v4 + v12;
    uint64_t v14 = (uint64_t)a2 + v12;
    uint64_t v15 = type metadata accessor for UIButton.Configuration();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return v4;
}

uint64_t destroy for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8)) {
    swift_release();
  }
  if (*(void *)(a1 + 56)) {
    swift_release();
  }
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UIButton.Configuration();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  uint64_t v8 = *(void *)(a2 + 56);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(void *)(a1 + 28) = *(void *)(a2 + 28);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(_WORD *)(a1 + 37) = *(_WORD *)(a2 + 37);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 64);
    *(void *)(a1 + 56) = v8;
    *(void *)(a1 + 64) = v9;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  }
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for UIButton.Configuration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t assignWithCopy for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v6 = (_OWORD *)(a1 + 8);
  uint64_t v8 = (_OWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8))
  {
    if (v7)
    {
      uint64_t v9 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v9;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v7)
  {
    uint64_t v10 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10;
    swift_retain();
    goto LABEL_8;
  }
  *uint64_t v6 = *v8;
LABEL_8:
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  uint64_t v11 = *(void *)(a2 + 28);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(void *)(a1 + 28) = v11;
  *(unsigned char *)(a1 + 37) = *(unsigned char *)(a2 + 37);
  *(unsigned char *)(a1 + 38) = *(unsigned char *)(a2 + 38);
  uint64_t v12 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v12;
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  uint64_t v13 = *(void *)(a2 + 56);
  if (!*(void *)(a1 + 56))
  {
    if (v13)
    {
      uint64_t v15 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = v13;
      *(void *)(a1 + 64) = v15;
      swift_retain();
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    goto LABEL_15;
  }
  if (!v13)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v14 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = v13;
  *(void *)(a1 + 64) = v14;
  swift_retain();
  swift_release();
LABEL_15:
  uint64_t v16 = *(int *)(a3 + 20);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for UIButton.Configuration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 24))(v17, v18, v19);
  return a1;
}

uint64_t initializeWithTake for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UIButton.Configuration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

uint64_t assignWithTake for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v6 = (_OWORD *)(a1 + 8);
  uint64_t v8 = (_OWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8))
  {
    if (v7)
    {
      uint64_t v9 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v9;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v7)
  {
    uint64_t v10 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10;
    goto LABEL_8;
  }
  *uint64_t v6 = *v8;
LABEL_8:
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v12 = *(void *)(a1 + 56);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(void *)(a1 + 28) = *(void *)(a2 + 28);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(_WORD *)(a1 + 37) = *(_WORD *)(a2 + 37);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  if (!v12)
  {
    if (v11)
    {
      uint64_t v14 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = v11;
      *(void *)(a1 + 64) = v14;
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    goto LABEL_15;
  }
  if (!v11)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v13 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v13;
  swift_release();
LABEL_15:
  uint64_t v15 = *(int *)(a3 + 20);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for UIButton.Configuration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40))(v16, v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187709978);
}

uint64_t sub_187709978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = type metadata accessor for UIButton.Configuration();
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 20);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187709A48);
}

uint64_t sub_187709A48(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UIButton.Configuration();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent()
{
  uint64_t result = type metadata accessor for UIButton.Configuration();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_187709BA0()
{
  type metadata accessor for UIKitButtonStyleModifier.ResolvedBody();

  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent, UIKitButtonAdaptor<ViewContent<HStack<UIKitButtonConfiguration.Label>>>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent, UIKitButtonAdaptor<ViewContent<HStack<UIKitButtonConfiguration.Label>>>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent, UIKitButtonAdaptor<ViewContent<HStack<UIKitButtonConfiguration.Label>>>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent, UIKitButtonAdaptor<ViewContent<HStack<UIKitButtonConfiguration.Label>>>>.Storage(255, &lazy cache variable for type metadata for _ConditionalContent<UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent, UIKitButtonAdaptor<ViewContent<HStack<UIKitButtonConfiguration.Label>>>>, MEMORY[0x1E4F40578]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent, UIKitButtonAdaptor<ViewContent<HStack<UIKitButtonConfiguration.Label>>>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent, UIKitButtonAdaptor<ViewContent<HStack<UIKitButtonConfiguration.Label>>>>.Storage(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent(255);
    type metadata accessor for UIKitButtonAdaptor<ViewContent<HStack<UIKitButtonConfiguration.Label>>>();
    unint64_t v8 = a3(a1, v6, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

_UNKNOWN **base witness table accessor for View in UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent()
{
  return &protocol witness table for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent;
}

_UNKNOWN **base witness table accessor for View in UIKitButtonConfiguration.Label()
{
  return &protocol witness table for UIKitButtonConfiguration.Label;
}

unint64_t instantiation function for generic protocol witness table for UIKitButtonConfiguration.Label(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type UIKitButtonConfiguration.Label and conformance UIKitButtonConfiguration.Label();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type UIKitButtonConfiguration.Label and conformance UIKitButtonConfiguration.Label()
{
  unint64_t result = lazy protocol witness table cache variable for type UIKitButtonConfiguration.Label and conformance UIKitButtonConfiguration.Label;
  if (!lazy protocol witness table cache variable for type UIKitButtonConfiguration.Label and conformance UIKitButtonConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitButtonConfiguration.Label and conformance UIKitButtonConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UIKitButtonConfiguration.Label and conformance UIKitButtonConfiguration.Label;
  if (!lazy protocol witness table cache variable for type UIKitButtonConfiguration.Label and conformance UIKitButtonConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitButtonConfiguration.Label and conformance UIKitButtonConfiguration.Label);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in UIKitButtonStyleModifier<A>.ResolvedBody()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in UIKitMenuButton<A, B>.TransformItemList()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for View.Body : View in UIKitButton<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in UIKitMenuButton<A, B>.Child()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in UIKitMenuButton.Child.value.getter()
{
  return closure #1 in UIKitMenuButton.Child.value.getter(v0[6], v0[7], v0[2]);
}

uint64_t partial apply for closure #1 in UIKitButton.body.getter()
{
  return closure #1 in UIKitButton.body.getter(*(void *)(v0 + 32), *(void *)(v0 + 16));
}

unint64_t lazy protocol witness table accessor for type ResolvedUIKitButtonBody and conformance ResolvedUIKitButtonBody()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedUIKitButtonBody and conformance ResolvedUIKitButtonBody;
  if (!lazy protocol witness table cache variable for type ResolvedUIKitButtonBody and conformance ResolvedUIKitButtonBody)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedUIKitButtonBody and conformance ResolvedUIKitButtonBody);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedUIKitButtonBody and conformance ResolvedUIKitButtonBody;
  if (!lazy protocol witness table cache variable for type ResolvedUIKitButtonBody and conformance ResolvedUIKitButtonBody)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedUIKitButtonBody and conformance ResolvedUIKitButtonBody);
  }
  return result;
}

uint64_t sub_187709F04()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UIKitMenuButton.TransformItemList.value.getter(uint64_t *a1)
{
  return closure #1 in UIKitMenuButton.TransformItemList.value.getter(a1, *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(_DWORD *)(v1 + 72), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

void outlined consume of PlatformItemList.Item.SystemItem?(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  if (a5 >> 2 != 0xFFFFFFFF) {
    outlined consume of PlatformItemList.Item.SystemItem(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  }
}

void outlined consume of AnyShareConfiguration.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 == 2)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = a2;
  }
  else
  {
    if (a5 != 1)
    {
      if (!a5)
      {
        swift_bridgeObjectRelease();
      }
      return;
    }
    swift_release();
    uint64_t v7 = a3;
  }

  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v7);
}

uint64_t outlined init with take of WeakBox<UIButton>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for ButtonStyleContent()
{
  return swift_getGenericMetadata();
}

void type metadata accessor for StaticSourceWriter<ButtonStyleConfiguration.Label, HStack<UIKitButtonConfiguration.Label>>()
{
  if (!lazy cache variable for type metadata for StaticSourceWriter<ButtonStyleConfiguration.Label, HStack<UIKitButtonConfiguration.Label>>)
  {
    type metadata accessor for HStack<UIKitButtonConfiguration.Label>(255, &lazy cache variable for type metadata for HStack<UIKitButtonConfiguration.Label>, (uint64_t)&type metadata for UIKitButtonConfiguration.Label, (uint64_t)&protocol witness table for UIKitButtonConfiguration.Label, MEMORY[0x1E4F415B8]);
    lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label();
    lazy protocol witness table accessor for type HStack<UIKitButtonConfiguration.Label> and conformance HStack<A>();
    unint64_t v0 = type metadata accessor for StaticSourceWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticSourceWriter<ButtonStyleConfiguration.Label, HStack<UIKitButtonConfiguration.Label>>);
    }
  }
}

uint64_t partial apply for closure #1 in UIKitButtonStyleModifier.ResolvedBody.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in UIKitButtonStyleModifier.ResolvedBody.body.getter(*(void *)(v1 + 32), *(void *)(v1 + 16), a1);
}

uint64_t sub_18770A188()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for UIKitButtonStyleModifier.ResolvedBody();
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3, v1);
  uint64_t v4 = v3 + *(int *)(v2 + 36);
  if (*(void *)(v4 + 8)) {
    swift_release();
  }
  if (*(void *)(v4 + 56)) {
    swift_release();
  }
  outlined consume of Environment<Bool>.Content(*(void *)(v3 + *(int *)(v2 + 40)), *(unsigned char *)(v3 + *(int *)(v2 + 40) + 8));

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in UIKitButtonStyleModifier.ResolvedBody.body.getter(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for UIKitButtonStyleModifier.ResolvedBody();
  return UIKitButtonStyleModifier.ResolvedBody.transform(itemList:)(a1, v2);
}

uint64_t outlined init with copy of _IdentifiedViewTree(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with take of _IdentifiedViewTree(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t lazy protocol witness table accessor for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options;
  if (!lazy protocol witness table cache variable for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options;
  if (!lazy protocol witness table cache variable for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options;
  if (!lazy protocol witness table cache variable for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options;
  if (!lazy protocol witness table cache variable for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options;
  if (!lazy protocol witness table cache variable for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options);
  }
  return result;
}

uint64_t sub_18770A430()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_18770A468()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in ViewContent.makeUIButton(options:)(double *a1, double *a2)
{
  closure #1 in ViewContent.makeUIButton(options:)(a1, a2, *(void *)(v2 + 32));
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for HStack<UIKitButtonConfiguration.Label>(255, a2, a3, a4, MEMORY[0x1E4F40930]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_18770A510()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for UIKitButtonAdaptor();
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80));
  outlined consume of Environment<Bool>.Content(*(void *)(v3 + 16), *(unsigned char *)(v3 + 24));
  outlined consume of Environment<Color?>.Content(*(void *)(v3 + 32), *(unsigned __int8 *)(v3 + 40));
  outlined consume of Environment<Bool>.Content(*(void *)(v3 + 48), *(unsigned char *)(v3 + 56));
  outlined consume of Environment<Bool>.Content(*(void *)(v3 + 64), *(unsigned char *)(v3 + 72));
  outlined consume of Environment<Bool>.Content(*(void *)(v3 + 80), *(unsigned char *)(v3 + 88));
  outlined consume of Environment<Bool>.Content(*(void *)(v3 + 96), *(unsigned char *)(v3 + 104));
  if (*(void *)(v3 + 112)) {
    swift_release();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3 + *(int *)(v2 + 84), v1);
  if (*(void *)(v3 + *(int *)(v2 + 92))) {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UIKitButtonAdaptor.updateUIView(_:context:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(type metadata accessor for UIKitButtonAdaptor() - 8);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return closure #1 in UIKitButtonAdaptor.updateUIView(_:context:)(a1, v6, v3, v4);
}

void type metadata accessor for HStack<UIKitButtonConfiguration.Label>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t partial apply for closure #3 in UIKitButtonAdaptor.updateUIView(_:context:)()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_18770A750()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in UIKitButtonAdaptor.updateUIView(_:context:)(void *a1, uint64_t a2, uint64_t a3)
{
  if (v3[18]) {
    int v4 = 0x10000;
  }
  else {
    int v4 = 0;
  }
  if (v3[17]) {
    int v5 = 256;
  }
  else {
    int v5 = 0;
  }
  return closure #2 in UIKitButtonAdaptor.updateUIView(_:context:)(a1, a2, a3, v5 | v3[16] | v4);
}

uint64_t partial apply for closure #1 in UIKitButtonAdaptor.makeUIView(context:)()
{
  return closure #1 in UIKitButtonAdaptor.makeUIView(context:)(*(void *)(v0 + 32));
}

uint64_t sub_18770A79C()
{
  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) () -> (@unowned Bool)()
{
  return thunk for @escaping @callee_unowned @convention(block) () -> (@unowned Bool)(*(void *)(v0 + 16));
}

uint64_t sub_18770A7DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = static VerticalAlignment.center.getter();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void type metadata accessor for Focus<UIKitButtonConfiguration, HStack<UIKitButtonConfiguration.Label>>()
{
  if (!lazy cache variable for type metadata for Focus<UIKitButtonConfiguration, HStack<UIKitButtonConfiguration.Label>>)
  {
    type metadata accessor for HStack<UIKitButtonConfiguration.Label>(255, &lazy cache variable for type metadata for HStack<UIKitButtonConfiguration.Label>, (uint64_t)&type metadata for UIKitButtonConfiguration.Label, (uint64_t)&protocol witness table for UIKitButtonConfiguration.Label, MEMORY[0x1E4F415B8]);
    unint64_t v0 = type metadata accessor for Focus();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Focus<UIKitButtonConfiguration, HStack<UIKitButtonConfiguration.Label>>);
    }
  }
}

void type metadata accessor for PlatformItemListGenerator<LabelPlatformItemListFlags, HStack<UIKitButtonConfiguration.Label>>()
{
  if (!lazy cache variable for type metadata for PlatformItemListGenerator<LabelPlatformItemListFlags, HStack<UIKitButtonConfiguration.Label>>)
  {
    type metadata accessor for HStack<UIKitButtonConfiguration.Label>(255, &lazy cache variable for type metadata for HStack<UIKitButtonConfiguration.Label>, (uint64_t)&type metadata for UIKitButtonConfiguration.Label, (uint64_t)&protocol witness table for UIKitButtonConfiguration.Label, MEMORY[0x1E4F415B8]);
    lazy protocol witness table accessor for type HStack<UIKitButtonConfiguration.Label> and conformance HStack<A>();
    unint64_t v0 = type metadata accessor for PlatformItemListGenerator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemListGenerator<LabelPlatformItemListFlags, HStack<UIKitButtonConfiguration.Label>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type UIKitSystemButtonConfigurationModifier and conformance UIKitSystemButtonConfigurationModifier(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for UIKitButtonAdaptor<PlatformItemContent>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    unint64_t v10 = a5(a1, v9, a4);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t type metadata accessor for PlatformItemContent(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for PlatformItemContent);
}

unint64_t lazy protocol witness table accessor for type UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor and conformance UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor()
{
  unint64_t result = lazy protocol witness table cache variable for type UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor and conformance UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor;
  if (!lazy protocol witness table cache variable for type UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor and conformance UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor and conformance UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitButtonAdaptor<PlatformItemContent>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in static UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent._makeView(view:inputs:)()
{
  return implicit closure #1 in static UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent._makeView(view:inputs:)();
}

unint64_t lazy protocol witness table accessor for type UIKitSystemButtonConfigurationModifier.PlatformItemTransform and conformance UIKitSystemButtonConfigurationModifier.PlatformItemTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type UIKitSystemButtonConfigurationModifier.PlatformItemTransform and conformance UIKitSystemButtonConfigurationModifier.PlatformItemTransform;
  if (!lazy protocol witness table cache variable for type UIKitSystemButtonConfigurationModifier.PlatformItemTransform and conformance UIKitSystemButtonConfigurationModifier.PlatformItemTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitSystemButtonConfigurationModifier.PlatformItemTransform and conformance UIKitSystemButtonConfigurationModifier.PlatformItemTransform);
  }
  return result;
}

uint64_t sub_18770ABAC()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UIKitSystemButtonConfigurationModifier.PlatformItemTransform.value.getter(uint64_t *a1)
{
  return closure #1 in UIKitSystemButtonConfigurationModifier.PlatformItemTransform.value.getter(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor.value.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor.value.getter(*(void *)(v1 + 16), a1);
}

void outlined consume of AccessibilityText.Storage(void *a1, uint64_t a2, char a3)
{
  if (a3) {

  }
  else {
    swift_bridgeObjectRelease();
  }
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Bool?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for Attribute<PlatformItemList>(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool?>(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>, &lazy cache variable for type metadata for AccessibilityLabelStorage?, MEMORY[0x1E4F40E40], MEMORY[0x1E4F41090]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>);
  }
  return result;
}

void *type metadata accessor for UIKitSystemButtonConfigurationModifier.PlatformItemTransform()
{
  return &unk_1ED464110;
}

uint64_t getEnumTagSinglePayload for UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 12) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 12) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor()
{
  return &unk_1ED464080;
}

char *initializeBufferWithCopyOfBuffer for PlatformItemContent(char *a1, char **a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  int v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
    return a1;
  }
  uint64_t v8 = a2[1];
  uint64_t v7 = a2[2];
  *((void *)a1 + 1) = v8;
  *((void *)a1 + 2) = v7;
  *((void *)a1 + 3) = a2[3];
  a1[32] = *((unsigned char *)a2 + 32);
  unint64_t v9 = a2[6];
  *((void *)a1 + 5) = a2[5];
  *((void *)a1 + 6) = v9;
  a1[56] = *((unsigned char *)a2 + 56);
  uint64_t v10 = (char **)(a1 + 64);
  uint64_t v11 = a2 + 8;
  unint64_t v12 = (unint64_t)a2[23];
  uint64_t v13 = v5;
  uint64_t v14 = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v12 >> 1 != 4294967294)
  {
    int v24 = *((unsigned __int8 *)a2 + 72);
    if (v24 == 255)
    {
      *uint64_t v10 = *v11;
      a1[72] = *((unsigned char *)v11 + 8);
    }
    else
    {
      uint64_t v25 = a2[8];
      outlined copy of GraphicsImage.Contents(v25, *((unsigned char *)a2 + 72));
      *((void *)a1 + 8) = v25;
      a1[72] = v24;
      unint64_t v12 = (unint64_t)a2[23];
    }
    *((void *)a1 + 10) = a2[10];
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
    a1[104] = *((unsigned char *)a2 + 104);
    *(_OWORD *)(a1 + 108) = *(_OWORD *)((char *)a2 + 108);
    a1[124] = *((unsigned char *)a2 + 124);
    long long v26 = *((_OWORD *)a2 + 9);
    *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
    *((_OWORD *)a1 + 9) = v26;
    *((_WORD *)a1 + 80) = *((_WORD *)a2 + 80);
    a1[162] = *((unsigned char *)a2 + 162);
    a1[163] = *((unsigned char *)a2 + 163);
    if (v12 >> 1 == 0xFFFFFFFF)
    {
      long long v27 = *(_OWORD *)(a2 + 23);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
      *(_OWORD *)(a1 + 184) = v27;
    }
    else
    {
      uint64_t v28 = (uint64_t)a2[21];
      uint64_t v29 = (uint64_t)a2[22];
      uint64_t v30 = a2[24];
      outlined copy of AccessibilityImageLabel(v28, v29, v12);
      *((void *)a1 + 21) = v28;
      *((void *)a1 + 22) = v29;
      *((void *)a1 + 23) = v12;
      *((void *)a1 + 24) = v30;
    }
    uint64_t v31 = a2[26];
    *((void *)a1 + 25) = a2[25];
    *((void *)a1 + 26) = v31;
    *((_WORD *)a1 + 108) = *((_WORD *)a2 + 108);
    *((_DWORD *)a1 + 55) = *((_DWORD *)a2 + 55);
    a1[224] = *((unsigned char *)a2 + 224);
    char v32 = a2[29];
    *((void *)a1 + 29) = v32;
    *((_WORD *)a1 + 120) = *((_WORD *)a2 + 120);
    a1[242] = *((unsigned char *)a2 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    unint64_t v33 = v32;
    uint64_t v20 = a2[32];
    if (v20) {
      goto LABEL_4;
    }
LABEL_15:
    long long v34 = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 264) = v34;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 35);
    goto LABEL_16;
  }
  long long v15 = *((_OWORD *)v11 + 9);
  *((_OWORD *)a1 + 12) = *((_OWORD *)v11 + 8);
  *((_OWORD *)a1 + 13) = v15;
  *((_OWORD *)a1 + 14) = *((_OWORD *)v11 + 10);
  *(_DWORD *)(a1 + 239) = *(_DWORD *)((char *)v11 + 175);
  long long v16 = *((_OWORD *)v11 + 5);
  *((_OWORD *)a1 + 8) = *((_OWORD *)v11 + 4);
  *((_OWORD *)a1 + 9) = v16;
  long long v17 = *((_OWORD *)v11 + 7);
  *((_OWORD *)a1 + 10) = *((_OWORD *)v11 + 6);
  *((_OWORD *)a1 + 11) = v17;
  long long v18 = *((_OWORD *)v11 + 1);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *((_OWORD *)a1 + 5) = v18;
  long long v19 = *((_OWORD *)v11 + 3);
  *((_OWORD *)a1 + 6) = *((_OWORD *)v11 + 2);
  *((_OWORD *)a1 + 7) = v19;
  uint64_t v20 = a2[32];
  if (!v20) {
    goto LABEL_15;
  }
LABEL_4:
  *((void *)a1 + 31) = a2[31];
  *((void *)a1 + 32) = v20;
  uint64_t v21 = a2[33];
  swift_bridgeObjectRetain();
  if ((unint64_t)v21 >= 2) {
    char v22 = v21;
  }
  *((void *)a1 + 33) = v21;
  *((_DWORD *)a1 + 68) = *((_DWORD *)a2 + 68);
  a1[276] = *((unsigned char *)a2 + 276);
  *(_WORD *)(a1 + 277) = *(_WORD *)((char *)a2 + 277);
  unint64_t v23 = a2[36];
  *((void *)a1 + 35) = a2[35];
  *((void *)a1 + 36) = v23;
  swift_retain();
  swift_retain();
LABEL_16:
  unint64_t v35 = (unint64_t)a2[41];
  if (v35 >> 2 == 0xFFFFFFFF)
  {
    long long v36 = *(_OWORD *)(a2 + 47);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 45);
    *(_OWORD *)(a1 + 376) = v36;
    *((void *)a1 + 49) = a2[49];
    long long v37 = *(_OWORD *)(a2 + 39);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 37);
    *(_OWORD *)(a1 + 312) = v37;
    long long v38 = *(_OWORD *)(a2 + 43);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 41);
    *(_OWORD *)(a1 + 344) = v38;
  }
  else
  {
    unint64_t v39 = a2[37];
    uint64_t v40 = (uint64_t)a2[38];
    uint64_t v41 = (uint64_t)a2[39];
    uint64_t v42 = (uint64_t)a2[40];
    uint64_t v43 = (uint64_t)a2[42];
    uint64_t v44 = (uint64_t)a2[43];
    unint64_t v45 = a2[44];
    uint64_t v90 = (uint64_t)a2[45];
    uint64_t v91 = (uint64_t)a2[46];
    uint64_t v93 = (uint64_t)a2[47];
    v96 = a2[48];
    __dsta = a2[49];
    outlined copy of PlatformItemList.Item.SystemItem(v39, v40, v41, v42, v35, v43, v44, (char)v45, v90, v91, v93, (char)v96, (uint64_t)__dsta);
    *((void *)a1 + 37) = v39;
    *((void *)a1 + 38) = v40;
    *((void *)a1 + 39) = v41;
    *((void *)a1 + 40) = v42;
    *((void *)a1 + 41) = v35;
    *((void *)a1 + 42) = v43;
    *((void *)a1 + 43) = v44;
    *((void *)a1 + 44) = v45;
    *((void *)a1 + 45) = v90;
    *((void *)a1 + 46) = v91;
    *((void *)a1 + 47) = v93;
    *((void *)a1 + 48) = v96;
    *((void *)a1 + 49) = __dsta;
  }
  uint64_t v46 = a2[51];
  if (v46 != (char *)1)
  {
    *((_DWORD *)a1 + 100) = *((_DWORD *)a2 + 100);
    a1[404] = *((unsigned char *)a2 + 404);
    if (v46)
    {
      uint64_t v49 = a2[52];
      *((void *)a1 + 51) = v46;
      *((void *)a1 + 52) = v49;
      swift_retain();
      uint64_t v50 = a2[53];
      if (v50) {
        goto LABEL_23;
      }
    }
    else
    {
      *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 51);
      uint64_t v50 = a2[53];
      if (v50)
      {
LABEL_23:
        uint64_t v51 = a2[54];
        *((void *)a1 + 53) = v50;
        *((void *)a1 + 54) = v51;
        swift_retain();
        uint64_t v52 = a2[55];
        if (v52)
        {
LABEL_24:
          uint64_t v53 = a2[56];
          *((void *)a1 + 55) = v52;
          *((void *)a1 + 56) = v53;
          swift_retain();
LABEL_28:
          *((void *)a1 + 57) = a2[57];
          a1[464] = *((unsigned char *)a2 + 464);
          goto LABEL_29;
        }
LABEL_27:
        *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 55);
        goto LABEL_28;
      }
    }
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 53);
    uint64_t v52 = a2[55];
    if (v52) {
      goto LABEL_24;
    }
    goto LABEL_27;
  }
  long long v47 = *((_OWORD *)a2 + 28);
  *((_OWORD *)a1 + 27) = *((_OWORD *)a2 + 27);
  *((_OWORD *)a1 + 28) = v47;
  a1[464] = *((unsigned char *)a2 + 464);
  long long v48 = *((_OWORD *)a2 + 26);
  *((_OWORD *)a1 + 25) = *((_OWORD *)a2 + 25);
  *((_OWORD *)a1 + 26) = v48;
LABEL_29:
  uint64_t v54 = a2[60];
  *((void *)a1 + 59) = a2[59];
  *((void *)a1 + 60) = v54;
  *((void *)a1 + 61) = a2[61];
  a1[496] = *((unsigned char *)a2 + 496);
  uint64_t v55 = a2[63];
  swift_bridgeObjectRetain();
  if (v55)
  {
    uint64_t v56 = a2[64];
    *((void *)a1 + 63) = v55;
    *((void *)a1 + 64) = v56;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 63);
  }
  *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
  unint64_t v57 = a2[66];
  if (v57)
  {
    *((void *)a1 + 66) = v57;
    *((void *)a1 + 67) = a2[67];
    *((void *)a1 + 68) = a2[68];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 33) = *((_OWORD *)a2 + 33);
    *((void *)a1 + 68) = a2[68];
  }
  unint64_t v58 = a2[69];
  if (v58 == (char *)1)
  {
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 69);
    *((void *)a1 + 71) = a2[71];
  }
  else
  {
    *((void *)a1 + 69) = v58;
    unint64_t v59 = a2[70];
    swift_retain();
    if (v59)
    {
      uint64_t v60 = a2[71];
      *((void *)a1 + 70) = v59;
      *((void *)a1 + 71) = v60;
      swift_retain();
    }
    else
    {
      *((_OWORD *)a1 + 35) = *((_OWORD *)a2 + 35);
    }
  }
  char v61 = a2[72];
  *((void *)a1 + 72) = v61;
  *((void *)a1 + 73) = a2[73];
  *((void *)a1 + 74) = a2[74];
  *((void *)a1 + 75) = a2[75];
  *((void *)a1 + 76) = a2[76];
  *((void *)a1 + 77) = a2[77];
  *((void *)a1 + 78) = a2[78];
  *((_WORD *)a1 + 316) = *((_WORD *)a2 + 316);
  a1[634] = *((unsigned char *)a2 + 634);
  uint64_t v62 = type metadata accessor for PlatformItemList.Item();
  uint64_t v63 = *(int *)(v62 + 112);
  UIImage_optional v97 = (int *)v62;
  __dst = &a1[v63];
  unint64_t v64 = (char *)a2 + v63;
  uint64_t v65 = type metadata accessor for CommandOperation();
  uint64_t v92 = *(void *)(v65 - 8);
  uint64_t v94 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v92 + 48);
  id v66 = v61;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v94(v64, 1, v65))
  {
    type metadata accessor for WeakBox<UIButton>?(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
    memcpy(__dst, v64, *(void *)(*(void *)(v67 - 8) + 64));
  }
  else
  {
    char *__dst = *v64;
    uint64_t v68 = *(int *)(v65 + 20);
    uint64_t v69 = v65;
    uint64_t v70 = &__dst[v68];
    char v71 = &v64[v68];
    char v95 = v64;
    uint64_t v72 = *(void *)&v64[v68];
    uint64_t v73 = *((void *)v71 + 1);
    char v74 = v71[16];
    outlined copy of Text.Storage(v72, v73, v74);
    *(void *)uint64_t v70 = v72;
    *((void *)v70 + 1) = v73;
    v70[16] = v74;
    *((void *)v70 + 3) = *((void *)v71 + 3);
    uint64_t v75 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    Swift::OpaquePointer v76 = &v70[v75];
    char v77 = &v71[v75];
    uint64_t v78 = type metadata accessor for UUID();
    char v79 = *(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v78 - 8) + 16);
    swift_bridgeObjectRetain();
    v79(v76, v77, v78);
    uint64_t v80 = *(int *)(v69 + 24);
    uint64_t v81 = &__dst[v80];
    uint64_t v82 = &v95[v80];
    if (*v82)
    {
      uint64_t v83 = v82[1];
      *(void *)uint64_t v81 = *v82;
      *((void *)v81 + 1) = v83;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v81 = *(_OWORD *)v82;
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v92 + 56))(__dst, 0, 1, v69);
  }
  a1[v97[29]] = *((unsigned char *)a2 + v97[29]);
  a1[v97[30]] = *((unsigned char *)a2 + v97[30]);
  a1[v97[31]] = *((unsigned char *)a2 + v97[31]);
  a1[v97[32]] = *((unsigned char *)a2 + v97[32]);
  *(void *)&a1[v97[33]] = *(char **)((char *)a2 + v97[33]);
  uint64_t v84 = *(int *)(a3 + 24);
  *(_WORD *)&a1[*(int *)(a3 + 20)] = *(_WORD *)((char *)a2 + *(int *)(a3 + 20));
  uint64_t v85 = &a1[v84];
  uint64_t v86 = (uint64_t)a2 + v84;
  uint64_t v87 = type metadata accessor for UIButton.Configuration();
  uint64_t v88 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v87 - 8) + 16);
  swift_retain();
  v88(v85, v86, v87);
  return a1;
}

void outlined copy of AnyShareConfiguration.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 == 2)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = a2;
  }
  else
  {
    if (a5 != 1)
    {
      if (!a5)
      {
        swift_bridgeObjectRetain();
      }
      return;
    }
    swift_retain();
    uint64_t v7 = a3;
  }

  outlined copy of AppIntentExecutor?(v7);
}

uint64_t destroy for PlatformItemContent(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v4 = *(void *)(a1 + 184);
  unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if ((v4 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    int v6 = *(unsigned __int8 *)(a1 + 72);
    if (v6 != 255)
    {
      outlined consume of GraphicsImage.Contents(*(void **)(a1 + 64), v6);
      uint64_t v4 = *(void *)(a1 + 184);
      unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (v5 != 0x1FFFFFFFELL) {
      outlined consume of AccessibilityImageLabel(*(void *)(a1 + 168), *(void *)(a1 + 176), v4);
    }
    swift_unknownObjectRelease();
    swift_release();
  }
  if (*(void *)(a1 + 256))
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = *(void **)(a1 + 264);
    if ((unint64_t)v7 >= 2) {

    }
    swift_release();
    swift_release();
  }
  unint64_t v8 = *(void *)(a1 + 328);
  if (v8 >> 2 != 0xFFFFFFFF) {
    outlined consume of PlatformItemList.Item.SystemItem(*(void **)(a1 + 296), *(void *)(a1 + 304), *(void *)(a1 + 312), *(void *)(a1 + 320), v8, *(void *)(a1 + 336), *(void *)(a1 + 344), *(void *)(a1 + 352), *(void *)(a1 + 360), *(void *)(a1 + 368), *(void *)(a1 + 376), *(void *)(a1 + 384), *(void *)(a1 + 392));
  }
  uint64_t v9 = *(void *)(a1 + 408);
  if (v9)
  {
    if (v9 == 1) {
      goto LABEL_20;
    }
    swift_release();
  }
  if (*(void *)(a1 + 424)) {
    swift_release();
  }
  if (*(void *)(a1 + 440)) {
    swift_release();
  }
LABEL_20:
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 504)) {
    swift_release();
  }
  if (*(void *)(a1 + 528))
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  if (*(void *)(a1 + 552) != 1)
  {
    swift_release();
    if (*(void *)(a1 + 560)) {
      swift_release();
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = a1 + *(int *)(type metadata accessor for PlatformItemList.Item() + 112);
  uint64_t v11 = type metadata accessor for CommandOperation();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
  {
    uint64_t v12 = v10 + *(int *)(v11 + 20);
    outlined consume of Text.Storage(*(void *)v12, *(void *)(v12 + 8), *(unsigned char *)(v12 + 16));
    swift_bridgeObjectRelease();
    uint64_t v13 = v12 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    uint64_t v14 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
    if (*(void *)(v10 + *(int *)(v11 + 24))) {
      swift_release();
    }
  }
  swift_release();
  uint64_t v15 = a1 + *(int *)(a2 + 24);
  uint64_t v16 = type metadata accessor for UIButton.Configuration();
  long long v17 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8);

  return v17(v15, v16);
}

uint64_t initializeWithCopy for PlatformItemContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = *(void **)a2;
  int v6 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v9 = a1 + 64;
  uint64_t v10 = a2 + 64;
  unint64_t v11 = *(void *)(a2 + 184);
  id v12 = v5;
  id v13 = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v11 >> 1 != 4294967294)
  {
    int v23 = *(unsigned __int8 *)(a2 + 72);
    if (v23 == 255)
    {
      *(void *)uint64_t v9 = *(void *)v10;
      *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
    }
    else
    {
      int v24 = *(void **)(a2 + 64);
      outlined copy of GraphicsImage.Contents(v24, *(unsigned char *)(a2 + 72));
      *(void *)(a1 + 64) = v24;
      *(unsigned char *)(a1 + 72) = v23;
      unint64_t v11 = *(void *)(a2 + 184);
    }
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
    *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
    *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
    long long v25 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v25;
    *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
    *(unsigned char *)(a1 + 162) = *(unsigned char *)(a2 + 162);
    *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
    if (v11 >> 1 == 0xFFFFFFFF)
    {
      long long v26 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = v26;
    }
    else
    {
      uint64_t v27 = *(void *)(a2 + 168);
      uint64_t v28 = *(void *)(a2 + 176);
      uint64_t v29 = *(void *)(a2 + 192);
      outlined copy of AccessibilityImageLabel(v27, v28, v11);
      *(void *)(a1 + 168) = v27;
      *(void *)(a1 + 176) = v28;
      *(void *)(a1 + 184) = v11;
      *(void *)(a1 + 192) = v29;
    }
    uint64_t v30 = *(void *)(a2 + 208);
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    *(void *)(a1 + 208) = v30;
    *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
    *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
    *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
    uint64_t v31 = *(void **)(a2 + 232);
    *(void *)(a1 + 232) = v31;
    *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
    *(unsigned char *)(a1 + 242) = *(unsigned char *)(a2 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    id v32 = v31;
    uint64_t v19 = *(void *)(a2 + 256);
    if (v19) {
      goto LABEL_3;
    }
LABEL_13:
    long long v33 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v33;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    goto LABEL_14;
  }
  long long v14 = *(_OWORD *)(v10 + 144);
  *(_OWORD *)(v9 + 128) = *(_OWORD *)(v10 + 128);
  *(_OWORD *)(v9 + 144) = v14;
  *(_OWORD *)(v9 + 160) = *(_OWORD *)(v10 + 160);
  *(_DWORD *)(v9 + 175) = *(_DWORD *)(v10 + 175);
  long long v15 = *(_OWORD *)(v10 + 80);
  *(_OWORD *)(v9 + 64) = *(_OWORD *)(v10 + 64);
  *(_OWORD *)(v9 + 80) = v15;
  long long v16 = *(_OWORD *)(v10 + 112);
  *(_OWORD *)(v9 + 96) = *(_OWORD *)(v10 + 96);
  *(_OWORD *)(v9 + 112) = v16;
  long long v17 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v17;
  long long v18 = *(_OWORD *)(v10 + 48);
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(_OWORD *)(v9 + 48) = v18;
  uint64_t v19 = *(void *)(a2 + 256);
  if (!v19) {
    goto LABEL_13;
  }
LABEL_3:
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v19;
  uint64_t v20 = *(void **)(a2 + 264);
  swift_bridgeObjectRetain();
  if ((unint64_t)v20 >= 2) {
    id v21 = v20;
  }
  *(void *)(a1 + 264) = v20;
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(unsigned char *)(a1 + 276) = *(unsigned char *)(a2 + 276);
  *(_WORD *)(a1 + 277) = *(_WORD *)(a2 + 277);
  uint64_t v22 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = v22;
  swift_retain();
  swift_retain();
LABEL_14:
  unint64_t v34 = *(void *)(a2 + 328);
  if (v34 >> 2 == 0xFFFFFFFF)
  {
    long long v35 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v35;
    *(void *)(a1 + 392) = *(void *)(a2 + 392);
    long long v36 = *(_OWORD *)(a2 + 312);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 312) = v36;
    long long v37 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 344) = v37;
  }
  else
  {
    long long v38 = *(void **)(a2 + 296);
    uint64_t v39 = *(void *)(a2 + 304);
    uint64_t v40 = *(void *)(a2 + 312);
    uint64_t v41 = *(void *)(a2 + 320);
    uint64_t v42 = *(void *)(a2 + 336);
    uint64_t v43 = *(void *)(a2 + 344);
    uint64_t v44 = *(void *)(a2 + 352);
    uint64_t v89 = *(void *)(a2 + 360);
    uint64_t v90 = *(void *)(a2 + 368);
    uint64_t v92 = *(void *)(a2 + 376);
    uint64_t v95 = *(void *)(a2 + 384);
    __dsta = *(void **)(a2 + 392);
    outlined copy of PlatformItemList.Item.SystemItem(v38, v39, v40, v41, v34, v42, v43, v44, v89, v90, v92, v95, (uint64_t)__dsta);
    *(void *)(a1 + 296) = v38;
    *(void *)(a1 + 304) = v39;
    *(void *)(a1 + 312) = v40;
    *(void *)(a1 + 320) = v41;
    *(void *)(a1 + 328) = v34;
    *(void *)(a1 + 336) = v42;
    *(void *)(a1 + 344) = v43;
    *(void *)(a1 + 352) = v44;
    *(void *)(a1 + 360) = v89;
    *(void *)(a1 + 368) = v90;
    *(void *)(a1 + 376) = v92;
    *(void *)(a1 + 384) = v95;
    *(void *)(a1 + 392) = __dsta;
  }
  uint64_t v45 = *(void *)(a2 + 408);
  if (v45 == 1)
  {
    long long v46 = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 448) = v46;
    *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
    long long v47 = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 416) = v47;
    goto LABEL_27;
  }
  *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
  *(unsigned char *)(a1 + 404) = *(unsigned char *)(a2 + 404);
  if (v45)
  {
    uint64_t v48 = *(void *)(a2 + 416);
    *(void *)(a1 + 408) = v45;
    *(void *)(a1 + 416) = v48;
    swift_retain();
    uint64_t v49 = *(void *)(a2 + 424);
    if (v49) {
      goto LABEL_21;
    }
LABEL_24:
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
    uint64_t v51 = *(void *)(a2 + 440);
    if (v51) {
      goto LABEL_22;
    }
LABEL_25:
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
    goto LABEL_26;
  }
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  uint64_t v49 = *(void *)(a2 + 424);
  if (!v49) {
    goto LABEL_24;
  }
LABEL_21:
  uint64_t v50 = *(void *)(a2 + 432);
  *(void *)(a1 + 424) = v49;
  *(void *)(a1 + 432) = v50;
  swift_retain();
  uint64_t v51 = *(void *)(a2 + 440);
  if (!v51) {
    goto LABEL_25;
  }
LABEL_22:
  uint64_t v52 = *(void *)(a2 + 448);
  *(void *)(a1 + 440) = v51;
  *(void *)(a1 + 448) = v52;
  swift_retain();
LABEL_26:
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
LABEL_27:
  uint64_t v53 = *(void *)(a2 + 480);
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(void *)(a1 + 480) = v53;
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 496);
  uint64_t v54 = *(void *)(a2 + 504);
  swift_bridgeObjectRetain();
  if (v54)
  {
    uint64_t v55 = *(void *)(a2 + 512);
    *(void *)(a1 + 504) = v54;
    *(void *)(a1 + 512) = v55;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  }
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  uint64_t v56 = *(void *)(a2 + 528);
  if (v56)
  {
    *(void *)(a1 + 528) = v56;
    *(void *)(a1 + 536) = *(void *)(a2 + 536);
    *(void *)(a1 + 544) = *(void *)(a2 + 544);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
    *(void *)(a1 + 544) = *(void *)(a2 + 544);
  }
  uint64_t v57 = *(void *)(a2 + 552);
  if (v57 == 1)
  {
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *(void *)(a1 + 568) = *(void *)(a2 + 568);
  }
  else
  {
    *(void *)(a1 + 552) = v57;
    uint64_t v58 = *(void *)(a2 + 560);
    swift_retain();
    if (v58)
    {
      uint64_t v59 = *(void *)(a2 + 568);
      *(void *)(a1 + 560) = v58;
      *(void *)(a1 + 568) = v59;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
    }
  }
  uint64_t v60 = *(void **)(a2 + 576);
  *(void *)(a1 + 576) = v60;
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  *(_WORD *)(a1 + 632) = *(_WORD *)(a2 + 632);
  *(unsigned char *)(a1 + 634) = *(unsigned char *)(a2 + 634);
  uint64_t v61 = type metadata accessor for PlatformItemList.Item();
  uint64_t v62 = *(int *)(v61 + 112);
  v96 = (int *)v61;
  __dst = (unsigned char *)(a1 + v62);
  uint64_t v63 = (unsigned char *)(a2 + v62);
  uint64_t v64 = type metadata accessor for CommandOperation();
  uint64_t v91 = *(void *)(v64 - 8);
  uint64_t v93 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v91 + 48);
  id v65 = v60;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v93(v63, 1, v64))
  {
    type metadata accessor for WeakBox<UIButton>?(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
    memcpy(__dst, v63, *(void *)(*(void *)(v66 - 8) + 64));
  }
  else
  {
    unsigned char *__dst = *v63;
    uint64_t v67 = *(int *)(v64 + 20);
    uint64_t v68 = v64;
    uint64_t v69 = &__dst[v67];
    uint64_t v70 = &v63[v67];
    uint64_t v94 = v63;
    uint64_t v71 = *(void *)&v63[v67];
    uint64_t v72 = *((void *)v70 + 1);
    char v73 = v70[16];
    outlined copy of Text.Storage(v71, v72, v73);
    *(void *)uint64_t v69 = v71;
    *((void *)v69 + 1) = v72;
    v69[16] = v73;
    *((void *)v69 + 3) = *((void *)v70 + 3);
    uint64_t v74 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    uint64_t v75 = &v69[v74];
    Swift::OpaquePointer v76 = &v70[v74];
    uint64_t v77 = type metadata accessor for UUID();
    uint64_t v78 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v77 - 8) + 16);
    swift_bridgeObjectRetain();
    v78(v75, v76, v77);
    uint64_t v79 = *(int *)(v68 + 24);
    uint64_t v80 = &__dst[v79];
    uint64_t v81 = &v94[v79];
    if (*v81)
    {
      uint64_t v82 = v81[1];
      *uint64_t v80 = *v81;
      v80[1] = v82;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v80 = *(_OWORD *)v81;
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v91 + 56))(__dst, 0, 1, v68);
  }
  *(unsigned char *)(a1 + v96[29]) = *(unsigned char *)(a2 + v96[29]);
  *(unsigned char *)(a1 + v96[30]) = *(unsigned char *)(a2 + v96[30]);
  *(unsigned char *)(a1 + v96[31]) = *(unsigned char *)(a2 + v96[31]);
  *(unsigned char *)(a1 + v96[32]) = *(unsigned char *)(a2 + v96[32]);
  *(void *)(a1 + v96[33]) = *(void *)(a2 + v96[33]);
  uint64_t v83 = *(int *)(a3 + 24);
  *(_WORD *)(a1 + *(int *)(a3 + 20)) = *(_WORD *)(a2 + *(int *)(a3 + 20));
  uint64_t v84 = a1 + v83;
  uint64_t v85 = a2 + v83;
  uint64_t v86 = type metadata accessor for UIButton.Configuration();
  uint64_t v87 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 16);
  swift_retain();
  v87(v84, v85, v86);
  return a1;
}

uint64_t assignWithCopy for PlatformItemContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 278;
  int v6 = *(void **)a1;
  uint64_t v7 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v8 = v7;

  uint64_t v9 = *(void **)(a1 + 8);
  uint64_t v10 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v10;
  id v11 = v10;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  id v12 = (_OWORD *)(a1 + 64);
  id v13 = (id *)(a2 + 64);
  unint64_t v14 = *(void *)(a2 + 184) & 0xFFFFFFFFFFFFFFFELL;
  if (*(void *)(a1 + 184) >> 1 == 4294967294)
  {
    if (v14 == 0x1FFFFFFFCLL)
    {
      long long v15 = *(_OWORD *)v13;
      long long v16 = *(_OWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v17;
      *id v12 = v15;
      *(_OWORD *)(a1 + 80) = v16;
      long long v18 = *(_OWORD *)(a2 + 128);
      long long v19 = *(_OWORD *)(a2 + 144);
      long long v20 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v20;
      *(_OWORD *)(a1 + 128) = v18;
      *(_OWORD *)(a1 + 144) = v19;
      long long v21 = *(_OWORD *)(a2 + 192);
      long long v22 = *(_OWORD *)(a2 + 208);
      long long v23 = *(_OWORD *)(a2 + 224);
      *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
      *(_OWORD *)(a1 + 208) = v22;
      *(_OWORD *)(a1 + 224) = v23;
      *(_OWORD *)(a1 + 192) = v21;
    }
    else
    {
      int v33 = *(unsigned __int8 *)(a2 + 72);
      if (v33 == 255)
      {
        id v39 = *v13;
        *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
        *(void *)id v12 = v39;
      }
      else
      {
        id v34 = *v13;
        outlined copy of GraphicsImage.Contents(*v13, *(unsigned char *)(a2 + 72));
        *(void *)(a1 + 64) = v34;
        *(unsigned char *)(a1 + 72) = v33;
      }
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      long long v40 = *(_OWORD *)(a2 + 108);
      *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
      *(_OWORD *)(a1 + 108) = v40;
      long long v41 = *(_OWORD *)(a2 + 128);
      long long v42 = *(_OWORD *)(a2 + 144);
      *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
      *(_OWORD *)(a1 + 128) = v41;
      *(_OWORD *)(a1 + 144) = v42;
      *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
      *(unsigned char *)(a1 + 162) = *(unsigned char *)(a2 + 162);
      *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
      unint64_t v43 = *(void *)(a2 + 184);
      if (v43 >> 1 == 0xFFFFFFFF)
      {
        long long v44 = *(_OWORD *)(a2 + 184);
        *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
        *(_OWORD *)(a1 + 184) = v44;
      }
      else
      {
        uint64_t v45 = *(void *)(a2 + 168);
        uint64_t v46 = *(void *)(a2 + 176);
        uint64_t v47 = *(void *)(a2 + 192);
        outlined copy of AccessibilityImageLabel(v45, v46, *(void *)(a2 + 184));
        *(void *)(a1 + 168) = v45;
        *(void *)(a1 + 176) = v46;
        *(void *)(a1 + 184) = v43;
        *(void *)(a1 + 192) = v47;
      }
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
      *(unsigned char *)(a1 + 217) = *(unsigned char *)(a2 + 217);
      int v48 = *(_DWORD *)(a2 + 220);
      *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
      *(_DWORD *)(a1 + 220) = v48;
      uint64_t v49 = *(void **)(a2 + 232);
      *(void *)(a1 + 232) = v49;
      *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
      *(unsigned char *)(a1 + 242) = *(unsigned char *)(a2 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      id v50 = v49;
    }
  }
  else if (v14 == 0x1FFFFFFFCLL)
  {
    outlined destroy of Image.Resolved(a1 + 64);
    long long v24 = *(_OWORD *)(a2 + 112);
    long long v26 = *(_OWORD *)v13;
    long long v25 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v24;
    *id v12 = v26;
    *(_OWORD *)(a1 + 80) = v25;
    long long v27 = *(_OWORD *)(a2 + 176);
    long long v29 = *(_OWORD *)(a2 + 128);
    long long v28 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v27;
    *(_OWORD *)(a1 + 128) = v29;
    *(_OWORD *)(a1 + 144) = v28;
    long long v31 = *(_OWORD *)(a2 + 208);
    long long v30 = *(_OWORD *)(a2 + 224);
    long long v32 = *(_OWORD *)(a2 + 192);
    *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
    *(_OWORD *)(a1 + 208) = v31;
    *(_OWORD *)(a1 + 224) = v30;
    *(_OWORD *)(a1 + 192) = v32;
  }
  else
  {
    int v35 = *(unsigned __int8 *)(a2 + 72);
    if (*(unsigned __int8 *)(a1 + 72) == 255)
    {
      if (v35 == 255)
      {
        id v53 = *v13;
        *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
        *(void *)id v12 = v53;
      }
      else
      {
        id v51 = *v13;
        outlined copy of GraphicsImage.Contents(*v13, *(unsigned char *)(a2 + 72));
        *(void *)(a1 + 64) = v51;
        *(unsigned char *)(a1 + 72) = v35;
      }
    }
    else if (v35 == 255)
    {
      outlined destroy of GraphicsImage.Contents(a1 + 64);
      char v52 = *(unsigned char *)(a2 + 72);
      *(void *)id v12 = *v13;
      *(unsigned char *)(a1 + 72) = v52;
    }
    else
    {
      id v36 = *v13;
      outlined copy of GraphicsImage.Contents(*v13, *(unsigned char *)(a2 + 72));
      long long v37 = *(void **)(a1 + 64);
      *(void *)(a1 + 64) = v36;
      char v38 = *(unsigned char *)(a1 + 72);
      *(unsigned char *)(a1 + 72) = v35;
      outlined consume of GraphicsImage.Contents(v37, v38);
    }
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
    long long v54 = *(_OWORD *)(a2 + 108);
    *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
    *(_OWORD *)(a1 + 108) = v54;
    long long v55 = *(_OWORD *)(a2 + 128);
    long long v56 = *(_OWORD *)(a2 + 144);
    *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
    *(_OWORD *)(a1 + 128) = v55;
    *(_OWORD *)(a1 + 144) = v56;
    *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
    *(unsigned char *)(a1 + 162) = *(unsigned char *)(a2 + 162);
    *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
    uint64_t v57 = (_OWORD *)(a1 + 168);
    uint64_t v58 = (_OWORD *)(a2 + 168);
    uint64_t v59 = *(void *)(a2 + 184);
    unint64_t v60 = v59 & 0xFFFFFFFFFFFFFFFELL;
    if (*(void *)(a1 + 184) >> 1 == 0xFFFFFFFFLL)
    {
      if (v60 == 0x1FFFFFFFELL)
      {
        long long v61 = *(_OWORD *)(a2 + 184);
        *uint64_t v57 = *v58;
        *(_OWORD *)(a1 + 184) = v61;
      }
      else
      {
        uint64_t v63 = *(void *)(a2 + 168);
        uint64_t v64 = *(void *)(a2 + 176);
        uint64_t v65 = *(void *)(a2 + 192);
        outlined copy of AccessibilityImageLabel(v63, v64, *(void *)(a2 + 184));
        *(void *)(a1 + 168) = v63;
        *(void *)(a1 + 176) = v64;
        *(void *)(a1 + 184) = v59;
        *(void *)(a1 + 192) = v65;
      }
    }
    else if (v60 == 0x1FFFFFFFELL)
    {
      outlined destroy of AccessibilityImageLabel(a1 + 168);
      long long v62 = *(_OWORD *)(a2 + 184);
      *uint64_t v57 = *v58;
      *(_OWORD *)(a1 + 184) = v62;
    }
    else
    {
      uint64_t v66 = *(void *)(a2 + 168);
      uint64_t v67 = *(void *)(a2 + 176);
      uint64_t v68 = *(void *)(a2 + 192);
      outlined copy of AccessibilityImageLabel(v66, v67, *(void *)(a2 + 184));
      uint64_t v69 = *(void *)(a1 + 168);
      uint64_t v70 = *(void *)(a1 + 176);
      uint64_t v71 = *(void *)(a1 + 184);
      *(void *)(a1 + 168) = v66;
      *(void *)(a1 + 176) = v67;
      *(void *)(a1 + 184) = v59;
      *(void *)(a1 + 192) = v68;
      outlined consume of AccessibilityImageLabel(v69, v70, v71);
    }
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    swift_retain();
    swift_release();
    *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
    *(unsigned char *)(a1 + 217) = *(unsigned char *)(a2 + 217);
    int v72 = *(_DWORD *)(a2 + 220);
    *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
    *(_DWORD *)(a1 + 220) = v72;
    char v73 = *(void **)(a1 + 232);
    uint64_t v74 = *(void **)(a2 + 232);
    *(void *)(a1 + 232) = v74;
    id v75 = v74;

    *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
    *(unsigned char *)(a1 + 242) = *(unsigned char *)(a2 + 242);
  }
  Swift::OpaquePointer v76 = (_OWORD *)(a1 + 248);
  uint64_t v77 = (_OWORD *)(a2 + 248);
  uint64_t v78 = *(void *)(a2 + 256);
  if (*(void *)(a1 + 256))
  {
    if (!v78)
    {
      outlined destroy of Image.NamedResolved(a1 + 248);
      long long v86 = *(_OWORD *)(a2 + 264);
      long long v85 = *(_OWORD *)(a2 + 280);
      *Swift::OpaquePointer v76 = *v77;
      *(_OWORD *)(a1 + 264) = v86;
      *(_OWORD *)(a1 + 280) = v85;
      goto LABEL_44;
    }
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(void *)(a1 + 256) = *(void *)(a2 + 256);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v79 = *(void **)(a1 + 264);
    uint64_t v80 = *(void **)(a2 + 264);
    if ((unint64_t)v79 >= 2)
    {
      if ((unint64_t)v80 >= 2)
      {
        *(void *)(a1 + 264) = v80;
        id v89 = v80;

        goto LABEL_43;
      }

      uint64_t v80 = *(void **)(a2 + 264);
    }
    else if ((unint64_t)v80 >= 2)
    {
      *(void *)(a1 + 264) = v80;
      id v81 = v80;
LABEL_43:
      int v90 = *(_DWORD *)(a2 + 272);
      *(unsigned char *)(a1 + 276) = *(unsigned char *)(a2 + 276);
      *(_DWORD *)(a1 + 272) = v90;
      *(unsigned char *)(a1 + 277) = *(unsigned char *)(a2 + 277);
      *(unsigned char *)(a1 + 278) = *(unsigned char *)v5;
      *(void *)(a1 + 280) = *(void *)(a2 + 280);
      swift_retain();
      swift_release();
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      swift_retain();
      swift_release();
      goto LABEL_44;
    }
    *(void *)(a1 + 264) = v80;
    goto LABEL_43;
  }
  if (v78)
  {
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(void *)(a1 + 256) = *(void *)(a2 + 256);
    uint64_t v82 = *(void **)(a2 + 264);
    swift_bridgeObjectRetain();
    if ((unint64_t)v82 >= 2) {
      id v83 = v82;
    }
    *(void *)(a1 + 264) = v82;
    int v84 = *(_DWORD *)(a2 + 272);
    *(unsigned char *)(a1 + 276) = *(unsigned char *)(a2 + 276);
    *(_DWORD *)(a1 + 272) = v84;
    *(unsigned char *)(a1 + 277) = *(unsigned char *)(a2 + 277);
    *(unsigned char *)(a1 + 278) = *(unsigned char *)(a2 + 278);
    *(void *)(a1 + 280) = *(void *)(a2 + 280);
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v87 = *v77;
    long long v88 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 280) = v88;
    *Swift::OpaquePointer v76 = v87;
  }
LABEL_44:
  uint64_t v91 = (long long *)(a1 + 296);
  uint64_t v92 = (long long *)(a2 + 296);
  unint64_t v93 = *(void *)(a2 + 328);
  unint64_t v94 = v93 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(void *)(a1 + 328) >> 2 == 0xFFFFFFFFLL)
  {
    if (v94 == 0x3FFFFFFFCLL)
    {
      long long v95 = *v92;
      long long v96 = *(_OWORD *)(a2 + 328);
      *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
      *(_OWORD *)(a1 + 328) = v96;
      *uint64_t v91 = v95;
      long long v97 = *(_OWORD *)(a2 + 344);
      long long v98 = *(_OWORD *)(a2 + 360);
      long long v99 = *(_OWORD *)(a2 + 376);
      *(void *)(a1 + 392) = *(void *)(a2 + 392);
      *(_OWORD *)(a1 + 360) = v98;
      *(_OWORD *)(a1 + 376) = v99;
      *(_OWORD *)(a1 + 344) = v97;
    }
    else
    {
      v105 = *(void **)(a2 + 296);
      uint64_t v106 = *(void *)(a2 + 304);
      uint64_t v107 = *(void *)(a2 + 312);
      uint64_t v108 = *(void *)(a2 + 320);
      uint64_t v235 = v5;
      uint64_t v109 = *(void *)(a2 + 336);
      uint64_t v110 = *(void *)(a2 + 344);
      uint64_t v111 = *(void *)(a2 + 352);
      uint64_t v222 = *(void *)(a2 + 360);
      uint64_t v224 = *(void *)(a2 + 368);
      uint64_t v226 = *(void *)(a2 + 376);
      uint64_t v229 = *(void *)(a2 + 384);
      uint64_t v232 = *(void *)(a2 + 392);
      outlined copy of PlatformItemList.Item.SystemItem(v105, v106, v107, v108, v93, v109, v110, v111, v222, v224, v226, v229, v232);
      *(void *)(a1 + 296) = v105;
      *(void *)(a1 + 304) = v106;
      *(void *)(a1 + 312) = v107;
      *(void *)(a1 + 320) = v108;
      *(void *)(a1 + 328) = v93;
      *(void *)(a1 + 336) = v109;
      *(void *)(a1 + 344) = v110;
      *(void *)(a1 + 352) = v111;
      *(void *)(a1 + 360) = v222;
      *(void *)(a1 + 368) = v224;
      *(void *)(a1 + 376) = v226;
      *(void *)(a1 + 384) = v229;
      uint64_t v5 = v235;
      *(void *)(a1 + 392) = v232;
    }
  }
  else if (v94 == 0x3FFFFFFFCLL)
  {
    outlined destroy of PlatformItemList.Item.SystemItem(a1 + 296);
    long long v101 = *(_OWORD *)(a2 + 312);
    long long v100 = *(_OWORD *)(a2 + 328);
    *uint64_t v91 = *v92;
    *(_OWORD *)(a1 + 312) = v101;
    *(_OWORD *)(a1 + 328) = v100;
    long long v103 = *(_OWORD *)(a2 + 360);
    long long v102 = *(_OWORD *)(a2 + 376);
    long long v104 = *(_OWORD *)(a2 + 344);
    *(void *)(a1 + 392) = *(void *)(a2 + 392);
    *(_OWORD *)(a1 + 360) = v103;
    *(_OWORD *)(a1 + 376) = v102;
    *(_OWORD *)(a1 + 344) = v104;
  }
  else
  {
    v112 = *(void **)(a2 + 296);
    uint64_t v113 = *(void *)(a2 + 304);
    uint64_t v236 = v5;
    uint64_t v114 = *(void *)(a2 + 312);
    uint64_t v115 = *(void *)(a2 + 320);
    uint64_t v116 = *(void *)(a2 + 336);
    uint64_t v117 = *(void *)(a2 + 344);
    uint64_t v118 = *(void *)(a2 + 352);
    uint64_t v223 = *(void *)(a2 + 360);
    uint64_t v225 = *(void *)(a2 + 368);
    uint64_t v227 = *(void *)(a2 + 376);
    uint64_t v230 = *(void *)(a2 + 384);
    uint64_t v233 = *(void *)(a2 + 392);
    outlined copy of PlatformItemList.Item.SystemItem(v112, v113, v114, v115, v93, v116, v117, v118, v223, v225, v227, v230, v233);
    v119 = *(void **)(a1 + 296);
    uint64_t v120 = *(void *)(a1 + 304);
    uint64_t v121 = *(void *)(a1 + 312);
    uint64_t v122 = *(void *)(a1 + 320);
    unint64_t v123 = *(void *)(a1 + 328);
    uint64_t v124 = *(void *)(a1 + 336);
    uint64_t v125 = *(void *)(a1 + 344);
    uint64_t v126 = *(void *)(a1 + 352);
    long long v127 = *(_OWORD *)(a1 + 360);
    long long v128 = *(_OWORD *)(a1 + 376);
    uint64_t v129 = *(void *)(a1 + 392);
    *(void *)(a1 + 296) = v112;
    *(void *)(a1 + 304) = v113;
    *(void *)(a1 + 312) = v114;
    *(void *)(a1 + 320) = v115;
    *(void *)(a1 + 328) = v93;
    *(void *)(a1 + 336) = v116;
    *(void *)(a1 + 344) = v117;
    *(void *)(a1 + 352) = v118;
    *(void *)(a1 + 360) = v223;
    *(void *)(a1 + 368) = v225;
    *(void *)(a1 + 376) = v227;
    *(void *)(a1 + 384) = v230;
    uint64_t v5 = v236;
    *(void *)(a1 + 392) = v233;
    outlined consume of PlatformItemList.Item.SystemItem(v119, v120, v121, v122, v123, v124, v125, v126, v127, *((uint64_t *)&v127 + 1), v128, SBYTE8(v128), v129);
  }
  v130 = (_OWORD *)(a1 + 400);
  v131 = (_OWORD *)(v5 + 122);
  v132 = (_OWORD *)(a1 + 408);
  uint64_t v133 = *(void *)(a1 + 408);
  v134 = (_OWORD *)(a2 + 408);
  uint64_t v135 = *(void *)(a2 + 408);
  if (v133 != 1)
  {
    if (v135 == 1)
    {
      outlined destroy of PlatformItemList.Item.SelectionBehavior(a1 + 400);
      _OWORD *v130 = *v131;
      long long v140 = *(_OWORD *)(v5 + 154);
      long long v139 = *(_OWORD *)(v5 + 170);
      long long v141 = *(_OWORD *)(v5 + 138);
      *(unsigned char *)(a1 + 464) = *(unsigned char *)(v5 + 186);
      *(_OWORD *)(a1 + 432) = v140;
      *(_OWORD *)(a1 + 448) = v139;
      *(_OWORD *)(a1 + 416) = v141;
      goto LABEL_85;
    }
    *(unsigned char *)(a1 + 400) = *(unsigned char *)(v5 + 122);
    *(unsigned char *)(a1 + 401) = *(unsigned char *)(v5 + 123);
    *(unsigned char *)(a1 + 402) = *(unsigned char *)(v5 + 124);
    *(unsigned char *)(a1 + 403) = *(unsigned char *)(v5 + 125);
    *(unsigned char *)(a1 + 404) = *(unsigned char *)(a2 + 404);
    uint64_t v147 = *(void *)(a2 + 408);
    if (v133)
    {
      if (v147)
      {
        uint64_t v148 = *(void *)(a2 + 416);
        *(void *)(a1 + 408) = v147;
        *(void *)(a1 + 416) = v148;
        swift_retain();
        swift_release();
        goto LABEL_70;
      }
      swift_release();
    }
    else if (v147)
    {
      uint64_t v149 = *(void *)(a2 + 416);
      *(void *)(a1 + 408) = v147;
      *(void *)(a1 + 416) = v149;
      swift_retain();
      goto LABEL_70;
    }
    _OWORD *v132 = *v134;
LABEL_70:
    uint64_t v150 = *(void *)(a2 + 424);
    if (*(void *)(a1 + 424))
    {
      if (v150)
      {
        uint64_t v151 = *(void *)(a2 + 432);
        *(void *)(a1 + 424) = v150;
        *(void *)(a1 + 432) = v151;
        swift_retain();
        swift_release();
        goto LABEL_77;
      }
      swift_release();
    }
    else if (v150)
    {
      uint64_t v152 = *(void *)(a2 + 432);
      *(void *)(a1 + 424) = v150;
      *(void *)(a1 + 432) = v152;
      swift_retain();
      goto LABEL_77;
    }
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
LABEL_77:
    uint64_t v146 = *(void *)(a2 + 440);
    if (*(void *)(a1 + 440))
    {
      if (v146)
      {
        uint64_t v153 = *(void *)(a2 + 448);
        *(void *)(a1 + 440) = v146;
        *(void *)(a1 + 448) = v153;
        swift_retain();
        swift_release();
        goto LABEL_84;
      }
      swift_release();
    }
    else if (v146)
    {
      goto LABEL_81;
    }
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
    goto LABEL_84;
  }
  if (v135 == 1)
  {
    _OWORD *v130 = *v131;
    long long v136 = *(_OWORD *)(v5 + 138);
    long long v137 = *(_OWORD *)(v5 + 154);
    long long v138 = *(_OWORD *)(v5 + 170);
    *(unsigned char *)(a1 + 464) = *(unsigned char *)(v5 + 186);
    *(_OWORD *)(a1 + 432) = v137;
    *(_OWORD *)(a1 + 448) = v138;
    *(_OWORD *)(a1 + 416) = v136;
    goto LABEL_85;
  }
  *(unsigned char *)(a1 + 400) = *(unsigned char *)(a2 + 400);
  *(unsigned char *)(a1 + 401) = *(unsigned char *)(a2 + 401);
  *(unsigned char *)(a1 + 402) = *(unsigned char *)(a2 + 402);
  *(unsigned char *)(a1 + 403) = *(unsigned char *)(a2 + 403);
  *(unsigned char *)(a1 + 404) = *(unsigned char *)(a2 + 404);
  uint64_t v142 = *(void *)(a2 + 408);
  if (v142)
  {
    uint64_t v143 = *(void *)(a2 + 416);
    *(void *)(a1 + 408) = v142;
    *(void *)(a1 + 416) = v143;
    swift_retain();
    uint64_t v144 = *(void *)(a2 + 424);
    if (v144) {
      goto LABEL_58;
    }
  }
  else
  {
    _OWORD *v132 = *v134;
    uint64_t v144 = *(void *)(a2 + 424);
    if (v144)
    {
LABEL_58:
      uint64_t v145 = *(void *)(a2 + 432);
      *(void *)(a1 + 424) = v144;
      *(void *)(a1 + 432) = v145;
      swift_retain();
      uint64_t v146 = *(void *)(a2 + 440);
      if (!v146) {
        goto LABEL_65;
      }
LABEL_81:
      uint64_t v154 = *(void *)(a2 + 448);
      *(void *)(a1 + 440) = v146;
      *(void *)(a1 + 448) = v154;
      swift_retain();
      goto LABEL_84;
    }
  }
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
  uint64_t v146 = *(void *)(a2 + 440);
  if (v146) {
    goto LABEL_81;
  }
LABEL_65:
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
LABEL_84:
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
LABEL_85:
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 496);
  uint64_t v155 = *(void *)(a2 + 504);
  if (*(void *)(a1 + 504))
  {
    if (v155)
    {
      uint64_t v156 = *(void *)(a2 + 512);
      *(void *)(a1 + 504) = v155;
      *(void *)(a1 + 512) = v156;
      swift_retain();
      swift_release();
      goto LABEL_92;
    }
    swift_release();
  }
  else if (v155)
  {
    uint64_t v157 = *(void *)(a2 + 512);
    *(void *)(a1 + 504) = v155;
    *(void *)(a1 + 512) = v157;
    swift_retain();
    goto LABEL_92;
  }
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
LABEL_92:
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  v158 = (_OWORD *)(a1 + 528);
  v159 = (_OWORD *)(a2 + 528);
  uint64_t v160 = *(void *)(a2 + 528);
  if (*(void *)(a1 + 528))
  {
    if (v160)
    {
      *(void *)(a1 + 528) = v160;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 536) = *(void *)(a2 + 536);
      swift_retain();
      swift_release();
      *(void *)(a1 + 544) = *(void *)(a2 + 544);
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of PlatformItemList.Item.Accessibility(a1 + 528);
      uint64_t v161 = *(void *)(a2 + 544);
      _OWORD *v158 = *v159;
      *(void *)(a1 + 544) = v161;
    }
  }
  else if (v160)
  {
    *(void *)(a1 + 528) = v160;
    *(void *)(a1 + 536) = *(void *)(a2 + 536);
    *(void *)(a1 + 544) = *(void *)(a2 + 544);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v162 = *v159;
    *(void *)(a1 + 544) = *(void *)(a2 + 544);
    _OWORD *v158 = v162;
  }
  v163 = (long long *)(a1 + 552);
  v164 = (long long *)(a2 + 552);
  uint64_t v165 = *(void *)(a2 + 552);
  if (*(void *)(a1 + 552) == 1)
  {
    if (v165 == 1)
    {
      long long v166 = *v164;
      *(void *)(a1 + 568) = *(void *)(a2 + 568);
      long long *v163 = v166;
      goto LABEL_115;
    }
    *(void *)(a1 + 552) = v165;
    uint64_t v168 = *(void *)(a2 + 560);
    swift_retain();
    if (!v168)
    {
      *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
      goto LABEL_115;
    }
    uint64_t v169 = *(void *)(a2 + 568);
    *(void *)(a1 + 560) = v168;
    goto LABEL_112;
  }
  if (v165 == 1)
  {
    outlined destroy of PlatformItemList.Item.SecondaryNavigationBehavior(a1 + 552);
    uint64_t v167 = *(void *)(a2 + 568);
    long long *v163 = *v164;
    *(void *)(a1 + 568) = v167;
    goto LABEL_115;
  }
  *(void *)(a1 + 552) = v165;
  swift_retain();
  swift_release();
  uint64_t v170 = *(void *)(a2 + 560);
  if (*(void *)(a1 + 560))
  {
    if (v170)
    {
      uint64_t v171 = *(void *)(a2 + 568);
      *(void *)(a1 + 560) = v170;
      *(void *)(a1 + 568) = v171;
      swift_retain();
      swift_release();
      goto LABEL_115;
    }
    swift_release();
  }
  else if (v170)
  {
    uint64_t v169 = *(void *)(a2 + 568);
    *(void *)(a1 + 560) = v170;
LABEL_112:
    *(void *)(a1 + 568) = v169;
    swift_retain();
    goto LABEL_115;
  }
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
LABEL_115:
  v172 = *(void **)(a1 + 576);
  v173 = *(void **)(a2 + 576);
  *(void *)(a1 + 576) = v173;
  id v174 = v173;

  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 632) = *(unsigned char *)(a2 + 632);
  *(unsigned char *)(a1 + 633) = *(unsigned char *)(a2 + 633);
  *(unsigned char *)(a1 + 634) = *(unsigned char *)(a2 + 634);
  v175 = (int *)type metadata accessor for PlatformItemList.Item();
  uint64_t v176 = v175[28];
  v177 = (unsigned char *)(a1 + v176);
  v178 = (unsigned char *)(a2 + v176);
  uint64_t v179 = type metadata accessor for CommandOperation();
  uint64_t v237 = *(void *)(v179 - 8);
  v180 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v237 + 48);
  LODWORD(v172) = v180(v177, 1, v179);
  v181 = v178;
  int v182 = v180(v178, 1, v179);
  if (!v172)
  {
    if (!v182)
    {
      v228 = v178;
      unsigned char *v177 = *v178;
      uint64_t v198 = *(int *)(v179 + 20);
      v199 = &v177[v198];
      v200 = &v178[v198];
      uint64_t v201 = *(void *)v200;
      uint64_t v202 = *((void *)v200 + 1);
      char v203 = v200[16];
      outlined copy of Text.Storage(*(void *)v200, v202, v203);
      uint64_t v204 = *(void *)v199;
      uint64_t v205 = *((void *)v199 + 1);
      char v206 = v199[16];
      *(void *)v199 = v201;
      *((void *)v199 + 1) = v202;
      v199[16] = v203;
      outlined consume of Text.Storage(v204, v205, v206);
      *((void *)v199 + 3) = *((void *)v200 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v207 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      v208 = &v199[v207];
      v209 = &v200[v207];
      uint64_t v210 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v210 - 8) + 24))(v208, v209, v210);
      uint64_t v211 = *(int *)(v179 + 24);
      v212 = &v177[v211];
      v213 = &v228[v211];
      uint64_t v214 = *(void *)&v228[v211];
      if (*v212)
      {
        if (v214)
        {
          uint64_t v215 = *((void *)v213 + 1);
          void *v212 = v214;
          v212[1] = v215;
          swift_retain();
          swift_release();
          goto LABEL_127;
        }
        swift_release();
      }
      else if (v214)
      {
        uint64_t v221 = *((void *)v213 + 1);
        void *v212 = v214;
        v212[1] = v221;
        swift_retain();
        goto LABEL_127;
      }
      *(_OWORD *)v212 = *(_OWORD *)v213;
      goto LABEL_127;
    }
    outlined destroy of UIKitSystemButtonConfigurationModifier((uint64_t)v177, (uint64_t (*)(void))type metadata accessor for CommandOperation);
    goto LABEL_121;
  }
  if (v182)
  {
LABEL_121:
    type metadata accessor for WeakBox<UIButton>?(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
    memcpy(v177, v178, *(void *)(*(void *)(v197 - 8) + 64));
    goto LABEL_127;
  }
  unsigned char *v177 = *v178;
  uint64_t v183 = *(int *)(v179 + 20);
  v184 = &v177[v183];
  v234 = v177;
  v185 = &v181[v183];
  uint64_t v186 = *(void *)&v181[v183];
  uint64_t v187 = *(void *)&v181[v183 + 8];
  char v188 = v181[v183 + 16];
  outlined copy of Text.Storage(v186, v187, v188);
  *(void *)v184 = v186;
  *((void *)v184 + 1) = v187;
  v184[16] = v188;
  *((void *)v184 + 3) = *((void *)v185 + 3);
  uint64_t v189 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  v231 = &v184[v189];
  v190 = &v185[v189];
  uint64_t v191 = type metadata accessor for UUID();
  v192 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v191 - 8) + 16);
  swift_bridgeObjectRetain();
  v192(v231, v190, v191);
  uint64_t v193 = *(int *)(v179 + 24);
  v194 = &v234[v193];
  v195 = &v181[v193];
  if (*v195)
  {
    uint64_t v196 = v195[1];
    void *v194 = *v195;
    v194[1] = v196;
    swift_retain();
  }
  else
  {
    *(_OWORD *)v194 = *(_OWORD *)v195;
  }
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v237 + 56))(v234, 0, 1, v179);
LABEL_127:
  *(unsigned char *)(a1 + v175[29]) = *(unsigned char *)(a2 + v175[29]);
  *(unsigned char *)(a1 + v175[30]) = *(unsigned char *)(a2 + v175[30]);
  *(unsigned char *)(a1 + v175[31]) = *(unsigned char *)(a2 + v175[31]);
  *(unsigned char *)(a1 + v175[32]) = *(unsigned char *)(a2 + v175[32]);
  *(void *)(a1 + v175[33]) = *(void *)(a2 + v175[33]);
  swift_retain();
  swift_release();
  *(_WORD *)(a1 + *(int *)(a3 + 20)) = *(_WORD *)(a2 + *(int *)(a3 + 20));
  uint64_t v216 = *(int *)(a3 + 24);
  uint64_t v217 = a1 + v216;
  uint64_t v218 = a2 + v216;
  uint64_t v219 = type metadata accessor for UIButton.Configuration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v219 - 8) + 24))(v217, v218, v219);
  return a1;
}

uint64_t outlined destroy of Image.NamedResolved(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of PlatformItemList.Item.SystemItem(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of PlatformItemList.Item.SelectionBehavior(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of PlatformItemList.Item.Accessibility(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of PlatformItemList.Item.SecondaryNavigationBehavior(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of UIKitSystemButtonConfigurationModifier(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t initializeWithTake for PlatformItemContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  long long v8 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v8;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
  long long v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  long long v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v10;
  long long v11 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v11;
  long long v12 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v12;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  long long v13 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v13;
  long long v14 = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 376) = v14;
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  long long v15 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v15;
  long long v16 = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 344) = v16;
  long long v17 = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = v17;
  *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
  long long v18 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v18;
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 481) = *(_OWORD *)(a2 + 481);
  uint64_t v19 = *(void *)(a2 + 504);
  if (v19)
  {
    uint64_t v20 = *(void *)(a2 + 512);
    *(void *)(a1 + 504) = v19;
    *(void *)(a1 + 512) = v20;
  }
  else
  {
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  }
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  *(unsigned char *)(a1 + 632) = *(unsigned char *)(a2 + 632);
  *(_WORD *)(a1 + 633) = *(_WORD *)(a2 + 633);
  long long v21 = (int *)type metadata accessor for PlatformItemList.Item();
  uint64_t v22 = v21[28];
  long long v23 = (unsigned char *)(a1 + v22);
  long long v24 = (unsigned char *)(a2 + v22);
  uint64_t v25 = type metadata accessor for CommandOperation();
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    type metadata accessor for WeakBox<UIButton>?(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    *long long v23 = *v24;
    uint64_t v28 = *(int *)(v25 + 20);
    long long v29 = &v23[v28];
    long long v30 = &v24[v28];
    long long v31 = *(_OWORD *)&v24[v28 + 16];
    *long long v29 = *(_OWORD *)&v24[v28];
    v29[1] = v31;
    uint64_t v32 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    int v33 = (char *)v29 + v32;
    id v34 = &v30[v32];
    uint64_t v35 = type metadata accessor for UUID();
    (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v35 - 8) + 32))(v33, v34, v35);
    uint64_t v36 = *(int *)(v25 + 24);
    long long v37 = &v23[v36];
    char v38 = (uint64_t *)&v24[v36];
    uint64_t v39 = *v38;
    if (*v38)
    {
      uint64_t v40 = v38[1];
      *long long v37 = v39;
      v37[1] = v40;
    }
    else
    {
      *(_OWORD *)long long v37 = *(_OWORD *)v38;
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  *(unsigned char *)(a1 + v21[29]) = *(unsigned char *)(a2 + v21[29]);
  *(unsigned char *)(a1 + v21[30]) = *(unsigned char *)(a2 + v21[30]);
  *(unsigned char *)(a1 + v21[31]) = *(unsigned char *)(a2 + v21[31]);
  *(unsigned char *)(a1 + v21[32]) = *(unsigned char *)(a2 + v21[32]);
  *(void *)(a1 + v21[33]) = *(void *)(a2 + v21[33]);
  uint64_t v41 = *(int *)(a3 + 24);
  *(_WORD *)(a1 + *(int *)(a3 + 20)) = *(_WORD *)(a2 + *(int *)(a3 + 20));
  uint64_t v42 = a1 + v41;
  uint64_t v43 = a2 + v41;
  uint64_t v44 = type metadata accessor for UIButton.Configuration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 32))(v42, v43, v44);
  return a1;
}

uint64_t assignWithTake for PlatformItemContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a2 + 278;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  long long v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  uint64_t v9 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v9;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v10;
  swift_release();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  long long v11 = (_OWORD *)(a1 + 64);
  long long v12 = (_OWORD *)(a2 + 64);
  if (*(void *)(a1 + 184) >> 1 == 4294967294) {
    goto LABEL_4;
  }
  if (*(void *)(a2 + 184) >> 1 == 4294967294)
  {
    outlined destroy of Image.Resolved(a1 + 64);
LABEL_4:
    long long v13 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v13;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
    long long v14 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v14;
    long long v15 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v15;
    long long v16 = *(_OWORD *)(a2 + 80);
    *long long v11 = *v12;
    *(_OWORD *)(a1 + 80) = v16;
    long long v17 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v17;
    goto LABEL_16;
  }
  int v18 = *(unsigned __int8 *)(a1 + 72);
  if (v18 != 255)
  {
    int v19 = *(unsigned __int8 *)(a2 + 72);
    if (v19 != 255)
    {
      uint64_t v20 = *(void **)(a1 + 64);
      *(void *)(a1 + 64) = *(void *)v12;
      *(unsigned char *)(a1 + 72) = v19;
      outlined consume of GraphicsImage.Contents(v20, v18);
      goto LABEL_10;
    }
    outlined destroy of GraphicsImage.Contents(a1 + 64);
  }
  *(void *)long long v11 = *(void *)v12;
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
LABEL_10:
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
  *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
  long long v21 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v21;
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
  unint64_t v22 = *(void *)(a1 + 184);
  *(_WORD *)(a1 + 162) = *(_WORD *)(a2 + 162);
  if (v22 >> 1 != 0xFFFFFFFF)
  {
    unint64_t v23 = *(void *)(a2 + 184);
    if (v23 >> 1 != 0xFFFFFFFF)
    {
      uint64_t v25 = *(void *)(a2 + 192);
      uint64_t v26 = *(void *)(a1 + 168);
      uint64_t v27 = *(void *)(a1 + 176);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(void *)(a1 + 184) = v23;
      *(void *)(a1 + 192) = v25;
      outlined consume of AccessibilityImageLabel(v26, v27, v22);
      goto LABEL_15;
    }
    outlined destroy of AccessibilityImageLabel(a1 + 168);
  }
  long long v24 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v24;
LABEL_15:
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_unknownObjectRelease();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_release();
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(unsigned char *)(a1 + 217) = *(unsigned char *)(a2 + 217);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  uint64_t v28 = *(void **)(a1 + 232);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);

  *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
  *(unsigned char *)(a1 + 242) = *(unsigned char *)(a2 + 242);
LABEL_16:
  if (!*(void *)(a1 + 256))
  {
LABEL_21:
    long long v32 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v32;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    goto LABEL_26;
  }
  uint64_t v29 = *(void *)(a2 + 256);
  if (!v29)
  {
    outlined destroy of Image.NamedResolved(a1 + 248);
    goto LABEL_21;
  }
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v29;
  swift_bridgeObjectRelease();
  long long v30 = *(void **)(a1 + 264);
  unint64_t v31 = *(void *)(a2 + 264);
  if ((unint64_t)v30 >= 2)
  {
    if (v31 >= 2)
    {
      *(void *)(a1 + 264) = v31;
    }
    else
    {

      *(void *)(a1 + 264) = *(void *)(a2 + 264);
    }
  }
  else
  {
    *(void *)(a1 + 264) = v31;
  }
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_WORD *)(a1 + 276) = *(_WORD *)(a2 + 276);
  *(unsigned char *)(a1 + 278) = *(unsigned char *)v6;
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_release();
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  swift_release();
LABEL_26:
  int v33 = (_OWORD *)(a1 + 296);
  unint64_t v34 = *(void *)(a1 + 328);
  if (v34 >> 2 == 0xFFFFFFFF)
  {
LABEL_29:
    long long v36 = *(_OWORD *)(v6 + 98);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(v6 + 82);
    *(_OWORD *)(a1 + 376) = v36;
    *(void *)(a1 + 392) = *(void *)(v6 + 114);
    long long v37 = *(_OWORD *)(v6 + 34);
    *int v33 = *(_OWORD *)(v6 + 18);
    *(_OWORD *)(a1 + 312) = v37;
    long long v38 = *(_OWORD *)(v6 + 66);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(v6 + 50);
    *(_OWORD *)(a1 + 344) = v38;
    goto LABEL_31;
  }
  unint64_t v35 = *(void *)(a2 + 328);
  if (v35 >> 2 == 0xFFFFFFFF)
  {
    outlined destroy of PlatformItemList.Item.SystemItem(a1 + 296);
    goto LABEL_29;
  }
  uint64_t v39 = *(void **)(a1 + 296);
  uint64_t v40 = *(void *)(a1 + 304);
  uint64_t v41 = *(void *)(a1 + 312);
  uint64_t v42 = *(void *)(a1 + 320);
  uint64_t v43 = *(void *)(a1 + 336);
  uint64_t v44 = *(void *)(a1 + 344);
  uint64_t v45 = *(void *)(a1 + 352);
  long long v46 = *(_OWORD *)(a1 + 360);
  long long v47 = *(_OWORD *)(a1 + 376);
  uint64_t v48 = *(void *)(a1 + 392);
  long long v49 = *(_OWORD *)(v6 + 34);
  *int v33 = *(_OWORD *)(v6 + 18);
  *(_OWORD *)(a1 + 312) = v49;
  *(void *)(a1 + 328) = v35;
  long long v50 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v50;
  long long v51 = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = v51;
  outlined consume of PlatformItemList.Item.SystemItem(v39, v40, v41, v42, v34, v43, v44, v45, v46, *((uint64_t *)&v46 + 1), v47, SBYTE8(v47), v48);
LABEL_31:
  uint64_t v52 = *(void *)(a1 + 408);
  if (v52 == 1)
  {
LABEL_34:
    long long v54 = *(_OWORD *)(v6 + 170);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(v6 + 154);
    *(_OWORD *)(a1 + 448) = v54;
    *(unsigned char *)(a1 + 464) = *(unsigned char *)(v6 + 186);
    long long v55 = *(_OWORD *)(v6 + 138);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(v6 + 122);
    *(_OWORD *)(a1 + 416) = v55;
    goto LABEL_57;
  }
  uint64_t v53 = *(void *)(a2 + 408);
  if (v53 == 1)
  {
    outlined destroy of PlatformItemList.Item.SelectionBehavior(a1 + 400);
    goto LABEL_34;
  }
  *(unsigned char *)(a1 + 400) = *(unsigned char *)(v6 + 122);
  *(unsigned char *)(a1 + 401) = *(unsigned char *)(v6 + 123);
  *(unsigned char *)(a1 + 402) = *(unsigned char *)(v6 + 124);
  *(unsigned char *)(a1 + 403) = *(unsigned char *)(v6 + 125);
  *(unsigned char *)(a1 + 404) = *(unsigned char *)(a2 + 404);
  if (v52)
  {
    if (v53)
    {
      uint64_t v56 = *(void *)(a2 + 416);
      *(void *)(a1 + 408) = v53;
      *(void *)(a1 + 416) = v56;
      swift_release();
      goto LABEL_42;
    }
    swift_release();
  }
  else if (v53)
  {
    uint64_t v57 = *(void *)(a2 + 416);
    *(void *)(a1 + 408) = v53;
    *(void *)(a1 + 416) = v57;
    goto LABEL_42;
  }
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
LABEL_42:
  uint64_t v58 = *(void *)(a2 + 424);
  if (*(void *)(a1 + 424))
  {
    if (v58)
    {
      uint64_t v59 = *(void *)(a2 + 432);
      *(void *)(a1 + 424) = v58;
      *(void *)(a1 + 432) = v59;
      swift_release();
      goto LABEL_49;
    }
    swift_release();
  }
  else if (v58)
  {
    uint64_t v60 = *(void *)(a2 + 432);
    *(void *)(a1 + 424) = v58;
    *(void *)(a1 + 432) = v60;
    goto LABEL_49;
  }
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
LABEL_49:
  uint64_t v61 = *(void *)(a2 + 440);
  if (!*(void *)(a1 + 440))
  {
    if (v61)
    {
      uint64_t v63 = *(void *)(a2 + 448);
      *(void *)(a1 + 440) = v61;
      *(void *)(a1 + 448) = v63;
      goto LABEL_56;
    }
LABEL_55:
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
    goto LABEL_56;
  }
  if (!v61)
  {
    swift_release();
    goto LABEL_55;
  }
  uint64_t v62 = *(void *)(a2 + 448);
  *(void *)(a1 + 440) = v61;
  *(void *)(a1 + 448) = v62;
  swift_release();
LABEL_56:
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
LABEL_57:
  uint64_t v64 = *(void *)(a2 + 480);
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(void *)(a1 + 480) = v64;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 496);
  uint64_t v65 = *(void *)(a2 + 504);
  if (*(void *)(a1 + 504))
  {
    if (v65)
    {
      uint64_t v66 = *(void *)(a2 + 512);
      *(void *)(a1 + 504) = v65;
      *(void *)(a1 + 512) = v66;
      swift_release();
      goto LABEL_64;
    }
    swift_release();
  }
  else if (v65)
  {
    uint64_t v67 = *(void *)(a2 + 512);
    *(void *)(a1 + 504) = v65;
    *(void *)(a1 + 512) = v67;
    goto LABEL_64;
  }
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
LABEL_64:
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  if (*(void *)(a1 + 528))
  {
    uint64_t v68 = *(void *)(a2 + 528);
    if (v68)
    {
      *(void *)(a1 + 528) = v68;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 536) = *(void *)(a2 + 536);
      swift_release();
      *(void *)(a1 + 544) = *(void *)(a2 + 544);
      swift_release();
      goto LABEL_69;
    }
    outlined destroy of PlatformItemList.Item.Accessibility(a1 + 528);
  }
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
LABEL_69:
  uint64_t v119 = a3;
  if (*(void *)(a1 + 552) == 1)
  {
LABEL_72:
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *(void *)(a1 + 568) = *(void *)(a2 + 568);
    goto LABEL_73;
  }
  uint64_t v69 = *(void *)(a2 + 552);
  if (v69 == 1)
  {
    outlined destroy of PlatformItemList.Item.SecondaryNavigationBehavior(a1 + 552);
    goto LABEL_72;
  }
  *(void *)(a1 + 552) = v69;
  swift_release();
  uint64_t v95 = *(void *)(a2 + 560);
  if (*(void *)(a1 + 560))
  {
    if (v95)
    {
      uint64_t v96 = *(void *)(a2 + 568);
      *(void *)(a1 + 560) = v95;
      *(void *)(a1 + 568) = v96;
      swift_release();
      goto LABEL_73;
    }
    swift_release();
  }
  else if (v95)
  {
    uint64_t v112 = *(void *)(a2 + 568);
    *(void *)(a1 + 560) = v95;
    *(void *)(a1 + 568) = v112;
    goto LABEL_73;
  }
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
LABEL_73:
  uint64_t v70 = *(void **)(a1 + 576);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);

  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 632) = *(unsigned char *)(a2 + 632);
  *(_WORD *)(a1 + 633) = *(_WORD *)(a2 + 633);
  uint64_t v71 = (int *)type metadata accessor for PlatformItemList.Item();
  uint64_t v72 = v71[28];
  char v73 = (unsigned char *)(a1 + v72);
  uint64_t v74 = (unsigned char *)(a2 + v72);
  uint64_t v75 = type metadata accessor for CommandOperation();
  uint64_t v76 = *(void *)(v75 - 8);
  uint64_t v77 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v76 + 48);
  int v78 = v77(v73, 1, v75);
  int v79 = v77(v74, 1, v75);
  if (!v78)
  {
    if (!v79)
    {
      *char v73 = *v74;
      uint64_t v97 = *(int *)(v75 + 20);
      long long v98 = &v73[v97];
      long long v99 = &v74[v97];
      LOBYTE(v97) = v74[v97 + 16];
      uint64_t v100 = *(void *)v98;
      uint64_t v101 = *((void *)v98 + 1);
      char v102 = v98[16];
      *(_OWORD *)long long v98 = *(_OWORD *)v99;
      v98[16] = v97;
      outlined consume of Text.Storage(v100, v101, v102);
      *((void *)v98 + 3) = *((void *)v99 + 3);
      swift_bridgeObjectRelease();
      uint64_t v103 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      long long v104 = &v98[v103];
      v105 = &v99[v103];
      uint64_t v106 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v106 - 8) + 40))(v104, v105, v106);
      uint64_t v107 = *(int *)(v75 + 24);
      uint64_t v108 = &v73[v107];
      uint64_t v109 = (uint64_t *)&v74[v107];
      uint64_t v110 = *v109;
      if (*v108)
      {
        uint64_t v94 = v119;
        if (v110)
        {
          uint64_t v111 = v109[1];
          *uint64_t v108 = v110;
          v108[1] = v111;
          swift_release();
          goto LABEL_90;
        }
        swift_release();
      }
      else
      {
        uint64_t v94 = v119;
        if (v110)
        {
          uint64_t v118 = v109[1];
          *uint64_t v108 = v110;
          v108[1] = v118;
          goto LABEL_90;
        }
      }
      *(_OWORD *)uint64_t v108 = *(_OWORD *)v109;
      goto LABEL_90;
    }
    outlined destroy of UIKitSystemButtonConfigurationModifier((uint64_t)v73, (uint64_t (*)(void))type metadata accessor for CommandOperation);
    goto LABEL_79;
  }
  if (v79)
  {
LABEL_79:
    type metadata accessor for WeakBox<UIButton>?(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
    memcpy(v73, v74, *(void *)(*(void *)(v93 - 8) + 64));
    uint64_t v94 = v119;
    goto LABEL_90;
  }
  *char v73 = *v74;
  uint64_t v80 = *(int *)(v75 + 20);
  id v81 = &v73[v80];
  uint64_t v82 = &v74[v80];
  long long v83 = *(_OWORD *)&v74[v80 + 16];
  *id v81 = *(_OWORD *)&v74[v80];
  v81[1] = v83;
  uint64_t v84 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  long long v85 = (char *)v81 + v84;
  long long v86 = &v82[v84];
  uint64_t v87 = type metadata accessor for UUID();
  (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v87 - 8) + 32))(v85, v86, v87);
  uint64_t v88 = *(int *)(v75 + 24);
  id v89 = &v73[v88];
  int v90 = (uint64_t *)&v74[v88];
  uint64_t v91 = *v90;
  if (*v90)
  {
    uint64_t v92 = v90[1];
    *id v89 = v91;
    v89[1] = v92;
  }
  else
  {
    *(_OWORD *)id v89 = *(_OWORD *)v90;
  }
  uint64_t v94 = v119;
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
LABEL_90:
  *(unsigned char *)(a1 + v71[29]) = *(unsigned char *)(a2 + v71[29]);
  *(unsigned char *)(a1 + v71[30]) = *(unsigned char *)(a2 + v71[30]);
  *(unsigned char *)(a1 + v71[31]) = *(unsigned char *)(a2 + v71[31]);
  *(unsigned char *)(a1 + v71[32]) = *(unsigned char *)(a2 + v71[32]);
  *(void *)(a1 + v71[33]) = *(void *)(a2 + v71[33]);
  swift_release();
  uint64_t v113 = *(int *)(v94 + 24);
  *(_WORD *)(a1 + *(int *)(v94 + 20)) = *(_WORD *)(a2 + *(int *)(v94 + 20));
  uint64_t v114 = a1 + v113;
  uint64_t v115 = a2 + v113;
  uint64_t v116 = type metadata accessor for UIButton.Configuration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v116 - 8) + 40))(v114, v115, v116);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformItemContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18770E2BC);
}

uint64_t sub_18770E2BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PlatformItemList.Item();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    long long v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for UIButton.Configuration();
    long long v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 24);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for PlatformItemContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18770E3C8);
}

uint64_t sub_18770E3C8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for PlatformItemList.Item();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for UIButton.Configuration();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 24);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t type metadata completion function for PlatformItemContent()
{
  uint64_t result = type metadata accessor for PlatformItemList.Item();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UIButton.Configuration();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t destroy for UIKitButtonConfiguration(uint64_t result)
{
  uint64_t v1 = result;
  if (*(void *)(result + 8)) {
    uint64_t result = swift_release();
  }
  if (*(void *)(v1 + 56))
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for UIKitButtonConfiguration(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  uint64_t v6 = *(void *)(a2 + 56);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(void *)(a1 + 28) = *(void *)(a2 + 28);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(_WORD *)(a1 + 37) = *(_WORD *)(a2 + 37);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 64);
    *(void *)(a1 + 56) = v6;
    *(void *)(a1 + 64) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  }
  return a1;
}

uint64_t assignWithCopy for UIKitButtonConfiguration(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v6 = (_OWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8))
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v7;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    uint64_t v8 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v8;
    swift_retain();
    goto LABEL_8;
  }
  *uint64_t v4 = *v6;
LABEL_8:
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  uint64_t v9 = *(void *)(a2 + 28);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(void *)(a1 + 28) = v9;
  *(unsigned char *)(a1 + 37) = *(unsigned char *)(a2 + 37);
  *(unsigned char *)(a1 + 38) = *(unsigned char *)(a2 + 38);
  uint64_t v10 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v10;
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  uint64_t v11 = *(void *)(a2 + 56);
  if (!*(void *)(a1 + 56))
  {
    if (v11)
    {
      uint64_t v13 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = v11;
      *(void *)(a1 + 64) = v13;
      swift_retain();
      return a1;
    }
LABEL_14:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    return a1;
  }
  if (!v11)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v12 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v12;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for UIKitButtonConfiguration(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v6 = (_OWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8))
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v7;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    uint64_t v8 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v8;
    goto LABEL_8;
  }
  *uint64_t v4 = *v6;
LABEL_8:
  uint64_t v9 = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a1 + 56);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(void *)(a1 + 28) = *(void *)(a2 + 28);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(_WORD *)(a1 + 37) = *(_WORD *)(a2 + 37);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  if (!v10)
  {
    if (v9)
    {
      uint64_t v12 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = v9;
      *(void *)(a1 + 64) = v12;
      return a1;
    }
LABEL_14:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    return a1;
  }
  if (!v9)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v11 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v11;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitButtonConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 72)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for UIKitButtonConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 72) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

void *type metadata accessor for ResolvedUIKitButtonBody()
{
  return &unk_1ED43FE50;
}

uint64_t type metadata completion function for ButtonStyleContent()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ButtonStyleContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 64);
  unsigned int v11 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (v11 > 7
    || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || ((((v10 + ((v9 + v6 + 2) & ~v9) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    int v4 = (uint64_t *)(v14 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_WORD *)((char *)v4 + v6) = *(_WORD *)((char *)a2 + v6);
    uint64_t v15 = (char *)a2 + v6 + v9;
    uint64_t v16 = ((unint64_t)v4 + v6 + v9 + 2) & ~v9;
    uint64_t v17 = (unint64_t)(v15 + 2) & ~v9;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v16, v17, v7);
    uint64_t v18 = v16 + v10;
    uint64_t v19 = v17 + v10;
    unint64_t v20 = (v16 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v21 = (v19 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v22 = *(void *)v21;
    LOBYTE(v16) = *(unsigned char *)(v21 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v21, v16);
    *(void *)unint64_t v20 = v22;
    *(unsigned char *)(v20 + 8) = v16;
    unint64_t v23 = (v18 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v24 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(unsigned char *)unint64_t v23 = *(unsigned char *)v24;
    *(void *)(v23 + 8) = *(void *)(v24 + 8);
    unint64_t v25 = (v23 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v26 = (v24 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(unsigned char *)unint64_t v25 = *(unsigned char *)v26;
    *(void *)(v25 + 8) = *(void *)(v26 + 8);
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for ButtonStyleContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56);
  uint64_t v6 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (a1 + v5 + *(unsigned __int8 *)(v6 + 80) + 2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v8);
  outlined consume of Environment<Bool>.Content(*(void *)((v8 + *(void *)(v7 + 56) + 7) & 0xFFFFFFFFFFFFFFF8), *(unsigned char *)(((v8 + *(void *)(v7 + 56) + 7) & 0xFFFFFFFFFFFFFFF8) + 8));
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for ButtonStyleContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  unint64_t v8 = (_WORD *)(v7 + a1);
  uint64_t v9 = (_WORD *)(v7 + a2);
  *unint64_t v8 = *v9;
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v11 = v10 + 16;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = ((unint64_t)v8 + v12 + 2) & ~v12;
  uint64_t v14 = ((unint64_t)v9 + v12 + 2) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v13, v14);
  uint64_t v15 = *(void *)(v11 + 48);
  uint64_t v16 = v15 + v13;
  uint64_t v17 = v15 + v14;
  unint64_t v18 = (v15 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v15 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = *(void *)v19;
  LOBYTE(v14) = *(unsigned char *)(v19 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v19, v14);
  *(void *)unint64_t v18 = v20;
  *(unsigned char *)(v18 + 8) = v14;
  unint64_t v21 = (v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (v17 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v21 = *(unsigned char *)v22;
  *(void *)(v21 + 8) = *(void *)(v22 + 8);
  unint64_t v23 = (v21 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = (v22 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v23 = *(unsigned char *)v24;
  *(void *)(v23 + 8) = *(void *)(v24 + 8);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ButtonStyleContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  unint64_t v8 = (_WORD *)(v7 + a1);
  uint64_t v9 = (_WORD *)(v7 + a2);
  *unint64_t v8 = *v9;
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v11 = v10 + 24;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = ((unint64_t)v8 + v12 + 2) & ~v12;
  uint64_t v14 = ((unint64_t)v9 + v12 + 2) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v13, v14);
  uint64_t v15 = *(void *)(v11 + 40);
  uint64_t v16 = v15 + v13;
  uint64_t v17 = v15 + v14;
  unint64_t v18 = (v15 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v15 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = *(void *)v19;
  LOBYTE(v14) = *(unsigned char *)(v19 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v19, v14);
  uint64_t v21 = *(void *)v18;
  char v22 = *(unsigned char *)(v18 + 8);
  *(void *)unint64_t v18 = v20;
  *(unsigned char *)(v18 + 8) = v14;
  outlined consume of Environment<Bool>.Content(v21, v22);
  unint64_t v23 = (v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = (v17 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v23 = *(unsigned char *)v24;
  *(void *)(v23 + 8) = *(void *)(v24 + 8);
  swift_retain();
  swift_release();
  unint64_t v25 = (v23 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = (v24 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v25 = *(unsigned char *)v26;
  *(void *)(v25 + 8) = *(void *)(v26 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for ButtonStyleContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  unint64_t v8 = (_WORD *)(v7 + a1);
  uint64_t v9 = (_WORD *)(v7 + a2);
  *unint64_t v8 = *v9;
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v11 = v10 + 32;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = ((unint64_t)v8 + v12 + 2) & ~v12;
  uint64_t v14 = ((unint64_t)v9 + v12 + 2) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v13, v14);
  uint64_t v15 = *(void *)(v11 + 32);
  uint64_t v16 = v15 + v13;
  uint64_t v17 = v15 + v14;
  unint64_t v18 = (v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  char v20 = *(unsigned char *)(v19 + 8);
  *(void *)unint64_t v18 = *(void *)v19;
  *(unsigned char *)(v18 + 8) = v20;
  uint64_t v21 = (_OWORD *)((v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  char v22 = (_OWORD *)((v17 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v21 = *v22;
  *(_OWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for ButtonStyleContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  unint64_t v8 = (_WORD *)(v7 + a1);
  uint64_t v9 = (_WORD *)(v7 + a2);
  *unint64_t v8 = *v9;
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v11 = v10 + 40;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = ((unint64_t)v8 + v12 + 2) & ~v12;
  uint64_t v14 = ((unint64_t)v9 + v12 + 2) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v13, v14);
  uint64_t v15 = *(void *)(v11 + 24);
  uint64_t v16 = v15 + v13;
  uint64_t v17 = v15 + v14;
  unint64_t v18 = (v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = *(void *)v19;
  LOBYTE(v19) = *(unsigned char *)(v19 + 8);
  uint64_t v21 = *(void *)v18;
  char v22 = *(unsigned char *)(v18 + 8);
  *(void *)unint64_t v18 = v20;
  *(unsigned char *)(v18 + 8) = v19;
  outlined consume of Environment<Bool>.Content(v21, v22);
  unint64_t v23 = (v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = (v17 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v23 = *(unsigned char *)v24;
  *(void *)(v23 + 8) = *(void *)(v24 + 8);
  swift_release();
  unint64_t v25 = (v23 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = (v24 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v25 = *(unsigned char *)v26;
  *(void *)(v25 + 8) = *(void *)(v26 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ButtonStyleContent(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v11 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v7 + 84);
  }
  if (v11 <= 0x7FFFFFFE) {
    unsigned int v11 = 2147483646;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v12 = *(void *)(v7 + 64) + 23;
  if (v11 < a2)
  {
    unint64_t v13 = ((((v12 + ((v9 + v10 + 2) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v14 = a2 - v11;
    uint64_t v15 = v13 & 0xFFFFFFF8;
    if ((v13 & 0xFFFFFFF8) != 0) {
      unsigned int v16 = 2;
    }
    else {
      unsigned int v16 = v14 + 1;
    }
    if (v16 >= 0x10000) {
      unsigned int v17 = 4;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v16 < 0x100) {
      unsigned int v17 = 1;
    }
    if (v16 >= 2) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    switch(v18)
    {
      case 1:
        int v19 = *((unsigned __int8 *)a1 + v13);
        if (!v19) {
          break;
        }
        goto LABEL_24;
      case 2:
        int v19 = *(unsigned __int16 *)((char *)a1 + v13);
        if (v19) {
          goto LABEL_24;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18770F4B4);
      case 4:
        int v19 = *(int *)((char *)a1 + v13);
        if (!v19) {
          break;
        }
LABEL_24:
        int v21 = v19 - 1;
        if (v15)
        {
          int v21 = 0;
          int v22 = *a1;
        }
        else
        {
          int v22 = 0;
        }
        return v11 + (v22 | v21) + 1;
      default:
        break;
    }
  }
  if (v6 == v11) {
    return (*(uint64_t (**)(int *, uint64_t, uint64_t))(v5 + 48))(a1, v6, v4);
  }
  uint64_t v23 = ((unint64_t)a1 + v9 + v10 + 2) & ~v10;
  if (v8 == v11) {
    return (*(uint64_t (**)(uint64_t))(v7 + 48))(v23);
  }
  unint64_t v24 = *(void *)(((v12 + v23) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v24 >= 0xFFFFFFFF) {
    LODWORD(v24) = -1;
  }
  int v25 = v24 - 1;
  if (v25 < 0) {
    int v25 = -1;
  }
  return (v25 + 1);
}

void storeEnumTagSinglePayload for ButtonStyleContent(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(void *)(v6 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  if (v9 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v8 + 84);
  }
  if (v12 <= 0x7FFFFFFE) {
    unsigned int v12 = 2147483646;
  }
  uint64_t v13 = *(void *)(v8 + 64) + 23;
  unint64_t v14 = ((((v13 + ((v10 + v11 + 2) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v12 >= a3)
  {
    int v18 = 0;
    int v19 = a2 - v12;
    if (a2 <= v12)
    {
LABEL_19:
      switch(v18)
      {
        case 1:
          a1[v14] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 2:
          *(_WORD *)&a1[v14] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 3:
          goto LABEL_48;
        case 4:
          *(_DWORD *)&a1[v14] = 0;
          goto LABEL_31;
        default:
LABEL_31:
          if (a2)
          {
LABEL_32:
            if (v7 == v12)
            {
              int v22 = *(void (**)(void))(v6 + 56);
              v22();
            }
            else
            {
              unint64_t v23 = (unint64_t)&a1[v10 + 2 + v11] & ~v11;
              if (v9 == v12)
              {
                unint64_t v24 = *(void (**)(unint64_t))(v8 + 56);
                v24(v23);
              }
              else
              {
                int v25 = (void *)((v13 + v23) & 0xFFFFFFFFFFFFFFF8);
                if (a2 > 0x7FFFFFFE)
                {
                  void *v25 = a2 - 0x7FFFFFFF;
                  v25[1] = 0;
                }
                else
                {
                  v25[1] = a2;
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v15 = a3 - v12;
    if (((((v13 + ((v10 + v11 + 2) & ~v11)) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v16 = v15 + 1;
    }
    else {
      unsigned int v16 = 2;
    }
    if (v16 >= 0x10000) {
      int v17 = 4;
    }
    else {
      int v17 = 2;
    }
    if (v16 < 0x100) {
      int v17 = 1;
    }
    if (v16 >= 2) {
      int v18 = v17;
    }
    else {
      int v18 = 0;
    }
    int v19 = a2 - v12;
    if (a2 <= v12) {
      goto LABEL_19;
    }
  }
  if (((((v13 + ((v10 + v11 + 2) & ~v11)) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v20 = v19;
  }
  else {
    int v20 = 1;
  }
  if (((((v13 + ((v10 + v11 + 2) & ~v11)) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v21 = ~v12 + a2;
    bzero(a1, ((((v13 + ((v10 + v11 + 2) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
    *(_DWORD *)a1 = v21;
  }
  switch(v18)
  {
    case 1:
      a1[v14] = v20;
      break;
    case 2:
      *(_WORD *)&a1[v14] = v20;
      break;
    case 3:
LABEL_48:
      __break(1u);
      JUMPOUT(0x18770F778);
    case 4:
      *(_DWORD *)&a1[v14] = v20;
      break;
    default:
      return;
  }
}

void *type metadata accessor for _UIKitButtonAdaptorContent_Options()
{
  return &unk_1ED460B30;
}

uint64_t sub_18770F7B0()
{
  return swift_getWitnessTable();
}

uint64_t sub_18770F840()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for ButtonStyleContentResolvedBodyProvider.ResolvedBody : View in ButtonStyleContent<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for StyleableView.DefaultStyleModifier : StyleModifier in ResolvedUIKitButtonBody()
{
  return lazy protocol witness table accessor for type UIKitSystemButtonConfigurationModifier and conformance UIKitSystemButtonConfigurationModifier(&lazy protocol witness table cache variable for type UIKitSystemButtonConfigurationModifier and conformance UIKitSystemButtonConfigurationModifier, (void (*)(uint64_t))type metadata accessor for UIKitSystemButtonConfigurationModifier);
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedUIKitButtonBody()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool?>, (unint64_t *)&lazy cache variable for type metadata for Bool?, MEMORY[0x1E4FBB390], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool?> and conformance _EnvironmentKeyWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t outlined init with copy of UIButton.Configuration?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for WeakBox<UIButton>?(0, &lazy cache variable for type metadata for UIButton.Configuration?, MEMORY[0x1E4FB1290], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of UIButton.Configuration?(uint64_t a1)
{
  type metadata accessor for WeakBox<UIButton>?(0, &lazy cache variable for type metadata for UIButton.Configuration?, MEMORY[0x1E4FB1290], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_18770FE64()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in InsetListLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t SidebarLabelStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  ScaledMetric.init(wrappedValue:)();
  uint64_t v3 = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  *(unsigned char *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v3;
  *(_WORD *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = result;
  *(unsigned char *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = KeyPath;
  *(_WORD *)(a1 + 88) = 0;
  return result;
}

uint64_t InsetListLabelStyle.StyleView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  char v4 = *(unsigned char *)(v1 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v1, v4);
  char v5 = specialized Environment.wrappedValue.getter(v3, v4);
  outlined consume of Environment<Bool>.Content(v3, v4);
  if (v5)
  {
    uint64_t KeyPath = swift_getKeyPath();
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    ScaledMetric.init(wrappedValue:)();
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    uint64_t v10 = v18;
    uint64_t v11 = v19;
    uint64_t v12 = v20;
    uint64_t v13 = swift_getKeyPath();
    uint64_t result = swift_getKeyPath();
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t result = 0;
    uint64_t KeyPath = 0;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = v13;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = result;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = KeyPath;
  *(_WORD *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 90) = (v5 & 1) == 0;
  return result;
}

BOOL protocol witness for static View._viewListCount(inputs:) in conformance InsetListLabelStyle.StyleView()
{
  type metadata accessor for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>();
  type metadata accessor for ScaledMetric<CGFloat>(0, &lazy cache variable for type metadata for LabelStyleWritingModifier<ListLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListLabelStyle and conformance ListLabelStyle, (uint64_t)&type metadata for ListLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
  lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)> and conformance TupleView<A>((unint64_t *)&lazy protocol witness table cache variable for type Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance Label<A, B>, (void (*)(uint64_t))type metadata accessor for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>);
  lazy protocol witness table accessor for type LabelStyleWritingModifier<ListLabelStyle> and conformance LabelStyleWritingModifier<A>();
  uint64_t v0 = static ModifiedContent<>._viewListCount(inputs:)();
  return (v1 & 1) == 0 && v0 == 1;
}

uint64_t protocol witness for LabelStyle.makeBody(configuration:) in conformance InsetListLabelStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in SidebarLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t SidebarRow_iOS.iconShapeStyle.getter()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  char v4 = *(unsigned char *)(v0 + 24);
  uint64_t v16 = *(void *)(v0 + 48);
  unsigned int v15 = *(unsigned __int8 *)(v0 + 56);
  char v17 = *(unsigned char *)(v0 + 57);
  uint64_t v5 = *(void *)(v0 + 64);
  char v6 = *(unsigned char *)(v0 + 72);
  uint64_t v7 = *(void *)(v0 + 80);
  uint64_t v8 = *(unsigned __int8 *)(v0 + 88);
  int v9 = *(unsigned __int8 *)(v0 + 89);
  outlined copy of Environment<Bool>.Content(v5, v6);
  specialized Environment.wrappedValue.getter(v5, v6, &v18);
  outlined consume of Environment<Bool>.Content(v5, v6);
  char v21 = v18;
  static BackgroundProminence.increased.getter();
  char v19 = v20;
  if (static BackgroundProminence.== infix(_:_:)())
  {
    LODWORD(v18) = 0;
    return AnyShapeStyle.init<A>(_:)();
  }
  outlined copy of Environment<Bool>.Content(v1, v2);
  outlined copy of Environment<Bool>.Content(v3, v4);
  outlined copy of Environment<CGFloat?>.Content(v16, v15, v17);
  outlined copy of Environment<Bool>.Content(v5, v6);
  outlined copy of Environment<ListItemTint?>.Content(v7, v8, v9);
  outlined copy of Environment<ListItemTint?>.Content(v7, v8, v9);
  specialized Environment.wrappedValue.getter(v7, v8 | (v9 << 8), (uint64_t)&v18);
  outlined consume of Environment<ListItemTint?>.Content(v7, v8, v9);
  outlined consume of Environment<Bool>.Content(v1, v2);
  outlined consume of Environment<Bool>.Content(v3, v4);
  outlined consume of Environment<CGFloat?>.Content(v16, v15, v17);
  outlined consume of Environment<Bool>.Content(v5, v6);
  outlined consume of Environment<ListItemTint?>.Content(v7, v8, v9);
  uint64_t v11 = v18;
  if (v18 != 1)
  {
    uint64_t v13 = static Color.secondary.getter();
    if (v11)
    {
      uint64_t v14 = v11;
    }
    else
    {
      swift_retain();
      uint64_t v14 = v13;
    }
    swift_retain();
    swift_release();
    uint64_t v18 = v14;
    uint64_t v10 = AnyShapeStyle.init<A>(_:)();
    outlined consume of Transaction?(v11);
    return v10;
  }

  return AnyShapeStyle.init<A>(_:)();
}

uint64_t closure #1 in SidebarRow_iOS.body.getter@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)&v10[16] = a1[2];
  uint64_t v4 = SidebarRow_iOS.iconShapeStyle.getter();
  uint64_t KeyPath = swift_getKeyPath();
  long long v9 = *a1;
  *(_OWORD *)uint64_t v10 = a1[1];
  *(_OWORD *)&v10[9] = *(long long *)((char *)a1 + 25);
  type metadata accessor for ScaledMetric<CGFloat>(0, (unint64_t *)&lazy cache variable for type metadata for ScaledMetric<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x1E4FBC958], MEMORY[0x1E4F3F620]);
  ScaledMetric.wrappedValue.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  type metadata accessor for InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>();
  type metadata accessor for InterfaceIdiomPredicate<VisionInterfaceIdiom>(0, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, (uint64_t)&type metadata for LabelStyleConfiguration.Title, (uint64_t)&type metadata for _AlignmentWritingModifier, MEMORY[0x1E4F3FBA0]);
  lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>> and conformance InvertedViewInputPredicate<A>, (void (*)(uint64_t))type metadata accessor for InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>);
  lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>();
  View.staticIf<A, B>(_:trueModifier:)();
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = KeyPath;
  *(unsigned char *)(a2 + 16) = 2;
  *(void *)(a2 + 24) = v9;
  *(unsigned char *)(a2 + 32) = BYTE8(v9);
  *(void *)(a2 + 40) = *(void *)v10;
  *(unsigned char *)(a2 + 48) = v10[8];
  *(void *)(a2 + 56) = *(void *)&v10[16];
  *(void *)(a2 + 64) = *(void *)&v10[24];
  *(void *)(a2 + 72) = v7;
  *(_OWORD *)(a2 + 80) = v8;
  swift_retain();
  return swift_release();
}

uint64_t closure #1 in closure #1 in SidebarRow_iOS.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static HorizontalAlignment.listRowSeparatorLeading.getter();
  *a1 = result;
  a1[1] = (uint64_t)closure #1 in closure #1 in closure #1 in SidebarRow_iOS.body.getter;
  a1[2] = 0;
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in SidebarRow_iOS.body.getter()
{
  uint64_t v0 = static HorizontalAlignment.leading.getter();
  return MEMORY[0x18C10E990](v0);
}

__n128 protocol witness for View.body.getter in conformance SidebarRow_iOS@<Q0>(uint64_t a1@<X8>)
{
  long long v3 = v1[3];
  v32[2] = v1[2];
  long long v33 = v3;
  v34[0] = v1[4];
  *(_OWORD *)((char *)v34 + 10) = *(long long *)((char *)v1 + 74);
  long long v4 = v1[1];
  v32[0] = *v1;
  v32[1] = v4;
  uint64_t v5 = static VerticalAlignment.firstTextLineCenter.getter();
  uint64_t v6 = v33;
  uint64_t v7 = BYTE8(v33);
  int v8 = BYTE9(v33);
  outlined retain of SidebarRow_iOS((uint64_t)v32);
  outlined copy of Environment<CGFloat?>.Content(v6, v7, v8);
  uint64_t v9 = specialized Environment.wrappedValue.getter(v6, v7 | (v8 << 8));
  char v11 = v10;
  outlined consume of Environment<CGFloat?>.Content(v6, v7, v8);
  outlined release of SidebarRow_iOS((uint64_t)v32);
  if (v11) {
    uint64_t v12 = 0x4024000000000000;
  }
  else {
    uint64_t v12 = v9;
  }
  closure #1 in SidebarRow_iOS.body.getter(v32, (uint64_t)v23);
  uint64_t v13 = v23[0];
  uint64_t v14 = v23[1];
  char v15 = v24;
  uint64_t v16 = v25;
  char v17 = v26;
  uint64_t v18 = v27;
  char v19 = v28;
  uint64_t v20 = v30;
  __n128 result = v31;
  long long v22 = v29;
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v12;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v13;
  *(void *)(a1 + 32) = v14;
  *(unsigned char *)(a1 + 40) = v15;
  *(void *)(a1 + 48) = v16;
  *(unsigned char *)(a1 + 56) = v17;
  *(void *)(a1 + 64) = v18;
  *(unsigned char *)(a1 + 72) = v19;
  *(_OWORD *)(a1 + 80) = v22;
  *(void *)(a1 + 96) = v20;
  *(__n128 *)(a1 + 104) = result;
  return result;
}

uint64_t destroy for SidebarRow_iOS(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
  outlined consume of Environment<CGFloat?>.Content(*(void *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(unsigned char *)(a1 + 57));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 64), *(unsigned char *)(a1 + 72));
  uint64_t v2 = *(void *)(a1 + 80);
  char v3 = *(unsigned char *)(a1 + 89);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 88);

  return outlined consume of Environment<ListItemTint?>.Content(v2, v4, v3);
}

uint64_t initializeWithCopy for SidebarRow_iOS(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  char v9 = *(unsigned char *)(a2 + 57);
  unsigned __int8 v10 = *(unsigned char *)(a2 + 56);
  outlined copy of Environment<CGFloat?>.Content(v8, v10, v9);
  *(void *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 56) = v10;
  *(unsigned char *)(a1 + 57) = v9;
  uint64_t v11 = *(void *)(a2 + 64);
  char v12 = *(unsigned char *)(a2 + 72);
  outlined copy of Environment<Bool>.Content(v11, v12);
  *(void *)(a1 + 64) = v11;
  *(unsigned char *)(a1 + 72) = v12;
  uint64_t v13 = *(void *)(a2 + 80);
  char v14 = *(unsigned char *)(a2 + 89);
  uint64_t v15 = *(unsigned __int8 *)(a2 + 88);
  outlined copy of Environment<ListItemTint?>.Content(v13, v15, v14);
  *(void *)(a1 + 80) = v13;
  *(unsigned char *)(a1 + 88) = v15;
  *(unsigned char *)(a1 + 89) = v14;
  return a1;
}

uint64_t assignWithCopy for SidebarRow_iOS(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  char v9 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v8, v9);
  uint64_t v10 = *(void *)(a1 + 16);
  char v11 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 24) = v9;
  outlined consume of Environment<Bool>.Content(v10, v11);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v12 = *(void *)(a2 + 48);
  char v13 = *(unsigned char *)(a2 + 57);
  unsigned __int8 v14 = *(unsigned char *)(a2 + 56);
  outlined copy of Environment<CGFloat?>.Content(v12, v14, v13);
  uint64_t v15 = *(void *)(a1 + 48);
  char v16 = *(unsigned char *)(a1 + 57);
  *(void *)(a1 + 48) = v12;
  uint64_t v17 = *(unsigned __int8 *)(a1 + 56);
  *(unsigned char *)(a1 + 56) = v14;
  *(unsigned char *)(a1 + 57) = v13;
  outlined consume of Environment<CGFloat?>.Content(v15, v17, v16);
  uint64_t v18 = *(void *)(a2 + 64);
  char v19 = *(unsigned char *)(a2 + 72);
  outlined copy of Environment<Bool>.Content(v18, v19);
  uint64_t v20 = *(void *)(a1 + 64);
  char v21 = *(unsigned char *)(a1 + 72);
  *(void *)(a1 + 64) = v18;
  *(unsigned char *)(a1 + 72) = v19;
  outlined consume of Environment<Bool>.Content(v20, v21);
  uint64_t v22 = *(void *)(a2 + 80);
  char v23 = *(unsigned char *)(a2 + 89);
  uint64_t v24 = *(unsigned __int8 *)(a2 + 88);
  outlined copy of Environment<ListItemTint?>.Content(v22, v24, v23);
  uint64_t v25 = *(void *)(a1 + 80);
  char v26 = *(unsigned char *)(a1 + 89);
  *(void *)(a1 + 80) = v22;
  uint64_t v27 = *(unsigned __int8 *)(a1 + 88);
  *(unsigned char *)(a1 + 88) = v24;
  *(unsigned char *)(a1 + 89) = v23;
  outlined consume of Environment<ListItemTint?>.Content(v25, v27, v26);
  return a1;
}

uint64_t assignWithTake for SidebarRow_iOS(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  char v8 = *((unsigned char *)a2 + 24);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = a2[2];
  *(unsigned char *)(a1 + 24) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  *(void *)(a1 + 32) = a2[4];
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  char v11 = *((unsigned char *)a2 + 56);
  char v12 = *((unsigned char *)a2 + 57);
  uint64_t v13 = *(void *)(a1 + 48);
  char v14 = *(unsigned char *)(a1 + 57);
  *(void *)(a1 + 48) = a2[6];
  uint64_t v15 = *(unsigned __int8 *)(a1 + 56);
  *(unsigned char *)(a1 + 56) = v11;
  *(unsigned char *)(a1 + 57) = v12;
  outlined consume of Environment<CGFloat?>.Content(v13, v15, v14);
  char v16 = *((unsigned char *)a2 + 72);
  uint64_t v17 = *(void *)(a1 + 64);
  char v18 = *(unsigned char *)(a1 + 72);
  *(void *)(a1 + 64) = a2[8];
  *(unsigned char *)(a1 + 72) = v16;
  outlined consume of Environment<Bool>.Content(v17, v18);
  char v19 = *((unsigned char *)a2 + 88);
  char v20 = *((unsigned char *)a2 + 89);
  uint64_t v21 = *(void *)(a1 + 80);
  char v22 = *(unsigned char *)(a1 + 89);
  *(void *)(a1 + 80) = a2[10];
  uint64_t v23 = *(unsigned __int8 *)(a1 + 88);
  *(unsigned char *)(a1 + 88) = v19;
  *(unsigned char *)(a1 + 89) = v20;
  outlined consume of Environment<ListItemTint?>.Content(v21, v23, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for SidebarRow_iOS(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 90)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SidebarRow_iOS(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 88) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 90) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 90) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

void *type metadata accessor for SidebarRow_iOS()
{
  return &unk_1ED4182A0;
}

void *type metadata accessor for InsetListLabelStyle.StyleView()
{
  return &unk_1ED42C378;
}

unint64_t lazy protocol witness table accessor for type SidebarRow_iOS and conformance SidebarRow_iOS()
{
  unint64_t result = lazy protocol witness table cache variable for type SidebarRow_iOS and conformance SidebarRow_iOS;
  if (!lazy protocol witness table cache variable for type SidebarRow_iOS and conformance SidebarRow_iOS)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SidebarRow_iOS and conformance SidebarRow_iOS);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InsetListLabelStyle.StyleView and conformance InsetListLabelStyle.StyleView()
{
  unint64_t result = lazy protocol witness table cache variable for type InsetListLabelStyle.StyleView and conformance InsetListLabelStyle.StyleView;
  if (!lazy protocol witness table cache variable for type InsetListLabelStyle.StyleView and conformance InsetListLabelStyle.StyleView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InsetListLabelStyle.StyleView and conformance InsetListLabelStyle.StyleView);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in InsetListLabelStyle.StyleView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in SidebarRow_iOS()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined retain of SidebarRow_iOS(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = *(unsigned char *)(a1 + 57);
  uint64_t v6 = *(void *)(a1 + 64);
  char v7 = *(unsigned char *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 80);
  char v12 = *(unsigned char *)(a1 + 89);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 88);
  outlined copy of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  outlined copy of Environment<Bool>.Content(v2, v3);
  outlined copy of Environment<CGFloat?>.Content(v4, v9, v5);
  outlined copy of Environment<Bool>.Content(v6, v7);
  outlined copy of Environment<ListItemTint?>.Content(v8, v10, v12);
  return a1;
}

uint64_t outlined release of SidebarRow_iOS(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = *(unsigned char *)(a1 + 57);
  uint64_t v6 = *(void *)(a1 + 64);
  char v7 = *(unsigned char *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 80);
  char v12 = *(unsigned char *)(a1 + 89);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 88);
  outlined consume of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(v2, v3);
  outlined consume of Environment<CGFloat?>.Content(v4, v9, v5);
  outlined consume of Environment<Bool>.Content(v6, v7);
  outlined consume of Environment<ListItemTint?>.Content(v8, v10, v12);
  return a1;
}

uint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)> and conformance TupleView<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for InterfaceIdiomPredicate<VisionInterfaceIdiom>(255, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, (uint64_t)&type metadata for LabelStyleConfiguration.Title, (uint64_t)&type metadata for _AlignmentWritingModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabelStyleWritingModifier<ListLabelStyle> and conformance LabelStyleWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LabelStyleWritingModifier<ListLabelStyle> and conformance LabelStyleWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type LabelStyleWritingModifier<ListLabelStyle> and conformance LabelStyleWritingModifier<A>)
  {
    type metadata accessor for ScaledMetric<CGFloat>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<ListLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListLabelStyle and conformance ListLabelStyle, (uint64_t)&type metadata for ListLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<ListLabelStyle> and conformance LabelStyleWritingModifier<A>);
  }
  return result;
}

uint64_t sub_187711130()
{
  return lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)>> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)>>);
}

void type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)>>()
{
  if (!lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)>();
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)> and conformance TupleView<A>, (void (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)>);
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)>>);
    }
  }
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)>()
{
  if (!lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)>)
  {
    type metadata accessor for (ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)();
    unint64_t v0 = type metadata accessor for TupleView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)>);
    }
  }
}

void type metadata accessor for (ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>))
  {
    type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>();
    type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>));
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>)
  {
    type metadata accessor for ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>);
    }
  }
}

void type metadata accessor for ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>)
  {
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>);
    }
  }
}

void type metadata accessor for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>()
{
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>)
  {
    type metadata accessor for InterfaceIdiomPredicate<VisionInterfaceIdiom>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<VisionInterfaceIdiom>, MEMORY[0x1E4F406D0], MEMORY[0x1E4F406C8], MEMORY[0x1E4F40C60]);
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>();
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<VisionInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>);
    }
  }
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>)
  {
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>);
    }
  }
}

void type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>()
{
  if (!lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)
  {
    type metadata accessor for InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>();
    type metadata accessor for InterfaceIdiomPredicate<VisionInterfaceIdiom>(255, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, (uint64_t)&type metadata for LabelStyleConfiguration.Title, (uint64_t)&type metadata for _AlignmentWritingModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>> and conformance InvertedViewInputPredicate<A>, (void (*)(uint64_t))type metadata accessor for InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<SidebarRow_iOS, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<SidebarRow_iOS, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<SidebarRow_iOS, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<SidebarRow_iOS, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>>>();
    lazy protocol witness table accessor for type SidebarRow_iOS and conformance SidebarRow_iOS();
    lazy protocol witness table accessor for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<SidebarRow_iOS, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<SidebarRow_iOS, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>>>()
{
  if (!lazy cache variable for type metadata for _ConditionalContent<SidebarRow_iOS, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>>>)
  {
    type metadata accessor for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>>();
    unint64_t v0 = type metadata accessor for _ConditionalContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<SidebarRow_iOS, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>>)
  {
    type metadata accessor for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>();
    type metadata accessor for ScaledMetric<CGFloat>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<ListLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListLabelStyle and conformance ListLabelStyle, (uint64_t)&type metadata for ListLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>>();
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)> and conformance TupleView<A>((unint64_t *)&lazy protocol witness table cache variable for type Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance Label<A, B>, (void (*)(uint64_t))type metadata accessor for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>);
    lazy protocol witness table accessor for type LabelStyleWritingModifier<ListLabelStyle> and conformance LabelStyleWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t View.searchSelection(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SearchSelectionModifier(0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Binding<TextSelection?>(a1, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
  uint64_t v9 = &v8[*(int *)(v6 + 20)];
  *(_DWORD *)uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  MEMORY[0x18C113660](v8, a2, v6, a3);
  return outlined destroy of SearchSelectionModifier((uint64_t)v8, type metadata accessor for SearchSelectionModifier);
}

uint64_t type metadata accessor for SearchSelectionModifier(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for SearchSelectionModifier);
}

uint64_t sub_1877118CC()
{
  return swift_getWitnessTable();
}

uint64_t *initializeBufferWithCopyOfBuffer for SearchSelectionModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    uint64_t v7 = a1;
    a1[1] = a2[1];
    type metadata accessor for Binding<TextSelection?>(0);
    uint64_t v9 = *(int *)(v8 + 32);
    __dst = (char *)v7 + v9;
    uint64_t v10 = (char *)a2 + v9;
    uint64_t v11 = type metadata accessor for TextSelection(0);
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_retain();
    swift_retain();
    if (v13(v10, 1, v11))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(__dst, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v15 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for RangeSet<String.Index>();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(__dst, v10, v16);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(__dst, v10, *(void *)(*(void *)(v15 - 8) + 64));
      }
      __dst[*(int *)(v11 + 20)] = v10[*(int *)(v11 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
    }
    uint64_t v17 = *(int *)(a3 + 20);
    char v18 = (char *)v7 + v17;
    char v19 = (char *)a2 + v17;
    *(_DWORD *)char v18 = *(_DWORD *)v19;
    *((void *)v18 + 1) = *((void *)v19 + 1);
  }
  swift_retain();
  return v7;
}

void type metadata accessor for RangeSet<String.Index>()
{
  if (!lazy cache variable for type metadata for RangeSet<String.Index>)
  {
    unint64_t v0 = type metadata accessor for RangeSet();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>);
    }
  }
}

uint64_t destroy for SearchSelectionModifier(uint64_t a1)
{
  swift_release();
  swift_release();
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v3 = a1 + *(int *)(v2 + 32);
  uint64_t v4 = type metadata accessor for TextSelection(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4))
  {
    type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for RangeSet<String.Index>();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v3, v5);
    }
  }

  return swift_release();
}

void *initializeWithCopy for SearchSelectionModifier(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for TextSelection(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_retain();
  swift_retain();
  if (v12(v9, 1, v10))
  {
    type metadata accessor for TextSelection?(0);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v14 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for RangeSet<String.Index>();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v8, v9, v15);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    }
    v8[*(int *)(v10 + 20)] = v9[*(int *)(v10 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v16 = *(int *)(a3 + 20);
  uint64_t v17 = (char *)a1 + v16;
  char v18 = (char *)a2 + v16;
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *((void *)v17 + 1) = *((void *)v18 + 1);
  swift_retain();
  return a1;
}

void *assignWithCopy for SearchSelectionModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for TextSelection(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      uint64_t v15 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for RangeSet<String.Index>();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v8, v9, v16);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
      }
      v8[*(int *)(v10 + 20)] = v9[*(int *)(v10 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_15;
    }
LABEL_7:
    type metadata accessor for TextSelection?(0);
    memcpy(v8, v9, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_15;
  }
  if (v14)
  {
    outlined destroy of SearchSelectionModifier((uint64_t)v8, type metadata accessor for TextSelection);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of SearchSelectionModifier((uint64_t)v8, type metadata accessor for TextSelection.Indices);
    uint64_t v18 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for RangeSet<String.Index>();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v8, v9, v19);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v18 - 8) + 64));
    }
  }
  v8[*(int *)(v10 + 20)] = v9[*(int *)(v10 + 20)];
LABEL_15:
  uint64_t v20 = *(int *)(a3 + 20);
  uint64_t v21 = (char *)a1 + v20;
  char v22 = (char *)a2 + v20;
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  *((void *)v21 + 1) = *((void *)v22 + 1);
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for SearchSelectionModifier(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v8 = *(int *)(v7 + 32);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for TextSelection(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    type metadata accessor for TextSelection?(0);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v14 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for RangeSet<String.Index>();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v9, v10, v15);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    v9[*(int *)(v11 + 20)] = v10[*(int *)(v11 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *assignWithTake for SearchSelectionModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for TextSelection(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      uint64_t v15 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for RangeSet<String.Index>();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v8, v9, v16);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
      }
      v8[*(int *)(v10 + 20)] = v9[*(int *)(v10 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_15;
    }
LABEL_7:
    type metadata accessor for TextSelection?(0);
    memcpy(v8, v9, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_15;
  }
  if (v14)
  {
    outlined destroy of SearchSelectionModifier((uint64_t)v8, type metadata accessor for TextSelection);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of SearchSelectionModifier((uint64_t)v8, type metadata accessor for TextSelection.Indices);
    uint64_t v18 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for RangeSet<String.Index>();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v8, v9, v19);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v18 - 8) + 64));
    }
  }
  v8[*(int *)(v10 + 20)] = v9[*(int *)(v10 + 20)];
LABEL_15:
  uint64_t v20 = *(int *)(a3 + 20);
  uint64_t v21 = (char *)a1 + v20;
  char v22 = (char *)a2 + v20;
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  *((void *)v21 + 1) = *((void *)v22 + 1);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchSelectionModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18771269C);
}

uint64_t sub_18771269C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for SearchSelectionModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187712780);
}

void sub_187712780(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
}

void type metadata completion function for SearchSelectionModifier()
{
  type metadata accessor for Binding<TextSelection?>(319);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SearchSelectionModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t SearchSelectionModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for SearchEnvironmentTransformModifier<SearchSelectionModifier.Transform>();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SearchSelectionModifier.Transform(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (int *)(v1 + *(int *)(type metadata accessor for SearchSelectionModifier(0) + 20));
  int v10 = *v9;
  uint64_t v11 = *((void *)v9 + 1);
  LODWORD(v13) = v10;
  uint64_t v14 = v11;
  type metadata accessor for State<VersionSeed>();
  State.projectedValue.getter();
  uint64_t v13 = v16;
  uint64_t v14 = v17;
  int v15 = v18;
  type metadata accessor for Binding<TextSelection?>(0);
  Binding.zip<A>(with:)();
  swift_release();
  swift_release();
  outlined init with copy of Binding<TextSelection?>((uint64_t)v8, (uint64_t)v5, type metadata accessor for SearchSelectionModifier.Transform);
  outlined init with copy of Binding<TextSelection?>((uint64_t)v5, a1, (uint64_t (*)(void))type metadata accessor for SearchEnvironmentTransformModifier<SearchSelectionModifier.Transform>);
  outlined destroy of SearchSelectionModifier((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SearchEnvironmentTransformModifier<SearchSelectionModifier.Transform>);
  return outlined destroy of SearchSelectionModifier((uint64_t)v8, type metadata accessor for SearchSelectionModifier.Transform);
}

uint64_t protocol witness for SearchEnvironmentTransform.update(properties:) in conformance SearchSelectionModifier.Transform(uint64_t a1)
{
  uint64_t v2 = a1 + *(int *)(type metadata accessor for SearchEnvironmentProperties(0) + 24);
  outlined destroy of SearchSelectionModifier(v2, (uint64_t (*)(void))type metadata accessor for Binding<(TextSelection?, VersionSeed)>?);
  outlined init with copy of Binding<TextSelection?>(v1, v2, (uint64_t (*)(void))type metadata accessor for Binding<(TextSelection?, VersionSeed)>);
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(v2, 0, 1, v3);
}

void type metadata accessor for SearchEnvironmentTransformModifier<SearchSelectionModifier.Transform>()
{
  if (!lazy cache variable for type metadata for SearchEnvironmentTransformModifier<SearchSelectionModifier.Transform>)
  {
    type metadata accessor for SearchSelectionModifier.Transform(255);
    unint64_t v0 = type metadata accessor for SearchEnvironmentTransformModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SearchEnvironmentTransformModifier<SearchSelectionModifier.Transform>);
    }
  }
}

uint64_t type metadata accessor for SearchSelectionModifier.Transform(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for SearchSelectionModifier.Transform);
}

void type metadata accessor for State<VersionSeed>()
{
  if (!lazy cache variable for type metadata for State<VersionSeed>)
  {
    unint64_t v0 = type metadata accessor for State();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for State<VersionSeed>);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for SearchSelectionModifier.Transform(uint64_t *a1, uint64_t *a2)
{
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  uint64_t v6 = *a2;
  *a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    a1[1] = a2[1];
    uint64_t v7 = *(int *)(v4 + 32);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for TextSelection(0);
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    swift_retain();
    swift_retain();
    if (v12(v9, 1, v10))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      uint64_t v14 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for RangeSet<String.Index>();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v8, v9, v15);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
      }
      v8[*(int *)(v10 + 20)] = v9[*(int *)(v10 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    type metadata accessor for (TextSelection?, VersionSeed)();
    *(_DWORD *)&v8[*(int *)(v16 + 48)] = *(_DWORD *)&v9[*(int *)(v16 + 48)];
  }
  return a1;
}

void type metadata accessor for Binding<(TextSelection?, VersionSeed)>(uint64_t a1)
{
}

void type metadata accessor for (TextSelection?, VersionSeed)()
{
  if (!lazy cache variable for type metadata for (TextSelection?, VersionSeed))
  {
    type metadata accessor for TextSelection?(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (TextSelection?, VersionSeed));
    }
  }
}

uint64_t destroy for SearchSelectionModifier.Transform(uint64_t a1)
{
  swift_release();
  swift_release();
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
  uint64_t v3 = a1 + *(int *)(v2 + 32);
  uint64_t v4 = type metadata accessor for TextSelection(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4);
  if (!result)
  {
    type metadata accessor for TextSelection.Indices(0);
    uint64_t result = swift_getEnumCaseMultiPayload();
    if (result == 1)
    {
      type metadata accessor for RangeSet<String.Index>();
      uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
      return v7(v3, v6);
    }
  }
  return result;
}

void *initializeWithCopy for SearchSelectionModifier.Transform(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
  uint64_t v6 = *(int *)(v5 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for TextSelection(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_retain();
  swift_retain();
  if (v11(v8, 1, v9))
  {
    type metadata accessor for TextSelection?(0);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for RangeSet<String.Index>();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v7, v8, v14);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    }
    v7[*(int *)(v9 + 20)] = v8[*(int *)(v9 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  type metadata accessor for (TextSelection?, VersionSeed)();
  *(_DWORD *)&v7[*(int *)(v15 + 48)] = *(_DWORD *)&v8[*(int *)(v15 + 48)];
  return a1;
}

void *assignWithCopy for SearchSelectionModifier.Transform(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
  uint64_t v5 = *(int *)(v4 + 32);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for TextSelection(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  int v11 = v10(v6, 1, v8);
  int v12 = v10(v7, 1, v8);
  if (v11)
  {
    if (!v12)
    {
      uint64_t v13 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for RangeSet<String.Index>();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v6, v7, v14);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v6, v7, *(void *)(*(void *)(v13 - 8) + 64));
      }
      v6[*(int *)(v8 + 20)] = v7[*(int *)(v8 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
      goto LABEL_15;
    }
LABEL_7:
    type metadata accessor for TextSelection?(0);
    memcpy(v6, v7, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_15;
  }
  if (v12)
  {
    outlined destroy of SearchSelectionModifier((uint64_t)v6, type metadata accessor for TextSelection);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of SearchSelectionModifier((uint64_t)v6, type metadata accessor for TextSelection.Indices);
    uint64_t v16 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for RangeSet<String.Index>();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v6, v7, v17);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v6, v7, *(void *)(*(void *)(v16 - 8) + 64));
    }
  }
  v6[*(int *)(v8 + 20)] = v7[*(int *)(v8 + 20)];
LABEL_15:
  type metadata accessor for (TextSelection?, VersionSeed)();
  *(_DWORD *)&v6[*(int *)(v18 + 48)] = *(_DWORD *)&v7[*(int *)(v18 + 48)];
  return a1;
}

void *initializeWithTake for SearchSelectionModifier.Transform(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
  uint64_t v6 = *(int *)(v5 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for TextSelection(0);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    type metadata accessor for TextSelection?(0);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v12 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for RangeSet<String.Index>();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v7, v8, v13);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
    }
    v7[*(int *)(v9 + 20)] = v8[*(int *)(v9 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  type metadata accessor for (TextSelection?, VersionSeed)();
  *(_DWORD *)&v7[*(int *)(v14 + 48)] = *(_DWORD *)&v8[*(int *)(v14 + 48)];
  return a1;
}

void *assignWithTake for SearchSelectionModifier.Transform(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
  uint64_t v5 = *(int *)(v4 + 32);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for TextSelection(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  int v11 = v10(v6, 1, v8);
  int v12 = v10(v7, 1, v8);
  if (v11)
  {
    if (!v12)
    {
      uint64_t v13 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for RangeSet<String.Index>();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v6, v7, v14);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v6, v7, *(void *)(*(void *)(v13 - 8) + 64));
      }
      v6[*(int *)(v8 + 20)] = v7[*(int *)(v8 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
      goto LABEL_15;
    }
LABEL_7:
    type metadata accessor for TextSelection?(0);
    memcpy(v6, v7, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_15;
  }
  if (v12)
  {
    outlined destroy of SearchSelectionModifier((uint64_t)v6, type metadata accessor for TextSelection);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of SearchSelectionModifier((uint64_t)v6, type metadata accessor for TextSelection.Indices);
    uint64_t v16 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for RangeSet<String.Index>();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v6, v7, v17);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v6, v7, *(void *)(*(void *)(v16 - 8) + 64));
    }
  }
  v6[*(int *)(v8 + 20)] = v7[*(int *)(v8 + 20)];
LABEL_15:
  type metadata accessor for (TextSelection?, VersionSeed)();
  *(_DWORD *)&v6[*(int *)(v18 + 48)] = *(_DWORD *)&v7[*(int *)(v18 + 48)];
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchSelectionModifier.Transform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187713934);
}

uint64_t sub_187713934(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for SearchSelectionModifier.Transform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1877139B4);
}

uint64_t sub_1877139B4(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

void type metadata completion function for SearchSelectionModifier.Transform()
{
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>(319);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<SearchSelectionModifier>, SearchEnvironmentTransformModifier<SearchSelectionModifier.Transform>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SearchSelectionModifier>, SearchEnvironmentTransformModifier<SearchSelectionModifier.Transform>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SearchSelectionModifier>, SearchEnvironmentTransformModifier<SearchSelectionModifier.Transform>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<SearchSelectionModifier>, SearchEnvironmentTransformModifier<SearchSelectionModifier.Transform>>();
    lazy protocol witness table accessor for type SearchSelectionModifier and conformance SearchSelectionModifier(&lazy protocol witness table cache variable for type _ViewModifier_Content<SearchSelectionModifier> and conformance _ViewModifier_Content<A>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<SearchSelectionModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SearchSelectionModifier>, SearchEnvironmentTransformModifier<SearchSelectionModifier.Transform>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<SearchSelectionModifier>, SearchEnvironmentTransformModifier<SearchSelectionModifier.Transform>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<SearchSelectionModifier>, SearchEnvironmentTransformModifier<SearchSelectionModifier.Transform>>)
  {
    type metadata accessor for _ViewModifier_Content<SearchSelectionModifier>();
    type metadata accessor for SearchEnvironmentTransformModifier<SearchSelectionModifier.Transform>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<SearchSelectionModifier>, SearchEnvironmentTransformModifier<SearchSelectionModifier.Transform>>);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<SearchSelectionModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<SearchSelectionModifier>)
  {
    type metadata accessor for SearchSelectionModifier(255);
    lazy protocol witness table accessor for type SearchSelectionModifier and conformance SearchSelectionModifier(&lazy protocol witness table cache variable for type SearchSelectionModifier and conformance SearchSelectionModifier, (void (*)(uint64_t))type metadata accessor for SearchSelectionModifier);
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<SearchSelectionModifier>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type SearchSelectionModifier and conformance SearchSelectionModifier(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of SearchSelectionModifier(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for Binding<(TextSelection?, VersionSeed)>?(uint64_t a1)
{
}

uint64_t outlined init with copy of Binding<TextSelection?>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void specialized UIDevice.screenSize.getter()
{
  id v0 = objc_msgSend(self, sel_mainScreen);
  objc_msgSend(v0, sel_bounds);

  id v1 = objc_msgSend(self, sel_currentDevice);
  objc_msgSend(v1, sel_orientation);
}

uint64_t key path setter for EnvironmentValues.isInExpandedSplitView : EnvironmentValues()
{
  return EnvironmentValues.isInExpandedSplitView.setter();
}

uint64_t EnvironmentValues.isInExpandedSplitView.setter()
{
  type metadata accessor for EnvironmentPropertyKey<ExpandedSplitViewKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>, (uint64_t)&type metadata for ExpandedSplitViewKey, (uint64_t)&protocol witness table for ExpandedSplitViewKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

SwiftUI::ColumnNavigationViewStyle __swiftcall ColumnNavigationViewStyle.init()()
{
  *uint64_t v0 = 1;
  return result;
}

void ColumnNavigationViewStyle._body(configuration:)(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t ColumnNavigationView.BodyContent.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 8;
  uint64_t v4 = _VariadicView_Children.endIndex.getter();
  uint64_t result = _VariadicView_Children.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t result = _VariadicView_Children.endIndex.getter();
  if (v4 < 0 || result < v4) {
    goto LABEL_17;
  }
  switch(v4)
  {
    case 2:
      _VariadicView_Children.subscript.getter();
      outlined init with copy of _VariadicView_Children.Element((uint64_t)__dst, (uint64_t)__src);
      __src[96] = 2;
      outlined destroy of _VariadicView_Children.Element((uint64_t)__dst);
      _VariadicView_Children.subscript.getter();
      outlined init with copy of _VariadicView_Children.Element((uint64_t)__dst, (uint64_t)&v12);
      LOBYTE(v18) = 1;
      outlined destroy of _VariadicView_Children.Element((uint64_t)__dst);
      BYTE1(__dst[6]) = 1;
      __dst[4] = *(_OWORD *)&__src[64];
      __dst[5] = *(_OWORD *)&__src[80];
      LOBYTE(__dst[6]) = __src[96];
      __dst[0] = *(_OWORD *)__src;
      __dst[1] = *(_OWORD *)&__src[16];
      __dst[2] = *(_OWORD *)&__src[32];
      __dst[3] = *(_OWORD *)&__src[48];
      *(_OWORD *)((char *)&__dst[7] + 8) = v13;
      *(_OWORD *)((char *)&__dst[8] + 8) = v14;
      *(_OWORD *)((char *)&__dst[6] + 8) = v12;
      BYTE8(__dst[12]) = v18;
      *(_OWORD *)((char *)&__dst[11] + 8) = v17;
      *(_OWORD *)((char *)&__dst[10] + 8) = v16;
      *(_OWORD *)((char *)&__dst[9] + 8) = v15;
      outlined init with copy of HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>((uint64_t)__dst, (uint64_t)__src, (uint64_t (*)(void))type metadata accessor for MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>);
      char v11 = 0;
      outlined init with copy of HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>((uint64_t)__src, a1, (uint64_t (*)(void))type metadata accessor for _ConditionalContent<MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>>);
      *(unsigned char *)(a1 + 346) = 1;
      outlined destroy of HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>((uint64_t)__src, (uint64_t (*)(void))type metadata accessor for _ConditionalContent<MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>>);
      uint64_t v8 = type metadata accessor for MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>;
LABEL_14:
      uint64_t v6 = (void (*)(uint64_t))v8;
      uint64_t v7 = __dst;
      return outlined destroy of HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>((uint64_t)v7, (uint64_t (*)(void))v6);
    case 1:
      _VariadicView_Children.subscript.getter();
      outlined init with copy of _VariadicView_Children.Element((uint64_t)__dst, (uint64_t)__src);
      __src[96] = 2;
      outlined destroy of _VariadicView_Children.Element((uint64_t)__dst);
      BYTE1(__dst[6]) = 1;
      __dst[4] = *(_OWORD *)&__src[64];
      __dst[5] = *(_OWORD *)&__src[80];
      LOBYTE(__dst[6]) = __src[96];
      __dst[0] = *(_OWORD *)__src;
      __dst[1] = *(_OWORD *)&__src[16];
      __dst[2] = *(_OWORD *)&__src[32];
      __dst[3] = *(_OWORD *)&__src[48];
      outlined init with copy of HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>((uint64_t)__dst, (uint64_t)__src, (uint64_t (*)(void))type metadata accessor for MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>);
      __src[98] = 1;
      outlined init with copy of HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>((uint64_t)__src, a1, (uint64_t (*)(void))type metadata accessor for _ConditionalContent<MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>>);
      *(unsigned char *)(a1 + 346) = 0;
      outlined destroy of HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>((uint64_t)__src, (uint64_t (*)(void))type metadata accessor for _ConditionalContent<MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>>);
      uint64_t v8 = type metadata accessor for MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>;
      goto LABEL_14;
    case 0:
      __src[0] = 1;
      __src[98] = 0;
      outlined init with copy of HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>((uint64_t)__src, a1, (uint64_t (*)(void))type metadata accessor for _ConditionalContent<MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>>);
      *(unsigned char *)(a1 + 346) = 0;
      uint64_t v6 = type metadata accessor for _ConditionalContent<MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>>;
      uint64_t v7 = __src;
      return outlined destroy of HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>((uint64_t)v7, (uint64_t (*)(void))v6);
  }
  _VariadicView_Children.subscript.getter();
  outlined init with copy of _VariadicView_Children.Element((uint64_t)__src, (uint64_t)v22);
  char v23 = 1;
  outlined destroy of _VariadicView_Children.Element((uint64_t)__src);
  _VariadicView_Children.subscript.getter();
  outlined init with copy of _VariadicView_Children.Element((uint64_t)__src, (uint64_t)v20);
  char v21 = 2;
  outlined destroy of _VariadicView_Children.Element((uint64_t)__src);
  *(_OWORD *)__src = (unint64_t)static VerticalAlignment.center.getter();
  __src[16] = 0;
  uint64_t result = _VariadicView_Children.endIndex.getter();
  if (result < 2) {
    goto LABEL_18;
  }
  unint64_t v9 = result;
  uint64_t result = _VariadicView_Children.endIndex.getter();
  if (result < 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (result >= v9)
  {
    outlined init with copy of _VariadicView_Children(v3, (uint64_t)&__dst[1]);
    *(void *)&__dst[0] = 2;
    *((void *)&__dst[0] + 1) = v9;
    type metadata accessor for Slice<_VariadicView_Children>();
    lazy protocol witness table accessor for type Slice<_VariadicView_Children> and conformance <> Slice<A>();
    lazy protocol witness table accessor for type _VariadicView_Children.Element and conformance _VariadicView_Children.Element();
    ForEach<>.init(_:content:)();
    outlined init with copy of HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>((uint64_t)__src, (uint64_t)&v12, (uint64_t (*)(void))type metadata accessor for HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>);
    v19[24] = 1;
    outlined destroy of HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>((uint64_t)__src, (uint64_t (*)(void))type metadata accessor for HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>);
    memset(&__src[104], 0, 97);
    *(_OWORD *)&__src[64] = v22[4];
    *(_OWORD *)&__src[80] = v22[5];
    __src[96] = v23;
    *(_OWORD *)__src = v22[0];
    *(_OWORD *)&__src[16] = v22[1];
    *(_OWORD *)&__src[32] = v22[2];
    *(_OWORD *)&__src[48] = v22[3];
    *(_OWORD *)&__src[329] = *(_OWORD *)&v19[9];
    *(_OWORD *)&__src[304] = v18;
    *(_OWORD *)&__src[320] = *(_OWORD *)v19;
    *(_OWORD *)&__src[240] = v14;
    *(_OWORD *)&__src[256] = v15;
    *(_OWORD *)&__src[272] = v16;
    *(_OWORD *)&__src[288] = v17;
    *(_OWORD *)&__src[208] = v12;
    *(_OWORD *)&__src[224] = v13;
    outlined destroy of HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>((uint64_t)&__src[104], (uint64_t (*)(void))type metadata accessor for ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>?);
    *(_OWORD *)&__src[152] = v20[3];
    *(_OWORD *)&__src[168] = v20[4];
    *(_OWORD *)&__src[184] = v20[5];
    __src[200] = v21;
    *(_OWORD *)&__src[104] = v20[0];
    *(_OWORD *)&__src[120] = v20[1];
    *(_OWORD *)&__src[136] = v20[2];
    memcpy(__dst, __src, 0x159uLL);
    outlined init with copy of HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>((uint64_t)__dst, (uint64_t)__src, (uint64_t (*)(void))type metadata accessor for MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>);
    char v11 = 1;
    outlined init with copy of HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>((uint64_t)__src, a1, (uint64_t (*)(void))type metadata accessor for _ConditionalContent<MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>>);
    *(unsigned char *)(a1 + 346) = 1;
    outlined destroy of HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>((uint64_t)__src, (uint64_t (*)(void))type metadata accessor for _ConditionalContent<MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>>);
    uint64_t v8 = type metadata accessor for MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>;
    goto LABEL_14;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in ColumnNavigationView.BodyContent.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of _VariadicView_Children.Element(a1, a2);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance ColumnNavigationView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = lazy protocol witness table accessor for type ColumnNavigationView and conformance ColumnNavigationView();

  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for _VariadicView_ViewRoot.body(children:) in conformance ColumnNavigationView@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  char v4 = *v2;
  uint64_t result = outlined init with copy of _VariadicView_Children(a1, (uint64_t)(a2 + 8));
  *a2 = v4;
  return result;
}

uint64_t protocol witness for static _VariadicView_Root._viewListOptions.getter in conformance ColumnNavigationView()
{
  if (static SemanticFeature.isEnabled.getter()) {
    return 512;
  }
  else {
    return 0;
  }
}

uint64_t (*EnvironmentValues.isInExpandedSplitView.modify(uint64_t a1))(uint64_t *a1)
{
  *(void *)a1 = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ExpandedSplitViewKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>, (uint64_t)&type metadata for ExpandedSplitViewKey, (uint64_t)&protocol witness table for ExpandedSplitViewKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ExpandedSplitViewKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>, (uint64_t)&type metadata for ExpandedSplitViewKey, (uint64_t)&protocol witness table for ExpandedSplitViewKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a1 + 9);
  return EnvironmentValues.isInExpandedSplitView.modify;
}

uint64_t EnvironmentValues.isInExpandedSplitView.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *((unsigned char *)a1 + 9) = *((unsigned char *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<ExpandedSplitViewKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>, (uint64_t)&type metadata for ExpandedSplitViewKey, (uint64_t)&protocol witness table for ExpandedSplitViewKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }

  return swift_release();
}

double EnvironmentValues.disclosureGroupIndicatorTrailingPadding.getter()
{
  uint64_t v1 = v0[1];
  uint64_t v3 = *v0;
  EnvironmentValues.horizontalSizeClass.getter();
  if (v4 == 2 || (double result = 0.0, (v4 & 1) != 0))
  {
    type metadata accessor for EnvironmentPropertyKey<ExpandedSplitViewKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>, (uint64_t)&type metadata for ExpandedSplitViewKey, (uint64_t)&protocol witness table for ExpandedSplitViewKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    if (v1)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    double result = 8.0;
    if ((_BYTE)v3) {
      return 4.0;
    }
  }
  return result;
}

uint64_t View.prefersExpandedSidebars(_:)()
{
  return swift_release();
}

uint64_t sub_187714A0C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isInExpandedSplitView.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187714A4C()
{
  return EnvironmentValues.isInExpandedSplitView.setter();
}

uint64_t associated type witness table accessor for NavigationViewStyle._Body : View in ColumnNavigationViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for NavigationViewStyle._Body2 : View in ColumnNavigationViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for ColumnNavigationViewStyle()
{
  return &type metadata for ColumnNavigationViewStyle;
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v2, _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content>, _VariadicView.Tree<DoubleColumnNavigationView, _NavigationViewStyleConfiguration.Content>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v2, _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content>, _VariadicView.Tree<DoubleColumnNavigationView, _NavigationViewStyleConfiguration.Content>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v2, _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content>, _VariadicView.Tree<DoubleColumnNavigationView, _NavigationViewStyleConfiguration.Content>> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<_SemanticFeature_v2, _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content>, _VariadicView.Tree<DoubleColumnNavigationView, _NavigationViewStyleConfiguration.Content>>();
    lazy protocol witness table accessor for type _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content> and conformance <> _VariadicView.Tree<A, B>();
    lazy protocol witness table accessor for type _VariadicView.Tree<DoubleColumnNavigationView, _NavigationViewStyleConfiguration.Content> and conformance <> _VariadicView.Tree<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v2, _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content>, _VariadicView.Tree<DoubleColumnNavigationView, _NavigationViewStyleConfiguration.Content>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void type metadata accessor for StaticIf<_SemanticFeature_v2, _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content>, _VariadicView.Tree<DoubleColumnNavigationView, _NavigationViewStyleConfiguration.Content>>()
{
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v2, _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content>, _VariadicView.Tree<DoubleColumnNavigationView, _NavigationViewStyleConfiguration.Content>>)
  {
    type metadata accessor for _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content>(255, &lazy cache variable for type metadata for _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content>);
    type metadata accessor for _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content>(255, &lazy cache variable for type metadata for _VariadicView.Tree<DoubleColumnNavigationView, _NavigationViewStyleConfiguration.Content>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<_SemanticFeature_v2, _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content>, _VariadicView.Tree<DoubleColumnNavigationView, _NavigationViewStyleConfiguration.Content>>);
    }
  }
}

void type metadata accessor for _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for _VariadicView.Tree();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content> and conformance <> _VariadicView.Tree<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content> and conformance <> _VariadicView.Tree<A, B>;
  if (!lazy protocol witness table cache variable for type _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content> and conformance <> _VariadicView.Tree<A, B>)
  {
    type metadata accessor for _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content>(255, &lazy cache variable for type metadata for _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content>);
    lazy protocol witness table accessor for type ColumnNavigationView and conformance ColumnNavigationView();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content> and conformance <> _VariadicView.Tree<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ColumnNavigationView and conformance ColumnNavigationView()
{
  unint64_t result = lazy protocol witness table cache variable for type ColumnNavigationView and conformance ColumnNavigationView;
  if (!lazy protocol witness table cache variable for type ColumnNavigationView and conformance ColumnNavigationView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnNavigationView and conformance ColumnNavigationView);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ColumnNavigationView and conformance ColumnNavigationView;
  if (!lazy protocol witness table cache variable for type ColumnNavigationView and conformance ColumnNavigationView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnNavigationView and conformance ColumnNavigationView);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _VariadicView.Tree<DoubleColumnNavigationView, _NavigationViewStyleConfiguration.Content> and conformance <> _VariadicView.Tree<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _VariadicView.Tree<DoubleColumnNavigationView, _NavigationViewStyleConfiguration.Content> and conformance <> _VariadicView.Tree<A, B>;
  if (!lazy protocol witness table cache variable for type _VariadicView.Tree<DoubleColumnNavigationView, _NavigationViewStyleConfiguration.Content> and conformance <> _VariadicView.Tree<A, B>)
  {
    type metadata accessor for _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content>(255, &lazy cache variable for type metadata for _VariadicView.Tree<DoubleColumnNavigationView, _NavigationViewStyleConfiguration.Content>);
    lazy protocol witness table accessor for type DoubleColumnNavigationView and conformance DoubleColumnNavigationView();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView.Tree<DoubleColumnNavigationView, _NavigationViewStyleConfiguration.Content> and conformance <> _VariadicView.Tree<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DoubleColumnNavigationView and conformance DoubleColumnNavigationView()
{
  unint64_t result = lazy protocol witness table cache variable for type DoubleColumnNavigationView and conformance DoubleColumnNavigationView;
  if (!lazy protocol witness table cache variable for type DoubleColumnNavigationView and conformance DoubleColumnNavigationView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DoubleColumnNavigationView and conformance DoubleColumnNavigationView);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DoubleColumnNavigationView and conformance DoubleColumnNavigationView;
  if (!lazy protocol witness table cache variable for type DoubleColumnNavigationView and conformance DoubleColumnNavigationView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DoubleColumnNavigationView and conformance DoubleColumnNavigationView);
  }
  return result;
}

uint64_t sub_187714E0C()
{
  return MEMORY[0x1E4F417F0];
}

uint64_t sub_187714E18()
{
  return swift_getWitnessTable();
}

uint64_t lazy protocol witness table accessor for type HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>> and conformance HStack<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ColumnNavigationViewStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187714FC8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ColumnNavigationView()
{
  return &type metadata for ColumnNavigationView;
}

ValueMetadata *type metadata accessor for ExpandedSplitViewKey()
{
  return &type metadata for ExpandedSplitViewKey;
}

unint64_t instantiation function for generic protocol witness table for ColumnNavigationView(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ColumnNavigationView and conformance ColumnNavigationView();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in ColumnNavigationView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for ColumnNavigationView.BodyContent(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ColumnNavigationView.BodyContent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  uint64_t v5 = *(void **)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  id v7 = v5;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ColumnNavigationView.BodyContent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  long long v4 = *(void **)(a2 + 48);
  uint64_t v5 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v4;
  id v6 = v4;

  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ColumnNavigationView.BodyContent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(void **)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;

  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ColumnNavigationView.BodyContent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ColumnNavigationView.BodyContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ColumnNavigationView.BodyContent()
{
  return &type metadata for ColumnNavigationView.BodyContent;
}

unint64_t lazy protocol witness table accessor for type ColumnNavigationView.BodyContent and conformance ColumnNavigationView.BodyContent()
{
  unint64_t result = lazy protocol witness table cache variable for type ColumnNavigationView.BodyContent and conformance ColumnNavigationView.BodyContent;
  if (!lazy protocol witness table cache variable for type ColumnNavigationView.BodyContent and conformance ColumnNavigationView.BodyContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnNavigationView.BodyContent and conformance ColumnNavigationView.BodyContent);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ColumnNavigationView.BodyContent()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for Slice<_VariadicView_Children>()
{
  if (!lazy cache variable for type metadata for Slice<_VariadicView_Children>)
  {
    lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children();
    unint64_t v0 = type metadata accessor for Slice();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Slice<_VariadicView_Children>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Slice<_VariadicView_Children> and conformance <> Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<_VariadicView_Children> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<_VariadicView_Children> and conformance <> Slice<A>)
  {
    type metadata accessor for Slice<_VariadicView_Children>();
    lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<_VariadicView_Children> and conformance <> Slice<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _VariadicView_Children.Element and conformance _VariadicView_Children.Element()
{
  unint64_t result = lazy protocol witness table cache variable for type _VariadicView_Children.Element and conformance _VariadicView_Children.Element;
  if (!lazy protocol witness table cache variable for type _VariadicView_Children.Element and conformance _VariadicView_Children.Element)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView_Children.Element and conformance _VariadicView_Children.Element);
  }
  return result;
}

void type metadata accessor for HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>()
{
  if (!lazy cache variable for type metadata for HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>)
  {
    type metadata accessor for ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>();
    lazy protocol witness table accessor for type ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element> and conformance <> ForEach<A, B, C>();
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>);
    }
  }
}

void type metadata accessor for ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>()
{
  if (!lazy cache variable for type metadata for ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>)
  {
    type metadata accessor for Slice<_VariadicView_Children>();
    lazy protocol witness table accessor for type Slice<_VariadicView_Children> and conformance <> Slice<A>();
    unint64_t v0 = type metadata accessor for ForEach();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element> and conformance <> ForEach<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element> and conformance <> ForEach<A, B, C>;
  if (!lazy protocol witness table cache variable for type ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element> and conformance <> ForEach<A, B, C>)
  {
    type metadata accessor for ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element> and conformance <> ForEach<A, B, C>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>?()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>?)
  {
    type metadata accessor for EnvironmentPropertyKey<ExpandedSplitViewKey>(255, &lazy cache variable for type metadata for ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, MEMORY[0x1E4F40A20], (uint64_t)&type metadata for NavigationColumnModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>?);
    }
  }
}

void type metadata accessor for MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>()
{
  if (!lazy cache variable for type metadata for MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<ExpandedSplitViewKey>(255, &lazy cache variable for type metadata for ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, MEMORY[0x1E4F40A20], (uint64_t)&type metadata for NavigationColumnModifier, MEMORY[0x1E4F3FBA0]);
    type metadata accessor for ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>();
    lazy protocol witness table accessor for type ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for MulticolumnSplitView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>);
    }
  }
}

void type metadata accessor for ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>)
  {
    type metadata accessor for HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<ExpandedSplitViewKey>(255, &lazy cache variable for type metadata for ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, MEMORY[0x1E4F40A20], (uint64_t)&type metadata for NavigationColumnModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type NavigationColumnModifier and conformance NavigationColumnModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>();
    lazy protocol witness table accessor for type HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>> and conformance HStack<A>(&lazy protocol witness table cache variable for type HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>);
    lazy protocol witness table accessor for type NavigationColumnModifier and conformance NavigationColumnModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>>(uint64_t a1)
{
}

void type metadata accessor for MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>()
{
  if (!lazy cache variable for type metadata for MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<ExpandedSplitViewKey>(255, &lazy cache variable for type metadata for ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, MEMORY[0x1E4F40A20], (uint64_t)&type metadata for NavigationColumnModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for MulticolumnSplitView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>);
    }
  }
}

void type metadata accessor for MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>()
{
  if (!lazy cache variable for type metadata for MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<ExpandedSplitViewKey>(255, &lazy cache variable for type metadata for ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, MEMORY[0x1E4F40A20], (uint64_t)&type metadata for NavigationColumnModifier, MEMORY[0x1E4F3FBA0]);
    type metadata accessor for EnvironmentPropertyKey<ExpandedSplitViewKey>(255, &lazy cache variable for type metadata for _UnaryViewAdaptor<EmptyView>, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F0], MEMORY[0x1E4F40210]);
    lazy protocol witness table accessor for type ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _UnaryViewAdaptor<EmptyView> and conformance _UnaryViewAdaptor<A>();
    unint64_t v0 = type metadata accessor for MulticolumnSplitView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>);
    }
  }
}

uint64_t outlined init with copy of HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for _ConditionalContent<MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>>(uint64_t a1)
{
}

void type metadata accessor for MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>()
{
  if (!lazy cache variable for type metadata for MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<ExpandedSplitViewKey>(255, &lazy cache variable for type metadata for _UnaryViewAdaptor<EmptyView>, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F0], MEMORY[0x1E4F40210]);
    lazy protocol witness table accessor for type _UnaryViewAdaptor<EmptyView> and conformance _UnaryViewAdaptor<A>();
    unint64_t v0 = type metadata accessor for MulticolumnSplitView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>);
    }
  }
}

uint64_t outlined destroy of HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<_ConditionalContent<MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>>, _ConditionalContent<MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>>, _ConditionalContent<MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>>, _ConditionalContent<MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>>(255, &lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>>, _ConditionalContent<MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>>>, type metadata accessor for _ConditionalContent<MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>>, type metadata accessor for _ConditionalContent<MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>>);
    lazy protocol witness table accessor for type _ConditionalContent<MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>> and conformance <> _ConditionalContent<A, B>(&lazy protocol witness table cache variable for type _ConditionalContent<MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>> and conformance <> _ConditionalContent<A, B>, type metadata accessor for _ConditionalContent<MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>>);
    lazy protocol witness table accessor for type _ConditionalContent<MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>> and conformance <> _ConditionalContent<A, B>(&lazy protocol witness table cache variable for type _ConditionalContent<MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>> and conformance <> _ConditionalContent<A, B>, type metadata accessor for _ConditionalContent<MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>>, _ConditionalContent<MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = type metadata accessor for _ConditionalContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _ConditionalContent<MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>> and conformance <> _ConditionalContent<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t implicit closure #4 in static ContextMenuModifierCore._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  uint64_t v7 = type metadata accessor for ContextMenuModifierCore.AttachMenuPlatformItemList();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for [ViewResponder](0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v5, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v6, v7, MEMORY[0x1E4FBC248], v1, MEMORY[0x1E4FBC278], v2);
  return v4;
}

uint64_t (*ContextMenuModifierCore.AttachMenuPlatformItemList.value.getter(unint64_t a1, uint64_t a2, uint64_t a3))(uint64_t *a1)
{
  int v5 = a1;
  unint64_t v6 = HIDWORD(a1);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  *(_DWORD *)(v7 + 32) = v5;
  *(_DWORD *)(v7 + 36) = v6;
  return partial apply for closure #1 in ContextMenuModifierCore.AttachMenuPlatformItemList.value.getter;
}

uint64_t closure #1 in ContextMenuModifierCore.AttachMenuPlatformItemList.value.getter(uint64_t *a1, uint64_t a2)
{
  type metadata accessor for [ViewResponder](0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8);
  unint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v40 - v8;
  uint64_t v10 = type metadata accessor for PlatformItemList.Item();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v42 = (uint64_t)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  long long v15 = (char *)&v40 - v14;
  MEMORY[0x1F4188790](v16);
  long long v18 = (char *)&v40 - v17;
  uint64_t v43 = a1;
  uint64_t v19 = *a1;
  PlatformItemList.mergedContentItem.getter(*a1, (uint64_t)&v40 - v17);
  uint64_t v20 = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v18 + 77) = v20;
  if ((a2 & 0x100000000) != 0)
  {
    uint64_t v21 = *(void *)(v19 + 16);
    if (v21)
    {
      uint64_t v22 = v19 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
      uint64_t v23 = *(void *)(v11 + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        outlined init with copy of PlatformItemList.Item(v22, (uint64_t)v15);
        if (*((void *)v15 + 51) != 1) {
          break;
        }
        outlined destroy of PlatformItemList.Item((uint64_t)v15);
        v22 += v23;
        if (!--v21) {
          goto LABEL_9;
        }
      }
      outlined init with take of PlatformItemList.Item((uint64_t)v15, (uint64_t)v9);
      uint64_t v24 = 0;
    }
    else
    {
      swift_bridgeObjectRetain();
LABEL_9:
      uint64_t v24 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, v24, 1, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined init with take of PlatformItemList.Item?((uint64_t)v9, (uint64_t)v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
    {
      outlined destroy of PlatformItemList.Item?((uint64_t)v6);
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v40 = 0;
      int v41 = 0;
      uint64_t v31 = 1;
    }
    else
    {
      uint64_t v25 = *((void *)v6 + 50);
      uint64_t v32 = *((void *)v6 + 51);
      uint64_t v26 = *((void *)v6 + 52);
      uint64_t v27 = *((void *)v6 + 53);
      uint64_t v28 = *((void *)v6 + 54);
      uint64_t v29 = *((void *)v6 + 55);
      uint64_t v30 = *((void *)v6 + 56);
      uint64_t v40 = *((void *)v6 + 57);
      int v41 = v6[464];
      LOBYTE(v39) = v41;
      outlined consume of PlatformItemList.Item.SelectionBehavior?(v25, v32, v26, v27, v28, v29, v30, v40, v39, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?, (void (*)(uint64_t, uint64_t))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
      uint64_t v33 = (uint64_t)v6;
      uint64_t v31 = v32;
      outlined destroy of PlatformItemList.Item(v33);
    }
    LOBYTE(v39) = v18[464];
    outlined consume of PlatformItemList.Item.SelectionBehavior?(*((void *)v18 + 50), *((void *)v18 + 51), *((void *)v18 + 52), *((void *)v18 + 53), *((void *)v18 + 54), *((void *)v18 + 55), *((void *)v18 + 56), *((void *)v18 + 57), v39, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    *((void *)v18 + 50) = v25;
    *((void *)v18 + 51) = v31;
    *((void *)v18 + 52) = v26;
    *((void *)v18 + 53) = v27;
    *((void *)v18 + 54) = v28;
    *((void *)v18 + 55) = v29;
    uint64_t v34 = v40;
    *((void *)v18 + 56) = v30;
    *((void *)v18 + 57) = v34;
    v18[464] = v41;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v35 = v42;
  outlined init with copy of PlatformItemList.Item((uint64_t)v18, v42);
  type metadata accessor for [ViewResponder](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBBE00]);
  unint64_t v36 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_18834BB80;
  outlined init with take of PlatformItemList.Item(v35, v37 + v36);
  *uint64_t v43 = v37;
  return outlined destroy of PlatformItemList.Item((uint64_t)v18);
}

uint64_t protocol witness for Rule.value.getter in conformance ContextMenuModifierCore<A>.AttachMenuPlatformItemList@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  uint64_t v4 = ContextMenuModifierCore.AttachMenuPlatformItemList.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24));
  uint64_t v6 = v5;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v4;
  *(void *)(result + 24) = v6;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a2[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ContextMenuModifierCore<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance HasContextMenuInteractionKey()
{
  lazy protocol witness table accessor for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance HasContextMenuInteractionKey()
{
  return PropertyList.subscript.setter();
}

uint64_t ContextMenuResponderFilter.updateValue()()
{
  uint64_t v1 = v0;
  AGGraphGetValue();
  int v3 = v2;
  AGGraphGetValue();
  if (((v3 | v4) & 1) != 0
    || (type metadata accessor for [ViewResponder](0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]), !AGGraphGetOutputValue()))
  {
    uint64_t v5 = *(void *)(v1 + 32);
    *(double *)(v5 + 224) = MEMORY[0x18C114450]();
    *(void *)(v5 + 232) = v6;
    *(double *)(v5 + 240) = MEMORY[0x18C10C240]();
    *(void *)(v5 + 248) = v7;
  }
  uint64_t v8 = *(void *)(v1 + 32);
  *(_DWORD *)(v8 + 304) = *(_DWORD *)AGGraphGetValue();
  *(void *)(v8 + 256) = AGCreateWeakAttribute();
  *(unsigned char *)(v8 + 264) = *(unsigned char *)AGGraphGetValue();
  type metadata accessor for [ViewResponder](0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  uint64_t Value = AGGraphGetValue();
  if (v10)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    uint64_t Value = swift_bridgeObjectRelease();
  }
  double v11 = MEMORY[0x18C10C240](Value);
  double v13 = v12;
  AGGraphGetValue();
  *(double *)(v8 + 280) = v11 - MEMORY[0x18C10C240]();
  *(double *)(v8 + 288) = v13 - v14;
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_188351940;
    *(void *)(v16 + 32) = v8;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall ContextMenuResponder.startTrackingUpdates(interaction:)(UIContextMenuInteraction interaction)
{
  uint64_t v2 = v1;
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  MEMORY[0x18C113CA0]();
  if (*(unsigned char *)(v1 + 324))
  {
    if (AGWeakAttributeGetAttribute() != *MEMORY[0x1E4F4E7A0])
    {
      id v3 = (id)AGGraphGetAttributeSubgraph();
      AGGraphClearUpdate();
      id v4 = (id)AGSubgraphGetCurrent();
      AGSubgraphSetCurrent();
      AGGraphClearUpdate();
      AGWeakAttributeGetAttribute();
      uint64_t v5 = AGCreateWeakAttribute();
      swift_unknownObjectWeakInit();
      uint64_t v11 = v5;
      UpdateContextMenuInteraction.updateValue()();
      outlined init with copy of UpdateContextMenuInteraction((uint64_t)v10, (uint64_t)v9);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type UpdateContextMenuInteraction and conformance UpdateContextMenuInteraction();
      int v6 = Attribute.init<A>(body:value:flags:update:)();
      outlined destroy of UpdateContextMenuInteraction((uint64_t)v9);
      outlined destroy of UpdateContextMenuInteraction((uint64_t)v10);
      AGGraphSetUpdate();
      *(_DWORD *)(v2 + 320) = v6;
      *(unsigned char *)(v2 + 324) = 0;
      static AGAttributeFlags.transactional.getter();
      AGGraphSetFlags();
      AGSubgraphSetCurrent();

      AGGraphSetUpdate();
    }
  }
  else
  {
    static AGAttributeFlags.transactional.getter();
    AGGraphGetFlags();
    uint64_t v7 = AGGraphSetFlags();
    MEMORY[0x1F4188790](v7);
    MEMORY[0x1F4188790](v8);
    AGGraphMutateAttribute();
  }
  static Update.end()();
}

uint64_t ContextMenuResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for ContextMenuResponder()
{
  return type metadata accessor for ContextMenuResponder(0);
}

void ContextMenuResponderBase.contentShapeKind.getter(void *a1@<X8>)
{
  *a1 = 4;
}

uint64_t closure #1 in ContextMenuResponderBase.items.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AGGraphGetWeakValue();
  if (result) {
    uint64_t result = swift_bridgeObjectRetain();
  }
  *a1 = result;
  return result;
}

uint64_t ContextMenuResponderBase.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for ContextMenuResponderBase()
{
  return type metadata accessor for ContextMenuResponderBase(0);
}

uint64_t *initializeBufferWithCopyOfBuffer for ContextMenuModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  id v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 33) & (unint64_t)~v6) + *(void *)(v5 + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *id v3 = *a2;
    id v3 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    unint64_t v10 = (unint64_t)a2 + 27;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    unint64_t v11 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v12 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v13 = *(void *)v12;
    char v14 = *(unsigned char *)(v12 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v12, v14);
    *(void *)unint64_t v11 = v13;
    *(unsigned char *)(v11 + 8) = v14;
    unint64_t v15 = ((unint64_t)v3 + 27) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v16 = v10 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v17 = *(void *)(v10 & 0xFFFFFFFFFFFFFFF8);
    LOBYTE(v13) = *(unsigned char *)(v16 + 8);
    outlined copy of Environment<Bool>.Content(v17, v13);
    *(void *)unint64_t v15 = v17;
    *(unsigned char *)(v15 + 8) = v13;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))((v15 + v6 + 9) & ~v6, (v16 + v6 + 9) & ~v6, v4);
  }
  return v3;
}

_DWORD *initializeWithTake for ContextMenuModifier(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)v5;
  *(unsigned char *)(v4 + 8) = *(unsigned char *)(v5 + 8);
  *(void *)unint64_t v4 = v6;
  unint64_t v7 = ((unint64_t)a1 + 27) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = ((unint64_t)a2 + 27) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  *(unsigned char *)(v7 + 8) = *(unsigned char *)(v8 + 8);
  *(void *)unint64_t v7 = v9;
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 32))((*(unsigned __int8 *)(v10 + 80) + 9 + v7) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(unsigned __int8 *)(v10 + 80) + 9 + v8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

_DWORD *assignWithTake for ContextMenuModifier(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 27;
  *a1 = *a2;
  unint64_t v6 = (unint64_t)a1 + 27;
  unint64_t v7 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  LOBYTE(v8) = *(unsigned char *)(v8 + 8);
  uint64_t v10 = *(void *)v7;
  char v11 = *(unsigned char *)(v7 + 8);
  *(void *)unint64_t v7 = v9;
  *(unsigned char *)(v7 + 8) = v8;
  outlined consume of Environment<Bool>.Content(v10, v11);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  v5 &= 0xFFFFFFFFFFFFFFF8;
  char v12 = *(unsigned char *)(v5 + 8);
  uint64_t v13 = *(void *)v6;
  char v14 = *(unsigned char *)(v6 + 8);
  *(void *)unint64_t v6 = *(void *)v5;
  *(unsigned char *)(v6 + 8) = v12;
  outlined consume of Environment<Bool>.Content(v13, v14);
  uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v15 + 40))((*(unsigned __int8 *)(v15 + 80) + 9 + v6) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), (*(unsigned __int8 *)(v15 + 80) + 9 + v5) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for ContextMenuModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 33) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 > 0xFE) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)a1 + 27) & 0xFFFFFFFFFFFFFFF8)
      }
                                                                      + v6
                                                                      + 9) & ~v6);
      unsigned int v15 = *(unsigned __int8 *)((((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v15 > 1) {
        return (v15 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for ContextMenuModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 33) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x1877172B0);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 > 0xFE)
        {
          unint64_t v19 = (((unint64_t)(a1 + 27) & 0xFFFFFFFFFFFFFFF8) + v9 + 9) & ~v9;
          uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(v19);
        }
        else
        {
          unint64_t v18 = (unint64_t)(a1 + 11) & 0xFFFFFFFFFFFFFFF8;
          if (a2 > 0xFE)
          {
            *(unsigned char *)(v18 + 8) = 0;
            *(void *)unint64_t v18 = a2 - 255;
          }
          else
          {
            *(unsigned char *)(v18 + 8) = -(char)a2;
          }
        }
      }
      return;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ActiveContextMenu()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ActiveContextMenu()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 4);
  Hasher._combine(_:)(*(_DWORD *)v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ActiveContextMenu()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type ActiveContextMenu and conformance ActiveContextMenu()
{
  unint64_t result = lazy protocol witness table cache variable for type ActiveContextMenu and conformance ActiveContextMenu;
  if (!lazy protocol witness table cache variable for type ActiveContextMenu and conformance ActiveContextMenu)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActiveContextMenu and conformance ActiveContextMenu);
  }
  return result;
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance ActiveContextMenuKey(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = 0;
}

uint64_t EnvironmentValues.activeContextMenu.setter()
{
  type metadata accessor for EnvironmentPropertyKey<ActiveContextMenuKey>();
  lazy protocol witness table accessor for type InvertedViewInputPredicate<IsSharingPickerHost> and conformance InvertedViewInputPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ActiveContextMenuKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ActiveContextMenuKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_18771752C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isPresentingContextMenu.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_18771756C()
{
  return EnvironmentValues.isPresentingContextMenu.setter();
}

uint64_t outlined init with copy of UpdateContextMenuInteraction(uint64_t a1, uint64_t a2)
{
  return a2;
}

ValueMetadata *type metadata accessor for ActiveContextMenuKey()
{
  return &type metadata for ActiveContextMenuKey;
}

ValueMetadata *type metadata accessor for MenuOrderPreferenceKey()
{
  return &type metadata for MenuOrderPreferenceKey;
}

ValueMetadata *type metadata accessor for HasContextMenuKey()
{
  return &type metadata for HasContextMenuKey;
}

uint64_t *initializeBufferWithCopyOfBuffer for ContextMenuModifierCore(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7 & 0xFC | 3;
  int v9 = v7 & 0x100000;
  if (v8 > 7 || v9 != 0 || ((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 5 > 0x18)
  {
    uint64_t v12 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v12 + ((v8 + 16) & ~v8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v13 = ((unint64_t)v4 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v14 = ((unint64_t)a2 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    *(_DWORD *)unint64_t v13 = *(_DWORD *)v14;
    *(unsigned char *)(v13 + 4) = *(unsigned char *)(v14 + 4);
  }
  return v4;
}

uint64_t initializeWithTake for ContextMenuModifierCore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 3;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v7 = *(_DWORD *)v8;
  *(unsigned char *)(v7 + 4) = *(unsigned char *)(v8 + 4);
  return a1;
}

uint64_t assignWithTake for ContextMenuModifierCore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 3;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v7 = *(_DWORD *)v8;
  *(unsigned char *)(v7 + 4) = *(unsigned char *)(v8 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContextMenuModifierCore(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFD) {
    unsigned int v7 = 253;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 5;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187717998);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v15 = 0;
        }
        if (((v6 + 3) & 0xFFFFFFFC) == 0xFFFFFFFC) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0xFD) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v17 = *(unsigned __int8 *)(((unint64_t)&a1[v6 + 3] & 0xFFFFFFFFFFFFFFFCLL) + 4);
  if (v17 >= 3) {
    return v17 - 2;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for ContextMenuModifierCore(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFD) {
    unsigned int v8 = 253;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = ((v9 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 5;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v7 < 0xFD)
            {
              *(unsigned char *)(((unint64_t)&a1[v9 + 3] & 0xFFFFFFFFFFFFFFFCLL) + 4) = a2 + 2;
            }
            else
            {
              uint64_t v20 = *(void (**)(void))(v6 + 56);
              v20();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = ~v8 + a2;
  unsigned int v17 = (~(_BYTE)v8 + a2);
  if (v10 < 4) {
    int v18 = (v16 >> v11) + 1;
  }
  else {
    int v18 = 1;
  }
  if (v10 >= 4) {
    unsigned int v19 = v16;
  }
  else {
    unsigned int v19 = v17;
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v19;
  }
  else {
    *(_DWORD *)a1 = v19;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v18;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x187717BACLL);
    case 4:
      *(_DWORD *)&a1[v10] = v18;
      break;
    default:
      return;
  }
}

uint64_t sub_187717BD4()
{
  return swift_getWitnessTable();
}

_UNKNOWN **base witness table accessor for ViewModifier in ContextMenuModifierCore<A>()
{
  return &protocol witness table for ContextMenuModifierCore<A>;
}

uint64_t partial apply for implicit closure #4 in static ContextMenuModifierCore._makeView(modifier:inputs:body:)()
{
  return implicit closure #4 in static ContextMenuModifierCore._makeView(modifier:inputs:body:)(*(void *)(v0 + 32));
}

uint64_t type metadata accessor for ContextMenuModifierCore.AttachMenuPlatformItemList()
{
  return __swift_instantiateGenericMetadata();
}

void *type metadata accessor for HasContextMenuInteractionKey()
{
  return &unk_1ED452F88;
}

uint64_t destroy for ContextMenuResponderFilter()
{
  return swift_release();
}

uint64_t assignWithCopy for ContextMenuResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ContextMenuResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ContextMenuResponderFilter(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContextMenuResponderFilter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for ContextMenuResponderFilter()
{
  return &unk_1ED44AA28;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in HasContextMenuInteractionKey()
{
  return &protocol witness table for HasContextMenuInteractionKey;
}

uint64_t base witness table accessor for _AttributeBody in ContextMenuModifierCore<A>.AttachMenuPlatformItemList()
{
  return swift_getWitnessTable();
}

uint64_t sub_187718154()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_18771818C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ContextMenuModifierCore.AttachMenuPlatformItemList.value.getter(uint64_t *a1)
{
  return closure #1 in ContextMenuModifierCore.AttachMenuPlatformItemList.value.getter(a1, *(void *)(v1 + 32));
}

uint64_t outlined init with take of PlatformItemList.Item?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for [ViewResponder](0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PlatformItemList.Item?(uint64_t a1)
{
  type metadata accessor for [ViewResponder](0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void outlined consume of PlatformItemList.Item.SelectionBehavior?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (*a10)(uint64_t, uint64_t), void (*a11)(uint64_t, uint64_t))
{
  if (a2 != 1)
  {
    a10(a2, a3);
    a10(a4, a5);
    a11(a6, a7);
  }
}

void _TestApp.runBenchmarks(_:)(uint64_t a1)
{
  uint64_t v24 = a1;
  type metadata accessor for <<opaque return type of static _TestApp.rootViewIdentifier>>.0();
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  unsigned int v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>();
  uint64_t v7 = v6 - 8;
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v6);
  size_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  unsigned int v13 = (char *)&v23 - v12;
  _TestApp.RootView.init()();
  long long v23 = v25;
  uint64_t v15 = v26;
  uint64_t v14 = v27;
  static _TestApp.rootViewIdentifier.getter();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(&v13[*(int *)(v7 + 60)], v5, v2);
  *(_OWORD *)unsigned int v13 = v23;
  *((void *)v13 + 2) = v15;
  *((void *)v13 + 3) = v14;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v24;
  outlined init with copy of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>((uint64_t)v13, (uint64_t)v10);
  unint64_t v17 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v18 = (v9 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  outlined init with take of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>((uint64_t)v10, v19 + v17);
  uint64_t v20 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + v18);
  *uint64_t v20 = partial apply for closure #1 in _TestApp.runBenchmarks(_:);
  v20[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v16;
  uint64_t v21 = static TestingSceneDelegate.connectCallback;
  static TestingSceneDelegate.connectCallback = partial apply for specialized closure #1 in runTestingApp<A, B>(rootView:comparisonView:didLaunch:);
  qword_1E90FC898 = v19;
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v21);
  type metadata accessor for TestingAppDelegate();
  uint64_t v22 = (char **)MEMORY[0x18C117520]();
  closure #1 in KitRendererCommon(_:)(v22);
}

void type metadata accessor for <<opaque return type of static _TestApp.rootViewIdentifier>>.0()
{
  if (!lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0)
  {
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    }
  }
}

void type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>()
{
  if (!lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>)
  {
    type metadata accessor for <<opaque return type of static _TestApp.rootViewIdentifier>>.0();
    lazy protocol witness table accessor for type _TestApp.RootView and conformance _TestApp.RootView();
    swift_getOpaqueTypeConformance2();
    unint64_t v0 = type metadata accessor for TestIDView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>);
    }
  }
}

uint64_t closure #1 in _TestApp.runBenchmarks(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue();
  uint64_t v15 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = a5;
  v16[3] = a1;
  v16[4] = a2;
  aBlock[4] = partial apply for closure #1 in closure #1 in _TestApp.runBenchmarks(_:);
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_1;
  unint64_t v17 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  type metadata accessor for [DispatchWorkItemFlags]();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (void (*)(uint64_t))type metadata accessor for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x18C116870](0, v14, v11, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v20);
}

uint64_t sub_1877189D0()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in _TestApp.runBenchmarks(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in _TestApp.runBenchmarks(_:)(a1, a2, a3, a4, *(void *)(v4 + 16));
}

uint64_t outlined init with copy of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void _TestApp.performBenchmarks(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_unknownObjectRetain();
  static _TestApp.host.setter();
  uint64_t ObjectType = swift_getObjectType();
  static _TestApp.defaultEnvironment.getter();
  long long v17 = v12;
  (*(void (**)(long long *, uint64_t, uint64_t))(a3 + 64))(&v17, ObjectType, a3);
  uint64_t v7 = CFRunLoopGetCurrent();
  uint64_t v8 = (const void *)*MEMORY[0x1E4F1D410];
  if (*MEMORY[0x1E4F1D410])
  {
    uint64_t v9 = v7;
    uint64_t v10 = (void *)swift_allocObject();
    void v10[2] = a1;
    v10[3] = a2;
    void v10[4] = a3;
    uint64_t v15 = partial apply for closure #1 in _TestApp.performBenchmarks(_:with:);
    uint64_t v16 = v10;
    *(void *)&long long v12 = MEMORY[0x1E4F143A8];
    *((void *)&v12 + 1) = 1107296256;
    uint64_t v13 = thunk for @escaping @callee_guaranteed () -> ();
    uint64_t v14 = &block_descriptor_17;
    uint64_t v11 = _Block_copy(&v12);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_release();
    CFRunLoopPerformBlock(v9, v8, v11);
    _Block_release(v11);
  }
  else
  {
    __break(1u);
  }
}

void closure #1 in _TestApp.performBenchmarks(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v5 = *(void *)(a3 + 8);
    uint64_t v6 = a1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v7 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      outlined init with copy of TableColumnList(v6, (uint64_t)v28);
      uint64_t v11 = v29;
      uint64_t v10 = v30;
      __swift_project_boxed_opaque_existential_1(v28, v29);
      (*(void (**)(uint64_t))(*(void *)(v10 + 8) + 8))(v11);
      uint64_t v12 = v29;
      uint64_t v13 = v30;
      __swift_project_boxed_opaque_existential_1(v28, v29);
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 16))(a2, v5, v12, v13);
      outlined init with copy of TableColumnList((uint64_t)v28, (uint64_t)v26);
      *((void *)&v27 + 1) = v14;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
      }
      unint64_t v16 = v7[2];
      unint64_t v15 = v7[3];
      if (v16 >= v15 >> 1) {
        uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v7);
      }
      v7[2] = v16 + 1;
      long long v17 = &v7[6 * v16];
      long long v18 = v26[0];
      long long v19 = v27;
      v17[3] = v26[1];
      v17[4] = v19;
      v17[2] = v18;
      if (enableProfiler.getter())
      {
        swift_getObjectType();
        if (swift_conformsToProtocol2()) {
          uint64_t v20 = a2;
        }
        else {
          uint64_t v20 = 0;
        }
        if (v20)
        {
          __swift_project_boxed_opaque_existential_1(v28, v29);
          swift_getDynamicType();
          swift_unknownObjectRetain();
          uint64_t v21 = _typeName(_:qualified:)();
          long long v23 = v22;
          swift_getObjectType();
          v24.value._countAndFlagsBits = v21;
          v24.value._object = v23;
          ViewRendererHost.archiveJSON(name:)(v24);
          swift_bridgeObjectRelease();
          ViewRendererHost.resetProfile()();
          swift_unknownObjectRelease();
        }
      }
      uint64_t v9 = v29;
      uint64_t v8 = v30;
      __swift_project_boxed_opaque_existential_1(v28, v29);
      (*(void (**)(uint64_t))(*(void *)(v8 + 8) + 16))(v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
      v6 += 40;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  uint64_t v25 = swift_bridgeObjectRetain();
  log(_:)((Swift::OpaquePointer)v25);
  swift_bridgeObjectRelease();
  exit(0);
}

void _TestApp.runPerformanceTests(_:)(uint64_t a1)
{
  type metadata accessor for <<opaque return type of static _TestApp.rootViewIdentifier>>.0();
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>();
  uint64_t v8 = v7 - 8;
  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v22 - v13;
  static TestingAppDelegate.performanceTests = a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  _TestApp.RootView.init()();
  v22[0] = v22[2];
  uint64_t v15 = v23;
  uint64_t v16 = v24;
  static _TestApp.rootViewIdentifier.getter();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(&v14[*(int *)(v8 + 60)], v6, v3);
  *(_OWORD *)uint64_t v14 = v22[0];
  *((void *)v14 + 2) = v15;
  *((void *)v14 + 3) = v16;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  outlined init with copy of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>((uint64_t)v14, (uint64_t)v11);
  unint64_t v17 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v18 = swift_allocObject();
  outlined init with take of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>((uint64_t)v11, v18 + v17);
  long long v19 = (uint64_t (**)())(v18 + ((v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8));
  *long long v19 = closure #1 in _TestApp.runPerformanceTests(_:);
  v19[1] = 0;
  uint64_t v20 = static TestingSceneDelegate.connectCallback;
  static TestingSceneDelegate.connectCallback = partial apply for specialized closure #1 in runTestingApp<A, B>(rootView:comparisonView:didLaunch:);
  qword_1E90FC898 = v18;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v20);
  type metadata accessor for TestingAppDelegate();
  uint64_t v21 = (char **)MEMORY[0x18C117520]();
  closure #1 in KitRendererCommon(_:)(v21);
}

uint64_t closure #1 in _TestApp.runPerformanceTests(_:)()
{
  swift_unknownObjectRetain();

  return static _TestApp.host.setter();
}

uint64_t outlined init with take of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t objectdestroy_3Tm_0()
{
  type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>();
  uint64_t v2 = v1 - 8;
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v4 = v0 + ((v3 + 16) & ~v3);
  swift_release();
  swift_release();
  uint64_t v5 = v4 + *(int *)(v2 + 60);
  type metadata accessor for <<opaque return type of static _TestApp.rootViewIdentifier>>.0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in _TestApp.runBenchmarks(_:)()
{
  _TestApp.performBenchmarks(_:with:)(v0[2], v0[3], v0[4]);
}

void partial apply for closure #1 in _TestApp.performBenchmarks(_:with:)()
{
  closure #1 in _TestApp.performBenchmarks(_:with:)(v0[2], v0[3], v0[4]);
}

uint64_t destroy for _SceneInputs()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _SceneInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _SceneInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

__n128 __swift_memcpy60_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for _SceneInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for _SceneInputs(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 60)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _SceneInputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 60) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 60) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _SceneInputs()
{
  return &type metadata for _SceneInputs;
}

uint64_t _SceneInputs.append<A, B>(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F40FDB48](a1, a3);
}

uint64_t _SceneInputs.popLast<A, B>(_:)()
{
  return _GraphInputs.popLast<A, B>(_:)();
}

uint64_t type metadata completion function for ResolvedContentUnavailableView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for ResolvedContentUnavailableView(unint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a3[2];
  uint64_t v6 = a3[3];
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(v6 - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = v9 + v11;
  uint64_t v13 = *(void *)(v10 + 64);
  uint64_t v14 = a3[4];
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(_DWORD *)(v15 + 80);
  uint64_t v17 = v13 + v16;
  unint64_t v18 = ((v13 + v16 + ((v9 + v11 + ((v8 + 16) & ~v8)) & ~v11)) & ~v16) + *(void *)(v15 + 64);
  unint64_t v19 = v11 | v8 | v16;
  if (v19 > 7 || ((*(_DWORD *)(v10 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v15 + 80)) & 0x100000) != 0 || v18 > 0x18)
  {
    uint64_t v22 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v22 + ((v19 & 0xF8 ^ 0x1F8) & (v19 + 16));
    swift_retain();
  }
  else
  {
    uint64_t v28 = v5;
    uint64_t v29 = ~v11;
    uint64_t v30 = v6;
    uint64_t v31 = ~v16;
    uint64_t v32 = v14;
    uint64_t v23 = *(void *)a2;
    char v24 = *(unsigned char *)(a2 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)a2, v24);
    *(void *)a1 = v23;
    *(unsigned char *)(a1 + 8) = v24;
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    uint64_t v25 = (a2 + v8 + 16) & ~v8;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 16))((a1 + v8 + 16) & ~v8, v25, v28);
    uint64_t v26 = (((a1 + v8 + 16) & ~v8) + v12) & v29;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v26, (v25 + v12) & v29, v30);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))((v26 + v17) & v31, (((v25 + v12) & v29) + v17) & v31, v32);
  }
  return a1;
}

uint64_t destroy for ResolvedContentUnavailableView(uint64_t a1, void *a2)
{
  outlined consume of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  uint64_t v4 = *(void *)(a2[2] - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v6);
  uint64_t v7 = *(void *)(v5 + 56);
  uint64_t v8 = *(void *)(a2[3] - 8);
  uint64_t v9 = v8 + 8;
  unint64_t v10 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t))(v8 + 8))(v10);
  uint64_t v11 = *(void *)(a2[4] - 8);
  uint64_t v12 = *(uint64_t (**)(unint64_t))(v11 + 8);
  unint64_t v13 = (v10 + *(void *)(v9 + 56) + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);

  return v12(v13);
}

uint64_t initializeWithCopy for ResolvedContentUnavailableView(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  uint64_t v8 = *(void *)(a3[2] - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (v10 + 16 + a1) & ~v10;
  uint64_t v12 = (v10 + 16 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v11, v12);
  uint64_t v13 = *(void *)(v9 + 48);
  uint64_t v14 = *(void *)(a3[3] - 8);
  uint64_t v15 = v14 + 16;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 16))(v18, v19);
  uint64_t v20 = *(void *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v20 + 16))((*(void *)(v15 + 48) + *(unsigned __int8 *)(v20 + 80) + v18) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80), (*(void *)(v15 + 48) + *(unsigned __int8 *)(v20 + 80) + v19) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
  return a1;
}

uint64_t assignWithCopy for ResolvedContentUnavailableView(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  uint64_t v10 = *(void *)(a3[2] - 8);
  uint64_t v11 = v10 + 24;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 16 + a1) & ~v12;
  uint64_t v14 = (v12 + 16 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v13, v14);
  uint64_t v15 = *(void *)(v11 + 40);
  uint64_t v16 = *(void *)(a3[3] - 8);
  uint64_t v17 = v16 + 24;
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = v15 + v18;
  uint64_t v20 = (v19 + v13) & ~v18;
  uint64_t v21 = (v19 + v14) & ~v18;
  (*(void (**)(uint64_t, uint64_t))(v16 + 24))(v20, v21);
  uint64_t v22 = *(void *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v22 + 24))((*(void *)(v17 + 40) + *(unsigned __int8 *)(v22 + 80) + v20) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80), (*(void *)(v17 + 40) + *(unsigned __int8 *)(v22 + 80) + v21) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
  return a1;
}

_OWORD *initializeWithTake for ResolvedContentUnavailableView(_OWORD *a1, _OWORD *a2, void *a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(a3[2] - 8);
  uint64_t v6 = v5 + 32;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 32);
  uint64_t v11 = *(void *)(a3[3] - 8);
  uint64_t v12 = v11 + 32;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = v10 + v13;
  uint64_t v15 = (v14 + v8) & ~v13;
  uint64_t v16 = (v14 + v9) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v15, v16);
  uint64_t v17 = *(void *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 32))((*(void *)(v12 + 32) + *(unsigned __int8 *)(v17 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), (*(void *)(v12 + 32) + *(unsigned __int8 *)(v17 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return a1;
}

uint64_t assignWithTake for ResolvedContentUnavailableView(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
  uint64_t v10 = *(void *)(a3[2] - 8);
  uint64_t v11 = v10 + 40;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 16 + a1) & ~v12;
  uint64_t v14 = ((unint64_t)a2 + v12 + 16) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v13, v14);
  uint64_t v15 = *(void *)(v11 + 24);
  uint64_t v16 = *(void *)(a3[3] - 8);
  uint64_t v17 = v16 + 40;
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = v15 + v18;
  uint64_t v20 = (v19 + v13) & ~v18;
  uint64_t v21 = (v19 + v14) & ~v18;
  (*(void (**)(uint64_t, uint64_t))(v16 + 40))(v20, v21);
  uint64_t v22 = *(void *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v22 + 40))((*(void *)(v17 + 24) + *(unsigned __int8 *)(v22 + 80) + v20) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80), (*(void *)(v17 + 24) + *(unsigned __int8 *)(v22 + 80) + v21) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedContentUnavailableView(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(a3[3] - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v6 <= v8) {
    unsigned int v9 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v9 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v10 = a3[4];
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = *(void *)(*(void *)(a3[2] - 8) + 64);
  uint64_t v14 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
  if (v9 <= *(_DWORD *)(v11 + 84)) {
    unsigned int v16 = *(_DWORD *)(v11 + 84);
  }
  else {
    unsigned int v16 = v9;
  }
  if (v16 <= 0xFE) {
    unsigned int v17 = 254;
  }
  else {
    unsigned int v17 = v16;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v18 = *(void *)(*(void *)(a3[3] - 8) + 64) + v15;
  int v19 = a2 - v17;
  if (a2 <= v17) {
    goto LABEL_31;
  }
  uint64_t v20 = ((v18 + ((v13 + v14 + ((v12 + 16) & ~v12)) & ~v14)) & ~v15) + *(void *)(*(void *)(v10 - 8) + 64);
  char v21 = 8 * v20;
  if (v20 > 3) {
    goto LABEL_13;
  }
  unsigned int v24 = ((v19 + ~(-1 << v21)) >> v21) + 1;
  if (HIWORD(v24))
  {
    int v22 = *(_DWORD *)((char *)a1 + v20);
    if (v22) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v24 <= 0xFF)
    {
      if (v24 < 2) {
        goto LABEL_31;
      }
LABEL_13:
      int v22 = *((unsigned __int8 *)a1 + v20);
      if (!*((unsigned char *)a1 + v20)) {
        goto LABEL_31;
      }
LABEL_21:
      int v25 = (v22 - 1) << v21;
      if (v20 > 3) {
        int v25 = 0;
      }
      if (v20)
      {
        if (v20 <= 3) {
          int v26 = ((v18 + ((v13 + v14 + ((v12 + 16) & ~v12)) & ~v14)) & ~v15)
        }
              + *(_DWORD *)(*(void *)(v10 - 8) + 64);
        else {
          int v26 = 4;
        }
        switch(v26)
        {
          case 2:
            int v27 = *a1;
            break;
          case 3:
            int v27 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v27 = *(_DWORD *)a1;
            break;
          default:
            int v27 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v27 = 0;
      }
      return v17 + (v27 | v25) + 1;
    }
    int v22 = *(unsigned __int16 *)((char *)a1 + v20);
    if (*(unsigned __int16 *)((char *)a1 + v20)) {
      goto LABEL_21;
    }
  }
LABEL_31:
  if (v16 <= 0xFE)
  {
    unsigned int v28 = *((unsigned __int8 *)a1 + 8);
    if (v28 > 1) {
      return (v28 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  uint64_t v29 = ((unint64_t)a1 + v12 + 16) & ~v12;
  if (v6 == v17)
  {
    uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    uint64_t v31 = *(unsigned int *)(v5 + 84);
    uint64_t v32 = a3[2];
    return v30(v29, v31, v32);
  }
  uint64_t v33 = (v29 + v13 + v14) & ~v14;
  if (v8 != v17)
  {
    uint64_t v29 = (v18 + v33) & ~v15;
    uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
    uint64_t v31 = *(unsigned int *)(v11 + 84);
    uint64_t v32 = a3[4];
    return v30(v29, v31, v32);
  }
  uint64_t v34 = *(uint64_t (**)(uint64_t))(v7 + 48);
  return v34(v33);
}

void storeEnumTagSinglePayload for ResolvedContentUnavailableView(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v6 = *(void *)(a4[2] - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = a4[3];
  uint64_t v9 = a4[4];
  uint64_t v10 = *(void *)(v8 - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  if (v7 <= v11) {
    unsigned int v12 = *(_DWORD *)(v10 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v13 = *(void *)(v9 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v15 = *(void *)(*(void *)(a4[2] - 8) + 64);
  uint64_t v16 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v17 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v18 = *(unsigned __int8 *)(v13 + 80);
  if (v12 <= *(_DWORD *)(v13 + 84)) {
    unsigned int v19 = *(_DWORD *)(v13 + 84);
  }
  else {
    unsigned int v19 = v12;
  }
  if (v19 <= 0xFE) {
    unsigned int v20 = 254;
  }
  else {
    unsigned int v20 = v19;
  }
  uint64_t v21 = v17 + v18;
  size_t v22 = ((v17 + v18 + ((v15 + v16 + ((v14 + 16) & ~v14)) & ~v16)) & ~v18) + *(void *)(*(void *)(v9 - 8) + 64);
  BOOL v23 = a3 >= v20;
  unsigned int v24 = a3 - v20;
  if (v24 != 0 && v23)
  {
    if (v22 <= 3)
    {
      unsigned int v28 = ((v24 + ~(-1 << (8 * v22))) >> (8 * v22)) + 1;
      if (HIWORD(v28))
      {
        int v25 = 4;
      }
      else if (v28 >= 0x100)
      {
        int v25 = 2;
      }
      else
      {
        int v25 = v28 > 1;
      }
    }
    else
    {
      int v25 = 1;
    }
  }
  else
  {
    int v25 = 0;
  }
  if (v20 < a2)
  {
    unsigned int v26 = ~v20 + a2;
    if (v22 < 4)
    {
      int v27 = (v26 >> (8 * v22)) + 1;
      if (v22)
      {
        int v29 = v26 & ~(-1 << (8 * v22));
        bzero(a1, v22);
        if (v22 == 3)
        {
          *(_WORD *)a1 = v29;
          a1[2] = BYTE2(v29);
        }
        else if (v22 == 2)
        {
          *(_WORD *)a1 = v29;
        }
        else
        {
          *a1 = v29;
        }
      }
    }
    else
    {
      bzero(a1, v22);
      *(_DWORD *)a1 = v26;
      int v27 = 1;
    }
    switch(v25)
    {
      case 1:
        a1[v22] = v27;
        return;
      case 2:
        *(_WORD *)&a1[v22] = v27;
        return;
      case 3:
        goto LABEL_55;
      case 4:
        *(_DWORD *)&a1[v22] = v27;
        return;
      default:
        return;
    }
  }
  switch(v25)
  {
    case 1:
      a1[v22] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 2:
      *(_WORD *)&a1[v22] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 3:
LABEL_55:
      __break(1u);
      JUMPOUT(0x18771A6B0);
    case 4:
      *(_DWORD *)&a1[v22] = 0;
      goto LABEL_29;
    default:
LABEL_29:
      if (!a2) {
        return;
      }
LABEL_30:
      if (v19 <= 0xFE)
      {
        if (a2 > 0xFE)
        {
          *(void *)a1 = a2 - 255;
          *((void *)a1 + 1) = 0;
        }
        else
        {
          a1[8] = -(char)a2;
        }
        return;
      }
      unint64_t v30 = (unint64_t)&a1[v14 + 16] & ~v14;
      if (v7 == v20)
      {
        uint64_t v31 = *(void (**)(unint64_t))(v6 + 56);
LABEL_36:
        v31(v30);
        return;
      }
      unint64_t v32 = (v30 + v15 + v16) & ~v16;
      if (v11 != v20)
      {
        unint64_t v30 = (v21 + v32) & ~v18;
        uint64_t v31 = *(void (**)(unint64_t))(v13 + 56);
        goto LABEL_36;
      }
      uint64_t v33 = *(void (**)(unint64_t))(v10 + 56);
      v33(v32);
      return;
  }
}

uint64_t type metadata accessor for ResolvedContentUnavailableView()
{
  return swift_getGenericMetadata();
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedContentUnavailableView<A, B, C>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ResolvedContentUnavailableView.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v3 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x1E4F40C60];
  type metadata accessor for InterfaceIdiomPredicate<WidgetInterfaceIdiom>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<WidgetInterfaceIdiom>, MEMORY[0x1E4F406E0], MEMORY[0x1E4F406D8], MEMORY[0x1E4F40C60]);
  uint64_t v4 = a1[2];
  uint64_t v23 = v5;
  uint64_t v24 = v4;
  type metadata accessor for LabelStyleWritingModifier<ContentUnavailableLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<ContentUnavailableLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContentUnavailableLabelStyle and conformance ContentUnavailableLabelStyle, (uint64_t)&unk_1ED452758, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
  type metadata accessor for ModifiedContent();
  uint64_t v6 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F411E8];
  type metadata accessor for Font?(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E4F3F7C8], MEMORY[0x1E4F411E8]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FixedSizeLayout, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FixedSizeLayout, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  uint64_t v22 = a1[3];
  type metadata accessor for ModifiedContent();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for InterfaceIdiomPredicate<WidgetInterfaceIdiom>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E4F40158], MEMORY[0x1E4F40150], v3);
  type metadata accessor for LabelStyleWritingModifier<ContentUnavailableLabelStyle>(255, &lazy cache variable for type metadata for _LayoutRoot<ActionsLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ActionsLayout and conformance ActionsLayout, (uint64_t)&unk_1ED414180, MEMORY[0x1E4F3F598]);
  uint64_t v21 = a1[4];
  type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>();
  type metadata accessor for _VariadicView.Tree();
  lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  type metadata accessor for StaticIf();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  type metadata accessor for Font?(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>, MEMORY[0x1E4F3F470], v6);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FixedSizeLayout, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier>();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v48 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout> and conformance <> StaticIf<A, B, C>();
  uint64_t v45 = swift_getWitnessTable();
  uint64_t v46 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier>);
  uint64_t v43 = swift_getWitnessTable();
  uint64_t v44 = lazy protocol witness table accessor for type StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier>);
  uint64_t v8 = swift_getWitnessTable();
  type metadata accessor for ScrollView();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v49 = v23;
  uint64_t v50 = v7;
  uint64_t v51 = type metadata accessor for ViewThatFits();
  unint64_t v52 = lazy protocol witness table accessor for type InterfaceIdiomPredicate<WidgetInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  uint64_t v9 = type metadata accessor for StaticIf();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  unsigned int v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v21 - v14;
  uint64_t v34 = v24;
  uint64_t v35 = v22;
  uint64_t v16 = a1[5];
  uint64_t v17 = a1[6];
  uint64_t v36 = v21;
  uint64_t v37 = v16;
  uint64_t v18 = a1[7];
  uint64_t v38 = v17;
  uint64_t v39 = v18;
  uint64_t v40 = v25;
  uint64_t v27 = v24;
  uint64_t v28 = v22;
  uint64_t v29 = v21;
  uint64_t v30 = v16;
  uint64_t v31 = v17;
  uint64_t v32 = v18;
  uint64_t v33 = v25;
  StaticIf<>.init<A>(idiom:then:else:)();
  uint64_t v41 = v8;
  uint64_t v42 = &protocol witness table for ViewThatFits<A>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v12);
  unsigned int v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v12, v9);
  static ViewBuilder.buildExpression<A>(_:)(v15);
  return ((uint64_t (*)(char *, uint64_t))v19)(v15, v9);
}

uint64_t ResolvedContentUnavailableView.resolvedBody(iconHidden:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v39 = a1;
  uint64_t v40 = a3;
  uint64_t v37 = *(void *)(a2 + 16);
  type metadata accessor for LabelStyleWritingModifier<ContentUnavailableLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<ContentUnavailableLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContentUnavailableLabelStyle and conformance ContentUnavailableLabelStyle, (uint64_t)&unk_1ED452758, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
  type metadata accessor for ModifiedContent();
  uint64_t v4 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F411E8];
  type metadata accessor for Font?(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E4F3F7C8], MEMORY[0x1E4F411E8]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FixedSizeLayout, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FixedSizeLayout, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  uint64_t v36 = *(void *)(a2 + 24);
  type metadata accessor for ModifiedContent();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for InterfaceIdiomPredicate<WidgetInterfaceIdiom>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E4F40158], MEMORY[0x1E4F40150], MEMORY[0x1E4F40C60]);
  uint64_t v6 = v5;
  type metadata accessor for LabelStyleWritingModifier<ContentUnavailableLabelStyle>(255, &lazy cache variable for type metadata for _LayoutRoot<ActionsLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ActionsLayout and conformance ActionsLayout, (uint64_t)&unk_1ED414180, MEMORY[0x1E4F3F598]);
  uint64_t v33 = *(void *)(a2 + 32);
  type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>();
  uint64_t v63 = v6;
  *(void *)&long long v64 = type metadata accessor for _VariadicView.Tree();
  *((void *)&v64 + 1) = v64;
  *(void *)&long long v65 = lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  type metadata accessor for StaticIf();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  type metadata accessor for Font?(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>, MEMORY[0x1E4F3F470], v4);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v7 = type metadata accessor for VStack();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v29 - v9;
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout>);
  uint64_t v29 = v11;
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v32 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v29 - v13;
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FixedSizeLayout, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier>);
  uint64_t v31 = v15;
  uint64_t v16 = type metadata accessor for ModifiedContent();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v34 = v16;
  uint64_t v35 = v17;
  MEMORY[0x1F4188790](v16);
  uint64_t v30 = (char *)&v29 - v18;
  uint64_t v41 = v37;
  uint64_t v42 = v36;
  uint64_t v43 = v33;
  long long v44 = *(_OWORD *)(a2 + 40);
  uint64_t v45 = *(void *)(a2 + 56);
  uint64_t v46 = v38;
  char v47 = v39;
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  ResolvedContentUnavailableView.marginModifier.getter((uint64_t)&v63);
  LOBYTE(v52) = v63;
  long long v53 = v64;
  long long v54 = v65;
  char v55 = v66;
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x18C113660](&v52, v7, v29, WitnessTable);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  ResolvedContentUnavailableView.macFrameModifier.getter(&v63);
  uint64_t v52 = v63;
  LOBYTE(v53) = v64;
  *((void *)&v53 + 1) = *((void *)&v64 + 1);
  LOBYTE(v54) = v65;
  *((void *)&v54 + 1) = *((void *)&v65 + 1);
  char v55 = v66;
  uint64_t v56 = v67;
  char v57 = v68;
  uint64_t v58 = v69;
  char v59 = v70;
  uint64_t v60 = v71;
  char v61 = v72;
  long long v62 = v73;
  unint64_t v20 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout> and conformance <> StaticIf<A, B, C>();
  uint64_t v50 = WitnessTable;
  unint64_t v51 = v20;
  uint64_t v21 = swift_getWitnessTable();
  uint64_t v22 = v30;
  MEMORY[0x18C113660](&v52, v12, v31, v21);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v12);
  ResolvedContentUnavailableView.macFrameModifier.getter(&v63);
  uint64_t v52 = v63;
  LOBYTE(v53) = v64;
  *((void *)&v53 + 1) = *((void *)&v64 + 1);
  LOBYTE(v54) = v65;
  *((void *)&v54 + 1) = *((void *)&v65 + 1);
  char v55 = v66;
  uint64_t v56 = v67;
  char v57 = v68;
  uint64_t v58 = v69;
  char v59 = v70;
  uint64_t v60 = v71;
  char v61 = v72;
  long long v62 = v73;
  type metadata accessor for StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier>();
  uint64_t v24 = v23;
  uint64_t v25 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier>);
  uint64_t v48 = v21;
  uint64_t v49 = v25;
  uint64_t v26 = v34;
  uint64_t v27 = swift_getWitnessTable();
  MEMORY[0x18C113660](&v52, v26, v24, v27);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v22, v26);
}

uint64_t closure #2 in ResolvedContentUnavailableView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v26 = a7;
  uint64_t v25 = a6;
  uint64_t v24 = a5;
  uint64_t v22 = a3;
  uint64_t v23 = a1;
  uint64_t v27 = a8;
  type metadata accessor for LabelStyleWritingModifier<ContentUnavailableLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<ContentUnavailableLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContentUnavailableLabelStyle and conformance ContentUnavailableLabelStyle, (uint64_t)&unk_1ED452758, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
  type metadata accessor for ModifiedContent();
  uint64_t v10 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F411E8];
  type metadata accessor for Font?(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E4F3F7C8], MEMORY[0x1E4F411E8]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FixedSizeLayout, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FixedSizeLayout, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for InterfaceIdiomPredicate<WidgetInterfaceIdiom>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E4F40158], MEMORY[0x1E4F40150], MEMORY[0x1E4F40C60]);
  uint64_t v12 = v11;
  type metadata accessor for LabelStyleWritingModifier<ContentUnavailableLabelStyle>(255, &lazy cache variable for type metadata for _LayoutRoot<ActionsLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ActionsLayout and conformance ActionsLayout, (uint64_t)&unk_1ED414180, MEMORY[0x1E4F3F598]);
  type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>();
  uint64_t v41 = v12;
  uint64_t v42 = type metadata accessor for _VariadicView.Tree();
  uint64_t v43 = v42;
  unint64_t v44 = lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  type metadata accessor for StaticIf();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  type metadata accessor for Font?(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>, MEMORY[0x1E4F3F470], v10);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FixedSizeLayout, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v40 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout> and conformance <> StaticIf<A, B, C>();
  uint64_t v37 = swift_getWitnessTable();
  uint64_t v38 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier>);
  uint64_t v35 = swift_getWitnessTable();
  uint64_t v36 = lazy protocol witness table accessor for type StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier>);
  swift_getWitnessTable();
  type metadata accessor for ScrollView();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v13 = type metadata accessor for ViewThatFits();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  unsigned int v19 = (char *)&v22 - v18;
  uint64_t v28 = a2;
  uint64_t v29 = v22;
  uint64_t v30 = a4;
  uint64_t v31 = v24;
  uint64_t v32 = v25;
  uint64_t v33 = v26;
  uint64_t v34 = v23;
  ViewThatFits.init(in:content:)();
  static ViewBuilder.buildExpression<A>(_:)(v16);
  unint64_t v20 = *(void (**)(char *, uint64_t))(v14 + 8);
  v20(v16, v13);
  static ViewBuilder.buildExpression<A>(_:)(v19);
  return ((uint64_t (*)(char *, uint64_t))v20)(v19, v13);
}

uint64_t closure #1 in closure #2 in ResolvedContentUnavailableView.body.getter@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v63 = a7;
  uint64_t v59 = a6;
  unint64_t v58 = a5;
  char v57 = a2;
  uint64_t v60 = a8;
  type metadata accessor for LabelStyleWritingModifier<ContentUnavailableLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<ContentUnavailableLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContentUnavailableLabelStyle and conformance ContentUnavailableLabelStyle, (uint64_t)&unk_1ED452758, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
  type metadata accessor for ModifiedContent();
  uint64_t v11 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F411E8];
  type metadata accessor for Font?(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E4F3F7C8], MEMORY[0x1E4F411E8]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FixedSizeLayout, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FixedSizeLayout, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for InterfaceIdiomPredicate<WidgetInterfaceIdiom>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E4F40158], MEMORY[0x1E4F40150], MEMORY[0x1E4F40C60]);
  uint64_t v13 = v12;
  type metadata accessor for LabelStyleWritingModifier<ContentUnavailableLabelStyle>(255, &lazy cache variable for type metadata for _LayoutRoot<ActionsLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ActionsLayout and conformance ActionsLayout, (uint64_t)&unk_1ED414180, MEMORY[0x1E4F3F598]);
  type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>();
  uint64_t v74 = v13;
  uint64_t v75 = type metadata accessor for _VariadicView.Tree();
  uint64_t v76 = v75;
  unint64_t v77 = lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  type metadata accessor for StaticIf();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  type metadata accessor for Font?(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>, MEMORY[0x1E4F3F470], v11);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FixedSizeLayout, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier>();
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v85 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout> and conformance <> StaticIf<A, B, C>();
  uint64_t v15 = MEMORY[0x1E4F3FBC0];
  uint64_t v82 = swift_getWitnessTable();
  uint64_t v83 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier>);
  uint64_t v56 = v15;
  uint64_t v80 = swift_getWitnessTable();
  uint64_t v81 = lazy protocol witness table accessor for type StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier>);
  uint64_t v16 = v14;
  uint64_t v61 = swift_getWitnessTable();
  uint64_t v47 = type metadata accessor for ScrollView();
  uint64_t v54 = *(void *)(v47 - 8);
  MEMORY[0x1F4188790](v47);
  uint64_t v49 = (uint64_t)&v46 - v17;
  uint64_t v53 = type metadata accessor for ModifiedContent();
  uint64_t v55 = *(void *)(v53 - 8);
  MEMORY[0x1F4188790](v53);
  uint64_t v48 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v52 = (char *)&v46 - v20;
  uint64_t v62 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v46 = (char *)&v46 - v25;
  uint64_t v26 = v57;
  uint64_t v74 = v57;
  uint64_t v75 = a3;
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v76 = a4;
  unint64_t v29 = v58;
  uint64_t v30 = v59;
  unint64_t v77 = v58;
  uint64_t v78 = v59;
  uint64_t v79 = v63;
  uint64_t v31 = type metadata accessor for ResolvedContentUnavailableView();
  ResolvedContentUnavailableView.resolvedBody(iconHidden:)(0, v31, (uint64_t)v23);
  uint64_t v32 = v16;
  static ViewBuilder.buildExpression<A>(_:)(v23);
  uint64_t v50 = *(void (**)(char *, uint64_t))(v62 + 8);
  uint64_t v51 = v62 + 8;
  uint64_t v33 = v23;
  v50(v23, v32);
  long long v64 = v26;
  uint64_t v65 = v27;
  uint64_t v66 = v28;
  unint64_t v67 = v29;
  uint64_t v68 = v30;
  uint64_t v69 = v63;
  uint64_t v70 = a1;
  uint64_t v34 = v49;
  ScrollView.init(_:content:)(2, (uint64_t (*)(uint64_t))partial apply for closure #1 in closure #1 in closure #2 in ResolvedContentUnavailableView.body.getter, v49);
  LOBYTE(v74) = 2;
  uint64_t v35 = v47;
  uint64_t v36 = swift_getWitnessTable();
  uint64_t v37 = v48;
  View.scrollBounceBehavior(_:axes:)(&v74, 2, v35);
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v34, v35);
  v73[2] = v36;
  v73[3] = &protocol witness table for TransformScrollBounceBehavior;
  uint64_t v38 = v53;
  uint64_t v39 = swift_getWitnessTable();
  unint64_t v40 = v52;
  static ViewBuilder.buildExpression<A>(_:)(v37);
  uint64_t v41 = v55;
  uint64_t v42 = *(void (**)(char *, uint64_t))(v55 + 8);
  v42(v37, v38);
  uint64_t v43 = v46;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v33, v46, v32);
  uint64_t v74 = v33;
  (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v37, v40, v38);
  uint64_t v75 = (uint64_t)v37;
  v73[0] = v32;
  v73[1] = v38;
  uint64_t v71 = v61;
  uint64_t v72 = v39;
  static ViewBuilder.buildBlock<each A>(_:)((uint64_t)&v74, 2uLL, (uint64_t)v73);
  v42(v40, v38);
  unint64_t v44 = (uint64_t (*)(char *, uint64_t))v50;
  v50(v43, v32);
  v42(v37, v38);
  return v44(v33, v32);
}

uint64_t closure #1 in ResolvedContentUnavailableView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  int v35 = a8;
  uint64_t v32 = a6;
  uint64_t v33 = a7;
  uint64_t v30 = a2;
  unint64_t v31 = a5;
  uint64_t v28 = a4;
  uint64_t v29 = a3;
  uint64_t v34 = a1;
  uint64_t v36 = a9;
  type metadata accessor for LabelStyleWritingModifier<ContentUnavailableLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<ContentUnavailableLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContentUnavailableLabelStyle and conformance ContentUnavailableLabelStyle, (uint64_t)&unk_1ED452758, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
  type metadata accessor for ModifiedContent();
  uint64_t v9 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F411E8];
  type metadata accessor for Font?(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E4F3F7C8], MEMORY[0x1E4F411E8]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FixedSizeLayout, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FixedSizeLayout, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for InterfaceIdiomPredicate<WidgetInterfaceIdiom>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E4F40158], MEMORY[0x1E4F40150], MEMORY[0x1E4F40C60]);
  uint64_t v11 = v10;
  type metadata accessor for LabelStyleWritingModifier<ContentUnavailableLabelStyle>(255, &lazy cache variable for type metadata for _LayoutRoot<ActionsLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ActionsLayout and conformance ActionsLayout, (uint64_t)&unk_1ED414180, MEMORY[0x1E4F3F598]);
  type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>();
  uint64_t v43 = v11;
  uint64_t v44 = type metadata accessor for _VariadicView.Tree();
  uint64_t v45 = v44;
  unint64_t v46 = lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  type metadata accessor for StaticIf();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  type metadata accessor for Font?(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>, MEMORY[0x1E4F3F470], v9);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FixedSizeLayout, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier>();
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v28 - v17;
  uint64_t v43 = v30;
  uint64_t v44 = v29;
  uint64_t v45 = v28;
  unint64_t v46 = v31;
  uint64_t v47 = v32;
  uint64_t v48 = v33;
  uint64_t v19 = type metadata accessor for ResolvedContentUnavailableView();
  ResolvedContentUnavailableView.resolvedBody(iconHidden:)(v35, v19, (uint64_t)v15);
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v21 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout> and conformance <> StaticIf<A, B, C>();
  uint64_t v41 = WitnessTable;
  unint64_t v42 = v21;
  uint64_t v22 = swift_getWitnessTable();
  uint64_t v23 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier>);
  uint64_t v39 = v22;
  uint64_t v40 = v23;
  uint64_t v24 = swift_getWitnessTable();
  uint64_t v25 = lazy protocol witness table accessor for type StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier>);
  uint64_t v37 = v24;
  uint64_t v38 = v25;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v15);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v13 + 8);
  v26(v15, v12);
  static ViewBuilder.buildExpression<A>(_:)(v18);
  return ((uint64_t (*)(char *, uint64_t))v26)(v18, v12);
}

uint64_t closure #1 in ResolvedContentUnavailableView.resolvedBody(iconHidden:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v92 = a4;
  uint64_t v93 = a8;
  uint64_t v94 = a1;
  uint64_t v95 = a7;
  unint64_t v90 = a6;
  uint64_t v91 = a5;
  LODWORD(v77) = a2;
  uint64_t v87 = a9;
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
  type metadata accessor for ModifiedContent();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0]);
  type metadata accessor for ModifiedContent();
  uint64_t v10 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F411E8];
  type metadata accessor for Font?(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E4F3F7C8], MEMORY[0x1E4F411E8]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for InterfaceIdiomPredicate<WidgetInterfaceIdiom>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E4F40158], MEMORY[0x1E4F40150], MEMORY[0x1E4F40C60]);
  uint64_t v12 = v11;
  type metadata accessor for LabelStyleWritingModifier<ContentUnavailableLabelStyle>(255, &lazy cache variable for type metadata for _LayoutRoot<ActionsLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ActionsLayout and conformance ActionsLayout, (uint64_t)&unk_1ED414180, MEMORY[0x1E4F3F598]);
  type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>();
  uint64_t KeyPath = v12;
  uint64_t v108 = type metadata accessor for _VariadicView.Tree();
  uint64_t v109 = v108;
  unint64_t v110 = lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  type metadata accessor for StaticIf();
  swift_getTupleTypeMetadata2();
  uint64_t v83 = type metadata accessor for TupleView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v79 = type metadata accessor for VStack();
  uint64_t v86 = *(void *)(v79 - 8);
  MEMORY[0x1F4188790](v79);
  uint64_t v80 = (char *)&v65 - v13;
  type metadata accessor for Font?(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>, MEMORY[0x1E4F3F470], v10);
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v84 = v14;
  uint64_t v85 = v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v78 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v81 = (char *)&v65 - v18;
  type metadata accessor for LabelStyleWritingModifier<ContentUnavailableLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<ContentUnavailableLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContentUnavailableLabelStyle and conformance ContentUnavailableLabelStyle, (uint64_t)&unk_1ED452758, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
  uint64_t v19 = type metadata accessor for ModifiedContent();
  uint64_t v73 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  unint64_t v21 = (char *)&v65 - v20;
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>);
  uint64_t v67 = v22;
  uint64_t v23 = type metadata accessor for ModifiedContent();
  uint64_t v74 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v65 = (char *)&v65 - v24;
  uint64_t v25 = type metadata accessor for ModifiedContent();
  uint64_t v75 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v66 = (char *)&v65 - v26;
  uint64_t v71 = type metadata accessor for ModifiedContent();
  uint64_t v76 = *(void *)(v71 - 8);
  MEMORY[0x1F4188790](v71);
  uint64_t v68 = (char *)&v65 - v27;
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FixedSizeLayout, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FixedSizeLayout, EmptyModifier>);
  uint64_t v72 = v28;
  uint64_t v29 = type metadata accessor for ModifiedContent();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v88 = v29;
  uint64_t v89 = v30;
  MEMORY[0x1F4188790](v29);
  uint64_t v69 = (char *)&v65 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v32);
  uint64_t v96 = (char *)&v65 - v33;
  uint64_t v70 = a3;
  uint64_t KeyPath = a3;
  uint64_t v108 = v92;
  uint64_t v34 = v90;
  uint64_t v109 = v91;
  unint64_t v110 = v90;
  uint64_t v111 = v95;
  uint64_t v112 = v93;
  type metadata accessor for ResolvedContentUnavailableView();
  uint64_t KeyPath = swift_getKeyPath();
  LOBYTE(v108) = 0;
  HIDWORD(v108) = 1;
  LOBYTE(v109) = v77;
  lazy protocol witness table accessor for type ContentUnavailableLabelStyle and conformance ContentUnavailableLabelStyle();
  int v35 = v21;
  View.labelStyle<A>(_:)((uint64_t)&KeyPath, a3, (uint64_t)&unk_1ED452758, v34);
  swift_release();
  unint64_t v36 = lazy protocol witness table accessor for type LabelStyleWritingModifier<ContentUnavailableLabelStyle> and conformance LabelStyleWritingModifier<A>();
  v106[12] = v34;
  v106[13] = v36;
  uint64_t v37 = swift_getWitnessTable();
  uint64_t v38 = v65;
  MEMORY[0x18C113660](v37, v19, v67, v37);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v35, v19);
  static Font.title2.getter();
  unint64_t v39 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v106[10] = v37;
  v106[11] = v39;
  uint64_t v40 = swift_getWitnessTable();
  uint64_t v41 = v66;
  View.font(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v74 + 8))(v38, v23);
  uint64_t v42 = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
  v106[8] = v40;
  v106[9] = v42;
  uint64_t v43 = swift_getWitnessTable();
  uint64_t v44 = v68;
  View.multilineTextAlignment(_:)();
  (*(void (**)(char *, uint64_t))(v75 + 8))(v41, v25);
  LOWORD(KeyPath) = 256;
  uint64_t v45 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TextAlignment> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E4F3F7C8]);
  v106[6] = v43;
  v106[7] = v45;
  uint64_t v46 = v71;
  uint64_t v47 = swift_getWitnessTable();
  uint64_t v48 = v69;
  MEMORY[0x18C113660](&KeyPath, v46, v72, v47);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v44, v46);
  uint64_t v49 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FixedSizeLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FixedSizeLayout, EmptyModifier>);
  v106[4] = v47;
  v106[5] = v49;
  uint64_t v50 = v88;
  uint64_t v75 = swift_getWitnessTable();
  uint64_t v51 = (uint64_t)v48;
  static ViewBuilder.buildExpression<A>(_:)(v48);
  uint64_t v76 = *(void *)(v89 + 8);
  uint64_t v77 = v89 + 8;
  ((void (*)(char *, uint64_t))v76)(v48, v50);
  uint64_t v97 = v70;
  uint64_t v98 = v92;
  uint64_t v99 = v91;
  unint64_t v100 = v90;
  uint64_t v101 = v95;
  uint64_t v102 = v93;
  uint64_t v103 = v94;
  static HorizontalAlignment.center.getter();
  uint64_t v52 = v80;
  VStack.init(alignment:spacing:content:)();
  LOBYTE(KeyPath) = 1;
  uint64_t v53 = v79;
  uint64_t v54 = swift_getWitnessTable();
  uint64_t v55 = v78;
  View.controlSize(_:)();
  (*(void (**)(char *, uint64_t))(v86 + 8))(v52, v53);
  uint64_t v56 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>, MEMORY[0x1E4F3F470]);
  v106[2] = v54;
  v106[3] = v56;
  uint64_t v57 = v84;
  uint64_t v58 = swift_getWitnessTable();
  uint64_t v59 = v81;
  static ViewBuilder.buildExpression<A>(_:)(v55);
  uint64_t v60 = v85;
  uint64_t v61 = *(void (**)(char *, uint64_t))(v85 + 8);
  v61(v55, v57);
  uint64_t v62 = v88;
  (*(void (**)(uint64_t, char *, uint64_t))(v89 + 16))(v51, v96, v88);
  uint64_t KeyPath = v51;
  (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v55, v59, v57);
  uint64_t v108 = (uint64_t)v55;
  v106[0] = v62;
  v106[1] = v57;
  uint64_t v104 = v75;
  uint64_t v105 = v58;
  static ViewBuilder.buildBlock<each A>(_:)((uint64_t)&KeyPath, 2uLL, (uint64_t)v106);
  v61(v59, v57);
  uint64_t v63 = (uint64_t (*)(uint64_t, uint64_t))v76;
  ((void (*)(char *, uint64_t))v76)(v96, v62);
  v61(v55, v57);
  return v63(v51, v62);
}

uint64_t closure #1 in closure #1 in ResolvedContentUnavailableView.resolvedBody(iconHidden:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void (*a6)(void, void)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v47 = a7;
  uint64_t v52 = a6;
  uint64_t v51 = a5;
  uint64_t v49 = a4;
  uint64_t v50 = a2;
  uint64_t v61 = a1;
  uint64_t v59 = a8;
  type metadata accessor for InterfaceIdiomPredicate<WidgetInterfaceIdiom>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E4F40158], MEMORY[0x1E4F40150], MEMORY[0x1E4F40C60]);
  uint64_t v11 = v10;
  type metadata accessor for LabelStyleWritingModifier<ContentUnavailableLabelStyle>(255, &lazy cache variable for type metadata for _LayoutRoot<ActionsLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ActionsLayout and conformance ActionsLayout, (uint64_t)&unk_1ED414180, MEMORY[0x1E4F3F598]);
  type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>();
  uint64_t v55 = type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>();
  uint64_t v78 = v11;
  uint64_t v79 = type metadata accessor for _VariadicView.Tree();
  uint64_t v56 = v79;
  uint64_t v80 = v79;
  uint64_t v81 = (void *)lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  uint64_t v57 = type metadata accessor for StaticIf();
  uint64_t v58 = *(void *)(v57 - 8);
  MEMORY[0x1F4188790](v57);
  uint64_t v53 = (uint64_t)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v54 = (char *)&v46 - v14;
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
  uint64_t v15 = type metadata accessor for ModifiedContent();
  uint64_t v46 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v46 - v16;
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0]);
  uint64_t v18 = type metadata accessor for ModifiedContent();
  uint64_t v48 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v46 - v19;
  type metadata accessor for Font?(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E4F3F7C8], MEMORY[0x1E4F411E8]);
  uint64_t v21 = type metadata accessor for ModifiedContent();
  uint64_t v62 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v60 = (char *)&v46 - v25;
  uint64_t v78 = (char *)v50;
  uint64_t v79 = a3;
  uint64_t v80 = v49;
  uint64_t v81 = v51;
  uint64_t v26 = v52;
  uint64_t v82 = v52;
  uint64_t v83 = a7;
  uint64_t v51 = (void *)type metadata accessor for ResolvedContentUnavailableView();
  static Font.subheadline.getter();
  View.font(_:)();
  swift_release();
  static Color.secondary.getter();
  uint64_t v27 = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
  uint64_t v76 = v26;
  uint64_t v77 = v27;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.defaultForegroundColor(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v17, v15);
  uint64_t v29 = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0]);
  uint64_t v74 = WitnessTable;
  uint64_t v75 = v29;
  uint64_t v30 = swift_getWitnessTable();
  View.multilineTextAlignment(_:)();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v20, v18);
  uint64_t v31 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TextAlignment> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E4F3F7C8]);
  uint64_t v72 = v30;
  uint64_t v73 = v31;
  uint64_t v32 = v21;
  uint64_t v50 = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v23);
  uint64_t v33 = *(void (**)(void, void))(v62 + 8);
  uint64_t v49 = v62 + 8;
  uint64_t v52 = v33;
  v33(v23, v21);
  uint64_t v34 = v53;
  ResolvedContentUnavailableView.resolvedActions.getter(v51, v53);
  unint64_t v35 = lazy protocol witness table accessor for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>();
  uint64_t v36 = lazy protocol witness table accessor for type StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>);
  uint64_t v70 = v47;
  uint64_t v71 = v36;
  uint64_t v37 = swift_getWitnessTable();
  unint64_t v68 = v35;
  uint64_t v69 = v37;
  uint64_t v66 = swift_getWitnessTable();
  uint64_t v67 = v66;
  uint64_t v38 = v57;
  uint64_t v39 = swift_getWitnessTable();
  uint64_t v40 = v54;
  static ViewBuilder.buildExpression<A>(_:)(v34);
  uint64_t v41 = v58;
  uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
  v42(v34, v38);
  uint64_t v43 = v60;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v23, v60, v32);
  uint64_t v78 = v23;
  (*(void (**)(uint64_t, char *, uint64_t))(v41 + 16))(v34, v40, v38);
  uint64_t v79 = v34;
  v65[0] = v32;
  v65[1] = v38;
  uint64_t v63 = v50;
  uint64_t v64 = v39;
  static ViewBuilder.buildBlock<each A>(_:)((uint64_t)&v78, 2uLL, (uint64_t)v65);
  v42((uint64_t)v40, v38);
  uint64_t v44 = (uint64_t (*)(char *, uint64_t))v52;
  v52(v43, v32);
  v42(v34, v38);
  return v44(v23, v32);
}

uint64_t ResolvedContentUnavailableView.resolvedActions.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v31 = a2;
  type metadata accessor for InterfaceIdiomPredicate<WidgetInterfaceIdiom>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E4F40158], MEMORY[0x1E4F40150], MEMORY[0x1E4F40C60]);
  uint64_t v4 = v3;
  type metadata accessor for LabelStyleWritingModifier<ContentUnavailableLabelStyle>(255, &lazy cache variable for type metadata for _LayoutRoot<ActionsLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ActionsLayout and conformance ActionsLayout, (uint64_t)&unk_1ED414180, MEMORY[0x1E4F3F598]);
  uint64_t v5 = a1[4];
  type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>();
  uint64_t v6 = type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>();
  uint64_t v28 = v6;
  uint64_t v52 = v4;
  uint64_t v53 = type metadata accessor for _VariadicView.Tree();
  uint64_t v54 = v53;
  unint64_t v55 = lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  uint64_t v7 = type metadata accessor for StaticIf();
  uint64_t v30 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v28 - v11;
  uint64_t v29 = *(void *)(v6 - 8);
  double v14 = MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v28 - v15;
  uint64_t v17 = a1[7];
  MEMORY[0x18C113660](v14);
  uint64_t v18 = a1[3];
  uint64_t v39 = a1[2];
  uint64_t v40 = v18;
  uint64_t v19 = a1[5];
  uint64_t v20 = a1[6];
  uint64_t v41 = v5;
  uint64_t v42 = v19;
  uint64_t v43 = v20;
  uint64_t v44 = v17;
  uint64_t v45 = v16;
  uint64_t v32 = v39;
  uint64_t v33 = v18;
  uint64_t v34 = v5;
  uint64_t v35 = v19;
  uint64_t v36 = v20;
  uint64_t v37 = v17;
  uint64_t v38 = v16;
  unint64_t v21 = lazy protocol witness table accessor for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>();
  uint64_t v22 = lazy protocol witness table accessor for type StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>);
  uint64_t v50 = v17;
  uint64_t v51 = v22;
  uint64_t v23 = v28;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v48 = v21;
  uint64_t v49 = WitnessTable;
  uint64_t v27 = swift_getWitnessTable();
  StaticIf<>.init<A>(idiom:then:else:)();
  uint64_t v46 = v27;
  uint64_t v47 = v27;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v9);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v30 + 8);
  v25(v9, v7);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  v25(v12, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v16, v23);
}

uint64_t ResolvedContentUnavailableView.marginModifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  char v4 = *(unsigned char *)(v1 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v1, v4);
  specialized Environment.wrappedValue.getter(v3, v4, &v14);
  if (v14 > 6u)
  {
    EdgeInsets.init(_all:)();
    double v5 = v9;
    uint64_t v6 = v10;
    double v7 = v11;
    uint64_t v8 = v12;
    outlined consume of Environment<Bool>.Content(v3, v4);
  }
  else
  {
    outlined consume of Environment<Bool>.Content(v3, v4);
    double v5 = 16.0;
    uint64_t v6 = 0x4040000000000000;
    double v7 = 16.0;
    uint64_t v8 = 0x4040000000000000;
  }
  uint64_t result = static Edge.Set.all.getter();
  *(unsigned char *)a1 = result;
  *(double *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(double *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 40) = 0;
  return result;
}

__n128 ResolvedContentUnavailableView.macFrameModifier.getter@<Q0>(_OWORD *a1@<X8>)
{
  static Alignment.center.getter();
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  *a1 = v3;
  a1[1] = v4;
  __n128 result = v6;
  a1[2] = v5;
  a1[3] = v6;
  return result;
}

uint64_t (*implicit closure #1 in closure #1 in ResolvedContentUnavailableView.resolvedActions.getter(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))()
{
  char v12 = *a1;
  uint64_t v13 = *((void *)a1 + 1);
  char v14 = a1[16];
  int v15 = *((_DWORD *)a1 + 5);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  *(void *)(v16 + 32) = a4;
  *(void *)(v16 + 40) = a5;
  *(void *)(v16 + 48) = a6;
  *(void *)(v16 + 56) = a7;
  *(unsigned char *)(v16 + 64) = v12;
  *(void *)(v16 + 72) = v13;
  *(unsigned char *)(v16 + 80) = v14;
  *(_DWORD *)(v16 + 84) = v15;
  outlined copy of Environment<Bool>.Content(v13, v14);
  return partial apply for implicit closure #2 in implicit closure #1 in closure #2 in ResolvedContentUnavailableView.resolvedActions.getter;
}

uint64_t Layout.callAsFunction<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  v19[0] = a6;
  v19[1] = a7;
  uint64_t v13 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  int v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for _LayoutRoot();
  double v17 = MEMORY[0x1F4188790](v16);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v15, v7, a3, v17);
  _LayoutRoot.init(_:)();
  v19[4] = a3;
  v19[5] = a4;
  v19[6] = a5;
  v19[7] = v19[0];
  v19[8] = a1;
  v19[9] = a2;
  swift_getWitnessTable();
  return _VariadicView.Tree.init(_:content:)();
}

uint64_t closure #1 in ResolvedContentUnavailableView.resolvedActions.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t (*a10)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a11)
{
  uint64_t v37 = a7;
  uint64_t v42 = a9;
  uint64_t v40 = a1;
  uint64_t v41 = a11;
  type metadata accessor for LabelStyleWritingModifier<ContentUnavailableLabelStyle>(255, &lazy cache variable for type metadata for _LayoutRoot<ActionsLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ActionsLayout and conformance ActionsLayout, (uint64_t)&unk_1ED414180, MEMORY[0x1E4F3F598]);
  type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>();
  uint64_t v38 = type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>();
  uint64_t v17 = type metadata accessor for _VariadicView.Tree();
  uint64_t v39 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v35 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v36 = (char *)&v35 - v20;
  uint64_t KeyPath = swift_getKeyPath();
  v55[0] = a8;
  uint64_t v56 = KeyPath;
  char v57 = 0;
  int v58 = 1;
  uint64_t v22 = a2;
  uint64_t v23 = a2;
  uint64_t v24 = a3;
  uint64_t v25 = a3;
  uint64_t v26 = v37;
  uint64_t v27 = (void (*)(uint64_t, unsigned char *))a10(v55, v23, v25, a4, a5, a6, v37);
  swift_release();
  uint64_t v44 = v22;
  uint64_t v45 = v24;
  uint64_t v46 = a4;
  uint64_t v47 = a5;
  uint64_t v48 = a6;
  uint64_t v49 = v26;
  uint64_t v50 = v40;
  uint64_t v28 = v35;
  v27(v41, v43);
  swift_release();
  unint64_t v29 = lazy protocol witness table accessor for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>();
  uint64_t v30 = lazy protocol witness table accessor for type StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>);
  uint64_t v53 = v26;
  uint64_t v54 = v30;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v51 = v29;
  uint64_t v52 = WitnessTable;
  swift_getWitnessTable();
  uint64_t v32 = v36;
  static ViewBuilder.buildExpression<A>(_:)(v28);
  uint64_t v33 = *(void (**)(char *, uint64_t))(v39 + 8);
  v33(v28, v17);
  static ViewBuilder.buildExpression<A>(_:)(v32);
  return ((uint64_t (*)(char *, uint64_t))v33)(v32, v17);
}

uint64_t (*implicit closure #1 in closure #2 in ResolvedContentUnavailableView.resolvedActions.getter(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))()
{
  char v12 = *a1;
  uint64_t v13 = *((void *)a1 + 1);
  char v14 = a1[16];
  int v15 = *((_DWORD *)a1 + 5);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  *(void *)(v16 + 32) = a4;
  *(void *)(v16 + 40) = a5;
  *(void *)(v16 + 48) = a6;
  *(void *)(v16 + 56) = a7;
  *(unsigned char *)(v16 + 64) = v12;
  *(void *)(v16 + 72) = v13;
  *(unsigned char *)(v16 + 80) = v14;
  *(_DWORD *)(v16 + 84) = v15;
  outlined copy of Environment<Bool>.Content(v13, v14);
  return partial apply for implicit closure #2 in implicit closure #1 in closure #2 in ResolvedContentUnavailableView.resolvedActions.getter;
}

uint64_t implicit closure #2 in implicit closure #1 in closure #1 in ResolvedContentUnavailableView.resolvedActions.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>();
  uint64_t v6 = type metadata accessor for ModifiedContent();
  unint64_t v7 = lazy protocol witness table accessor for type ActionsLayout and conformance ActionsLayout();
  lazy protocol witness table accessor for type StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>);
  uint64_t WitnessTable = swift_getWitnessTable();
  return Layout.callAsFunction<A>(_:)(a1, a2, (uint64_t)&unk_1ED414180, v6, v7, WitnessTable, a3);
}

uint64_t closure #1 in closure #1 in ResolvedContentUnavailableView.resolvedActions.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>();
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  char v12 = (char *)v15 - v11;
  uint64_t v13 = lazy protocol witness table accessor for type StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>);
  v15[0] = a7;
  v15[1] = v13;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(a1);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t ResolvedContentUnavailableView.init(label:description:actions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)a7 = swift_getKeyPath();
  *(unsigned char *)(a7 + 8) = 0;
  *(_DWORD *)(a7 + 12) = 1;
  char v14 = (int *)type metadata accessor for ResolvedContentUnavailableView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a7 + v14[17], a1, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a7 + v14[18], a2, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a7 + v14[19], a3, a6);
}

unint64_t lazy protocol witness table accessor for type ContentUnavailableLabelStyle and conformance ContentUnavailableLabelStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ContentUnavailableLabelStyle and conformance ContentUnavailableLabelStyle;
  if (!lazy protocol witness table cache variable for type ContentUnavailableLabelStyle and conformance ContentUnavailableLabelStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentUnavailableLabelStyle and conformance ContentUnavailableLabelStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ActionsLayout and conformance ActionsLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type ActionsLayout and conformance ActionsLayout;
  if (!lazy protocol witness table cache variable for type ActionsLayout and conformance ActionsLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionsLayout and conformance ActionsLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ActionsLayout and conformance ActionsLayout;
  if (!lazy protocol witness table cache variable for type ActionsLayout and conformance ActionsLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionsLayout and conformance ActionsLayout);
  }
  return result;
}

void type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for LabelStyleWritingModifier<ContentUnavailableLabelStyle>(255, &lazy cache variable for type metadata for ButtonStyleModifier<FlexibleBorderedButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type FlexibleBorderedButtonStyle and conformance FlexibleBorderedButtonStyle, (uint64_t)&unk_1ED44F3B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleModifier);
    lazy protocol witness table accessor for type CUVFlexibleButtonPredicate and conformance CUVFlexibleButtonPredicate();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type FlexibleBorderedButtonStyle and conformance FlexibleBorderedButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type FlexibleBorderedButtonStyle and conformance FlexibleBorderedButtonStyle;
  if (!lazy protocol witness table cache variable for type FlexibleBorderedButtonStyle and conformance FlexibleBorderedButtonStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlexibleBorderedButtonStyle and conformance FlexibleBorderedButtonStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CUVFlexibleButtonPredicate and conformance CUVFlexibleButtonPredicate()
{
  unint64_t result = lazy protocol witness table cache variable for type CUVFlexibleButtonPredicate and conformance CUVFlexibleButtonPredicate;
  if (!lazy protocol witness table cache variable for type CUVFlexibleButtonPredicate and conformance CUVFlexibleButtonPredicate)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CUVFlexibleButtonPredicate and conformance CUVFlexibleButtonPredicate);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>;
  if (!lazy protocol witness table cache variable for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>)
  {
    type metadata accessor for LabelStyleWritingModifier<ContentUnavailableLabelStyle>(255, &lazy cache variable for type metadata for _LayoutRoot<ActionsLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ActionsLayout and conformance ActionsLayout, (uint64_t)&unk_1ED414180, MEMORY[0x1E4F3F598]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>;
  if (!lazy protocol witness table cache variable for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>)
  {
    type metadata accessor for LabelStyleWritingModifier<ContentUnavailableLabelStyle>(255, &lazy cache variable for type metadata for _LayoutRoot<ActionsLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ActionsLayout and conformance ActionsLayout, (uint64_t)&unk_1ED414180, MEMORY[0x1E4F3F598]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>);
  }
  return result;
}

void type metadata accessor for Font?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    type metadata accessor for InterfaceIdiomPredicate<WidgetInterfaceIdiom>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<WidgetInterfaceIdiom>, MEMORY[0x1E4F406E0], MEMORY[0x1E4F406D8], MEMORY[0x1E4F40C60]);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<WidgetInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    unint64_t v3 = type metadata accessor for StaticIf();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FixedSizeLayout, EmptyModifier>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    type metadata accessor for InterfaceIdiomPredicate<WidgetInterfaceIdiom>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E4F40158], MEMORY[0x1E4F40150], MEMORY[0x1E4F40C60]);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    unint64_t v3 = type metadata accessor for StaticIf();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void type metadata accessor for StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier>)
  {
    lazy protocol witness table accessor for type CUVFlexibleFramePredicate and conformance CUVFlexibleFramePredicate();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type CUVFlexibleFramePredicate and conformance CUVFlexibleFramePredicate()
{
  unint64_t result = lazy protocol witness table cache variable for type CUVFlexibleFramePredicate and conformance CUVFlexibleFramePredicate;
  if (!lazy protocol witness table cache variable for type CUVFlexibleFramePredicate and conformance CUVFlexibleFramePredicate)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CUVFlexibleFramePredicate and conformance CUVFlexibleFramePredicate);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t partial apply for closure #1 in ResolvedContentUnavailableView.body.getter@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in ResolvedContentUnavailableView.body.getter(0, a1);
}

uint64_t partial apply for closure #2 in ResolvedContentUnavailableView.body.getter()
{
  return partial apply for closure #2 in ResolvedContentUnavailableView.body.getter((uint64_t (*)(void, void, void, void, void, void, void))closure #2 in ResolvedContentUnavailableView.body.getter);
}

uint64_t partial apply for closure #1 in closure #2 in ResolvedContentUnavailableView.body.getter()
{
  return partial apply for closure #2 in ResolvedContentUnavailableView.body.getter((uint64_t (*)(void, void, void, void, void, void, void))closure #1 in closure #2 in ResolvedContentUnavailableView.body.getter);
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in ResolvedContentUnavailableView.body.getter@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in ResolvedContentUnavailableView.body.getter(1, a1);
}

uint64_t partial apply for closure #1 in ResolvedContentUnavailableView.body.getter@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  return closure #1 in ResolvedContentUnavailableView.body.getter(*(void *)(v2 + 64), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), a1, a2);
}

uint64_t partial apply for closure #1 in ResolvedContentUnavailableView.resolvedBody(iconHidden:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in ResolvedContentUnavailableView.resolvedBody(iconHidden:)(*(void *)(v1 + 64), *(unsigned __int8 *)(v1 + 72), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), a1);
}

uint64_t closure #1 in ContentUnavailableLabelStyle.makeBody(configuration:)@<X0>(unint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  if (a2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    LODWORD(v6) = 0;
  }
  else
  {
    unint64_t v6 = HIDWORD(a1);
    LOBYTE(v8) = 2;
    static Font.custom(_:size:relativeTo:)();
    View.symbolFont(_:)();
    swift_release();
    uint64_t v5 = *((void *)&v8 + 1);
    uint64_t v4 = v8;
  }
  static Font.Weight.bold.getter();
  View.fontWeight(_:)();
  *(void *)a3 = v4;
  *(void *)(a3 + 8) = v5;
  *(_DWORD *)(a3 + 16) = v6;
  *(_OWORD *)(a3 + 24) = v8;
  *(void *)(a3 + 40) = v9;
  outlined copy of ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?(v4);
  return outlined consume of ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?(v4);
}

__n128 protocol witness for LabelStyle.makeBody(configuration:) in conformance ContentUnavailableLabelStyle@<Q0>(uint64_t a1@<X8>)
{
  unsigned __int8 v3 = *(unsigned char *)(v1 + 8);
  char v4 = *(unsigned char *)(v1 + 16);
  uint64_t v5 = *(unsigned int *)(v1 + 12);
  uint64_t v6 = static HorizontalAlignment.center.getter();
  LOBYTE(v11) = v3;
  closure #1 in ContentUnavailableLabelStyle.makeBody(configuration:)(v3 | (unint64_t)(v5 << 32), v4, (uint64_t)&v11);
  int v7 = v12;
  uint64_t v8 = v14;
  __n128 result = v13;
  long long v10 = v11;
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = 0x402E000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 40) = v7;
  *(__n128 *)(a1 + 48) = result;
  *(void *)(a1 + 64) = v8;
  return result;
}

__n128 protocol witness for ViewModifier.body(content:) in conformance WidgetLabelModifier@<Q0>(__n128 *a1@<X8>)
{
  static Font.headline.getter();
  swift_getKeyPath();
  static Font.Weight.semibold.getter();
  type metadata accessor for ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>>();
  lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
  View.fontWeight(_:)();
  swift_release();
  swift_release();
  __n128 result = v5;
  a1->n128_u64[0] = v3;
  a1->n128_u64[1] = v4;
  a1[1] = v5;
  a1[2].n128_u64[0] = v6;
  return result;
}

__n128 FlexibleBorderedButtonStyle.makeBody(configuration:)@<Q0>(char *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4 - 8);
  char v7 = *a1;
  char v8 = a1[1];
  outlined init with copy of PrimitiveButtonStyleConfiguration((uint64_t)a1, (uint64_t)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  outlined init with take of PrimitiveButtonStyleConfiguration((uint64_t)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9);
  *a2 = v7;
  a2[1] = v8;
  type metadata accessor for Button<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FlexFrameLayout>>();
  uint64_t v12 = v11;
  __n128 v13 = (void (**)())&a2[*(int *)(v11 + 36)];
  *__n128 v13 = partial apply for implicit closure #2 in implicit closure #1 in FlexibleBorderedButtonStyle.makeBody(configuration:);
  v13[1] = (void (*)())v10;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  uint64_t v14 = (__n128 *)&a2[*(int *)(v12 + 40)];
  static Alignment.center.getter();
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, &v27, 0.0, 1, 0.0, 1);
  unsigned __int8 v15 = BYTE8(v27);
  unint64_t v16 = v28;
  unsigned __int8 v17 = v29;
  unint64_t v18 = v30;
  unsigned __int8 v19 = v31;
  unint64_t v20 = v32;
  unsigned __int8 v21 = v33;
  unint64_t v22 = v34;
  unsigned __int8 v23 = v35;
  unint64_t v24 = v36;
  unsigned __int8 v25 = v37;
  __n128 result = v38;
  v14->n128_u64[0] = v27;
  v14->n128_u8[8] = v15;
  v14[1].n128_u64[0] = v16;
  v14[1].n128_u8[8] = v17;
  v14[2].n128_u64[0] = v18;
  v14[2].n128_u8[8] = v19;
  v14[3].n128_u64[0] = v20;
  v14[3].n128_u8[8] = v21;
  v14[4].n128_u64[0] = v22;
  v14[4].n128_u8[8] = v23;
  v14[5].n128_u64[0] = v24;
  v14[5].n128_u8[8] = v25;
  v14[6] = result;
  return result;
}

uint64_t ActionsLayout.sizeThatFits(proposal:subviews:cache:)()
{
  char v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  char v3 = v0[16];
  ActionsLayout.maxSize(subviews:proposal:)();
  uint64_t result = LayoutSubviews.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v5 = result;
  swift_bridgeObjectRetain();
  outlined copy of Environment<Bool>.Content(v2, v3);
  uint64_t v6 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_12CoreGraphics7CGFloatVs5NeverOTg5085_s7SwiftUI13ActionsLayout33_A3388C042543B1D2E497C2B474EB4854LLV7spacing8subviewsSay12d9Graphics7F28VGAA0D8SubviewsV_tFAISiXEfU_0I2UI06LayoutZ0VAM0K6Layout01_mnopqrsT0LLVTf1cn_nTf4ngd_n(0, v5);
  outlined consume of Environment<Bool>.Content(v2, v3);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    if (v7 == 1)
    {
      uint64_t v8 = 0;
      double v9 = 0.0;
LABEL_9:
      uint64_t v12 = v7 - v8;
      __n128 v13 = (double *)(v6 + 8 * v8 + 32);
      do
      {
        double v14 = *v13++;
        double v9 = v9 + v14;
        --v12;
      }
      while (v12);
      goto LABEL_11;
    }
    uint64_t v8 = v7 & 0x7FFFFFFFFFFFFFFELL;
    uint64_t v10 = (double *)(v6 + 40);
    double v9 = 0.0;
    uint64_t v11 = v7 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      double v9 = v9 + *(v10 - 1) + *v10;
      v10 += 2;
      v11 -= 2;
    }
    while (v11);
    if (v7 != v8) {
      goto LABEL_9;
    }
  }
LABEL_11:
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = LayoutSubviews.endIndex.getter();
    uint64_t result = LayoutSubviews.endIndex.getter();
    if ((result & 0x8000000000000000) == 0)
    {
      uint64_t v16 = LayoutSubviews.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v15 & 0x8000000000000000) == 0 && v16 >= v15) {
        return result;
      }
      goto LABEL_22;
    }
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  uint64_t v17 = LayoutSubviews.endIndex.getter();
  uint64_t result = LayoutSubviews.endIndex.getter();
  if (result < 0)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    return result;
  }
  uint64_t v18 = LayoutSubviews.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (v17 < 0 || v18 < v17) {
    goto LABEL_24;
  }
  return result;
}

uint64_t ActionsLayout.maxSize(subviews:proposal:)()
{
  int64_t v0 = LayoutSubviews.endIndex.getter();
  uint64_t result = LayoutSubviews.endIndex.getter();
  if (result < 0)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  uint64_t result = LayoutSubviews.endIndex.getter();
  if (v0 < 0 || result < v0) {
    goto LABEL_20;
  }
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v0)
  {
    uint64_t v17 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v0, 0);
    uint64_t v3 = 0;
    uint64_t v2 = v17;
    while (1)
    {
      LayoutSubviews.subscript.getter();
      static ProposedViewSize.unspecified.getter();
      LayoutSubview.sizeThatFits(_:)();
      double v5 = v4;
      double v7 = v6;
      LayoutSubview.sizeThatFits(_:)();
      if (v8 < v5) {
        double v5 = v8;
      }
      if (v7 <= v9) {
        double v7 = v9;
      }
      unint64_t v11 = *(void *)(v17 + 16);
      unint64_t v10 = *(void *)(v17 + 24);
      if (v11 >= v10 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1);
      }
      *(void *)(v17 + 16) = v11 + 1;
      uint64_t v12 = v17 + 16 * v11;
      *(double *)(v12 + 32) = v5;
      *(double *)(v12 + 40) = v7;
      uint64_t result = LayoutSubviews.endIndex.getter();
      if (v3 >= result) {
        break;
      }
      if (v0 == ++v3) {
        goto LABEL_14;
      }
    }
    __break(1u);
    goto LABEL_19;
  }
LABEL_14:
  uint64_t v13 = *(void *)(v2 + 16);
  if (v13)
  {
    double v14 = (float64x2_t *)(v2 + 32);
    float64x2_t v15 = 0uLL;
    do
    {
      float64x2_t v16 = *v14++;
      float64x2_t v15 = (float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64(v16, v15), (int8x16_t)v16, (int8x16_t)v15);
      --v13;
    }
    while (v13);
  }
  return swift_bridgeObjectRelease();
}

uint64_t ActionsLayout.placeSubviews(in:proposal:subviews:cache:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  int v9 = *v4;
  uint64_t v10 = *((void *)v4 + 1);
  char v11 = v4[16];
  ActionsLayout.maxSize(subviews:proposal:)();
  double v13 = v12;
  double v15 = v14;
  uint64_t result = LayoutSubviews.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v17 = result;
  swift_bridgeObjectRetain();
  outlined copy of Environment<Bool>.Content(v10, v11);
  uint64_t v18 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_12CoreGraphics7CGFloatVs5NeverOTg5085_s7SwiftUI13ActionsLayout33_A3388C042543B1D2E497C2B474EB4854LLV7spacing8subviewsSay12d9Graphics7F28VGAA0D8SubviewsV_tFAISiXEfU_0I2UI06LayoutZ0VAM0K6Layout01_mnopqrsT0LLVTf1cn_nTf4ngd_n(0, v17);
  outlined consume of Environment<Bool>.Content(v10, v11);
  swift_bridgeObjectRelease();
  CGFloat v19 = a1;
  CGFloat v20 = a2;
  CGFloat v21 = a3;
  CGFloat v22 = a4;
  if (v9)
  {
    double MinY = CGRectGetMinY(*(CGRect *)&v19);
    uint64_t result = LayoutSubviews.endIndex.getter();
    if ((result & 0x8000000000000000) == 0)
    {
      uint64_t v24 = result;
      if (result)
      {
        if ((unint64_t)(result - 1) < *(void *)(v18 + 16))
        {
          uint64_t v25 = 0;
          double v26 = v15 * 0.5 + MinY;
          do
          {
            LayoutSubviews.subscript.getter();
            v31.origin.x = a1;
            v31.origin.y = a2;
            v31.size.width = a3;
            v31.size.height = a4;
            CGRectGetMidX(v31);
            static UnitPoint.center.getter();
            LayoutSubview.place(at:anchor:proposal:)();
            double v26 = v26 + v15 + *(double *)(v18 + 8 * v25++ + 32);
          }
          while (v24 != v25);
          return swift_bridgeObjectRelease();
        }
        goto LABEL_18;
      }
      return swift_bridgeObjectRelease();
    }
    goto LABEL_16;
  }
  double MinX = CGRectGetMinX(*(CGRect *)&v19);
  uint64_t result = LayoutSubviews.endIndex.getter();
  if (result < 0)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v28 = result;
  if (!result) {
    return swift_bridgeObjectRelease();
  }
  if ((unint64_t)(result - 1) < *(void *)(v18 + 16))
  {
    uint64_t v29 = 0;
    double v30 = v13 * 0.5 + MinX;
    do
    {
      LayoutSubviews.subscript.getter();
      v32.origin.x = a1;
      v32.origin.y = a2;
      v32.size.width = a3;
      v32.size.height = a4;
      CGRectGetMidY(v32);
      static UnitPoint.center.getter();
      LayoutSubview.place(at:anchor:proposal:)();
      double v30 = v30 + v13 + *(double *)(v18 + 8 * v29++ + 32);
    }
    while (v28 != v29);
    return swift_bridgeObjectRelease();
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t protocol witness for Layout.spacing(subviews:cache:) in conformance ActionsLayout()
{
  return MEMORY[0x1F4100F28]();
}

uint64_t protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance ActionsLayout()
{
  return ActionsLayout.sizeThatFits(proposal:subviews:cache:)();
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance ActionsLayout(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  return ActionsLayout.placeSubviews(in:proposal:subviews:cache:)(a1, a2, a3, a4);
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance ActionsLayout())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

unint64_t lazy protocol witness table accessor for type LabelStyleWritingModifier<ContentUnavailableLabelStyle> and conformance LabelStyleWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LabelStyleWritingModifier<ContentUnavailableLabelStyle> and conformance LabelStyleWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type LabelStyleWritingModifier<ContentUnavailableLabelStyle> and conformance LabelStyleWritingModifier<A>)
  {
    type metadata accessor for LabelStyleWritingModifier<ContentUnavailableLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<ContentUnavailableLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContentUnavailableLabelStyle and conformance ContentUnavailableLabelStyle, (uint64_t)&unk_1ED452758, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<ContentUnavailableLabelStyle> and conformance LabelStyleWritingModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>);
    lazy protocol witness table accessor for type WidgetLabelModifier and conformance WidgetLabelModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WidgetLabelModifier and conformance WidgetLabelModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type WidgetLabelModifier and conformance WidgetLabelModifier;
  if (!lazy protocol witness table cache variable for type WidgetLabelModifier and conformance WidgetLabelModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetLabelModifier and conformance WidgetLabelModifier);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Font?(255, a2, a3, MEMORY[0x1E4F411E8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FixedSizeLayout, EmptyModifier>(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in ResolvedContentUnavailableView.resolvedBody(iconHidden:)()
{
  return partial apply for closure #2 in ResolvedContentUnavailableView.body.getter((uint64_t (*)(void, void, void, void, void, void, void))closure #1 in closure #1 in ResolvedContentUnavailableView.resolvedBody(iconHidden:));
}

uint64_t partial apply for closure #2 in ResolvedContentUnavailableView.body.getter(uint64_t (*a1)(void, void, void, void, void, void, void))
{
  return a1(v1[8], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t lazy protocol witness table accessor for type StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in ResolvedContentUnavailableView.resolvedActions.getter@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in ResolvedContentUnavailableView.resolvedActions.getter(0, (uint64_t (*)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))implicit closure #1 in closure #1 in ResolvedContentUnavailableView.resolvedActions.getter, (uint64_t)partial apply for closure #1 in closure #2 in ResolvedContentUnavailableView.resolvedActions.getter, a1);
}

uint64_t partial apply for closure #2 in ResolvedContentUnavailableView.resolvedActions.getter@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in ResolvedContentUnavailableView.resolvedActions.getter(1, (uint64_t (*)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))implicit closure #1 in closure #2 in ResolvedContentUnavailableView.resolvedActions.getter, (uint64_t)partial apply for closure #1 in closure #2 in ResolvedContentUnavailableView.resolvedActions.getter, a1);
}

uint64_t partial apply for closure #1 in ResolvedContentUnavailableView.resolvedActions.getter@<X0>(char a1@<W0>, uint64_t (*a2)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return closure #1 in ResolvedContentUnavailableView.resolvedActions.getter(v4[8], v4[2], v4[3], v4[4], v4[5], v4[6], v4[7], a1, a4, a2, a3);
}

uint64_t closure #1 in Layout.callAsFunction<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](a1);
  double v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v9 = (void (*)(void))MEMORY[0x1F4188790](v6);
  char v11 = (char *)&v14 - v10;
  v9();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  double v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, a4);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  return ((uint64_t (*)(char *, uint64_t))v12)(v11, a4);
}

uint64_t partial apply for closure #1 in Layout.callAsFunction<A>(_:)()
{
  return closure #1 in Layout.callAsFunction<A>(_:)(v0[6], v0[7], v0[2], v0[3]);
}

uint64_t partial apply for closure #1 in closure #2 in ResolvedContentUnavailableView.resolvedActions.getter()
{
  return closure #1 in closure #1 in ResolvedContentUnavailableView.resolvedActions.getter(v0[8], v0[2], v0[3], v0[4], v0[5], v0[6], v0[7]);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in closure #2 in ResolvedContentUnavailableView.resolvedActions.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return implicit closure #2 in implicit closure #1 in closure #1 in ResolvedContentUnavailableView.resolvedActions.getter(a1, a2, a3);
}

void *type metadata accessor for CUVFlexibleFramePredicate()
{
  return &unk_1ED445D10;
}

void *type metadata accessor for FlexibleBorderedButtonStyle()
{
  return &unk_1ED44F3B0;
}

void *type metadata accessor for CUVFlexibleButtonPredicate()
{
  return &unk_1ED44A600;
}

uint64_t initializeBufferWithCopyOfBuffer for ActionsLayout(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v4, v5);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

uint64_t assignWithCopy for ActionsLayout(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v4, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

uint64_t assignWithTake for ActionsLayout(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionsLayout(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[24]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ActionsLayout(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for ActionsLayout()
{
  return &unk_1ED414180;
}

void *type metadata accessor for WidgetLabelModifier()
{
  return &unk_1ED42F108;
}

uint64_t initializeBufferWithCopyOfBuffer for ContentUnavailableLabelStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for ContentUnavailableLabelStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for ContentUnavailableLabelStyle(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentUnavailableLabelStyle(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentUnavailableLabelStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

void *type metadata accessor for ContentUnavailableLabelStyle()
{
  return &unk_1ED452758;
}

uint64_t initializeBufferWithCopyOfBuffer for ContentUnavailableViewSpecs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return a1;
}

uint64_t assignWithCopy for ContentUnavailableViewSpecs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return a1;
}

uint64_t assignWithTake for ContentUnavailableViewSpecs(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentUnavailableViewSpecs(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentUnavailableViewSpecs(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

void *type metadata accessor for ContentUnavailableViewSpecs()
{
  return &unk_1ED44EE78;
}

uint64_t sub_187720DA8()
{
  int64_t v0 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x1E4F40C60];
  type metadata accessor for InterfaceIdiomPredicate<WidgetInterfaceIdiom>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<WidgetInterfaceIdiom>, MEMORY[0x1E4F406E0], MEMORY[0x1E4F406D8], MEMORY[0x1E4F40C60]);
  type metadata accessor for LabelStyleWritingModifier<ContentUnavailableLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<ContentUnavailableLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContentUnavailableLabelStyle and conformance ContentUnavailableLabelStyle, (uint64_t)&unk_1ED452758, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
  type metadata accessor for ModifiedContent();
  char v1 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F411E8];
  type metadata accessor for Font?(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E4F3F7C8], MEMORY[0x1E4F411E8]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FixedSizeLayout, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FixedSizeLayout, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for InterfaceIdiomPredicate<WidgetInterfaceIdiom>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E4F40158], MEMORY[0x1E4F40150], v0);
  type metadata accessor for LabelStyleWritingModifier<ContentUnavailableLabelStyle>(255, &lazy cache variable for type metadata for _LayoutRoot<ActionsLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ActionsLayout and conformance ActionsLayout, (uint64_t)&unk_1ED414180, MEMORY[0x1E4F3F598]);
  type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>();
  type metadata accessor for _VariadicView.Tree();
  lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  type metadata accessor for StaticIf();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  type metadata accessor for Font?(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>, MEMORY[0x1E4F3F470], v1);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FixedSizeLayout, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout> and conformance <> StaticIf<A, B, C>();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier>);
  swift_getWitnessTable();
  lazy protocol witness table accessor for type StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier>);
  swift_getWitnessTable();
  type metadata accessor for ScrollView();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for ViewThatFits();
  lazy protocol witness table accessor for type InterfaceIdiomPredicate<WidgetInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  type metadata accessor for StaticIf();
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in WidgetLabelModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in FlexibleBorderedButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for ActionsLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ActionsLayout and conformance ActionsLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in ContentUnavailableLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined copy of ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_12CoreGraphics7CGFloatVs5NeverOTg5085_s7SwiftUI13ActionsLayout33_A3388C042543B1D2E497C2B474EB4854LLV7spacing8subviewsSay12d9Graphics7F28VGAA0D8SubviewsV_tFAISiXEfU_0I2UI06LayoutZ0VAM0K6Layout01_mnopqrsT0LLVTf1cn_nTf4ngd_n(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (!v2) {
    return v3;
  }
  uint64_t v5 = result;
  uint64_t v11 = MEMORY[0x1E4FBC860];
  unint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if (a2 >= v5 && (v2 & 0x8000000000000000) == 0)
  {
    uint64_t v3 = v11;
    while (a2 != v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = LayoutSubviews.endIndex.getter();
      unint64_t result = LayoutSubviews.endIndex.getter();
      if (result < 0) {
        goto LABEL_18;
      }
      uint64_t v7 = LayoutSubviews.endIndex.getter();
      unint64_t result = swift_bridgeObjectRelease();
      if (v6 < 0 || v7 < v6) {
        goto LABEL_19;
      }
      if (v5 >= v6 - 1) {
        double v8 = 0.0;
      }
      else {
        double v8 = 15.0;
      }
      unint64_t v10 = *(void *)(v11 + 16);
      unint64_t v9 = *(void *)(v11 + 24);
      if (v10 >= v9 >> 1) {
        unint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1);
      }
      *(void *)(v11 + 16) = v10 + 1;
      *(double *)(v11 + 8 * v10 + 32) = v8;
      if (a2 == ++v5) {
        return v3;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t outlined init with copy of PrimitiveButtonStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_187721690()
{
  uint64_t v1 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  unint64_t v2 = v0
     + *(int *)(v1 + 24)
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  type metadata accessor for ButtonAction();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v2, *(void *)(v2 + 8), *(unsigned char *)(v2 + 16));

LABEL_6:
    swift_release();
    goto LABEL_8;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined consume of Environment<OpenURLAction>.Content(*(void *)v2, *(void *)(v2 + 8), *(void *)(v2 + 16), *(void *)(v2 + 24), *(_WORD *)(v2 + 32), *(unsigned char *)(v2 + 34));
  outlined consume of Environment<OpenURLAction>.Content(*(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(_WORD *)(v2 + 72), *(unsigned char *)(v2 + 74));
  unint64_t v4 = v2 + *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v5 = type metadata accessor for URL();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
LABEL_8:

  return swift_deallocObject();
}

uint64_t outlined consume of Environment<OpenURLAction>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  if (a6) {
    return outlined consume of OpenURLAction.Handler(a1, a2, a3, a4, a5 & 1);
  }
  else {
    return swift_release();
  }
}

uint64_t outlined consume of OpenURLAction.Handler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result = swift_release();
  if (a5)
  {
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a3);
  }
  return result;
}

uint64_t outlined init with take of PrimitiveButtonStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void partial apply for implicit closure #2 in implicit closure #1 in FlexibleBorderedButtonStyle.makeBody(configuration:)()
{
}

void type metadata accessor for Button<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FlexFrameLayout>>()
{
  if (!lazy cache variable for type metadata for Button<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FlexFrameLayout>>)
  {
    type metadata accessor for InterfaceIdiomPredicate<WidgetInterfaceIdiom>(255, &lazy cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FlexFrameLayout>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, MEMORY[0x1E4F3FE58], MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for Button();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Button<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FlexFrameLayout>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for InterfaceIdiomPredicate<WidgetInterfaceIdiom>(255, &lazy cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FlexFrameLayout>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, MEMORY[0x1E4F3FE58], MEMORY[0x1E4F3FBA0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t specialized static CUVFlexibleFramePredicate.evaluate(inputs:)()
{
  _GraphInputs.interfaceIdiom.getter();
  if (AnyInterfaceIdiom.accepts<A>(_:)())
  {
    char v0 = 1;
  }
  else
  {
    _GraphInputs.interfaceIdiom.getter();
    char v0 = AnyInterfaceIdiom.accepts<A>(_:)();
  }
  return v0 & 1;
}

uint64_t specialized static CUVFlexibleButtonPredicate.evaluate(inputs:)()
{
  lazy protocol witness table accessor for type EffectiveButtonStyleInput and conformance EffectiveButtonStyleInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle();
  if (v4 == &type metadata for BorderedButtonStyle)
  {
    BOOL v0 = 1;
  }
  else
  {
    lazy protocol witness table accessor for type BorderedProminentButtonStyle and conformance BorderedProminentButtonStyle();
    BOOL v0 = v4 == &type metadata for BorderedProminentButtonStyle;
  }
  lazy protocol witness table accessor for type DefaultButtonStyle and conformance DefaultButtonStyle();
  _GraphInputs.interfaceIdiom.getter();
  char v1 = AnyInterfaceIdiom.accepts<A>(_:)();
  unsigned int v2 = v4 == &type metadata for DefaultButtonStyle || v0;
  if (v1) {
    return v2;
  }
  else {
    return v0;
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for LabelStyleWritingModifier<ContentUnavailableLabelStyle>(255, &lazy cache variable for type metadata for _ViewModifier_Content<WidgetLabelModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetLabelModifier and conformance WidgetLabelModifier, (uint64_t)&unk_1ED42F108, MEMORY[0x1E4F408E0]);
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>>);
    }
  }
}

void type metadata accessor for LabelStyleWritingModifier<ContentUnavailableLabelStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>>();
    lazy protocol witness table accessor for type _ViewModifier_Content<WidgetLabelModifier> and conformance _ViewModifier_Content<A>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<WidgetLabelModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<WidgetLabelModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<WidgetLabelModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for LabelStyleWritingModifier<ContentUnavailableLabelStyle>(255, &lazy cache variable for type metadata for _ViewModifier_Content<WidgetLabelModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetLabelModifier and conformance WidgetLabelModifier, (uint64_t)&unk_1ED42F108, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<WidgetLabelModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t sub_187721EE4()
{
  return lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<[AnyFontModifier]> and conformance _EnvironmentKeyTransformModifier<A>(&lazy protocol witness table cache variable for type VStack<TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>)>> and conformance VStack<A>, (void (*)(uint64_t))type metadata accessor for VStack<TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>)>>);
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<[AnyFontModifier]> and conformance _EnvironmentKeyTransformModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for VStack<TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>)>>()
{
  if (!lazy cache variable for type metadata for VStack<TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>)>(255);
    lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<[AnyFontModifier]> and conformance _EnvironmentKeyTransformModifier<A>(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>)> and conformance TupleView<A>, type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>)>);
    unint64_t v0 = type metadata accessor for VStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>)>>);
    }
  }
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>)>(uint64_t a1)
{
}

void type metadata accessor for [AnyFontModifier](uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for (ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>))
  {
    type metadata accessor for [AnyFontModifier](255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, MEMORY[0x1E4FBB718]);
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>));
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>)
  {
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>();
    type metadata accessor for InterfaceIdiomPredicate<WidgetInterfaceIdiom>(255, &lazy cache variable for type metadata for _ForegroundStyleModifier<HierarchicalShapeStyle>, MEMORY[0x1E4F40958], MEMORY[0x1E4F40950], MEMORY[0x1E4F40E20]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>)
  {
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>);
    }
  }
}

void type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>)
  {
    type metadata accessor for _EnvironmentKeyTransformModifier<[AnyFontModifier]>(255);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>);
    }
  }
}

uint64_t sub_1877222AC()
{
  return lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<[AnyFontModifier]> and conformance _EnvironmentKeyTransformModifier<A>(&lazy protocol witness table cache variable for type Button<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FlexFrameLayout>> and conformance Button<A>, (void (*)(uint64_t))type metadata accessor for Button<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FlexFrameLayout>>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>();
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<[AnyFontModifier]> and conformance _EnvironmentKeyTransformModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<[AnyFontModifier]> and conformance _EnvironmentKeyTransformModifier<A>, type metadata accessor for _EnvironmentKeyTransformModifier<[AnyFontModifier]>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>>();
    type metadata accessor for _EnvironmentKeyTransformModifier<[AnyFontModifier]>(255);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>);
    }
  }
}

uint64_t EnvironmentValues.accessibilityEnabledTechnologies.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnabledTechnologiesKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnabledTechnologiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnabledTechnologiesKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnabledTechnologiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.accessibilityEnabledTechnologies : EnvironmentValues@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnabledTechnologiesKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnabledTechnologiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnabledTechnologiesKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnabledTechnologiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t EnvironmentValues.accessibilityEnabledTechnologies.setter()
{
  type metadata accessor for EnvironmentPropertyKey<EnabledTechnologiesKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnabledTechnologiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues.accessibilityEnabledTechnologies.modify(void *a1))(uint64_t *a1)
{
  *a1 = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnabledTechnologiesKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnabledTechnologiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnabledTechnologiesKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnabledTechnologiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.accessibilityEnabledTechnologies.modify;
}

uint64_t EnvironmentValues.accessibilityEnabledTechnologies.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *((_WORD *)a1 + 5) = *((_WORD *)a1 + 4);
  type metadata accessor for EnvironmentPropertyKey<EnabledTechnologiesKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnabledTechnologiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t EnvironmentValues.setIsEnabled(_:for:)(char a1, char a2)
{
  uint64_t v3 = *(void *)(v2 + 8);
  int v4 = a1 & 1;
  uint64_t result = EnvironmentValues.isEnabled(for:)(a2);
  if ((result & 1) != v4)
  {
    type metadata accessor for EnvironmentPropertyKey<EnabledTechnologiesKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnabledTechnologiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    if (v3)
    {
      swift_retain();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release();
    type metadata accessor for EnvironmentPropertyKey<EnabledTechnologiesKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnabledTechnologiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.setter();
    if (v3)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

BOOL EnvironmentValues.accessibilityFullKeyboardAccessEnabled.getter()
{
  return EnvironmentValues.isEnabled(for:)(2);
}

BOOL EnvironmentValues.accessibilityVoiceControlEnabled.getter()
{
  return EnvironmentValues.isEnabled(for:)(3);
}

BOOL EnvironmentValues.accessibilityHoverTextEnabled.getter()
{
  return EnvironmentValues.isEnabled(for:)(4);
}

BOOL EnvironmentValues.accessibilityAssistiveAccessEnabled.getter()
{
  return EnvironmentValues.isEnabled(for:)(5);
}

uint64_t sub_187722B08()
{
  return EnvironmentValues.accessibilityEnabledTechnologies.setter();
}

BOOL sub_187722B40@<W0>(unsigned char *a1@<X8>)
{
  return keypath_get_1Tm(0, a1);
}

uint64_t sub_187722B48(char *a1)
{
  return EnvironmentValues.setIsEnabled(_:for:)(*a1, 0);
}

BOOL sub_187722B74@<W0>(unsigned char *a1@<X8>)
{
  return keypath_get_1Tm(1, a1);
}

uint64_t sub_187722B7C(char *a1)
{
  return EnvironmentValues.setIsEnabled(_:for:)(*a1, 1);
}

BOOL sub_187722BA8@<W0>(unsigned char *a1@<X8>)
{
  return keypath_get_1Tm(2, a1);
}

uint64_t sub_187722BB0(char *a1)
{
  return EnvironmentValues.setIsEnabled(_:for:)(*a1, 2);
}

BOOL sub_187722BDC@<W0>(unsigned char *a1@<X8>)
{
  return keypath_get_1Tm(3, a1);
}

uint64_t sub_187722BE4(char *a1)
{
  return EnvironmentValues.setIsEnabled(_:for:)(*a1, 3);
}

BOOL sub_187722C10@<W0>(unsigned char *a1@<X8>)
{
  return keypath_get_1Tm(4, a1);
}

uint64_t sub_187722C18(char *a1)
{
  return EnvironmentValues.setIsEnabled(_:for:)(*a1, 4);
}

BOOL sub_187722C44@<W0>(unsigned char *a1@<X8>)
{
  return keypath_get_1Tm(5, a1);
}

uint64_t sub_187722C4C(char *a1)
{
  return EnvironmentValues.setIsEnabled(_:for:)(*a1, 5);
}

ValueMetadata *type metadata accessor for EnabledTechnologiesKey()
{
  return &type metadata for EnabledTechnologiesKey;
}

void View.indentationLevel(_:)()
{
}

uint64_t key path setter for EnvironmentValues.isToggleOn : EnvironmentValues()
{
  return EnvironmentValues.isToggleOn.setter();
}

uint64_t key path getter for EnvironmentValues.isEnabled : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.isEnabled : EnvironmentValues()
{
  return EnvironmentValues.isEnabled.setter();
}

uint64_t sub_187722D30@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isToggleOn.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187722D6C()
{
  return EnvironmentValues.isToggleOn.setter();
}

uint64_t View.automaticButtonStyle<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v23 = a4;
  uint64_t v21 = a5;
  uint64_t v22 = a2;
  uint64_t v20 = a1;
  uint64_t v6 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for WrappedButtonStyle();
  swift_getWitnessTable();
  uint64_t v9 = type metadata accessor for ButtonStyleModifier();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  double v12 = (char *)&v19 - v11;
  swift_getWitnessTable();
  uint64_t v13 = type metadata accessor for AutomaticStyleOverrideModifier();
  uint64_t v14 = *(void *)(v13 - 8);
  double v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v19 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, v20, a3, v15);
  ButtonStyleModifier.init<A>(style:)((uint64_t)v8, a3, (uint64_t)v12);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v17, v12, v9);
  MEMORY[0x18C113660](v17, v22, v13, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
}

{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v23 = a4;
  uint64_t v21 = a5;
  uint64_t v22 = a2;
  uint64_t v20 = a1;
  uint64_t v6 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ButtonStyleModifier();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  double v12 = (char *)&v19 - v11;
  swift_getWitnessTable();
  uint64_t v13 = type metadata accessor for AutomaticStyleOverrideModifier();
  uint64_t v14 = *(void *)(v13 - 8);
  double v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v19 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, v20, a3, v15);
  OptionalFormatInputToString.init(format:)((uint64_t)v8, a3, (uint64_t)v12);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v17, v12, v9);
  MEMORY[0x18C113660](v17, v22, v13, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
}

uint64_t key path getter for EnvironmentValues.tintColor : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1877232B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.tintColor : EnvironmentValues()
{
  return EnvironmentValues.tintColor.setter();
}

uint64_t sub_187723318()
{
  return EnvironmentValues.tintColor.setter();
}

uint64_t key path getter for EnvironmentValues.displayMenuAsPalette : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.displayMenuAsPalette.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.displayMenuAsPalette : EnvironmentValues()
{
  return EnvironmentValues.displayMenuAsPalette.setter();
}

uint64_t key path getter for EnvironmentValues.menuActionDismissBehavior : EnvironmentValues@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<MenuActionDismissBehaviorKey>, (uint64_t)&type metadata for MenuActionDismissBehaviorKey, (uint64_t)&protocol witness table for MenuActionDismissBehaviorKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<MenuActionDismissBehaviorKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<MenuActionDismissBehaviorKey>, (uint64_t)&type metadata for MenuActionDismissBehaviorKey, (uint64_t)&protocol witness table for MenuActionDismissBehaviorKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<MenuActionDismissBehaviorKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.menuActionDismissBehavior : EnvironmentValues()
{
  return EnvironmentValues.menuActionDismissBehavior.setter();
}

uint64_t key path getter for EnvironmentValues.paletteSelectionEffect : EnvironmentValues@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PaletteSelectionEffectKey>, (uint64_t)&type metadata for PaletteSelectionEffectKey, (uint64_t)&protocol witness table for PaletteSelectionEffectKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PaletteSelectionEffectKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PaletteSelectionEffectKey>, (uint64_t)&type metadata for PaletteSelectionEffectKey, (uint64_t)&protocol witness table for PaletteSelectionEffectKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PaletteSelectionEffectKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.paletteSelectionEffect : EnvironmentValues()
{
  return EnvironmentValues.paletteSelectionEffect.setter();
}

uint64_t key path getter for EnvironmentValues.dismissSearchAccessory : EnvironmentValues@<X0>(uint64_t a1@<X8>)
{
  return EnvironmentValues.searchFieldState.getter(a1);
}

uint64_t key path getter for EnvironmentValues.accessibilityShowButtonShapes : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.accessibilityShowButtonShapes.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187723700@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  return keypath_get_6Tm(a1, a2, MEMORY[0x1E4F40050], a3);
}

uint64_t key path setter for EnvironmentValues.accessibilityShowButtonShapes : EnvironmentValues()
{
  return EnvironmentValues.accessibilityShowButtonShapes.setter();
}

uint64_t sub_187723740()
{
  return EnvironmentValues.accessibilityShowButtonShapes.setter();
}

uint64_t sub_187723768@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  return keypath_get_6Tm(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.displayMenuAsPalette.getter, a3);
}

uint64_t sub_187723780()
{
  return EnvironmentValues.displayMenuAsPalette.setter();
}

uint64_t sub_1877237AC()
{
  return EnvironmentValues.paletteSelectionEffect.setter();
}

uint64_t sub_1877237E8()
{
  return EnvironmentValues.menuActionDismissBehavior.setter();
}

uint64_t key path setter for EnvironmentValues.toolbarItemPlacement : EnvironmentValues(uint64_t a1)
{
  outlined init with copy of ToolbarItemPlacement.Role(a1, (uint64_t)v2);
  return EnvironmentValues.toolbarItemPlacement.setter((uint64_t)v2);
}

uint64_t sub_18772385C(uint64_t a1)
{
  outlined init with copy of ToolbarItemPlacement.Role(a1, (uint64_t)v2);
  return EnvironmentValues.toolbarItemPlacement.setter((uint64_t)v2);
}

uint64_t sub_187723894@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  return keypath_get_6Tm(a1, a2, MEMORY[0x1E4F400C8], a3);
}

uint64_t keypath_get_6Tm@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X3>, unsigned char *a4@<X8>)
{
  uint64_t result = a3(a1, a2);
  *a4 = result & 1;
  return result;
}

uint64_t sub_1877238F0()
{
  return EnvironmentValues.isEnabled.setter();
}

uint64_t sub_187723918@<X0>(uint64_t a1@<X8>)
{
  return EnvironmentValues.searchFieldState.getter(a1);
}

uint64_t sub_18772394C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.triggerSubmission.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_18772398C()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifie, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContex, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleCon, (void (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlatformFallbackButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
}

uint64_t sub_1877239E8()
{
  return swift_getWitnessTable();
}

uint64_t sub_187723AE4()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<MenuActionDismissBehaviorKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuActionDismissBehaviorKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuActionDismissBehaviorKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<MenuActionDismissBehaviorKey>, (uint64_t)&type metadata for MenuActionDismissBehaviorKey, (uint64_t)&protocol witness table for MenuActionDismissBehaviorKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuActionDismissBehaviorKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<PaletteSelectionEffectKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<PaletteSelectionEffectKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<PaletteSelectionEffectKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PaletteSelectionEffectKey>, (uint64_t)&type metadata for PaletteSelectionEffectKey, (uint64_t)&protocol witness table for PaletteSelectionEffectKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PaletteSelectionEffectKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t sub_187723CB8()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<ConditionallyBorderedStyle>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<ConditionallyBorderedStyle>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<ConditionallyBorderedStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
}

uint64_t static WheelPickerStyle._makeView<A>(value:inputs:)()
{
  return static View._makeView(view:inputs:)();
}

uint64_t type metadata accessor for WheelPicker()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for WheelPickerStyle.Body()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static WheelPickerStyle._makeViewList<A>(value:inputs:)()
{
  return static View._makeViewList(view:inputs:)();
}

uint64_t WheelPickerStyle.Body.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _PickerValue();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t WheelPickerStyle.Body.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for PickerStyleConfiguration();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v15 - v8;
  v15[0] = &type metadata for WheelPickerStyle;
  v15[1] = a1;
  void v15[2] = &protocol witness table for WheelPickerStyle;
  v15[3] = a2;
  uint64_t v10 = type metadata accessor for _PickerValue();
  MEMORY[0x1F4188790](v10 - 8);
  double v12 = (char *)v15 - v11;
  WheelPickerStyle.Body.base.getter((uint64_t)v15 - v11);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v13(v9, v12, v6);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v13)(a3, v9, v6);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance WheelPickerStyle.Body<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for WheelPicker();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance WheelPickerStyle.Body<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return WheelPickerStyle.Body.value.getter(*(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

ValueMetadata *type metadata accessor for WheelPickerStyle()
{
  return &type metadata for WheelPickerStyle;
}

uint64_t type metadata completion function for WheelPicker()
{
  uint64_t result = type metadata accessor for PickerStyleConfiguration();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for WheelPicker(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = ((v6 + 16) & ~v6) + *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v13 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v14 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v13 = *v14;
    uint64_t v15 = ((unint64_t)v13 + v6 + 8) & ~v6;
    uint64_t v16 = ((unint64_t)v14 + v6 + 8) & ~v6;
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v17(v15, v16, v4);
    unint64_t v18 = ((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v19 = ((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v18 = *(void *)v19;
    *(unsigned char *)(v18 + 8) = *(unsigned char *)(v19 + 8);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for WheelPicker(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 15;
  swift_release();
  swift_release();
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))(((v3 & 0xFFFFFFFFFFFFFFF8)
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80)
                                                                                            + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for WheelPicker(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  uint64_t v7 = *(void *)(a3 + 16);
  int v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  uint64_t v9 = *(void *)(v7 - 8) + 16;
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(v7 - 8) + 80);
  uint64_t v11 = ((unint64_t)v5 + v10 + 8) & ~v10;
  uint64_t v12 = ((unint64_t)v6 + v10 + 8) & ~v10;
  swift_retain();
  swift_retain();
  v8(v11, v12, v7);
  uint64_t v13 = ((v10 + 16) & ~v10) + *(void *)(v9 + 48) + 7;
  unint64_t v14 = ((unint64_t)a1 + v13) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = ((unint64_t)a2 + v13) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for WheelPicker(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v7 = *(void *)v6;
  swift_retain();
  swift_release();
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((unint64_t)v7 + v10 + 8) & ~v10, (v10 + 8 + v6) & ~v10);
  uint64_t v11 = ((v10 + 16) & ~v10) + *(void *)(v9 + 40) + 7;
  unint64_t v12 = ((unint64_t)a1 + v11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = ((unint64_t)a2 + v11) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v12 = *(void *)v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  return a1;
}

void *initializeWithTake for WheelPicker(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))(((unint64_t)v5 + v9 + 8) & ~v9, ((unint64_t)v6 + v9 + 8) & ~v9);
  uint64_t v10 = ((v9 + 16) & ~v9) + *(void *)(v8 + 32) + 7;
  unint64_t v11 = ((unint64_t)a1 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = ((unint64_t)a2 + v10) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  return a1;
}

void *assignWithTake for WheelPicker(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v7 = *(void *)v6;
  swift_release();
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))(((unint64_t)v7 + v10 + 8) & ~v10, (v10 + 8 + v6) & ~v10);
  uint64_t v11 = ((v10 + 16) & ~v10) + *(void *)(v9 + 24) + 7;
  unint64_t v12 = ((unint64_t)a1 + v11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = ((unint64_t)a2 + v11) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v12 = *(void *)v13;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for WheelPicker(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 16) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 9;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187724ADCLL);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v15 = 0;
        }
        if (((*(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 16) & ~v6) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  uint64_t v17 = (unint64_t *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v17 + v6 + 8) & ~v6);
  }
  unint64_t v18 = *v17;
  if (v18 >= 0xFFFFFFFF) {
    LODWORD(v18) = -1;
  }
  return (v18 + 1);
}

void storeEnumTagSinglePayload for WheelPicker(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 9;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_47;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            unint64_t v19 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
            if ((v7 & 0x80000000) != 0)
            {
              uint64_t v21 = *(void (**)(unint64_t))(v6 + 56);
              v21(((unint64_t)v19 + v9 + 8) & ~v9);
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v20 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v20 = a2 - 1;
              }
              *unint64_t v19 = v20;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = (~v8 + a2) >> v11;
  if (v10 < 4) {
    int v17 = v16 + 1;
  }
  else {
    int v17 = 1;
  }
  if (v10 >= 4) {
    unsigned int v18 = ~v8 + a2;
  }
  else {
    unsigned int v18 = (~(_BYTE)v8 + a2);
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v18;
  }
  else {
    *(_DWORD *)a1 = v18;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v17;
      break;
    case 3:
LABEL_47:
      __break(1u);
      JUMPOUT(0x187724D10);
    case 4:
      *(_DWORD *)&a1[v10] = v17;
      break;
    default:
      return;
  }
}

uint64_t associated type witness table accessor for View.Body : View in WheelPicker<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t WheelPicker.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v55 = a2;
  uint64_t v52 = *(void *)(a1 - 8);
  uint64_t v53 = *(void *)(v52 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v50 = v3;
  unint64_t v51 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = *(void *)(v3 + 24);
  uint64_t v6 = type metadata accessor for PickerStyleConfiguration.Content();
  uint64_t v57 = v6;
  int v58 = &protocol witness table for PickerStyleConfiguration<A>.Content;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v42 = v5;
  type metadata accessor for PickerStyleConfiguration.Label();
  type metadata accessor for WheelPicker_Phone<DataSource>(255, &lazy cache variable for type metadata for WheelPicker_Phone<DataSource>, (uint64_t (*)(void))lazy protocol witness table accessor for type DataSource and conformance DataSource, (uint64_t)&unk_1ED40C668, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for WheelPicker_Phone);
  type metadata accessor for LabeledContent();
  type metadata accessor for WheelPicker_Phone<DataSource>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityCombinedLabeledContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent, (uint64_t)&type metadata for AccessibilityCombinedLabeledContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<_SemanticFeature_v2, WheelPickerLabelsHiddenModifier, EmptyModifier>();
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v57 = v6;
  int v58 = &protocol witness table for PickerStyleConfiguration<A>.Content;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v46 = OpaqueTypeConformance2;
  unint64_t v10 = lazy protocol witness table accessor for type WheelPicker_Phone<DataSource> and conformance WheelPicker_Phone<A>();
  uint64_t v65 = &protocol witness table for PickerStyleConfiguration<A>.Label;
  unint64_t v66 = v10;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v64 = &protocol witness table for ViewInputFlagModifier<A>;
  uint64_t v11 = swift_getWitnessTable();
  unint64_t v12 = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v2, WheelPickerLabelsHiddenModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v61 = v11;
  unint64_t v62 = v12;
  uint64_t v47 = v8;
  uint64_t v45 = swift_getWitnessTable();
  uint64_t v13 = OpaqueTypeMetadata2;
  uint64_t v57 = OpaqueTypeMetadata2;
  int v58 = (_UNKNOWN **)v8;
  uint64_t v59 = OpaqueTypeConformance2;
  uint64_t v60 = v45;
  uint64_t v48 = type metadata accessor for GroupElementsOfContent();
  uint64_t v14 = type metadata accessor for Group();
  uint64_t v49 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v43 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v44 = (char *)&v40 - v17;
  uint64_t v41 = OpaqueTypeMetadata2;
  uint64_t v18 = *(void *)(OpaqueTypeMetadata2 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v40 - v23;
  uint64_t v25 = v4;
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v4, v5, v26, v27);
  swift_checkMetadataState();
  View.verticalStackOrientation()();
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v24, v13);
  uint64_t v28 = v51;
  uint64_t v29 = v52;
  uint64_t v30 = v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v51, v54, v50);
  unint64_t v31 = (*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  uint64_t v32 = swift_allocObject();
  uint64_t v33 = v42;
  *(void *)(v32 + 16) = v25;
  *(void *)(v32 + 24) = v33;
  (*(void (**)(unint64_t, char *, uint64_t))(v29 + 32))(v32 + v31, v28, v30);
  unint64_t v34 = v43;
  uint64_t v35 = v41;
  Group.init<A, B>(subviews:transform:)();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v24, v35);
  uint64_t v56 = swift_getWitnessTable();
  swift_getWitnessTable();
  unint64_t v36 = v44;
  unsigned __int8 v37 = v34;
  static ViewBuilder.buildExpression<A>(_:)(v34);
  __n128 v38 = *(void (**)(char *, uint64_t))(v49 + 8);
  v38(v37, v14);
  static ViewBuilder.buildExpression<A>(_:)(v36);
  return ((uint64_t (*)(char *, uint64_t))v38)(v36, v14);
}

uint64_t closure #1 in WheelPicker.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v32 = a5;
  uint64_t v31 = type metadata accessor for Binding();
  uint64_t v8 = *(void *)(v31 - 8);
  MEMORY[0x1F4188790](v31);
  unint64_t v10 = (char *)&v29 - v9;
  type metadata accessor for PickerStyleConfiguration();
  PickerStyleConfiguration.$selection.getter();
  uint64_t v11 = _VariadicView_Children.tagIndex<A>(_:)();
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  char v17 = v16;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v31);
  uint64_t v36 = a1;
  uint64_t v37 = v11;
  uint64_t v38 = v13;
  uint64_t v39 = v15;
  char v40 = v17 & 1;
  uint64_t v33 = a3;
  uint64_t v34 = a4;
  uint64_t v35 = v30;
  type metadata accessor for PickerStyleConfiguration.Label();
  type metadata accessor for WheelPicker_Phone<DataSource>(0, &lazy cache variable for type metadata for WheelPicker_Phone<DataSource>, (uint64_t (*)(void))lazy protocol witness table accessor for type DataSource and conformance DataSource, (uint64_t)&unk_1ED40C668, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for WheelPicker_Phone);
  unint64_t v18 = lazy protocol witness table accessor for type WheelPicker_Phone<DataSource> and conformance WheelPicker_Phone<A>();
  LabeledContent<>.init(content:label:)((uint64_t (*)(void))partial apply for closure #1 in closure #1 in WheelPicker.body.getter, (uint64_t (*)(uint64_t))partial apply for closure #2 in closure #1 in WheelPicker.body.getter, (uint64_t)v47);
  uint64_t v19 = type metadata accessor for LabeledContent();
  uint64_t v45 = &protocol witness table for PickerStyleConfiguration<A>.Label;
  unint64_t v46 = v18;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v21 = lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent();
  View.input<A>(_:)((uint64_t)&type metadata for AccessibilityCombinedLabeledContent, v19, (uint64_t)&type metadata for AccessibilityCombinedLabeledContent, WitnessTable, v21);
  (*(void (**)(void *, uint64_t))(*(void *)(v19 - 8) + 8))(v47, v19);
  type metadata accessor for WheelPicker_Phone<DataSource>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityCombinedLabeledContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent, (uint64_t)&type metadata for AccessibilityCombinedLabeledContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  uint64_t v22 = type metadata accessor for ModifiedContent();
  uint64_t v43 = WitnessTable;
  uint64_t v44 = &protocol witness table for ViewInputFlagModifier<A>;
  uint64_t v23 = swift_getWitnessTable();
  type metadata accessor for StaticIf<_SemanticFeature_v2, WheelPickerLabelsHiddenModifier, EmptyModifier>();
  MEMORY[0x18C113660](v47, v24, v22, v24, v23);
  swift_release();
  swift_release();
  (*(void (**)(unsigned char *, uint64_t))(*(void *)(v22 - 8) + 8))(v48, v22);
  type metadata accessor for StaticIf<_SemanticFeature_v2, WheelPickerLabelsHiddenModifier, EmptyModifier>();
  uint64_t v25 = type metadata accessor for ModifiedContent();
  unint64_t v26 = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v2, WheelPickerLabelsHiddenModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v41 = v23;
  unint64_t v42 = v26;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v47);
  uint64_t v27 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)(v25 - 8) + 8);
  v27(v47, v25);
  static ViewBuilder.buildExpression<A>(_:)(v48);
  return v27(v48, v25);
}

double closure #1 in closure #1 in WheelPicker.body.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  outlined init with copy of SubviewsCollection(a1, (uint64_t)v20);
  type metadata accessor for MainActor();
  swift_retain();
  swift_retain();
  uint64_t v11 = static MainActor.shared.getter();
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = MEMORY[0x1E4FBCFD8];
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = v13;
  *(void *)(v12 + 32) = a2;
  *(void *)(v12 + 40) = a3;
  *(void *)(v12 + 48) = a4;
  *(unsigned char *)(v12 + 56) = a5 & 1;
  swift_retain();
  swift_retain();
  uint64_t v14 = static MainActor.shared.getter();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  *(void *)(v15 + 24) = v13;
  *(void *)(v15 + 32) = a2;
  *(void *)(v15 + 40) = a3;
  *(void *)(v15 + 48) = a4;
  *(unsigned char *)(v15 + 56) = a5 & 1;
  type metadata accessor for [Int](0, &lazy cache variable for type metadata for [Int], MEMORY[0x1E4FBB320]);
  Binding.init(get:set:)();
  long long v16 = v20[1];
  *(_OWORD *)a6 = v20[0];
  *(_OWORD *)(a6 + 16) = v16;
  *(_OWORD *)(a6 + 32) = v20[2];
  *(void *)(a6 + 48) = v21;
  *(void *)(a6 + 56) = v18;
  double result = *(double *)&v19;
  *(_OWORD *)(a6 + 64) = v19;
  return result;
}

void *closure #1 in closure #1 in closure #1 in WheelPicker.body.getter@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for [Int](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Int>, MEMORY[0x1E4FBBE00]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_18834BB80;
  type metadata accessor for Binding<Int?>();
  double result = MEMORY[0x18C113DA0](&v5);
  if (v6) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v5;
  }
  *(void *)(v2 + 32) = v4;
  *a1 = v2;
  return result;
}

uint64_t closure #2 in closure #1 in closure #1 in WheelPicker.body.getter()
{
  return swift_release();
}

uint64_t closure #2 in closure #1 in WheelPicker.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a2, a3, a3, a4);
  uint64_t v4 = type metadata accessor for PickerStyleConfiguration.Label();
  uint64_t v5 = static ViewBuilder.buildExpression<A>(_:)(v4);

  return static ViewBuilder.buildExpression<A>(_:)(v5);
}

uint64_t base witness table accessor for _AttributeBody in WheelPickerStyle.Body<A>()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type DataSource and conformance DataSource()
{
  unint64_t result = lazy protocol witness table cache variable for type DataSource and conformance DataSource;
  if (!lazy protocol witness table cache variable for type DataSource and conformance DataSource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DataSource and conformance DataSource);
  }
  return result;
}

void type metadata accessor for StaticIf<_SemanticFeature_v2, WheelPickerLabelsHiddenModifier, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v2, WheelPickerLabelsHiddenModifier, EmptyModifier>)
  {
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<_SemanticFeature_v2, WheelPickerLabelsHiddenModifier, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type WheelPicker_Phone<DataSource> and conformance WheelPicker_Phone<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type WheelPicker_Phone<DataSource> and conformance WheelPicker_Phone<A>;
  if (!lazy protocol witness table cache variable for type WheelPicker_Phone<DataSource> and conformance WheelPicker_Phone<A>)
  {
    type metadata accessor for WheelPicker_Phone<DataSource>(255, &lazy cache variable for type metadata for WheelPicker_Phone<DataSource>, (uint64_t (*)(void))lazy protocol witness table accessor for type DataSource and conformance DataSource, (uint64_t)&unk_1ED40C668, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for WheelPicker_Phone);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WheelPicker_Phone<DataSource> and conformance WheelPicker_Phone<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v2, WheelPickerLabelsHiddenModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v2, WheelPickerLabelsHiddenModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v2, WheelPickerLabelsHiddenModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<_SemanticFeature_v2, WheelPickerLabelsHiddenModifier, EmptyModifier>();
    lazy protocol witness table accessor for type WheelPickerLabelsHiddenModifier and conformance WheelPickerLabelsHiddenModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v2, WheelPickerLabelsHiddenModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WheelPickerLabelsHiddenModifier and conformance WheelPickerLabelsHiddenModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type WheelPickerLabelsHiddenModifier and conformance WheelPickerLabelsHiddenModifier;
  if (!lazy protocol witness table cache variable for type WheelPickerLabelsHiddenModifier and conformance WheelPickerLabelsHiddenModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WheelPickerLabelsHiddenModifier and conformance WheelPickerLabelsHiddenModifier);
  }
  return result;
}

uint64_t protocol witness for CustomWheelPickerDataSource.rows(in:) in conformance DataSource@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized DataSource.rows(in:)();
  *a1 = result;
  return result;
}

uint64_t sub_187725D00()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for WheelPicker() - 8) + 80);
  uint64_t v3 = v0 + ((v2 + 32) & ~v2);
  swift_release();
  swift_release();
  uint64_t v4 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3 + *(int *)(v4 + 32), v1);
  type metadata accessor for PickerStyleConfiguration();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in WheelPicker.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(type metadata accessor for WheelPicker() - 8);
  uint64_t v8 = v2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return closure #1 in WheelPicker.body.getter(a1, v8, v5, v6, a2);
}

double partial apply for closure #1 in closure #1 in WheelPicker.body.getter@<D0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in WheelPicker.body.getter(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned char *)(v1 + 48), a1);
}

uint64_t partial apply for closure #2 in closure #1 in WheelPicker.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #2 in closure #1 in WheelPicker.body.getter(v4[4], v4[2], v4[3], a4);
}

void *partial apply for closure #1 in closure #1 in closure #1 in WheelPicker.body.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in closure #1 in closure #1 in WheelPicker.body.getter(a1);
}

uint64_t objectdestroy_4Tm_0()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in WheelPicker.body.getter()
{
  return closure #2 in closure #1 in closure #1 in WheelPicker.body.getter();
}

void type metadata accessor for Binding<Int?>()
{
  if (!lazy cache variable for type metadata for Binding<Int?>)
  {
    type metadata accessor for [Int](255, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for Binding();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<Int?>);
    }
  }
}

void *type metadata accessor for WheelPickerLabelsHiddenModifier()
{
  return &unk_1ED45C138;
}

uint64_t destroy for DataSource(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DataSource(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void **)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  id v7 = v5;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for DataSource(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  long long v4 = (void *)a2[5];
  uint64_t v5 = (void *)a1[5];
  a1[5] = (uint64_t)v4;
  id v6 = v4;

  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for DataSource(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  id v6 = *(void **)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DataSource(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DataSource(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for DataSource()
{
  return &unk_1ED40C668;
}

uint64_t sub_1877261DC()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in WheelPickerLabelsHiddenModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for CustomWheelPickerDataSource.Rows : Collection in DataSource()
{
  return lazy protocol witness table accessor for type WheelPickerRow<AnyHashable, Subview> and conformance WheelPickerRow<A, B>(&lazy protocol witness table cache variable for type [WheelPickerRow<AnyHashable, Subview>] and conformance [A], (void (*)(uint64_t))type metadata accessor for [WheelPickerRow<AnyHashable, Subview>]);
}

uint64_t lazy protocol witness table accessor for type WheelPickerRow<AnyHashable, Subview> and conformance WheelPickerRow<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for WheelPickerRow<AnyHashable, Subview>()
{
  if (!lazy cache variable for type metadata for WheelPickerRow<AnyHashable, Subview>)
  {
    unint64_t v0 = type metadata accessor for WheelPickerRow();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WheelPickerRow<AnyHashable, Subview>);
    }
  }
}

uint64_t associated type witness table accessor for CustomWheelPickerDataSource.Rows.Sequence.Element : CustomWheelPickerRow in DataSource()
{
  return lazy protocol witness table accessor for type WheelPickerRow<AnyHashable, Subview> and conformance WheelPickerRow<A, B>(&lazy protocol witness table cache variable for type WheelPickerRow<AnyHashable, Subview> and conformance WheelPickerRow<A, B>, (void (*)(uint64_t))type metadata accessor for WheelPickerRow<AnyHashable, Subview>);
}

uint64_t specialized DataSource.rows(in:)()
{
  outlined init with copy of SubviewsCollection(v0, (uint64_t)v33);
  int64_t v1 = SubviewsCollection.endIndex.getter();
  uint64_t result = SubviewsCollection.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  uint64_t result = SubviewsCollection.endIndex.getter();
  if (v1 < 0 || result < v1) {
    goto LABEL_13;
  }
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v32 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    Swift::Int v4 = 0;
    uint64_t v3 = v32;
    do
    {
      _VariadicView_Children.subscript.getter();
      _OWORD v20[3] = v25;
      v20[4] = v26;
      long long v21 = v27;
      v20[0] = v22;
      v20[1] = v23;
      v20[2] = v24;
      _ViewList_View.viewID.getter();
      outlined init with copy of Subview.ID((uint64_t)v19, (uint64_t)v15);
      lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID();
      AnyHashable.init<A>(_:)();
      outlined destroy of Subview.ID((uint64_t)v19);
      outlined init with copy of Subview((uint64_t)v20, (uint64_t)v30 + 8);
      v15[0] = *((void *)&v21 + 1);
      ViewTraitCollection.value<A>(for:defaultValue:)();
      long long v28 = v16;
      long long v29 = v17;
      *(void *)&v30[0] = v18;
      v31[24] = (v14 & 1) == 0;
      outlined destroy of Subview((uint64_t)v20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
        uint64_t v3 = v32;
      }
      unint64_t v6 = *(void *)(v3 + 16);
      unint64_t v5 = *(void *)(v3 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1);
        uint64_t v3 = v32;
      }
      *(void *)(v3 + 16) = v6 + 1;
      id v7 = (_OWORD *)(v3 + 144 * v6);
      v7[2] = v28;
      long long v8 = v29;
      long long v9 = v30[0];
      long long v10 = v30[2];
      v7[5] = v30[1];
      v7[6] = v10;
      v7[3] = v8;
      v7[4] = v9;
      long long v11 = v30[3];
      long long v12 = v30[4];
      long long v13 = *(_OWORD *)v31;
      *(_OWORD *)((char *)v7 + 153) = *(_OWORD *)&v31[9];
      v7[8] = v12;
      v7[9] = v13;
      v7[7] = v11;
      Swift::Int v4 = SubviewsCollection.index(after:)(v4);
      --v1;
    }
    while (v1);
  }
  outlined destroy of LazySequence<SubviewsCollection>((uint64_t)v33);
  return v3;
}

uint64_t outlined init with copy of Subview.ID(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID()
{
  unint64_t result = lazy protocol witness table cache variable for type Subview.ID and conformance Subview.ID;
  if (!lazy protocol witness table cache variable for type Subview.ID and conformance Subview.ID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Subview.ID and conformance Subview.ID);
  }
  return result;
}

uint64_t outlined destroy of Subview.ID(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of Subview(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of LazySequence<SubviewsCollection>(uint64_t a1)
{
  type metadata accessor for WheelPicker_Phone<DataSource>(0, &lazy cache variable for type metadata for LazySequence<SubviewsCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection, MEMORY[0x1E4F40330], MEMORY[0x1E4FBB9E0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection()
{
  unint64_t result = lazy protocol witness table cache variable for type SubviewsCollection and conformance SubviewsCollection;
  if (!lazy protocol witness table cache variable for type SubviewsCollection and conformance SubviewsCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubviewsCollection and conformance SubviewsCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SubviewsCollection and conformance SubviewsCollection;
  if (!lazy protocol witness table cache variable for type SubviewsCollection and conformance SubviewsCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubviewsCollection and conformance SubviewsCollection);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<WheelPickerLabelsHiddenModifier>, LabelsHiddenModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<WheelPickerLabelsHiddenModifier>, LabelsHiddenModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<WheelPickerLabelsHiddenModifier>, LabelsHiddenModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<WheelPickerLabelsHiddenModifier>, LabelsHiddenModifier>();
    lazy protocol witness table accessor for type _ViewModifier_Content<WheelPickerLabelsHiddenModifier> and conformance _ViewModifier_Content<A>();
    lazy protocol witness table accessor for type LabelsHiddenModifier and conformance LabelsHiddenModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<WheelPickerLabelsHiddenModifier>, LabelsHiddenModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<WheelPickerLabelsHiddenModifier>, LabelsHiddenModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<WheelPickerLabelsHiddenModifier>, LabelsHiddenModifier>)
  {
    type metadata accessor for WheelPicker_Phone<DataSource>(255, &lazy cache variable for type metadata for _ViewModifier_Content<WheelPickerLabelsHiddenModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type WheelPickerLabelsHiddenModifier and conformance WheelPickerLabelsHiddenModifier, (uint64_t)&unk_1ED45C138, MEMORY[0x1E4F408E0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<WheelPickerLabelsHiddenModifier>, LabelsHiddenModifier>);
    }
  }
}

void type metadata accessor for WheelPicker_Phone<DataSource>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<WheelPickerLabelsHiddenModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<WheelPickerLabelsHiddenModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<WheelPickerLabelsHiddenModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for WheelPicker_Phone<DataSource>(255, &lazy cache variable for type metadata for _ViewModifier_Content<WheelPickerLabelsHiddenModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type WheelPickerLabelsHiddenModifier and conformance WheelPickerLabelsHiddenModifier, (uint64_t)&unk_1ED45C138, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<WheelPickerLabelsHiddenModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabelsHiddenModifier and conformance LabelsHiddenModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type LabelsHiddenModifier and conformance LabelsHiddenModifier;
  if (!lazy protocol witness table cache variable for type LabelsHiddenModifier and conformance LabelsHiddenModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelsHiddenModifier and conformance LabelsHiddenModifier);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TextInputSuggestionsModifier(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 1) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)&a1[v9];
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)&a1[v9];
      if (!*(_WORD *)&a1[v9]) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 > 0xFE) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((unint64_t)&a1[v6 + 1] & ~v6);
      }
      unsigned int v15 = *a1;
      BOOL v16 = v15 >= 2;
      int v17 = (v15 + 2147483646) & 0x7FFFFFFF;
      if (v16) {
        return (v17 + 1);
      }
      else {
        return 0;
      }
    }
  }
  int v11 = a1[v9];
  if (!a1[v9]) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *(unsigned __int16 *)a1;
        break;
      case 3:
        LODWORD(v9) = *(unsigned __int16 *)a1 | (a1[2] << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for TextInputSuggestionsModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 1) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x187727104);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 > 0xFE)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 1] & ~v9;
          long long v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else
        {
          *a1 = a2 + 1;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for TextInputSuggestionsModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for OnChangeOfSuggestionsModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OnChangeOfSuggestionsModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for OnChangeOfSuggestionsModifier(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for OnChangeOfSuggestionsModifier(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OnChangeOfSuggestionsModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in OnChangeOfSuggestionsModifier()
{
  return &protocol witness table for OnChangeOfSuggestionsModifier;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in TextInputSuggestionsModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void protocol witness for View.body.getter in conformance EnvironmentValues.TextInputSuggestions()
{
}

uint64_t TextInputSuggestionsModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  swift_getWitnessTable();
  uint64_t v3 = type metadata accessor for _ViewModifier_Content();
  uint64_t v22 = *(void *)(a1 + 16);
  uint64_t v4 = type metadata accessor for Optional();
  unint64_t v23 = lazy protocol witness table accessor for type EnvironmentValues.TextInputSuggestions and conformance EnvironmentValues.TextInputSuggestions();
  uint64_t v39 = *(void *)(a1 + 24);
  uint64_t v5 = v39;
  uint64_t v35 = &type metadata for EnvironmentValues.TextInputSuggestions;
  uint64_t v36 = v4;
  unint64_t v37 = v23;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for StaticSourceWriter();
  uint64_t v6 = type metadata accessor for ModifiedContent();
  uint64_t v24 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  unsigned int v8 = (char *)&v21 - v7;
  type metadata accessor for ViewInputFlagModifier<HasTextInputSuggestions>();
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  unsigned int v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  int v15 = (char *)&v21 - v14;
  uint64_t v28 = v22;
  uint64_t v29 = v5;
  uint64_t v30 = v25;
  uint64_t v16 = swift_getWitnessTable();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for EnvironmentValues.TextInputSuggestions, (void (*)(double))partial apply for closure #1 in TextInputSuggestionsModifier.body(content:), (uint64_t)v27, v3, (uint64_t)&type metadata for EnvironmentValues.TextInputSuggestions, v4, v16);
  uint64_t v33 = v16;
  uint64_t v34 = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t v17 = swift_getWitnessTable();
  unint64_t HasTextInputSuggestions = lazy protocol witness table accessor for type HasTextInputSuggestions and conformance HasTextInputSuggestions();
  View.input<A>(_:)((uint64_t)&type metadata for HasTextInputSuggestions, v6, (uint64_t)&type metadata for HasTextInputSuggestions, v17, HasTextInputSuggestions);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v6);
  uint64_t v31 = v17;
  uint64_t v32 = &protocol witness table for ViewInputFlagModifier<A>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v12);
  long long v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v12, v9);
  static ViewBuilder.buildExpression<A>(_:)(v15);
  return ((uint64_t (*)(char *, uint64_t))v19)(v15, v9);
}

uint64_t closure #1 in TextInputSuggestionsModifier.body(content:)(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  unsigned int v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  unsigned int v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  int v15 = (char *)v19 - v14;
  if (*a1 == 1)
  {
    uint64_t v16 = type metadata accessor for TextInputSuggestionsModifier();
    static ViewBuilder.buildExpression<A>(_:)(&a1[*(int *)(v16 + 36)]);
    static ViewBuilder.buildExpression<A>(_:)(v8);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v12, 0, 1, a2);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v12, 1, 1, a2);
  }
  static ToolbarContentBuilder.buildIf<A>(_:)((uint64_t)v12, (uint64_t)v15);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v12, v9);
  v19[1] = a3;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v15);
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, v9);
}

uint64_t associated type witness table accessor for View.Body : View in TextInputSuggestions<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance HasTextInputSuggestions()
{
  lazy protocol witness table accessor for type HasTextInputSuggestions and conformance HasTextInputSuggestions();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance HasTextInputSuggestions()
{
  return PropertyList.subscript.setter();
}

uint64_t TextInputSuggestions.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v44 = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  type metadata accessor for MergePlatformItemsView<ModifiedContent<MappedViewElement.Placeholder, _PreferenceTransformModifier<PlatformItemList.Key>>>();
  uint64_t v5 = *(_UNKNOWN ***)(a1 + 24);
  uint64_t v68 = v4;
  uint64_t v69 = v6;
  uint64_t v70 = v5;
  uint64_t v71 = &protocol witness table for MergePlatformItemsView<A>;
  uint64_t v7 = type metadata accessor for MappedViews();
  uint64_t v41 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  unsigned int v12 = (char *)&v41 - v11;
  uint64_t v68 = MEMORY[0x1E4FBC248];
  uint64_t v69 = v4;
  uint64_t v70 = (_UNKNOWN **)MEMORY[0x1E4FBC258];
  uint64_t v71 = v5;
  uint64_t v13 = type metadata accessor for List();
  type metadata accessor for _EnvironmentKeyWritingModifier<Binding<EditMode>?>();
  uint64_t v46 = v13;
  uint64_t v14 = type metadata accessor for ModifiedContent();
  type metadata accessor for _PreferenceTransformModifier<PlatformItemList.Key>(255, &lazy cache variable for type metadata for ListStyleWriter<InsetListStyle>, (uint64_t)&type metadata for InsetListStyle, (uint64_t)&protocol witness table for InsetListStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ListStyleWriter);
  uint64_t v47 = v14;
  uint64_t v15 = type metadata accessor for ModifiedContent();
  type metadata accessor for _PreferenceTransformModifier<PlatformItemList.Key>(255, &lazy cache variable for type metadata for StyleContextWriter<TextInputSuggestionsContext>, MEMORY[0x1E4F41020], MEMORY[0x1E4F41018], MEMORY[0x1E4F40318]);
  uint64_t v45 = v15;
  uint64_t v16 = type metadata accessor for ModifiedContent();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  long long v19 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v41 - v21;
  uint64_t v43 = type metadata accessor for _ConditionalContent();
  uint64_t v42 = *(void *)(v43 - 8);
  MEMORY[0x1F4188790](v43);
  uint64_t v24 = (char *)&v41 - v23;
  if (*v2 == 1)
  {
    TextInputSuggestions.listContent.getter(a1, (uint64_t)v19);
    uint64_t WitnessTable = swift_getWitnessTable();
    unint64_t v26 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Binding<EditMode>?> and conformance _EnvironmentKeyWritingModifier<A>();
    uint64_t v52 = WitnessTable;
    unint64_t v53 = v26;
    uint64_t v50 = swift_getWitnessTable();
    unint64_t v51 = &protocol witness table for ListStyleWriter<A>;
    uint64_t v27 = swift_getWitnessTable();
    unint64_t v28 = lazy protocol witness table accessor for type StyleContextWriter<TextInputSuggestionsContext> and conformance StyleContextWriter<A>();
    uint64_t v48 = v27;
    unint64_t v49 = v28;
    swift_getWitnessTable();
    static ViewBuilder.buildExpression<A>(_:)(v19);
    uint64_t v29 = *(void (**)(char *, uint64_t))(v17 + 8);
    v29(v19, v16);
    static ViewBuilder.buildExpression<A>(_:)(v22);
    static ViewBuilder.buildEither<A, B>(first:)((uint64_t)v19, v16);
    v29(v19, v16);
    v29(v22, v16);
  }
  else
  {
    TextInputSuggestions.platformItemContent.getter(a1, (uint64_t)v9);
    static ViewBuilder.buildExpression<A>(_:)(v9);
    uint64_t v30 = *(void (**)(char *, uint64_t))(v41 + 8);
    v30(v9, v7);
    static ViewBuilder.buildExpression<A>(_:)(v12);
    uint64_t v31 = swift_getWitnessTable();
    unint64_t v32 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Binding<EditMode>?> and conformance _EnvironmentKeyWritingModifier<A>();
    uint64_t v66 = v31;
    unint64_t v67 = v32;
    uint64_t v64 = swift_getWitnessTable();
    uint64_t v65 = &protocol witness table for ListStyleWriter<A>;
    uint64_t v33 = swift_getWitnessTable();
    unint64_t v34 = lazy protocol witness table accessor for type StyleContextWriter<TextInputSuggestionsContext> and conformance StyleContextWriter<A>();
    uint64_t v62 = v33;
    unint64_t v63 = v34;
    swift_getWitnessTable();
    static ViewBuilder.buildEither<A, B>(second:)((uint64_t)v9, v16, v7);
    v30(v9, v7);
    v30(v12, v7);
  }
  uint64_t v35 = swift_getWitnessTable();
  unint64_t v36 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Binding<EditMode>?> and conformance _EnvironmentKeyWritingModifier<A>();
  uint64_t v60 = v35;
  unint64_t v61 = v36;
  uint64_t v58 = swift_getWitnessTable();
  uint64_t v59 = &protocol witness table for ListStyleWriter<A>;
  uint64_t v37 = swift_getWitnessTable();
  unint64_t v38 = lazy protocol witness table accessor for type StyleContextWriter<TextInputSuggestionsContext> and conformance StyleContextWriter<A>();
  uint64_t v56 = v37;
  unint64_t v57 = v38;
  uint64_t v54 = swift_getWitnessTable();
  uint64_t v55 = &protocol witness table for MappedViews<A, B>;
  uint64_t v39 = v43;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v24);
  return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v24, v39);
}

uint64_t TextInputSuggestions.listContent.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v41 = MEMORY[0x1E4FBC248];
  uint64_t v42 = v3;
  uint64_t v43 = MEMORY[0x1E4FBC258];
  uint64_t v44 = v4;
  uint64_t v5 = type metadata accessor for List();
  uint64_t v32 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v27 - v6;
  type metadata accessor for _EnvironmentKeyWritingModifier<Binding<EditMode>?>();
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v33 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v27 - v9;
  type metadata accessor for _PreferenceTransformModifier<PlatformItemList.Key>(255, &lazy cache variable for type metadata for ListStyleWriter<InsetListStyle>, (uint64_t)&type metadata for InsetListStyle, (uint64_t)&protocol witness table for InsetListStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ListStyleWriter);
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v31 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  unint64_t v28 = (char *)&v27 - v12;
  type metadata accessor for _PreferenceTransformModifier<PlatformItemList.Key>(255, &lazy cache variable for type metadata for StyleContextWriter<TextInputSuggestionsContext>, MEMORY[0x1E4F41020], MEMORY[0x1E4F41018], MEMORY[0x1E4F40318]);
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v30 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v29 = (char *)&v27 - v17;
  TextInputSuggestions.baseList.getter(a1);
  swift_getKeyPath();
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  LOBYTE(v43) = 0;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v5);
  uint64_t v41 = 70;
  unint64_t v19 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Binding<EditMode>?> and conformance _EnvironmentKeyWritingModifier<A>();
  uint64_t v39 = WitnessTable;
  unint64_t v40 = v19;
  uint64_t v20 = swift_getWitnessTable();
  uint64_t v21 = v28;
  View.listStyle<A>(_:)((uint64_t)&v41, v8, (uint64_t)&type metadata for InsetListStyle, v20);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v8);
  uint64_t v37 = v20;
  unint64_t v38 = &protocol witness table for ListStyleWriter<A>;
  uint64_t v22 = swift_getWitnessTable();
  View.styleContext<A>(_:)();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v21, v11);
  unint64_t v23 = lazy protocol witness table accessor for type StyleContextWriter<TextInputSuggestionsContext> and conformance StyleContextWriter<A>();
  uint64_t v35 = v22;
  unint64_t v36 = v23;
  swift_getWitnessTable();
  uint64_t v24 = v29;
  static ViewBuilder.buildExpression<A>(_:)(v15);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v30 + 8);
  v25(v15, v13);
  static ViewBuilder.buildExpression<A>(_:)(v24);
  return ((uint64_t (*)(char *, uint64_t))v25)(v24, v13);
}

uint64_t TextInputSuggestions.platformItemContent.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v16[1] = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  type metadata accessor for MergePlatformItemsView<ModifiedContent<MappedViewElement.Placeholder, _PreferenceTransformModifier<PlatformItemList.Key>>>();
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a1 + 24);
  void v16[2] = v3;
  v16[3] = v4;
  v16[4] = v6;
  v16[5] = &protocol witness table for MergePlatformItemsView<A>;
  uint64_t v7 = type metadata accessor for MappedViews();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v16 - v12;
  View.map<A>(_:)((uint64_t)closure #1 in TextInputSuggestions.platformItemContent.getter, 0, v3, v5, v6, (uint64_t)&protocol witness table for MergePlatformItemsView<A>, (uint64_t)v10);
  static ViewBuilder.buildExpression<A>(_:)(v10);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v8 + 8);
  v14(v10, v7);
  static ViewBuilder.buildExpression<A>(_:)(v13);
  return ((uint64_t (*)(char *, uint64_t))v14)(v13, v7);
}

uint64_t TextInputSuggestions.baseList.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v17 = MEMORY[0x1E4FBC248];
  uint64_t v18 = v2;
  uint64_t v19 = MEMORY[0x1E4FBC258];
  uint64_t v20 = v3;
  uint64_t v4 = type metadata accessor for List();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = &v13[-v9];
  uint64_t v14 = v2;
  uint64_t v15 = v3;
  uint64_t v16 = v1;
  List<>.init(content:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))partial apply for closure #1 in TextInputSuggestions.baseList.getter, (uint64_t)v7);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v7);
  uint64_t v11 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
  v11(v7, v4);
  static ViewBuilder.buildExpression<A>(_:)(v10);
  return ((uint64_t (*)(unsigned char *, uint64_t))v11)(v10, v4);
}

uint64_t closure #1 in TextInputSuggestions.baseList.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TextInputSuggestions();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v7 + 36));
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

void closure #1 in TextInputSuggestions.platformItemContent.getter(void (**a1)(uint64_t a1)@<X8>)
{
  *a1 = closure #1 in View.forcePlatformItem();
  a1[1] = 0;
}

uint64_t static OnChangeOfSuggestionsModifier._makeViewList(modifier:inputs:body:)(int *a1, uint64_t a2, void (*a3)(uint64_t, unint64_t *))
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  int v3 = *a1;
  uint64_t v4 = *(void *)(a2 + 16);
  int v27 = *(_DWORD *)(a2 + 24);
  int v28 = *(_DWORD *)(a2 + 8);
  int v25 = *(_DWORD *)(a2 + 32);
  int v26 = *(_DWORD *)(a2 + 28);
  int v24 = *(_DWORD *)(a2 + 36);
  uint64_t v5 = *(void *)(a2 + 40);
  int v6 = *(_DWORD *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 72);
  char v8 = *(unsigned char *)(a2 + 80);
  unint64_t v41 = *(void *)a2;
  unint64_t v23 = v41;
  int v42 = v28;
  uint64_t v43 = v4;
  int v44 = v27;
  int v45 = v26;
  int v46 = v25;
  int v47 = v24;
  uint64_t v48 = v5;
  unsigned long long v49 = *(_OWORD *)(a2 + 48);
  int v50 = v6;
  uint64_t v51 = v7;
  char v52 = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _GraphInputs.pushStyleContext<A>(_:)();
  unint64_t v9 = v41;
  unint64_t v20 = *((void *)&v49 + 1);
  unint64_t v21 = v49;
  uint64_t v10 = v51;
  char v18 = v52;
  int v19 = v50;
  unint64_t v29 = v41;
  int v30 = v28;
  *(void *)uint64_t v32 = v4;
  *(_DWORD *)&v32[8] = v27;
  int v33 = v26;
  int v34 = v25;
  int v35 = v24;
  uint64_t v36 = v5;
  unsigned long long v37 = v49;
  int v38 = v50;
  uint64_t v39 = v51;
  char v40 = v52;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v11 = swift_bridgeObjectRetain();
  a3(v11, &v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  LODWORD(v29) = v3;
  type metadata accessor for _GraphValue<OnChangeOfSuggestionsModifier>(0, &lazy cache variable for type metadata for _GraphValue<OnChangeOfSuggestionsModifier>, (uint64_t)&type metadata for OnChangeOfSuggestionsModifier, MEMORY[0x1E4F3F590]);
  unsigned int v12 = _GraphValue.value.getter();
  unint64_t v29 = v9;
  int v30 = v28;
  *(void *)uint64_t v32 = v4;
  *(_DWORD *)&v32[8] = v27;
  int v33 = v26;
  int v34 = v25;
  int v35 = v24;
  uint64_t v36 = v5;
  unsigned long long v37 = __PAIR128__(v20, v21);
  int v38 = v19;
  uint64_t v39 = v10;
  char v40 = v18;
  unsigned int v13 = _ViewListOutputs.makeAttribute(inputs:)();
  unint64_t v29 = v23;
  int v30 = v28;
  *(void *)uint64_t v32 = v4;
  *(_DWORD *)&v32[8] = v27;
  int v33 = v26;
  int v34 = v25;
  int v35 = v24;
  uint64_t v36 = v5;
  LODWORD(v4) = _GraphInputs.phase.getter();
  UpdateCycleDetector.init()();
  int v14 = v30;
  char v15 = v31;
  unint64_t v16 = v29;
  unint64_t v29 = __PAIR64__(v13, v12);
  int v30 = v4;
  char v31 = 2;
  *(_DWORD *)uint64_t v32 = 0;
  *(void *)&v32[4] = v16;
  int v33 = v14;
  LOBYTE(v34) = v15;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type OnChangeOfSuggestionsModifier.UpdateBinding and conformance OnChangeOfSuggestionsModifier.UpdateBinding();
  Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t OnChangeOfSuggestionsModifier.UpdateBinding.updateValue()()
{
  uint64_t v1 = v0;
  int v2 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v2 != *(_DWORD *)(v0 + 16))
  {
    *(_DWORD *)(v0 + 16) = v2;
    *(void *)(v0 + 24) = 0xFFFFFFFFLL;
    *(unsigned char *)(v0 + 32) = 0;
  }
  type metadata accessor for ViewList();
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of TableColumnList(Value, (uint64_t)v16);
  uint64_t v4 = v17;
  uint64_t v5 = v18;
  __swift_project_boxed_opaque_existential_1(v16, v17);
  uint64_t v19 = 2;
  uint64_t v6 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v5 + 8))(&v19, v4, v5);
  BOOL v7 = v6 == 0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  int v8 = *(unsigned __int8 *)(v1 + 12);
  if (v8 == 2 || (BOOL v15 = v6 == 0, (result = AGGraphGetOutputValue()) == 0) || ((v8 ^ v15) & 1) != 0)
  {
    uint64_t result = UpdateCycleDetector.dispatch(label:isDebug:)();
    if (result)
    {
      AGGraphClearUpdate();
      uint64_t v10 = AGGraphGetValue();
      uint64_t v11 = *(void *)v10;
      uint64_t v12 = *(void *)(v10 + 8);
      char v13 = *(unsigned char *)(v10 + 16);
      swift_retain();
      swift_retain();
      AGGraphSetUpdate();
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = v11;
      *(void *)(v14 + 24) = v12;
      *(unsigned char *)(v14 + 32) = v13;
      *(unsigned char *)(v14 + 33) = v7;
      swift_retain();
      swift_retain();
      static Update.enqueueAction(_:)();
      swift_release();
      swift_release();
      uint64_t result = swift_release();
    }
  }
  *(unsigned char *)(v1 + 12) = v7;
  return result;
}

unint64_t implicit closure #2 in OnChangeOfSuggestionsModifier.UpdateBinding.updateValue()()
{
  return 0xD000000000000011;
}

void *closure #2 in OnChangeOfSuggestionsModifier.UpdateBinding.updateValue()(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v8 = a1;
  uint64_t v9 = a2;
  char v10 = a3;
  type metadata accessor for Binding<Bool?>();
  uint64_t result = MEMORY[0x18C113DA0](&v7);
  if (v7 == 2 || (v7 & 1) == (a4 & 1)) {
    return (void *)dispatch thunk of AnyLocation.set(_:transaction:)();
  }
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance OnChangeOfSuggestionsModifier()
{
}

unint64_t lazy protocol witness table accessor for type OnChangeOfSuggestionsModifier.UpdateBinding and conformance OnChangeOfSuggestionsModifier.UpdateBinding()
{
  unint64_t result = lazy protocol witness table cache variable for type OnChangeOfSuggestionsModifier.UpdateBinding and conformance OnChangeOfSuggestionsModifier.UpdateBinding;
  if (!lazy protocol witness table cache variable for type OnChangeOfSuggestionsModifier.UpdateBinding and conformance OnChangeOfSuggestionsModifier.UpdateBinding)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnChangeOfSuggestionsModifier.UpdateBinding and conformance OnChangeOfSuggestionsModifier.UpdateBinding);
  }
  return result;
}

uint64_t sub_1877290E0()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void *partial apply for closure #2 in OnChangeOfSuggestionsModifier.UpdateBinding.updateValue()()
{
  return closure #2 in OnChangeOfSuggestionsModifier.UpdateBinding.updateValue()(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32), *(unsigned char *)(v0 + 33));
}

void type metadata accessor for Binding<Bool?>()
{
  if (!lazy cache variable for type metadata for Binding<Bool?>)
  {
    type metadata accessor for _GraphValue<OnChangeOfSuggestionsModifier>(255, (unint64_t *)&lazy cache variable for type metadata for Bool?, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for Binding();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool?>);
    }
  }
}

void type metadata accessor for MergePlatformItemsView<ModifiedContent<MappedViewElement.Placeholder, _PreferenceTransformModifier<PlatformItemList.Key>>>()
{
  if (!lazy cache variable for type metadata for MergePlatformItemsView<ModifiedContent<MappedViewElement.Placeholder, _PreferenceTransformModifier<PlatformItemList.Key>>>)
  {
    type metadata accessor for ModifiedContent<MappedViewElement.Placeholder, _PreferenceTransformModifier<PlatformItemList.Key>>();
    lazy protocol witness table accessor for type ModifiedContent<MappedViewElement.Placeholder, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for MergePlatformItemsView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MergePlatformItemsView<ModifiedContent<MappedViewElement.Placeholder, _PreferenceTransformModifier<PlatformItemList.Key>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<MappedViewElement.Placeholder, _PreferenceTransformModifier<PlatformItemList.Key>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<MappedViewElement.Placeholder, _PreferenceTransformModifier<PlatformItemList.Key>>)
  {
    type metadata accessor for _PreferenceTransformModifier<PlatformItemList.Key>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<PlatformItemList.Key>, (uint64_t)&type metadata for PlatformItemList.Key, (uint64_t)&protocol witness table for PlatformItemList.Key, MEMORY[0x1E4F41108]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<MappedViewElement.Placeholder, _PreferenceTransformModifier<PlatformItemList.Key>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<MappedViewElement.Placeholder, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<MappedViewElement.Placeholder, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<MappedViewElement.Placeholder, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<MappedViewElement.Placeholder, _PreferenceTransformModifier<PlatformItemList.Key>>();
    lazy protocol witness table accessor for type _PreferenceTransformModifier<PlatformItemList.Key> and conformance _PreferenceTransformModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<MappedViewElement.Placeholder, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<PlatformItemList.Key> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<PlatformItemList.Key> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<PlatformItemList.Key> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for _PreferenceTransformModifier<PlatformItemList.Key>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<PlatformItemList.Key>, (uint64_t)&type metadata for PlatformItemList.Key, (uint64_t)&protocol witness table for PlatformItemList.Key, MEMORY[0x1E4F41108]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<PlatformItemList.Key> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Binding<EditMode>?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Binding<EditMode>?>)
  {
    type metadata accessor for Binding<EditMode>?();
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Binding<EditMode>?>);
    }
  }
}

void type metadata accessor for _PreferenceTransformModifier<PlatformItemList.Key>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Binding<EditMode>?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Binding<EditMode>?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Binding<EditMode>?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Binding<EditMode>?>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Binding<EditMode>?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<TextInputSuggestionsContext> and conformance StyleContextWriter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type StyleContextWriter<TextInputSuggestionsContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<TextInputSuggestionsContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for _PreferenceTransformModifier<PlatformItemList.Key>(255, &lazy cache variable for type metadata for StyleContextWriter<TextInputSuggestionsContext>, MEMORY[0x1E4F41020], MEMORY[0x1E4F41018], MEMORY[0x1E4F40318]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<TextInputSuggestionsContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in TextInputSuggestions.baseList.getter()
{
  return closure #1 in TextInputSuggestions.baseList.getter(*(void *)(v0 + 32), *(void *)(v0 + 16));
}

unint64_t lazy protocol witness table accessor for type EnvironmentValues.TextInputSuggestions and conformance EnvironmentValues.TextInputSuggestions()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentValues.TextInputSuggestions and conformance EnvironmentValues.TextInputSuggestions;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.TextInputSuggestions and conformance EnvironmentValues.TextInputSuggestions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.TextInputSuggestions and conformance EnvironmentValues.TextInputSuggestions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnvironmentValues.TextInputSuggestions and conformance EnvironmentValues.TextInputSuggestions;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.TextInputSuggestions and conformance EnvironmentValues.TextInputSuggestions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.TextInputSuggestions and conformance EnvironmentValues.TextInputSuggestions);
  }
  return result;
}

void type metadata accessor for ViewInputFlagModifier<HasTextInputSuggestions>()
{
  if (!lazy cache variable for type metadata for ViewInputFlagModifier<HasTextInputSuggestions>)
  {
    lazy protocol witness table accessor for type HasTextInputSuggestions and conformance HasTextInputSuggestions();
    unint64_t v0 = type metadata accessor for ViewInputFlagModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<HasTextInputSuggestions>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type HasTextInputSuggestions and conformance HasTextInputSuggestions()
{
  unint64_t result = lazy protocol witness table cache variable for type HasTextInputSuggestions and conformance HasTextInputSuggestions;
  if (!lazy protocol witness table cache variable for type HasTextInputSuggestions and conformance HasTextInputSuggestions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasTextInputSuggestions and conformance HasTextInputSuggestions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HasTextInputSuggestions and conformance HasTextInputSuggestions;
  if (!lazy protocol witness table cache variable for type HasTextInputSuggestions and conformance HasTextInputSuggestions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasTextInputSuggestions and conformance HasTextInputSuggestions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HasTextInputSuggestions and conformance HasTextInputSuggestions;
  if (!lazy protocol witness table cache variable for type HasTextInputSuggestions and conformance HasTextInputSuggestions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasTextInputSuggestions and conformance HasTextInputSuggestions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HasTextInputSuggestions and conformance HasTextInputSuggestions;
  if (!lazy protocol witness table cache variable for type HasTextInputSuggestions and conformance HasTextInputSuggestions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasTextInputSuggestions and conformance HasTextInputSuggestions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HasTextInputSuggestions and conformance HasTextInputSuggestions;
  if (!lazy protocol witness table cache variable for type HasTextInputSuggestions and conformance HasTextInputSuggestions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasTextInputSuggestions and conformance HasTextInputSuggestions);
  }
  return result;
}

uint64_t partial apply for closure #1 in TextInputSuggestionsModifier.body(content:)()
{
  return closure #1 in TextInputSuggestionsModifier.body(content:)(*(unsigned char **)(v0 + 32), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

__n128 __swift_memcpy33_4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for OnChangeOfSuggestionsModifier.UpdateBinding(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for OnChangeOfSuggestionsModifier.UpdateBinding(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for OnChangeOfSuggestionsModifier.UpdateBinding()
{
  return &unk_1ED456568;
}

ValueMetadata *type metadata accessor for HasTextInputSuggestions()
{
  return &type metadata for HasTextInputSuggestions;
}

ValueMetadata *type metadata accessor for EnvironmentValues.TextInputSuggestions()
{
  return &type metadata for EnvironmentValues.TextInputSuggestions;
}

uint64_t sub_187729720()
{
  return swift_getWitnessTable();
}

uint64_t sub_187729914()
{
  return swift_getWitnessTable();
}

_UNKNOWN **base witness table accessor for View in EnvironmentValues.TextInputSuggestions()
{
  return &protocol witness table for EnvironmentValues.TextInputSuggestions;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in HasTextInputSuggestions()
{
  return &protocol witness table for HasTextInputSuggestions;
}

unint64_t instantiation function for generic protocol witness table for EnvironmentValues.TextInputSuggestions(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type EnvironmentValues.TextInputSuggestions and conformance EnvironmentValues.TextInputSuggestions();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t FocusStore.Entry.searchFieldState.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for FocusStore.Entry.Target();
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)&v13 - v8, v2 + *(int *)(a1 + 40), v5, v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of Binding<SearchFieldState>((uint64_t)v9, a2, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
    type metadata accessor for Binding<SearchFieldState>(0);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(a2, 0, 1, v10);
  }
  else
  {
    type metadata accessor for Binding<SearchFieldState>(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a2, 1, 1, v12);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
}

uint64_t FocusStore.Entry.init(value:focusScopes:searchFieldState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for FocusStore.Entry.Target();
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v14 - v11;
  outlined init with take of Binding<SearchFieldState>(a3, (uint64_t)&v14 - v11, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
  swift_storeEnumTagMultiPayload();
  return FocusStore.Entry.init(value:focusScopes:target:)(a1, a2, (uint64_t)v12, a4, a5);
}

uint64_t static FocusStore.Key.defaultValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for FocusStore.Entry();
  unsigned int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance FocusStore.Key<A>@<X0>(uint64_t a1@<X8>)
{
  return static FocusStore.Key.defaultValue.getter(a1);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance FocusStore.Key<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F40FD528](a1, a2, a3);
}

uint64_t (*FocusStoreLocation.wasRead.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)v1 + *(void *)(class metadata base offset for FocusStoreLocation + *v1 + 72));
  return FocusStoreLocation.wasRead.modify;
}

uint64_t FocusStoreLocation.wasRead.modify(uint64_t result)
{
  *(unsigned char *)(*(void *)result
           + *(void *)(class metadata base offset for FocusStoreLocation + **(void **)result + 72)) = *(unsigned char *)(result + 8);
  return result;
}

void FocusStoreLocation.__allocating_init()()
{
}

uint64_t FocusStoreLocation.__ivar_destroyer()
{
  uint64_t v1 = *(void *)v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  (*(void (**)(char *, void))(*(void *)(*(void *)(v1 + class metadata base offset for FocusStoreLocation)
                                                     - 8)
                                         + 8))(&v0[*(void *)(class metadata base offset for FocusStoreLocation + *(void *)v0 + 32)], *(void *)(v1 + class metadata base offset for FocusStoreLocation));
  uint64_t v2 = &v0[*(void *)(class metadata base offset for FocusStoreLocation + *(void *)v0 + 48)];
  swift_getTupleTypeMetadata2();
  uint64_t v3 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  BOOL v4 = &v0[*(void *)(class metadata base offset for FocusStoreLocation + *(void *)v0 + 56)];
  type metadata accessor for FocusStore.Entry();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

char *FocusStoreLocation.deinit()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (char *)AnyLocation.deinit();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  (*(void (**)(char *, void))(*(void *)(*(void *)(v1 + class metadata base offset for FocusStoreLocation)
                                                     - 8)
                                         + 8))(&v2[*(void *)(class metadata base offset for FocusStoreLocation + *(void *)v2 + 32)], *(void *)(v1 + class metadata base offset for FocusStoreLocation));
  uint64_t v3 = &v2[*(void *)(class metadata base offset for FocusStoreLocation + *(void *)v2 + 48)];
  swift_getTupleTypeMetadata2();
  uint64_t v4 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = &v2[*(void *)(class metadata base offset for FocusStoreLocation + *(void *)v2 + 56)];
  type metadata accessor for FocusStore.Entry();
  uint64_t v6 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  return v2;
}

uint64_t FocusStoreLocation.__deallocating_deinit()
{
  FocusStoreLocation.deinit();

  return swift_deallocClassInstance();
}

uint64_t assignWithTake for FocusStore(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FocusStore(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FocusStore(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for FocusStore.Entry(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned __int8 v6 = *(_DWORD *)(*(void *)(type metadata accessor for AttributedString() - 8) + 80);
  unsigned __int8 v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = *a2;
  *a1 = *a2;
  uint64_t v9 = (v7 | v6) & 0xF8 | 7u;
  uint64_t v10 = v8 + ((v9 + 16) & ~v9);
  swift_retain();
  return v10;
}

uint64_t assignWithCopy for FocusStore.Entry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unsigned __int8 v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *unsigned __int8 v7 = *v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = type metadata accessor for AttributedString();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = v11 + 8;
  unint64_t v13 = *(_DWORD *)(v10 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = (unsigned __int8 *)(((unint64_t)v7 + v11 + 8) & v13);
  BOOL v15 = (unsigned __int8 *)(((unint64_t)v8 + v11 + 8) & v13);
  if (v14 != v15)
  {
    uint64_t v16 = v9;
    uint64_t v17 = *(void *)(v9 - 8);
    unint64_t v18 = v11 & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v19 = *(void *)(v10 + 64);
    uint64_t v49 = v19;
    if (((v11 + 16) & v18) + ((v19 + ((v11 + 9) & ~v11)) & 0xFFFFFFFFFFFFFFFCLL) + 9 <= 0x10) {
      unint64_t v20 = 16;
    }
    else {
      unint64_t v20 = ((v11 + 16) & v18) + ((v19 + ((v11 + 9) & ~v11)) & 0xFFFFFFFFFFFFFFFCLL) + 9;
    }
    unsigned int v21 = v14[v20];
    unsigned int v22 = v21 - 2;
    if (v21 >= 2)
    {
      if (v20 <= 3) {
        uint64_t v23 = v20;
      }
      else {
        uint64_t v23 = 4;
      }
      switch(v23)
      {
        case 1:
          int v24 = *v14;
          goto LABEL_14;
        case 2:
          int v24 = *(unsigned __int16 *)v14;
          goto LABEL_14;
        case 3:
          int v24 = *(unsigned __int16 *)v14 | (v14[2] << 16);
          goto LABEL_14;
        case 4:
          int v24 = *(_DWORD *)v14;
LABEL_14:
          int v25 = (v24 | (v22 << (8 * v20))) + 2;
          unsigned int v21 = v24 + 2;
          if (v20 < 4) {
            unsigned int v21 = v25;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v26 = ~v11;
    if (v21 == 1)
    {
      uint64_t v27 = v9;
      swift_release();
      swift_release();
      uint64_t v26 = ~v11;
      uint64_t v16 = v27;
      unint64_t v18 = v11 & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
      (*(void (**)(unint64_t, uint64_t))(v17 + 8))((v11 + ((((v12 + ((unint64_t)(v14 + 15) & 0xFFFFFFFFFFFFFFF8)) & v18) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & ~v11, v16);
    }
    else
    {
      swift_weakDestroy();
      swift_weakDestroy();
    }
    unsigned int v28 = v15[v20];
    unsigned int v29 = v28 - 2;
    if (v28 >= 2)
    {
      if (v20 <= 3) {
        uint64_t v30 = v20;
      }
      else {
        uint64_t v30 = 4;
      }
      switch(v30)
      {
        case 1:
          int v31 = *v15;
          goto LABEL_28;
        case 2:
          int v31 = *(unsigned __int16 *)v15;
          goto LABEL_28;
        case 3:
          int v31 = *(unsigned __int16 *)v15 | (v15[2] << 16);
          goto LABEL_28;
        case 4:
          int v31 = *(_DWORD *)v15;
LABEL_28:
          int v32 = (v31 | (v29 << (8 * v20))) + 2;
          unsigned int v28 = v31 + 2;
          if (v20 < 4) {
            unsigned int v28 = v32;
          }
          break;
        default:
          break;
      }
    }
    if (v28 == 1)
    {
      *(void *)uint64_t v14 = *(void *)v15;
      int v33 = (void *)((unint64_t)(v14 + 15) & 0xFFFFFFFFFFFFFFF8);
      int v34 = (void *)((unint64_t)(v15 + 15) & 0xFFFFFFFFFFFFFFF8);
      *int v33 = *v34;
      unint64_t v35 = ((unint64_t)v33 + v12) & v18;
      unint64_t v36 = ((unint64_t)v34 + v12) & v18;
      *(unsigned char *)unint64_t v35 = *(unsigned char *)v36;
      *(unsigned char *)(v35 | 1) = *(unsigned char *)(v36 | 1);
      *(unsigned char *)(v35 | 2) = *(unsigned char *)(v36 | 2);
      *(unsigned char *)(v35 | 3) = *(unsigned char *)(v36 | 3);
      unint64_t v37 = (v35 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v38 = (v36 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      int v39 = *(_DWORD *)v38;
      *(unsigned char *)(v37 + 4) = *(unsigned char *)(v38 + 4);
      *(_DWORD *)unint64_t v37 = v39;
      uint64_t v40 = v11 + 5;
      uint64_t v41 = (v11 + 5 + v37) & v26;
      unint64_t v42 = (v40 + v38) & v26;
      uint64_t v43 = *(void (**)(uint64_t, unint64_t, uint64_t))(v17 + 16);
      swift_retain();
      swift_retain();
      v43(v41, v42, v16);
      *(unsigned char *)(v49 + v41) = *(unsigned char *)(v49 + v42);
      unint64_t v44 = (v49 + v41) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v45 = (v49 + v42) & 0xFFFFFFFFFFFFFFFCLL;
      int v46 = *(_DWORD *)(v45 + 4);
      *(unsigned char *)(v44 + 8) = *(unsigned char *)(v45 + 8);
      *(_DWORD *)(v44 + 4) = v46;
      char v47 = 1;
    }
    else
    {
      swift_weakCopyInit();
      swift_weakCopyInit();
      char v47 = 0;
    }
    v14[v20] = v47;
  }
  return a1;
}

void *initializeBufferWithCopyOfBuffer for FocusStore.Entry.Target(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      type metadata accessor for Binding<SearchFieldState>(0);
      uint64_t v8 = *(int *)(v7 + 32);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      *uint64_t v9 = *((unsigned char *)a2 + v8);
      v9[1] = *((unsigned char *)a2 + v8 + 1);
      *((_WORD *)v9 + 1) = *(_WORD *)((char *)a2 + v8 + 2);
      v9[8] = *((unsigned char *)a2 + v8 + 8);
      *((_DWORD *)v9 + 1) = *(_DWORD *)((char *)a2 + v8 + 4);
      uint64_t v11 = (int *)type metadata accessor for SearchFieldState(0);
      uint64_t v12 = v11[9];
      unsigned int v21 = &v9[v12];
      unint64_t v13 = &v10[v12];
      uint64_t v14 = type metadata accessor for AttributedString();
      BOOL v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
      swift_retain();
      swift_retain();
      v15(v21, v13, v14);
      v9[v11[10]] = v10[v11[10]];
      uint64_t v16 = v11[11];
      uint64_t v17 = &v9[v16];
      unint64_t v18 = &v10[v16];
      v17[4] = v18[4];
      *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
    }
    else
    {
      swift_weakCopyInit();
      swift_weakCopyInit();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for FocusStore.Entry.Target(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_release();
    swift_release();
    type metadata accessor for Binding<SearchFieldState>(0);
    uint64_t v3 = a1 + *(int *)(v2 + 32);
    uint64_t v4 = v3 + *(int *)(type metadata accessor for SearchFieldState(0) + 36);
    uint64_t v5 = type metadata accessor for AttributedString();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    swift_weakDestroy();
    return swift_weakDestroy();
  }
}

void *assignWithCopy for FocusStore.Entry.Target(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    (*(void (**)(void *, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      type metadata accessor for Binding<SearchFieldState>(0);
      uint64_t v6 = *(int *)(v5 + 32);
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      *uint64_t v7 = *((unsigned char *)a2 + v6);
      v7[1] = *((unsigned char *)a2 + v6 + 1);
      v7[2] = *((unsigned char *)a2 + v6 + 2);
      v7[3] = *((unsigned char *)a2 + v6 + 3);
      LODWORD(v6) = *(_DWORD *)((char *)a2 + v6 + 4);
      v7[8] = v8[8];
      *((_DWORD *)v7 + 1) = v6;
      uint64_t v9 = (int *)type metadata accessor for SearchFieldState(0);
      uint64_t v10 = v9[9];
      uint64_t v11 = &v7[v10];
      uint64_t v12 = &v8[v10];
      uint64_t v13 = type metadata accessor for AttributedString();
      uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
      swift_retain();
      swift_retain();
      v14(v11, v12, v13);
      v7[v9[10]] = v8[v9[10]];
      uint64_t v15 = v9[11];
      uint64_t v16 = &v7[v15];
      uint64_t v17 = &v8[v15];
      char v18 = v17[4];
      *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
      v16[4] = v18;
    }
    else
    {
      swift_weakCopyInit();
      swift_weakCopyInit();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for FocusStore.Entry.Target(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    (*(void (**)(void *, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v5 = a2[1];
      *a1 = *a2;
      a1[1] = v5;
      type metadata accessor for Binding<SearchFieldState>(0);
      uint64_t v7 = *(int *)(v6 + 32);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      *uint64_t v8 = *((unsigned char *)a2 + v7);
      v8[1] = *((unsigned char *)a2 + v7 + 1);
      *((_WORD *)v8 + 1) = *(_WORD *)((char *)a2 + v7 + 2);
      v8[8] = *((unsigned char *)a2 + v7 + 8);
      *((_DWORD *)v8 + 1) = *(_DWORD *)((char *)a2 + v7 + 4);
      uint64_t v10 = (int *)type metadata accessor for SearchFieldState(0);
      uint64_t v11 = v10[9];
      uint64_t v12 = &v8[v11];
      uint64_t v13 = &v9[v11];
      uint64_t v14 = type metadata accessor for AttributedString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
      v8[v10[10]] = v9[v10[10]];
      uint64_t v15 = v10[11];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      v16[4] = v17[4];
      *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
    }
    else
    {
      swift_weakTakeInit();
      swift_weakTakeInit();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for FocusStore.Entry.Target(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for FocusStore.Entry.Target(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t protocol witness for Location.wasRead.getter in conformance FocusStoreLocation<A>()
{
  return FocusStoreLocation.wasRead.getter() & 1;
}

uint64_t protocol witness for Location.wasRead.setter in conformance FocusStoreLocation<A>(uint64_t a1)
{
  return FocusStoreLocation.wasRead.setter(a1);
}

uint64_t (*protocol witness for Location.wasRead.modify in conformance FocusStoreLocation<A>(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = *v1;
  *(unsigned char *)(a1 + 8) = FocusStoreLocation.wasRead.getter() & 1;
  return protocol witness for Location.wasRead.modify in conformance FocusStoreLocation<A>;
}

uint64_t protocol witness for Location.wasRead.modify in conformance FocusStoreLocation<A>(uint64_t a1)
{
  return FocusStoreLocation.wasRead.setter(*(unsigned __int8 *)(a1 + 8));
}

uint64_t protocol witness for Location.get() in conformance FocusStoreLocation<A>@<X0>(uint64_t a1@<X8>)
{
  return FocusStoreLocation.get()(a1);
}

uint64_t protocol witness for Location.set(_:transaction:) in conformance FocusStoreLocation<A>(uint64_t a1)
{
  return specialized FocusStoreLocation.set(_:transaction:)(a1);
}

BOOL protocol witness for Location.update() in conformance FocusStoreLocation<A>(char *a1)
{
  return FocusStoreLocation.update()(a1);
}

uint64_t base witness table accessor for Equatable in FocusStoreLocation<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_18772B240()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_18772B278()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = (*(void *)(v2 + 64) + v3 + v4) & ~v3;
  swift_release();
  uint64_t v6 = v0 + v4;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v7(v6, v1);
  v7(v0 + v5, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in FocusStoreLocation.set(_:transaction:)()
{
  return partial apply for closure #2 in closure #1 in FocusStoreLocation.set(_:transaction:)(0);
}

void type metadata accessor for WeakBox<UIFocusItem>(uint64_t a1)
{
}

unint64_t type metadata accessor for UIFocusItem()
{
  unint64_t result = lazy cache variable for type metadata for UIFocusItem;
  if (!lazy cache variable for type metadata for UIFocusItem)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIFocusItem);
  }
  return result;
}

ValueMetadata *type metadata accessor for FocusStoreInputKey()
{
  return &type metadata for FocusStoreInputKey;
}

uint64_t NavigationSelectionHost.selectionSeedByStackKey.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NavigationSelectionHost.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC7SwiftUI23NavigationSelectionHost___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for NavigationSelectionHost()
{
  return type metadata accessor for NavigationSelectionHost(0);
}

uint64_t NavigationSeedHost.seeds.getter()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NavigationSeedHost and conformance NavigationSeedHost(&lazy protocol witness table cache variable for type NavigationSeedHost and conformance NavigationSeedHost, (void (*)(uint64_t))type metadata accessor for NavigationSeedHost);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(void *)(v0 + 16);
}

uint64_t NavigationSeedHost.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7SwiftUI18NavigationSeedHost___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for NavigationSeedHost()
{
  return type metadata accessor for NavigationSeedHost(0);
}

double static ListRowInsetsTraitKey.defaultValue.getter@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 1;
  return result;
}

double protocol witness for static _ViewTraitKey.defaultValue.getter in conformance ListRowInsetsTraitKey@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 1;
  return result;
}

uint64_t View.listRowInsets(_:)(uint64_t a1)
{
  outlined init with take of EdgeInsets?(a1, (uint64_t)v2);
  return View._trait<A>(_:_:)();
}

uint64_t sub_18772B7A8()
{
  return swift_getWitnessTable();
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance ListRowInsetsKey@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = protocol witness for static EnvironmentKey.defaultValue.getter in conformance ListRowInsetsKey(&one-time initialization token for defaultValue, (__n128 *)&static ListRowInsetsKey.defaultValue, &xmmword_1E8FF73E0, a1).n128_u64[0];
  return result;
}

ValueMetadata *type metadata accessor for ListRowInsetsKey()
{
  return &type metadata for ListRowInsetsKey;
}

void *type metadata accessor for EffectiveListRowInsetsKey()
{
  return &unk_1ED446760;
}

ValueMetadata *type metadata accessor for MultimodalBadgedViewStyle()
{
  return &type metadata for MultimodalBadgedViewStyle;
}

ValueMetadata *type metadata accessor for MultimodalBadgeInfo()
{
  return &type metadata for MultimodalBadgeInfo;
}

uint64_t protocol witness for BadgedViewStyle.makeBody(configuration:) in conformance MultimodalBadgedViewStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v6;
  *(void *)(a2 + 32) = KeyPath;
  *(unsigned char *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;

  return outlined copy of BadgeLabel?(v3, v4, v5);
}

double BadgedViewStyleView.body.getter@<D0>(_OWORD *a1@<X8>)
{
  long long v3 = v1[1];
  v70[0] = *v1;
  v70[1] = v3;
  long long v4 = v1[3];
  long long v71 = v1[2];
  long long v72 = v4;
  v74[0] = v70[0];
  v74[1] = v3;
  uint64_t v5 = static Alignment.center.getter();
  uint64_t v7 = v6;
  closure #1 in BadgedViewStyleView.body.getter((uint64_t)v70, (uint64_t)&v43);
  outlined init with take of ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?((uint64_t)&v43, (uint64_t)v80);
  outlined init with take of ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?((uint64_t)v80, (uint64_t)v81);
  *((void *)&v82 + 1) = v5;
  uint64_t v83 = v7;
  uint64_t v94 = v7;
  long long v88 = v81[4];
  long long v89 = v81[5];
  long long v90 = v81[6];
  long long v91 = v81[7];
  long long v84 = v81[0];
  long long v85 = v81[1];
  long long v86 = v81[2];
  long long v87 = v81[3];
  long long v92 = v81[8];
  long long v93 = v82;
  long long v73 = v72;
  long long v57 = v72;
  type metadata accessor for State<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
  State.projectedValue.getter();
  long long v8 = v43;
  char v28 = v44;
  outlined init with take of BadgeLabel?((uint64_t)v74, (uint64_t)v75);
  uint64_t v9 = v71;
  char v10 = BYTE8(v71);
  outlined retain of BadgeViewStyleConfiguration((uint64_t *)v74);
  outlined copy of Environment<Bool>.Content(v9, v10);
  LOBYTE(v5) = specialized Environment.wrappedValue.getter(v9, v10);
  outlined consume of Environment<Bool>.Content(v9, v10);
  if ((v5 & 1) != 0 && (outlined init with take of BadgeLabel?((uint64_t)v75, (uint64_t)v78), v79 >> 1 != 0xFFFFFFFF))
  {
    outlined release of BadgeViewStyleConfiguration((uint64_t *)v74);
    char v11 = 1;
  }
  else
  {
    long long v43 = v73;
    State.wrappedValue.getter();
    outlined release of BadgeViewStyleConfiguration((uint64_t *)v74);
    char v11 = v57;
  }
  char v29 = v11;
  long long v40 = v92;
  long long v41 = v93;
  long long v36 = v88;
  long long v37 = v89;
  long long v38 = v90;
  long long v39 = v91;
  long long v32 = v84;
  long long v33 = v85;
  long long v34 = v86;
  long long v35 = v87;
  *(void *)unint64_t v42 = v94;
  *(_OWORD *)&char v42[8] = v8;
  v42[24] = v28;
  outlined retain of BadgeViewStyleConfiguration((uint64_t *)v74);
  outlined copy of Environment<Bool>.Content(v9, v10);
  char v12 = specialized Environment.wrappedValue.getter(v9, v10);
  outlined consume of Environment<Bool>.Content(v9, v10);
  outlined release of BadgeViewStyleConfiguration((uint64_t *)v74);
  if ((v12 & 1) != 0 && (outlined init with take of BadgeLabel?((uint64_t)v75, (uint64_t)v76), v77 >> 1 != 0xFFFFFFFF))
  {
    LocalizedStringKey.init(stringLiteral:)();
    type metadata accessor for SwiftUIClass();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v14 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  }
  else
  {
    LocalizedStringKey.init(stringLiteral:)();
  }
  uint64_t v15 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v17 = v16;
  char v19 = v18 & 1;
  long long v65 = v40;
  long long v66 = v41;
  v67[0] = *(_OWORD *)v42;
  *(_OWORD *)((char *)v67 + 9) = *(_OWORD *)&v42[9];
  long long v61 = v36;
  long long v62 = v37;
  long long v63 = v38;
  long long v64 = v39;
  long long v57 = v32;
  long long v58 = v33;
  long long v59 = v34;
  long long v60 = v35;
  char v68 = v29;
  uint64_t v69 = 0x403B000000000000;
  outlined copy of Text.Storage(v15, v16, v18 & 1);
  swift_bridgeObjectRetain();
  AccessibilityValueStorage.init(description:)();
  outlined init with copy of AccessibilityValueStorage((uint64_t)v31, (uint64_t)v30);
  specialized View.accessibility<A>(_:_:isEnabled:)((uint64_t)v30, 1, (uint64_t)&v43);
  outlined destroy of AccessibilityValueStorage?((uint64_t)v30);
  outlined destroy of AccessibilityValueStorage((uint64_t)v31);
  outlined consume of Text.Storage(v15, v17, v19);
  swift_bridgeObjectRelease();
  outlined release of ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>((uint64_t *)&v32);
  long long v20 = v54;
  a1[10] = v53;
  a1[11] = v20;
  long long v21 = v56;
  a1[12] = v55;
  a1[13] = v21;
  long long v22 = v50;
  a1[6] = v49;
  a1[7] = v22;
  long long v23 = v52;
  a1[8] = v51;
  a1[9] = v23;
  long long v24 = v46;
  a1[2] = v45;
  a1[3] = v24;
  long long v25 = v48;
  a1[4] = v47;
  a1[5] = v25;
  double result = *(double *)&v43;
  long long v27 = v44;
  *a1 = v43;
  a1[1] = v27;
  return result;
}

uint64_t closure #1 in BadgedViewStyleView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v3 = *(_OWORD *)(a1 + 16);
  v38[0] = *(_OWORD *)a1;
  v38[1] = v3;
  uint64_t v4 = *(void *)(a1 + 32);
  char v5 = *(unsigned char *)(a1 + 40);
  outlined retain of BadgeViewStyleConfiguration((uint64_t *)v38);
  outlined copy of Environment<Bool>.Content(v4, v5);
  char v6 = specialized Environment.wrappedValue.getter(v4, v5);
  outlined consume of Environment<Bool>.Content(v4, v5);
  outlined release of BadgeViewStyleConfiguration((uint64_t *)v38);
  if ((v6 & 1) != 0
    && (outlined init with take of BadgeLabel?((uint64_t)v38, (uint64_t)v39),
        outlined init with take of BadgeLabel?((uint64_t)v39, (uint64_t)v56),
        v57 >> 1 != 0xFFFFFFFF))
  {
    uint64_t v8 = static VerticalAlignment.center.getter();
    uint64_t v9 = static HorizontalAlignment.center.getter();
    closure #1 in closure #1 in closure #1 in BadgedViewStyleView.body.getter((uint64_t)&v58);
    uint64_t v10 = v58;
    char v11 = v59;
    long long v24 = v60;
    uint64_t v12 = v61;
    uint64_t v13 = v62;
    char v14 = v63;
    uint64_t v15 = v64;
    char v16 = v65;
    outlined copy of Environment<Bool>.Content(v58, v59);
    outlined consume of Environment<Bool>.Content(v10, v11);
    char v33 = 0;
    char v32 = 0;
    char v31 = 0;
    char v30 = v11;
    char v29 = v16;
    uint64_t v40 = v8;
    uint64_t v41 = 0;
    char v42 = 0;
    uint64_t v43 = 0;
    char v44 = 0;
    uint64_t v45 = v9;
    uint64_t v46 = 0;
    char v47 = 0;
    uint64_t v48 = v10;
    char v49 = v11;
    long long v50 = v24;
    uint64_t v51 = v12;
    uint64_t v52 = v13;
    char v53 = v14;
    uint64_t v54 = v15;
    char v55 = v16;
    specialized View.accessibility<A>(_:_:isEnabled:)(dword_1ED40B750 | ((unint64_t)dword_1ED40B750 << 32), 1, (uint64_t)v34);
    uint64_t v17 = v36;
    uint64_t v18 = v37;
    uint64_t v19 = v36 + 16;
    swift_beginAccess();
    swift_retain();
    swift_retain();
    specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v19);
    swift_endAccess();
    swift_release();
    swift_release();
    swift_beginAccess();
    swift_retain();
    swift_retain();
    specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v19, 0x6567646162, 0xE500000000000000, 2);
    swift_endAccess();
    swift_release();
    swift_release();
    outlined consume of Environment<Bool>.Content(v10, v11);
    v25[6] = v34[6];
    v25[7] = v34[7];
    v25[2] = v34[2];
    v25[3] = v34[3];
    _OWORD v25[4] = v34[4];
    v25[5] = v34[5];
    v25[0] = v34[0];
    v25[1] = v34[1];
    uint64_t v26 = v35;
    uint64_t v27 = v17;
    uint64_t v28 = v18;
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v25, v20, v21, v22);
    uint64_t v7 = v25;
  }
  else
  {
    _s7SwiftUI15ModifiedContentVyAA6HStackVyAA9TupleViewVyAA6SpacerV_AA6VStackVyAGyAA5Badge33_582D9E508E536DEAC67BC3C87B3CFE52LLV_AItGGtGGAA31AccessibilityAttachmentModifierVGSgWOi0_((uint64_t)v34);
    uint64_t v7 = v34;
  }
  outlined init with take of ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?((uint64_t)v7, (uint64_t)&v58);
  return outlined init with take of ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?((uint64_t)&v58, a2);
}

uint64_t closure #1 in closure #1 in closure #1 in BadgedViewStyleView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  if (one-time initialization token for standardSpacing != -1) {
    swift_once();
  }
  double v3 = *(double *)&static ClarityUIMetrics.standardSpacing + -3.0;
  *(void *)a1 = KeyPath;
  *(unsigned char *)(a1 + 8) = 0;
  *(double *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = xmmword_188352E50;
  *(void *)(a1 + 40) = 0x401C000000000000;
  *(unsigned char *)(a1 + 48) = 1;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  outlined copy of Environment<Bool>.Content(KeyPath, 0);

  return outlined consume of Environment<Bool>.Content(KeyPath, 0);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance BadgedViewStyleView()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t Badge.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v57 = *(void *)(v1 + 24);
  uint64_t v58 = *(void *)(v1 + 16);
  uint64_t v56 = *(unsigned __int8 *)(v1 + 48);
  uint64_t v46 = static VerticalAlignment.center.getter();
  closure #1 in Badge.body.getter((uint64_t)&v63);
  uint64_t v48 = v64;
  uint64_t v49 = v63;
  uint64_t v47 = v65;
  char v3 = v66;
  uint64_t v55 = v67;
  char v51 = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  char v54 = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v52 = v13;
  uint64_t v53 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  char v75 = 1;
  char v74 = v3;
  char v71 = 0;
  char v68 = 0;
  uint64_t v50 = static Font.body.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v44 = static Color.white.getter();
  uint64_t v43 = swift_getKeyPath();
  static Color.blue.getter();
  uint64_t v42 = Color.opacity(_:)();
  swift_release();
  char v18 = static Edge.Set.all.getter();
  static Material.thin.getter();
  uint64_t v19 = v63;
  char v20 = v64;
  int v41 = HIDWORD(v64);
  char v21 = static Edge.Set.all.getter();
  uint64_t v22 = static Alignment.center.getter();
  if (one-time initialization token for buttonShadowSpread != -1)
  {
    uint64_t v33 = v22;
    uint64_t v34 = v23;
    swift_once();
    uint64_t v23 = v34;
    uint64_t v22 = v33;
  }
  uint64_t v24 = static ClarityUIMetrics.buttonShadowSpread;
  char v25 = v75;
  char v26 = v74;
  char v27 = v71;
  char v28 = v68;
  if (one-time initialization token for clarityUIButtonShadowColor != -1)
  {
    uint64_t v38 = v22;
    uint64_t v35 = v23;
    swift_once();
    uint64_t v23 = v35;
    uint64_t v22 = v38;
  }
  uint64_t v29 = static Color.clarityUIButtonShadowColor;
  if (one-time initialization token for buttonShadowRadius != -1)
  {
    uint64_t v36 = v23;
    uint64_t v39 = v22;
    swift_once();
    uint64_t v23 = v36;
    uint64_t v22 = v39;
  }
  uint64_t v30 = static ClarityUIMetrics.buttonShadowRadius;
  if (one-time initialization token for buttonShadowOffset != -1)
  {
    uint64_t v37 = v23;
    uint64_t v40 = v22;
    swift_once();
    uint64_t v23 = v37;
    uint64_t v22 = v40;
  }
  *(void *)a1 = v46;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = v25;
  *(_DWORD *)(a1 + 17) = v63;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)((char *)&v63 + 3);
  *(void *)(a1 + 24) = v49;
  *(void *)(a1 + 32) = v48;
  *(void *)(a1 + 40) = v47;
  *(unsigned char *)(a1 + 48) = v26;
  *(_DWORD *)(a1 + 49) = *(_DWORD *)v73;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)&v73[3];
  *(void *)(a1 + 56) = v55;
  *(unsigned char *)(a1 + 64) = v51;
  int v31 = *(_DWORD *)v72;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)&v72[3];
  *(_DWORD *)(a1 + 65) = v31;
  *(void *)(a1 + 72) = v5;
  *(void *)(a1 + 80) = v7;
  *(void *)(a1 + 88) = v9;
  *(void *)(a1 + 96) = v11;
  *(unsigned char *)(a1 + 104) = v27;
  *(_DWORD *)(a1 + 105) = *(_DWORD *)v70;
  *(_DWORD *)(a1 + 108) = *(_DWORD *)&v70[3];
  *(unsigned char *)(a1 + 112) = v54;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)&v69[3];
  *(_DWORD *)(a1 + 113) = *(_DWORD *)v69;
  *(void *)(a1 + 120) = v53;
  *(void *)(a1 + 128) = v52;
  *(void *)(a1 + 136) = v15;
  *(void *)(a1 + 144) = v17;
  *(unsigned char *)(a1 + 152) = v28;
  *(_DWORD *)(a1 + 156) = *(_DWORD *)&v62[3];
  *(_DWORD *)(a1 + 153) = *(_DWORD *)v62;
  *(void *)(a1 + 160) = KeyPath;
  *(void *)(a1 + 168) = v50;
  *(void *)(a1 + 176) = v43;
  *(void *)(a1 + 184) = v44;
  *(void *)(a1 + 192) = v42;
  *(unsigned char *)(a1 + 200) = v18;
  *(_DWORD *)(a1 + 204) = *(_DWORD *)&v61[3];
  *(_DWORD *)(a1 + 201) = *(_DWORD *)v61;
  *(void *)(a1 + 208) = v19;
  *(unsigned char *)(a1 + 216) = v20;
  *(unsigned char *)(a1 + 219) = v60;
  *(_WORD *)(a1 + 217) = v59;
  *(_DWORD *)(a1 + 220) = v41;
  *(unsigned char *)(a1 + 224) = v21;
  *(unsigned char *)(a1 + 225) = v56;
  *(_WORD *)(a1 + 226) = 256;
  *(void *)(a1 + 232) = (v24 ^ 0x8000000000000000) & 0xFFFFFFFFFFFFFFFELL | v56;
  *(void *)(a1 + 240) = v29;
  *(void *)(a1 + 248) = v30;
  *(_OWORD *)(a1 + 256) = static ClarityUIMetrics.buttonShadowOffset;
  *(void *)(a1 + 272) = v22;
  *(void *)(a1 + 280) = v23;
  *(void *)(a1 + 288) = v58;
  *(void *)(a1 + 296) = v57;

  return swift_retain();
}

uint64_t closure #1 in Badge.body.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ViewInputFlagModifier<AccessibilityBadgedViewProvidesOwnValue>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E4F41508], MEMORY[0x1E4F3FCE0]);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = 0x6461622E6C6C6562;
  *(void *)(v2 + 24) = 0xEF6C6C69662E6567;
  *(_DWORD *)(v2 + 32) = 0;
  *(unsigned char *)(v2 + 36) = 1;
  *(_OWORD *)(v2 + 40) = xmmword_18834C6B0;
  *(_OWORD *)(v2 + 56) = xmmword_188352E60;
  *(_OWORD *)(v2 + 72) = xmmword_18834C6D0;
  *(unsigned char *)(v2 + 88) = 0;
  LocalizedStringKey.init(stringLiteral:)();
  type metadata accessor for SwiftUIClass();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v4 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  uint64_t v5 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v7 = v6;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v5;
  char v9 = v8 & 1;
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v8 & 1;
  *(void *)(a1 + 32) = v10;
  swift_retain();
  outlined copy of Text.Storage(v5, v7, v9);
  swift_bridgeObjectRetain();
  outlined consume of Text.Storage(v5, v7, v9);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance Badge()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

double static BadgeInfoWriterModifier._makeView(modifier:inputs:body:)@<D0>(void (*a1)(uint64_t *__return_ptr)@<X2>, double *a2@<X8>)
{
  a1(&v4);
  _ViewInputs.size.getter();
  _ViewInputs.position.getter();
  _ViewInputs.transform.getter();
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  *(void *)a2 = v4;
  double result = v5;
  a2[1] = v5;
  return result;
}

uint64_t implicit closure #1 in static BadgeInfoWriterModifier._makeView(modifier:inputs:body:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance BadgeInfoWriterModifier(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance BadgeInfoWriterModifier(a1, a2, a3, a4, a5, a6, MEMORY[0x1E4F3F678]);
}

void protocol witness for ViewModifier.body(content:) in conformance BadgeInfoWriterModifier()
{
}

uint64_t MultimodalBadgeInfoProvider.updateValue()()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  v11[0] = *(_OWORD *)AGGraphGetValue();
  CGFloat v1 = MEMORY[0x18C10C240]();
  CGFloat v3 = v2;
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  long long v5 = Value[1];
  v11[0] = *Value;
  v11[1] = v5;
  CGFloat v9 = MEMORY[0x18C114450]();
  CGFloat v10 = v6;
  lazy protocol witness table accessor for type MultimodalListStyleGridContentCoordinateSpace and conformance MultimodalListStyleGridContentCoordinateSpace();
  AnyHashable.init<A>(_:)();
  char v12 = 0;
  AGGraphGetValue();
  CGRect.convert(to:transform:)();
  outlined destroy of CoordinateSpace((uint64_t)v11);
  if ((*(unsigned char *)(v0 + 48) & 1) != 0
    || (v14.origin.x = v1,
        v14.origin.y = v3,
        v14.size.width = v9,
        v14.size.height = v10,
        uint64_t result = CGRectEqualToRect(*(CGRect *)(v0 + 16), v14),
        (result & 1) == 0))
  {
    type metadata accessor for State<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MultimodalBadgeInfo>, (uint64_t)&type metadata for MultimodalBadgeInfo, MEMORY[0x1E4FBBE00]);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_18834BB80;
    *(CGFloat *)(v8 + 32) = v1;
    *(CGFloat *)(v8 + 40) = v3;
    *(CGFloat *)(v8 + 48) = v9;
    *(CGFloat *)(v8 + 56) = v10;
    *(void *)&v11[0] = v8;
    type metadata accessor for State<Bool>(0, &lazy cache variable for type metadata for [MultimodalBadgeInfo], (uint64_t)&type metadata for MultimodalBadgeInfo, MEMORY[0x1E4FBB320]);
    AGGraphSetOutputValue();
    uint64_t result = swift_bridgeObjectRelease();
  }
  *(CGFloat *)(v0 + 16) = v1;
  *(CGFloat *)(v0 + 24) = v3;
  *(CGFloat *)(v0 + 32) = v9;
  *(CGFloat *)(v0 + 40) = v10;
  *(unsigned char *)(v0 + 48) = 0;
  return result;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance MultimodalBadgeInfoKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static MultimodalBadgeInfoKey.defaultValue;

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance MultimodalBadgeInfoKey(uint64_t *a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v3 = *a1;
  a2(&v6);
  uint64_t v4 = v6;
  uint64_t v6 = v3;
  uint64_t result = specialized Array.append<A>(contentsOf:)(v4);
  *a1 = v6;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MultimodalBadgeInfo(CGRect *a1, CGRect *a2)
{
  return CGRectEqualToRect(*a1, *a2);
}

uint64_t associated type witness table accessor for BadgedViewStyle.Body : View in MultimodalBadgedViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_18772CEF8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.areMultimodalBadgesEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_18772CF38()
{
  return EnvironmentValues.areMultimodalBadgesEnabled.setter();
}

uint64_t outlined copy of BadgeLabel?(uint64_t result, uint64_t a2, uint64_t a3)
{
  if ((unint64_t)a3 >> 1 != 0xFFFFFFFF) {
    return outlined copy of BadgeLabel(result, a2, a3);
  }
  return result;
}

uint64_t outlined copy of BadgeLabel(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 < 0)
  {
    outlined copy of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

ValueMetadata *type metadata accessor for MultimodalBadgeInfoKey()
{
  return &type metadata for MultimodalBadgeInfoKey;
}

uint64_t destroy for BadgedViewStyleView(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >> 1 != 0xFFFFFFFF) {
    outlined consume of BadgeLabel(*(void *)a1, *(void *)(a1 + 8), v2);
  }
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));

  return swift_release();
}

uint64_t outlined consume of BadgeLabel(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 < 0)
  {
    outlined consume of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for BadgedViewStyleView(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = a2[2];
  if (v4 >> 1 == 0xFFFFFFFF)
  {
    long long v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  else
  {
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    uint64_t v8 = a2[3];
    outlined copy of BadgeLabel(*a2, v7, v4);
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v8;
  }
  uint64_t v9 = a2[4];
  char v10 = *((unsigned char *)a2 + 40);
  outlined copy of Environment<Bool>.Content(v9, v10);
  *(void *)(a1 + 32) = v9;
  *(unsigned char *)(a1 + 40) = v10;
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  *(void *)(a1 + 56) = a2[7];
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for BadgedViewStyleView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a2[2];
  unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(void *)(a1 + 16) >> 1 == 0xFFFFFFFFLL)
  {
    if (v5 == 0x1FFFFFFFELL)
    {
      long long v6 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
    }
    else
    {
      uint64_t v8 = *a2;
      uint64_t v9 = a2[1];
      uint64_t v10 = a2[3];
      outlined copy of BadgeLabel(*a2, v9, v4);
      *(void *)a1 = v8;
      *(void *)(a1 + 8) = v9;
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = v10;
    }
  }
  else if (v5 == 0x1FFFFFFFELL)
  {
    outlined destroy of BadgeLabel(a1);
    long long v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
  }
  else
  {
    uint64_t v11 = *a2;
    uint64_t v12 = a2[1];
    uint64_t v13 = a2[3];
    outlined copy of BadgeLabel(*a2, v12, v4);
    uint64_t v14 = *(void *)a1;
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v16 = *(void *)(a1 + 16);
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v12;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v13;
    outlined consume of BadgeLabel(v14, v15, v16);
  }
  uint64_t v17 = a2[4];
  char v18 = *((unsigned char *)a2 + 40);
  outlined copy of Environment<Bool>.Content(v17, v18);
  uint64_t v19 = *(void *)(a1 + 32);
  char v20 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = v17;
  *(unsigned char *)(a1 + 40) = v18;
  outlined consume of Environment<Bool>.Content(v19, v20);
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  *(void *)(a1 + 56) = a2[7];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t outlined destroy of BadgeLabel(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for BadgedViewStyleView(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >> 1 != 0xFFFFFFFF)
  {
    unint64_t v5 = *(void *)(a2 + 16);
    if (v5 >> 1 != 0xFFFFFFFF)
    {
      uint64_t v7 = *(void *)(a2 + 24);
      uint64_t v8 = *(void *)a1;
      uint64_t v9 = *(void *)(a1 + 8);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = v5;
      *(void *)(a1 + 24) = v7;
      outlined consume of BadgeLabel(v8, v9, v4);
      goto LABEL_6;
    }
    outlined destroy of BadgeLabel(a1);
  }
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
LABEL_6:
  char v10 = *(unsigned char *)(a2 + 40);
  uint64_t v11 = *(void *)(a1 + 32);
  char v12 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = v10;
  outlined consume of Environment<Bool>.Content(v11, v12);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for BadgedViewStyleView(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *(void *)(a1 + 16) >> 1;
  int v4 = -2 - v3;
  if (-2 - (int)v3 < 0) {
    int v4 = -1;
  }
  if (v3 <= 0x80000000) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for BadgedViewStyleView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 2 * ~a2;
      *(void *)(result + 24) = 0;
    }
  }
  return result;
}

void *type metadata accessor for BadgedViewStyleView()
{
  return &unk_1ED40B768;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<BadgedViewStyleView, ViewInputFlagModifier<AccessibilityBadgedViewProvidesOwnValue>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<BadgedViewStyleView, ViewInputFlagModifier<AccessibilityBadgedViewProvidesOwnValue>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<BadgedViewStyleView, ViewInputFlagModifier<AccessibilityBadgedViewProvidesOwnValue>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<BadgedViewStyleView, ViewInputFlagModifier<AccessibilityBadgedViewProvidesOwnValue>>();
    lazy protocol witness table accessor for type BadgedViewStyleView and conformance BadgedViewStyleView();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<BadgedViewStyleView, ViewInputFlagModifier<AccessibilityBadgedViewProvidesOwnValue>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<BadgedViewStyleView, ViewInputFlagModifier<AccessibilityBadgedViewProvidesOwnValue>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<BadgedViewStyleView, ViewInputFlagModifier<AccessibilityBadgedViewProvidesOwnValue>>)
  {
    type metadata accessor for ViewInputFlagModifier<AccessibilityBadgedViewProvidesOwnValue>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityBadgedViewProvidesOwnValue>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue, (uint64_t)&type metadata for AccessibilityBadgedViewProvidesOwnValue, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<BadgedViewStyleView, ViewInputFlagModifier<AccessibilityBadgedViewProvidesOwnValue>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue;
  if (!lazy protocol witness table cache variable for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue;
  if (!lazy protocol witness table cache variable for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue;
  if (!lazy protocol witness table cache variable for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue;
  if (!lazy protocol witness table cache variable for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue;
  if (!lazy protocol witness table cache variable for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BadgedViewStyleView and conformance BadgedViewStyleView()
{
  unint64_t result = lazy protocol witness table cache variable for type BadgedViewStyleView and conformance BadgedViewStyleView;
  if (!lazy protocol witness table cache variable for type BadgedViewStyleView and conformance BadgedViewStyleView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BadgedViewStyleView and conformance BadgedViewStyleView);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in BadgedViewStyleView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined init with take of ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?()
{
  if (!lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>, (void (*)(uint64_t))type metadata accessor for HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?);
    }
  }
}

void type metadata accessor for HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>()
{
  if (!lazy cache variable for type metadata for HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>)
  {
    type metadata accessor for TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>();
    lazy protocol witness table accessor for type TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)> and conformance TupleView<A>, (void (*)(uint64_t))type metadata accessor for TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>);
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>);
    }
  }
}

void type metadata accessor for TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>()
{
  if (!lazy cache variable for type metadata for TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>)
  {
    type metadata accessor for (Spacer, VStack<TupleView<(Badge, Spacer)>>)();
    unint64_t v0 = type metadata accessor for TupleView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>);
    }
  }
}

void type metadata accessor for (Spacer, VStack<TupleView<(Badge, Spacer)>>)()
{
  if (!lazy cache variable for type metadata for (Spacer, VStack<TupleView<(Badge, Spacer)>>))
  {
    type metadata accessor for VStack<TupleView<(Badge, Spacer)>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Spacer, VStack<TupleView<(Badge, Spacer)>>));
    }
  }
}

void type metadata accessor for VStack<TupleView<(Badge, Spacer)>>()
{
  if (!lazy cache variable for type metadata for VStack<TupleView<(Badge, Spacer)>>)
  {
    type metadata accessor for TupleView<(Badge, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(Badge, Spacer)>, &lazy cache variable for type metadata for (Badge, Spacer));
    lazy protocol witness table accessor for type TupleView<(Badge, Spacer)> and conformance TupleView<A>();
    unint64_t v0 = type metadata accessor for VStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<TupleView<(Badge, Spacer)>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TupleView<(Badge, Spacer)> and conformance TupleView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TupleView<(Badge, Spacer)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(Badge, Spacer)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(Badge, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(Badge, Spacer)>, &lazy cache variable for type metadata for (Badge, Spacer));
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(Badge, Spacer)> and conformance TupleView<A>);
  }
  return result;
}

uint64_t outlined init with take of BadgeLabel?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for State<Bool>(0, &lazy cache variable for type metadata for BadgeLabel?, (uint64_t)&type metadata for BadgeLabel, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t static NeedsTopPaddingForGridBadgesModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, unint64_t *a2@<X1>, void (*a3)(void *__return_ptr, uint64_t, unint64_t *)@<X2>, void *a4@<X8>)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  int v22 = *a1;
  int v32 = *((_DWORD *)a2 + 8);
  unsigned int v33 = *((_DWORD *)a2 + 7);
  int v31 = *((_DWORD *)a2 + 9);
  unint64_t v29 = a2[6];
  unint64_t v30 = a2[5];
  int v4 = *((_DWORD *)a2 + 15);
  int v5 = *((_DWORD *)a2 + 17);
  int v27 = *((_DWORD *)a2 + 16);
  int v28 = *((_DWORD *)a2 + 14);
  int v6 = *((_DWORD *)a2 + 19);
  int v38 = *((_DWORD *)a2 + 20);
  int v39 = *((_DWORD *)a2 + 18);
  unint64_t v7 = *a2;
  unint64_t v35 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  unint64_t v9 = a2[2];
  LODWORD(v45) = *((_DWORD *)a2 + 6);
  unsigned int v36 = v45;
  int v37 = v6;
  int v10 = v4;
  int v34 = v4;
  int v11 = v6;
  swift_getKeyPath();
  HIDWORD(v23) = _ViewInputs.mapEnvironment<A>(_:)();
  uint64_t v12 = swift_release();
  unint64_t v41 = v7;
  int v42 = v8;
  unint64_t v44 = v9;
  HIDWORD(v45) = v33;
  int v46 = v32;
  int v47 = v31;
  unint64_t v48 = v30;
  unint64_t v49 = v29;
  int v50 = v28;
  int v51 = v10;
  int v52 = v27;
  int v53 = v5;
  int v54 = v39;
  int v55 = v11;
  int v56 = v38;
  a3(v40, v12, &v41);
  uint64_t v25 = v40[0];
  type metadata accessor for State<Bool>(0, &lazy cache variable for type metadata for _GraphValue<NeedsTopPaddingForGridBadgesModifier>, (uint64_t)&unk_1ED4621D0, MEMORY[0x1E4F3F590]);
  uint64_t v13 = v40[1];
  LODWORD(v41) = v22;
  LODWORD(v23) = _GraphValue.value.getter();
  unint64_t v41 = v35;
  int v42 = v8;
  unint64_t v44 = v9;
  unint64_t v45 = __PAIR64__(v33, v36);
  int v46 = v32;
  int v47 = v31;
  unint64_t v48 = v30;
  unint64_t v49 = v29;
  int v50 = v28;
  int v51 = v34;
  int v52 = v27;
  int v53 = v5;
  int v54 = v39;
  int v55 = v37;
  int v56 = v38;
  int v21 = _ViewInputs.position.getter();
  unint64_t v41 = v35;
  int v42 = v8;
  unint64_t v44 = v9;
  unint64_t v45 = __PAIR64__(v33, v36);
  int v46 = v32;
  int v47 = v31;
  unint64_t v48 = v30;
  unint64_t v49 = v29;
  int v50 = v28;
  int v51 = v34;
  int v52 = v27;
  int v53 = v5;
  int v54 = v39;
  int v55 = v37;
  int v56 = v38;
  int v20 = _ViewInputs.size.getter();
  unint64_t v41 = v35;
  int v42 = v8;
  unint64_t v44 = v9;
  unint64_t v45 = __PAIR64__(v33, v36);
  int v46 = v32;
  int v47 = v31;
  unint64_t v48 = v30;
  unint64_t v49 = v29;
  int v50 = v28;
  int v51 = v34;
  int v52 = v27;
  int v53 = v5;
  int v54 = v39;
  int v55 = v37;
  int v56 = v38;
  unsigned int v19 = _ViewInputs.transform.getter();
  unint64_t v41 = v35;
  int v42 = v8;
  unint64_t v44 = v9;
  unint64_t v45 = __PAIR64__(v33, v36);
  int v46 = v32;
  int v47 = v31;
  unint64_t v48 = v30;
  unint64_t v49 = v29;
  int v50 = v28;
  int v51 = v34;
  int v52 = v27;
  int v53 = v5;
  int v54 = v39;
  int v55 = v37;
  int v56 = v38;
  unsigned int v14 = _ViewInputs.viewPhase.getter();
  UpdateCycleDetector.init()();
  int v15 = v42;
  char v16 = v43;
  unint64_t v17 = v41;
  unint64_t v41 = v23;
  int v42 = v21;
  int v43 = v20;
  unint64_t v44 = __PAIR64__(v14, v19);
  unint64_t v45 = v17;
  int v46 = v15;
  LOBYTE(v47) = v16;
  LODWORD(v48) = 0;
  BYTE4(v48) = 2;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type GridBadgeInfosActionBinding and conformance GridBadgeInfosActionBinding();
  Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  uint64_t result = AGGraphSetFlags();
  *a4 = v25;
  a4[1] = v13;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance NeedsTopPaddingForGridBadgesModifier()
{
}

uint64_t GridBadgeInfosActionBinding.updateValue()()
{
  int v1 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v1 == *(_DWORD *)(v0 + 40))
  {
    int v2 = *(unsigned __int8 *)(v0 + 44);
  }
  else
  {
    *(_DWORD *)(v0 + 40) = v1;
    *(void *)(v0 + 28) = 0xFFFFFFFFLL;
    *(unsigned char *)(v0 + 36) = 0;
    int v2 = 2;
    *(unsigned char *)(v0 + 44) = 2;
  }
  type metadata accessor for State<Bool>(0, &lazy cache variable for type metadata for [MultimodalBadgeInfo], (uint64_t)&type metadata for MultimodalBadgeInfo, MEMORY[0x1E4FBB320]);
  uint64_t v3 = *(void *)AGGraphGetValue();
  AGGraphGetValue();
  uint64_t v4 = swift_bridgeObjectRetain();
  double v5 = MEMORY[0x18C10C240](v4);
  double v7 = v6;
  AGGraphGetValue();
  double v8 = MEMORY[0x18C114450]();
  double v10 = v9;
  AGGraphGetValue();
  swift_retain();
  char v11 = GridBadgeInfosActionBinding.needsTopPaddingForBadge(gridBadgeInfos:position:size:transform:)(v3, v5, v7, v8, v10);
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 2 || (v11 & 1) != (v2 & 1))
  {
    uint64_t result = UpdateCycleDetector.dispatch(label:isDebug:)();
    if (result)
    {
      char v13 = v11 & 1;
      *(unsigned char *)(v0 + 44) = v11 & 1;
      AGGraphClearUpdate();
      uint64_t Value = AGGraphGetValue();
      uint64_t v15 = *(void *)Value;
      uint64_t v16 = *(void *)(Value + 8);
      char v17 = *(unsigned char *)(Value + 16);
      swift_retain();
      swift_retain();
      AGGraphSetUpdate();
      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 16) = v15;
      *(void *)(v18 + 24) = v16;
      *(unsigned char *)(v18 + 32) = v17;
      *(unsigned char *)(v18 + 33) = v13;
      swift_retain();
      swift_retain();
      static Update.enqueueAction(_:)();
      swift_release();
      swift_release();
      return swift_release();
    }
  }
  return result;
}

uint64_t GridBadgeInfosActionBinding.needsTopPaddingForBadge(gridBadgeInfos:position:size:transform:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  *(double *)&v17[16] = a4;
  *(double *)&v17[24] = a5;
  *(double *)char v17 = a2;
  *(double *)&v17[8] = a3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    lazy protocol witness table accessor for type MultimodalListStyleGridContentCoordinateSpace and conformance MultimodalListStyleGridContentCoordinateSpace();
    swift_bridgeObjectRetain();
    double v7 = (CGFloat *)(a1 + 56);
    do
    {
      CGFloat v9 = *(v7 - 1);
      CGFloat v8 = *v7;
      CGFloat v11 = *(v7 - 3);
      CGFloat v10 = *(v7 - 2);
      CGRect v19 = *(CGRect *)v17;
      AnyHashable.init<A>(_:)();
      v18[40] = 0;
      CGRect.convert(to:transform:)();
      outlined destroy of CoordinateSpace((uint64_t)v18);
      v20.origin.x = v11;
      v20.origin.y = v10;
      v20.size.width = v9;
      v20.size.height = v8;
      double MaxY = CGRectGetMaxY(v20);
      CGPoint origin = v19.origin;
      CGSize size = v19.size;
      if (CGRectGetMinY(v19) < MaxY)
      {
        v21.origin.x = v11;
        v21.origin.y = v10;
        v21.size.width = v9;
        v21.size.height = v8;
        double v15 = CGRectGetMaxY(v21);
        v22.CGPoint origin = origin;
        v22.CGSize size = size;
        if (v15 <= CGRectGetMaxY(v22))
        {
          swift_bridgeObjectRelease();
          return 1;
        }
      }
      v7 += 4;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  return 0;
}

unint64_t implicit closure #1 in GridBadgeInfosActionBinding.updateValue()()
{
  return 0xD000000000000025;
}

uint64_t closure #2 in GridBadgeInfosActionBinding.updateValue()()
{
  return swift_release();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TopPaddingForBadgeModifier(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance BadgeInfoWriterModifier(a1, a2, a3, a4, a5, a6, MEMORY[0x1E4F3F670]);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance BadgeInfoWriterModifier(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(int *, uint64_t *))
{
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2[2];
  uint64_t v10 = a2[5];
  int v11 = *((_DWORD *)a2 + 16);
  uint64_t v12 = a2[9];
  char v13 = *((unsigned char *)a2 + 80);
  int v24 = *a1;
  uint64_t v15 = v7;
  int v16 = v8;
  uint64_t v17 = v9;
  long long v18 = *(_OWORD *)(a2 + 3);
  uint64_t v19 = v10;
  long long v20 = *((_OWORD *)a2 + 3);
  int v21 = v11;
  uint64_t v22 = v12;
  char v23 = v13;
  return a7(&v24, &v15);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance TopPaddingForBadgeModifier@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EdgeInsets.init(_all:)();
  *(unsigned char *)a1 = 1;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = 0;
  return result;
}

uint64_t *outlined retain of BadgeViewStyleConfiguration(uint64_t *a1)
{
  return a1;
}

uint64_t *outlined release of BadgeViewStyleConfiguration(uint64_t *a1)
{
  return a1;
}

uint64_t outlined consume of BadgeLabel?(uint64_t result, uint64_t a2, uint64_t a3)
{
  if ((unint64_t)a3 >> 1 != 0xFFFFFFFF) {
    return outlined consume of BadgeLabel(result, a2, a3);
  }
  return result;
}

uint64_t *outlined release of ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>(uint64_t *a1)
{
  return a1;
}

uint64_t outlined consume of ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18)
  {
    outlined consume of Environment<Bool>.Content(a9, a10 & 1);
    swift_release();
    return swift_release();
  }
  return result;
}

double _s7SwiftUI15ModifiedContentVyAA6HStackVyAA9TupleViewVyAA6SpacerV_AA6VStackVyAGyAA5Badge33_582D9E508E536DEAC67BC3C87B3CFE52LLV_AItGGtGGAA31AccessibilityAttachmentModifierVGSgWOi0_(uint64_t a1)
{
  *(void *)(a1 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>);
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>>);
    }
  }
}

void type metadata accessor for ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>)
  {
    type metadata accessor for _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>);
    }
  }
}

void type metadata accessor for _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>()
{
  if (!lazy cache variable for type metadata for _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?();
    lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>? and conformance <A> A?();
    unint64_t v0 = type metadata accessor for _OverlayModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>? and conformance <A> A?)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?();
    lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>, (void (*)(uint64_t))type metadata accessor for HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>);
    lazy protocol witness table accessor for type TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)> and conformance TupleView<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>)
  {
    type metadata accessor for State<Bool>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<MultimodalListContext>, MEMORY[0x1E4F407F8], MEMORY[0x1E4F410E8]);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<MultimodalListContext> and conformance StyleContextAcceptsPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StyleContextAcceptsPredicate<MultimodalListContext> and conformance StyleContextAcceptsPredicate<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MultimodalListContext> and conformance StyleContextAcceptsPredicate<A>;
  if (!lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MultimodalListContext> and conformance StyleContextAcceptsPredicate<A>)
  {
    type metadata accessor for State<Bool>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<MultimodalListContext>, MEMORY[0x1E4F407F8], MEMORY[0x1E4F410E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MultimodalListContext> and conformance StyleContextAcceptsPredicate<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>);
    lazy protocol witness table accessor for type ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>();
    lazy protocol witness table accessor for type TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?> and conformance _OverlayModifier<A>, (void (*)(uint64_t))type metadata accessor for _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>();
    lazy protocol witness table accessor for type TopPaddingForBadgeModifier and conformance TopPaddingForBadgeModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TopPaddingForBadgeModifier and conformance TopPaddingForBadgeModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type TopPaddingForBadgeModifier and conformance TopPaddingForBadgeModifier;
  if (!lazy protocol witness table cache variable for type TopPaddingForBadgeModifier and conformance TopPaddingForBadgeModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TopPaddingForBadgeModifier and conformance TopPaddingForBadgeModifier);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TopPaddingForBadgeModifier(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[16]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TopPaddingForBadgeModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for TopPaddingForBadgeModifier()
{
  return &unk_1ED44D0A0;
}

void *type metadata accessor for NeedsTopPaddingForGridBadgesModifier()
{
  return &unk_1ED4621D0;
}

uint64_t initializeWithCopy for Badge(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t assignWithCopy for Badge(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for Badge(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  long long v8 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for Badge(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Badge(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

void *type metadata accessor for Badge()
{
  return &unk_1ED4665D8;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>>, AccessibilityAttachmentModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in Badge()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **base witness table accessor for ViewModifier in NeedsTopPaddingForGridBadgesModifier()
{
  return &protocol witness table for NeedsTopPaddingForGridBadgesModifier;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in TopPaddingForBadgeModifier()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type GridBadgeInfosActionBinding and conformance GridBadgeInfosActionBinding()
{
  unint64_t result = lazy protocol witness table cache variable for type GridBadgeInfosActionBinding and conformance GridBadgeInfosActionBinding;
  if (!lazy protocol witness table cache variable for type GridBadgeInfosActionBinding and conformance GridBadgeInfosActionBinding)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GridBadgeInfosActionBinding and conformance GridBadgeInfosActionBinding);
  }
  return result;
}

uint64_t sub_18772EFE0()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in GridBadgeInfosActionBinding.updateValue()()
{
  return closure #2 in GridBadgeInfosActionBinding.updateValue()();
}

unint64_t lazy protocol witness table accessor for type MultimodalListStyleGridContentCoordinateSpace and conformance MultimodalListStyleGridContentCoordinateSpace()
{
  unint64_t result = lazy protocol witness table cache variable for type MultimodalListStyleGridContentCoordinateSpace and conformance MultimodalListStyleGridContentCoordinateSpace;
  if (!lazy protocol witness table cache variable for type MultimodalListStyleGridContentCoordinateSpace and conformance MultimodalListStyleGridContentCoordinateSpace)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalListStyleGridContentCoordinateSpace and conformance MultimodalListStyleGridContentCoordinateSpace);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MultimodalListStyleGridContentCoordinateSpace and conformance MultimodalListStyleGridContentCoordinateSpace;
  if (!lazy protocol witness table cache variable for type MultimodalListStyleGridContentCoordinateSpace and conformance MultimodalListStyleGridContentCoordinateSpace)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalListStyleGridContentCoordinateSpace and conformance MultimodalListStyleGridContentCoordinateSpace);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>, _OffsetEffect>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>();
    type metadata accessor for _BackgroundModifier<_ShadowView<Capsule._Inset>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>();
    type metadata accessor for ViewInputFlagModifier<AccessibilityBadgedViewProvidesOwnValue>(255, &lazy cache variable for type metadata for _ClipEffect<Capsule>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule and conformance Capsule, MEMORY[0x1E4F41670], MEMORY[0x1E4F3F580]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>();
    type metadata accessor for _BackgroundStyleModifier<Color>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<Material>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>();
    type metadata accessor for _BackgroundStyleModifier<Color>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<Color>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA5ColorVSgGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, type metadata accessor for ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>);
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA5ColorVSgGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>);
    }
  }
}

void type metadata accessor for ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>(uint64_t a1)
{
}

void type metadata accessor for HStack<TupleView<(Image, Text)>>()
{
  if (!lazy cache variable for type metadata for HStack<TupleView<(Image, Text)>>)
  {
    type metadata accessor for TupleView<(Badge, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(Image, Text)>, &lazy cache variable for type metadata for (Image, Text));
    lazy protocol witness table accessor for type TupleView<(Image, Text)> and conformance TupleView<A>();
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(Image, Text)>>);
    }
  }
}

void type metadata accessor for TupleView<(Badge, Spacer)>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    type metadata accessor for (Badge, Spacer)(255, a3);
    unint64_t v4 = type metadata accessor for TupleView();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TupleView<(Image, Text)> and conformance TupleView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TupleView<(Image, Text)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(Image, Text)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(Badge, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(Image, Text)>, &lazy cache variable for type metadata for (Image, Text));
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(Image, Text)> and conformance TupleView<A>);
  }
  return result;
}

void _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA5ColorVSgGMaTm_0(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    type metadata accessor for State<Bool>(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v5 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for _BackgroundStyleModifier<Color>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for _BackgroundStyleModifier();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void type metadata accessor for _BackgroundModifier<_ShadowView<Capsule._Inset>>()
{
  if (!lazy cache variable for type metadata for _BackgroundModifier<_ShadowView<Capsule._Inset>>)
  {
    type metadata accessor for ViewInputFlagModifier<AccessibilityBadgedViewProvidesOwnValue>(255, &lazy cache variable for type metadata for _ShadowView<Capsule._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset, MEMORY[0x1E4F41658], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ShadowView);
    unint64_t v0 = type metadata accessor for _BackgroundModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundModifier<_ShadowView<Capsule._Inset>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset()
{
  unint64_t result = lazy protocol witness table cache variable for type Capsule._Inset and conformance Capsule._Inset;
  if (!lazy protocol witness table cache variable for type Capsule._Inset and conformance Capsule._Inset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Capsule._Inset and conformance Capsule._Inset);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>, _OffsetEffect>(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _BackgroundModifier<_ShadowView<Capsule._Inset>> and conformance _BackgroundModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _ClipEffect<Capsule> and conformance _ClipEffect<A>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _BackgroundStyleModifier<Material> and conformance _BackgroundStyleModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _BackgroundStyleModifier<Material> and conformance _BackgroundStyleModifier<A>, &lazy cache variable for type metadata for _BackgroundStyleModifier<Material>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _BackgroundStyleModifier<Material> and conformance _BackgroundStyleModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>, &lazy cache variable for type metadata for _BackgroundStyleModifier<Color>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, type metadata accessor for ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>);
    lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>(255);
    lazy protocol witness table accessor for type TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type HStack<TupleView<(Image, Text)>> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<TupleView<(Image, Text)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _BackgroundStyleModifier<Material> and conformance _BackgroundStyleModifier<A>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _BackgroundStyleModifier<Color>(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ClipEffect<Capsule> and conformance _ClipEffect<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ClipEffect<Capsule> and conformance _ClipEffect<A>;
  if (!lazy protocol witness table cache variable for type _ClipEffect<Capsule> and conformance _ClipEffect<A>)
  {
    type metadata accessor for ViewInputFlagModifier<AccessibilityBadgedViewProvidesOwnValue>(255, &lazy cache variable for type metadata for _ClipEffect<Capsule>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule and conformance Capsule, MEMORY[0x1E4F41670], MEMORY[0x1E4F3F580]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ClipEffect<Capsule> and conformance _ClipEffect<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _BackgroundModifier<_ShadowView<Capsule._Inset>> and conformance _BackgroundModifier<A>()
{
  return lazy protocol witness table accessor for type TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type _BackgroundModifier<_ShadowView<Capsule._Inset>> and conformance _BackgroundModifier<A>, (void (*)(uint64_t))type metadata accessor for _BackgroundModifier<_ShadowView<Capsule._Inset>>);
}

__n128 __swift_memcpy45_4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 29) = *(_OWORD *)(a2 + 29);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for GridBadgeInfosActionBinding(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 45)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 36);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for GridBadgeInfosActionBinding(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 44) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 45) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 45) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 36) = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for GridBadgeInfosActionBinding()
{
  return &unk_1ED44F510;
}

void *type metadata accessor for BadgeInfoWriterModifier()
{
  return &unk_1ED43DD80;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<TopPaddingForBadgeModifier>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<TopPaddingForBadgeModifier>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<TopPaddingForBadgeModifier>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<TopPaddingForBadgeModifier>, _PaddingLayout>();
    lazy protocol witness table accessor for type _ViewModifier_Content<TopPaddingForBadgeModifier> and conformance _ViewModifier_Content<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<TopPaddingForBadgeModifier>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<TopPaddingForBadgeModifier>, _PaddingLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<TopPaddingForBadgeModifier>, _PaddingLayout>)
  {
    type metadata accessor for ViewInputFlagModifier<AccessibilityBadgedViewProvidesOwnValue>(255, &lazy cache variable for type metadata for _ViewModifier_Content<TopPaddingForBadgeModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type TopPaddingForBadgeModifier and conformance TopPaddingForBadgeModifier, (uint64_t)&unk_1ED44D0A0, MEMORY[0x1E4F408E0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<TopPaddingForBadgeModifier>, _PaddingLayout>);
    }
  }
}

void type metadata accessor for ViewInputFlagModifier<AccessibilityBadgedViewProvidesOwnValue>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<TopPaddingForBadgeModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<TopPaddingForBadgeModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<TopPaddingForBadgeModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for ViewInputFlagModifier<AccessibilityBadgedViewProvidesOwnValue>(255, &lazy cache variable for type metadata for _ViewModifier_Content<TopPaddingForBadgeModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type TopPaddingForBadgeModifier and conformance TopPaddingForBadgeModifier, (uint64_t)&unk_1ED44D0A0, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<TopPaddingForBadgeModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>, _OffsetEffect>, BadgeInfoWriterModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>, _OffsetEffect>, BadgeInfoWriterModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>, _OffsetEffect>, BadgeInfoWriterModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>, _OffsetEffect>, BadgeInfoWriterModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>, _OffsetEffect>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>, _OffsetEffect>, BadgeInfoWriterModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in BadgeInfoWriterModifier()
{
  return &protocol witness table for BadgeInfoWriterModifier;
}

uint64_t partial apply for implicit closure #1 in static BadgeInfoWriterModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static BadgeInfoWriterModifier._makeView(modifier:inputs:body:)();
}

unint64_t lazy protocol witness table accessor for type MultimodalBadgeInfoProvider and conformance MultimodalBadgeInfoProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type MultimodalBadgeInfoProvider and conformance MultimodalBadgeInfoProvider;
  if (!lazy protocol witness table cache variable for type MultimodalBadgeInfoProvider and conformance MultimodalBadgeInfoProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalBadgeInfoProvider and conformance MultimodalBadgeInfoProvider);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MultimodalBadgeInfoProvider(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MultimodalBadgeInfoProvider(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 49) = v3;
  return result;
}

void *type metadata accessor for MultimodalBadgeInfoProvider()
{
  return &unk_1ED44F950;
}

uint64_t View.dialogColorScheme(_:)()
{
  return swift_release();
}

uint64_t EnvironmentValues.dialogColorScheme.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.dialogColorScheme : EnvironmentValues@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t sub_1877304D4()
{
  return EnvironmentValues.dialogColorScheme.setter();
}

uint64_t EnvironmentValues.dialogColorScheme.setter()
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance DialogColorSchemeKey(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  BOOL result = v3 == 2 && v2 == 2;
  if (v2 != 2 && v3 != 2) {
    return ((v3 ^ v2) & 1) == 0;
  }
  return result;
}

uint64_t View.dialogIcon(_:)()
{
  return View.dialogIcon(_:)();
}

{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t EnvironmentValues.dialogIcon.getter()
{
  return EnvironmentValues.dialogIcon.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<DialogIconKey>, (uint64_t)&type metadata for DialogIconKey, (uint64_t)&protocol witness table for DialogIconKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogIconKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t sub_187730668@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.dialogIcon.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1877306A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_3Tm(a1, a2, a3, a4, (void (*)(uint64_t))specialized EnvironmentValues.subscript.setter);
}

void Scene.dialogIcon(_:)()
{
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance DialogIconKey(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  BOOL result = (*a1 | *a2) == 0;
  if (v2) {
    BOOL v4 = *a2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    swift_retain();
    char v5 = static Image.== infix(_:_:)();
    swift_release();
    return v5 & 1;
  }
  return result;
}

uint64_t View.dialogTint(_:)()
{
  return View.dialogIcon(_:)();
}

uint64_t EnvironmentValues.dialogTintColor.getter()
{
  return EnvironmentValues.dialogIcon.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<DialogTintColorKey>, (uint64_t)&type metadata for DialogTintColorKey, (uint64_t)&protocol witness table for DialogTintColorKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogTintColorKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.dialogIcon.getter(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (*(void *)(v4 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a1);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a4, a1);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a1);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a4, a1);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v8;
}

uint64_t sub_1877308F8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.dialogTintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187730934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_3Tm(a1, a2, a3, a4, (void (*)(uint64_t))specialized EnvironmentValues.subscript.setter);
}

uint64_t keypath_set_3Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v6 = swift_retain();
  a5(v6);

  return swift_release();
}

uint64_t sub_1877309A0(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA11ColorSchemeOSgGGAaBHPxAaBHD1__AjA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ColorScheme?>, (unint64_t *)&lazy cache variable for type metadata for ColorScheme?, MEMORY[0x1E4F3F468], &lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ColorScheme?> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t sub_1877309C4(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA11ColorSchemeOSgGGAaBHPxAaBHD1__AjA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image?>, &lazy cache variable for type metadata for Image?, MEMORY[0x1E4F41558], &lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Image?> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA11ColorSchemeOSgGGAaBHPxAaBHD1__AjA0cI0HPyHCHCTm(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  return swift_getWitnessTable();
}

uint64_t sub_187730A84(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_187730A8C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA11ColorSchemeOSgGGAaBHPxAaBHD1__AjA0cI0HPyHCHCTm(a1, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0], (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>);
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance DialogTintColorKey(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  BOOL result = (*a1 | *a2) == 0;
  if (v2) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v2 == v3)
    {
      return 1;
    }
    else
    {
      swift_retain();
      char v6 = dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
      swift_release();
      return v6 & 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DialogColorSchemeKey()
{
  return &type metadata for DialogColorSchemeKey;
}

ValueMetadata *type metadata accessor for DialogIconKey()
{
  return &type metadata for DialogIconKey;
}

ValueMetadata *type metadata accessor for DialogTintColorKey()
{
  return &type metadata for DialogTintColorKey;
}

uint64_t static Alert.Button.cancel(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = static Text.System.cancel.getter();
  *(unsigned char *)a3 = 1;
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v7;
  *(unsigned char *)(a3 + 24) = v8 & 1;
  *(void *)(a3 + 32) = v9;
  *(void *)(a3 + 40) = a1;
  *(void *)(a3 + 48) = a2;

  return outlined copy of AppIntentExecutor?(a1);
}

double Alert.init(title:message:dismissButton:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char *a10)
{
  uint64_t v18 = *((void *)a10 + 4);
  if (v18)
  {
    int v43 = (uint64_t (*)(void, void, void, void))*((void *)a10 + 5);
    uint64_t v44 = *((void *)a10 + 6);
    uint64_t v19 = *((void *)a10 + 2);
    uint64_t v42 = *((void *)a10 + 1);
    char v40 = *a10;
    int v41 = *((_DWORD *)a10 + 6) & 1;
    swift_bridgeObjectRetain();
    uint64_t v20 = a5;
    uint64_t v21 = a6;
    uint64_t v22 = a6;
    uint64_t v23 = a7;
    char v24 = a7;
    uint64_t v25 = a8;
    outlined copy of Text?(v20, v22, v24, a8);
    outlined copy of Text.Storage(a1, a2, a3 & 1);
    char v26 = v40;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v27 = a5;
    uint64_t v21 = a6;
    uint64_t v28 = a6;
    uint64_t v23 = a7;
    char v29 = a7;
    uint64_t v25 = a8;
    outlined copy of Text?(v27, v28, v29, a8);
    outlined copy of Text.Storage(a1, a2, a3 & 1);
    uint64_t v30 = static Text.System.ok.getter();
    uint64_t v19 = v31;
    uint64_t v18 = v32;
    char v26 = 0;
    uint64_t v44 = 0;
    LOBYTE(v41) = v33 & 1;
    uint64_t v42 = v30;
    int v43 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  }
  *(void *)&long long v47 = a1;
  *((void *)&v47 + 1) = a2;
  LOBYTE(v48) = a3 & 1;
  *((void *)&v48 + 1) = a4;
  *(void *)&long long v49 = a5;
  *((void *)&v49 + 1) = v21;
  *(void *)&long long v50 = v23;
  *((void *)&v50 + 1) = v25;
  LOBYTE(v51) = v26;
  *((void *)&v51 + 1) = v42;
  *(void *)&long long v52 = v19;
  BYTE8(v52) = v41;
  *(void *)&long long v53 = v18;
  *((void *)&v53 + 1) = v43;
  *(void *)&v54[0] = v44;
  memset((char *)v54 + 8, 0, 57);
  outlined copy of Text.Storage(v42, v19, v41);
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?((uint64_t)v43);
  outlined retain of Alert((uint64_t)&v47);
  outlined consume of Text?(a5, v21, v23, v25);
  outlined consume of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v42, v19, v41);
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v43);
  outlined release of Alert((uint64_t)&v47);
  long long v34 = v54[2];
  *(_OWORD *)(a9 + 128) = v54[1];
  *(_OWORD *)(a9 + 144) = v34;
  *(_OWORD *)(a9 + 160) = v54[3];
  *(unsigned char *)(a9 + 176) = v54[4];
  long long v35 = v52;
  *(_OWORD *)(a9 + 64) = v51;
  *(_OWORD *)(a9 + 80) = v35;
  long long v36 = v54[0];
  *(_OWORD *)(a9 + 96) = v53;
  *(_OWORD *)(a9 + 112) = v36;
  long long v37 = v48;
  *(_OWORD *)a9 = v47;
  *(_OWORD *)(a9 + 16) = v37;
  double result = *(double *)&v49;
  long long v39 = v50;
  *(_OWORD *)(a9 + 32) = v49;
  *(_OWORD *)(a9 + 48) = v39;
  return result;
}

uint64_t static Alert.Button.default(_:action:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(unsigned char *)a7 = 0;
  *(void *)(a7 + 8) = a1;
  *(void *)(a7 + 16) = a2;
  char v8 = a3 & 1;
  *(unsigned char *)(a7 + 24) = v8;
  *(void *)(a7 + 32) = a4;
  *(void *)(a7 + 40) = a5;
  *(void *)(a7 + 48) = a6;
  outlined copy of Text.Storage(a1, a2, v8);
  swift_bridgeObjectRetain();

  return outlined copy of AppIntentExecutor?(a5);
}

__n128 Alert.init(title:message:primaryButton:secondaryButton:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char *a10, unsigned __int8 *a11)
{
  char v11 = *a10;
  uint64_t v12 = *((void *)a10 + 4);
  uint64_t v13 = *a11;
  uint64_t v14 = a11[24];
  uint64_t v15 = *((void *)a11 + 4);
  char v17 = a10[24];
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(unsigned char *)(a9 + 16) = a3 & 1;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  *(unsigned char *)(a9 + 64) = v11;
  *(_OWORD *)(a9 + 72) = *(_OWORD *)(a10 + 8);
  *(unsigned char *)(a9 + 88) = v17;
  *(void *)(a9 + 96) = v12;
  *(_OWORD *)(a9 + 104) = *(_OWORD *)(a10 + 40);
  *(void *)(a9 + 120) = v13;
  *(_OWORD *)(a9 + 128) = *(_OWORD *)(a11 + 8);
  *(void *)(a9 + 144) = v14;
  *(void *)(a9 + 152) = v15;
  __n128 result = *(__n128 *)(a11 + 40);
  *(__n128 *)(a9 + 160) = result;
  *(unsigned char *)(a9 + 176) = 0;
  return result;
}

void static Alert.sideBySideButtons(title:message:primaryButton:secondaryButton:)()
{
}

uint64_t outlined retain of Alert(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 80);
  char v8 = *(unsigned char *)(a1 + 88);
  uint64_t v10 = *(void *)(a1 + 104);
  uint64_t v15 = *(void *)(a1 + 128);
  uint64_t v16 = *(void *)(a1 + 120);
  uint64_t v13 = *(void *)(a1 + 144);
  uint64_t v14 = *(void *)(a1 + 136);
  uint64_t v11 = *(void *)(a1 + 160);
  uint64_t v12 = *(void *)(a1 + 152);
  outlined copy of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRetain();
  outlined copy of Text?(v2, v3, v4, v5);
  outlined copy of Text.Storage(v6, v7, v8);
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?(v10);
  outlined copy of Alert.Button?(v16, v15, v14, v13, v12, v11);
  return a1;
}

void outlined copy of Alert.Button?(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  if (a5)
  {
    outlined copy of Text.Storage(a2, a3, a4 & 1);
    swift_bridgeObjectRetain();
    outlined copy of AppIntentExecutor?(a6);
  }
}

uint64_t outlined release of Alert(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 80);
  char v8 = *(unsigned char *)(a1 + 88);
  uint64_t v10 = *(void *)(a1 + 104);
  uint64_t v15 = *(void *)(a1 + 128);
  uint64_t v16 = *(void *)(a1 + 120);
  uint64_t v13 = *(void *)(a1 + 144);
  uint64_t v14 = *(void *)(a1 + 136);
  uint64_t v11 = *(void *)(a1 + 160);
  uint64_t v12 = *(void *)(a1 + 152);
  outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRelease();
  outlined consume of Text?(v2, v3, v4, v5);
  outlined consume of Text.Storage(v6, v7, v8);
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v10);
  outlined consume of Alert.Button?(v16, v15, v14, v13, v12, v11);
  return a1;
}

void outlined consume of Alert.Button?(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  if (a5)
  {
    outlined consume of Text.Storage(a2, a3, a4 & 1);
    swift_bridgeObjectRelease();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a6);
  }
}

uint64_t static Alert.Button.cancel(_:action:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(unsigned char *)a7 = 1;
  *(void *)(a7 + 8) = a1;
  *(void *)(a7 + 16) = a2;
  char v8 = a3 & 1;
  *(unsigned char *)(a7 + 24) = v8;
  *(void *)(a7 + 32) = a4;
  *(void *)(a7 + 40) = a5;
  *(void *)(a7 + 48) = a6;
  outlined copy of Text.Storage(a1, a2, v8);
  swift_bridgeObjectRetain();

  return outlined copy of AppIntentExecutor?(a5);
}

uint64_t static Alert.Button.destructive(_:action:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(unsigned char *)a7 = 2;
  *(void *)(a7 + 8) = a1;
  *(void *)(a7 + 16) = a2;
  char v8 = a3 & 1;
  *(unsigned char *)(a7 + 24) = v8;
  *(void *)(a7 + 32) = a4;
  *(void *)(a7 + 40) = a5;
  *(void *)(a7 + 48) = a6;
  outlined copy of Text.Storage(a1, a2, v8);
  swift_bridgeObjectRetain();

  return outlined copy of AppIntentExecutor?(a5);
}

uint64_t protocol witness for AlertActionConvertible.style.getter in conformance Alert.Button()
{
  return *v0;
}

uint64_t protocol witness for AlertActionConvertible.label.getter in conformance Alert.Button()
{
  uint64_t v1 = *(void *)(v0 + 8);
  outlined copy of Text.Storage(v1, *(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for AlertActionConvertible.action.getter in conformance Alert.Button()
{
  uint64_t v1 = *(void *)(v0 + 40);
  outlined copy of AppIntentExecutor?(v1);
  return v1;
}

uint64_t Alert.Presentation.buttons.getter()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v24 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 152);
  uint64_t v5 = *(void *)(v0 + 160);
  uint64_t v6 = *(void *)(v0 + 168);
  type metadata accessor for Alert?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Alert.Button>, (uint64_t)&type metadata for Alert.Button, MEMORY[0x1E4FBBE00]);
  uint64_t v7 = swift_allocObject();
  if (v4)
  {
    *(_OWORD *)(v7 + 16) = xmmword_18834BB70;
    char v8 = *(unsigned char *)(v0 + 64);
    uint64_t v9 = *(void *)(v0 + 72);
    uint64_t v10 = *(void *)(v0 + 80);
    char v11 = *(unsigned char *)(v0 + 88);
    uint64_t v13 = *(void *)(v0 + 96);
    uint64_t v12 = *(void *)(v0 + 104);
    uint64_t v14 = *(void *)(v0 + 112);
    *(unsigned char *)(v7 + 32) = v8;
    *(void *)(v7 + 40) = v9;
    *(void *)(v7 + 48) = v10;
    *(unsigned char *)(v7 + 56) = v11;
    *(void *)(v7 + 64) = v13;
    *(void *)(v7 + 72) = v12;
    *(void *)(v7 + 80) = v14;
    *(unsigned char *)(v7 + 88) = v24;
    *(void *)(v7 + 96) = v1;
    *(void *)(v7 + 104) = v2;
    *(unsigned char *)(v7 + 112) = v3 & 1;
    *(void *)(v7 + 120) = v4;
    *(void *)(v7 + 128) = v5;
    *(void *)(v7 + 136) = v6;
    outlined copy of Text.Storage(v9, v10, v11);
    swift_bridgeObjectRetain();
    uint64_t v15 = v12;
  }
  else
  {
    *(_OWORD *)(v7 + 16) = xmmword_18834BB80;
    char v16 = *(unsigned char *)(v0 + 64);
    uint64_t v17 = *(void *)(v0 + 72);
    uint64_t v18 = *(void *)(v0 + 80);
    char v19 = *(unsigned char *)(v0 + 88);
    uint64_t v20 = *(void *)(v0 + 96);
    uint64_t v21 = *(void *)(v0 + 104);
    uint64_t v22 = *(void *)(v0 + 112);
    *(unsigned char *)(v7 + 32) = v16;
    *(void *)(v7 + 40) = v17;
    *(void *)(v7 + 48) = v18;
    *(unsigned char *)(v7 + 56) = v19;
    *(void *)(v7 + 64) = v20;
    *(void *)(v7 + 72) = v21;
    *(void *)(v7 + 80) = v22;
    outlined copy of Text.Storage(v17, v18, v19);
    swift_bridgeObjectRetain();
    uint64_t v15 = v21;
  }
  outlined copy of AppIntentExecutor?(v15);
  outlined copy of Alert.Button?(v24, v1, v2, v3, v4, v5);
  return v7;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance Alert.Presentation.Key(uint64_t a1, void (*a2)(void *__return_ptr, uint64_t))
{
  uint64_t v4 = outlined init with take of Alert?(a1, (uint64_t)v6, &lazy cache variable for type metadata for Alert.Presentation?, (uint64_t)&type metadata for Alert.Presentation);
  if (v6[3])
  {
    memcpy(__dst, v6, sizeof(__dst));
  }
  else
  {
    a2(__dst, v4);
    _ss11AnyHashableVSgWOhTm_0((uint64_t)v6, &lazy cache variable for type metadata for Alert.Presentation?, (uint64_t)&type metadata for Alert.Presentation);
  }
  return outlined init with take of Alert?((uint64_t)__dst, a1, &lazy cache variable for type metadata for Alert.Presentation?, (uint64_t)&type metadata for Alert.Presentation);
}

uint64_t protocol witness for AlertControllerConvertible.onDismiss.getter in conformance Alert.Presentation()
{
  uint64_t v1 = *(void *)(v0 + 184);
  outlined copy of AppIntentExecutor?(v1);
  return v1;
}

uint64_t protocol witness for AlertControllerConvertible.itemID.getter in conformance Alert.Presentation@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AnyHashable?(v1 + 208, a1);
}

double protocol witness for AlertControllerConvertible.sourceRect.getter in conformance Alert.Presentation()
{
  return *(double *)(v0 + 248);
}

uint64_t View.alert<A>(item:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v49 = a8;
  uint64_t v43 = a6;
  uint64_t v44 = a7;
  uint64_t v41 = a5;
  uint64_t v42 = a4;
  uint64_t v48 = a3;
  int v46 = a2;
  uint64_t v50 = type metadata accessor for Optional();
  uint64_t v13 = type metadata accessor for Binding();
  uint64_t v47 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  unint64_t v45 = (char *)&v39 - v14;
  uint64_t v51 = *(void *)(v50 - 8);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v39 - v17;
  uint64_t v39 = a1;
  char v40 = (char *)&v39 - v17;
  MEMORY[0x18C113DA0](v16);
  v53[2] = a4;
  v53[3] = a5;
  v53[4] = a6;
  v53[5] = a7;
  v53[6] = v46;
  v53[7] = v48;
  uint64_t v19 = v50;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in View.actionSheet<A>(item:content:), (uint64_t)v53, MEMORY[0x1E4FBC248], (uint64_t)&type metadata for Alert, v20, (uint64_t)v56);
  uint64_t v48 = 0;
  uint64_t v21 = *(void (**)(char *, uint64_t))(v51 + 8);
  v51 += 8;
  int v46 = v21;
  v21(v18, v19);
  outlined init with take of Alert?((uint64_t)v56, (uint64_t)v57, &lazy cache variable for type metadata for Alert?, (uint64_t)&type metadata for Alert);
  outlined init with take of Alert?((uint64_t)v57, (uint64_t)v55, &lazy cache variable for type metadata for Alert?, (uint64_t)&type metadata for Alert);
  uint64_t v22 = v47;
  uint64_t v23 = v45;
  uint64_t v24 = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v45, a1, v13);
  uint64_t v25 = v22;
  unint64_t v26 = (*(unsigned __int8 *)(v22 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  uint64_t v27 = (void *)swift_allocObject();
  uint64_t v28 = v41;
  uint64_t v29 = v42;
  v27[2] = v42;
  v27[3] = v28;
  uint64_t v30 = v43;
  uint64_t v31 = v44;
  v27[4] = v43;
  v27[5] = v31;
  uint64_t v32 = (char *)v27 + v26;
  uint64_t v33 = v24;
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v32, v23, v24);
  long long v34 = v40;
  MEMORY[0x18C113DA0](v33);
  v52[2] = v29;
  v52[3] = v28;
  v52[4] = v30;
  v52[5] = v31;
  uint64_t v35 = MEMORY[0x1E4FBB960];
  uint64_t v36 = v50;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #3 in View.alert<A>(item:content:), (uint64_t)v52, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB960], v37, (uint64_t)v54);
  v46(v34, v36);
  View.presentationCommon(_:onDismiss:id:)((uint64_t)v55, (uint64_t)partial apply for closure #2 in View.alert<A>(item:content:), (uint64_t)v27, (uint64_t)v54, v29, v30);
  swift_release();
  _ss11AnyHashableVSgWOhTm_0((uint64_t)v54, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v35);
  outlined init with take of Alert?((uint64_t)v55, (uint64_t)v58, &lazy cache variable for type metadata for Alert?, (uint64_t)&type metadata for Alert);
  return outlined release of Alert?((uint64_t)v58, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of Alert?);
}

uint64_t closure #2 in View.alert<A>(item:content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x1F4188790](v4);
  char v8 = (char *)&v10 - v7;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(*(void *)(a3 - 8) + 56))((char *)&v10 - v7, 1, 1, a3, v6);
  type metadata accessor for Binding();
  specialized Binding.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_187731AC0()
{
  uint64_t v1 = *(void *)(v0 + 24);
  type metadata accessor for Optional();
  uint64_t v2 = (int *)(type metadata accessor for Binding() - 8);
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80));
  swift_release();
  swift_release();
  uint64_t v4 = v3 + v2[10];
  uint64_t v5 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v4, 1, v1)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v1);
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in View.alert<A>(item:content:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  type metadata accessor for Optional();
  uint64_t v3 = *(void *)(type metadata accessor for Binding() - 8);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return closure #2 in View.alert<A>(item:content:)(v4, v1, v2);
}

uint64_t closure #3 in View.alert<A>(item:content:)()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v3 = (char *)&v5 - v2;
  dispatch thunk of Identifiable.id.getter();
  swift_getAssociatedConformanceWitness();
  _convertToAnyHashable<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
}

uint64_t partial apply for closure #3 in View.alert<A>(item:content:)()
{
  return closure #3 in View.alert<A>(item:content:)();
}

uint64_t sub_187731E00()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t destroy for Alert(uint64_t a1)
{
  outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 56))
  {
    outlined consume of Text.Storage(*(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned char *)(a1 + 48));
    swift_bridgeObjectRelease();
  }
  outlined consume of Text.Storage(*(void *)(a1 + 72), *(void *)(a1 + 80), *(unsigned char *)(a1 + 88));
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a1 + 104)) {
    uint64_t result = swift_release();
  }
  if (*(void *)(a1 + 152))
  {
    outlined consume of Text.Storage(*(void *)(a1 + 128), *(void *)(a1 + 136), *(unsigned char *)(a1 + 144));
    uint64_t result = swift_bridgeObjectRelease();
    if (*(void *)(a1 + 160))
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t initializeWithCopy for Alert(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  if (v7)
  {
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v9 = *(void *)(a2 + 40);
    char v10 = *(unsigned char *)(a2 + 48);
    outlined copy of Text.Storage(v8, v9, v10);
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = v9;
    *(unsigned char *)(a1 + 48) = v10;
    *(void *)(a1 + 56) = v7;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v11;
  }
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a2 + 80);
  char v14 = *(unsigned char *)(a2 + 88);
  outlined copy of Text.Storage(v12, v13, v14);
  *(void *)(a1 + 72) = v12;
  *(void *)(a1 + 80) = v13;
  *(unsigned char *)(a1 + 88) = v14;
  uint64_t v15 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  if (v15)
  {
    uint64_t v16 = *(void *)(a2 + 112);
    *(void *)(a1 + 104) = v15;
    *(void *)(a1 + 112) = v16;
    swift_retain();
    uint64_t v17 = *(void *)(a2 + 152);
    if (v17) {
      goto LABEL_6;
    }
LABEL_9:
    long long v23 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v23;
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    goto LABEL_11;
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  uint64_t v17 = *(void *)(a2 + 152);
  if (!v17) {
    goto LABEL_9;
  }
LABEL_6:
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  uint64_t v18 = *(void *)(a2 + 128);
  uint64_t v19 = *(void *)(a2 + 136);
  char v20 = *(unsigned char *)(a2 + 144);
  outlined copy of Text.Storage(v18, v19, v20);
  *(void *)(a1 + 128) = v18;
  *(void *)(a1 + 136) = v19;
  *(unsigned char *)(a1 + 144) = v20;
  *(void *)(a1 + 152) = v17;
  uint64_t v21 = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  if (v21)
  {
    uint64_t v22 = *(void *)(a2 + 168);
    *(void *)(a1 + 160) = v21;
    *(void *)(a1 + 168) = v22;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  }
LABEL_11:
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  return a1;
}

uint64_t assignWithCopy for Alert(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  char v10 = (_OWORD *)(a1 + 32);
  long long v11 = (_OWORD *)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56))
  {
    if (v12)
    {
      uint64_t v13 = *(void *)(a2 + 32);
      uint64_t v14 = *(void *)(a2 + 40);
      char v15 = *(unsigned char *)(a2 + 48);
      outlined copy of Text.Storage(v13, v14, v15);
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = *(void *)(a1 + 40);
      char v18 = *(unsigned char *)(a1 + 48);
      *(void *)(a1 + 32) = v13;
      *(void *)(a1 + 40) = v14;
      *(unsigned char *)(a1 + 48) = v15;
      outlined consume of Text.Storage(v16, v17, v18);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 32);
      long long v22 = *(_OWORD *)(a2 + 48);
      *char v10 = *v11;
      *(_OWORD *)(a1 + 48) = v22;
    }
  }
  else if (v12)
  {
    uint64_t v19 = *(void *)(a2 + 32);
    uint64_t v20 = *(void *)(a2 + 40);
    char v21 = *(unsigned char *)(a2 + 48);
    outlined copy of Text.Storage(v19, v20, v21);
    *(void *)(a1 + 32) = v19;
    *(void *)(a1 + 40) = v20;
    *(unsigned char *)(a1 + 48) = v21;
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v23 = *(_OWORD *)(a2 + 48);
    *char v10 = *v11;
    *(_OWORD *)(a1 + 48) = v23;
  }
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v24 = *(void *)(a2 + 72);
  uint64_t v25 = *(void *)(a2 + 80);
  char v26 = *(unsigned char *)(a2 + 88);
  outlined copy of Text.Storage(v24, v25, v26);
  uint64_t v27 = *(void *)(a1 + 72);
  uint64_t v28 = *(void *)(a1 + 80);
  char v29 = *(unsigned char *)(a1 + 88);
  *(void *)(a1 + 72) = v24;
  *(void *)(a1 + 80) = v25;
  *(unsigned char *)(a1 + 88) = v26;
  outlined consume of Text.Storage(v27, v28, v29);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = *(void *)(a2 + 104);
  if (*(void *)(a1 + 104))
  {
    if (v30)
    {
      uint64_t v31 = *(void *)(a2 + 112);
      *(void *)(a1 + 104) = v30;
      *(void *)(a1 + 112) = v31;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v30)
  {
    uint64_t v32 = *(void *)(a2 + 112);
    *(void *)(a1 + 104) = v30;
    *(void *)(a1 + 112) = v32;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
LABEL_15:
  uint64_t v33 = (_OWORD *)(a1 + 120);
  long long v34 = (long long *)(a2 + 120);
  uint64_t v35 = *(void *)(a2 + 152);
  if (!*(void *)(a1 + 152))
  {
    if (!v35)
    {
      long long v52 = *v34;
      long long v53 = *(_OWORD *)(a2 + 136);
      long long v54 = *(_OWORD *)(a2 + 152);
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(_OWORD *)(a1 + 136) = v53;
      *(_OWORD *)(a1 + 152) = v54;
LABEL_30:
      *uint64_t v33 = v52;
      goto LABEL_32;
    }
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
    uint64_t v44 = *(void *)(a2 + 128);
    uint64_t v45 = *(void *)(a2 + 136);
    char v46 = *(unsigned char *)(a2 + 144);
    outlined copy of Text.Storage(v44, v45, v46);
    *(void *)(a1 + 128) = v44;
    *(void *)(a1 + 136) = v45;
    *(unsigned char *)(a1 + 144) = v46;
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    uint64_t v47 = *(void *)(a2 + 160);
    swift_bridgeObjectRetain();
    if (!v47)
    {
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      goto LABEL_32;
    }
    uint64_t v48 = *(void *)(a2 + 168);
    *(void *)(a1 + 160) = v47;
    goto LABEL_26;
  }
  if (!v35)
  {
    outlined destroy of Alert.Button(a1 + 120);
    long long v50 = *(_OWORD *)(a2 + 136);
    long long v49 = *(_OWORD *)(a2 + 152);
    long long v51 = *v34;
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(_OWORD *)(a1 + 136) = v50;
    *(_OWORD *)(a1 + 152) = v49;
    *uint64_t v33 = v51;
    goto LABEL_32;
  }
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  uint64_t v36 = *(void *)(a2 + 128);
  uint64_t v37 = *(void *)(a2 + 136);
  char v38 = *(unsigned char *)(a2 + 144);
  outlined copy of Text.Storage(v36, v37, v38);
  uint64_t v39 = *(void *)(a1 + 128);
  uint64_t v40 = *(void *)(a1 + 136);
  char v41 = *(unsigned char *)(a1 + 144);
  *(void *)(a1 + 128) = v36;
  *(void *)(a1 + 136) = v37;
  *(unsigned char *)(a1 + 144) = v38;
  outlined consume of Text.Storage(v39, v40, v41);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v33 = (_OWORD *)(a1 + 160);
  uint64_t v42 = *(void *)(a2 + 160);
  if (!*(void *)(a1 + 160))
  {
    if (!v42)
    {
LABEL_29:
      long long v52 = *(_OWORD *)(a2 + 160);
      goto LABEL_30;
    }
    uint64_t v48 = *(void *)(a2 + 168);
    *(void *)(a1 + 160) = v42;
LABEL_26:
    *(void *)(a1 + 168) = v48;
    swift_retain();
    goto LABEL_32;
  }
  if (!v42)
  {
    swift_release();
    goto LABEL_29;
  }
  uint64_t v43 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = v42;
  *(void *)(a1 + 168) = v43;
  swift_retain();
  swift_release();
LABEL_32:
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  return a1;
}

uint64_t outlined destroy of Alert.Button(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for Alert(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of Text.Storage(v5, v6, v7);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 56))
  {
    uint64_t v8 = *(void *)(a2 + 56);
    if (v8)
    {
      char v9 = *(unsigned char *)(a2 + 48);
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = *(void *)(a1 + 40);
      char v12 = *(unsigned char *)(a1 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(unsigned char *)(a1 + 48) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(void *)(a1 + 56) = v8;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 32);
  }
  long long v13 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v13;
LABEL_6:
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  char v14 = *(unsigned char *)(a2 + 88);
  uint64_t v15 = *(void *)(a1 + 72);
  uint64_t v16 = *(void *)(a1 + 80);
  char v17 = *(unsigned char *)(a1 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = v14;
  outlined consume of Text.Storage(v15, v16, v17);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(a2 + 104);
  if (*(void *)(a1 + 104))
  {
    if (v18)
    {
      uint64_t v19 = *(void *)(a2 + 112);
      *(void *)(a1 + 104) = v18;
      *(void *)(a1 + 112) = v19;
      swift_release();
      goto LABEL_13;
    }
    swift_release();
  }
  else if (v18)
  {
    uint64_t v20 = *(void *)(a2 + 112);
    *(void *)(a1 + 104) = v18;
    *(void *)(a1 + 112) = v20;
    goto LABEL_13;
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
LABEL_13:
  if (!*(void *)(a1 + 152))
  {
LABEL_19:
    long long v28 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v28;
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    goto LABEL_20;
  }
  uint64_t v21 = *(void *)(a2 + 152);
  if (!v21)
  {
    outlined destroy of Alert.Button(a1 + 120);
    goto LABEL_19;
  }
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  char v22 = *(unsigned char *)(a2 + 144);
  uint64_t v23 = *(void *)(a1 + 128);
  uint64_t v24 = *(void *)(a1 + 136);
  char v25 = *(unsigned char *)(a1 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = v22;
  outlined consume of Text.Storage(v23, v24, v25);
  *(void *)(a1 + 152) = v21;
  swift_bridgeObjectRelease();
  uint64_t v26 = *(void *)(a2 + 160);
  if (!*(void *)(a1 + 160))
  {
    if (v26)
    {
      uint64_t v30 = *(void *)(a2 + 168);
      *(void *)(a1 + 160) = v26;
      *(void *)(a1 + 168) = v30;
      goto LABEL_20;
    }
LABEL_24:
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    goto LABEL_20;
  }
  if (!v26)
  {
    swift_release();
    goto LABEL_24;
  }
  uint64_t v27 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = v26;
  *(void *)(a1 + 168) = v27;
  swift_release();
LABEL_20:
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  return a1;
}

uint64_t getEnumTagSinglePayload for Alert(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 177)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Alert(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 176) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 177) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 177) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t destroy for Alert.Button(uint64_t a1)
{
  outlined consume of Text.Storage(*(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a1 + 40))
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for Alert.Button(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  outlined copy of Text.Storage(v4, v5, v6);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (v7)
  {
    uint64_t v8 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = v7;
    *(void *)(a1 + 48) = v8;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }
  return a1;
}

uint64_t assignWithCopy for Alert.Button(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  outlined copy of Text.Storage(v4, v5, v6);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  char v9 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 40);
  if (!*(void *)(a1 + 40))
  {
    if (v10)
    {
      uint64_t v12 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = v10;
      *(void *)(a1 + 48) = v12;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    return a1;
  }
  if (!v10)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v11 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v11;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Alert.Button(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  char v7 = *(unsigned char *)(a1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = v4;
  outlined consume of Text.Storage(v5, v6, v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  if (!*(void *)(a1 + 40))
  {
    if (v8)
    {
      uint64_t v10 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = v8;
      *(void *)(a1 + 48) = v10;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    return a1;
  }
  if (!v8)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Alert.Button(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Alert.Button(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_1877329C8()
{
  return swift_getWitnessTable();
}

uint64_t sub_187732A38()
{
  return swift_getWitnessTable();
}

uint64_t destroy for Alert.Presentation(uint64_t a1)
{
  outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 56))
  {
    outlined consume of Text.Storage(*(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned char *)(a1 + 48));
    swift_bridgeObjectRelease();
  }
  outlined consume of Text.Storage(*(void *)(a1 + 72), *(void *)(a1 + 80), *(unsigned char *)(a1 + 88));
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a1 + 104)) {
    uint64_t result = swift_release();
  }
  if (*(void *)(a1 + 152))
  {
    outlined consume of Text.Storage(*(void *)(a1 + 128), *(void *)(a1 + 136), *(unsigned char *)(a1 + 144));
    uint64_t result = swift_bridgeObjectRelease();
    if (*(void *)(a1 + 160)) {
      uint64_t result = swift_release();
    }
  }
  if (*(void *)(a1 + 184)) {
    uint64_t result = swift_release();
  }
  if (*(void *)(a1 + 232))
  {
    return __swift_destroy_boxed_opaque_existential_1(a1 + 208);
  }
  return result;
}

uint64_t initializeWithCopy for Alert.Presentation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  if (v7)
  {
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v9 = *(void *)(a2 + 40);
    char v10 = *(unsigned char *)(a2 + 48);
    outlined copy of Text.Storage(v8, v9, v10);
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = v9;
    *(unsigned char *)(a1 + 48) = v10;
    *(void *)(a1 + 56) = v7;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v11;
  }
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a2 + 80);
  char v14 = *(unsigned char *)(a2 + 88);
  outlined copy of Text.Storage(v12, v13, v14);
  *(void *)(a1 + 72) = v12;
  *(void *)(a1 + 80) = v13;
  *(unsigned char *)(a1 + 88) = v14;
  uint64_t v15 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  if (v15)
  {
    uint64_t v16 = *(void *)(a2 + 112);
    *(void *)(a1 + 104) = v15;
    *(void *)(a1 + 112) = v16;
    swift_retain();
    uint64_t v17 = *(void *)(a2 + 152);
    if (v17) {
      goto LABEL_6;
    }
  }
  else
  {
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    uint64_t v17 = *(void *)(a2 + 152);
    if (v17)
    {
LABEL_6:
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
      uint64_t v18 = *(void *)(a2 + 128);
      uint64_t v19 = *(void *)(a2 + 136);
      char v20 = *(unsigned char *)(a2 + 144);
      outlined copy of Text.Storage(v18, v19, v20);
      *(void *)(a1 + 128) = v18;
      *(void *)(a1 + 136) = v19;
      *(unsigned char *)(a1 + 144) = v20;
      *(void *)(a1 + 152) = v17;
      uint64_t v21 = *(void *)(a2 + 160);
      swift_bridgeObjectRetain();
      if (v21)
      {
        uint64_t v22 = *(void *)(a2 + 168);
        *(void *)(a1 + 160) = v21;
        *(void *)(a1 + 168) = v22;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      }
      goto LABEL_11;
    }
  }
  long long v23 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v23;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
LABEL_11:
  uint64_t v24 = *(void *)(a2 + 184);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  if (v24)
  {
    uint64_t v25 = *(void *)(a2 + 192);
    *(void *)(a1 + 184) = v24;
    *(void *)(a1 + 192) = v25;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  }
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  uint64_t v26 = (_OWORD *)(a1 + 208);
  uint64_t v27 = (_OWORD *)(a2 + 208);
  uint64_t v28 = *(void *)(a2 + 232);
  if (v28)
  {
    uint64_t v29 = *(void *)(a2 + 240);
    *(void *)(a1 + 232) = v28;
    *(void *)(a1 + 240) = v29;
    (**(void (***)(_OWORD *, _OWORD *))(v28 - 8))(v26, v27);
  }
  else
  {
    long long v30 = *(_OWORD *)(a2 + 224);
    *uint64_t v26 = *v27;
    *(_OWORD *)(a1 + 224) = v30;
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
  }
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  return a1;
}

uint64_t assignWithCopy for Alert.Presentation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  char v10 = (_OWORD *)(a1 + 32);
  long long v11 = (_OWORD *)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56))
  {
    if (v12)
    {
      uint64_t v13 = *(void *)(a2 + 32);
      uint64_t v14 = *(void *)(a2 + 40);
      char v15 = *(unsigned char *)(a2 + 48);
      outlined copy of Text.Storage(v13, v14, v15);
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = *(void *)(a1 + 40);
      char v18 = *(unsigned char *)(a1 + 48);
      *(void *)(a1 + 32) = v13;
      *(void *)(a1 + 40) = v14;
      *(unsigned char *)(a1 + 48) = v15;
      outlined consume of Text.Storage(v16, v17, v18);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 32);
      long long v22 = *(_OWORD *)(a2 + 48);
      *char v10 = *v11;
      *(_OWORD *)(a1 + 48) = v22;
    }
  }
  else if (v12)
  {
    uint64_t v19 = *(void *)(a2 + 32);
    uint64_t v20 = *(void *)(a2 + 40);
    char v21 = *(unsigned char *)(a2 + 48);
    outlined copy of Text.Storage(v19, v20, v21);
    *(void *)(a1 + 32) = v19;
    *(void *)(a1 + 40) = v20;
    *(unsigned char *)(a1 + 48) = v21;
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v23 = *(_OWORD *)(a2 + 48);
    *char v10 = *v11;
    *(_OWORD *)(a1 + 48) = v23;
  }
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v24 = *(void *)(a2 + 72);
  uint64_t v25 = *(void *)(a2 + 80);
  char v26 = *(unsigned char *)(a2 + 88);
  outlined copy of Text.Storage(v24, v25, v26);
  uint64_t v27 = *(void *)(a1 + 72);
  uint64_t v28 = *(void *)(a1 + 80);
  char v29 = *(unsigned char *)(a1 + 88);
  *(void *)(a1 + 72) = v24;
  *(void *)(a1 + 80) = v25;
  *(unsigned char *)(a1 + 88) = v26;
  outlined consume of Text.Storage(v27, v28, v29);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = *(void *)(a2 + 104);
  if (*(void *)(a1 + 104))
  {
    if (v30)
    {
      uint64_t v31 = *(void *)(a2 + 112);
      *(void *)(a1 + 104) = v30;
      *(void *)(a1 + 112) = v31;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v30)
  {
    uint64_t v32 = *(void *)(a2 + 112);
    *(void *)(a1 + 104) = v30;
    *(void *)(a1 + 112) = v32;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
LABEL_15:
  uint64_t v33 = (_OWORD *)(a1 + 120);
  long long v34 = (long long *)(a2 + 120);
  uint64_t v35 = *(void *)(a2 + 152);
  if (*(void *)(a1 + 152))
  {
    if (!v35)
    {
      outlined destroy of Alert.Button(a1 + 120);
      long long v50 = *(_OWORD *)(a2 + 136);
      long long v49 = *(_OWORD *)(a2 + 152);
      long long v51 = *v34;
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(_OWORD *)(a1 + 136) = v50;
      *(_OWORD *)(a1 + 152) = v49;
      *uint64_t v33 = v51;
      goto LABEL_32;
    }
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
    uint64_t v36 = *(void *)(a2 + 128);
    uint64_t v37 = *(void *)(a2 + 136);
    char v38 = *(unsigned char *)(a2 + 144);
    outlined copy of Text.Storage(v36, v37, v38);
    uint64_t v39 = *(void *)(a1 + 128);
    uint64_t v40 = *(void *)(a1 + 136);
    char v41 = *(unsigned char *)(a1 + 144);
    *(void *)(a1 + 128) = v36;
    *(void *)(a1 + 136) = v37;
    *(unsigned char *)(a1 + 144) = v38;
    outlined consume of Text.Storage(v39, v40, v41);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v33 = (_OWORD *)(a1 + 160);
    uint64_t v42 = *(void *)(a2 + 160);
    if (*(void *)(a1 + 160))
    {
      if (v42)
      {
        uint64_t v43 = *(void *)(a2 + 168);
        *(void *)(a1 + 160) = v42;
        *(void *)(a1 + 168) = v43;
        swift_retain();
        swift_release();
        goto LABEL_32;
      }
      swift_release();
      goto LABEL_29;
    }
    if (!v42)
    {
LABEL_29:
      long long v52 = *(_OWORD *)(a2 + 160);
      goto LABEL_30;
    }
    uint64_t v48 = *(void *)(a2 + 168);
    *(void *)(a1 + 160) = v42;
LABEL_26:
    *(void *)(a1 + 168) = v48;
    swift_retain();
    goto LABEL_32;
  }
  if (!v35)
  {
    long long v52 = *v34;
    long long v53 = *(_OWORD *)(a2 + 136);
    long long v54 = *(_OWORD *)(a2 + 152);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(_OWORD *)(a1 + 136) = v53;
    *(_OWORD *)(a1 + 152) = v54;
LABEL_30:
    *uint64_t v33 = v52;
    goto LABEL_32;
  }
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  uint64_t v44 = *(void *)(a2 + 128);
  uint64_t v45 = *(void *)(a2 + 136);
  char v46 = *(unsigned char *)(a2 + 144);
  outlined copy of Text.Storage(v44, v45, v46);
  *(void *)(a1 + 128) = v44;
  *(void *)(a1 + 136) = v45;
  *(unsigned char *)(a1 + 144) = v46;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  uint64_t v47 = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  if (v47)
  {
    uint64_t v48 = *(void *)(a2 + 168);
    *(void *)(a1 + 160) = v47;
    goto LABEL_26;
  }
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
LABEL_32:
  uint64_t v55 = *(void *)(a1 + 184);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  uint64_t v56 = *(void *)(a2 + 184);
  if (v55)
  {
    if (v56)
    {
      uint64_t v57 = *(void *)(a2 + 192);
      *(void *)(a1 + 184) = v56;
      *(void *)(a1 + 192) = v57;
      swift_retain();
      swift_release();
      goto LABEL_39;
    }
    swift_release();
  }
  else if (v56)
  {
    uint64_t v58 = *(void *)(a2 + 192);
    *(void *)(a1 + 184) = v56;
    *(void *)(a1 + 192) = v58;
    swift_retain();
    goto LABEL_39;
  }
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
LABEL_39:
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  __int16 v59 = (_OWORD *)(a1 + 208);
  char v60 = (_OWORD *)(a2 + 208);
  uint64_t v61 = *(void *)(a2 + 232);
  if (*(void *)(a1 + 232))
  {
    if (v61)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 208), (uint64_t *)(a2 + 208));
    }
    else
    {
      outlined destroy of AnyHashable(a1 + 208);
      uint64_t v62 = *(void *)(a2 + 240);
      long long v63 = *(_OWORD *)(a2 + 224);
      *__int16 v59 = *v60;
      *(_OWORD *)(a1 + 224) = v63;
      *(void *)(a1 + 240) = v62;
    }
  }
  else if (v61)
  {
    *(void *)(a1 + 232) = v61;
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    (**(void (***)(uint64_t, uint64_t))(v61 - 8))(a1 + 208, a2 + 208);
  }
  else
  {
    long long v64 = *v60;
    long long v65 = *(_OWORD *)(a2 + 224);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *__int16 v59 = v64;
    *(_OWORD *)(a1 + 224) = v65;
  }
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  return a1;
}

void *__swift_memcpy280_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x118uLL);
}

uint64_t assignWithTake for Alert.Presentation(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of Text.Storage(v5, v6, v7);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 56))
  {
    if (*(void *)(a2 + 56))
    {
      char v8 = *(unsigned char *)(a2 + 48);
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(void *)(a1 + 40);
      char v11 = *(unsigned char *)(a1 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(unsigned char *)(a1 + 48) = v8;
      outlined consume of Text.Storage(v9, v10, v11);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 32);
  }
  long long v12 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v12;
LABEL_6:
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  char v13 = *(unsigned char *)(a2 + 88);
  uint64_t v14 = *(void *)(a1 + 72);
  uint64_t v15 = *(void *)(a1 + 80);
  char v16 = *(unsigned char *)(a1 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = v13;
  outlined consume of Text.Storage(v14, v15, v16);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(a2 + 104);
  if (*(void *)(a1 + 104))
  {
    if (v17)
    {
      uint64_t v18 = *(void *)(a2 + 112);
      *(void *)(a1 + 104) = v17;
      *(void *)(a1 + 112) = v18;
      swift_release();
      goto LABEL_13;
    }
    swift_release();
  }
  else if (v17)
  {
    uint64_t v19 = *(void *)(a2 + 112);
    *(void *)(a1 + 104) = v17;
    *(void *)(a1 + 112) = v19;
    goto LABEL_13;
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
LABEL_13:
  if (!*(void *)(a1 + 152))
  {
LABEL_19:
    long long v26 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v26;
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    goto LABEL_20;
  }
  if (!*(void *)(a2 + 152))
  {
    outlined destroy of Alert.Button(a1 + 120);
    goto LABEL_19;
  }
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  char v20 = *(unsigned char *)(a2 + 144);
  uint64_t v21 = *(void *)(a1 + 128);
  uint64_t v22 = *(void *)(a1 + 136);
  char v23 = *(unsigned char *)(a1 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = v20;
  outlined consume of Text.Storage(v21, v22, v23);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void *)(a2 + 160);
  if (*(void *)(a1 + 160))
  {
    if (v24)
    {
      uint64_t v25 = *(void *)(a2 + 168);
      *(void *)(a1 + 160) = v24;
      *(void *)(a1 + 168) = v25;
      swift_release();
      goto LABEL_20;
    }
    swift_release();
  }
  else if (v24)
  {
    uint64_t v33 = *(void *)(a2 + 168);
    *(void *)(a1 + 160) = v24;
    *(void *)(a1 + 168) = v33;
    goto LABEL_20;
  }
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
LABEL_20:
  uint64_t v27 = *(void *)(a2 + 184);
  uint64_t v28 = *(void *)(a1 + 184);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  if (v28)
  {
    if (v27)
    {
      uint64_t v29 = *(void *)(a2 + 192);
      *(void *)(a1 + 184) = v27;
      *(void *)(a1 + 192) = v29;
      swift_release();
      goto LABEL_27;
    }
    swift_release();
  }
  else if (v27)
  {
    uint64_t v30 = *(void *)(a2 + 192);
    *(void *)(a1 + 184) = v27;
    *(void *)(a1 + 192) = v30;
    goto LABEL_27;
  }
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
LABEL_27:
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  if (*(void *)(a1 + 232))
  {
    if (*(void *)(a2 + 232)) {
      __swift_destroy_boxed_opaque_existential_1(a1 + 208);
    }
    else {
      outlined destroy of AnyHashable(a1 + 208);
    }
  }
  long long v31 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v31;
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(void *)&long long v31 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v31;
  return a1;
}

unsigned char *storeEnumTagSinglePayload for Alert.Button.Style(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187733570);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

_OWORD *assignWithTake for AlertTransformModifier(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

unint64_t lazy protocol witness table accessor for type Alert.Button.Style and conformance Alert.Button.Style()
{
  unint64_t result = lazy protocol witness table cache variable for type Alert.Button.Style and conformance Alert.Button.Style;
  if (!lazy protocol witness table cache variable for type Alert.Button.Style and conformance Alert.Button.Style)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Alert.Button.Style and conformance Alert.Button.Style);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for AlertControllerConvertible.Action : AlertActionConvertible in Alert.Presentation()
{
  return &protocol witness table for Alert.Button;
}

uint64_t sub_187733630()
{
  if (*(void *)(v0 + 40))
  {
    outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_bridgeObjectRelease();
    if (*(void *)(v0 + 72))
    {
      outlined consume of Text.Storage(*(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64));
      swift_bridgeObjectRelease();
    }
    outlined consume of Text.Storage(*(void *)(v0 + 88), *(void *)(v0 + 96), *(unsigned char *)(v0 + 104));
    swift_bridgeObjectRelease();
    if (*(void *)(v0 + 120)) {
      swift_release();
    }
    if (*(void *)(v0 + 168))
    {
      outlined consume of Text.Storage(*(void *)(v0 + 144), *(void *)(v0 + 152), *(unsigned char *)(v0 + 160));
      swift_bridgeObjectRelease();
      if (*(void *)(v0 + 176)) {
        swift_release();
      }
    }
  }
  if (*(void *)(v0 + 200)) {
    swift_release();
  }
  if (*(void *)(v0 + 240)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 216);
  }

  return swift_deallocObject();
}

uint64_t getEnumTagSinglePayload for AlertTransformModifier.Transform(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 28)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AlertTransformModifier.Transform(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 28) = v3;
  return result;
}

uint64_t sub_187733758()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t closure #1 in static ScrollViewUtilities.animationOffset(target:bounds:contentSize:contentInsets:layoutDirection:)(uint64_t (*a1)(long long *, char *), uint64_t a2, char a3)
{
  char v4 = a3 & 1;
  ScrollGeometry.init(contentOffset:contentSize:contentInsets:containerSize:)();
  char v7 = v4;
  return a1(&v6, &v7);
}

uint64_t assignWithCopy for ContentScrollViewBox(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t initializeWithTake for ContentScrollViewBox(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for ContentScrollViewBox(a1, a2, a3, MEMORY[0x1E4FBC930]);
}

uint64_t assignWithTake for ContentScrollViewBox(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

double specialized static ScrollViewUtilities.animationOffset(rect:anchor:bounds:contentSize:)(CGFloat a1, CGFloat a2, double a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, uint64_t a9, uint64_t a10, char a11, double a12, double a13)
{
  CGFloat v20 = a6;
  double v23 = a3;
  if (a11)
  {
    v49.origin.x = a5;
    v49.origin.y = a6;
    v49.size.width = a7;
    v49.size.height = a8;
    CGFloat v26 = a1;
    CGFloat v27 = a2;
    CGFloat v45 = v23;
    CGFloat v47 = a4;
    if (!CGRectContainsRect(v49, *(CGRect *)(&v23 - 2)))
    {
      v50.origin.x = a1;
      v50.origin.y = a2;
      v50.size.width = v45;
      v50.size.height = v47;
      double MaxX = CGRectGetMaxX(v50);
      v51.origin.x = a5;
      v51.origin.y = v20;
      v51.size.width = a7;
      v51.size.height = a8;
      if (CGRectGetMaxX(v51) <= MaxX)
      {
        v54.origin.x = a1;
        v54.origin.y = a2;
        v54.size.width = v45;
        v54.size.height = v47;
        CGRectGetMaxX(v54);
        v55.origin.x = a5;
        v55.origin.y = v20;
        v55.size.width = a7;
        v55.size.height = a8;
        CGRectGetWidth(v55);
        CGFloat v30 = v45;
        CGFloat v31 = v47;
      }
      else
      {
        v52.origin.x = a1;
        v52.origin.y = a2;
        v52.size.width = v45;
        v52.size.height = v47;
        double MinX = CGRectGetMinX(v52);
        v53.origin.x = a5;
        v53.origin.y = v20;
        v53.size.width = a7;
        v53.size.height = a8;
        CGFloat v29 = CGRectGetMinX(v53);
        CGFloat v30 = v45;
        CGFloat v31 = v47;
        if (MinX < v29)
        {
          CGFloat v32 = a1;
          CGFloat v33 = a2;
          CGRectGetMinX(*(CGRect *)(&v30 - 2));
          CGFloat v30 = v45;
          CGFloat v31 = v47;
        }
      }
      CGFloat v34 = a1;
      CGFloat v35 = a2;
      double MaxY = CGRectGetMaxY(*(CGRect *)(&v30 - 2));
      v56.origin.x = a5;
      v56.origin.y = v20;
      v56.size.width = a7;
      v56.size.height = a8;
      if (CGRectGetMaxY(v56) <= MaxY)
      {
        v60.origin.x = a1;
        v60.origin.y = a2;
        v60.size.width = v45;
        v60.size.height = v47;
        CGRectGetMaxY(v60);
        v61.origin.x = a5;
        v61.origin.y = v20;
        v61.size.width = a7;
        v61.size.height = a8;
        CGRectGetHeight(v61);
      }
      else
      {
        v57.origin.x = a1;
        v57.origin.y = a2;
        v57.size.width = v45;
        v57.size.height = v47;
        double MinY = CGRectGetMinY(v57);
        v58.origin.x = a5;
        v58.origin.y = v20;
        v58.size.width = a7;
        v58.size.height = a8;
        if (MinY < CGRectGetMinY(v58))
        {
          v59.origin.x = a1;
          v59.origin.y = a2;
          v59.size.width = v45;
          v59.size.height = v47;
          CGRectGetMinY(v59);
        }
      }
    }
  }
  else
  {
    UnitPoint.in(_:)(*(__C::CGRect *)&a1);
    CGFloat v20 = a6;
    UnitPoint.in(_:)((CGSize)__PAIR128__(*(unint64_t *)&a8, *(unint64_t *)&a7));
  }
  v62.origin.x = a5;
  CGFloat v38 = v20;
  v62.origin.y = v20;
  v62.size.width = a7;
  v62.size.height = a8;
  double v39 = a12 - CGRectGetWidth(v62);
  if (v39 > 0.0) {
    double v40 = v39;
  }
  else {
    double v40 = 0.0;
  }
  v63.origin.x = a5;
  v63.origin.y = v38;
  v63.size.width = a7;
  v63.size.height = a8;
  double v41 = a13 - CGRectGetHeight(v63);
  if (v41 > 0.0) {
    double v42 = v41;
  }
  else {
    double v42 = 0.0;
  }

  *(void *)&double result = *(_OWORD *)&CGPoint.clamp(min:max:)((CGPoint)0, (CGPoint)__PAIR128__(*(unint64_t *)&v42, *(unint64_t *)&v40));
  return result;
}

uint64_t specialized static ScrollViewUtilities.animationOffset(target:bounds:contentSize:contentInsets:layoutDirection:)(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, double a6, double a7)
{
  if (a4 == 0.0 && a5 == 0.0) {
    return 0;
  }
  if (a6 == 0.0 && a7 == 0.0) {
    return 0;
  }
  MEMORY[0x1F4188790](a1);
  type metadata accessor for ScrollTarget?();
  static Update.ensure<A>(_:)();
  if (v21) {
    return 0;
  }
  ScrollTarget.rect.getter();
  return specialized static ScrollViewUtilities.animationOffset(rect:anchor:bounds:contentSize:)(v14, v15, v16, v17, a2, a3, a4, a5, v18, v19, v20 & 1, a6, a7);
}

uint64_t partial apply for closure #1 in static ScrollViewUtilities.animationOffset(target:bounds:contentSize:contentInsets:layoutDirection:)()
{
  return closure #1 in static ScrollViewUtilities.animationOffset(target:bounds:contentSize:contentInsets:layoutDirection:)(*(uint64_t (**)(long long *, char *))(v0 + 96), *(void *)(v0 + 104), *(unsigned char *)(v0 + 112));
}

void type metadata accessor for ScrollTarget?()
{
  if (!lazy cache variable for type metadata for ScrollTarget?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ScrollTarget?);
    }
  }
}

ValueMetadata *type metadata accessor for EnvironmentValues.SafeAreaTransitionStateKey()
{
  return &type metadata for EnvironmentValues.SafeAreaTransitionStateKey;
}

uint64_t assignWithCopy for EnvironmentValues.SafeAreaTransitionStateKey.Value(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakCopyAssign();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t assignWithTake for EnvironmentValues.SafeAreaTransitionStateKey.Value(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakTakeAssign();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t getEnumTagSinglePayload for EnvironmentValues.SafeAreaTransitionStateKey.Value(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  if ((*(void *)(a1 + 8) & 0xF000000000000007) != 0) {
    int v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  }
  else {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EnvironmentValues.SafeAreaTransitionStateKey.Value(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      *(void *)(result + 8) = 1;
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentScrollViewPreferenceKey()
{
  return &type metadata for ContentScrollViewPreferenceKey;
}

uint64_t protocol witness for Rule.value.getter in conformance PlatformItemEnabledModifier.PlatformItemListTransform@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  char v2 = *(unsigned char *)AGGraphGetValue();
  uint64_t v3 = swift_allocObject();
  *(unsigned char *)(v3 + 16) = v2;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = partial apply for closure #1 in PlatformItemEnabledModifier.PlatformItemListTransform.value.getter;
  *(void *)(result + 24) = v3;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance PlatformItemEnabledModifier()
{
}

_UNKNOWN **base witness table accessor for ViewModifier in PlatformItemEnabledModifier()
{
  return &protocol witness table for PlatformItemEnabledModifier;
}

uint64_t sub_187734014()
{
  return swift_deallocObject();
}

uint64_t sub_187734024()
{
  swift_release();

  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for PlatformItemEnabledModifier.PlatformItemListTransform()
{
  return &type metadata for PlatformItemEnabledModifier.PlatformItemListTransform;
}

uint64_t EnvironmentValues.isToggleOn.setter()
{
  type metadata accessor for EnvironmentPropertyKey<DefaultToggleIsOnKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultToggleIsOnKey>, (uint64_t)&unk_1ED430608, (uint64_t)&protocol witness table for DefaultToggleIsOnKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultToggleIsOnKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t ButtonToggleStyle.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  return result;
}

uint64_t ButtonToggleStyle.makeBody(configuration:)@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>();
  uint64_t v5 = v4 - 8;
  MEMORY[0x1F4188790](v4);
  char v7 = (_WORD *)((char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier>>(0, &lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, (void (*)(uint64_t))type metadata accessor for Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool?>);
  uint64_t v9 = v8 - 8;
  MEMORY[0x1F4188790](v8);
  char v11 = (char *)&v28 - v10;
  type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>>();
  MEMORY[0x1F4188790](v12 - 8);
  CGFloat v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v15 = a1[3];
  long long v33 = a1[2];
  long long v34 = v15;
  long long v16 = a1[5];
  long long v35 = a1[4];
  long long v36 = v16;
  long long v17 = a1[1];
  long long v31 = *a1;
  long long v32 = v17;
  uint64_t v18 = (_OWORD *)swift_allocObject();
  long long v19 = a1[3];
  v18[3] = a1[2];
  void v18[4] = v19;
  long long v20 = a1[5];
  v18[5] = a1[4];
  v18[6] = v20;
  long long v21 = a1[1];
  v18[1] = *a1;
  char v18[2] = v21;
  *char v7 = 256;
  uint64_t v22 = (void *)((char *)v7 + *(int *)(v5 + 44));
  void *v22 = partial apply for toggleState #1 () in ButtonToggleStyle.makeBody(configuration:);
  v22[1] = v18;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  double v23 = (char *)v7 + *(int *)(v5 + 48);
  *(void *)double v23 = swift_getKeyPath();
  v23[8] = 2;
  uint64_t KeyPath = swift_getKeyPath();
  long long v28 = v31;
  char v29 = v32;
  outlined retain of ToggleStyleConfiguration(&v31);
  type metadata accessor for Bool?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v30);
  char v25 = v30;
  outlined init with copy of Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>((uint64_t)v7, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>);
  CGFloat v26 = &v11[*(int *)(v9 + 44)];
  *(void *)CGFloat v26 = KeyPath;
  v26[8] = v25;
  outlined destroy of Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>);
  outlined init with copy of ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>((uint64_t)v11, (uint64_t)v14);
  outlined destroy of ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>((uint64_t)v11);
  outlined init with copy of Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>((uint64_t)v14, a2, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>>);
  return outlined destroy of Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>>);
}

void *toggleState #1 () in ButtonToggleStyle.makeBody(configuration:)(void *a1)
{
  outlined retain of ToggleStyleConfiguration(a1);
  type metadata accessor for Bool?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4F41638]);
  uint64_t v3 = v2;
  swift_retain();
  swift_retain();
  MEMORY[0x18C113DA0](&v5, v3);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  return outlined release of ToggleStyleConfiguration(a1);
}

uint64_t protocol witness for ToggleStyle.makeBody(configuration:) in conformance ButtonToggleStyle@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  return ButtonToggleStyle.makeBody(configuration:)(a1, a2);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsToggleButton()
{
  lazy protocol witness table accessor for type IsToggleButton and conformance IsToggleButton();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsToggleButton()
{
  return PropertyList.subscript.setter();
}

void type metadata accessor for Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>()
{
  if (!lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>> and conformance <> ModifiedContent<A, B>);
    unint64_t v0 = type metadata accessor for Button();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>)
  {
    type metadata accessor for ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>();
    type metadata accessor for FalseViewInputBoolFlagModifier<IsToggleButton>(255, &lazy cache variable for type metadata for FalseViewInputBoolFlagModifier<IsToggleButton>, (uint64_t (*)(void))lazy protocol witness table accessor for type IsToggleButton and conformance IsToggleButton, (uint64_t)&type metadata for IsToggleButton, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FalseViewInputBoolFlagModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool?>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>();
    lazy protocol witness table accessor for type Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>> and conformance Button<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool?> and conformance _EnvironmentKeyWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>> and conformance Button<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, (void (*)(uint64_t))type metadata accessor for Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool?>);
    type metadata accessor for FalseViewInputBoolFlagModifier<IsToggleButton>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<IsToggleButton>, (uint64_t (*)(void))lazy protocol witness table accessor for type IsToggleButton and conformance IsToggleButton, (uint64_t)&type metadata for IsToggleButton, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>>);
    }
  }
}

uint64_t sub_187734A64()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (*(void *)(v0 + 88))
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(v0 + 64), *(void *)(v0 + 72), *(unsigned char *)(v0 + 80));

    swift_release();
  }

  return swift_deallocObject();
}

void *partial apply for toggleState #1 () in ButtonToggleStyle.makeBody(configuration:)()
{
  return toggleState #1 () in ButtonToggleStyle.makeBody(configuration:)((void *)(v0 + 16));
}

void type metadata accessor for Bool?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, MEMORY[0x1E4FBB390]);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t outlined init with copy of ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier>>(0, &lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, (void (*)(uint64_t))type metadata accessor for Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier>>(0, &lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, (void (*)(uint64_t))type metadata accessor for Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t associated type witness table accessor for ToggleStyle.Body : View in ButtonToggleStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *assignWithCopy for ButtonToggleStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unsigned __int8 v5 = *((unsigned char *)a2 + 8);
  outlined copy of Environment<Color?>.Content(*a2, v5);
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((unsigned char *)a1 + 8) = v5;
  outlined consume of Environment<Color?>.Content(v6, v7);
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t *assignWithTake for ButtonToggleStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((unsigned char *)a1 + 8) = v5;
  outlined consume of Environment<Color?>.Content(v6, v7);
  a1[2] = a2[2];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ButtonToggleStyle(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ButtonToggleStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<DefaultToggleIsOnKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<WidgetInterfaceIdiom>, MEMORY[0x1E4F406E0], MEMORY[0x1E4F406D8], MEMORY[0x1E4F40C60]);
    type metadata accessor for StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>();
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<WidgetInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>)
  {
    type metadata accessor for FalseViewInputBoolFlagModifier<IsToggleButton>(255, &lazy cache variable for type metadata for ButtonStylePredicate<DefaultButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultButtonStyle and conformance DefaultButtonStyle, (uint64_t)&type metadata for DefaultButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStylePredicate);
    type metadata accessor for ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>();
    lazy protocol witness table accessor for type ButtonStylePredicate<DefaultButtonStyle> and conformance ButtonStylePredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>);
    }
  }
}

void type metadata accessor for ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>()
{
  if (!lazy cache variable for type metadata for ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>)
  {
    type metadata accessor for FalseViewInputBoolFlagModifier<IsToggleButton>(255, &lazy cache variable for type metadata for WrappedButtonStyle<WidgetBorderedProminentButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetBorderedProminentButtonStyle and conformance WidgetBorderedProminentButtonStyle, (uint64_t)&type metadata for WidgetBorderedProminentButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for WrappedButtonStyle);
    lazy protocol witness table accessor for type WrappedButtonStyle<WidgetBorderedProminentButtonStyle> and conformance WrappedButtonStyle<A>();
    unint64_t v0 = type metadata accessor for ButtonStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>);
    }
  }
}

void type metadata accessor for FalseViewInputBoolFlagModifier<IsToggleButton>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type WrappedButtonStyle<WidgetBorderedProminentButtonStyle> and conformance WrappedButtonStyle<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type WrappedButtonStyle<WidgetBorderedProminentButtonStyle> and conformance WrappedButtonStyle<A>;
  if (!lazy protocol witness table cache variable for type WrappedButtonStyle<WidgetBorderedProminentButtonStyle> and conformance WrappedButtonStyle<A>)
  {
    type metadata accessor for FalseViewInputBoolFlagModifier<IsToggleButton>(255, &lazy cache variable for type metadata for WrappedButtonStyle<WidgetBorderedProminentButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetBorderedProminentButtonStyle and conformance WidgetBorderedProminentButtonStyle, (uint64_t)&type metadata for WidgetBorderedProminentButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for WrappedButtonStyle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WrappedButtonStyle<WidgetBorderedProminentButtonStyle> and conformance WrappedButtonStyle<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonStylePredicate<DefaultButtonStyle> and conformance ButtonStylePredicate<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonStylePredicate<DefaultButtonStyle> and conformance ButtonStylePredicate<A>;
  if (!lazy protocol witness table cache variable for type ButtonStylePredicate<DefaultButtonStyle> and conformance ButtonStylePredicate<A>)
  {
    type metadata accessor for FalseViewInputBoolFlagModifier<IsToggleButton>(255, &lazy cache variable for type metadata for ButtonStylePredicate<DefaultButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultButtonStyle and conformance DefaultButtonStyle, (uint64_t)&type metadata for DefaultButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStylePredicate);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStylePredicate<DefaultButtonStyle> and conformance ButtonStylePredicate<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, (void (*)(uint64_t))type metadata accessor for Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool?>);
    lazy protocol witness table accessor for type Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>> and conformance Button<A>(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>> and conformance Button<A>, (void (*)(uint64_t))type metadata accessor for Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>);
    lazy protocol witness table accessor for type Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>> and conformance Button<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool?> and conformance _EnvironmentKeyWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier>();
    lazy protocol witness table accessor for type StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

ValueMetadata *type metadata accessor for IsToggleButton()
{
  return &type metadata for IsToggleButton;
}

void *type metadata accessor for DefaultToggleIsOnKey()
{
  return &unk_1ED430608;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in IsToggleButton()
{
  return &protocol witness table for IsToggleButton;
}

uint64_t type metadata accessor for LazyPlatformItemInputWriter()
{
  return swift_getGenericMetadata();
}

_UNKNOWN **base witness table accessor for ViewModifier in LazyPlatformItemInputWriter<A, B>()
{
  return &protocol witness table for LazyPlatformItemInputWriter<A, B>;
}

unsigned char *LazyPlatformItemWriter.UpdateEnvironment.value.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X4>, void *a3@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v7 = *Value;
  uint64_t v8 = Value[1];
  uint64_t v12 = *Value;
  uint64_t v13 = v8;
  swift_retain();
  swift_retain();
  unint64_t result = (unsigned char *)AGGraphGetValue();
  if (*result == 1)
  {
    uint64_t v10 = AGCreateWeakAttribute();
    char v11 = 0;
    unint64_t result = (unsigned char *)specialized EnvironmentValues.subscript.setter(&v10, a1, a1, a2);
    uint64_t v7 = v12;
    uint64_t v8 = v13;
  }
  *a3 = v7;
  a3[1] = v8;
  return result;
}

double protocol witness for static Rule.initialValue.getter in conformance LazyPlatformItemWriter<A, B>.UpdateEnvironment@<D0>(_OWORD *a1@<X8>)
{
  *(void *)&double result = 1;
  *a1 = xmmword_18834FC50;
  return result;
}

unsigned char *protocol witness for Rule.value.getter in conformance LazyPlatformItemWriter<A, B>.UpdateEnvironment@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return LazyPlatformItemWriter.UpdateEnvironment.value.getter(*(void *)(a1 + 16), *(void *)(a1 + 32), a2);
}

uint64_t static LazyPlatformItemInputWriter._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, ValueMetadata **)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v85 = a4;
  long long v86 = a3;
  uint64_t v84 = a9;
  uint64_t v122 = *MEMORY[0x1E4F143B8];
  int v13 = *a1;
  CGFloat v14 = *(ValueMetadata **)a2;
  int v15 = *(_DWORD *)(a2 + 8);
  long long v16 = *(_UNKNOWN ***)(a2 + 16);
  unsigned int v17 = *(_DWORD *)(a2 + 24);
  unsigned int v18 = *(_DWORD *)(a2 + 28);
  unsigned int v19 = *(_DWORD *)(a2 + 32);
  unsigned int v20 = *(_DWORD *)(a2 + 36);
  uint64_t v22 = *(void *)(a2 + 40);
  uint64_t v21 = *(void *)(a2 + 48);
  unsigned int v23 = *(_DWORD *)(a2 + 56);
  unsigned int v24 = *(_DWORD *)(a2 + 60);
  unsigned int v25 = *(_DWORD *)(a2 + 64);
  unsigned int v26 = *(_DWORD *)(a2 + 68);
  unsigned int v28 = *(_DWORD *)(a2 + 72);
  unsigned int v27 = *(_DWORD *)(a2 + 76);
  int v29 = *(_DWORD *)(a2 + 80);
  uint64_t v113 = v14;
  unsigned int v78 = v17;
  int v79 = v15;
  int v114 = v15;
  uint64_t v115 = v16;
  *(void *)&long long v116 = __PAIR64__(v18, v17);
  unsigned int v76 = v19;
  unsigned int v77 = v18;
  *((void *)&v116 + 1) = __PAIR64__(v20, v19);
  unsigned int v74 = v23;
  unsigned int v75 = v20;
  uint64_t v117 = v22;
  uint64_t v118 = v21;
  *(void *)&long long v119 = __PAIR64__(v24, v23);
  unsigned int v72 = v25;
  unsigned int v73 = v24;
  *((void *)&v119 + 1) = __PAIR64__(v26, v25);
  unsigned int v70 = v28;
  unsigned int v71 = v26;
  unint64_t v120 = __PAIR64__(v27, v28);
  int v68 = v29;
  unsigned int v69 = v27;
  int v121 = v29;
  uint64_t v83 = v14;
  swift_retain();
  long long v82 = v16;
  swift_retain();
  uint64_t v80 = v22;
  swift_bridgeObjectRetain();
  uint64_t v81 = v21;
  swift_bridgeObjectRetain();
  specialized _ViewInputs.addPlatformItemListKey<A>(flags:editOperation:)(2u);
  LODWORD(v67) = v13;
  LODWORD(v92) = v13;
  uint64_t v101 = (ValueMetadata *)a5;
  uint64_t v102 = a6;
  uint64_t v103 = (_UNKNOWN **)a7;
  *(void *)&long long v104 = a8;
  uint64_t v30 = a8;
  type metadata accessor for LazyPlatformItemInputWriter();
  uint64_t v64 = type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  uint64_t v31 = *(void *)(*(void *)(a6 - 8) + 64);
  long long v89 = (_UNKNOWN **)a7;
  long long v90 = (ValueMetadata *)a5;
  if (v31) {
    closure #1 in static LazyPlatformItemWriter._makeView(modifier:inputs:body:)(1, a5, a6, a7, a8, (uint64_t (*)(void, void *))type metadata accessor for LazyPlatformItemInputWriter, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
  }
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  long long v92 = v113;
  LODWORD(v93) = v114;
  uint64_t v94 = v115;
  long long v95 = v116;
  uint64_t v96 = v117;
  uint64_t v97 = v118;
  long long v98 = v119;
  unint64_t v99 = v120;
  int v100 = v121;
  PlatformItemListGenerator.init(flags:content:inputs:inputsIncludeGeometry:)(OffsetAttribute2, (uint64_t *)&v92, 1, (uint64_t)&v101);
  CGRect v57 = v101;
  int v33 = v102;
  long long v34 = v103;
  int v56 = v104;
  uint64_t v35 = *((void *)&v104 + 1);
  uint64_t v87 = *((void *)&v107 + 1);
  uint64_t v88 = v107;
  int v59 = v111;
  int v60 = v110;
  int v58 = v112;
  uint64_t v36 = v105;
  uint64_t v37 = v106;
  long long v55 = v108;
  uint64_t v38 = v109;
  LODWORD(v101) = v67;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphValue.value.getter();
  uint64_t v62 = a6;
  uint64_t v63 = v30;
  closure #2 in static LazyPlatformItemWriter._makeView(modifier:inputs:body:)(1, (uint64_t)v90, a6, (uint64_t)v89, v30, (uint64_t (*)(void, void *))type metadata accessor for LazyPlatformItemInputWriter, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_0);
  uint64_t v39 = AGGraphCreateOffsetAttribute2();
  LODWORD(v64) = v39;
  CGRect v61 = &v55;
  LODWORD(v102) = v33;
  double v40 = v57;
  uint64_t v101 = v57;
  uint64_t v65 = v35;
  char v66 = v34;
  uint64_t v103 = v34;
  LODWORD(v104) = v56;
  *((void *)&v104 + 1) = v35;
  uint64_t v105 = v36;
  uint64_t v106 = v37;
  *(void *)&long long v107 = v88;
  *((void *)&v107 + 1) = v87;
  long long v108 = v55;
  uint64_t v109 = v38;
  int v110 = v60;
  unsigned __int8 v111 = v59;
  int v112 = v58;
  MEMORY[0x1F4188790](v39);
  long long v92 = &type metadata for ActionPlatformItemListFlags;
  uint64_t v93 = a6;
  uint64_t v94 = &protocol witness table for ActionPlatformItemListFlags;
  *(void *)&long long v95 = v30;
  uint64_t v53 = type metadata accessor for PlatformItemListGenerator();
  uint64_t WitnessTable = swift_getWitnessTable();
  _s14AttributeGraph0A0Vy7SwiftUI16PlatformItemListVGMaTm_0(0, &lazy cache variable for type metadata for Attribute<PlatformItemList>, (uint64_t)&type metadata for PlatformItemList, MEMORY[0x1E4F4E740]);
  uint64_t v42 = v41;
  uint64_t v67 = v40;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v101, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v52, v53, MEMORY[0x1E4FBC248], v42, MEMORY[0x1E4FBC278], v43);
  uint64_t v44 = v101;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  uint64_t v45 = swift_release();
  CGRect v61 = (long long *)v52;
  LODWORD(v102) = v79;
  uint64_t v101 = v83;
  uint64_t v103 = v82;
  *(void *)&long long v104 = __PAIR64__(v77, v78);
  *((void *)&v104 + 1) = __PAIR64__(v75, v76);
  uint64_t v105 = v80;
  uint64_t v106 = v81;
  *(void *)&long long v107 = __PAIR64__(v73, v74);
  *((void *)&v107 + 1) = __PAIR64__(v71, v72);
  *(void *)&long long v108 = __PAIR64__(v69, v70);
  DWORD2(v108) = v68;
  v91[0] = v92;
  v91[1] = v64;
  MEMORY[0x1F4188790](v45);
  long long v92 = v90;
  uint64_t v93 = v62;
  uint64_t v94 = v89;
  *(void *)&long long v95 = v63;
  uint64_t updated = type metadata accessor for LazyPlatformItemInputWriter.UpdateItemList();
  *(void *)&v52[-16] = updated;
  *(void *)&v52[-8] = swift_getWitnessTable();
  type metadata accessor for Attribute<PlatformItemCollection?>();
  uint64_t v48 = v47;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v91, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, (uint64_t)&v52[-32], updated, MEMORY[0x1E4FBC248], v48, MEMORY[0x1E4FBC278], v49);
  long long v92 = (ValueMetadata *)AGCreateWeakAttribute();
  specialized _GraphInputs.subscript.setter((uint64_t)&v92);
  long long v92 = v101;
  LODWORD(v93) = v102;
  uint64_t v94 = v103;
  long long v95 = v104;
  uint64_t v96 = v105;
  uint64_t v97 = v106;
  long long v98 = v107;
  unint64_t v99 = v108;
  int v100 = DWORD2(v108);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v50 = swift_bridgeObjectRetain();
  v86(v50, &v92);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in static LazyPlatformItemWriter._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, void *), uint64_t a7)
{
  v16[0] = a2;
  v16[1] = a3;
  void v16[2] = a4;
  void v16[3] = a5;
  uint64_t v10 = a6(0, v16);
  uint64_t v11 = a1 + *(int *)(v10 + 56);
  void v15[2] = v10;
  v15[3] = a3;
  uint64_t v12 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v11, a7, (uint64_t)v15, a3, MEMORY[0x1E4FBC248], v12, MEMORY[0x1E4FBC278], v13);
  return v16[0];
}

uint64_t closure #2 in static LazyPlatformItemWriter._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, void *), uint64_t a7)
{
  v14[0] = a2;
  v14[1] = a3;
  v14[2] = a4;
  v14[3] = a5;
  void v13[2] = a6(0, v14);
  uint64_t v9 = MEMORY[0x1E4FBB390];
  uint64_t v10 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a7, (uint64_t)v13, v9, MEMORY[0x1E4FBC248], v10, MEMORY[0x1E4FBC278], v11);
  return v14[0];
}

uint64_t LazyPlatformItemInputWriter.UpdateItemList.value.getter()
{
  if (*(unsigned char *)AGGraphGetValue() == 1) {
    return AGCreateWeakAttribute();
  }
  else {
    return 0;
  }
}

uint64_t LazyPlatformItemInputWriter.init(isWriting:input:source:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  *(unsigned char *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  uint64_t v5 = type metadata accessor for LazyPlatformItemInputWriter();
  return a3(v5, v6, v7, v8);
}

void protocol witness for static Rule.initialValue.getter in conformance LazyPlatformItemInputWriter<A, B>.UpdateItemList(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = -2;
}

uint64_t protocol witness for Rule.value.getter in conformance LazyPlatformItemInputWriter<A, B>.UpdateItemList@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = LazyPlatformItemInputWriter.UpdateItemList.value.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance LazyPlatformItemInputWriter<A, B>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, ValueMetadata **)@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  return static LazyPlatformItemInputWriter._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5[2], a5[3], a5[4], a5[5], a6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance LazyPlatformItemInputWriter<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t type metadata accessor for LazyPlatformItemInputWriter.UpdateItemList()
{
  return swift_getGenericMetadata();
}

void type metadata accessor for Attribute<PlatformItemCollection?>()
{
  if (!lazy cache variable for type metadata for Attribute<PlatformItemCollection?>)
  {
    _s14AttributeGraph0A0Vy7SwiftUI16PlatformItemListVGMaTm_0(255, &lazy cache variable for type metadata for PlatformItemCollection?, (uint64_t)&type metadata for PlatformItemCollection, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<PlatformItemCollection?>);
    }
  }
}

uint64_t specialized _GraphInputs.subscript.setter(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v3 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, double))(v5 + 16))((char *)&v7 - v4, a1, v3);
  return PropertyList.subscript.setter();
}

uint64_t specialized _ViewInputs.subscript.setter(uint64_t a1)
{
  return specialized _GraphInputs.subscript.setter(a1);
}

uint64_t base witness table accessor for _AttributeBody in LazyPlatformItemInputWriter<A, B>.UpdateItemList()
{
  return swift_getWitnessTable();
}

uint64_t type metadata completion function for LazyPlatformItemInputWriter()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for LazyPlatformItemInputWriter(unint64_t a1, unint64_t a2, uint64_t a3)
{
  double v3 = (void *)a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 16) & (unint64_t)~v5) + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) > 0x18)
  {
    uint64_t v8 = *(void *)a2;
    *double v3 = *(void *)a2;
    double v3 = (void *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((a1 & 0xFFFFFFFFFFFFFFF8) + v5 + 16) & ~v5, ((a2 & 0xFFFFFFFFFFFFFFF8) + v5 + 16) & ~v5);
  }
  return v3;
}

uint64_t destroy for LazyPlatformItemInputWriter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 8))(((a1 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80));
}

unint64_t initializeWithCopy for LazyPlatformItemInputWriter(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))((*(unsigned __int8 *)(v4 + 80) + 16 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 16 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

unint64_t assignWithCopy for LazyPlatformItemInputWriter(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))((*(unsigned __int8 *)(v4 + 80) + 16 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 16 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

unint64_t initializeWithTake for LazyPlatformItemInputWriter(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))((*(unsigned __int8 *)(v4 + 80) + 16 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 16 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

unint64_t assignWithTake for LazyPlatformItemInputWriter(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))((*(unsigned __int8 *)(v4 + 80) + 16 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 16 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for LazyPlatformItemInputWriter(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)(a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      unint64_t v15 = a1 & 0xFFFFFFFFFFFFFFF8;
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((v15 + v6 + 16) & ~v6);
      }
      unint64_t v16 = *(void *)(v15 + 8);
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      return (v16 + 1);
    }
  }
  int v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(unsigned char *)(a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *(unsigned __int16 *)a1;
        break;
      case 3:
        LODWORD(v9) = *(unsigned __int16 *)a1 | (*(unsigned __int8 *)(a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for LazyPlatformItemInputWriter(unint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 16) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero((void *)a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          *(unsigned char *)(a1 + 2) = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *(unsigned char *)a1 = v17;
        }
      }
    }
    else
    {
      bzero((void *)a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        *(unsigned char *)(a1 + v10) = v15;
        return;
      case 2:
        *(_WORD *)(a1 + v10) = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)(a1 + v10) = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      *(unsigned char *)(a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)(a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x187736C04);
    case 4:
      *(_DWORD *)(a1 + v10) = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        unint64_t v18 = a1 & 0xFFFFFFFFFFFFFFF8;
        if ((v7 & 0x80000000) != 0)
        {
          unsigned int v20 = *(void (**)(unint64_t))(v6 + 56);
          v20((v18 + v9 + 16) & ~v9);
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v19 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v19 = a2 - 1;
          }
          *(void *)(v18 + 8) = v19;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for LazyPlatformItemWriter.UpdateEnvironment()
{
  return swift_getGenericMetadata();
}

uint64_t getEnumTagSinglePayload for LazyPlatformItemWriter.UpdateEnvironment(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for LazyPlatformItemWriter.UpdateEnvironment(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 12) = v3;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in LazyPlatformItemWriter<A, B>.UpdateEnvironment()
{
  return swift_getWitnessTable();
}

uint64_t View.presentationTransitionStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(a5 + 8))(v9, a3, a5);
  outlined init with copy of _PresentationTransitionOutputs.Content(v9, (uint64_t)&v6);
  if (*((void *)&v7 + 1))
  {
    *(_OWORD *)((char *)v10 + 8) = v6;
    *(_OWORD *)((char *)&v10[1] + 8) = v7;
    *((void *)&v10[2] + 1) = v8;
    if (one-time initialization token for _sharedNamespaceID != -1) {
      swift_once();
    }
    *(void *)&v10[0] = static _PresentationTransitionCompatibility._sharedNamespaceID;
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  outlined destroy of _PresentationTransitionOutputs((uint64_t)v9);
  View.preference<A>(key:value:)();
  return outlined destroy of _NavigationTransitionOutputs?((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for _NavigationTransitionOutputs?);
}

uint64_t outlined init with copy of _PresentationTransitionOutputs.Content(long long *a1, uint64_t a2)
{
  unint64_t v3 = *((void *)a1 + 3);
  if (v3 < 0xFFFFFFFF)
  {
    long long v5 = *a1;
    long long v6 = a1[1];
    *(void *)(a2 + 32) = *((void *)a1 + 4);
    *(_OWORD *)a2 = v5;
    *(_OWORD *)(a2 + 16) = v6;
  }
  else
  {
    uint64_t v4 = *((void *)a1 + 4);
    *(void *)(a2 + 24) = v3;
    *(void *)(a2 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a2);
  }
  return a2;
}

double AutomaticPresentationTransitionStyle._makePresentationTransition()@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t ZoomPresentationTransitionStyle._makePresentationTransition()@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AnyHashable(v1, a1);
}

uint64_t protocol witness for PresentationTransitionStyle._makePresentationTransition() in conformance ZoomPresentationTransitionStyle@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AnyHashable(v1, a1);
}

uint64_t dispatch thunk of PresentationTransitionStyle._makePresentationTransition()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t assignWithCopy for _PresentationTransitionOutputs(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  if (*(void *)(a1 + 24))
  {
    if (v4)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
    }
    else
    {
      outlined destroy of _NavigationTransitionOutputs?(a1, (uint64_t (*)(void))type metadata accessor for (sourceID: AnyHashable));
      uint64_t v5 = *((void *)a2 + 4);
      long long v6 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(void *)(a1 + 32) = v5;
    }
  }
  else if (v4)
  {
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
  }
  else
  {
    long long v7 = *a2;
    long long v8 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v7;
    *(_OWORD *)(a1 + 16) = v8;
  }
  return a1;
}

uint64_t type metadata accessor for (sourceID: AnyHashable)()
{
  uint64_t result = lazy cache variable for type metadata for (sourceID: AnyHashable);
  if (!lazy cache variable for type metadata for (sourceID: AnyHashable))
  {
    uint64_t result = MEMORY[0x1E4FBB960];
    atomic_store(MEMORY[0x1E4FBB960], (unint64_t *)&lazy cache variable for type metadata for (sourceID: AnyHashable));
  }
  return result;
}

uint64_t assignWithTake for _PresentationTransitionOutputs(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    if (*(void *)(a2 + 24)) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    else {
      outlined destroy of _NavigationTransitionOutputs?(a1, (uint64_t (*)(void))type metadata accessor for (sourceID: AnyHashable));
    }
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for _PresentationTransitionOutputs(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _PresentationTransitionOutputs(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _PresentationTransitionOutputs()
{
  return &type metadata for _PresentationTransitionOutputs;
}

ValueMetadata *type metadata accessor for AutomaticPresentationTransitionStyle()
{
  return &type metadata for AutomaticPresentationTransitionStyle;
}

uint64_t initializeWithCopy for ZoomPresentationTransitionStyle(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for ZoomPresentationTransitionStyle(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

uint64_t assignWithTake for ZoomPresentationTransitionStyle(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ZoomPresentationTransitionStyle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ZoomPresentationTransitionStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ZoomPresentationTransitionStyle()
{
  return &type metadata for ZoomPresentationTransitionStyle;
}

uint64_t sub_187737240()
{
  return swift_getWitnessTable();
}

uint64_t assignWithCopy for _PresentationTransitionOutputs.Content(uint64_t a1, long long *a2)
{
  unint64_t v4 = *((void *)a2 + 3);
  if (*(void *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    long long v5 = *a2;
    long long v6 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for _PresentationTransitionOutputs.Content(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _PresentationTransitionOutputs.Content(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

double destructiveInjectEnumTag for _PresentationTransitionOutputs.Content(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(void *)(a1 + 24) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for _PresentationTransitionOutputs.Content()
{
  return &type metadata for _PresentationTransitionOutputs.Content;
}

ValueMetadata *type metadata accessor for WidgetLinkButtonStyle()
{
  return &type metadata for WidgetLinkButtonStyle;
}

uint64_t associated type witness table accessor for ButtonStyle.Body : View in WidgetLinkButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for ButtonStyle.makeBody(configuration:) in conformance WidgetLinkButtonStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *(unsigned char *)(a1 + 2);
  uint64_t result = swift_getKeyPath();
  *(unsigned char *)a2 = v3;
  *(void *)(a2 + 8) = result;
  *(_WORD *)(a2 + 16) = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>();
    lazy protocol witness table accessor for type ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>)
  {
    type metadata accessor for ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>();
    type metadata accessor for _ContentShapeModifier<Rectangle>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>);
    }
  }
}

void type metadata accessor for _ContentShapeModifier<Rectangle>()
{
  if (!lazy cache variable for type metadata for _ContentShapeModifier<Rectangle>)
  {
    lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    unint64_t v0 = type metadata accessor for _ContentShapeModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContentShapeModifier<Rectangle>);
    }
  }
}

Swift::Void __swiftcall UIHostingKeyboardTrackingElement.keyboardIsChanging(_:)(CGSize a1)
{
  double height = a1.height;
  double width = a1.width;
  unint64_t v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI32UIHostingKeyboardTrackingElement_elements);
  swift_beginAccess();
  uint64_t v5 = *v4;
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v7 = v5 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of EnvironmentValues.SafeAreaTransitionStateKey.Value(v7, (uint64_t)v10);
      if (MEMORY[0x18C119DF0](v10))
      {
        uint64_t v8 = v11;
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, double, double))(v8 + 8))(ObjectType, v8, width, height);
        swift_unknownObjectRelease();
      }
      outlined destroy of weak FallbackResponderProvider?((uint64_t)v10);
      v7 += 16;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall UIHostingKeyboardTrackingElement.keyboardIsChanging(_:)(UIOffset a1)
{
  double vertical = a1.vertical;
  double horizontal = a1.horizontal;
  unint64_t v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI32UIHostingKeyboardTrackingElement_elements);
  swift_beginAccess();
  uint64_t v5 = *v4;
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v7 = v5 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of EnvironmentValues.SafeAreaTransitionStateKey.Value(v7, (uint64_t)v11);
      uint64_t v8 = MEMORY[0x18C119DF0](v11);
      uint64_t v9 = v12;
      outlined destroy of weak FallbackResponderProvider?((uint64_t)v11);
      if (v8)
      {
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, double, double))(v9 + 16))(ObjectType, v9, horizontal, vertical);
        swift_unknownObjectRelease();
      }
      v7 += 16;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
}

id UIHostingKeyboardTrackingElement.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UIHostingKeyboardTrackingElement();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

Swift::Void __swiftcall _UIHostingView.keyboardIsChanging(size:)(CGSize size)
{
  objc_super v2 = v1;
  double height = size.height;
  double width = size.width;
  uint64_t v5 = (void *)MEMORY[0x1E4FBC8C8];
  lazy protocol witness table accessor for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement();
  if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) != 0
    && (_UIHostingView.shouldUpdateKeyboardSafeArea.getter() & 1) != 0)
  {
    id v6 = objc_msgSend(v1, sel_window);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)((*v5 & *v1) + 0xA0);
      int v9 = *(_DWORD *)((char *)v1 + v8) + 1;
      *(_DWORD *)((char *)v1 + v8) = v9;
      objc_msgSend(v6, sel_bounds);
      CGFloat v11 = v10;
      CGFloat v13 = v12;
      CGFloat v15 = v14;
      CGFloat v17 = v16;
      id v18 = objc_msgSend(v7, sel_screen);
      objc_msgSend(v18, sel_scale);

      v24.double width = width;
      v24.double height = height;
      v28.origin.x = v11;
      v28.origin.y = v13;
      v28.size.double width = v15;
      v28.size.double height = v17;
      double MaxX = CGRectGetMaxX(v28);
      v29.origin.x = v11;
      v29.origin.y = v13;
      v29.size.double width = v15;
      v29.size.double height = v17;
      v23.x = MaxX - width;
      v23.y = CGRectGetMaxY(v29) - height;
      CGRect.roundCoordinatesToNearestOrUp(toMultipleOf:)();
      _.value.CGPoint origin = v23;
      _.value.CGSize size = v24;
      _.is_nil = 0;
      v27.value.super.isa = 0;
      v27.is_nil = v9;
      if (_UIHostingView.setKeyboardFrame(_:screen:seed:)(&_, v27, v20))
      {
        uint64_t v21 = type metadata accessor for _UIHostingView();
        uint64_t WitnessTable = swift_getWitnessTable();
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(WitnessTable + 80))(&v26, v21, WitnessTable);
        if (!(_BYTE)v26) {
          objc_msgSend(v2, sel_layoutIfNeeded);
        }
      }
    }
  }
}

uint64_t _UIHostingView.shouldUpdateKeyboardSafeArea.getter()
{
  if ((_UIHostingView.safeAreaRegions.getter() & 2) != 0) {
    _UIHostingView.viewController.getter();
  }
  return 0;
}

Swift::Bool __swiftcall _UIHostingView.setKeyboardFrame(_:screen:seed:)(__C::CGRect_optional *_, UIScreen_optional screen, Swift::UInt32 seed)
{
  int v4 = *(_DWORD *)&screen.is_nil;
  Class isa = screen.value.super.isa;
  uint64_t v7 = (void *)MEMORY[0x1E4FBC8C8];
  outlined init with take of CGRect?((uint64_t)_, (uint64_t)v26);
  CGFloat v8 = *(double *)v26;
  CGFloat v9 = *(double *)&v26[1];
  CGFloat v10 = *(double *)&v26[2];
  CGFloat v11 = *(double *)&v26[3];
  if (*(_DWORD *)((char *)v3 + *(void *)((*v7 & *v3) + 0xA0)) != v4) {
    return 0;
  }
  uint64_t v12 = (uint64_t)v3 + *(void *)((*v7 & *v3) + 0x98);
  CGFloat v13 = *(double *)v12;
  CGFloat v14 = *(double *)(v12 + 8);
  CGFloat v15 = *(double *)(v12 + 16);
  CGFloat v16 = *(double *)(v12 + 24);
  char v17 = *(unsigned char *)(v12 + 32);
  outlined init with take of CGRect?((uint64_t)_, (uint64_t)v33);
  if (v33[32])
  {
    if (v17) {
      return 0;
    }
  }
  else if ((v17 & 1) == 0)
  {
    v34.origin.x = v8;
    v34.origin.y = v9;
    v34.size.double width = v10;
    v34.size.double height = v11;
    v35.origin.x = v13;
    v35.origin.y = v14;
    v35.size.double width = v15;
    v35.size.double height = v16;
    if (CGRectEqualToRect(v34, v35)) {
      return 0;
    }
  }
  double v18 = *(double *)(v12 + 8);
  double v19 = *(double *)(v12 + 24);
  int v20 = *(unsigned __int8 *)(v12 + 32);
  outlined init with take of CGRect?((uint64_t)_, v12);
  uint64_t v21 = *(void *)((*v7 & *v3) + 0xA8);
  uint64_t v22 = *(void **)((char *)v3 + v21);
  *(void *)((char *)v3 + v21) = isa;
  CGPoint v23 = isa;

  if (v20) {
    double v19 = 0.0;
  }
  outlined init with take of CGRect?((uint64_t)_, (uint64_t)v30);
  if (v32)
  {
    if (v19 != 0.0) {
      goto LABEL_20;
    }
  }
  else if (v19 != v31)
  {
    goto LABEL_20;
  }
  if (v20) {
    double v18 = 0.0;
  }
  outlined init with take of CGRect?((uint64_t)_, (uint64_t)v27);
  if ((v29 & 1) == 0)
  {
    if (v18 == v28) {
      return 0;
    }
LABEL_20:
    Swift::Bool v24 = 1;
    *((unsigned char *)_UIHostingView.base.getter() + 219) = 1;
    swift_release();
    type metadata accessor for _UIHostingView();
    swift_getWitnessTable();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    return v24;
  }
  if (v18 != 0.0) {
    goto LABEL_20;
  }
  return 0;
}

ValueMetadata *type metadata accessor for UIHostingKeyboardTrackingElement.Element()
{
  return &type metadata for UIHostingKeyboardTrackingElement.Element;
}

uint64_t _UIHostingView.shouldAddKeyboardToSafeArea.getter()
{
  if (_UIHostingView.shouldUpdateKeyboardSafeArea.getter())
  {
    id v1 = objc_msgSend(v0, sel_window);
    if (v1)
    {
      objc_super v2 = v1;
      id v3 = objc_msgSend(v1, sel_screen);
    }
    else
    {
      id v3 = 0;
    }
    id v5 = objc_msgSend(self, sel_mainScreen);
    id v6 = v5;
    if (v3)
    {
      if (v5)
      {
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIScreen);
        id v7 = v3;
        char v4 = static NSObject.== infix(_:_:)();
      }
      else
      {
        char v4 = 0;
        id v6 = v3;
      }
    }
    else
    {
      if (!v5)
      {
        char v4 = 1;
        return v4 & 1;
      }
      char v4 = 0;
    }
  }
  else
  {
    char v4 = 0;
  }
  return v4 & 1;
}

Swift::Void __swiftcall _UIHostingView._keyboardWillShow(note:)(NSNotification note)
{
  objc_super v2 = v1;
  lazy protocol witness table accessor for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement();
  if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) == 0)
  {
    id v3 = objc_msgSend(self, sel_currentDevice);
    id v4 = objc_msgSend(v3, sel_userInterfaceIdiom);

    if (v4 || (NSNotification.keyboardIsLocal.getter() & 1) != 0)
    {
      uint64_t v5 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0xA0);
      int v6 = *(_DWORD *)((char *)v2 + v5) + 1;
      *(_DWORD *)((char *)v2 + v5) = v6;
      if (_UIHostingView.shouldAddKeyboardToSafeArea.getter())
      {
        NSNotification.keyboardFrame.getter((uint64_t)v17);
        outlined init with take of CGRect?((uint64_t)v17, (uint64_t)v18);
        if ((v19 & 1) == 0)
        {
          CGFloat v8 = *(double *)v18;
          CGFloat v9 = *(double *)&v18[1];
          CGFloat v11 = *(double *)&v18[2];
          CGFloat v10 = *(double *)&v18[3];
          uint64_t v12 = NSNotification.keyboardScreen.getter();
          if (v12)
          {
            id v13 = v12;
            NSNotification.keyboardAnimationDuration.getter();
            if ((v14 & 1) == 0)
            {
              id v15 = NSNotification.keyboardAnimationCurve.getter();
              if ((v16 & 1) == 0) {
                static Animation.uiViewAnimation(curve:duration:)((uint64_t)v15);
              }
            }
            _.value.origin.x = v8;
            _.value.origin.y = v9;
            _.value.size.double width = v11;
            _.value.size.double height = v10;
            _.is_nil = 0;
            _UIHostingView.updateKeyboardFrame(_:screen:animation:seed:)();
          }
        }
      }
      memset(&_, 0, 32);
      _.is_nil = 1;
      v21.value.super.Class isa = 0;
      v21.is_nil = v6;
      _UIHostingView.setKeyboardFrame(_:screen:seed:)(&_, v21, v7);
    }
  }
}

void sub_1877380C8()
{
  swift_release();
  JUMPOUT(0x18773807CLL);
}

id NSNotification.keyboardFrame.getter@<X0>(uint64_t a1@<X8>)
{
  id result = objc_msgSend(v1, sel_userInfo);
  uint64_t v4 = 0;
  if (!result) {
    goto LABEL_10;
  }
  uint64_t v5 = result;
  uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v20[0] = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  v20[1] = v7;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v6 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v22), (v9 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v6 + 56) + 32 * v8, (uint64_t)v20);
  }
  else
  {
    *(_OWORD *)int v20 = 0u;
    long long v21 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v22);
  if (!*((void *)&v21 + 1))
  {
    id result = (id)outlined destroy of Any?((uint64_t)v20);
LABEL_10:
    char v19 = 1;
    uint64_t v14 = 0;
    uint64_t v16 = 0;
    uint64_t v18 = 0;
    goto LABEL_13;
  }
  outlined init with take of Any(v20, v23);
  outlined init with copy of Any((uint64_t)v23, (uint64_t)v22);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSValue);
  int v10 = swift_dynamicCast();
  if (v10)
  {
    id v11 = v20[0];
    objc_msgSend(v20[0], sel_CGRectValue);
    uint64_t v4 = v12;
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    uint64_t v18 = v17;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v16 = 0;
    uint64_t v18 = 0;
  }
  char v19 = v10 ^ 1;
  id result = (id)__swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
LABEL_13:
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v14;
  *(void *)(a1 + 16) = v16;
  *(void *)(a1 + 24) = v18;
  *(unsigned char *)(a1 + 32) = v19;
  return result;
}

uint64_t NSNotification.keyboardScreen.getter()
{
  if (objc_msgSend(v0, sel_object))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v3, 0, sizeof(v3));
  }
  outlined init with take of Any?((uint64_t)v3, (uint64_t)v4);
  if (v5)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIScreen);
    if (swift_dynamicCast()) {
      return v2;
    }
    else {
      return 0;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v4);
    return 0;
  }
}

void _UIHostingView.updateKeyboardFrame(_:screen:animation:seed:)()
{
}

uint64_t sub_1877383D4(void *a1, uint64_t a2, uint64_t a3, Swift::UInt32 a4)
{
  if (a1)
  {
    unsigned int v10 = objc_msgSend(a1, sel__appearState);

    if (v10 != 2 || v4 == 0) {
      goto LABEL_11;
    }
  }
  else if (!v4)
  {
    goto LABEL_11;
  }
  uint64_t v12 = specialized _UIHostingView.viewGraph.getter();
  swift_beginAccess();
  if (*(unsigned char *)(v12 + 128) == 1)
  {
    specialized _UIHostingView.viewGraph.getter();
    swift_retain_n();
    swift_retain();
    Transaction.init(animation:)();
    uint64_t v13 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = *(void *)(v8 + 80);
    *(void *)(v14 + 24) = *(void *)(v8 + 88);
    *(void *)(v14 + 32) = v13;
    *(void *)(v14 + 40) = v4;
    outlined init with take of CGRect?((uint64_t)v7, v14 + 48);
    *(void *)(v14 + 88) = v5;
    *(_DWORD *)(v14 + 96) = v6;
    id v15 = v5;
    swift_retain();
    swift_retain();
    default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
    GraphHost.asyncTransaction(_:id:_:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
LABEL_11:
  v17.value.super.Class isa = (Class)v5;
  v17.is_nil = v6;
  return _UIHostingView.setKeyboardFrame(_:screen:seed:)(v7, v17, a4);
}

Swift::Void __swiftcall _UIHostingView._keyboardWillHide(note:)(NSNotification note)
{
  if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) == 0
    && (_UIHostingView.shouldUpdateKeyboardSafeArea.getter() & 1) != 0)
  {
    _UIHostingView.viewController.getter();
  }
}

void closure #1 in _UIHostingView._keyboardWillHide(note:)(uint64_t a1, Swift::Bool a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x18C119DF0](v3);
  if (v4)
  {
    BOOL v6 = (void *)v4;
    memset(&_, 0, 32);
    _.is_nil = 1;
    v8.value.super.Class isa = 0;
    v8.is_nil = a2;
    _UIHostingView.setKeyboardFrame(_:screen:seed:)(&_, v8, v5);
  }
}

Swift::Void __swiftcall _UIHostingView._keyboardFrameWillChange(note:)(NSNotification note)
{
  uint64_t v2 = v1;
  lazy protocol witness table accessor for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement();
  if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) == 0)
  {
    id v3 = objc_msgSend(self, sel_currentDevice);
    id v4 = objc_msgSend(v3, sel_userInterfaceIdiom);

    if (v4 || (NSNotification.keyboardIsLocal.getter())
      && (*((unsigned char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x98) + 32) & 1) == 0)
    {
      uint64_t v5 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0xA0);
      int v6 = *(_DWORD *)((char *)v2 + v5) + 1;
      *(_DWORD *)((char *)v2 + v5) = v6;
      if (_UIHostingView.shouldAddKeyboardToSafeArea.getter())
      {
        NSNotification.keyboardFrame.getter((uint64_t)v12);
        outlined init with take of CGRect?((uint64_t)v12, (uint64_t)v13);
        if ((v14 & 1) == 0)
        {
          CGFloat v8 = *(double *)v13;
          CGFloat v9 = *(double *)&v13[1];
          CGFloat v10 = *(double *)&v13[2];
          CGFloat v11 = *(double *)&v13[3];
          if (NSNotification.keyboardScreen.getter())
          {
            _.value.origin.x = v8;
            _.value.origin.y = v9;
            _.value.size.double width = v10;
            _.value.size.double height = v11;
            _.is_nil = 0;
            swift_retain();
            _UIHostingView.updateKeyboardFrame(_:screen:animation:seed:)();
          }
        }
      }
      memset(&_, 0, 32);
      _.is_nil = 1;
      v16.value.super.Class isa = 0;
      v16.is_nil = v6;
      _UIHostingView.setKeyboardFrame(_:screen:seed:)(&_, v16, v7);
    }
  }
}

void closure #1 in _UIHostingView.updateKeyboardFrame(_:screen:animation:seed:)(uint64_t a1, uint64_t a2, __C::CGRect_optional *a3, objc_class *a4, Swift::Bool a5)
{
  uint64_t v9 = a1 + 16;
  swift_beginAccess();
  CGFloat v10 = (void *)MEMORY[0x18C119DF0](v9);
  if (v10)
  {
    CGFloat v11 = v10;
    *(void *)((char *)v10 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v10) + 0xB0)) = a2;
    swift_release();
    swift_retain();
  }
  swift_beginAccess();
  uint64_t v12 = MEMORY[0x18C119DF0](v9);
  if (v12)
  {
    char v14 = (void *)v12;
    v15.value.super.Class isa = a4;
    v15.is_nil = a5;
    _UIHostingView.setKeyboardFrame(_:screen:seed:)(a3, v15, v13);
  }
}

id NSNotification.keyboardAnimationDuration.getter()
{
  id result = objc_msgSend(v0, sel_userInfo);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    *(void *)&long long v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *((void *)&v7 + 1) = v4;
    AnyHashable.init<A>(_:)();
    if (*(void *)(v3 + 16) && (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9), (v6 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v5, (uint64_t)&v7);
    }
    else
    {
      long long v7 = 0u;
      long long v8 = 0u;
    }
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)v9);
    if (*((void *)&v8 + 1))
    {
      outlined init with take of Any(&v7, v10);
      outlined init with take of Any(v10, v9);
      if (swift_dynamicCast()) {
        return (id)v7;
      }
      else {
        return 0;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v7);
      return 0;
    }
  }
  return result;
}

id NSNotification.keyboardAnimationCurve.getter()
{
  id result = objc_msgSend(v0, sel_userInfo);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    *(void *)&long long v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *((void *)&v7 + 1) = v4;
    AnyHashable.init<A>(_:)();
    if (*(void *)(v3 + 16) && (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9), (v6 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v5, (uint64_t)&v7);
    }
    else
    {
      long long v7 = 0u;
      long long v8 = 0u;
    }
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)v9);
    if (*((void *)&v8 + 1))
    {
      outlined init with take of Any(&v7, v10);
      outlined init with take of Any(v10, v9);
      if (swift_dynamicCast()) {
        return (id)v7;
      }
      else {
        return 0;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v7);
      return 0;
    }
  }
  return result;
}

uint64_t NSNotification.keyboardIsLocal.getter()
{
  id v1 = objc_msgSend(v0, sel_userInfo);
  if (!v1)
  {
    long long v9 = 0u;
    long long v10 = 0u;
LABEL_10:
    outlined destroy of Any?((uint64_t)&v9);
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  *(void *)&long long v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v9 + 1) = v4;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v3 + 16) && (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v8), (v6 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v5, (uint64_t)&v9);
  }
  else
  {
    long long v9 = 0u;
    long long v10 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v8);
  if (!*((void *)&v10 + 1)) {
    goto LABEL_10;
  }
  uint64_t result = swift_dynamicCast();
  if (result) {
    return v8[0];
  }
  return result;
}

uint64_t (*protocol witness for static UserDefaultKeyedFeature.cachedValue.modify in conformance EnableKeyboardTrackingElement())()
{
  return protocol witness for static UserDefaultKeyedFeature.cachedValue.modify in conformance EnableKeyboardTrackingElement;
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance EnableKeyboardTrackingElement()
{
  lazy protocol witness table accessor for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement();

  return static UserDefaultKeyedFeature.isEnabled.getter();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance EnableKeyboardTrackingElement()
{
  lazy protocol witness table accessor for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance EnableKeyboardTrackingElement()
{
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance EnableKeyboardTrackingElement@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v4 = lazy protocol witness table accessor for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement();
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(v4 + 16))(a1, v4);
  *a2 = result & 1;
  return result;
}

void specialized static UIHostingKeyboardTrackingElement.stopTracking(element:window:keyboardDelegate:)(uint64_t a1, uint64_t a2, void *a3)
{
  if (one-time initialization token for windowMap != -1) {
    swift_once();
  }
  swift_beginAccess();
  unint64_t v5 = static UIHostingKeyboardTrackingElement.windowMap;
  if (!*((void *)static UIHostingKeyboardTrackingElement.windowMap + 2)
    || (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v7 & 1) == 0))
  {
    swift_endAccess();
    return;
  }
  long long v8 = *(char **)(v5[7] + 8 * v6);
  uint64_t v9 = swift_endAccess();
  MEMORY[0x1F4188790](v9);
  long long v10 = &v8[OBJC_IVAR____TtC7SwiftUI32UIHostingKeyboardTrackingElement_elements];
  swift_beginAccess();
  CGFloat v11 = v8;
  uint64_t v12 = 0;
  uint64_t v13 = specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t (*)(uint64_t))partial apply for closure #1 in static UIHostingKeyboardTrackingElement.stopTracking(element:window:keyboardDelegate:));
  int64_t v14 = *(void *)(*(void *)v10 + 16);
  if (v14 < v13)
  {
    __break(1u);
LABEL_14:
    specialized _NativeDictionary.copy()();
    uint64_t v18 = v20;
    goto LABEL_11;
  }
  specialized Array.replaceSubrange<A>(_:with:)(v13, v14);
  swift_endAccess();
  if (*(void *)(*(void *)v10 + 16))
  {

    return;
  }
  objc_msgSend(a3, sel_removeTrackingElement_, v11);
  swift_beginAccess();
  unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v16 & 1) == 0) {
    goto LABEL_12;
  }
  a2 = v15;
  uint64_t v12 = &unk_1EB2E6000;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v18 = static UIHostingKeyboardTrackingElement.windowMap;
  int v20 = static UIHostingKeyboardTrackingElement.windowMap;
  static UIHostingKeyboardTrackingElement.windowMap = (_UNKNOWN *)0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_14;
  }
LABEL_11:
  char v19 = *(void **)(v18[7] + 8 * a2);
  specialized _NativeDictionary._delete(at:)(a2, v18);
  v12[114] = v18;

  swift_bridgeObjectRelease();
LABEL_12:
  swift_endAccess();
}

uint64_t sub_1877392D0()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_187739308()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in _UIHostingView.updateKeyboardFrame(_:screen:animation:seed:)()
{
  closure #1 in _UIHostingView.updateKeyboardFrame(_:screen:animation:seed:)(*(void *)(v0 + 32), *(void *)(v0 + 40), (__C::CGRect_optional *)(v0 + 48), *(objc_class **)(v0 + 88), *(_DWORD *)(v0 + 96));
}

uint64_t sub_187739368()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in _UIHostingView._keyboardWillHide(note:)()
{
  closure #1 in _UIHostingView._keyboardWillHide(note:)(*(void *)(v0 + 32), *(_DWORD *)(v0 + 40));
}

uint64_t partial apply for closure #1 in static UIHostingKeyboardTrackingElement.stopTracking(element:window:keyboardDelegate:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t result = MEMORY[0x18C119DF0]();
  if (result)
  {
    uint64_t v3 = result;
    swift_unknownObjectRelease();
    return v3 == v1;
  }
  return result;
}

ValueMetadata *type metadata accessor for EnableKeyboardTrackingElement()
{
  return &type metadata for EnableKeyboardTrackingElement;
}

uint64_t ShadowListDataSource<>.section(forSectionLabelIndex:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  long long v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AppIntentExecutingLocation.get()(v9, (uint64_t)v8);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 24))(a1, v5, a3);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v10;
}

uint64_t protocol witness for CollectionViewListDataSourceBase.style.getter in conformance <> ShadowListDataSource<A>(uint64_t a1, uint64_t a2)
{
  return ShadowListDataSource<>.style.getter(a1, *(void *)(a2 - 8));
}

uint64_t protocol witness for CollectionViewListDataSourceBase.section(forSectionLabelIndex:) in conformance <> ShadowListDataSource<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ShadowListDataSource<>.section(forSectionLabelIndex:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t protocol witness for CollectionViewListDataSourceBase.sectionIndexLabel(forSectionAt:) in conformance <> ShadowListDataSource<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ShadowListDataSource<>.sectionIndexLabel(forSectionAt:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t instantiation function for generic protocol witness table for <> ShadowListDataSource<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CollectionViewListDataSource(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) == 0)
  {
    long long v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    long long v8 = (void *)a2[6];
    *(void *)(v4 + 40) = a2[5];
    *(void *)(v4 + 48) = v8;
    uint64_t v9 = a2[8];
    *(void *)(v4 + 56) = a2[7];
    *(void *)(v4 + 64) = v9;
    uint64_t v10 = a3[9];
    uint64_t v36 = v4 + v10;
    uint64_t v11 = (uint64_t)a2 + v10;
    *(unsigned char *)(v4 + 72) = *((unsigned char *)a2 + 72);
    uint64_t v12 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
    id v14 = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v36, v11, v12);
    uint64_t v15 = a3[10];
    uint64_t v16 = v4 + v15;
    uint64_t v17 = (uint64_t)a2 + v15;
    uint64_t v18 = *(uint64_t *)((char *)a2 + v15 + 8);
    if (v18)
    {
      if (v18 == 1)
      {
        long long v19 = *(_OWORD *)(v17 + 48);
        *(_OWORD *)(v16 + 32) = *(_OWORD *)(v17 + 32);
        *(_OWORD *)(v16 + 48) = v19;
        *(_DWORD *)(v16 + 63) = *(_DWORD *)(v17 + 63);
        long long v20 = *(_OWORD *)(v17 + 16);
        *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
        *(_OWORD *)(v16 + 16) = v20;
LABEL_12:
        uint64_t v26 = a3[11];
        uint64_t v27 = a3[12];
        double v28 = (void *)(v4 + v26);
        char v29 = (uint64_t *)((char *)a2 + v26);
        uint64_t v30 = v29[1];
        *double v28 = *v29;
        v28[1] = v30;
        *(unsigned char *)(v4 + v27) = *((unsigned char *)a2 + v27);
        uint64_t v31 = a3[13];
        uint64_t v32 = a3[14];
        uint64_t v33 = v4 + v31;
        uint64_t v34 = (uint64_t)a2 + v31;
        *(void *)uint64_t v33 = *(void *)v34;
        *(unsigned char *)(v33 + 8) = *(unsigned char *)(v34 + 8);
        *(void *)(v4 + v32) = *(uint64_t *)((char *)a2 + v32);
        swift_retain();
        goto LABEL_13;
      }
      *(void *)uint64_t v16 = *(void *)v17;
      *(void *)(v16 + 8) = v18;
      *(void *)(v16 + 16) = *(void *)(v17 + 16);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
      *(void *)(v16 + 16) = *(void *)(v17 + 16);
    }
    uint64_t v22 = (void *)(v16 + 24);
    CGPoint v23 = (void *)(v17 + 24);
    char v24 = *(unsigned char *)(v17 + 64);
    if (v24)
    {
      void *v22 = *v23;
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v25 = *(_OWORD *)(v17 + 48);
      *(_OWORD *)(v16 + 48) = v25;
      (**(void (***)(void *, void *))(v25 - 8))(v22, v23);
    }
    *(unsigned char *)(v16 + 64) = v24;
    *(_WORD *)(v16 + 65) = *(_WORD *)(v17 + 65);
    goto LABEL_12;
  }
  uint64_t v21 = *a2;
  *(void *)a1 = *a2;
  uint64_t v4 = v21 + ((v5 + 16) & ~(unint64_t)v5);
LABEL_13:
  swift_retain();
  return v4;
}

uint64_t outlined destroy of TableHeaderView(uint64_t a1)
{
  return a1;
}

_OWORD *initializeWithTake for CollectionViewListDataSource(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  *(_OWORD *)((char *)a1 + 57) = *(_OWORD *)((char *)a2 + 57);
  long long v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  uint64_t v8 = a3[9];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = a3[10];
  uint64_t v13 = a3[11];
  id v14 = (char *)a1 + v12;
  uint64_t v15 = (char *)a2 + v12;
  long long v16 = *((_OWORD *)v15 + 3);
  *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
  *((_OWORD *)v14 + 3) = v16;
  *(_DWORD *)(v14 + 63) = *(_DWORD *)(v15 + 63);
  long long v17 = *((_OWORD *)v15 + 1);
  *(_OWORD *)id v14 = *(_OWORD *)v15;
  *((_OWORD *)v14 + 1) = v17;
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  uint64_t v18 = a3[13];
  *((unsigned char *)a1 + a3[12]) = *((unsigned char *)a2 + a3[12]);
  long long v19 = (char *)a1 + v18;
  long long v20 = (char *)a2 + v18;
  *(void *)long long v19 = *(void *)v20;
  v19[8] = v20[8];
  *(void *)((char *)a1 + a3[14]) = *(void *)((char *)a2 + a3[14]);
  return a1;
}

uint64_t sub_187739918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1877399C8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 36);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

Swift::Int __swiftcall CollectionViewListDataSource.section(forSectionLabelIndex:)(Swift::Int forSectionLabelIndex)
{
  if (forSectionLabelIndex < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = *(void *)(v1 + 64);
    if (*(void *)(v2 + 16) > (unint64_t)forSectionLabelIndex) {
      return *(void *)(v2 + 8 * forSectionLabelIndex + 32);
    }
  }
  __break(1u);
  return forSectionLabelIndex;
}

uint64_t CollectionViewListDataSource.configureHeader(_:transaction:forSectionAt:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(v4 + *(int *)(a4 + 56));
  v10[0] = 1;
  uint64_t v11 = a1;
  uint64_t v12 = a2;
  uint64_t v13 = v7;
  id v8 = a1;
  outlined copy of Transaction?(a2);
  specialized ListSectionInfo.visitHeader<A>(index:visitor:)(a3, (uint64_t)v10, MEMORY[0x1E4F40230]);

  return outlined consume of Transaction?(a2);
}

uint64_t CollectionViewListDataSource.configureFooter(_:transaction:forSectionAt:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  id v26 = a1;
  unint64_t v27 = a3;
  uint64_t v29 = a2;
  uint64_t v6 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  id v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *MEMORY[0x1E4FB10D0];
  long long v25 = *(void (**)(char *, uint64_t, uint64_t, double))(v10 + 104);
  v25(v13, v14, v9, v11);
  char v15 = static UICollectionLayoutListConfiguration.Appearance.== infix(_:_:)();
  long long v16 = *(void (**)(char *, uint64_t))(v10 + 8);
  v16(v13, v9);
  long long v17 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v28 = v4;
  v17(v8, v4, a4);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a4);
    char v18 = 0;
  }
  else
  {
    ((void (*)(char *, void, uint64_t))v25)(v13, *MEMORY[0x1E4FB10C8], v9);
    char v19 = static UICollectionLayoutListConfiguration.Appearance.== infix(_:_:)();
    v16(v13, v9);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a4);
    if (v19) {
      char v18 = 0;
    }
    else {
      char v18 = 2;
    }
  }
  uint64_t v20 = v29;
  uint64_t v21 = *(void *)(v28 + *(int *)(a4 + 56));
  v30[0] = v18;
  id v31 = v26;
  uint64_t v32 = v29;
  uint64_t v33 = v21;
  id v22 = v26;
  outlined copy of Transaction?(v20);
  specialized ListSectionInfo.visitHeader<A>(index:visitor:)(v27, (uint64_t)v30, MEMORY[0x1E4F40228]);

  return outlined consume of Transaction?(v20);
}

unint64_t specialized ListSectionInfo.visitHeader<A>(index:visitor:)(unint64_t result, uint64_t a2, void (*a3)(void *))
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v4 = *(void *)(v3 + 56);
  if (*(void *)(v4 + 16) <= result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = outlined init with copy of SectionAccumulator.Item(v4 + 136 * result + 32, (uint64_t)v7);
  v6[5] = 0;
  if (v8)
  {
    a3(v6);
    specialized ListSectionInfo.visitContent<A>(list:start:transform:visitor:)(v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    return outlined destroy of SectionAccumulator.Item((uint64_t)v7);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t CollectionViewListDataSource.firstIndexPath<A>(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return ListSectionInfo.firstIndexPath<A>(for:)(a1, a2, a3, a4);
}

uint64_t CollectionViewListDataSource.firstIndexPath(viewListID:)@<X0>(uint64_t a1@<X8>)
{
  outlined init with copy of ListSectionInfo(v1, (uint64_t)v7);
  __swift_project_boxed_opaque_existential_1(v7, v7[3]);
  uint64_t v3 = ViewList.firstOffset(of:)();
  if (v4)
  {
    uint64_t v5 = type metadata accessor for IndexPath();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a1, 1, 1, v5);
  }
  else
  {
    ListSectionInfo.indexPath(offset:)(v3, a1);
  }
  return outlined destroy of ListSectionInfo((uint64_t)v7);
}

uint64_t CollectionViewListDataSource.firstCollectionViewIndex(of:)()
{
  _sSay7SwiftUI0A19UIAnySortComparatorVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB718]);
  static Update.ensure<A>(_:)();
  return v1;
}

uint64_t closure #1 in CollectionViewListDataSource.firstCollectionViewIndex(of:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t result = ViewList.firstOffset(of:style:)();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t CollectionViewListDataSource.applyCollectionViewIDs(from:to:)()
{
  char v4 = 0;
  outlined init with copy of TableColumnList(v0, (uint64_t)v3);
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  AGWeakAttributeGetAttribute();
  char v1 = ViewList.applyIDs(from:listAttribute:to:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  return v1 & 1;
}

BOOL closure #1 in CollectionViewListDataSource.applyCollectionViewIDs(from:to:)(uint64_t a1, void (*a2)(void *, unsigned char *), uint64_t a3, unsigned char *a4)
{
  _ViewList_ID.canonicalID.getter();
  v7[0] = v7[2];
  v7[1] = v7[3];
  a2(v7, a4);
  swift_release();
  return (*a4 & 1) == 0;
}

void protocol witness for ListCoreDataSource.configureGlobalHeader(_:transaction:) in conformance CollectionViewListDataSource<A>(void *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t protocol witness for ListCoreDataSource.configureHeader(_:transaction:forSectionAt:) in conformance CollectionViewListDataSource<A>(void *a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  return CollectionViewListDataSource.configureHeader(_:transaction:forSectionAt:)(a1, a2, *a3, a4);
}

uint64_t protocol witness for ListCoreDataSource.configureFooter(_:transaction:forSectionAt:) in conformance CollectionViewListDataSource<A>(void *a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  return CollectionViewListDataSource.configureFooter(_:transaction:forSectionAt:)(a1, a2, *a3, a4);
}

uint64_t protocol witness for ListCoreDataSource.firstIndexPath<A>(for:) in conformance CollectionViewListDataSource<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return CollectionViewListDataSource.firstIndexPath<A>(for:)(a1, a2, a3, a4);
}

uint64_t protocol witness for ListCoreDataSource.firstCollectionViewIndex(of:) in conformance CollectionViewListDataSource<A>()
{
  return CollectionViewListDataSource.firstCollectionViewIndex(of:)();
}

uint64_t associated type witness table accessor for ListCoreDataSource.HeaderFooter : PlatformListHeaderFooter in CollectionViewListDataSource<A>()
{
  return swift_getWitnessTable();
}

uint64_t outlined consume of SectionIndexLabel?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((unint64_t)a3 >> 1 != 0xFFFFFFFF) {
    return outlined consume of SectionIndexLabel(a1, a2, a3);
  }
  return a1;
}

uint64_t outlined consume of SectionIndexLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 0)
  {
    return swift_release();
  }
  else
  {
    outlined consume of Text.Storage(a1, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
}

void type metadata accessor for ViewList?()
{
  if (!lazy cache variable for type metadata for ViewList?)
  {
    type metadata accessor for ViewList();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewList?);
    }
  }
}

BOOL partial apply for closure #1 in CollectionViewListDataSource.applyCollectionViewIDs(from:to:)(uint64_t a1)
{
  return closure #1 in CollectionViewListDataSource.applyCollectionViewIDs(from:to:)(a1, *(void (**)(void *, unsigned char *))(v1 + 16), *(void *)(v1 + 24), *(unsigned char **)(v1 + 32));
}

uint64_t partial apply for closure #1 in CollectionViewListDataSource.firstCollectionViewIndex(of:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in CollectionViewListDataSource.firstCollectionViewIndex(of:)(*(void **)(v1 + 32), a1);
}

void specialized CollectionViewListDataSource.configureGlobalHeader(_:transaction:)(void *a1, uint64_t a2)
{
  type metadata accessor for TableGlobalHeader();
  uint64_t v5 = swift_dynamicCastClass();
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    id v7 = a1;
    objc_msgSend(v6, sel_setAutomaticallyUpdatesContentConfiguration_, 0);
    uint64_t v8 = v2 + *(int *)(a2 + 40);
    uint64_t v9 = (uint64_t)v6 + OBJC_IVAR____TtC7SwiftUI17TableGlobalHeader_globalHeader;
    swift_beginAccess();
    outlined assign with copy of TableHeaderView?(v8, v9);
    swift_endAccess();
    objc_msgSend(v6, sel_setNeedsUpdateConfiguration);
  }
}

uint64_t outlined assign with copy of TableHeaderView?(uint64_t a1, uint64_t a2)
{
  _sSay7SwiftUI0A19UIAnySortComparatorVGMaTm_0(0, &lazy cache variable for type metadata for TableHeaderView?, (uint64_t)&type metadata for TableHeaderView, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ArchivableMutation.CodingKeys()
{
  if (*v0) {
    return 1635017060;
  }
  else {
    return 0x4449656C62617473;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ArchivableMutation.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ArchivableMutation.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ArchivableMutation.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ArchivableMutation.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t ArchivableMutation.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  type metadata accessor for KeyedEncodingContainer<ArchivableMutation.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ArchivableMutation.CodingKeys>, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *((void *)v3 + 3);
  uint64_t v12 = *((void *)v3 + 4);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v13 = *v3;
  uint64_t v14 = *((void *)v3 + 2);
  char v15 = 0;
  lazy protocol witness table accessor for type _DisplayList_StableIdentity and conformance _DisplayList_StableIdentity();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    *(void *)&long long v13 = v10;
    *((void *)&v13 + 1) = v12;
    char v15 = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t lazy protocol witness table accessor for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _DisplayList_StableIdentity and conformance _DisplayList_StableIdentity()
{
  unint64_t result = lazy protocol witness table cache variable for type _DisplayList_StableIdentity and conformance _DisplayList_StableIdentity;
  if (!lazy protocol witness table cache variable for type _DisplayList_StableIdentity and conformance _DisplayList_StableIdentity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisplayList_StableIdentity and conformance _DisplayList_StableIdentity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _DisplayList_StableIdentity and conformance _DisplayList_StableIdentity;
  if (!lazy protocol witness table cache variable for type _DisplayList_StableIdentity and conformance _DisplayList_StableIdentity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisplayList_StableIdentity and conformance _DisplayList_StableIdentity);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

uint64_t ArchivableMutation.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for KeyedEncodingContainer<ArchivableMutation.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ArchivableMutation.CodingKeys>, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v14 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v15 = 0;
    lazy protocol witness table accessor for type _DisplayList_StableIdentity and conformance _DisplayList_StableIdentity();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    long long v10 = v16;
    uint64_t v11 = v17;
    char v15 = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    long long v13 = v16;
    *(_OWORD *)a2 = v10;
    *(void *)(a2 + 16) = v11;
    *(_OWORD *)(a2 + 24) = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void type metadata accessor for KeyedEncodingContainer<ArchivableMutation.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys();
    unint64_t v7 = a3(a1, &unk_1ED427060, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance ArchivableMutation@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ArchivableMutation.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ArchivableMutation(void *a1)
{
  return ArchivableMutation.encode(to:)(a1);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance ArchivableMutationsKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static ArchivableMutationsKey.defaultValue;

  return swift_bridgeObjectRetain();
}

void *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ArchivableMutationsKey(uint64_t a1, void (*a2)(void **__return_ptr))
{
  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

uint64_t key path setter for ArchivableMutationHandler.action : ArchivableMutationHandler(uint64_t *a1, uint64_t (**a2)(uint64_t a1, uint64_t a2))
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain();
  uint64_t result = swift_release();
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ArchivableMutation, @in_guaranteed Transaction) -> (@out ());
  a2[1] = (uint64_t (*)(uint64_t, uint64_t))v5;
  return result;
}

uint64_t ArchivableMutationHandler.action.getter()
{
  uint64_t v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t ArchivableMutationHandler.action.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ArchivableMutationHandler.action.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t ArchivableMutationHandler.init(action:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t EnvironmentValues.archivableMutationHandler.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ArchivableMutationHandler.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ArchivableMutationHandler.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ArchivableMutationHandler.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ArchivableMutationHandler.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

void type metadata accessor for EnvironmentPropertyKey<ArchivableMutationHandler.Key>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<ArchivableMutationHandler.Key>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ArchivableMutationHandler.Key>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ArchivableMutationHandler.Key> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ArchivableMutationHandler.Key> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ArchivableMutationHandler.Key> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<ArchivableMutationHandler.Key>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ArchivableMutationHandler.Key> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

double key path getter for EnvironmentValues.archivableMutationHandler : EnvironmentValues@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ArchivableMutationHandler.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ArchivableMutationHandler.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ArchivableMutationHandler.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ArchivableMutationHandler.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.archivableMutationHandler : EnvironmentValues(uint64_t *a1)
{
  uint64_t v1 = *a1;
  outlined copy of AppIntentExecutor?(*a1);
  specialized EnvironmentValues.subscript.setter(v1);

  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
}

uint64_t EnvironmentValues.archivableMutationHandler.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  type metadata accessor for EnvironmentPropertyKey<ArchivableMutationHandler.Key>();
  outlined copy of AppIntentExecutor?(v2);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ArchivableMutationHandler.Key> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v2);
}

void (*EnvironmentValues.archivableMutationHandler.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  void v3[4] = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ArchivableMutationHandler.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ArchivableMutationHandler.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ArchivableMutationHandler.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ArchivableMutationHandler.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.archivableMutationHandler.modify;
}

void EnvironmentValues.archivableMutationHandler.modify(uint64_t **a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (*a1)[4];
  uint64_t v5 = **a1;
  uint64_t v6 = (*a1)[1];
  _OWORD v3[2] = v5;
  v3[3] = v6;
  type metadata accessor for EnvironmentPropertyKey<ArchivableMutationHandler.Key>();
  outlined copy of AppIntentExecutor?(v5);
  if (a2)
  {
    outlined copy of AppIntentExecutor?(v5);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ArchivableMutationHandler.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.setter();
    if (*(void *)(v4 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v5);
    uint64_t v7 = *v3;
  }
  else
  {
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ArchivableMutationHandler.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.setter();
    if (*(void *)(v4 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    uint64_t v7 = v5;
  }
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v7);

  free(v3);
}

uint64_t sub_18773B57C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ArchivableMutation, @guaranteed Transaction) -> ();
  a2[1] = v5;

  return swift_retain();
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t destroy for ArchivableMutation(uint64_t a1)
{
  return outlined consume of Data._Representation(*(void *)(a1 + 24), *(void *)(a1 + 32));
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t initializeWithCopy for ArchivableMutation(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  unint64_t v4 = *(void *)(a2 + 32);
  outlined copy of Data._Representation(v3, v4);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v4;
  return a1;
}

uint64_t assignWithCopy for ArchivableMutation(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  uint64_t v3 = *(void *)(a2 + 24);
  unint64_t v4 = *(void *)(a2 + 32);
  outlined copy of Data._Representation(v3, v4);
  uint64_t v5 = *(void *)(a1 + 24);
  unint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v4;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

uint64_t assignWithTake for ArchivableMutation(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  unint64_t v4 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  outlined consume of Data._Representation(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ArchivableMutation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 32) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 32) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ArchivableMutation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2)
    {
      *(void *)(result + 24) = 0;
      *(void *)(result + 32) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ArchivableMutation()
{
  return &type metadata for ArchivableMutation;
}

ValueMetadata *type metadata accessor for ArchivableMutationHandler()
{
  return &type metadata for ArchivableMutationHandler;
}

ValueMetadata *type metadata accessor for ArchivableMutationsKey()
{
  return &type metadata for ArchivableMutationsKey;
}

ValueMetadata *type metadata accessor for ArchivableMutationHandler.Key()
{
  return &type metadata for ArchivableMutationHandler.Key;
}

unsigned char *storeEnumTagSinglePayload for ArchivableMutation.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18773B97CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ArchivableMutation.CodingKeys()
{
  return &unk_1ED427060;
}

uint64_t specialized ArchivableMutation.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4449656C62617473 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_18773BBA0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ArchivableMutation, @in_guaranteed Transaction) -> (@out ())(uint64_t a1, uint64_t a2)
{
  int v3 = *(uint64_t (**)(uint64_t, uint64_t *))(v2 + 16);
  uint64_t v5 = a2;
  return v3(a1, &v5);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ArchivableMutation, @guaranteed Transaction) -> ()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(uint64_t, void))(v2 + 16))(a1, *a2);
}

uint64_t Table.init(of:selection:columnCustomization:columns:rows:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X3>, uint64_t a4@<X4>, uint64_t (*a5)(uint64_t)@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v39 = a6;
  double v40 = a5;
  uint64_t v42 = a4;
  uint64_t v43 = a3;
  uint64_t v41 = *(void *)(a10 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v38 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  uint64_t v18 = v15[2];
  uint64_t v36 = v15[3];
  uint64_t v37 = v18;
  uint64_t v50 = v19;
  uint64_t v51 = a9;
  uint64_t v45 = v20;
  uint64_t v52 = v20;
  uint64_t v53 = a11;
  uint64_t v54 = v21;
  id v22 = (int *)type metadata accessor for Table();
  CGPoint v23 = (_OWORD *)(a8 + v22[16]);
  *(_OWORD *)((char *)v23 + 41) = 0u;
  v23[1] = 0u;
  _OWORD v23[2] = 0u;
  *CGPoint v23 = 0u;
  uint64_t v24 = (uint64_t *)(a8 + v22[17]);
  *uint64_t v24 = 0;
  v24[1] = 0;
  v24[2] = 0;
  uint64_t v25 = a8 + v22[18];
  *(_OWORD *)uint64_t v25 = 0u;
  *(_OWORD *)(v25 + 16) = 0u;
  uint64_t v44 = a2;
  outlined assign with copy of Binding<SelectionManagerBox<AnyHashable>>?(a2, (uint64_t)v23);
  outlined consume of Binding<[SwiftUIAnySortComparator]>?(*v24, v24[1]);
  *uint64_t v24 = 0;
  v24[1] = 0;
  v24[2] = 0;
  if (v16)
  {
    uint64_t v46 = v17;
    uint64_t v47 = v16;
    uint64_t v48 = v37;
    uint64_t v49 = v36;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a7, AssociatedConformanceWitness, v27, v28);
    type metadata accessor for TableColumnCustomization();
    type metadata accessor for Binding();
    type metadata accessor for TableColumnCustomization.ToAnyCustomization();
    swift_getWitnessTable();
    Binding.projecting<A>(_:)();
    outlined consume of Binding<AnyTableColumnCustomization>?(v17, v16);
    uint64_t v29 = v50;
    uint64_t v30 = v51;
    uint64_t v31 = v52;
    uint64_t v16 = v53;
  }
  else
  {
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
  }
  uint64_t v32 = outlined consume of Binding<AnyTableColumnCustomization>?(*(void *)v25, *(void *)(v25 + 8));
  *(void *)uint64_t v25 = v29;
  *(void *)(v25 + 8) = v30;
  *(void *)(v25 + 16) = v31;
  *(void *)(v25 + 24) = v16;
  uint64_t v33 = v40(v32);
  uint64_t v34 = v38;
  v43(v33);
  outlined destroy of Binding<SelectionManagerBox<AnyHashable>>?(v44);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v41 + 32))(a8, v34, v45);
}

uint64_t static Table._makeViewList(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v76 = a7;
  uint64_t v68 = a8;
  uint64_t v71 = 0;
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  int v72 = *a1;
  unint64_t v12 = *(void *)a2;
  LODWORD(v67) = *(_DWORD *)(a2 + 8);
  uint64_t v13 = *(void *)(a2 + 16);
  unsigned int v14 = *(_DWORD *)(a2 + 24);
  unsigned int v65 = *(_DWORD *)(a2 + 28);
  LODWORD(v66) = v14;
  unsigned int v15 = *(_DWORD *)(a2 + 32);
  unsigned int v63 = *(_DWORD *)(a2 + 36);
  unsigned int v64 = v15;
  uint64_t v16 = *(void *)(a2 + 40);
  int v17 = *(_DWORD *)(a2 + 64);
  uint64_t v18 = *(void *)(a2 + 72);
  char v19 = *(unsigned char *)(a2 + 80);
  unint64_t v97 = v12;
  uint64_t v61 = v16;
  unint64_t v62 = v12;
  int v98 = (int)v67;
  uint64_t v99 = v13;
  uint64_t v60 = v13;
  *(void *)&long long v100 = __PAIR64__(v65, v14);
  *((void *)&v100 + 1) = __PAIR64__(v63, v15);
  uint64_t v101 = v16;
  long long v102 = *(_OWORD *)(a2 + 48);
  int v103 = v17;
  uint64_t v104 = v18;
  char v105 = v19;
  lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.setter();
  uint64_t v74 = a6;
  unint64_t v75 = a3;
  unint64_t v82 = a3;
  unint64_t v83 = a4;
  uint64_t v84 = a5;
  uint64_t v85 = a6;
  uint64_t v86 = v76;
  unint64_t v87 = a3;
  unint64_t v88 = a4;
  uint64_t v89 = a5;
  *(void *)&long long v90 = a6;
  *((void *)&v90 + 1) = v76;
  type metadata accessor for Table();
  uint64_t v69 = type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  unint64_t v73 = a4;
  uint64_t v20 = AnyRowSource.init<A>(_:)();
  uint64_t v22 = v21;
  LODWORD(v13) = v23;
  unint64_t v24 = HIDWORD(v23);
  lazy protocol witness table accessor for type RowSourceInput and conformance RowSourceInput();
  PropertyList.subscript.getter();
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v20;
  *(void *)(v25 + 24) = v22;
  *(_DWORD *)(v25 + 32) = v13;
  *(_DWORD *)(v25 + 36) = v24;
  *(void *)(v25 + 40) = v87;
  PropertyList.subscript.setter();
  unint64_t v77 = v75;
  unint64_t v78 = a4;
  uint64_t v79 = a5;
  uint64_t v80 = v74;
  uint64_t v81 = v76;
  LODWORD(v87) = v72;
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  uint64_t v70 = a5;
  uint64_t v26 = AnyColumnSource.init<A>(_:)();
  uint64_t v28 = v27;
  LODWORD(a3) = v29;
  unint64_t v30 = HIDWORD(v29);
  lazy protocol witness table accessor for type ColumnSourceInput and conformance ColumnSourceInput();
  uint64_t v31 = v74;
  PropertyList.subscript.getter();
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = v26;
  *(void *)(v32 + 24) = v28;
  *(_DWORD *)(v32 + 32) = a3;
  *(_DWORD *)(v32 + 36) = v30;
  *(void *)(v32 + 40) = v87;
  uint64_t v96 = v32;
  unint64_t v33 = v75;
  unint64_t v34 = v73;
  PropertyList.subscript.setter();
  unsigned int v35 = *MEMORY[0x1E4F4E7A0];
  unint64_t v87 = v62;
  LODWORD(v88) = v67;
  uint64_t v89 = v60;
  *(void *)&long long v90 = __PAIR64__(v65, v66);
  *((void *)&v90 + 1) = __PAIR64__(v63, v64);
  uint64_t v91 = v61;
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v36 = _GraphInputs.selectionStorage<A>(forType:)();
  unint64_t v38 = v37;
  unint64_t v39 = SelectionBasedStorage.$menu.getter(v36);
  if ((v39 & 0x100000000) != 0)
  {
    LODWORD(v67) = v35;
    uint64_t v40 = v71;
  }
  else
  {
    uint64_t v67 = &v60;
    LODWORD(v96) = v39;
    MEMORY[0x1F4188790](v39);
    unint64_t v87 = v33;
    unint64_t v88 = v34;
    uint64_t v89 = v70;
    *(void *)&long long v90 = v31;
    *((void *)&v90 + 1) = v76;
    uint64_t v58 = type metadata accessor for Table.ChildSelectionMenu();
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for Attribute<(_:)>, &lazy cache variable for type metadata for (_:), (uint64_t)&type metadata for PlatformItemList, MEMORY[0x1E4F4E740]);
    uint64_t v40 = v71;
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v96, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v57, v58, MEMORY[0x1E4FBC248], v41, MEMORY[0x1E4FBC278], v42);
    LODWORD(v67) = v87;
  }
  unint64_t v43 = SelectionBasedStorage.$action.getter(v36, v38);
  if ((v43 & 0x100000000) != 0)
  {
    uint64_t v71 = v40;
    unsigned int v47 = v35;
  }
  else
  {
    char v66 = &v60;
    LODWORD(v96) = v43;
    MEMORY[0x1F4188790](v43);
    unint64_t v87 = v75;
    unint64_t v88 = v73;
    uint64_t v89 = v70;
    *(void *)&long long v90 = v74;
    *((void *)&v90 + 1) = v76;
    uint64_t v44 = type metadata accessor for Table.ChildSelectionAction();
    uint64_t v58 = v44;
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for Attribute<((_:))?>();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v96, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v57, v44, MEMORY[0x1E4FBC248], v45, MEMORY[0x1E4FBC278], v46);
    uint64_t v71 = v40;
    unsigned int v47 = v87;
  }
  unint64_t v48 = SelectionBasedStorage.$isSelectionEnabled.getter(v36, v38);
  unsigned int v49 = v35;
  uint64_t v50 = v76;
  uint64_t v51 = v70;
  if ((v48 & 0x100000000) == 0)
  {
    LODWORD(v96) = v48;
    MEMORY[0x1F4188790](v48);
    unint64_t v87 = v75;
    unint64_t v88 = v73;
    uint64_t v89 = v51;
    *(void *)&long long v90 = v74;
    *((void *)&v90 + 1) = v50;
    uint64_t v52 = type metadata accessor for Table.ChildSelectionEnabled();
    uint64_t v58 = v52;
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for Attribute<(_:)>(0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), MEMORY[0x1E4F4E740]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v96, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v57, v52, MEMORY[0x1E4FBC248], v53, MEMORY[0x1E4FBC278], v54);
    unsigned int v49 = v87;
  }
  unsigned int v55 = v67;
  if (v67 != v35 || v47 != v35 || v49 != v35)
  {
    type metadata accessor for _GraphInputs.SelectionBasedStorageKey<AnyHashable>(0, &lazy cache variable for type metadata for _GraphInputs.SelectionBasedStorageKey<AnyHashable>, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB968], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _GraphInputs.SelectionBasedStorageKey);
    unint64_t v87 = __PAIR64__(v35, v55);
    unint64_t v88 = __PAIR64__(v49, v47);
    lazy protocol witness table accessor for type _GraphInputs.SelectionBasedStorageKey<AnyHashable> and conformance _GraphInputs.SelectionBasedStorageKey<A>();
    PropertyList.subscript.setter();
  }
  LOBYTE(v87) = 1;
  lazy protocol witness table accessor for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction();
  PropertyList.subscript.setter();
  type metadata accessor for ModifiedContent<ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>, LazyContainerModifier>();
  LODWORD(v87) = v72;
  LODWORD(v96) = _GraphValue.value.getter();
  unint64_t v87 = v75;
  unint64_t v88 = v73;
  uint64_t v89 = v51;
  *(void *)&long long v90 = v74;
  *((void *)&v90 + 1) = v50;
  type metadata accessor for Table.Child();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  unint64_t v87 = v97;
  LODWORD(v88) = v98;
  long long v90 = v100;
  uint64_t v89 = v99;
  uint64_t v91 = v101;
  long long v92 = v102;
  int v93 = v103;
  uint64_t v94 = v104;
  char v95 = v105;
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>, LazyContainerModifier> and conformance <> ModifiedContent<A, B>();
  static View.makeDebuggableViewList(view:inputs:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in static Table._makeViewList(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  uint64_t v17 = a5;
  uint64_t v18 = a6;
  uint64_t v8 = type metadata accessor for Table();
  uint64_t v9 = a1 + *(int *)(v8 + 60);
  void v13[2] = v8;
  v13[3] = a3;
  uint64_t v10 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v9, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v13, a3, MEMORY[0x1E4FBC248], v10, MEMORY[0x1E4FBC278], v11);
  return v14;
}

uint64_t partial apply for closure #1 in static Table._makeViewList(view:inputs:)(uint64_t a1)
{
  return partial apply for closure #1 in static Table._makeViewList(view:inputs:)(a1, closure #1 in static Table._makeViewList(view:inputs:));
}

uint64_t type metadata accessor for Table()
{
  return swift_getGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type RowSourceInput and conformance RowSourceInput()
{
  unint64_t result = lazy protocol witness table cache variable for type RowSourceInput and conformance RowSourceInput;
  if (!lazy protocol witness table cache variable for type RowSourceInput and conformance RowSourceInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RowSourceInput and conformance RowSourceInput);
  }
  return result;
}

uint64_t sub_18773C904()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t closure #2 in static Table._makeViewList(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  uint64_t v14 = a4;
  uint64_t v15 = a5;
  uint64_t v16 = a6;
  _OWORD v11[2] = type metadata accessor for Table();
  v11[3] = a4;
  uint64_t v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v11, a4, MEMORY[0x1E4FBC248], v8, MEMORY[0x1E4FBC278], v9);
  return v12;
}

uint64_t partial apply for closure #2 in static Table._makeViewList(view:inputs:)(uint64_t a1)
{
  return partial apply for closure #1 in static Table._makeViewList(view:inputs:)(a1, closure #2 in static Table._makeViewList(view:inputs:));
}

uint64_t partial apply for closure #1 in static Table._makeViewList(view:inputs:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

unint64_t lazy protocol witness table accessor for type ColumnSourceInput and conformance ColumnSourceInput()
{
  unint64_t result = lazy protocol witness table cache variable for type ColumnSourceInput and conformance ColumnSourceInput;
  if (!lazy protocol witness table cache variable for type ColumnSourceInput and conformance ColumnSourceInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnSourceInput and conformance ColumnSourceInput);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _GraphInputs.SelectionBasedStorageKey<AnyHashable> and conformance _GraphInputs.SelectionBasedStorageKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _GraphInputs.SelectionBasedStorageKey<AnyHashable> and conformance _GraphInputs.SelectionBasedStorageKey<A>;
  if (!lazy protocol witness table cache variable for type _GraphInputs.SelectionBasedStorageKey<AnyHashable> and conformance _GraphInputs.SelectionBasedStorageKey<A>)
  {
    type metadata accessor for _GraphInputs.SelectionBasedStorageKey<AnyHashable>(255, &lazy cache variable for type metadata for _GraphInputs.SelectionBasedStorageKey<AnyHashable>, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB968], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _GraphInputs.SelectionBasedStorageKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GraphInputs.SelectionBasedStorageKey<AnyHashable> and conformance _GraphInputs.SelectionBasedStorageKey<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>, LazyContainerModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>, LazyContainerModifier>)
  {
    type metadata accessor for _GraphInputs.SelectionBasedStorageKey<AnyHashable>(255, &lazy cache variable for type metadata for ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>, (uint64_t)&type metadata for ResolvedTableStyle, (uint64_t)&type metadata for AccessibilityAttachmentModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>, LazyContainerModifier>);
    }
  }
}

uint64_t type metadata accessor for Table.Child()
{
  return swift_getGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>, LazyContainerModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>, LazyContainerModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>, LazyContainerModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>, LazyContainerModifier>();
    lazy protocol witness table accessor for type ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>, LazyContainerModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for _GraphInputs.SelectionBasedStorageKey<AnyHashable>(255, &lazy cache variable for type metadata for ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>, (uint64_t)&type metadata for ResolvedTableStyle, (uint64_t)&type metadata for AccessibilityAttachmentModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ResolvedTableStyle and conformance ResolvedTableStyle();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedTableStyle and conformance ResolvedTableStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedTableStyle and conformance ResolvedTableStyle;
  if (!lazy protocol witness table cache variable for type ResolvedTableStyle and conformance ResolvedTableStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedTableStyle and conformance ResolvedTableStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedTableStyle and conformance ResolvedTableStyle;
  if (!lazy protocol witness table cache variable for type ResolvedTableStyle and conformance ResolvedTableStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedTableStyle and conformance ResolvedTableStyle);
  }
  return result;
}

uint64_t Table.Child.table.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Table();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t Table.Child.value.getter@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v36 = a7;
  uint64_t v37 = a5;
  uint64_t v34 = a4;
  v40[0] = a2;
  v40[1] = a3;
  void v40[2] = a4;
  v40[3] = a5;
  v40[4] = a6;
  v30[1] = a6;
  uint64_t v9 = (int *)type metadata accessor for Table();
  uint64_t v10 = *((void *)v9 - 1);
  MEMORY[0x1F4188790](v9);
  uint64_t v35 = (uint64_t)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v30 - v13;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)v30 - v16;
  int v31 = a1;
  uint64_t v30[2] = a3;
  Table.Child.table.getter((uint64_t)v30 - v16);
  outlined init with copy of Binding<SelectionManagerBox<AnyHashable>>?((uint64_t)&v17[v9[16]], (uint64_t)v40);
  uint64_t v18 = *(void (**)(char *, int *))(v10 + 8);
  v18(v17, v9);
  Table.Child.table.getter((uint64_t)v14);
  char v19 = (uint64_t *)&v14[v9[17]];
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  uint64_t v32 = v19[2];
  uint64_t v33 = v20;
  outlined copy of Binding<[SwiftUIAnySortComparator]>?(v21, v20);
  v18(v14, v9);
  uint64_t v22 = v35;
  Table.Child.table.getter(v35);
  unint64_t v23 = (uint64_t *)(v22 + v9[18]);
  uint64_t v24 = v22;
  uint64_t v25 = *v23;
  uint64_t v26 = v23[1];
  uint64_t v27 = v23[2];
  uint64_t v28 = v23[3];
  outlined copy of Binding<AnyTableColumnCustomization>?(*v23, v26);
  v18((char *)v24, v9);
  outlined init with take of Binding<SelectionManagerBox<AnyHashable>>?((uint64_t)v40, (uint64_t)v39);
  v39[8] = v21;
  v39[9] = v33;
  v39[10] = v32;
  v39[11] = v25;
  unsigned char v39[12] = v26;
  v39[13] = v27;
  v39[14] = v28;
  static AccessibilityVisibility.containerElement.getter();
  specialized View.accessibility<A>(_:_:isEnabled:)(v38 | ((unint64_t)v38 << 32), 1, (uint64_t)v40);
  outlined destroy of ResolvedTableStyle((uint64_t)v39);
  outlined init with copy of ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>((uint64_t)v40, v36);
  return outlined destroy of ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>((uint64_t)v40, &lazy cache variable for type metadata for ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>, (uint64_t)&type metadata for ResolvedTableStyle, (uint64_t)&type metadata for AccessibilityAttachmentModifier, MEMORY[0x1E4F3FBA0]);
}

uint64_t (*Table.ChildSelectionMenu.base.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(uint64_t a1)
{
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  swift_getFunctionTypeMetadata1();
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v13 = *Value;
  uint64_t v12 = Value[1];
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = a2;
  v14[3] = a3;
  void v14[4] = a4;
  v14[5] = a5;
  v14[6] = a6;
  v14[7] = v13;
  v14[8] = v12;
  swift_retain();
  return partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Set<A.Identifiable.ID>) -> (@out PlatformItemList);
}

double protocol witness for static Rule.initialValue.getter in conformance Table<A, B, C>.Child@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 128) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance Table<A, B, C>.Child@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return Table.Child.value.getter(*v2, a1[2], a1[3], a1[4], a1[5], a1[6], a2);
}

uint64_t (*Table.ChildSelectionMenu.value.getter(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(uint64_t a1)
{
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a2;
  *(void *)(v12 + 24) = a3;
  *(void *)(v12 + 32) = a4;
  *(void *)(v12 + 40) = a5;
  *(void *)(v12 + 48) = a6;
  *(_DWORD *)(v12 + 56) = a1;
  return partial apply for closure #1 in Table.ChildSelectionMenu.value.getter;
}

uint64_t closure #1 in Table.ChildSelectionMenu.value.getter(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void (*v46)(_OWORD *__return_ptr, _OWORD *);
  uint64_t v47;
  unsigned char v48[4];
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (**v55)(unsigned char *, uint64_t);
  void (**v56)(unsigned char *, unsigned char *, uint64_t);
  void (**v57)(unsigned char *, unsigned char *, uint64_t);
  uint64_t (**v58)(unsigned char *, uint64_t);
  uint64_t AssociatedConformanceWitness;
  unsigned char *v60;
  unsigned char *v61;
  unsigned char *v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  int64_t v66;
  _OWORD v67[2];
  uint64_t v68;
  _OWORD v69[2];
  uint64_t v70;
  uint64_t v71;

  uint64_t v54 = a7;
  uint64_t v52 = a5;
  unsigned int v49 = a2;
  uint64_t v53 = a6;
  uint64_t v51 = a4;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unsigned int v63 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v63 - 8);
  MEMORY[0x1F4188790](v63);
  uint64_t v12 = &v48[-v11];
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v14);
  unint64_t v62 = &v48[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v16);
  uint64_t v61 = &v48[-v17];
  MEMORY[0x1F4188790](v18);
  uint64_t v60 = &v48[-v19];
  uint64_t v20 = AssociatedTypeWitness;
  uint64_t v50 = a3;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v71 = Set.init()();
  uint64_t v21 = *(void *)(a1 + 56);
  unsigned int v64 = a1 + 56;
  uint64_t v22 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v23 = -1;
  if (v22 < 64) {
    uint64_t v23 = ~(-1 << v22);
  }
  unint64_t v24 = v23 & v21;
  unsigned int v65 = (unint64_t)(v22 + 63) >> 6;
  uint64_t v25 = (void (**)(void, void, void, void))(v13 + 56);
  CGRect v57 = (void (**)(unsigned char *, unsigned char *, uint64_t))(v13 + 32);
  uint64_t v58 = (uint64_t (**)(unsigned char *, uint64_t))(v10 + 8);
  int v56 = (void (**)(unsigned char *, unsigned char *, uint64_t))(v13 + 16);
  unsigned int v55 = (uint64_t (**)(unsigned char *, uint64_t))(v13 + 8);
  uint64_t v26 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v28 = 0;
  uint64_t v29 = MEMORY[0x1E4FBB960];
  if (v24) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v32 = v28 + 1;
  if (!__OFADD__(v28, 1))
  {
    if (v32 < v65)
    {
      unint64_t v33 = *(void *)(v64 + 8 * v32);
      ++v28;
      if (v33) {
        goto LABEL_20;
      }
      int64_t v28 = v32 + 1;
      if (v32 + 1 >= v65) {
        goto LABEL_24;
      }
      unint64_t v33 = *(void *)(v64 + 8 * v28);
      if (v33) {
        goto LABEL_20;
      }
      int64_t v28 = v32 + 2;
      if (v32 + 2 >= v65) {
        goto LABEL_24;
      }
      unint64_t v33 = *(void *)(v64 + 8 * v28);
      if (v33)
      {
LABEL_20:
        unint64_t v24 = (v33 - 1) & v33;
        for (unint64_t i = __clz(__rbit64(v33)) + (v28 << 6); ; unint64_t i = v30 | (v28 << 6))
        {
          outlined init with copy of AnyHashable(*(void *)(v26 + 48) + 40 * i, (uint64_t)v69);
          v67[0] = v69[0];
          v67[1] = v69[1];
          uint64_t v68 = v70;
          char v35 = swift_dynamicCast();
          uint64_t v36 = (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t))*v25;
          if (v35)
          {
            v36(v12, 0, 1, v20);
            uint64_t v37 = *v57;
            char v66 = v28;
            uint64_t v38 = v29;
            unint64_t v39 = v60;
            v37(v60, v12, v20);
            (*v56)(v62, v39, v20);
            type metadata accessor for Set();
            uint64_t v40 = v25;
            uint64_t v41 = v26;
            uint64_t v42 = v61;
            Set.insert(_:)();
            unint64_t v43 = *v55;
            (*v55)(v42, v20);
            uint64_t v44 = v39;
            uint64_t v29 = v38;
            int64_t v28 = v66;
            uint64_t result = v43(v44, v20);
            uint64_t v26 = v41;
            uint64_t v25 = v40;
            if (!v24) {
              goto LABEL_7;
            }
          }
          else
          {
            v36(v12, 1, 1, v20);
            uint64_t result = (*v58)(v12, v63);
            if (!v24) {
              goto LABEL_7;
            }
          }
LABEL_6:
          unint64_t v30 = __clz(__rbit64(v24));
          v24 &= v24 - 1;
        }
      }
      int64_t v34 = v32 + 3;
      if (v34 < v65)
      {
        unint64_t v33 = *(void *)(v64 + 8 * v34);
        if (v33)
        {
          int64_t v28 = v34;
          goto LABEL_20;
        }
        while (1)
        {
          int64_t v28 = v34 + 1;
          if (__OFADD__(v34, 1)) {
            goto LABEL_26;
          }
          if (v28 >= v65) {
            break;
          }
          unint64_t v33 = *(void *)(v64 + 8 * v28);
          ++v34;
          if (v33) {
            goto LABEL_20;
          }
        }
      }
    }
LABEL_24:
    swift_release();
    Table.ChildSelectionMenu.base.getter(v49, v50, v51, v52, v53, v54);
    uint64_t v46 = *(void (**)(_OWORD *__return_ptr, _OWORD *))(v45 + 56);
    *(void *)&v69[0] = v71;
    v46(v67, v69);
    unsigned int v47 = *(void *)&v67[0];
    swift_release();
    swift_bridgeObjectRelease();
    return v47;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t (*Table.ChildSelectionAction.base.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(uint64_t a1)
{
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  swift_getFunctionTypeMetadata1();
  type metadata accessor for Optional();
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v12 = *Value;
  uint64_t v13 = Value[1];
  if (*Value)
  {
    uint64_t v14 = (void *)swift_allocObject();
    v14[2] = a2;
    v14[3] = a3;
    void v14[4] = a4;
    v14[5] = a5;
    v14[6] = a6;
    v14[7] = v12;
    v14[8] = v13;
    uint64_t v15 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Set<A.Identifiable.ID>) -> (@out ());
  }
  else
  {
    uint64_t v15 = 0;
  }
  outlined copy of AppIntentExecutor?(v12);
  return v15;
}

uint64_t protocol witness for Rule.value.getter in conformance Table<A, B, C>.ChildSelectionMenu@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return protocol witness for Rule.value.getter in conformance Table<A, B, C>.ChildSelectionMenu(a1, (void (*)(void, void, void, void, void, void))Table.ChildSelectionMenu.value.getter, (uint64_t)partial apply for closure #1 in Table.ChildSelectionMenu.value.getter, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Set<AnyHashable>) -> (@owned PlatformItemList), a2);
}

uint64_t (*Table.ChildSelectionAction.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(uint64_t a1)
{
  uint64_t result = Table.ChildSelectionAction.base.getter(a1, a2, a3, a4, a5, a6);
  if (result)
  {
    uint64_t v13 = result;
    uint64_t v14 = v12;
    uint64_t v15 = (void *)swift_allocObject();
    void v15[2] = a2;
    v15[3] = a3;
    void v15[4] = a4;
    void v15[5] = a5;
    void v15[6] = a6;
    v15[7] = v13;
    unsigned char v15[8] = v14;
    return partial apply for closure #1 in Table.ChildSelectionAction.value.getter;
  }
  return result;
}

uint64_t closure #1 in Table.ChildSelectionAction.value.getter(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v35 = a3;
  uint64_t v36 = a2;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v45 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v45 - 8);
  MEMORY[0x1F4188790](v45);
  uint64_t v7 = (char *)&v35 - v6;
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v44 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  unint64_t v43 = (char *)&v35 - v12;
  MEMORY[0x1F4188790](v13);
  uint64_t v42 = (char *)&v35 - v14;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v54 = Set.init()();
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v46 = a1 + 56;
  uint64_t v16 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  int64_t v47 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v19 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  unint64_t v39 = (void (**)(char *, char *, uint64_t))(v8 + 32);
  uint64_t v40 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
  uint64_t v38 = (void (**)(char *, char *, uint64_t))(v8 + 16);
  uint64_t v37 = (uint64_t (**)(char *, uint64_t))(v8 + 8);
  uint64_t v20 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v22 = 0;
  uint64_t v23 = v42;
  unint64_t v24 = v43;
  if (v18) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v27 = v22 + 1;
  if (!__OFADD__(v22, 1))
  {
    if (v27 < v47)
    {
      unint64_t v28 = *(void *)(v46 + 8 * v27);
      ++v22;
      if (v28) {
        goto LABEL_20;
      }
      int64_t v22 = v27 + 1;
      if (v27 + 1 >= v47) {
        goto LABEL_24;
      }
      unint64_t v28 = *(void *)(v46 + 8 * v22);
      if (v28) {
        goto LABEL_20;
      }
      int64_t v22 = v27 + 2;
      if (v27 + 2 >= v47) {
        goto LABEL_24;
      }
      unint64_t v28 = *(void *)(v46 + 8 * v22);
      if (v28)
      {
LABEL_20:
        unint64_t v18 = (v28 - 1) & v28;
        for (unint64_t i = __clz(__rbit64(v28)) + (v22 << 6); ; unint64_t i = v25 | (v22 << 6))
        {
          outlined init with copy of AnyHashable(*(void *)(v20 + 48) + 40 * i, (uint64_t)v52);
          long long v49 = v52[0];
          long long v50 = v52[1];
          uint64_t v51 = v53;
          char v30 = swift_dynamicCast();
          int v31 = *v19;
          if (v30)
          {
            v31(v7, 0, 1, AssociatedTypeWitness);
            (*v39)(v23, v7, AssociatedTypeWitness);
            int64_t v32 = *v38;
            int64_t v48 = v22;
            v32(v44, v23, AssociatedTypeWitness);
            type metadata accessor for Set();
            uint64_t v33 = v20;
            Set.insert(_:)();
            int64_t v34 = *v37;
            (*v37)(v24, AssociatedTypeWitness);
            uint64_t result = v34(v23, AssociatedTypeWitness);
            int64_t v22 = v48;
            uint64_t v20 = v33;
            if (!v18) {
              goto LABEL_7;
            }
          }
          else
          {
            v31(v7, 1, 1, AssociatedTypeWitness);
            uint64_t result = (*v40)(v7, v45);
            if (!v18) {
              goto LABEL_7;
            }
          }
LABEL_6:
          unint64_t v25 = __clz(__rbit64(v18));
          v18 &= v18 - 1;
        }
      }
      int64_t v29 = v27 + 3;
      if (v29 < v47)
      {
        unint64_t v28 = *(void *)(v46 + 8 * v29);
        if (v28)
        {
          int64_t v22 = v29;
          goto LABEL_20;
        }
        while (1)
        {
          int64_t v22 = v29 + 1;
          if (__OFADD__(v29, 1)) {
            goto LABEL_26;
          }
          if (v22 >= v47) {
            break;
          }
          unint64_t v28 = *(void *)(v46 + 8 * v22);
          ++v29;
          if (v28) {
            goto LABEL_20;
          }
        }
      }
    }
LABEL_24:
    swift_release();
    v36(v54);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t (*Table.ChildSelectionEnabled.base.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))()
{
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getFunctionTypeMetadata1();
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v13 = *Value;
  uint64_t v12 = Value[1];
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = a2;
  v14[3] = a3;
  void v14[4] = a4;
  v14[5] = a5;
  v14[6] = a6;
  v14[7] = v13;
  v14[8] = v12;
  swift_retain();
  return partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Identifiable.ID) -> (@out Bool);
}

uint64_t protocol witness for Rule.value.getter in conformance Table<A, B, C>.ChildSelectionAction@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (uint64_t)Table.ChildSelectionAction.value.getter(*v2, a1[2], a1[3], a1[4], a1[5], a1[6]);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = v5;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v6;
    *(void *)(result + 24) = v7;
    uint64_t v8 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Set<AnyHashable>) -> ();
  }
  else
  {
    uint64_t v8 = 0;
  }
  *a2 = v8;
  a2[1] = result;
  return result;
}

uint64_t (*Table.ChildSelectionEnabled.value.getter(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(uint64_t a1)
{
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a2;
  *(void *)(v12 + 24) = a3;
  *(void *)(v12 + 32) = a4;
  *(void *)(v12 + 40) = a5;
  *(void *)(v12 + 48) = a6;
  *(_DWORD *)(v12 + 56) = a1;
  return partial apply for closure #1 in Table.ChildSelectionEnabled.value.getter;
}

uint64_t closure #1 in Table.ChildSelectionEnabled.value.getter(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = a5;
  uint64_t v28 = a7;
  unsigned int v26 = a2;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = &v25[-v14];
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = &v25[-v18];
  outlined init with copy of AnyHashable(a1, (uint64_t)v29);
  char v20 = swift_dynamicCast();
  uint64_t v21 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  if (v20)
  {
    v21(v15, 0, 1, AssociatedTypeWitness);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v16 + 32))(v19, v15, AssociatedTypeWitness);
    Table.ChildSelectionEnabled.base.getter(v26, a3, a4, v27, a6, v28);
    (*(void (**)(void *__return_ptr, unsigned char *))(v22 + 56))(v29, v19);
    uint64_t v23 = LOBYTE(v29[0]);
    swift_release();
    (*(void (**)(unsigned char *, uint64_t))(v16 + 8))(v19, AssociatedTypeWitness);
  }
  else
  {
    v21(v15, 1, 1, AssociatedTypeWitness);
    (*(void (**)(unsigned char *, uint64_t))(v13 + 8))(v15, v12);
    return 0;
  }
  return v23;
}

uint64_t protocol witness for Rule.value.getter in conformance Table<A, B, C>.ChildSelectionEnabled@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return protocol witness for Rule.value.getter in conformance Table<A, B, C>.ChildSelectionMenu(a1, (void (*)(void, void, void, void, void, void))Table.ChildSelectionEnabled.value.getter, (uint64_t)partial apply for closure #1 in Table.ChildSelectionEnabled.value.getter, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed AnyHashable) -> (@unowned Bool), a2);
}

uint64_t protocol witness for Rule.value.getter in conformance Table<A, B, C>.ChildSelectionMenu@<X0>(void *a1@<X0>, void (*a2)(void, void, void, void, void, void)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, void *a5@<X8>)
{
  a2(*v5, a1[2], a1[3], a1[4], a1[5], a1[6]);
  uint64_t v10 = v9;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a3;
  *(void *)(result + 24) = v10;
  *a5 = a4;
  a5[1] = result;
  return result;
}

uint64_t Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t (*a9)(uint64_t), uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v59 = a7;
  uint64_t v60 = a6;
  int v56 = a9;
  uint64_t v57 = a10;
  *(void *)&long long v53 = a17;
  uint64_t v61 = *(void *)(a13 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v58 = (char *)v49 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = *v23;
  uint64_t v52 = v23[1];
  uint64_t v24 = v23[3];
  uint64_t v50 = v23[2];
  *(void *)&long long v70 = a11;
  *((void *)&v70 + 1) = v25;
  v49[2] = v25;
  uint64_t v63 = v26;
  uint64_t v71 = v26;
  uint64_t v72 = v27;
  v49[1] = v27;
  uint64_t v73 = v28;
  int64_t v29 = (int *)type metadata accessor for Table();
  char v30 = (_OWORD *)(a8 + v29[16]);
  *(_OWORD *)((char *)v30 + 41) = 0u;
  v30[1] = 0u;
  uint64_t v30[2] = 0u;
  *char v30 = 0u;
  int v31 = (uint64_t *)(a8 + v29[17]);
  *int v31 = 0;
  v31[1] = 0;
  v31[2] = 0;
  uint64_t v32 = v29[18];
  uint64_t v54 = a8;
  uint64_t v33 = a8 + v32;
  *(_OWORD *)uint64_t v33 = 0u;
  *(_OWORD *)(v33 + 16) = 0u;
  uint64_t v65 = a2;
  outlined assign with copy of Binding<SelectionManagerBox<AnyHashable>>?(a2, (uint64_t)v30);
  uint64_t v64 = a3;
  uint64_t v66 = a3;
  uint64_t v67 = a4;
  uint64_t v62 = a4;
  uint64_t v55 = a5;
  uint64_t v68 = a5;
  type metadata accessor for Array();
  type metadata accessor for Binding();
  type metadata accessor for ToAnyComparatorArray();
  swift_getWitnessTable();
  uint64_t v34 = v52;
  Binding.projecting<A>(_:)();
  long long v53 = v70;
  uint64_t v35 = v71;
  outlined consume of Binding<[SwiftUIAnySortComparator]>?(*v31, v31[1]);
  *(_OWORD *)int v31 = v53;
  v31[2] = v35;
  if (v34)
  {
    uint64_t v36 = v51;
    uint64_t v66 = v51;
    uint64_t v67 = v34;
    uint64_t v68 = v50;
    uint64_t v69 = v24;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a11, AssociatedConformanceWitness, v38, v39);
    type metadata accessor for TableColumnCustomization();
    type metadata accessor for Binding();
    type metadata accessor for TableColumnCustomization.ToAnyCustomization();
    swift_getWitnessTable();
    Binding.projecting<A>(_:)();
    outlined consume of Binding<AnyTableColumnCustomization>?(v36, v34);
    uint64_t v41 = *((void *)&v70 + 1);
    uint64_t v40 = v70;
    uint64_t v42 = v71;
    uint64_t v43 = v72;
  }
  else
  {
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
  }
  uint64_t v44 = outlined consume of Binding<AnyTableColumnCustomization>?(*(void *)v33, *(void *)(v33 + 8));
  *(void *)uint64_t v33 = v40;
  *(void *)(v33 + 8) = v41;
  *(void *)(v33 + 16) = v42;
  *(void *)(v33 + 24) = v43;
  uint64_t v45 = v54;
  uint64_t v46 = v56(v44);
  int64_t v47 = v58;
  v60(v46);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of Binding<SelectionManagerBox<AnyHashable>>?(v65);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v61 + 32))(v45, v47, v63);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance Table<A, B, C>()
{
  swift_getWitnessTable();

  return static MultiView._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Table<A, B, C>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static Table._makeViewList(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a3 + 32), *(void *)(a3 + 40), *(void *)(a3 + 48), a4);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance Table<A, B, C>()
{
  return static MultiView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance Table<A, B, C>()
{
}

uint64_t closure #1 in ToAnyComparatorArray.get(base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  double v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v10 + 16))(v9, v7);
  return SwiftUIAnySortComparator.init<A>(_:)((uint64_t)v9, a2, a3, a4);
}

uint64_t protocol witness for Projection.get(base:) in conformance ToAnyComparatorArray<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized ToAnyComparatorArray.get(base:)(*a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
  *a3 = result;
  return result;
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance ToAnyComparatorArray<A>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return specialized ToAnyComparatorArray.set(base:newValue:)(a1, *a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t Table.init<A>(sortOrder:columns:rows:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  memset(v16, 0, 57);
  return Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(a1, (uint64_t)v16, a1, a2, a3, a4, a5, a9, a6, a7, a8, a10, a11, a12, a13, a14, a15);
}

uint64_t Table.init<A>(selection:sortOrder:columns:rows:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness, AssociatedConformanceWitness, v19, v20);
  type metadata accessor for Optional();
  uint64_t v21 = type metadata accessor for Binding();
  type metadata accessor for OptionalToAnySelectionManager();
  swift_getWitnessTable();
  uint64_t v22 = Binding.projecting<A>(_:)();
  Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(v22, (uint64_t)v32, a2, a3, a4, a5, a6, a9, a7, a8, a10, a11, a12, a13, a14, a15, a16);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(a1, v21);
}

uint64_t Table.init<A>(selection:sortOrder:columns:rows:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X5>, void (*a4)(uint64_t)@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t (*a7)(uint64_t), uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness, AssociatedConformanceWitness, v17, v18);
  type metadata accessor for Set();
  type metadata accessor for Binding();
  type metadata accessor for SetToAnySelectionManager();
  swift_getWitnessTable();
  uint64_t v19 = Binding.projecting<A>(_:)();
  Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(v19, (uint64_t)v27, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t Table.init<A>(_:columns:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  long long v27 = 0u;
  memset(v28, 0, 57);
  long long v26 = 0u;
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  uint64_t v22 = a6;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a1;
  swift_getAssociatedConformanceWitness();
  uint64_t v16 = type metadata accessor for TableForEachContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  Table.init(of:selection:columnCustomization:columns:rows:)(WitnessTable, (uint64_t)v28, a2, a3, (uint64_t (*)(uint64_t))partial apply for closure #1 in Table.init<A>(_:columns:), (uint64_t)v19, a4, a9, v16, a5, WitnessTable);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a6 - 8) + 8))(a1, a6);
}

uint64_t Table.init<A>(_:selection:columns:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness, AssociatedConformanceWitness, v17, v18);
  type metadata accessor for Optional();
  uint64_t v19 = type metadata accessor for Binding();
  type metadata accessor for OptionalToAnySelectionManager();
  swift_getWitnessTable();
  Binding.projecting<A>(_:)();
  long long v34 = 0u;
  long long v35 = 0u;
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  uint64_t v30 = a7;
  uint64_t v31 = a8;
  uint64_t v32 = a10;
  uint64_t v33 = a1;
  uint64_t v20 = type metadata accessor for TableForEachContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  Table.init(of:selection:columnCustomization:columns:rows:)(WitnessTable, (uint64_t)v36, a3, a4, (uint64_t (*)(uint64_t))partial apply for closure #1 in Table.init<A>(_:columns:), (uint64_t)v27, a5, a9, v20, a6, WitnessTable);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(a2, v19);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a7 - 8) + 8))(a1, a7);
}

uint64_t Table.init<A>(_:selection:columns:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9)
{
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness, AssociatedConformanceWitness, v13, v14);
  type metadata accessor for Set();
  type metadata accessor for Binding();
  type metadata accessor for SetToAnySelectionManager();
  swift_getWitnessTable();
  Binding.projecting<A>(_:)();
  long long v29 = 0u;
  long long v30 = 0u;
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  uint64_t v25 = a7;
  uint64_t v26 = a8;
  uint64_t v27 = a9;
  uint64_t v28 = a1;
  uint64_t v15 = type metadata accessor for TableForEachContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  Table.init(of:selection:columnCustomization:columns:rows:)(WitnessTable, (uint64_t)v31, a2, a3, (uint64_t (*)(uint64_t))partial apply for closure #1 in Table.init<A>(_:columns:), (uint64_t)v22, a4, a6, v15, a5, WitnessTable);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a7 - 8) + 8))(a1, a7);
}

uint64_t Table.init<A, B>(_:sortOrder:columns:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  memset(v37, 0, 57);
  long long v35 = 0u;
  long long v36 = 0u;
  uint64_t v27 = a7;
  uint64_t v28 = a8;
  uint64_t v29 = a10;
  uint64_t v30 = a11;
  uint64_t v31 = a12;
  uint64_t v32 = a13;
  uint64_t v33 = a14;
  uint64_t v34 = a1;
  swift_getAssociatedConformanceWitness();
  uint64_t v19 = type metadata accessor for TableForEachContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(WitnessTable, (uint64_t)v37, a2, a3, a4, a5, a6, a9, (uint64_t (*)(uint64_t))partial apply for closure #1 in Table.init<A, B>(_:sortOrder:columns:), (uint64_t)v26, a7, v19, a8, a11, WitnessTable, a12, a14);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a10 - 8) + 8))(a1, a10);
}

uint64_t Table.init<A, B>(_:selection:sortOrder:columns:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness, AssociatedConformanceWitness, v18, v19);
  type metadata accessor for Optional();
  uint64_t v20 = type metadata accessor for Binding();
  type metadata accessor for OptionalToAnySelectionManager();
  swift_getWitnessTable();
  Binding.projecting<A>(_:)();
  long long v41 = 0u;
  long long v42 = 0u;
  uint64_t v33 = a8;
  uint64_t v34 = a10;
  uint64_t v35 = a11;
  uint64_t v36 = a12;
  uint64_t v37 = a13;
  uint64_t v38 = a14;
  uint64_t v39 = a15;
  uint64_t v40 = a1;
  uint64_t v21 = type metadata accessor for TableForEachContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(WitnessTable, (uint64_t)v43, a3, a4, a5, a6, a7, a9, (uint64_t (*)(uint64_t))partial apply for closure #1 in Table.init<A, B>(_:sortOrder:columns:), (uint64_t)v32, a8, v21, a10, a12, WitnessTable, a13, a15);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(a2, v20);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a11 - 8) + 8))(a1, a11);
}

uint64_t Table.init<A, B>(_:selection:sortOrder:columns:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, void (*a5)(uint64_t)@<X7>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness, AssociatedConformanceWitness, v16, v17);
  type metadata accessor for Set();
  type metadata accessor for Binding();
  type metadata accessor for SetToAnySelectionManager();
  swift_getWitnessTable();
  Binding.projecting<A>(_:)();
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v28 = a8;
  uint64_t v29 = a9;
  uint64_t v30 = a10;
  uint64_t v31 = a11;
  uint64_t v32 = a12;
  uint64_t v33 = a13;
  uint64_t v34 = a14;
  uint64_t v35 = a1;
  uint64_t v18 = type metadata accessor for TableForEachContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(WitnessTable, (uint64_t)v38, a2, a3, a4, a5, a7, a6, (uint64_t (*)(uint64_t))partial apply for closure #1 in Table.init<A, B>(_:sortOrder:columns:), (uint64_t)v27, a8, v18, a9, a11, WitnessTable, a12, a14);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a10 - 8) + 8))(a1, a10);
}

uint64_t Table.init(of:columnCustomization:columns:rows:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X2>, uint64_t a3@<X3>, uint64_t (*a4)(uint64_t)@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  memset(v11, 0, 57);
  return Table.init(of:selection:columnCustomization:columns:rows:)(a1, (uint64_t)v11, a2, a3, a4, a5, a6, a8, a7, a9, a10);
}

uint64_t Table.init(of:selection:columnCustomization:columns:rows:)@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t)@<X3>, uint64_t a3@<X4>, uint64_t (*a4)(uint64_t)@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10)
{
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness, AssociatedConformanceWitness, v14, v15);
  type metadata accessor for Optional();
  uint64_t v16 = type metadata accessor for Binding();
  type metadata accessor for OptionalToAnySelectionManager();
  swift_getWitnessTable();
  uint64_t v17 = Binding.projecting<A>(_:)();
  Table.init(of:selection:columnCustomization:columns:rows:)(v17, (uint64_t)v24, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a1, v16);
}

uint64_t Table.init(of:selection:columnCustomization:columns:rows:)@<X0>(void (*a1)(uint64_t)@<X5>, uint64_t a2@<X6>, uint64_t (*a3)(uint64_t)@<X7>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness, AssociatedConformanceWitness, v11, v12);
  type metadata accessor for Set();
  type metadata accessor for Binding();
  type metadata accessor for SetToAnySelectionManager();
  swift_getWitnessTable();
  uint64_t v13 = Binding.projecting<A>(_:)();
  Table.init(of:selection:columnCustomization:columns:rows:)(v13, (uint64_t)v19, a1, a2, a3, a5, a6, a4, a7, a8, a9);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t Table.init<A>(of:sortOrder:columnCustomization:columns:rows:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X5>, uint64_t a6@<X6>, uint64_t (*a7)(uint64_t)@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  memset(v17, 0, 57);
  return Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(a1, (uint64_t)v17, a2, a3, a4, a5, a6, a8, a7, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void (*a5)(uint64_t)@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t (*a8)(uint64_t), uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness, AssociatedConformanceWitness, v19, v20);
  type metadata accessor for Optional();
  uint64_t v21 = type metadata accessor for Binding();
  type metadata accessor for OptionalToAnySelectionManager();
  swift_getWitnessTable();
  uint64_t v22 = Binding.projecting<A>(_:)();
  Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(v22, (uint64_t)v30, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(a1, v21);
}

uint64_t Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X8>, void (*a5)(uint64_t), uint64_t a6, uint64_t (*a7)(uint64_t), uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness, AssociatedConformanceWitness, v17, v18);
  type metadata accessor for Set();
  type metadata accessor for Binding();
  type metadata accessor for SetToAnySelectionManager();
  swift_getWitnessTable();
  uint64_t v19 = Binding.projecting<A>(_:)();
  Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(v19, (uint64_t)v25, a1, a2, a3, a5, a6, a4, a7, a8, a9, a10, a11, a12, a13, a14, a15);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t Table.init<A>(_:columnCustomization:columns:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v17 = *a2;
  uint64_t v18 = a2[3];
  memset(v32, 0, 57);
  uint64_t v28 = a1;
  uint64_t v29 = v17;
  long long v30 = *(_OWORD *)(a2 + 1);
  uint64_t v31 = v18;
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  uint64_t v25 = a7;
  uint64_t v26 = a8;
  uint64_t v27 = a10;
  swift_getAssociatedConformanceWitness();
  uint64_t v19 = type metadata accessor for TableForEachContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  Table.init(of:selection:columnCustomization:columns:rows:)(WitnessTable, (uint64_t)v32, a3, a4, (uint64_t (*)(uint64_t))partial apply for closure #1 in Table.init<A>(_:columns:), (uint64_t)v22, a5, a9, v19, a6, WitnessTable);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a7 - 8) + 8))(a1, a7);
}

uint64_t Table.init<A>(_:selection:columnCustomization:columns:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v25 = *a3;
  uint64_t v26 = a3[3];
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  long long v24 = *(_OWORD *)(a3 + 1);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness, AssociatedConformanceWitness, v18, v19);
  type metadata accessor for Optional();
  uint64_t v20 = type metadata accessor for Binding();
  type metadata accessor for OptionalToAnySelectionManager();
  swift_getWitnessTable();
  Binding.projecting<A>(_:)();
  uint64_t v38 = v25;
  long long v39 = v24;
  uint64_t v40 = v26;
  uint64_t v32 = a6;
  uint64_t v33 = a7;
  uint64_t v34 = a8;
  uint64_t v35 = a10;
  uint64_t v36 = a11;
  uint64_t v37 = a1;
  uint64_t v21 = type metadata accessor for TableForEachContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  Table.init(of:selection:columnCustomization:columns:rows:)(WitnessTable, (uint64_t)v41, a4, a5, (uint64_t (*)(uint64_t))partial apply for closure #1 in Table.init<A>(_:columns:), (uint64_t)v31, a6, a9, v21, a7, WitnessTable);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(a2, v20);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a8 - 8) + 8))(a1, a8);
}

uint64_t Table.init<A>(_:selection:columnCustomization:columns:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v23 = *a5;
  uint64_t v24 = a5[3];
  uint64_t v36 = a2;
  *(void *)&long long v37 = a3;
  *((void *)&v37 + 1) = a4;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  long long v22 = *(_OWORD *)(a5 + 1);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness, AssociatedConformanceWitness, v17, v18);
  type metadata accessor for Set();
  type metadata accessor for Binding();
  type metadata accessor for SetToAnySelectionManager();
  swift_getWitnessTable();
  Binding.projecting<A>(_:)();
  uint64_t v36 = v23;
  long long v37 = v22;
  uint64_t v38 = v24;
  uint64_t v30 = a8;
  uint64_t v31 = a10;
  uint64_t v32 = a11;
  uint64_t v33 = a12;
  uint64_t v34 = a13;
  uint64_t v35 = a1;
  uint64_t v19 = type metadata accessor for TableForEachContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  Table.init(of:selection:columnCustomization:columns:rows:)(WitnessTable, (uint64_t)v39, a6, a7, (uint64_t (*)(uint64_t))partial apply for closure #1 in Table.init<A>(_:columns:), (uint64_t)v29, a8, a9, v19, a10, WitnessTable);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a11 - 8) + 8))(a1, a11);
}

uint64_t closure #1 in Table.init<A>(_:columns:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = type metadata accessor for TableForEachContent();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v21 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, a1, a4, v15);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v9, a4);
  uint64_t WitnessTable = swift_getWitnessTable();
  static TableRowBuilder.buildExpression<A>(_:)(v13, a2, v10, WitnessTable);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v13, v10);
  static TableRowBuilder.buildExpression<A>(_:)(v17, a2, v10, WitnessTable);
  return ((uint64_t (*)(char *, uint64_t))v19)(v17, v10);
}

uint64_t Table.init<A, B>(_:sortOrder:columnCustomization:columns:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v19 = *a5;
  uint64_t v20 = a5[3];
  memset(v40, 0, 57);
  uint64_t v36 = a1;
  uint64_t v37 = v19;
  long long v38 = *(_OWORD *)(a5 + 1);
  uint64_t v39 = v20;
  uint64_t v29 = a8;
  uint64_t v30 = a10;
  uint64_t v31 = a11;
  uint64_t v32 = a12;
  uint64_t v33 = a13;
  uint64_t v34 = a14;
  uint64_t v35 = a15;
  swift_getAssociatedConformanceWitness();
  uint64_t v21 = type metadata accessor for TableForEachContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(WitnessTable, (uint64_t)v40, a2, a3, a4, a6, a7, a9, (uint64_t (*)(uint64_t))partial apply for closure #1 in Table.init<A, B>(_:sortOrder:columns:), (uint64_t)v28, a8, v21, a10, a12, WitnessTable, a13, a15);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a11 - 8) + 8))(a1, a11);
}

uint64_t Table.init<A, B>(_:selection:sortOrder:columnCustomization:columns:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v27 = *a6;
  uint64_t v17 = a6[3];
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  long long v26 = *(_OWORD *)(a6 + 1);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness, AssociatedConformanceWitness, v20, v21);
  type metadata accessor for Optional();
  uint64_t v22 = type metadata accessor for Binding();
  type metadata accessor for OptionalToAnySelectionManager();
  swift_getWitnessTable();
  Binding.projecting<A>(_:)();
  uint64_t v45 = v27;
  long long v46 = v26;
  uint64_t v47 = v17;
  uint64_t v37 = a10;
  uint64_t v38 = a11;
  uint64_t v39 = a12;
  uint64_t v40 = a13;
  uint64_t v41 = a14;
  uint64_t v42 = a15;
  uint64_t v43 = a16;
  uint64_t v44 = a1;
  uint64_t v23 = type metadata accessor for TableForEachContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(WitnessTable, (uint64_t)v48, a3, a4, a5, a7, a8, a9, (uint64_t (*)(uint64_t))partial apply for closure #1 in Table.init<A, B>(_:sortOrder:columns:), (uint64_t)v36, a10, v23, a11, a13, WitnessTable, a14, a16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(a2, v22);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a12 - 8) + 8))(a1, a12);
}

uint64_t Table.init<A, B>(_:selection:sortOrder:columnCustomization:columns:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X7>, uint64_t a9@<X8>, void (*a10)(uint64_t), uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v27 = *a8;
  uint64_t v28 = a8[3];
  uint64_t v43 = a2;
  *(void *)&long long v44 = a3;
  *((void *)&v44 + 1) = a4;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  long long v26 = *(_OWORD *)(a8 + 1);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness, AssociatedConformanceWitness, v21, v22);
  type metadata accessor for Set();
  type metadata accessor for Binding();
  type metadata accessor for SetToAnySelectionManager();
  swift_getWitnessTable();
  Binding.projecting<A>(_:)();
  uint64_t v43 = v27;
  long long v44 = v26;
  uint64_t v45 = v28;
  uint64_t v35 = a12;
  uint64_t v36 = a13;
  uint64_t v37 = a14;
  uint64_t v38 = a15;
  uint64_t v39 = a16;
  uint64_t v40 = a17;
  uint64_t v41 = a18;
  uint64_t v42 = a1;
  uint64_t v23 = type metadata accessor for TableForEachContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(WitnessTable, (uint64_t)v46, a5, a6, a7, a10, a11, a9, (uint64_t (*)(uint64_t))partial apply for closure #1 in Table.init<A, B>(_:sortOrder:columns:), (uint64_t)v34, a12, v23, a13, a15, WitnessTable, a16, a18);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a14 - 8) + 8))(a1, a14);
}

uint64_t closure #1 in Table.init<A, B>(_:sortOrder:columns:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = type metadata accessor for TableForEachContent();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v21 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, a1, a4, v15);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v9, a4);
  uint64_t WitnessTable = swift_getWitnessTable();
  static TableRowBuilder.buildExpression<A>(_:)(v13, a2, v10, WitnessTable);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v13, v10);
  static TableRowBuilder.buildExpression<A>(_:)(v17, a2, v10, WitnessTable);
  return ((uint64_t (*)(char *, uint64_t))v19)(v17, v10);
}

uint64_t Table.init<A>(_:children:columnCustomization:columns:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, long long *a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v14 = (uint64_t *)(*a2 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v15 = *v14;
  long long v16 = a3[1];
  long long v27 = *a3;
  long long v28 = v16;
  memset(v29, 0, 57);
  uint64_t v22 = a6;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a1;
  long long v26 = a2;
  uint64_t v17 = *(void *)(v14[1] + 16);
  swift_getAssociatedConformanceWitness();
  uint64_t v18 = type metadata accessor for TableOutlineGroupContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  Table.init(of:selection:columnCustomization:columns:rows:)(WitnessTable, (uint64_t)v29, a4, a5, (uint64_t (*)(uint64_t))partial apply for closure #1 in Table.init<A>(_:children:columnCustomization:columns:), (uint64_t)v21, v15, a9, v18, a6, WitnessTable);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a1, v17);
}

uint64_t TableOutlineGroupContent.init(data:children:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(*(void *)(*MEMORY[0x1E4FBC5F0] + *a2 + 8)
                                                                           + 16)
                                                               - 8)
                                                   + 32))(a3, a1, *(void *)(*(void *)(*MEMORY[0x1E4FBC5F0] + *a2 + 8) + 16));
  uint64_t result = type metadata accessor for TableOutlineGroupContent();
  *(void *)(a3 + *(int *)(result + 44)) = a2;
  return result;
}

uint64_t Table.init<A>(_:children:selection:columnCustomization:columns:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, long long *a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v13 = *a2;
  long long v27 = *a4;
  uint64_t v25 = *((void *)a4 + 3);
  uint64_t v26 = *((void *)a4 + 2);
  uint64_t v14 = *(void *)(*a2 + *MEMORY[0x1E4FBC5F0]);
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness, AssociatedConformanceWitness, v17, v18);
  type metadata accessor for Optional();
  uint64_t v19 = type metadata accessor for Binding();
  type metadata accessor for OptionalToAnySelectionManager();
  swift_getWitnessTable();
  Binding.projecting<A>(_:)();
  long long v38 = v27;
  uint64_t v39 = v26;
  uint64_t v40 = v25;
  uint64_t v33 = a7;
  uint64_t v34 = a8;
  uint64_t v35 = a10;
  uint64_t v36 = a1;
  uint64_t v37 = a2;
  uint64_t v20 = *(void *)(*(void *)(*MEMORY[0x1E4FBC5F0] + v13 + 8) + 16);
  uint64_t v21 = type metadata accessor for TableOutlineGroupContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  Table.init(of:selection:columnCustomization:columns:rows:)(WitnessTable, (uint64_t)v41, a5, a6, (uint64_t (*)(uint64_t))partial apply for closure #1 in Table.init<A>(_:children:columnCustomization:columns:), (uint64_t)v32, v14, a9, v21, a7, WitnessTable);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(a3, v19);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(a1, v20);
}

uint64_t Table.init<A>(_:children:selection:columnCustomization:columns:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, long long *a3@<X5>, void (*a4)(uint64_t)@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = *a2;
  long long v22 = *a3;
  uint64_t v20 = *((void *)a3 + 3);
  uint64_t v21 = *((void *)a3 + 2);
  uint64_t v11 = *(void *)(*a2 + *MEMORY[0x1E4FBC5F0]);
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness, AssociatedConformanceWitness, v14, v15);
  type metadata accessor for Set();
  type metadata accessor for Binding();
  type metadata accessor for SetToAnySelectionManager();
  swift_getWitnessTable();
  Binding.projecting<A>(_:)();
  long long v33 = v22;
  uint64_t v34 = v21;
  uint64_t v35 = v20;
  uint64_t v28 = a7;
  uint64_t v29 = a8;
  uint64_t v30 = a9;
  uint64_t v31 = a1;
  uint64_t v32 = a2;
  uint64_t v16 = *(void *)(*(void *)(*MEMORY[0x1E4FBC5F0] + v10 + 8) + 16);
  uint64_t v17 = type metadata accessor for TableOutlineGroupContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  Table.init(of:selection:columnCustomization:columns:rows:)(WitnessTable, (uint64_t)v36, a4, a5, (uint64_t (*)(uint64_t))partial apply for closure #1 in Table.init<A>(_:children:columnCustomization:columns:), (uint64_t)v27, v11, a6, v17, a7, WitnessTable);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a1, v16);
}

uint64_t closure #1 in Table.init<A>(_:children:columnCustomization:columns:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  v22[1] = a3;
  uint64_t v23 = a1;
  uint64_t v24 = a4;
  uint64_t v5 = *(void *)(*(void *)(*a2 + *MEMORY[0x1E4FBC5F0] + 8) + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)v22 - v7;
  uint64_t v10 = *v9;
  swift_getAssociatedConformanceWitness();
  uint64_t v11 = type metadata accessor for TableOutlineGroupContent();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)v22 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, v23, v5, v16);
  TableOutlineGroupContent.init(data:children:)((uint64_t)v8, a2, (uint64_t)v14);
  uint64_t WitnessTable = swift_getWitnessTable();
  static TableRowBuilder.buildExpression<A>(_:)(v14, v10, v11, WitnessTable);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v12 + 8);
  swift_retain();
  v20(v14, v11);
  static TableRowBuilder.buildExpression<A>(_:)(v18, v10, v11, WitnessTable);
  return ((uint64_t (*)(char *, uint64_t))v20)(v18, v11);
}

uint64_t Table.init<A, B>(_:children:sortOrder:columnCustomization:columns:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, long long *a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  double v16 = (uint64_t *)(*a2 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v17 = *v16;
  memset(v38, 0, 57);
  long long v18 = a6[1];
  long long v36 = *a6;
  long long v37 = v18;
  uint64_t v29 = a10;
  uint64_t v30 = a11;
  uint64_t v31 = a12;
  uint64_t v32 = a13;
  uint64_t v33 = a14;
  uint64_t v34 = a1;
  uint64_t v35 = a2;
  uint64_t v19 = *(void *)(v16[1] + 16);
  swift_getAssociatedConformanceWitness();
  uint64_t v20 = type metadata accessor for TableOutlineGroupContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(WitnessTable, (uint64_t)v38, a3, a4, a5, a7, a8, a9, (uint64_t (*)(uint64_t))partial apply for closure #1 in Table.init<A, B>(_:children:sortOrder:columnCustomization:columns:), (uint64_t)v28, v17, v20, a10, a11, WitnessTable, a12, a14);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(a1, v19);
}

uint64_t Table.init<A, B>(_:children:selection:sortOrder:columnCustomization:columns:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, long long *a7@<X6>, void (*a8)(uint64_t)@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15 = *a2;
  long long v28 = *a7;
  uint64_t v26 = *((void *)a7 + 3);
  uint64_t v27 = *((void *)a7 + 2);
  uint64_t v16 = *(void *)(*a2 + *MEMORY[0x1E4FBC5F0]);
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness, AssociatedConformanceWitness, v19, v20);
  type metadata accessor for Optional();
  uint64_t v21 = type metadata accessor for Binding();
  type metadata accessor for OptionalToAnySelectionManager();
  swift_getWitnessTable();
  Binding.projecting<A>(_:)();
  long long v45 = v28;
  uint64_t v46 = v27;
  uint64_t v47 = v26;
  uint64_t v38 = a11;
  uint64_t v39 = a12;
  uint64_t v40 = a13;
  uint64_t v41 = a14;
  uint64_t v42 = a15;
  uint64_t v43 = a1;
  long long v44 = a2;
  uint64_t v22 = *(void *)(*(void *)(*MEMORY[0x1E4FBC5F0] + v15 + 8) + 16);
  uint64_t v23 = type metadata accessor for TableOutlineGroupContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(WitnessTable, (uint64_t)v48, a4, a5, a6, a8, a10, a9, (uint64_t (*)(uint64_t))partial apply for closure #1 in Table.init<A, B>(_:children:sortOrder:columnCustomization:columns:), (uint64_t)v37, v16, v23, a11, a12, WitnessTable, a13, a15);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(a3, v21);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(a1, v22);
}

uint64_t Table.init<A, B>(_:children:selection:sortOrder:columnCustomization:columns:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, long long *a7, void (*a8)(uint64_t), uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15 = *a2;
  long long v27 = *a7;
  uint64_t v25 = *((void *)a7 + 3);
  uint64_t v26 = *((void *)a7 + 2);
  uint64_t v16 = *(void *)(*a2 + *MEMORY[0x1E4FBC5F0]);
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness, AssociatedConformanceWitness, v19, v20);
  type metadata accessor for Set();
  type metadata accessor for Binding();
  type metadata accessor for SetToAnySelectionManager();
  swift_getWitnessTable();
  Binding.projecting<A>(_:)();
  long long v41 = v27;
  uint64_t v42 = v26;
  uint64_t v43 = v25;
  uint64_t v34 = a10;
  uint64_t v35 = a11;
  uint64_t v36 = a12;
  uint64_t v37 = a13;
  uint64_t v38 = a14;
  uint64_t v39 = a1;
  uint64_t v40 = a2;
  uint64_t v21 = *(void *)(*(void *)(*MEMORY[0x1E4FBC5F0] + v15 + 8) + 16);
  uint64_t v22 = type metadata accessor for TableOutlineGroupContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(WitnessTable, (uint64_t)v44, a3, a4, a5, a8, a9, a6, (uint64_t (*)(uint64_t))partial apply for closure #1 in Table.init<A, B>(_:children:sortOrder:columnCustomization:columns:), (uint64_t)v33, v16, v22, a10, a11, WitnessTable, a12, a14);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(a1, v21);
}

uint64_t closure #1 in Table.init<A, B>(_:children:sortOrder:columnCustomization:columns:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  v22[1] = a3;
  uint64_t v23 = a1;
  uint64_t v24 = a4;
  uint64_t v5 = *(void *)(*(void *)(*a2 + *MEMORY[0x1E4FBC5F0] + 8) + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)v22 - v7;
  uint64_t v10 = *v9;
  swift_getAssociatedConformanceWitness();
  uint64_t v11 = type metadata accessor for TableOutlineGroupContent();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  long long v18 = (char *)v22 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, v23, v5, v16);
  TableOutlineGroupContent.init(data:children:)((uint64_t)v8, a2, (uint64_t)v14);
  uint64_t WitnessTable = swift_getWitnessTable();
  static TableRowBuilder.buildExpression<A>(_:)(v14, v10, v11, WitnessTable);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v12 + 8);
  swift_retain();
  v20(v14, v11);
  static TableRowBuilder.buildExpression<A>(_:)(v18, v10, v11, WitnessTable);
  return ((uint64_t (*)(char *, uint64_t))v20)(v18, v11);
}

uint64_t Table.init<A>(of:sortOrder:columnCustomization:columns:rows:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X4>, void (*a4)(uint64_t)@<X5>, uint64_t (*a5)(uint64_t)@<X7>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16 = *a3;
  uint64_t v15 = a3[1];
  uint64_t v17 = (int *)type metadata accessor for Table();
  long long v18 = (_OWORD *)(a6 + v17[16]);
  *(_OWORD *)((char *)v18 + 41) = 0u;
  v18[1] = 0u;
  char v18[2] = 0u;
  *long long v18 = 0u;
  uint64_t v19 = (uint64_t *)(a6 + v17[17]);
  *uint64_t v19 = 0;
  v19[1] = 0;
  void v19[2] = 0;
  uint64_t v20 = a6 + v17[18];
  *(_OWORD *)uint64_t v20 = 0u;
  *(_OWORD *)(v20 + 16) = 0u;
  outlined destroy of Binding<SelectionManagerBox<AnyHashable>>?((uint64_t)v18);
  *long long v18 = 0u;
  v18[1] = 0u;
  char v18[2] = 0u;
  *(_OWORD *)((char *)v18 + 41) = 0u;
  if (a2)
  {
    type metadata accessor for Array();
    type metadata accessor for Binding();
    type metadata accessor for ToAnyComparatorArray();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    Binding.projecting<A>(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v21 = a8;
    uint64_t v22 = a9;
    uint64_t v23 = a10;
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
  }
  outlined consume of Binding<[SwiftUIAnySortComparator]>?(*v19, v19[1]);
  *uint64_t v19 = v21;
  v19[1] = v22;
  void v19[2] = v23;
  if (v15)
  {
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a8, AssociatedConformanceWitness, v25, v26);
    type metadata accessor for TableColumnCustomization();
    type metadata accessor for Binding();
    type metadata accessor for TableColumnCustomization.ToAnyCustomization();
    swift_getWitnessTable();
    Binding.projecting<A>(_:)();
    outlined consume of Binding<AnyTableColumnCustomization>?(v16, v15);
    uint64_t v27 = a8;
    uint64_t v28 = a9;
    uint64_t v29 = a10;
  }
  else
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    a12 = 0;
  }
  uint64_t v31 = outlined consume of Binding<AnyTableColumnCustomization>?(*(void *)v20, *(void *)(v20 + 8));
  *(void *)uint64_t v20 = v27;
  *(void *)(v20 + 8) = v28;
  *(void *)(v20 + 16) = v29;
  *(void *)(v20 + 24) = a12;
  uint64_t v32 = a5(v31);
  a4(v32);
  return outlined consume of Binding<[SwiftUIAnySortComparator]>?(a1, a2);
}

uint64_t Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t (*a9)(uint64_t), uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v63 = a7;
  uint64_t v64 = a6;
  uint64_t v69 = a5;
  uint64_t v55 = a4;
  uint64_t v59 = a10;
  uint64_t v60 = a9;
  uint64_t v66 = *(void *)(a13 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v61 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = *v19;
  uint64_t v57 = v19[1];
  uint64_t v53 = v19[2];
  uint64_t v52 = v19[3];
  uint64_t v74 = a11;
  uint64_t v75 = a12;
  uint64_t v68 = v20;
  uint64_t v76 = v20;
  uint64_t v77 = a15;
  uint64_t v78 = v21;
  uint64_t v22 = (int *)type metadata accessor for Table();
  uint64_t v23 = (_OWORD *)(a8 + v22[16]);
  *(_OWORD *)((char *)v23 + 41) = 0u;
  v23[1] = 0u;
  _OWORD v23[2] = 0u;
  *uint64_t v23 = 0u;
  uint64_t v24 = (uint64_t *)(a8 + v22[17]);
  *uint64_t v24 = 0;
  v24[1] = 0;
  v24[2] = 0;
  uint64_t v58 = v22;
  uint64_t v25 = v22[18];
  uint64_t v65 = a8;
  uint64_t v26 = a8 + v25;
  *(_OWORD *)uint64_t v26 = 0u;
  *(_OWORD *)(v26 + 16) = 0u;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v29 = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness, v29, v30, v31);
  type metadata accessor for Optional();
  uint64_t v32 = type metadata accessor for Binding();
  type metadata accessor for OptionalToAnySelectionManager();
  swift_getWitnessTable();
  uint64_t v56 = v32;
  uint64_t v67 = a2;
  uint64_t v33 = v55;
  Binding.projecting<A>(_:)();
  outlined assign with take of Binding<SelectionManagerBox<AnyHashable>>?((uint64_t)&v74, (uint64_t)v23);
  uint64_t v62 = a3;
  if (v33)
  {
    uint64_t v70 = a3;
    uint64_t v71 = v33;
    uint64_t v72 = v69;
    type metadata accessor for Array();
    type metadata accessor for Binding();
    type metadata accessor for ToAnyComparatorArray();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    Binding.projecting<A>(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v34 = v74;
    uint64_t v35 = v75;
    uint64_t v36 = v76;
  }
  else
  {
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
  }
  outlined consume of Binding<[SwiftUIAnySortComparator]>?(*v24, v24[1]);
  *uint64_t v24 = v34;
  v24[1] = v35;
  v24[2] = v36;
  uint64_t v39 = v57;
  if (v57)
  {
    uint64_t v40 = v54;
    uint64_t v70 = v54;
    uint64_t v71 = v57;
    uint64_t v72 = v53;
    uint64_t v73 = v52;
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a11, AssociatedConformanceWitness, v37, v38);
    type metadata accessor for TableColumnCustomization();
    type metadata accessor for Binding();
    type metadata accessor for TableColumnCustomization.ToAnyCustomization();
    swift_getWitnessTable();
    Binding.projecting<A>(_:)();
    outlined consume of Binding<AnyTableColumnCustomization>?(v40, v39);
    uint64_t v41 = v74;
    uint64_t v42 = v75;
    uint64_t v43 = v76;
    uint64_t v44 = v77;
  }
  else
  {
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
  }
  uint64_t v45 = v62;
  uint64_t v46 = outlined consume of Binding<AnyTableColumnCustomization>?(*(void *)v26, *(void *)(v26 + 8));
  *(void *)uint64_t v26 = v41;
  *(void *)(v26 + 8) = v42;
  *(void *)(v26 + 16) = v43;
  *(void *)(v26 + 24) = v44;
  uint64_t v47 = v65;
  uint64_t v48 = v60(v46);
  long long v49 = v61;
  v64(v48);
  outlined consume of Binding<[SwiftUIAnySortComparator]>?(v45, v33);
  (*(void (**)(uint64_t))(*(void *)(v56 - 8) + 8))(v67);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v66 + 32))(v47, v49, v68);
}

uint64_t Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t *a3@<X7>, uint64_t a4@<X8>, void (*a5)(uint64_t), uint64_t a6, uint64_t (*a7)(uint64_t), uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v39 = a3[1];
  uint64_t v38 = *a3;
  uint64_t v42 = a9;
  uint64_t v43 = a10;
  uint64_t v44 = a11;
  uint64_t v45 = a13;
  uint64_t v46 = a14;
  uint64_t v16 = (int *)type metadata accessor for Table();
  uint64_t v17 = (_OWORD *)(a4 + v16[16]);
  *(_OWORD *)((char *)v17 + 41) = 0u;
  v17[1] = 0u;
  v17[2] = 0u;
  *uint64_t v17 = 0u;
  uint64_t v18 = (uint64_t *)(a4 + v16[17]);
  *uint64_t v18 = 0;
  v18[1] = 0;
  char v18[2] = 0;
  uint64_t v19 = a4 + v16[18];
  *(_OWORD *)uint64_t v19 = 0u;
  *(_OWORD *)(v19 + 16) = 0u;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness, v22, v23, v24);
  type metadata accessor for Set();
  type metadata accessor for Binding();
  type metadata accessor for SetToAnySelectionManager();
  swift_getWitnessTable();
  Binding.projecting<A>(_:)();
  outlined assign with take of Binding<SelectionManagerBox<AnyHashable>>?((uint64_t)&v42, (uint64_t)v17);
  uint64_t v40 = a2;
  if (a2)
  {
    uint64_t v25 = a1;
    type metadata accessor for Array();
    type metadata accessor for Binding();
    type metadata accessor for ToAnyComparatorArray();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    Binding.projecting<A>(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v26 = v42;
    uint64_t v27 = v43;
    uint64_t v28 = v44;
  }
  else
  {
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v25 = a1;
  }
  outlined consume of Binding<[SwiftUIAnySortComparator]>?(*v18, v18[1]);
  *uint64_t v18 = v26;
  v18[1] = v27;
  char v18[2] = v28;
  if (v39)
  {
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a9, AssociatedConformanceWitness, v29, v30);
    type metadata accessor for TableColumnCustomization();
    type metadata accessor for Binding();
    type metadata accessor for TableColumnCustomization.ToAnyCustomization();
    swift_getWitnessTable();
    Binding.projecting<A>(_:)();
    uint64_t v25 = a1;
    outlined consume of Binding<AnyTableColumnCustomization>?(v38, v39);
    uint64_t v31 = v42;
    uint64_t v32 = v43;
    uint64_t v33 = v44;
    uint64_t v34 = v45;
  }
  else
  {
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
  }
  uint64_t v35 = outlined consume of Binding<AnyTableColumnCustomization>?(*(void *)v19, *(void *)(v19 + 8));
  *(void *)uint64_t v19 = v31;
  *(void *)(v19 + 8) = v32;
  *(void *)(v19 + 16) = v33;
  *(void *)(v19 + 24) = v34;
  uint64_t v36 = a7(v35);
  a5(v36);
  outlined consume of Binding<[SwiftUIAnySortComparator]>?(v25, v40);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t TableOutlineGroupContent.tableRowBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a1 + 16);
  double v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v9, v3, v6, v7);
  uint64_t v11 = *(void **)(v3 + *(int *)(a1 + 44));
  uint64_t v12 = (void *)swift_allocObject();
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  v12[2] = v6;
  v12[3] = v13;
  v12[4] = v14;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = type metadata accessor for TableRow();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  return OutlineGroup<>.init<A>(_:children:content:)((uint64_t)v9, v11, (uint64_t)partial apply for closure #1 in TableOutlineGroupContent.tableRowBody.getter, (uint64_t)v12, AssociatedTypeWitness, v16, v13, WitnessTable, a2);
}

uint64_t TableForEachContent.tableRowBody.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[2];
  double v5 = MEMORY[0x1F4188790](a1);
  double v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v8 + 16))(v7, v5);
  uint64_t v9 = (void *)swift_allocObject();
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  _OWORD v9[2] = v4;
  v9[3] = v10;
  v9[4] = v11;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for TableRow();
  uint64_t WitnessTable = swift_getWitnessTable();
  return ForEach<>.init<A>(_:content:)((uint64_t)v7, (uint64_t)partial apply for closure #1 in TableForEachContent.tableRowBody.getter, (uint64_t)v9, v4, v13, v14, AssociatedTypeWitness, v10, a2, WitnessTable, v11);
}

uint64_t closure #1 in TableOutlineGroupContent.tableRowBody.getter(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  double v5 = (char *)&v17 - v4;
  uint64_t v6 = type metadata accessor for TableRow();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v17 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))(v5, a1, AssociatedTypeWitness, v11);
  TableRow.init(_:)((uint64_t)v5, AssociatedTypeWitness, (uint64_t)v9);
  uint64_t WitnessTable = swift_getWitnessTable();
  static TableRowBuilder.buildExpression<A>(_:)(v9, AssociatedTypeWitness, v6, WitnessTable);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v9, v6);
  static TableRowBuilder.buildExpression<A>(_:)(v13, AssociatedTypeWitness, v6, WitnessTable);
  return ((uint64_t (*)(char *, uint64_t))v15)(v13, v6);
}

uint64_t Table.init(for:columns:rows:)@<X0>(void (*a1)(uint64_t)@<X1>, uint64_t a2@<X2>, uint64_t (*a3)(uint64_t)@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  return Table.init(columns:rows:)(a1, a2, a3, a4, a5, a6, a7, a9, a8);
}

uint64_t Table.init(for:selection:columns:rows:)@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t)@<X2>, uint64_t a3@<X3>, uint64_t (*a4)(uint64_t)@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  uint64_t v21 = a9;
  uint64_t v22 = a3;
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  uint64_t v15 = type metadata accessor for Binding();
  uint64_t v16 = *(void *)(v15 - 8);
  double v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)&v21 - v18, a1, v15, v17);
  Table.init(selection:columns:rows:)((uint64_t)v19, a2, v22, v23, v24, a6, a7, v21, a8, a10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(a1, v15);
}

uint64_t Table.init(for:selection:columns:rows:)@<X0>(void (*a1)(uint64_t)@<X4>, uint64_t a2@<X5>, uint64_t (*a3)(uint64_t)@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness, AssociatedConformanceWitness, v11, v12);
  type metadata accessor for Set();
  type metadata accessor for Binding();
  type metadata accessor for SetToAnySelectionManager();
  swift_getWitnessTable();
  uint64_t v13 = Binding.projecting<A>(_:)();
  Table.init(of:selection:columnCustomization:columns:rows:)(v13, (uint64_t)v20, a1, a2, a3, a4, a6, a5, a7, a8, a9);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for Table.ChildSelectionEnabled()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for Table.ChildSelectionAction()
{
  return swift_getGenericMetadata();
}

void type metadata accessor for Attribute<((_:))?>()
{
  if (!lazy cache variable for type metadata for Attribute<((_:))?>)
  {
    type metadata accessor for ((_:))?(255, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<((_:))?>);
    }
  }
}

uint64_t type metadata accessor for Table.ChildSelectionMenu()
{
  return swift_getGenericMetadata();
}

void type metadata accessor for ((_:))?(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = type metadata accessor for (_:)(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t type metadata accessor for TableForEachContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in Table.init<A>(_:columns:)()
{
  return closure #1 in Table.init<A>(_:columns:)(v0[7], v0[2], v0[3], v0[4]);
}

uint64_t partial apply for closure #1 in Table.init<A, B>(_:sortOrder:columns:)()
{
  return closure #1 in Table.init<A, B>(_:sortOrder:columns:)(v0[9], v0[2], v0[3], v0[4]);
}

uint64_t type metadata accessor for TableOutlineGroupContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in Table.init<A>(_:children:columnCustomization:columns:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in Table.init<A>(_:children:columnCustomization:columns:)(*(void *)(v1 + 40), *(void **)(v1 + 48), *(void *)(v1 + 32), a1);
}

uint64_t partial apply for closure #1 in Table.init<A, B>(_:children:sortOrder:columnCustomization:columns:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in Table.init<A, B>(_:children:sortOrder:columnCustomization:columns:)(*(void *)(v1 + 56), *(void **)(v1 + 64), *(void *)(v1 + 40), a1);
}

uint64_t outlined destroy of Binding<SelectionManagerBox<AnyHashable>>?(uint64_t a1)
{
  type metadata accessor for Attribute<(_:)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SelectionManagerBox<AnyHashable>>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>()
{
  if (!lazy cache variable for type metadata for Binding<SelectionManagerBox<AnyHashable>>)
  {
    type metadata accessor for _GraphInputs.SelectionBasedStorageKey<AnyHashable>(255, (unint64_t *)&lazy cache variable for type metadata for SelectionManagerBox<AnyHashable>, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB968], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SelectionManagerBox);
    unint64_t v0 = type metadata accessor for Binding();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<SelectionManagerBox<AnyHashable>>);
    }
  }
}

void type metadata accessor for _GraphInputs.SelectionBasedStorageKey<AnyHashable>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t type metadata accessor for ToAnyComparatorArray()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined assign with take of Binding<SelectionManagerBox<AnyHashable>>?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Attribute<(_:)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SelectionManagerBox<AnyHashable>>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_18774416C()
{
  return swift_deallocObject();
}

uint64_t sub_18774417C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TableForEachContent.tableRowBody.getter(uint64_t a1)
{
  return closure #1 in TableOutlineGroupContent.tableRowBody.getter(a1);
}

_UNKNOWN **base witness table accessor for View in Table<A, B, C>()
{
  return &protocol witness table for Table<A, B, C>;
}

uint64_t associated type witness table accessor for TableRowContent.TableRowBody : TableRowContent in TableOutlineGroupContent<A>()
{
  return associated type witness table accessor for TableRowContent.TableRowBody : TableRowContent in TableOutlineGroupContent<A>();
}

{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for TableRowContent.TableRowBody : TableRowContent in TableForEachContent<A>()
{
  return associated type witness table accessor for TableRowContent.TableRowBody : TableRowContent in TableOutlineGroupContent<A>();
}

uint64_t type metadata completion function for Table()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Table(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = *(void *)(v8 + 64);
  unint64_t v12 = ((((v11 + ((v6 + v9) & ~v9) + 71) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 32;
  unsigned int v13 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (v13 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v12 > 0x18)
  {
    uint64_t v16 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v16 + (((v13 | 7) + 16) & ~(unint64_t)(v13 | 7)));
    swift_retain();
    return v4;
  }
  uint64_t v17 = ~v9;
  (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
  unint64_t v18 = ((unint64_t)v4 + v10) & v17;
  unint64_t v19 = ((unint64_t)a2 + v10) & v17;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(v18, v19, v7);
  uint64_t v20 = v18 + v11;
  uint64_t v21 = v19 + v11;
  unint64_t v22 = (v18 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v23 + 8) < 0xFFFFFFFFuLL)
  {
    long long v27 = *(_OWORD *)v23;
    long long v28 = *(_OWORD *)(v23 + 16);
    long long v29 = *(_OWORD *)(v23 + 32);
    *(_OWORD *)(v22 + 41) = *(_OWORD *)(v23 + 41);
    *(_OWORD *)(v22 + 16) = v28;
    *(_OWORD *)(v22 + 32) = v29;
    *(_OWORD *)unint64_t v22 = v27;
  }
  else
  {
    *(void *)unint64_t v22 = *(void *)v23;
    *(void *)(v22 + 8) = *(void *)(v23 + 8);
    uint64_t v24 = (long long *)(v23 + 16);
    int v25 = *(unsigned __int8 *)(v23 + 56);
    swift_retain();
    swift_retain();
    if (v25 == 2)
    {
      uint64_t v30 = *(void *)(v23 + 40);
      *(void *)(v22 + 40) = v30;
      *(void *)(v22 + 48) = *(void *)(v23 + 48);
      (**(void (***)(uint64_t, uint64_t))(v30 - 8))(v22 + 16, v23 + 16);
      char v31 = 2;
LABEL_20:
      *(unsigned char *)(v22 + 56) = v31;
      goto LABEL_21;
    }
    if (v25 == 1)
    {
      uint64_t v26 = *(void *)(v23 + 40);
      if (v26)
      {
        *(void *)(v22 + 40) = v26;
        *(void *)(v22 + 48) = *(void *)(v23 + 48);
        (**(void (***)(uint64_t, uint64_t))(v26 - 8))(v22 + 16, v23 + 16);
      }
      else
      {
        long long v32 = *v24;
        long long v33 = *(_OWORD *)(v23 + 32);
        *(void *)(v22 + 48) = *(void *)(v23 + 48);
        *(_OWORD *)(v22 + 16) = v32;
        *(_OWORD *)(v22 + 32) = v33;
      }
      char v31 = 1;
      goto LABEL_20;
    }
    *(void *)(v22 + 16) = *(void *)v24;
    *(unsigned char *)(v22 + 56) = 0;
    swift_bridgeObjectRetain();
  }
LABEL_21:
  unint64_t v34 = (v20 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v35 = (v21 + 71) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v35 + 8) < 0xFFFFFFFFuLL)
  {
    long long v36 = *(_OWORD *)v35;
    *(void *)(v34 + 16) = *(void *)(v35 + 16);
    *(_OWORD *)unint64_t v34 = v36;
  }
  else
  {
    *(void *)unint64_t v34 = *(void *)v35;
    *(void *)(v34 + 8) = *(void *)(v35 + 8);
    *(void *)(v34 + 16) = *(void *)(v35 + 16);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  unint64_t v37 = (v34 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v38 = (v35 + 31) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v38 + 8) < 0xFFFFFFFFuLL)
  {
    long long v39 = *(_OWORD *)(v38 + 16);
    *(_OWORD *)unint64_t v37 = *(_OWORD *)v38;
    *(_OWORD *)(v37 + 16) = v39;
  }
  else
  {
    *(void *)unint64_t v37 = *(void *)v38;
    *(void *)(v37 + 8) = *(void *)(v38 + 8);
    *(void *)(v37 + 16) = *(void *)(v38 + 16);
    *(void *)(v37 + 24) = *(void *)(v38 + 24);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for Table(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 32) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56) + a1;
  uint64_t v6 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t))(v6 + 8))(v8);
  unint64_t v10 = v8 + *(void *)(v7 + 56);
  unint64_t v11 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v11 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_8;
  }
  swift_release();
  swift_release();
  uint64_t result = v11 + 16;
  int v12 = *(unsigned __int8 *)(v11 + 56);
  if (v12 == 2)
  {
LABEL_7:
    uint64_t result = __swift_destroy_boxed_opaque_existential_1(result);
    goto LABEL_8;
  }
  if (v12 == 1)
  {
    if (!*(void *)(v11 + 40)) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (!*(unsigned char *)(v11 + 56)) {
    uint64_t result = swift_bridgeObjectRelease();
  }
LABEL_8:
  unint64_t v13 = (v10 + 71) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v13 + 8) >= 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
  }
  if (*(void *)(((v13 + 31) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for Table(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 32) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 48);
  uint64_t v15 = v14 + v12;
  uint64_t v16 = v14 + v13;
  unint64_t v17 = (v14 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v14 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v18 + 8) < 0xFFFFFFFFuLL)
  {
    long long v22 = *(_OWORD *)v18;
    long long v23 = *(_OWORD *)(v18 + 16);
    long long v24 = *(_OWORD *)(v18 + 32);
    *(_OWORD *)(v17 + 41) = *(_OWORD *)(v18 + 41);
    *(_OWORD *)(v17 + 16) = v23;
    *(_OWORD *)(v17 + 32) = v24;
    *(_OWORD *)unint64_t v17 = v22;
    goto LABEL_12;
  }
  *(void *)unint64_t v17 = *(void *)v18;
  *(void *)(v17 + 8) = *(void *)(v18 + 8);
  unint64_t v19 = (void *)(v18 + 16);
  int v20 = *(unsigned __int8 *)(v18 + 56);
  swift_retain();
  swift_retain();
  if (v20 == 2)
  {
    uint64_t v25 = *(void *)(v18 + 40);
    *(void *)(v17 + 40) = v25;
    *(void *)(v17 + 48) = *(void *)(v18 + 48);
    (**(void (***)(uint64_t, uint64_t))(v25 - 8))(v17 + 16, v18 + 16);
    char v26 = 2;
  }
  else
  {
    if (v20 != 1)
    {
      *(void *)(v17 + 16) = *v19;
      *(unsigned char *)(v17 + 56) = 0;
      swift_bridgeObjectRetain();
      goto LABEL_12;
    }
    uint64_t v21 = *(void *)(v18 + 40);
    if (v21)
    {
      *(void *)(v17 + 40) = v21;
      *(void *)(v17 + 48) = *(void *)(v18 + 48);
      (**(void (***)(uint64_t, uint64_t))(v21 - 8))(v17 + 16, v18 + 16);
    }
    else
    {
      long long v27 = *(_OWORD *)v19;
      long long v28 = *(_OWORD *)(v18 + 32);
      *(void *)(v17 + 48) = *(void *)(v18 + 48);
      *(_OWORD *)(v17 + 16) = v27;
      *(_OWORD *)(v17 + 32) = v28;
    }
    char v26 = 1;
  }
  *(unsigned char *)(v17 + 56) = v26;
LABEL_12:
  unint64_t v29 = (v15 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = (v16 + 71) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v30 + 8) < 0xFFFFFFFFuLL)
  {
    long long v31 = *(_OWORD *)v30;
    *(void *)(v29 + 16) = *(void *)(v30 + 16);
    *(_OWORD *)unint64_t v29 = v31;
  }
  else
  {
    *(void *)unint64_t v29 = *(void *)v30;
    *(void *)(v29 + 8) = *(void *)(v30 + 8);
    *(void *)(v29 + 16) = *(void *)(v30 + 16);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  unint64_t v32 = (v29 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v33 = (v30 + 31) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v33 + 8) < 0xFFFFFFFFuLL)
  {
    long long v34 = *(_OWORD *)(v33 + 16);
    *(_OWORD *)unint64_t v32 = *(_OWORD *)v33;
    *(_OWORD *)(v32 + 16) = v34;
  }
  else
  {
    *(void *)unint64_t v32 = *(void *)v33;
    *(void *)(v32 + 8) = *(void *)(v33 + 8);
    *(void *)(v32 + 16) = *(void *)(v33 + 16);
    *(void *)(v32 + 24) = *(void *)(v33 + 24);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for Table(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 32) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 40);
  uint64_t v15 = v14 + v12;
  uint64_t v16 = v14 + v13;
  unint64_t v17 = (v14 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v14 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = *(void *)(v18 + 8);
  if (*(void *)(v17 + 8) >= 0xFFFFFFFFuLL)
  {
    if (v19 >= 0xFFFFFFFF)
    {
      *(void *)unint64_t v17 = *(void *)v18;
      swift_retain();
      swift_release();
      *(void *)(v17 + 8) = *(void *)(v18 + 8);
      swift_retain();
      swift_release();
      if (v17 == v18) {
        goto LABEL_23;
      }
      unint64_t v20 = v17 + 16;
      unint64_t v21 = v18 + 16;
      outlined destroy of ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>(v17 + 16, (unint64_t *)&lazy cache variable for type metadata for SelectionManagerBox<AnyHashable>, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB968], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SelectionManagerBox);
      int v22 = *(unsigned __int8 *)(v18 + 56);
      if (v22 != 2)
      {
        if (v22 != 1)
        {
LABEL_6:
          *(void *)(v17 + 16) = *(void *)v21;
          *(unsigned char *)(v17 + 56) = 0;
          swift_bridgeObjectRetain();
          goto LABEL_23;
        }
        goto LABEL_10;
      }
      goto LABEL_16;
    }
    swift_release();
    swift_release();
    int v25 = *(unsigned __int8 *)(v17 + 56);
    if (v25 == 2) {
      goto LABEL_18;
    }
    if (v25 != 1)
    {
      if (!*(unsigned char *)(v17 + 56)) {
        swift_bridgeObjectRelease();
      }
      goto LABEL_19;
    }
    if (*(void *)(v17 + 40)) {
LABEL_18:
    }
      __swift_destroy_boxed_opaque_existential_1(v17 + 16);
LABEL_19:
    long long v28 = *(_OWORD *)v18;
    long long v29 = *(_OWORD *)(v18 + 16);
    long long v30 = *(_OWORD *)(v18 + 32);
    *(_OWORD *)(v17 + 41) = *(_OWORD *)(v18 + 41);
    *(_OWORD *)(v17 + 16) = v29;
    *(_OWORD *)(v17 + 32) = v30;
    *(_OWORD *)unint64_t v17 = v28;
    goto LABEL_23;
  }
  if (v19 < 0xFFFFFFFF) {
    goto LABEL_19;
  }
  *(void *)unint64_t v17 = *(void *)v18;
  *(void *)(v17 + 8) = *(void *)(v18 + 8);
  unint64_t v20 = v17 + 16;
  unint64_t v21 = v18 + 16;
  int v23 = *(unsigned __int8 *)(v18 + 56);
  swift_retain();
  swift_retain();
  if (v23 != 2)
  {
    if (v23 != 1) {
      goto LABEL_6;
    }
LABEL_10:
    uint64_t v24 = *(void *)(v18 + 40);
    if (v24)
    {
      *(void *)(v17 + 40) = v24;
      *(void *)(v17 + 48) = *(void *)(v18 + 48);
      (**(void (***)(unint64_t, unint64_t))(v24 - 8))(v20, v21);
    }
    else
    {
      long long v31 = *(_OWORD *)v21;
      long long v32 = *(_OWORD *)(v21 + 16);
      *(void *)(v20 + 32) = *(void *)(v21 + 32);
      *(_OWORD *)unint64_t v20 = v31;
      *(_OWORD *)(v20 + 16) = v32;
    }
    char v27 = 1;
    goto LABEL_22;
  }
LABEL_16:
  uint64_t v26 = *(void *)(v18 + 40);
  *(void *)(v17 + 40) = v26;
  *(void *)(v17 + 48) = *(void *)(v18 + 48);
  (**(void (***)(unint64_t, unint64_t))(v26 - 8))(v20, v21);
  char v27 = 2;
LABEL_22:
  *(unsigned char *)(v17 + 56) = v27;
LABEL_23:
  unint64_t v33 = (void *)((v15 + 71) & 0xFFFFFFFFFFFFFFF8);
  long long v34 = (void *)((v16 + 71) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v35 = v34[1];
  if (v33[1] < 0xFFFFFFFFuLL)
  {
    if (v35 >= 0xFFFFFFFF)
    {
      *unint64_t v33 = *v34;
      v33[1] = v34[1];
      v33[2] = v34[2];
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      goto LABEL_30;
    }
  }
  else
  {
    if (v35 >= 0xFFFFFFFF)
    {
      *unint64_t v33 = *v34;
      swift_retain();
      swift_release();
      v33[1] = v34[1];
      swift_retain();
      swift_release();
      v33[2] = v34[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  long long v36 = *(_OWORD *)v34;
  v33[2] = v34[2];
  *(_OWORD *)unint64_t v33 = v36;
LABEL_30:
  unint64_t v37 = (void *)(((unint64_t)v33 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v38 = (void *)(((unint64_t)v34 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v39 = v38[1];
  if (v37[1] < 0xFFFFFFFFuLL)
  {
    if (v39 >= 0xFFFFFFFF)
    {
      *unint64_t v37 = *v38;
      v37[1] = v38[1];
      v37[2] = v38[2];
      void v37[3] = v38[3];
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_36:
    long long v40 = *((_OWORD *)v38 + 1);
    *(_OWORD *)unint64_t v37 = *(_OWORD *)v38;
    *((_OWORD *)v37 + 1) = v40;
    return a1;
  }
  if (v39 < 0xFFFFFFFF)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  *unint64_t v37 = *v38;
  swift_retain();
  swift_release();
  v37[1] = v38[1];
  swift_retain();
  swift_release();
  v37[2] = v38[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  void v37[3] = v38[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  type metadata accessor for _GraphInputs.SelectionBasedStorageKey<AnyHashable>(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t initializeWithTake for Table(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 32) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 32);
  uint64_t v15 = v14 + v12;
  uint64_t v16 = v14 + v13;
  unint64_t v17 = (_OWORD *)((v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v18 = (long long *)((v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  long long v20 = v18[1];
  long long v19 = v18[2];
  long long v21 = *v18;
  *(_OWORD *)((char *)v17 + 41) = *(long long *)((char *)v18 + 41);
  v17[1] = v20;
  v17[2] = v19;
  *unint64_t v17 = v21;
  unint64_t v22 = (v15 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (v16 + 71) & 0xFFFFFFFFFFFFFFF8;
  long long v24 = *(_OWORD *)v23;
  *(void *)(v22 + 16) = *(void *)(v23 + 16);
  *(_OWORD *)unint64_t v22 = v24;
  int v25 = (_OWORD *)((v22 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v26 = (_OWORD *)((v23 + 31) & 0xFFFFFFFFFFFFFFF8);
  long long v27 = v26[1];
  _OWORD *v25 = *v26;
  v25[1] = v27;
  return a1;
}

uint64_t assignWithTake for Table(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 32) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 24);
  uint64_t v15 = v14 + v12;
  uint64_t v16 = v14 + v13;
  unint64_t v17 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v17 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_11;
  }
  if (*(void *)(v18 + 8) < 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
    int v21 = *(unsigned __int8 *)(v17 + 56);
    if (v21 == 2) {
      goto LABEL_10;
    }
    if (v21 != 1)
    {
      if (!*(unsigned char *)(v17 + 56)) {
        swift_bridgeObjectRelease();
      }
      goto LABEL_11;
    }
    if (*(void *)(v17 + 40)) {
LABEL_10:
    }
      __swift_destroy_boxed_opaque_existential_1(v17 + 16);
LABEL_11:
    long long v22 = *(_OWORD *)v18;
    long long v23 = *(_OWORD *)(v18 + 16);
    long long v24 = *(_OWORD *)(v18 + 32);
    *(_OWORD *)(v17 + 41) = *(_OWORD *)(v18 + 41);
    *(_OWORD *)(v17 + 16) = v23;
    *(_OWORD *)(v17 + 32) = v24;
    *(_OWORD *)unint64_t v17 = v22;
    goto LABEL_12;
  }
  *(void *)unint64_t v17 = *(void *)v18;
  swift_release();
  *(void *)(v17 + 8) = *(void *)(v18 + 8);
  swift_release();
  if (v17 != v18)
  {
    outlined destroy of ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>(v17 + 16, (unint64_t *)&lazy cache variable for type metadata for SelectionManagerBox<AnyHashable>, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB968], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SelectionManagerBox);
    long long v19 = *(_OWORD *)(v18 + 41);
    long long v20 = *(_OWORD *)(v18 + 32);
    *(_OWORD *)(v17 + 16) = *(_OWORD *)(v18 + 16);
    *(_OWORD *)(v17 + 32) = v20;
    *(_OWORD *)(v17 + 41) = v19;
  }
LABEL_12:
  int v25 = (void *)((v15 + 71) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v26 = (void *)((v16 + 71) & 0xFFFFFFFFFFFFFFF8);
  if (v25[1] >= 0xFFFFFFFFuLL)
  {
    if (v26[1] >= 0xFFFFFFFFuLL)
    {
      void *v25 = *v26;
      swift_release();
      v25[1] = v26[1];
      swift_release();
      v25[2] = v26[2];
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  long long v27 = *(_OWORD *)v26;
  v25[2] = v26[2];
  *(_OWORD *)int v25 = v27;
LABEL_17:
  unint64_t v28 = ((unint64_t)v25 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = ((unint64_t)v26 + 31) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v28 + 8) < 0xFFFFFFFFuLL)
  {
LABEL_21:
    long long v30 = *(_OWORD *)(v29 + 16);
    *(_OWORD *)unint64_t v28 = *(_OWORD *)v29;
    *(_OWORD *)(v28 + 16) = v30;
    return a1;
  }
  if (*(void *)(v29 + 8) < 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  *(void *)unint64_t v28 = *(void *)v29;
  swift_release();
  *(void *)(v28 + 8) = *(void *)(v29 + 8);
  swift_release();
  *(void *)(v28 + 16) = *(void *)(v29 + 16);
  swift_bridgeObjectRelease();
  *(void *)(v28 + 24) = *(void *)(v29 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Table(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v5 = *(unsigned int *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64);
  if (v7 <= v5) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v6 + 84);
  }
  if (v10 <= 0x7FFFFFFE) {
    unsigned int v10 = 2147483646;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 32) - 8) + 64) + v8;
  if (v10 < a2)
  {
    unint64_t v12 = ((((v9 + (v11 & ~v8) + 71) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 32;
    unsigned int v13 = a2 - v10;
    uint64_t v14 = v12 & 0xFFFFFFF8;
    if ((v12 & 0xFFFFFFF8) != 0) {
      unsigned int v15 = 2;
    }
    else {
      unsigned int v15 = v13 + 1;
    }
    if (v15 >= 0x10000) {
      unsigned int v16 = 4;
    }
    else {
      unsigned int v16 = 2;
    }
    if (v15 < 0x100) {
      unsigned int v16 = 1;
    }
    if (v15 >= 2) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    switch(v17)
    {
      case 1:
        int v18 = *((unsigned __int8 *)a1 + v12);
        if (!v18) {
          break;
        }
        goto LABEL_24;
      case 2:
        int v18 = *(unsigned __int16 *)((char *)a1 + v12);
        if (v18) {
          goto LABEL_24;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187745600);
      case 4:
        int v18 = *(int *)((char *)a1 + v12);
        if (!v18) {
          break;
        }
LABEL_24:
        int v20 = v18 - 1;
        if (v14)
        {
          int v20 = 0;
          int v21 = *a1;
        }
        else
        {
          int v21 = 0;
        }
        return v10 + (v21 | v20) + 1;
      default:
        break;
    }
  }
  if (v5 == v10) {
    return (*(uint64_t (**)(int *, uint64_t, void))(v4 + 48))(a1, v5, *(void *)(a3 + 32));
  }
  unint64_t v22 = ((unint64_t)a1 + v11) & ~v8;
  if (v7 == v10) {
    return (*(uint64_t (**)(unint64_t))(v6 + 48))(v22);
  }
  unint64_t v23 = *(void *)(((v9 + v22 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v23 >= 0xFFFFFFFF) {
    LODWORD(v23) = -1;
  }
  if ((v23 + 1) >= 2) {
    return v23;
  }
  else {
    return 0;
  }
}

double storeEnumTagSinglePayload for Table(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 32) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = *(void *)(v8 + 64);
  if (v9 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v8 + 84);
  }
  if (v12 <= 0x7FFFFFFE) {
    unsigned int v12 = 2147483646;
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 32) - 8) + 64) + v10;
  unint64_t v14 = ((((v11 + (v13 & ~v10) + 71) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 32;
  if (v12 >= a3)
  {
    int v18 = 0;
    int v19 = a2 - v12;
    if (a2 <= v12)
    {
LABEL_19:
      switch(v18)
      {
        case 1:
          a1[v14] = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_32;
        case 2:
          *(_WORD *)&a1[v14] = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_32;
        case 3:
          goto LABEL_48;
        case 4:
          *(_DWORD *)&a1[v14] = 0;
          goto LABEL_31;
        default:
LABEL_31:
          if (a2)
          {
LABEL_32:
            if (v7 == v12)
            {
              unint64_t v23 = *(void (**)(void))(v6 + 56);
              v23();
            }
            else
            {
              unint64_t v24 = (unint64_t)&a1[v13] & ~v10;
              if (v9 == v12)
              {
                int v25 = *(void (**)(unint64_t))(v8 + 56);
                v25(v24);
              }
              else
              {
                unint64_t v26 = (v11 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
                if (a2 > 0x7FFFFFFE)
                {
                  double result = 0.0;
                  *(_OWORD *)(v26 + 41) = 0u;
                  *(_OWORD *)(v26 + 16) = 0u;
                  *(_OWORD *)(v26 + 32) = 0u;
                  *(_OWORD *)unint64_t v26 = 0u;
                  *(_DWORD *)unint64_t v26 = a2 - 0x7FFFFFFF;
                }
                else
                {
                  *(void *)(v26 + 8) = a2;
                }
              }
            }
          }
          break;
      }
      return result;
    }
  }
  else
  {
    unsigned int v15 = a3 - v12;
    if (((((v11 + (v13 & ~v10) + 71) & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) == 0xFFFFFFE0) {
      unsigned int v16 = v15 + 1;
    }
    else {
      unsigned int v16 = 2;
    }
    if (v16 >= 0x10000) {
      int v17 = 4;
    }
    else {
      int v17 = 2;
    }
    if (v16 < 0x100) {
      int v17 = 1;
    }
    if (v16 >= 2) {
      int v18 = v17;
    }
    else {
      int v18 = 0;
    }
    int v19 = a2 - v12;
    if (a2 <= v12) {
      goto LABEL_19;
    }
  }
  if (((((v11 + (v13 & ~v10) + 71) & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) == 0xFFFFFFE0) {
    int v20 = v19;
  }
  else {
    int v20 = 1;
  }
  if (((((v11 + (v13 & ~v10) + 71) & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) != 0xFFFFFFE0)
  {
    unsigned int v21 = ~v12 + a2;
    bzero(a1, ((((v11 + (v13 & ~v10) + 71) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 32);
    *(_DWORD *)a1 = v21;
  }
  switch(v18)
  {
    case 1:
      a1[v14] = v20;
      break;
    case 2:
      *(_WORD *)&a1[v14] = v20;
      break;
    case 3:
LABEL_48:
      __break(1u);
      JUMPOUT(0x1877458D4);
    case 4:
      *(_DWORD *)&a1[v14] = v20;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t type metadata completion function for TableOutlineGroupContent()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TableOutlineGroupContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v4;
}

uint64_t initializeWithCopy for TableOutlineGroupContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 48) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 48) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TableOutlineGroupContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 40) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 40) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for TableOutlineGroupContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for TableOutlineGroupContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TableOutlineGroupContent(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187745DE8);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for TableOutlineGroupContent(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x187745FD8);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          int v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0) {
            uint64_t v19 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v19 = a2 - 1;
          }
          *int v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t type metadata completion function for TableForEachContent()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TableForEachContent(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for TableForEachContent(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187746404);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t sub_18774642C()
{
  return swift_getWitnessTable();
}

uint64_t sub_187746554()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in ToAnyComparatorArray<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Hashable in ToAnyComparatorArray<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in Table<A, B, C>.ChildSelectionMenu()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in Table<A, B, C>.ChildSelectionAction()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in Table<A, B, C>.ChildSelectionEnabled()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in Table<A, B, C>.Child()
{
  return swift_getWitnessTable();
}

uint64_t outlined init with copy of Binding<SelectionManagerBox<AnyHashable>>?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Attribute<(_:)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SelectionManagerBox<AnyHashable>>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of Binding<AnyTableColumnCustomization>?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined init with take of Binding<SelectionManagerBox<AnyHashable>>?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Attribute<(_:)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SelectionManagerBox<AnyHashable>>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ResolvedTableStyle(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _GraphInputs.SelectionBasedStorageKey<AnyHashable>(0, &lazy cache variable for type metadata for ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>, (uint64_t)&type metadata for ResolvedTableStyle, (uint64_t)&type metadata for AccessibilityAttachmentModifier, MEMORY[0x1E4F3FBA0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_187746990()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed AnyHashable) -> (@unowned Bool)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1877469FC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Table.ChildSelectionEnabled.value.getter(uint64_t a1)
{
  return closure #1 in Table.ChildSelectionEnabled.value.getter(a1, *(_DWORD *)(v1 + 56), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_187746A20()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Identifiable.ID) -> (@out Bool)()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 56))(&v2);
  return v2;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Set<AnyHashable>) -> ()(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t partial apply for closure #1 in Table.ChildSelectionAction.value.getter(uint64_t a1)
{
  return closure #1 in Table.ChildSelectionAction.value.getter(a1, *(void (**)(uint64_t))(v1 + 56), *(void *)(v1 + 64));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Set<A.Identifiable.ID>) -> (@out ())(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 56);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Set<AnyHashable>) -> (@owned PlatformItemList)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_187746B3C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Table.ChildSelectionMenu.value.getter(uint64_t a1)
{
  return closure #1 in Table.ChildSelectionMenu.value.getter(a1, *(_DWORD *)(v1 + 56), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Set<A.Identifiable.ID>) -> (@out PlatformItemList)(uint64_t a1)
{
  void (*v2)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v4;
  uint64_t v5;

  uint64_t v2 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(v1 + 56);
  unsigned int v5 = a1;
  v2(&v4, &v5);
  return v4;
}

uint64_t specialized ToAnyComparatorArray.get(base:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[5] = a1;
  v7[2] = a2;
  v7[3] = a3;
  uint64_t v3 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ToAnyComparatorArray.get(base:), (uint64_t)v7, v3, (uint64_t)&type metadata for SwiftUIAnySortComparator, MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v5);
}

uint64_t specialized ToAnyComparatorArray.set(base:newValue:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v12[5] = a2;
  v12[2] = a3;
  v12[3] = a4;
  type metadata accessor for [SwiftUIAnySortComparator]();
  uint64_t v7 = v6;
  unint64_t v8 = lazy protocol witness table accessor for type [SwiftUIAnySortComparator] and conformance [A]();
  uint64_t v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ToAnyComparatorArray.set(base:newValue:), (uint64_t)v12, v7, a3, MEMORY[0x1E4FBC248], v8, MEMORY[0x1E4FBC278], v9);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v10;
  return result;
}

uint64_t partial apply for closure #1 in ToAnyComparatorArray.set(base:newValue:)(uint64_t a1)
{
  outlined init with copy of Any(a1, (uint64_t)&v2);
  return swift_dynamicCast();
}

void type metadata accessor for [SwiftUIAnySortComparator]()
{
  if (!lazy cache variable for type metadata for [SwiftUIAnySortComparator])
  {
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [SwiftUIAnySortComparator]);
    }
  }
}

unint64_t lazy protocol witness table accessor for type [SwiftUIAnySortComparator] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [SwiftUIAnySortComparator] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SwiftUIAnySortComparator] and conformance [A])
  {
    type metadata accessor for [SwiftUIAnySortComparator]();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SwiftUIAnySortComparator] and conformance [A]);
  }
  return result;
}

uint64_t partial apply for closure #1 in ToAnyComparatorArray.get(base:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in ToAnyComparatorArray.get(base:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t outlined assign with copy of Binding<SelectionManagerBox<AnyHashable>>?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Attribute<(_:)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SelectionManagerBox<AnyHashable>>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_187746EA4()
{
  return swift_deallocObject();
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in WrappingLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

double protocol witness for LabelStyle.makeBody(configuration:) in conformance WrappingLabelStyle@<D0>(uint64_t a1@<X8>)
{
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  ScaledMetric.init(wrappedValue:)();
  double result = v7;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  *(double *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  return result;
}

uint64_t initializeWithCopy for WrappingLabelStyleView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for WrappingLabelStyleView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  char v9 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v8, v9);
  uint64_t v10 = *(void *)(a1 + 16);
  char v11 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 24) = v9;
  outlined consume of Environment<Bool>.Content(v10, v11);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for WrappingLabelStyleView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  char v8 = *((unsigned char *)a2 + 24);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = a2[2];
  *(unsigned char *)(a1 + 24) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  *(void *)(a1 + 32) = a2[4];
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for WrappingLabelStyleView(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for WrappingLabelStyleView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)double result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

void *type metadata accessor for WrappingLabelStyleView()
{
  return &unk_1ED43C758;
}

unint64_t lazy protocol witness table accessor for type WrappingLabelStyleView and conformance WrappingLabelStyleView()
{
  unint64_t result = lazy protocol witness table cache variable for type WrappingLabelStyleView and conformance WrappingLabelStyleView;
  if (!lazy protocol witness table cache variable for type WrappingLabelStyleView and conformance WrappingLabelStyleView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WrappingLabelStyleView and conformance WrappingLabelStyleView);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in WrappingLabelStyleView()
{
  return swift_getOpaqueTypeConformance2();
}

double closure #1 in WrappingLabelStyleView.body.getter@<D0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  long long v8 = *a1;
  long long v6 = *a1;
  *(_OWORD *)char v7 = a1[1];
  *(_OWORD *)&v7[9] = *(long long *)((char *)a1 + 25);
  type metadata accessor for ScaledMetric<CGFloat>();
  ScaledMetric.wrappedValue.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  ScaledMetric.wrappedValue.getter();
  View.bodyHeadOutdent(_:)();
  double result = *((double *)&v8 + 1);
  *(void *)a2 = KeyPath;
  *(unsigned char *)(a2 + 8) = 1;
  *(void *)(a2 + 16) = v6;
  *(unsigned char *)(a2 + 24) = BYTE8(v6);
  *(void *)(a2 + 32) = *(void *)v7;
  *(unsigned char *)(a2 + 40) = v7[8];
  *(void *)(a2 + 48) = *(void *)&v7[16];
  *(void *)(a2 + 56) = *(void *)&v7[24];
  *(_OWORD *)(a2 + 64) = v8;
  return result;
}

double protocol witness for View.body.getter in conformance WrappingLabelStyleView@<D0>(uint64_t a1@<X8>)
{
  long long v3 = v1[1];
  long long v23 = *v1;
  v24[0] = v3;
  *(_OWORD *)((char *)v24 + 9) = *(long long *)((char *)v1 + 25);
  uint64_t v4 = static VerticalAlignment.firstTextLineCenter.getter();
  closure #1 in WrappingLabelStyleView.body.getter(&v23, (uint64_t)&v14);
  uint64_t v5 = v14;
  char v6 = v15;
  uint64_t v7 = v16;
  char v8 = v17;
  uint64_t v9 = v18;
  char v10 = v19;
  uint64_t v11 = v21;
  double result = v22;
  long long v13 = v20;
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = 0x4024000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(unsigned char *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(unsigned char *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 72) = v13;
  *(void *)(a1 + 88) = v11;
  *(double *)(a1 + 96) = result;
  return result;
}

uint64_t sub_1877473F4()
{
  return lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>>);
}

void type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>>()
{
  if (!lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>();
    lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)> and conformance TupleView<A>, (void (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>);
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>>);
    }
  }
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>()
{
  if (!lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>)
  {
    type metadata accessor for (ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)();
    unint64_t v0 = type metadata accessor for TupleView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>);
    }
  }
}

void type metadata accessor for (ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>))
  {
    type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>();
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>));
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>)
  {
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>(255, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>);
    }
  }
}

void type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, a3);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>> and conformance HStack<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void storeEnumTagSinglePayload for LabelGroup(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187747910);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t sub_187747938()
{
  return swift_getWitnessTable();
}

uint64_t key path getter for EnvironmentValues.dividerThickness : EnvironmentValues@<X0>(void *a1@<X8>)
{
  uint64_t result = EnvironmentValues.dividerThickness.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_187747A04@<X0>(void *a1@<X8>)
{
  uint64_t result = EnvironmentValues.dividerThickness.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.dividerThickness : EnvironmentValues()
{
  return EnvironmentValues.dividerThickness.setter();
}

uint64_t sub_187747A68()
{
  return EnvironmentValues.dividerThickness.setter();
}

uint64_t AnyNavigationPath.view<A>(basedOn:applying:index:apparentPosition:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  char v12 = *(unsigned char *)(a2 + 72);
  uint64_t v13 = *(void *)(a2 + 80);
  long long v14 = *(_OWORD *)(a2 + 16);
  v16[0] = *(_OWORD *)a2;
  v16[1] = v14;
  uint64_t v17 = v9;
  long long v18 = *(_OWORD *)(a2 + 40);
  uint64_t v19 = v10;
  uint64_t v20 = v11;
  char v21 = v12;
  uint64_t v22 = v13;
  return (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a7 + 152))(a1, v16, a3, a4, a5, a6, a8, a9);
}

uint64_t AnyNavigationPath.append<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *(void *)uint64_t v3 = (*(uint64_t (**)(void))(**(void **)v3 + 104))();
    swift_release();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(**(void **)v3 + 112))(a1, a2, a3);
}

uint64_t AnyNavigationPath.append<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *(void *)uint64_t v5 = (*(uint64_t (**)(void))(**(void **)v5 + 104))();
    swift_release();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)v5 + 120))(a1, a2, a3, a4, a5);
}

uint64_t AnyNavigationPath.contains<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 168))(a1, a3, a4) & 1;
}

void AnyNavigationPath.BoxBase.isEmpty.getter()
{
}

void AnyNavigationPath.BoxBase.count.getter()
{
}

void AnyNavigationPath.BoxBase.equals(_:)()
{
}

void AnyNavigationPath.BoxBase.copy()()
{
}

void AnyNavigationPath.BoxBase.append<A>(_:)()
{
}

{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyNavigationPath.BoxBase.removeLast(_:)()
{
}

void AnyNavigationPath.BoxBase.change(from:)()
{
}

void AnyNavigationPath.BoxBase.updatePossibilities(for:into:)()
{
}

void AnyNavigationPath.BoxBase.view<A>(basedOn:applying:index:apparentPosition:)()
{
}

void AnyNavigationPath.BoxBase.contains<A>(_:)()
{
}

void AnyNavigationPath.BoxBase.description.getter()
{
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyNavigationPath.BoxBase(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 96))(*a2) & 1;
}

uint64_t AnyNavigationPath.HeterogeneousBoxBase.copy()()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  char v4 = *(unsigned char *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v1;
  *(void *)(v7 + 24) = v2;
  *(void *)(v7 + 32) = v3;
  *(unsigned char *)(v7 + 40) = v4;
  *(void *)(v7 + 48) = v6;
  *(void *)(v7 + 56) = v5;
  outlined copy of NavigationPath.Representation(v1, v2, v3, v4);
  swift_bridgeObjectRetain();
  return v7;
}

uint64_t AnyNavigationPath.HeterogeneousBoxBase.append<A>(_:)(uint64_t a1, uint64_t a2)
{
  return swift_endAccess();
}

{
  swift_beginAccess();
  NavigationPath.append<A>(_:)(a1, a2);
  return swift_endAccess();
}

uint64_t AnyNavigationPath.HeterogeneousBoxBase.removeLast(_:)(Swift::Int a1)
{
  uint64_t v2 = v1;
  swift_beginAccess();
  unint64_t v8 = *(void *)(v1 + 48);
  uint64_t v6 = (void *)(v1 + 48);
  unint64_t v7 = v8;
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v16) {
      goto LABEL_9;
    }
  }
  else if (!*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_9;
  }
  if (*v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = *(void *)((*v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v9 >= a1) {
    uint64_t v10 = a1;
  }
  else {
    uint64_t v10 = v9;
  }
  uint64_t result = specialized RangeReplaceableCollection<>.removeLast(_:)(v10, v4, v5);
  BOOL v12 = __OFSUB__(a1, v10);
  a1 -= v10;
  if (v12)
  {
    __break(1u);
    return result;
  }
LABEL_9:
  if (a1 >= 1)
  {
    uint64_t v13 = *(void *)(v2 + 24);
    uint64_t v14 = *(void *)(v2 + 32);
    char v15 = *(unsigned char *)(v2 + 40);
    *(void *)&long long v20 = *(void *)(v2 + 16);
    *((void *)&v20 + 1) = v13;
    uint64_t v21 = v14;
    char v22 = v15;
    outlined copy of NavigationPath.Representation(v20, v13, v14, v15);
    NavigationPath.Representation.removeLast(_:)(a1);
    long long v17 = v20;
    uint64_t v18 = v21;
    char v19 = v22;
    NavigationPath.items.setter((uint64_t)&v17);
  }
  return swift_endAccess();
}

uint64_t AnyNavigationPath.HeterogeneousBoxBase.change(from:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = swift_dynamicCastClass();
  if (!v2)
  {
    lazy protocol witness table accessor for type AnyNavigationPath.Error and conformance AnyNavigationPath.Error();
    swift_allocError();
    *unint64_t v26 = xmmword_188354B20;
    return swift_willThrow();
  }
  uint64_t v3 = v2;
  swift_beginAccess();
  unint64_t v63 = *(void *)(v3 + 16);
  uint64_t v4 = *(void *)(v3 + 32);
  uint64_t v62 = *(void *)(v3 + 24);
  char v5 = *(unsigned char *)(v3 + 40);
  unint64_t v6 = *(void *)(v3 + 48);
  swift_beginAccess();
  uint64_t result = 2;
  if ((*(unsigned char *)(v1 + 40) & 1) == 0 && (v5 & 1) == 0)
  {
    uint64_t v60 = v4;
    outlined copy of NavigationPath.Representation(v63, v62, v4, 0);
    uint64_t v57 = v6 & 0xFFFFFFFFFFFFFF8;
    unint64_t v56 = v63 & 0xC000000000000001;
    swift_bridgeObjectRetain();
    int64_t v8 = 0;
    unint64_t v61 = v6;
    unint64_t v58 = v63 >> 62;
    unint64_t v59 = v6 >> 62;
    while (1)
    {
      unint64_t v9 = *(void *)(v1 + 16);
      unint64_t v10 = *(void *)(v1 + 24);
      unint64_t v11 = *(void *)(v1 + 32);
      uint64_t v12 = *(unsigned __int8 *)(v1 + 40);
      unint64_t v13 = *(void *)(v1 + 48);
      unint64_t v14 = v9 >> 62;
      if (v12) {
        break;
      }
      if (!v14)
      {
        uint64_t v20 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
        outlined copy of NavigationPath.Representation(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), 0);
        swift_bridgeObjectRetain();
        goto LABEL_16;
      }
      outlined copy of NavigationPath.Representation(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), 0);
      swift_bridgeObjectRetain();
      outlined copy of NavigationPath.Representation(v9, v10, v11, 0);
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      outlined consume of NavigationPath.Representation(v9, v10, v11, 0);
      if (!(v13 >> 62))
      {
LABEL_17:
        uint64_t v17 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_18;
      }
LABEL_39:
      swift_bridgeObjectRetain();
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_18:
      outlined consume of NavigationPath.Representation(v9, v10, v11, v12);
      swift_bridgeObjectRelease();
      uint64_t v21 = v20 + v17;
      if (__OFADD__(v20, v17))
      {
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
        while (2)
        {
          __break(1u);
LABEL_109:
          __break(1u);
LABEL_110:
          outlined copy of NavigationPath.Representation(v13, v12, v9, 1);
          swift_bridgeObjectRetain();
          outlined copy of NavigationPath.Representation(v13, v12, v9, 1);
          swift_bridgeObjectRetain();
          uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
LABEL_45:
          uint64_t v30 = *(void *)(v12 + 16);
          uint64_t v31 = v29 + v30;
          if (__OFADD__(v29, v30))
          {
            __break(1u);
          }
          else
          {
            if (v9 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v32 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
            }
            outlined consume of NavigationPath.Representation(v13, v12, v9, 1);
            BOOL v19 = __OFADD__(v31, v32);
            uint64_t v33 = v31 + v32;
            if (!v19)
            {
LABEL_53:
              if (!(v10 >> 62)) {
                goto LABEL_54;
              }
LABEL_113:
              swift_bridgeObjectRetain();
              uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              goto LABEL_55;
            }
            __break(1u);
LABEL_51:
            if (!v27)
            {
              uint64_t v33 = *(void *)(v28 + 16);
              outlined copy of NavigationPath.Representation(v13, v12, v9, 0);
              swift_bridgeObjectRetain();
              goto LABEL_53;
            }
          }
          outlined copy of NavigationPath.Representation(v13, v12, v9, 0);
          swift_bridgeObjectRetain();
          outlined copy of NavigationPath.Representation(v13, v12, v9, 0);
          uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
          outlined consume of NavigationPath.Representation(v13, v12, v9, 0);
          if (v10 >> 62) {
            goto LABEL_113;
          }
LABEL_54:
          uint64_t v34 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_55:
          outlined consume of NavigationPath.Representation(v13, v12, v9, v17);
          swift_bridgeObjectRelease();
          if (__OFADD__(v33, v34)) {
            continue;
          }
          break;
        }
        if (v33 + v34 == v8)
        {
          if (v58)
          {
            uint64_t v12 = v63;
            outlined copy of NavigationPath.Representation(v63, v62, v60, 0);
            swift_bridgeObjectRetain();
            outlined copy of NavigationPath.Representation(v63, v62, v60, 0);
            unint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
            outlined consume of NavigationPath.Representation(v63, v62, v60, 0);
            if (v59) {
              goto LABEL_116;
            }
LABEL_59:
            unint64_t v13 = *(void *)(v57 + 16);
          }
          else
          {
            unint64_t v9 = *(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10);
            outlined copy of NavigationPath.Representation(v63, v62, v60, 0);
            swift_bridgeObjectRetain();
            if (!v59) {
              goto LABEL_59;
            }
LABEL_116:
            swift_bridgeObjectRetain();
            unint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          outlined consume of NavigationPath.Representation(v63, v62, v60, 0);
          swift_bridgeObjectRelease();
          if (!__OFADD__(v9, v13))
          {
            if (v13 + v9 == v8)
            {
              outlined consume of NavigationPath.Representation(v63, v62, v60, 0);
              swift_bridgeObjectRelease();
              return 1;
            }
            goto LABEL_63;
          }
          __break(1u);
LABEL_118:
          outlined copy of NavigationPath.Representation(v13, v12, v9, 1);
          swift_bridgeObjectRetain();
          outlined copy of NavigationPath.Representation(v13, v12, v9, 1);
          swift_bridgeObjectRetain();
          uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          goto LABEL_66;
        }
LABEL_63:
        unint64_t v13 = *(void *)(v1 + 16);
        uint64_t v12 = *(void *)(v1 + 24);
        unint64_t v9 = *(void *)(v1 + 32);
        LOBYTE(v17) = *(unsigned char *)(v1 + 40);
        unint64_t v10 = *(void *)(v1 + 48);
        unint64_t v35 = v13 >> 62;
        if (v17)
        {
          if (v35) {
            goto LABEL_118;
          }
          uint64_t v36 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
          outlined copy of NavigationPath.Representation(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), 1);
          swift_bridgeObjectRetain();
          outlined copy of NavigationPath.Representation(v13, v12, v9, 1);
LABEL_66:
          uint64_t v37 = *(void *)(v12 + 16);
          uint64_t v38 = v36 + v37;
          if (!__OFADD__(v36, v37))
          {
            if (v9 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v39 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
            }
            outlined consume of NavigationPath.Representation(v13, v12, v9, 1);
            BOOL v19 = __OFADD__(v38, v39);
            uint64_t v40 = v38 + v39;
            if (v19)
            {
              __break(1u);
              goto LABEL_72;
            }
LABEL_75:
            if (!(v10 >> 62))
            {
LABEL_76:
              uint64_t v41 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
              goto LABEL_77;
            }
LABEL_121:
            swift_bridgeObjectRetain();
            uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
LABEL_77:
            outlined consume of NavigationPath.Representation(v13, v12, v9, v17);
            swift_bridgeObjectRelease();
            uint64_t v42 = v40 + v41;
            if (!__OFADD__(v40, v41))
            {
              uint64_t v44 = v60;
              unint64_t v43 = v61;
              if (v42 != v8)
              {
                outlined consume of NavigationPath.Representation(v63, v62, v60, 0);
                swift_bridgeObjectRelease();
                unint64_t v46 = *(void *)(v1 + 16);
                uint64_t v44 = *(void *)(v1 + 24);
                unint64_t v45 = *(void *)(v1 + 32);
                LOBYTE(v12) = *(unsigned char *)(v1 + 40);
                unint64_t v43 = *(void *)(v1 + 48);
                if ((v12 & 1) == 0) {
                  goto LABEL_94;
                }
                if (v46 >> 62) {
                  goto LABEL_129;
                }
                uint64_t v48 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
                outlined copy of NavigationPath.Representation(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), 1);
                swift_bridgeObjectRetain();
                outlined copy of NavigationPath.Representation(v46, v44, v45, 1);
                goto LABEL_88;
              }
              if (v58)
              {
                swift_bridgeObjectRetain();
                unint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
                outlined consume of NavigationPath.Representation(v63, v62, v60, 0);
                if (v59) {
                  goto LABEL_124;
                }
LABEL_81:
                unint64_t v46 = *(void *)(v57 + 16);
              }
              else
              {
                unint64_t v45 = *(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10);
                if (!v59) {
                  goto LABEL_81;
                }
LABEL_124:
                swift_bridgeObjectRetain();
                unint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
              }
              outlined consume of NavigationPath.Representation(v63, v62, v60, 0);
              swift_bridgeObjectRelease();
              unint64_t v47 = v45 + v46;
              if (__OFADD__(v45, v46))
              {
                __break(1u);
              }
              else
              {
                uint64_t result = v47 - v8;
                if (!__OFSUB__(v47, v8)) {
                  return result;
                }
              }
              __break(1u);
              while (2)
              {
                __break(1u);
LABEL_128:
                __break(1u);
LABEL_129:
                outlined copy of NavigationPath.Representation(v46, v44, v45, 1);
                swift_bridgeObjectRetain();
                outlined copy of NavigationPath.Representation(v46, v44, v45, 1);
                swift_bridgeObjectRetain();
                uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
LABEL_88:
                uint64_t v49 = *(void *)(v44 + 16);
                uint64_t v50 = v48 + v49;
                if (__OFADD__(v48, v49))
                {
                  __break(1u);
                }
                else
                {
                  if (v45 >> 62)
                  {
                    swift_bridgeObjectRetain();
                    uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    uint64_t v51 = *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
                  }
                  outlined consume of NavigationPath.Representation(v46, v44, v45, 1);
                  BOOL v19 = __OFADD__(v50, v51);
                  uint64_t v52 = v50 + v51;
                  if (!v19)
                  {
LABEL_96:
                    if (!(v43 >> 62)) {
                      goto LABEL_97;
                    }
LABEL_132:
                    swift_bridgeObjectRetain();
                    uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
                    swift_bridgeObjectRelease();
                    goto LABEL_98;
                  }
                  __break(1u);
LABEL_94:
                  if (!(v46 >> 62))
                  {
                    uint64_t v52 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
                    outlined copy of NavigationPath.Representation(v46, v44, v45, 0);
                    swift_bridgeObjectRetain();
                    goto LABEL_96;
                  }
                }
                outlined copy of NavigationPath.Representation(v46, v44, v45, 0);
                swift_bridgeObjectRetain();
                outlined copy of NavigationPath.Representation(v46, v44, v45, 0);
                uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
                outlined consume of NavigationPath.Representation(v46, v44, v45, 0);
                if (v43 >> 62) {
                  goto LABEL_132;
                }
LABEL_97:
                uint64_t v53 = *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_98:
                outlined consume of NavigationPath.Representation(v46, v44, v45, v12);
                swift_bridgeObjectRelease();
                uint64_t v54 = v52 + v53;
                if (__OFADD__(v52, v53)) {
                  continue;
                }
                break;
              }
              BOOL v19 = __OFSUB__(v54, v8);
              uint64_t v55 = v54 - v8;
              if (!v19) {
                return 2 * (v55 != 1);
              }
              goto LABEL_128;
            }
            goto LABEL_109;
          }
          __break(1u);
        }
        else if (!v35)
        {
          uint64_t v40 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
          outlined copy of NavigationPath.Representation(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), 0);
          swift_bridgeObjectRetain();
          goto LABEL_75;
        }
        outlined copy of NavigationPath.Representation(v13, v12, v9, 0);
        swift_bridgeObjectRetain();
        outlined copy of NavigationPath.Representation(v13, v12, v9, 0);
        uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
        outlined consume of NavigationPath.Representation(v13, v12, v9, 0);
        if (!(v10 >> 62)) {
          goto LABEL_76;
        }
        goto LABEL_121;
      }
      unint64_t v10 = v60;
      LOBYTE(v17) = v61;
      if (v8 >= v21) {
        goto LABEL_42;
      }
      if (v58)
      {
        outlined copy of NavigationPath.Representation(v63, v62, v60, 0);
        swift_bridgeObjectRetain();
        outlined copy of NavigationPath.Representation(v63, v62, v60, 0);
        unint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
        outlined consume of NavigationPath.Representation(v63, v62, v60, 0);
        if (!v59)
        {
LABEL_22:
          unint64_t v13 = *(void *)(v57 + 16);
          goto LABEL_23;
        }
      }
      else
      {
        unint64_t v9 = *(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10);
        outlined copy of NavigationPath.Representation(v63, v62, v60, 0);
        swift_bridgeObjectRetain();
        if (!v59) {
          goto LABEL_22;
        }
      }
      swift_bridgeObjectRetain();
      unint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_23:
      outlined consume of NavigationPath.Representation(v63, v62, v60, 0);
      swift_bridgeObjectRelease();
      if (__OFADD__(v9, v13)) {
        goto LABEL_103;
      }
      if (v8 >= (uint64_t)(v9 + v13))
      {
LABEL_42:
        unint64_t v13 = *(void *)(v1 + 16);
        uint64_t v12 = *(void *)(v1 + 24);
        unint64_t v9 = *(void *)(v1 + 32);
        LOBYTE(v17) = *(unsigned char *)(v1 + 40);
        unint64_t v10 = *(void *)(v1 + 48);
        unint64_t v27 = v13 >> 62;
        uint64_t v28 = v13 & 0xFFFFFFFFFFFFFF8;
        if ((v17 & 1) == 0) {
          goto LABEL_51;
        }
        if (v27) {
          goto LABEL_110;
        }
        uint64_t v29 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
        outlined copy of NavigationPath.Representation(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), 1);
        swift_bridgeObjectRetain();
        outlined copy of NavigationPath.Representation(v13, v12, v9, 1);
        goto LABEL_45;
      }
      if (*(unsigned char *)(v1 + 40))
      {
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      unint64_t v9 = *(void *)(v1 + 16);
      if ((v9 & 0xC000000000000001) != 0)
      {
        uint64_t v24 = *(void *)(v1 + 24);
        uint64_t v25 = *(void *)(v1 + 32);
        uint64_t v12 = *(void *)(v1 + 48);
        outlined copy of NavigationPath.Representation(*(void *)(v1 + 16), v24, v25, 0);
        swift_bridgeObjectRetain();
        outlined copy of NavigationPath.Representation(v9, v24, v25, 0);
        unint64_t v13 = MEMORY[0x18C117680](v8, v9);
        outlined consume of NavigationPath.Representation(v9, v24, v25, 0);
        outlined consume of NavigationPath.Representation(v9, v24, v25, 0);
        swift_bridgeObjectRelease();
        if (v56) {
          goto LABEL_36;
        }
      }
      else
      {
        if ((unint64_t)v8 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_104;
        }
        unint64_t v13 = *(void *)(v9 + 8 * v8 + 32);
        swift_retain();
        if (v56)
        {
LABEL_36:
          outlined copy of NavigationPath.Representation(v63, v62, v60, 0);
          swift_bridgeObjectRetain();
          outlined copy of NavigationPath.Representation(v63, v62, v60, 0);
          uint64_t v22 = MEMORY[0x18C117680](v8, v63);
          outlined consume of NavigationPath.Representation(v63, v62, v60, 0);
          outlined consume of NavigationPath.Representation(v63, v62, v60, 0);
          swift_bridgeObjectRelease();
          goto LABEL_31;
        }
      }
      if ((unint64_t)v8 >= *(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_105;
      }
      uint64_t v22 = *(void *)(v63 + 8 * v8 + 32);
      swift_retain();
LABEL_31:
      char v23 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 160))(v22);
      swift_release();
      swift_release();
      if ((v23 & 1) == 0)
      {
LABEL_72:
        outlined consume of NavigationPath.Representation(v63, v62, v10, 0);
        swift_bridgeObjectRelease();
        return 2;
      }
      ++v8;
    }
    if (v14)
    {
      outlined copy of NavigationPath.Representation(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), 1);
      swift_bridgeObjectRetain();
      outlined copy of NavigationPath.Representation(v9, v10, v11, 1);
      swift_bridgeObjectRetain();
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v15 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      outlined copy of NavigationPath.Representation(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), 1);
      swift_bridgeObjectRetain();
      outlined copy of NavigationPath.Representation(v9, v10, v11, 1);
    }
    uint64_t v16 = *(void *)(v10 + 16);
    uint64_t v17 = v15 + v16;
    if (__OFADD__(v15, v16)) {
      goto LABEL_106;
    }
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v18 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    outlined consume of NavigationPath.Representation(v9, v10, v11, 1);
    BOOL v19 = __OFADD__(v17, v18);
    uint64_t v20 = v17 + v18;
    if (v19) {
      goto LABEL_107;
    }
LABEL_16:
    if (!(v13 >> 62)) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
  return result;
}

uint64_t AnyNavigationPath.HeterogeneousBoxBase.updatePossibilities(for:into:)(uint64_t a1, uint64_t a2, char a3)
{
  swift_beginAccess();
  uint64_t v7 = ResolvedNavigationDestinations.updatePossibilities(for:over:)(a1, a2, a3, v3 + 16);
  swift_endAccess();
  return v7;
}

uint64_t AnyNavigationPath.HeterogeneousBoxBase.view<A>(basedOn:applying:index:apparentPosition:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v22 = *(_OWORD *)(a2 + 32);
  long long v23 = *(_OWORD *)(a2 + 16);
  long long v21 = *(_OWORD *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 64);
  char v11 = *(unsigned char *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  swift_beginAccess();
  uint64_t v14 = *(void *)(v8 + 16);
  uint64_t v13 = *(void *)(v8 + 24);
  uint64_t v15 = *(void *)(v8 + 32);
  char v16 = *(unsigned char *)(v8 + 40);
  uint64_t v18 = *(void *)(v8 + 48);
  uint64_t v17 = *(void *)(v8 + 56);
  uint64_t v35 = v14;
  uint64_t v36 = v13;
  uint64_t v37 = v15;
  char v38 = v16;
  uint64_t v39 = v18;
  uint64_t v40 = v17;
  v31[0] = *(_OWORD *)a2;
  v31[1] = v23;
  v31[2] = v22;
  v31[3] = v21;
  uint64_t v32 = v10;
  char v33 = v11;
  uint64_t v34 = v12;
  outlined copy of NavigationPath.Representation(v14, v13, v15, v16);
  swift_bridgeObjectRetain();
  uint64_t v19 = NavigationPath.view<A>(basedOn:applying:index:apparentPosition:)(a1, v31, a3, a4, a5, a6, a7, a8);
  outlined consume of NavigationPath.Representation(v14, v13, v15, v16);
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t AnyNavigationPath.HeterogeneousBoxBase.contains<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NavigationPath.contains<A>(_:)(a1, a2, a3) & 1;
}

unint64_t AnyNavigationPath.HeterogeneousBoxBase.description.getter()
{
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  outlined copy of NavigationPath.Representation(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
  swift_bridgeObjectRetain();
  v1._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return 0xD000000000000028;
}

uint64_t AnyNavigationPath.HeterogeneousBoxBase.__ivar_destroyer()
{
  outlined consume of NavigationPath.Representation(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));

  return swift_bridgeObjectRelease();
}

uint64_t AnyNavigationPath.HomogeneousBoxBase.append<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8);
  uint64_t result = AnyNavigationPath.HomogeneousBoxBase.asElementType<A>(_:)(a1, a2, (uint64_t)&v8 - v6);
  if (!v2)
  {
    swift_beginAccess();
    dispatch thunk of RangeReplaceableCollection.append(_:)();
    return swift_endAccess();
  }
  return result;
}

uint64_t AnyNavigationPath.HomogeneousBoxBase.asElementType<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v21 - v9;
  double v12 = MEMORY[0x1F4188790](v11);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))((char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v12);
  char v15 = swift_dynamicCast();
  char v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);
  if (v15)
  {
    uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
    v16(v10, 0, 1, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 32))(a3, v10, AssociatedTypeWitness);
  }
  else
  {
    v16(v10, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t DynamicType = swift_getDynamicType();
    lazy protocol witness table accessor for type AnyNavigationPath.Error and conformance AnyNavigationPath.Error();
    swift_allocError();
    *uint64_t v20 = AssociatedTypeWitness;
    v20[1] = DynamicType;
    return swift_willThrow();
  }
}

uint64_t AnyNavigationPath.HomogeneousBoxBase.removeLast(_:)()
{
  return swift_endAccess();
}

uint64_t AnyNavigationPath.HomogeneousBoxBase.change(from:)(uint64_t a1)
{
  uint64_t v137 = a1;
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(void *)v1;
  uint64_t v5 = *(void *)(*(void *)(*(void *)v1 + 200) + 8);
  long long v136 = v1;
  uint64_t v6 = *(void *)(v3 + 192);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v126 = *(void (**)(char *, uint64_t))(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v115 = (char *)v110 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  int v114 = (char *)v110 - v9;
  uint64_t v125 = v5;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v133 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  int v121 = (char *)v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v122 = (char *)v110 - v13;
  MEMORY[0x1F4188790](v14);
  char v16 = (char *)v110 - v15;
  MEMORY[0x1F4188790](v17);
  v132 = (char *)v110 - v18;
  uint64_t v139 = v6;
  uint64_t v19 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v20);
  v110[0] = (char *)v110 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)v110 - v23;
  MEMORY[0x1F4188790](v25);
  unint64_t v27 = (char *)v110 - v26;
  MEMORY[0x1F4188790](v28);
  long long v127 = (char *)v110 - v29;
  MEMORY[0x1F4188790](v30);
  uint64_t v32 = (char *)v110 - v31;
  MEMORY[0x1F4188790](v33);
  uint64_t v35 = (char *)v110 - v34;
  uint64_t v119 = v4;
  uint64_t v36 = swift_dynamicCastClass();
  if (v36)
  {
    uint64_t v117 = v27;
    unsigned __int8 v111 = v24;
    v110[1] = v2;
    uint64_t v37 = v36 + *(void *)(*(void *)v36 + 232);
    swift_beginAccess();
    uint64_t v120 = v10;
    uint64_t v38 = v19;
    uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
    uint64_t v40 = v139;
    v39(v32, v37, v139);
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v35, v32, v40);
    uint64_t v41 = &v136[*(void *)(*(void *)v136 + 232)];
    swift_beginAccess();
    uint64_t v42 = v127;
    v134 = (void (*)(char *, char *, uint64_t))v39;
    uint64_t v135 = v19 + 16;
    v39(v127, (uint64_t)v41, v40);
    unint64_t v43 = v132;
    dispatch thunk of Collection.startIndex.getter();
    long long v136 = *(char **)(v38 + 8);
    uint64_t v137 = v38 + 8;
    ((void (*)(char *, uint64_t))v136)(v42, v40);
    v130 = v16;
    dispatch thunk of Collection.startIndex.getter();
    uint64_t v44 = *(void (**)(void, void, void))(v133 + 16);
    unint64_t v45 = v35;
    unint64_t v46 = (void (**)(char *, uint64_t))(v133 + 8);
    uint64_t v113 = (void (**)(char *))((char *)v126 + 16);
    int v112 = (void (**)(char *, uint64_t))((char *)v126 + 8);
    unint64_t v123 = (void **)(v133 + 32);
    unint64_t v47 = v122;
    v131 = v45;
    uint64_t v48 = v120;
    uint64_t v49 = v121;
    v133 += 16;
    uint64_t v118 = (void (**)(char *, uint64_t))(v133 - 8);
    long long v128 = v41;
    uint64_t v129 = (void (*)(char *, char *, uint64_t))v44;
    v44(v122, v43, v120);
    while (1)
    {
      uint64_t v50 = v127;
      uint64_t v51 = v41;
      uint64_t v52 = v139;
      v134(v127, v51, v139);
      dispatch thunk of Collection.endIndex.getter();
      ((void (*)(char *, uint64_t))v136)(v50, v52);
      uint64_t AssociatedConformanceWitness = (void *)swift_getAssociatedConformanceWitness();
      LOBYTE(v50) = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v53 = *v46;
      (*v46)(v49, v48);
      v53(v47, v48);
      uint64_t v54 = v117;
      v134(v117, v131, v52);
      uint64_t v126 = v53;
      if ((v50 & 1) == 0) {
        break;
      }
      uint64_t v55 = v139;
      dispatch thunk of Collection.endIndex.getter();
      unint64_t v56 = AssociatedConformanceWitness;
      char v57 = dispatch thunk of static Comparable.< infix(_:_:)();
      v53(v47, v48);
      ((void (*)(char *, uint64_t))v136)(v54, v55);
      if ((v57 & 1) == 0) {
        goto LABEL_9;
      }
      unint64_t v58 = v127;
      uint64_t v59 = v139;
      v134(v127, v128, v139);
      uint64_t v60 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
      unint64_t v61 = *v113;
      uint64_t v62 = v114;
      uint64_t v63 = AssociatedTypeWitness;
      (*v113)(v114);
      v60(v138, 0);
      ((void (*)(char *, uint64_t))v136)(v58, v59);
      uint64_t v64 = v131;
      uint64_t v65 = dispatch thunk of Collection.subscript.read();
      uint64_t v66 = v115;
      v61(v115);
      ((void (*)(unsigned char *, void))v65)(v138, 0);
      LOBYTE(v65) = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v67 = *v112;
      (*v112)(v66, v63);
      v67(v62, v63);
      if ((v65 & 1) == 0)
      {
        uint64_t v91 = v120;
        long long v92 = v126;
        v126(v130, v120);
        v92(v132, v91);
        ((void (*)(char *, uint64_t))v136)(v64, v139);
        return 2;
      }
      uint64_t v68 = v139;
      v134(v58, v128, v139);
      uint64_t v69 = v121;
      uint64_t v70 = v132;
      uint64_t v48 = v120;
      v129(v121, v132, v120);
      unint64_t v47 = v122;
      dispatch thunk of Collection.index(after:)();
      uint64_t v71 = v118;
      uint64_t v72 = v126;
      v126(v69, v48);
      ((void (*)(char *, uint64_t))v136)(v58, v68);
      v72(v70, v48);
      uint64_t AssociatedConformanceWitness = *v123;
      ((void (*)(char *, char *, uint64_t))AssociatedConformanceWitness)(v70, v47, v48);
      uint64_t v73 = v130;
      v129(v69, v130, v48);
      dispatch thunk of Collection.index(after:)();
      v72(v69, v48);
      unint64_t v46 = v71;
      v72(v73, v48);
      uint64_t v74 = v73;
      uint64_t v49 = v69;
      ((void (*)(char *, char *, uint64_t))AssociatedConformanceWitness)(v74, v47, v48);
      uint64_t v41 = v128;
      v129(v47, v132, v48);
    }
    ((void (*)(char *, uint64_t))v136)(v54, v139);
    unint64_t v56 = AssociatedConformanceWitness;
LABEL_9:
    uint64_t v76 = v56;
    uint64_t v77 = v122;
    uint64_t v78 = v120;
    v129(v122, v132, v120);
    uint64_t v79 = v127;
    uint64_t v80 = v139;
    uint64_t v81 = v134;
    v134(v127, v128, v139);
    unint64_t v82 = v121;
    dispatch thunk of Collection.endIndex.getter();
    ((void (*)(char *, uint64_t))v136)(v79, v80);
    uint64_t AssociatedConformanceWitness = (void *)v76[1];
    LOBYTE(v79) = dispatch thunk of static Equatable.== infix(_:_:)();
    unint64_t v83 = v126;
    v126(v82, v78);
    v83(v77, v78);
    v81(v111, v131, v80);
    if (v79)
    {
      v129(v77, v130, v78);
      uint64_t v84 = v111;
      uint64_t v85 = v139;
      dispatch thunk of Collection.endIndex.getter();
      char v86 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v87 = v126;
      v126(v82, v78);
      v87(v77, v78);
      ((void (*)(char *, uint64_t))v136)(v84, v85);
      unint64_t v88 = v131;
      uint64_t v89 = v129;
      uint64_t v81 = v134;
      if (v86)
      {
        long long v90 = v126;
        v126(v130, v78);
        v90(v132, v78);
        ((void (*)(char *, uint64_t))v136)(v88, v139);
        return 1;
      }
    }
    else
    {
      ((void (*)(char *, uint64_t))v136)(v111, v139);
      uint64_t v89 = v129;
    }
    v89(v77, v132, v78);
    int v93 = v127;
    uint64_t v94 = v139;
    v81(v127, v128, v139);
    dispatch thunk of Collection.endIndex.getter();
    ((void (*)(char *, uint64_t))v136)(v93, v94);
    char v95 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v96 = v126;
    v126(v82, v78);
    v96(v77, v78);
    if (v95)
    {
      unint64_t v97 = v96;
      int v98 = v82;
      uint64_t v99 = v130;
      v129(v77, v130, v78);
      long long v100 = v131;
      uint64_t v101 = v139;
      dispatch thunk of Collection.endIndex.getter();
      uint64_t v35 = (char *)dispatch thunk of RandomAccessCollection.distance(from:to:)();
      v97(v98, v78);
      v97(v77, v78);
      v97(v99, v78);
      v97(v132, v78);
      ((void (*)(char *, uint64_t))v136)(v100, v101);
    }
    else
    {
      long long v102 = v128;
      uint64_t v103 = v139;
      uint64_t v104 = (void (*)(void, char *, uint64_t))v134;
      v134(v93, v128, v139);
      v129(v77, v132, v78);
      uint64_t v105 = v110[0];
      v104(v110[0], v102, v103);
      dispatch thunk of Collection.endIndex.getter();
      uint64_t v106 = (void (*)(char *, uint64_t))v136;
      ((void (*)(uint64_t, uint64_t))v136)(v105, v103);
      LODWORD(v105) = dispatch thunk of RandomAccessCollection.distance(from:to:)() != 1;
      long long v107 = v82;
      long long v108 = v126;
      v126(v107, v78);
      v108(v77, v78);
      v106(v93, v103);
      v108(v130, v78);
      v108(v132, v78);
      v106(v131, v103);
      return 2 * v105;
    }
  }
  else
  {
    lazy protocol witness table accessor for type AnyNavigationPath.Error and conformance AnyNavigationPath.Error();
    swift_allocError();
    *uint64_t v75 = xmmword_188354B20;
    swift_willThrow();
  }
  return (uint64_t)v35;
}

uint64_t AnyNavigationPath.HomogeneousBoxBase.view<A>(basedOn:applying:index:apparentPosition:)(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v64 = a8;
  uint64_t v63 = a7;
  uint64_t v62 = a6;
  uint64_t v56 = a5;
  uint64_t v61 = a4;
  uint64_t v60 = a3;
  uint64_t v65 = a1;
  uint64_t v10 = *v8;
  uint64_t v72 = *(void *)(*(void *)(*v8 + 200) + 8);
  uint64_t v11 = *(void *)(v10 + 192);
  uint64_t v12 = v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v58 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v57 = (char *)&v45 - v13;
  uint64_t v14 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v45 - v19;
  uint64_t v71 = swift_getAssociatedTypeWitness();
  uint64_t v70 = *(void *)(v71 - 8);
  MEMORY[0x1F4188790](v71);
  uint64_t v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v66 = (char *)&v45 - v24;
  *(void *)&long long v45 = a2;
  long long v51 = *(_OWORD *)(a2 + 16);
  long long v50 = *(_OWORD *)(a2 + 32);
  long long v49 = *(_OWORD *)(a2 + 48);
  uint64_t v48 = *(void *)(a2 + 64);
  int v47 = *(unsigned __int8 *)(a2 + 72);
  uint64_t v46 = *(void *)(a2 + 80);
  uint64_t v54 = v10;
  uint64_t v25 = v12;
  uint64_t v26 = (uint64_t)v12 + *(void *)(v10 + 232);
  uint64_t v69 = v26;
  uint64_t v53 = v25;
  swift_beginAccess();
  unint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v68 = v27;
  v27(v20, v26, v11);
  v27(v17, v26, v11);
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v14 + 8);
  v28(v17, v11);
  uint64_t v67 = v14 + 8;
  uint64_t v52 = v22;
  dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  uint64_t v55 = *(void (**)(char *, uint64_t))(v70 + 8);
  uint64_t v56 = v70 + 8;
  long long v45 = *(_OWORD *)v45;
  v55(v22, v71);
  v28(v20, v11);
  v74[0] = v45;
  v74[1] = v51;
  _OWORD v74[2] = v50;
  v74[3] = v49;
  uint64_t v75 = v48;
  char v76 = v47;
  uint64_t v77 = v46;
  v68(v20, v69, v11);
  uint64_t v29 = v20;
  uint64_t v30 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
  uint64_t v31 = v58;
  *(void *)&long long v51 = *(void *)(v58 + 16);
  uint64_t v32 = (uint64_t)v57;
  uint64_t v33 = AssociatedTypeWitness;
  ((void (*)(char *))v51)(v57);
  v30(v73, 0);
  v28(v29, v11);
  uint64_t v34 = v28;
  uint64_t v64 = ResolvedNavigationDestinations.view<A, B>(presenting:at:applying:)(v32, v62, v60, v61, v33, v63, v64);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, v33);
  v68(v29, v69, v11);
  uint64_t v35 = v52;
  uint64_t v36 = v66;
  uint64_t v37 = v71;
  (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v52, v66, v71);
  uint64_t v38 = (void (*)(_OWORD *, void))dispatch thunk of Collection.subscript.read();
  uint64_t v40 = v39;
  uint64_t v41 = v65;
  v65[3] = v33;
  v41[4] = *(void *)(v54 + 224);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v41);
  ((void (*)(uint64_t *, uint64_t, uint64_t))v51)(boxed_opaque_existential_1, v40, v33);
  v38(v74, 0);
  unint64_t v43 = v55;
  v55(v35, v37);
  v34(v29, v11);
  v43(v36, v37);
  return v64;
}

uint64_t AnyNavigationPath.HomogeneousBoxBase.contains<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = a1;
  uint64_t v30 = *v2;
  uint64_t v4 = *(void *)(v30 + 192);
  uint64_t v31 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v29 = (char *)&v28 - v5;
  uint64_t v28 = *(void *)(*(void *)(*(void *)(v6 + 200) + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v28 - v10;
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  double v17 = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v28 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v14, v32, a2, v17);
  int v21 = swift_dynamicCast();
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  if (v21)
  {
    v22(v11, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v19, v11, AssociatedTypeWitness);
    uint64_t v23 = (uint64_t)v2 + *(void *)(*v2 + 232);
    swift_beginAccess();
    uint64_t v24 = v31;
    uint64_t v25 = v29;
    (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v29, v23, v4);
    char v26 = Sequence<>.contains(_:)();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v25, v4);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v19, AssociatedTypeWitness);
  }
  else
  {
    v22(v11, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    char v26 = 0;
  }
  return v26 & 1;
}

unint64_t AnyNavigationPath.HomogeneousBoxBase.description.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 192);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)v9 - v4;
  v9[1] = 0;
  _OWORD v9[2] = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  unint64_t v10 = 0xD000000000000026;
  unint64_t v11 = 0x8000000188327B80;
  uint64_t v6 = v1 + *(void *)(*(void *)v1 + 232);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  v7._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t AnyNavigationPath.HomogeneousBoxBase.__ivar_destroyer()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 192) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 232));
}

ValueMetadata *type metadata accessor for AnyNavigationPath.ToHeterogeneous()
{
  return &type metadata for AnyNavigationPath.ToHeterogeneous;
}

uint64_t protocol witness for Error._domain.getter in conformance AnyNavigationPath.Error()
{
  return MEMORY[0x1F4185E10]();
}

uint64_t protocol witness for Error._code.getter in conformance AnyNavigationPath.Error()
{
  return MEMORY[0x1F4185E08]();
}

uint64_t protocol witness for Error._userInfo.getter in conformance AnyNavigationPath.Error()
{
  return MEMORY[0x1F4185E18]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance AnyNavigationPath.Error()
{
  return MEMORY[0x1F4185E00]();
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance AnyNavigationPath.ToHeterogeneous(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  outlined consume of NavigationPath.Representation(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
  swift_bridgeObjectRelease();
  if (*(__objc2_class **)v3 != _TtCV7SwiftUI17AnyNavigationPathP33_9DF1331F7AC5F2344ADB74E74311CCBE20HeterogeneousBoxBase) {
    uint64_t v3 = 0;
  }
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = *(void *)(v3 + 24);
  uint64_t v6 = *(void *)(v3 + 32);
  char v7 = *(unsigned char *)(v3 + 40);
  uint64_t v9 = *(void *)(v3 + 48);
  uint64_t v8 = *(void *)(v3 + 56);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v8;
  outlined copy of NavigationPath.Representation(v4, v5, v6, v7);
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance AnyNavigationPath.ToHomogeneous<A>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return specialized AnyNavigationPath.ToHomogeneous.set(base:newValue:)(a1, *a2, *(void *)(a3 + 16));
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnyNavigationPath()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176))();
}

uint64_t specialized AnyNavigationPath.ToHomogeneous.set(base:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a3);
  type metadata accessor for AnyNavigationPath.HomogeneousBoxBase();
  uint64_t v6 = swift_dynamicCastClassUnconditional();
  uint64_t v7 = v6 + *(void *)(*(void *)v6 + 232);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, v7, a3);
}

uint64_t getEnumTagSinglePayload for AnyNavigationPath.Error(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x3FFE && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 16382);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 50) >> 12) | (4
                                                           * ((*(void *)(a1 + 8) >> 50) & 0xC00 | ((*(void *)(a1 + 8) & 7) << 7) | (*(void *)a1 >> 57) & 0x78 | *(void *)a1 & 7))) ^ 0x3FFF;
  if (v3 >= 0x3FFD) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AnyNavigationPath.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3FFD)
  {
    *(void *)uint64_t result = a2 - 16382;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x3FFE) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3FFE) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      unint64_t v3 = (-a2 >> 2) & 0xFFF | ((-a2 & 0x3FFF) << 12);
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(void *)(result + 8) = ((v3 >> 7) | (v3 << 50)) & 0xF000000000000007;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyNavigationPath.Error()
{
  return &type metadata for AnyNavigationPath.Error;
}

uint64_t DefaultDateProgressLabel.body.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for Date?(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v13 - v4;
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1F4188790](v6 - 8);
  outlined init with copy of ClosedRange<Date>(v1, (uint64_t)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v5, 1, 1, v8);
  type metadata accessor for DefaultDateProgressLabel(0);
  uint64_t result = Text.init(timerInterval:pauseTime:countsDown:showsHours:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v10;
  *(unsigned char *)(a1 + 16) = v11 & 1;
  *(void *)(a1 + 24) = v12;
  return result;
}

uint64_t type metadata accessor for DefaultDateProgressLabel(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for DefaultDateProgressLabel);
}

uint64_t protocol witness for View.body.getter in conformance DefaultDateProgressLabel@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for Date?(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v13 - v4;
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1F4188790](v6 - 8);
  outlined init with copy of ClosedRange<Date>(v1, (uint64_t)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v5, 1, 1, v8);
  uint64_t result = Text.init(timerInterval:pauseTime:countsDown:showsHours:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v10;
  *(unsigned char *)(a1 + 16) = v11 & 1;
  *(void *)(a1 + 24) = v12;
  return result;
}

uint64_t ProgressView.init(timerInterval:countsDown:label:currentValueLabel:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v32 = a6;
  uint64_t v33 = a5;
  uint64_t v30[2] = a4;
  uint64_t v31 = a3;
  int v34 = a2;
  uint64_t v35 = a9;
  v30[0] = a10;
  v30[1] = a11;
  uint64_t v14 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)v30 - v15;
  uint64_t v17 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)v30 - v18;
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1F4188790](v20 - 8);
  uint64_t v22 = (char *)v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = a7;
  uint64_t v37 = a8;
  uint64_t v38 = a10;
  uint64_t v39 = a11;
  uint64_t v23 = type metadata accessor for ProgressView.Base();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  char v26 = (char *)v30 - v25;
  uint64_t v27 = outlined init with copy of ClosedRange<Date>(a1, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  v31(v27);
  uint64_t v28 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(a7 - 8) + 56))(v19, 0, 1, a7);
  v33(v28);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a8 - 8) + 56))(v16, 0, 1, a8);
  CustomProgressView.init(interval:countdown:label:currentValueLabel:)((uint64_t)v22, v34, (uint64_t)v19, (uint64_t)v16, a7, a8, (uint64_t)v26);
  outlined destroy of ClosedRange<Date>(a1, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35, v26, v23);
}

uint64_t ProgressView.init(interval:countdown:label:currentValueLabel:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v22 = a7;
  uint64_t v23 = a8;
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v20 = (char *)&v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ClosedRange<Date>(a1, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  ProgressView.init(timerInterval:countsDown:label:currentValueLabel:)((uint64_t)v20, a2, a3, a4, a5, a6, v22, v23, a9, a10, a11);
  return outlined destroy of ClosedRange<Date>(a1, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
}

uint64_t ProgressView<>.init(timerInterval:countsDown:label:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v29 = a6;
  uint64_t v30 = a4;
  uint64_t v31 = a3;
  int v32 = a2;
  uint64_t v33 = a7;
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for DefaultDateProgressLabel?, type metadata accessor for DefaultDateProgressLabel, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)v27 - v11;
  uint64_t v13 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)v27 - v14;
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DefaultDateProgressLabel(255);
  v27[1] = v19;
  uint64_t v28 = lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type DefaultDateProgressLabel and conformance DefaultDateProgressLabel, (void (*)(uint64_t))type metadata accessor for DefaultDateProgressLabel);
  uint64_t v34 = a5;
  uint64_t v35 = v19;
  uint64_t v36 = a6;
  uint64_t v37 = v28;
  uint64_t v20 = type metadata accessor for ProgressView.Base();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)v27 - v22;
  uint64_t v24 = outlined init with copy of ClosedRange<Date>(a1, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  v31(v24);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a5 - 8) + 56))(v15, 0, 1, a5);
  outlined init with copy of ClosedRange<Date>(a1, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  uint64_t v25 = swift_checkMetadataState();
  LOBYTE(v19) = v32;
  v12[*(int *)(v25 + 20)] = v32;
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v12, 0, 1, v25);
  CustomProgressView.init(interval:countdown:label:currentValueLabel:)((uint64_t)v18, v19, (uint64_t)v15, (uint64_t)v12, a5, v25, (uint64_t)v23);
  outlined destroy of ClosedRange<Date>(a1, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v21 + 32))(v33, v23, v20);
}

uint64_t ProgressView<>.init(interval:countdown:label:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ClosedRange<Date>(a1, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  ProgressView<>.init(timerInterval:countsDown:label:)((uint64_t)v16, a2, a3, a4, a5, a6, a7);
  return outlined destroy of ClosedRange<Date>(a1, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
}

uint64_t ProgressView<>.init(timerInterval:countsDown:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v29 = type metadata accessor for CustomProgressView;
  uint64_t v30 = a3;
  type metadata accessor for CustomProgressView<EmptyView, DefaultDateProgressLabel>(0, &lazy cache variable for type metadata for CustomProgressView<EmptyView, DefaultDateProgressLabel>, (uint64_t (*)(uint64_t, void *))type metadata accessor for CustomProgressView);
  uint64_t v6 = v5 - 8;
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v25 - v7;
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for DefaultDateProgressLabel?, type metadata accessor for DefaultDateProgressLabel, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v25 - v10;
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for ProgressView.Base;
  type metadata accessor for CustomProgressView<EmptyView, DefaultDateProgressLabel>(0, &lazy cache variable for type metadata for ProgressView<EmptyView, DefaultDateProgressLabel>.Base, (uint64_t (*)(uint64_t, void *))type metadata accessor for ProgressView.Base);
  uint64_t v27 = v15;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v25 - v16;
  uint64_t v26 = a1;
  outlined init with copy of ClosedRange<Date>(a1, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  outlined init with copy of ClosedRange<Date>(a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  uint64_t v18 = type metadata accessor for DefaultDateProgressLabel(0);
  v11[*(int *)(v18 + 20)] = a2;
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  v19(v11, 0, 1, v18);
  uint64_t v20 = *(int *)(v6 + 60);
  uint64_t v21 = (uint64_t)&v8[*(int *)(v6 + 64)];
  v19((char *)v21, 1, 1, v18);
  type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
  uint64_t v23 = *(int *)(v22 + 48);
  outlined init with take of ClosedRange<Date>((uint64_t)v14, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  v8[v23] = a2;
  type metadata accessor for ProgressViewValue(0);
  swift_storeEnumTagMultiPayload();
  v8[v20] = 0;
  outlined assign with take of DefaultDateProgressLabel?((uint64_t)v11, v21);
  outlined init with take of CustomProgressView<EmptyView, DefaultDateProgressLabel>((uint64_t)v8, (uint64_t)v17, &lazy cache variable for type metadata for CustomProgressView<EmptyView, DefaultDateProgressLabel>, (uint64_t (*)(uint64_t, void *))v29);
  outlined destroy of ClosedRange<Date>(v26, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  swift_storeEnumTagMultiPayload();
  return outlined init with take of CustomProgressView<EmptyView, DefaultDateProgressLabel>((uint64_t)v17, v30, &lazy cache variable for type metadata for ProgressView<EmptyView, DefaultDateProgressLabel>.Base, (uint64_t (*)(uint64_t, void *))v28);
}

void type metadata accessor for CustomProgressView<EmptyView, DefaultDateProgressLabel>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for DefaultDateProgressLabel(255);
    uint64_t v7 = lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type DefaultDateProgressLabel and conformance DefaultDateProgressLabel, (void (*)(uint64_t))type metadata accessor for DefaultDateProgressLabel);
    v10[0] = MEMORY[0x1E4F417F8];
    v10[1] = v6;
    _OWORD v10[2] = MEMORY[0x1E4F417F0];
    _OWORD v10[3] = v7;
    unint64_t v8 = a3(a1, v10);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)()
{
  if (!lazy cache variable for type metadata for (interval: ClosedRange<Date>, countdown: Bool))
  {
    type metadata accessor for ClosedRange<Date>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (interval: ClosedRange<Date>, countdown: Bool));
    }
  }
}

uint64_t outlined assign with take of DefaultDateProgressLabel?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for DefaultDateProgressLabel?, type metadata accessor for DefaultDateProgressLabel, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of CustomProgressView<EmptyView, DefaultDateProgressLabel>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t, void *))
{
  type metadata accessor for CustomProgressView<EmptyView, DefaultDateProgressLabel>(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t ProgressView<>.init(interval:countdown:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1F4188790](v6 - 8);
  unint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ClosedRange<Date>(a1, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  ProgressView<>.init(timerInterval:countsDown:)((uint64_t)v8, a2, a3);
  return outlined destroy of ClosedRange<Date>(a1, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
}

uint64_t associated type witness table accessor for View.Body : View in DefaultDateProgressLabel()
{
  return swift_getOpaqueTypeConformance2();
}

void *initializeBufferWithCopyOfBuffer for DefaultDateProgressLabel(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (void *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    unint64_t v8 = *(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    type metadata accessor for ClosedRange<Date>();
    v8((void *)((char *)a1 + *(int *)(v9 + 36)), (void *)((char *)a2 + *(int *)(v9 + 36)), v7);
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t initializeWithCopy for DefaultDateProgressLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  type metadata accessor for ClosedRange<Date>();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for DefaultDateProgressLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  type metadata accessor for ClosedRange<Date>();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for DefaultDateProgressLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18774CE30);
}

uint64_t sub_18774CE30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for ClosedRange<Date>();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for DefaultDateProgressLabel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18774CF14);
}

void sub_18774CF14(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for ClosedRange<Date>();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  }
}

uint64_t sub_18774CFD4()
{
  return MEMORY[0x1E4F41418];
}

ValueMetadata *type metadata accessor for _TimelineProgressViewBaseEmptyState()
{
  return &type metadata for _TimelineProgressViewBaseEmptyState;
}

uint64_t ProgressViewSchedule.entries(from:mode:)(uint64_t a1, unsigned char *a2)
{
  long long v100 = a2;
  uint64_t v82 = type metadata accessor for ProgressViewSchedule(0);
  uint64_t v104 = *(void *)(v82 - 8);
  MEMORY[0x1F4188790](v82);
  uint64_t v105 = v2;
  uint64_t v106 = (uint64_t)&v77 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v94 = (uint64_t)&v77 - v4;
  uint64_t v5 = type metadata accessor for Calendar.RepeatedTimePolicy();
  uint64_t v91 = *(void *)(v5 - 8);
  uint64_t v92 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v89 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = type metadata accessor for Calendar.SearchDirection();
  uint64_t v86 = *(void *)(v102 - 8);
  MEMORY[0x1F4188790](v102);
  unint64_t v87 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = type metadata accessor for Calendar.MatchingPolicy();
  uint64_t v84 = *(void *)(v99 - 8);
  MEMORY[0x1F4188790](v99);
  unint64_t v83 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  type metadata accessor for Date?(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v10 - 8);
  long long v90 = (char *)&v77 - v11;
  uint64_t v81 = type metadata accessor for Calendar.Component();
  uint64_t v80 = *(void *)(v81 - 8);
  MEMORY[0x1F4188790](v81);
  uint64_t v13 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x1E4F27D68], v9);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v77 - v15;
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Calendar?, MEMORY[0x1E4F27CA0], v9);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v77 - v18;
  uint64_t v20 = type metadata accessor for DateComponents();
  uint64_t v93 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v77 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for Calendar();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v77 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = type metadata accessor for Date();
  uint64_t v101 = *(void *)(v98 - 8);
  MEMORY[0x1F4188790](v98);
  uint64_t v85 = (char *)&v77 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v28);
  char v95 = (char *)&v77 - v29;
  uint64_t v30 = type metadata accessor for PeriodicTimelineSchedule();
  MEMORY[0x1F4188790](v30 - 8);
  uint64_t v96 = (char *)&v77 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for PeriodicTimelineSchedule.Entries();
  MEMORY[0x1F4188790](v32 - 8);
  unint64_t v97 = (char *)&v77 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for AnimationTimelineSchedule.Entries();
  double v35 = MEMORY[0x1F4188790](v34);
  uint64_t v37 = (char *)&v77 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*v100)
  {
    long long v100 = (unsigned char *)v20;
    unint64_t v88 = v26;
    static Calendar.current.getter();
    uint64_t v79 = v24;
    uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
    uint64_t v82 = v23;
    v38(v19, 1, 1, v23);
    uint64_t v39 = type metadata accessor for TimeZone();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v16, 1, 1, v39);
    uint64_t v40 = v80;
    uint64_t v41 = v81;
    (*(void (**)(char *, void, uint64_t))(v80 + 104))(v13, *MEMORY[0x1E4F27C50], v81);
    type metadata accessor for ClosedRange<Date>();
    uint64_t v42 = v103;
    Calendar.component(_:from:)();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v13, v41);
    uint64_t v78 = v22;
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
    uint64_t v43 = v84;
    uint64_t v44 = v83;
    (*(void (**)(char *, void, uint64_t))(v84 + 104))(v83, *MEMORY[0x1E4F27B68], v99);
    uint64_t v45 = v86;
    uint64_t v46 = v87;
    (*(void (**)(char *, void, uint64_t))(v86 + 104))(v87, *MEMORY[0x1E4F27B90], v102);
    uint64_t v48 = v91;
    uint64_t v47 = v92;
    long long v49 = v89;
    (*(void (**)(char *, void, uint64_t))(v91 + 104))(v89, *MEMORY[0x1E4F27BA8], v92);
    uint64_t v50 = (uint64_t)v90;
    Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v47);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v102);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v99);
    uint64_t v51 = v42;
    uint64_t v52 = v94;
    outlined init with copy of ClosedRange<Date>(v42, v94, type metadata accessor for ProgressViewSchedule);
    uint64_t v53 = v101;
    uint64_t v54 = v98;
    int v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v101 + 48))(v50, 1, v98);
    uint64_t v56 = v78;
    if (v55 == 1)
    {
      char v57 = *(void (**)(char *, uint64_t, uint64_t))(v53 + 16);
      uint64_t v58 = v85;
      v57(v85, v52, v54);
      outlined destroy of ClosedRange<Date>(v52, type metadata accessor for ProgressViewSchedule);
      outlined destroy of Date?(v50);
    }
    else
    {
      outlined destroy of ClosedRange<Date>(v52, type metadata accessor for ProgressViewSchedule);
      uint64_t v58 = v85;
      (*(void (**)(char *, uint64_t, uint64_t))(v53 + 32))(v85, v50, v54);
      char v57 = *(void (**)(char *, uint64_t, uint64_t))(v53 + 16);
    }
    v57(v95, (uint64_t)v58, v54);
    uint64_t v66 = (uint64_t)v96;
    PeriodicTimelineSchedule.init(from:by:)();
    char v108 = 1;
    uint64_t v67 = (uint64_t)v97;
    PeriodicTimelineSchedule.entries(from:mode:)();
    outlined destroy of ClosedRange<Date>(v66, MEMORY[0x1E4F40DB0]);
    type metadata accessor for _SequenceBox<PeriodicTimelineSchedule.Entries>();
    uint64_t v68 = (void *)swift_allocObject();
    outlined init with take of ClosedRange<Date>(v67, (uint64_t)v68 + *(void *)(*MEMORY[0x1E4FBBA60] + *v68 + 16), MEMORY[0x1E4F40D98]);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v58, v54);
    (*(void (**)(char *, unsigned char *))(v93 + 8))(v56, v100);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v88, v82);
  }
  else
  {
    uint64_t v51 = v103;
    uint64_t v59 = *(void (**)(char *, uint64_t, uint64_t, double))(v101 + 16);
    if (*(unsigned char *)(v103 + *(int *)(v82 + 20)))
    {
      v59(v95, v103, v98, v35);
      uint64_t v60 = (uint64_t)v96;
      PeriodicTimelineSchedule.init(from:by:)();
      char v107 = 0;
      uint64_t v61 = v97;
      PeriodicTimelineSchedule.entries(from:mode:)();
      outlined destroy of ClosedRange<Date>(v60, MEMORY[0x1E4F40DB0]);
      type metadata accessor for _SequenceBox<PeriodicTimelineSchedule.Entries>();
      uint64_t v62 = (void *)swift_allocObject();
      uint64_t v63 = (uint64_t)v62 + *(void *)(*MEMORY[0x1E4FBBA60] + *v62 + 16);
      uint64_t v64 = (uint64_t (*)())MEMORY[0x1E4F40D98];
      uint64_t v65 = (uint64_t)v61;
    }
    else
    {
      v59(v37, v103, v98, v35);
      uint64_t v69 = &v37[*(int *)(v34 + 20)];
      *(void *)uint64_t v69 = 0x3F81111111111111;
      v69[8] = 0;
      type metadata accessor for _SequenceBox<AnimationTimelineSchedule.Entries>();
      uint64_t v70 = (void *)swift_allocObject();
      uint64_t v63 = (uint64_t)v70 + *(void *)(*MEMORY[0x1E4FBBA60] + *v70 + 16);
      uint64_t v64 = type metadata accessor for AnimationTimelineSchedule.Entries;
      uint64_t v65 = (uint64_t)v37;
    }
    outlined init with take of ClosedRange<Date>(v65, v63, (uint64_t (*)(void))v64);
  }
  uint64_t v71 = dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  uint64_t v72 = v51;
  uint64_t v73 = v106;
  outlined init with copy of ClosedRange<Date>(v72, v106, type metadata accessor for ProgressViewSchedule);
  unint64_t v74 = (*(unsigned __int8 *)(v104 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80);
  uint64_t v75 = swift_allocObject();
  *(void *)(v75 + 16) = v71;
  outlined init with take of ClosedRange<Date>(v73, v75 + v74, type metadata accessor for ProgressViewSchedule);
  type metadata accessor for _IteratorBox<_ClosureBasedIterator<Date>>();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = partial apply for closure #1 in ProgressViewSchedule.entries(from:mode:);
  *(void *)(result + 24) = v75;
  return result;
}

uint64_t closure #1 in ProgressViewSchedule.entries(from:mode:)@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ProgressViewSchedule(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date?(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v24 - v8;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v24 - v15;
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) != 1)
  {
    uint64_t v25 = a2;
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v18(v16, v9, v10);
    type metadata accessor for ClosedRange<Date>();
    char v19 = static Date.> infix(_:_:)();
    outlined init with copy of ClosedRange<Date>(a1, (uint64_t)v6, type metadata accessor for ProgressViewSchedule);
    if (v19)
    {
      static Date.now.getter();
      lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1E4F27928]);
      char v20 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v21 = *(void (**)(char *, uint64_t))(v11 + 8);
      v21(v13, v10);
      outlined destroy of ClosedRange<Date>((uint64_t)v6, type metadata accessor for ProgressViewSchedule);
      if ((v20 & 1) == 0)
      {
        a2 = v25;
        static Date.distantFuture.getter();
        v21(v16, v10);
LABEL_8:
        uint64_t v17 = 0;
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(a2, v17, 1, v10);
      }
    }
    else
    {
      outlined destroy of ClosedRange<Date>((uint64_t)v6, type metadata accessor for ProgressViewSchedule);
    }
    uint64_t v22 = v25;
    v18(v25, v16, v10);
    a2 = v22;
    goto LABEL_8;
  }
  outlined destroy of Date?((uint64_t)v9);
  uint64_t v17 = 1;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(a2, v17, 1, v10);
}

uint64_t protocol witness for TimelineSchedule.entries(from:mode:) in conformance ProgressViewSchedule@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = ProgressViewSchedule.entries(from:mode:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _TimelineProgressViewBaseEmptyState.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type _TimelineProgressViewBaseEmptyState.CodingKeys and conformance _TimelineProgressViewBaseEmptyState.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _TimelineProgressViewBaseEmptyState.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type _TimelineProgressViewBaseEmptyState.CodingKeys and conformance _TimelineProgressViewBaseEmptyState.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance _TimelineProgressViewBaseEmptyState(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance _TimelineProgressViewBaseEmptyState(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<_TimelineProgressViewBaseEmptyState.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<_TimelineProgressViewBaseEmptyState.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type _TimelineProgressViewBaseEmptyState.CodingKeys and conformance _TimelineProgressViewBaseEmptyState.CodingKeys, (uint64_t)&unk_1ED461A10, MEMORY[0x1E4FBBDE0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type _TimelineProgressViewBaseEmptyState.CodingKeys and conformance _TimelineProgressViewBaseEmptyState.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type _TimelineProgressViewBaseEmptyState.CodingKeys and conformance _TimelineProgressViewBaseEmptyState.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type _TimelineProgressViewBaseEmptyState.CodingKeys and conformance _TimelineProgressViewBaseEmptyState.CodingKeys;
  if (!lazy protocol witness table cache variable for type _TimelineProgressViewBaseEmptyState.CodingKeys and conformance _TimelineProgressViewBaseEmptyState.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TimelineProgressViewBaseEmptyState.CodingKeys and conformance _TimelineProgressViewBaseEmptyState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _TimelineProgressViewBaseEmptyState.CodingKeys and conformance _TimelineProgressViewBaseEmptyState.CodingKeys;
  if (!lazy protocol witness table cache variable for type _TimelineProgressViewBaseEmptyState.CodingKeys and conformance _TimelineProgressViewBaseEmptyState.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TimelineProgressViewBaseEmptyState.CodingKeys and conformance _TimelineProgressViewBaseEmptyState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _TimelineProgressViewBaseEmptyState.CodingKeys and conformance _TimelineProgressViewBaseEmptyState.CodingKeys;
  if (!lazy protocol witness table cache variable for type _TimelineProgressViewBaseEmptyState.CodingKeys and conformance _TimelineProgressViewBaseEmptyState.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TimelineProgressViewBaseEmptyState.CodingKeys and conformance _TimelineProgressViewBaseEmptyState.CodingKeys);
  }
  return result;
}

void type metadata completion function for TimelineProgressView.ArchivableTimelineProgressView()
{
}

{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for ClosedRange<Date>();
  if (v0 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *initializeBufferWithCopyOfBuffer for TimelineProgressView.ArchivableTimelineProgressView(void *a1, void *a2)
{
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v22 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  int v5 = *(_DWORD *)(v3 + 80);
  uint64_t v6 = v4 + v5;
  uint64_t v7 = (v6 & ~(unint64_t)v5) + v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  unint64_t v11 = v10 | v5 | 3;
  if (v11 > 7
    || ((*(_DWORD *)(v9 + 80) | v5) & 0x100000) != 0
    || ((v10 + ((v7 + 5) & 0xFFFFFFFFFFFFFFFCLL) + 17) & ~v10)
     + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) > 0x18)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (void *)(v14 + (((v10 | v5) + 16) & ~v11));
    swift_retain();
  }
  else
  {
    uint64_t v21 = AssociatedTypeWitness;
    uint64_t v15 = *(void (**)(void *, void *, uint64_t))(v3 + 16);
    v15(a1, a2, v22);
    v15((void *)(((unint64_t)a1 + v6) & ~(unint64_t)v5), (void *)(((unint64_t)a2 + v6) & ~(unint64_t)v5), v22);
    uint64_t v16 = (char *)a1 + v7;
    *uint64_t v16 = *((unsigned char *)a2 + v7);
    v16[1] = *((unsigned char *)a2 + v7 + 1);
    unint64_t v17 = ((unint64_t)a1 + v7 + 5) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v18 = ((unint64_t)a2 + v7 + 5) & 0xFFFFFFFFFFFFFFFCLL;
    long long v19 = *(_OWORD *)v18;
    *(unsigned char *)(v17 + 16) = *(unsigned char *)(v18 + 16);
    *(_OWORD *)unint64_t v17 = v19;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))((v17 + v10 + 17) & ~v10, (v18 + v10 + 17) & ~v10, v21);
  }
  return a1;
}

uint64_t destroy for TimelineProgressView.ArchivableTimelineProgressView(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v5 = v3 + 8;
  v4(a1, v2);
  uint64_t v6 = *(void *)(v5 + 56);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 72);
  v4((v7 + v8) & ~v8, v2);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v11 = *(uint64_t (**)(unint64_t, uint64_t))(v10 + 8);
  uint64_t v12 = AssociatedTypeWitness;
  unint64_t v13 = (((v7 + ((v6 + v8) & ~v8) + 5) & 0xFFFFFFFFFFFFFFFCLL) + *(unsigned __int8 *)(v10 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);

  return v11(v13, v12);
}

uint64_t initializeWithCopy for TimelineProgressView.ArchivableTimelineProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  uint64_t v7 = v5 + 16;
  v6(a1, a2, v4);
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 64);
  v6((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, v4);
  uint64_t v10 = ((v8 + v9) & ~v9) + v8;
  unint64_t v11 = (unsigned char *)(v10 + a1);
  uint64_t v12 = (unsigned char *)(v10 + a2);
  *unint64_t v11 = *v12;
  v11[1] = v12[1];
  unint64_t v13 = (unint64_t)(v11 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v14 = (unint64_t)(v12 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  long long v15 = *(_OWORD *)v14;
  *(unsigned char *)(v13 + 16) = *(unsigned char *)(v14 + 16);
  *(_OWORD *)unint64_t v13 = v15;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v17 + 16))((*(unsigned __int8 *)(v17 + 80) + 17 + v13) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), (*(unsigned __int8 *)(v17 + 80) + 17 + v14) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for TimelineProgressView.ArchivableTimelineProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  uint64_t v7 = v5 + 24;
  v6(a1, a2, v4);
  uint64_t v8 = *(void *)(v7 + 40);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 56);
  v6((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, v4);
  uint64_t v10 = ((v8 + v9) & ~v9) + v8;
  unint64_t v11 = (unsigned char *)(v10 + a1);
  uint64_t v12 = (unsigned char *)(v10 + a2);
  *unint64_t v11 = *v12;
  v11[1] = v12[1];
  unint64_t v13 = (unint64_t)(v11 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v14 = (unint64_t)(v12 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  long long v15 = *(_OWORD *)v14;
  *(unsigned char *)(v13 + 16) = *(unsigned char *)(v14 + 16);
  *(_OWORD *)unint64_t v13 = v15;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v17 + 24))((*(unsigned __int8 *)(v17 + 80) + 17 + v13) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), (*(unsigned __int8 *)(v17 + 80) + 17 + v14) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for TimelineProgressView.ArchivableTimelineProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  uint64_t v7 = v5 + 32;
  v6(a1, a2, v4);
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 48);
  v6((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, v4);
  uint64_t v10 = ((v8 + v9) & ~v9) + v8;
  unint64_t v11 = (unsigned char *)(v10 + a1);
  uint64_t v12 = (unsigned char *)(v10 + a2);
  *unint64_t v11 = *v12;
  v11[1] = v12[1];
  unint64_t v13 = (unint64_t)(v11 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v14 = (unint64_t)(v12 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  long long v15 = *(_OWORD *)v14;
  *(unsigned char *)(v13 + 16) = *(unsigned char *)(v14 + 16);
  *(_OWORD *)unint64_t v13 = v15;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v17 + 32))((*(unsigned __int8 *)(v17 + 80) + 17 + v13) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), (*(unsigned __int8 *)(v17 + 80) + 17 + v14) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for TimelineProgressView.ArchivableTimelineProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  uint64_t v7 = v5 + 40;
  v6(a1, a2, v4);
  uint64_t v8 = *(void *)(v7 + 24);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 40);
  v6((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, v4);
  uint64_t v10 = ((v8 + v9) & ~v9) + v8;
  unint64_t v11 = (unsigned char *)(v10 + a1);
  uint64_t v12 = (unsigned char *)(v10 + a2);
  *unint64_t v11 = *v12;
  v11[1] = v12[1];
  unint64_t v13 = (unint64_t)(v11 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v14 = (unint64_t)(v12 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  long long v15 = *(_OWORD *)v14;
  *(unsigned char *)(v13 + 16) = *(unsigned char *)(v14 + 16);
  *(_OWORD *)unint64_t v13 = v15;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v17 + 40))((*(unsigned __int8 *)(v17 + 80) + 17 + v13) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), (*(unsigned __int8 *)(v17 + 80) + 17 + v14) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimelineProgressView.ArchivableTimelineProgressView(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v8 = v7;
  if (v6 <= *(_DWORD *)(v7 + 84)) {
    unsigned int v9 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v9 = v6;
  }
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = *(void *)(v7 + 64);
  if (v9 <= 0xFE) {
    unsigned int v12 = 254;
  }
  else {
    unsigned int v12 = v9;
  }
  if (!a2) {
    return 0;
  }
  unint64_t v13 = ((*(void *)(v5 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
      + *(void *)(v5 + 64);
  uint64_t v14 = v10 + 17;
  if (a2 <= v12) {
    goto LABEL_28;
  }
  uint64_t v15 = ((v14 + ((v13 + 5) & 0xFFFFFFFFFFFFFFFCLL)) & ~v10) + v11;
  char v16 = 8 * v15;
  if (v15 <= 3)
  {
    unsigned int v19 = ((a2 - v12 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v19))
    {
      int v17 = *(_DWORD *)((char *)a1 + v15);
      if (!v17) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v19 > 0xFF)
    {
      int v17 = *(unsigned __int16 *)((char *)a1 + v15);
      if (!*(unsigned __int16 *)((char *)a1 + v15)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v19 < 2)
    {
LABEL_28:
      if (v6 == v12)
      {
        uint64_t v23 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48);
        return v23(a1, v6, v4);
      }
      else
      {
        uint64_t v24 = (unsigned __int8 *)a1 + v13;
        if (v9 > 0xFE)
        {
          uint64_t v26 = *(uint64_t (**)(unint64_t))(v8 + 48);
          return v26((v14 + ((unint64_t)(v24 + 5) & 0xFFFFFFFFFFFFFFFCLL)) & ~v10);
        }
        else
        {
          unsigned int v25 = *v24;
          if (v25 >= 2) {
            return v25 - 1;
          }
          else {
            return 0;
          }
        }
      }
    }
  }
  int v17 = *((unsigned __int8 *)a1 + v15);
  if (!*((unsigned char *)a1 + v15)) {
    goto LABEL_28;
  }
LABEL_18:
  int v20 = (v17 - 1) << v16;
  if (v15 > 3) {
    int v20 = 0;
  }
  if (v15)
  {
    if (v15 <= 3) {
      int v21 = v15;
    }
    else {
      int v21 = 4;
    }
    switch(v21)
    {
      case 2:
        int v22 = *a1;
        break;
      case 3:
        int v22 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v22 = *(_DWORD *)a1;
        break;
      default:
        int v22 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v22 = 0;
  }
  return v12 + (v22 | v20) + 1;
}

void storeEnumTagSinglePayload for TimelineProgressView.ArchivableTimelineProgressView(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v10 = v9;
  if (v8 <= *(_DWORD *)(v9 + 84)) {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v11 = v8;
  }
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v13 = *(void *)(v9 + 64);
  if (v11 <= 0xFE) {
    unsigned int v14 = 254;
  }
  else {
    unsigned int v14 = v11;
  }
  unint64_t v15 = ((*(void *)(v7 + 64) + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
      + *(void *)(v7 + 64);
  uint64_t v16 = v12 + 17;
  size_t v17 = ((v12 + 17 + ((v15 + 5) & 0xFFFFFFFFFFFFFFFCLL)) & ~v12) + v13;
  if (a3 <= v14)
  {
    int v18 = 0;
  }
  else if (v17 <= 3)
  {
    unsigned int v22 = ((a3 - v14 + ~(-1 << (8 * v17))) >> (8 * v17)) + 1;
    if (HIWORD(v22))
    {
      int v18 = 4;
    }
    else if (v22 >= 0x100)
    {
      int v18 = 2;
    }
    else
    {
      int v18 = v22 > 1;
    }
  }
  else
  {
    int v18 = 1;
  }
  if (v14 < a2)
  {
    unsigned int v19 = ~v14 + a2;
    if (v17 < 4)
    {
      int v20 = (v19 >> (8 * v17)) + 1;
      if (v17)
      {
        int v23 = v19 & ~(-1 << (8 * v17));
        bzero(a1, v17);
        if (v17 == 3)
        {
          *(_WORD *)a1 = v23;
          a1[2] = BYTE2(v23);
        }
        else if (v17 == 2)
        {
          *(_WORD *)a1 = v23;
        }
        else
        {
          *a1 = v23;
        }
      }
    }
    else
    {
      bzero(a1, v17);
      *(_DWORD *)a1 = v19;
      int v20 = 1;
    }
    switch(v18)
    {
      case 1:
        a1[v17] = v20;
        return;
      case 2:
        *(_WORD *)&a1[v17] = v20;
        return;
      case 3:
        goto LABEL_46;
      case 4:
        *(_DWORD *)&a1[v17] = v20;
        return;
      default:
        return;
    }
  }
  uint64_t v21 = ~v12;
  switch(v18)
  {
    case 1:
      a1[v17] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v17] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x18774F274);
    case 4:
      *(_DWORD *)&a1[v17] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v8 == v14)
        {
          uint64_t v24 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
          v24(a1, a2, v8, v6);
        }
        else
        {
          unsigned int v25 = &a1[v15];
          if (v11 > 0xFE)
          {
            uint64_t v26 = *(void (**)(unint64_t, uint64_t))(v10 + 56);
            v26((v16 + ((unint64_t)(v25 + 5) & 0xFFFFFFFFFFFFFFFCLL)) & v21, a2);
          }
          else
          {
            unsigned char *v25 = a2 + 1;
          }
        }
      }
      return;
  }
}

uint64_t type metadata accessor for TimelineProgressView.ArchivableTimelineProgressView()
{
  return __swift_instantiateGenericMetadata();
}

void *type metadata accessor for _TimelineProgressViewBaseEmptyState.CodingKeys()
{
  return &unk_1ED461A10;
}

uint64_t type metadata accessor for TimelineProgressView.ConditionallyArchivableTimelineProgressView()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata completion function for TimelineProgressView.ConditionallyArchivableTimelineProgressView()
{
  type metadata accessor for ClosedRange<Date>();
  if (v0 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *initializeBufferWithCopyOfBuffer for TimelineProgressView.ConditionallyArchivableTimelineProgressView(void *a1, void *a2)
{
  uint64_t v26 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v26 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  int v5 = *(_DWORD *)(v3 + 80);
  uint64_t v6 = v4 + v5;
  uint64_t v7 = (v6 & ~(unint64_t)v5) + v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  if ((v10 | (unint64_t)v5) > 7
    || ((*(_DWORD *)(v9 + 80) | v5) & 0x100000) != 0
    || ((v10 + ((v7 + 9) & 0xFFFFFFFFFFFFFFF8) + 9) & ~v10)
     + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) > 0x18)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    size_t v17 = (void *)(v13
                   + (((v10 | v5) & 0xF8 ^ 0x1F8) & ((v10 | v5) + 16)));
    swift_retain();
  }
  else
  {
    unint64_t v14 = ~(unint64_t)v5;
    uint64_t v25 = AssociatedTypeWitness;
    unint64_t v15 = *(void (**)(void *, void *, uint64_t))(v3 + 16);
    uint64_t v16 = a2;
    size_t v17 = a1;
    v15(a1, v16, v26);
    v15((void *)(((unint64_t)a1 + v6) & v14), (void *)(((unint64_t)v16 + v6) & v14), v26);
    int v18 = (char *)a1 + v7;
    *int v18 = *((unsigned char *)v16 + v7);
    v18[1] = *((unsigned char *)v16 + v7 + 1);
    unint64_t v19 = ((unint64_t)a1 + v7 + 9) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v20 = ((unint64_t)v16 + v7 + 9) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v19 = *(void *)v20;
    *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
    uint64_t v21 = (v19 + v10 + 9) & ~v10;
    uint64_t v22 = (v20 + v10 + 9) & ~v10;
    int v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    swift_retain();
    v23(v21, v22, v25);
  }
  return v17;
}

uint64_t destroy for TimelineProgressView.ConditionallyArchivableTimelineProgressView(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v5 = v3 + 8;
  v4(a1, v2);
  uint64_t v6 = *(void *)(v5 + 56);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 72);
  v4((v7 + v8) & ~v8, v2);
  swift_release();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v11 = *(uint64_t (**)(unint64_t, uint64_t))(v10 + 8);
  uint64_t v12 = AssociatedTypeWitness;
  unint64_t v13 = (((v7 + ((v6 + v8) & ~v8) + 9) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v10 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);

  return v11(v13, v12);
}

uint64_t initializeWithCopy for TimelineProgressView.ConditionallyArchivableTimelineProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  uint64_t v7 = v5 + 16;
  v6(a1, a2, v4);
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 64);
  v6((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, v4);
  uint64_t v10 = ((v8 + v9) & ~v9) + v8;
  unsigned int v11 = (unsigned char *)(v10 + a1);
  uint64_t v12 = (unsigned char *)(v10 + a2);
  *unsigned int v11 = *v12;
  v11[1] = v12[1];
  unint64_t v13 = (unint64_t)(v11 + 9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (unint64_t)(v12 + 9) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  size_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = (v18 + 9 + v13) & ~v18;
  uint64_t v20 = (v18 + 9 + v14) & ~v18;
  swift_retain();
  v17(v19, v20, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for TimelineProgressView.ConditionallyArchivableTimelineProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  uint64_t v7 = v5 + 24;
  v6(a1, a2, v4);
  uint64_t v8 = *(void *)(v7 + 40);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 56);
  v6((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, v4);
  uint64_t v10 = ((v8 + v9) & ~v9) + v8;
  unsigned int v11 = (unsigned char *)(v10 + a1);
  uint64_t v12 = (unsigned char *)(v10 + a2);
  *unsigned int v11 = *v12;
  v11[1] = v12[1];
  unint64_t v13 = (unint64_t)(v11 + 9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (unint64_t)(v12 + 9) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v13 = *(void *)v14;
  swift_retain();
  swift_release();
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 24))((*(unsigned __int8 *)(v16 + 80) + 9 + v13) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (*(unsigned __int8 *)(v16 + 80) + 9 + v14) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for TimelineProgressView.ConditionallyArchivableTimelineProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  uint64_t v7 = v5 + 32;
  v6(a1, a2, v4);
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 48);
  v6((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, v4);
  uint64_t v10 = ((v8 + v9) & ~v9) + v8;
  unsigned int v11 = (unsigned char *)(v10 + a1);
  uint64_t v12 = (unsigned char *)(v10 + a2);
  *unsigned int v11 = *v12;
  v11[1] = v12[1];
  unint64_t v13 = (unint64_t)(v11 + 9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (unint64_t)(v12 + 9) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 32))((*(unsigned __int8 *)(v16 + 80) + 9 + v13) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (*(unsigned __int8 *)(v16 + 80) + 9 + v14) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for TimelineProgressView.ConditionallyArchivableTimelineProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  uint64_t v7 = v5 + 40;
  v6(a1, a2, v4);
  uint64_t v8 = *(void *)(v7 + 24);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 40);
  v6((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, v4);
  uint64_t v10 = ((v8 + v9) & ~v9) + v8;
  unsigned int v11 = (unsigned char *)(v10 + a1);
  uint64_t v12 = (unsigned char *)(v10 + a2);
  *unsigned int v11 = *v12;
  v11[1] = v12[1];
  unint64_t v13 = (unint64_t)(v11 + 9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (unint64_t)(v12 + 9) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v13 = *(void *)v14;
  swift_release();
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 40))((*(unsigned __int8 *)(v16 + 80) + 9 + v13) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (*(unsigned __int8 *)(v16 + 80) + 9 + v14) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimelineProgressView.ConditionallyArchivableTimelineProgressView(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  if (v6 <= *(_DWORD *)(v8 + 84)) {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  else {
    unsigned int v10 = v6;
  }
  if (v10 <= 0x7FFFFFFE) {
    unsigned int v11 = 2147483646;
  }
  else {
    unsigned int v11 = v10;
  }
  if (!a2) {
    return 0;
  }
  unint64_t v12 = ((*(void *)(v5 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
      + *(void *)(v5 + 64);
  uint64_t v13 = v9 + 9;
  if (a2 <= v11) {
    goto LABEL_28;
  }
  unint64_t v14 = ((v13 + ((v12 + 9) & 0xFFFFFFFFFFFFFFF8)) & ~v9) + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v18 = ((a2 - v11 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v18))
    {
      int v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v18 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(unsigned __int16 *)((char *)a1 + v14)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v18 < 2)
    {
LABEL_28:
      if (v6 == v11)
      {
        uint64_t v22 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48);
        return v22(a1, v6, v4);
      }
      else
      {
        int v23 = (unint64_t *)(((unint64_t)a1 + v12 + 9) & 0xFFFFFFFFFFFFFFF8);
        if (v10 > 0x7FFFFFFE)
        {
          uint64_t v25 = *(uint64_t (**)(unint64_t))(v8 + 48);
          return v25(((unint64_t)v23 + v13) & ~v9);
        }
        else
        {
          unint64_t v24 = *v23;
          if (v24 >= 0xFFFFFFFF) {
            LODWORD(v24) = -1;
          }
          if ((v24 + 1) >= 2) {
            return v24;
          }
          else {
            return 0;
          }
        }
      }
    }
  }
  int v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_28;
  }
LABEL_18:
  int v19 = (v16 - 1) << v15;
  if (v14 > 3) {
    int v19 = 0;
  }
  if (v14)
  {
    if (v14 <= 3) {
      int v20 = v14;
    }
    else {
      int v20 = 4;
    }
    switch(v20)
    {
      case 2:
        int v21 = *a1;
        break;
      case 3:
        int v21 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v21 = *(_DWORD *)a1;
        break;
      default:
        int v21 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v21 = 0;
  }
  return v11 + (v21 | v19) + 1;
}

void storeEnumTagSinglePayload for TimelineProgressView.ConditionallyArchivableTimelineProgressView(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  if (v8 <= *(_DWORD *)(v10 + 84)) {
    unsigned int v12 = *(_DWORD *)(v10 + 84);
  }
  else {
    unsigned int v12 = v8;
  }
  if (v12 <= 0x7FFFFFFE) {
    unsigned int v13 = 2147483646;
  }
  else {
    unsigned int v13 = v12;
  }
  unint64_t v14 = ((*(void *)(v7 + 64) + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
      + *(void *)(v7 + 64);
  uint64_t v15 = v11 + 9;
  size_t v16 = ((v11 + 9 + ((v14 + 9) & 0xFFFFFFFFFFFFFFF8)) & ~v11)
      + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (a3 <= v13)
  {
    int v17 = 0;
  }
  else if (v16 <= 3)
  {
    unsigned int v21 = ((a3 - v13 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
    if (HIWORD(v21))
    {
      int v17 = 4;
    }
    else if (v21 >= 0x100)
    {
      int v17 = 2;
    }
    else
    {
      int v17 = v21 > 1;
    }
  }
  else
  {
    int v17 = 1;
  }
  if (v13 < a2)
  {
    unsigned int v18 = ~v13 + a2;
    if (v16 < 4)
    {
      int v19 = (v18 >> (8 * v16)) + 1;
      if (v16)
      {
        int v22 = v18 & ~(-1 << (8 * v16));
        bzero(a1, v16);
        if (v16 == 3)
        {
          *(_WORD *)a1 = v22;
          a1[2] = BYTE2(v22);
        }
        else if (v16 == 2)
        {
          *(_WORD *)a1 = v22;
        }
        else
        {
          *a1 = v22;
        }
      }
    }
    else
    {
      bzero(a1, v16);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v16] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v16] = v19;
        return;
      case 3:
        goto LABEL_48;
      case 4:
        *(_DWORD *)&a1[v16] = v19;
        return;
      default:
        return;
    }
  }
  uint64_t v20 = ~v11;
  switch(v17)
  {
    case 1:
      a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_48:
      __break(1u);
      JUMPOUT(0x187750374);
    case 4:
      *(_DWORD *)&a1[v16] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v8 == v13)
        {
          int v23 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
          v23(a1, a2, v8, v6);
        }
        else
        {
          unint64_t v24 = (void *)((unint64_t)&a1[v14 + 9] & 0xFFFFFFFFFFFFFFF8);
          if (v12 > 0x7FFFFFFE)
          {
            uint64_t v25 = *(void (**)(unint64_t, uint64_t))(v10 + 56);
            v25(((unint64_t)v24 + v15) & v20, a2);
          }
          else if (a2 > 0x7FFFFFFE)
          {
            *unint64_t v24 = 0;
            *(_DWORD *)unint64_t v24 = a2 - 0x7FFFFFFF;
          }
          else
          {
            *unint64_t v24 = a2;
          }
        }
      }
      return;
  }
}

uint64_t type metadata accessor for TimelineProgressView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t associated type witness table accessor for View.Body : View in TimelineProgressView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t TimelineProgressViewUpdateStyle.encode(to:)(void *a1, int a2)
{
  int v21 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBBDE0];
  type metadata accessor for KeyedEncodingContainer<_TimelineProgressViewBaseEmptyState.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys and conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys, (uint64_t)&unk_1ED45BD70, MEMORY[0x1E4FBBDE0]);
  uint64_t v19 = *(void *)(v4 - 8);
  uint64_t v20 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v16 - v5;
  type metadata accessor for KeyedEncodingContainer<_TimelineProgressViewBaseEmptyState.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TimelineProgressViewUpdateStyle.DefaultCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.DefaultCodingKeys and conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys, (uint64_t)&unk_1ED45BD50, v3);
  uint64_t v17 = *(void *)(v7 - 8);
  uint64_t v18 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v16 - v8;
  type metadata accessor for KeyedEncodingContainer<_TimelineProgressViewBaseEmptyState.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TimelineProgressViewUpdateStyle.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys, (uint64_t)&unk_1ED45BCC0, v3);
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  unint64_t v14 = (char *)&v16 - v13;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v21)
  {
    char v23 = 1;
    lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys and conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v20);
  }
  else
  {
    char v22 = 0;
    lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.DefaultCodingKeys and conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v9, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TimelineProgressViewUpdateStyle.CodingKeys()
{
  if (*v0) {
    return 0x6365536568546E6FLL;
  }
  else {
    return 0x746C7561666564;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TimelineProgressViewUpdateStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized TimelineProgressViewUpdateStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimelineProgressViewUpdateStyle.CodingKeys(uint64_t a1)
{
  unint64_t updated = lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys();

  return MEMORY[0x1F41862A8](a1, updated);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimelineProgressViewUpdateStyle.CodingKeys(uint64_t a1)
{
  unint64_t updated = lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys();

  return MEMORY[0x1F41862B0](a1, updated);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys(uint64_t a1)
{
  unint64_t updated = lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.DefaultCodingKeys and conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys();

  return MEMORY[0x1F41862A8](a1, updated);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys(uint64_t a1)
{
  unint64_t updated = lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.DefaultCodingKeys and conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys();

  return MEMORY[0x1F41862B0](a1, updated);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys(uint64_t a1)
{
  unint64_t updated = lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys and conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys();

  return MEMORY[0x1F41862A8](a1, updated);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys(uint64_t a1)
{
  unint64_t updated = lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys and conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys();

  return MEMORY[0x1F41862B0](a1, updated);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TimelineProgressViewUpdateStyle@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized TimelineProgressViewUpdateStyle.init(from:)(a1);
  if (!v2) {
    *a2 = result & 1;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TimelineProgressViewUpdateStyle(void *a1)
{
  return TimelineProgressViewUpdateStyle.encode(to:)(a1, *v1);
}

uint64_t TimelineProgressView.ConditionallyArchivableTimelineProgressView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v28 = a2;
  uint64_t v5 = *(void *)(a1 + 24);
  v24[0] = *(void *)(a1 + 16);
  v24[1] = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v26 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v27 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v25 = (char *)v24 - v7;
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TimelineProgressView.FinalTimelineProgressView();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  unint64_t v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)v24 - v16;
  outlined init with copy of ClosedRange<Date>(v3, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  char v18 = *(unsigned char *)(v3 + *(int *)(a1 + 36));
  LOBYTE(v5) = *(unsigned char *)(v3 + *(int *)(a1 + 40));
  uint64_t v19 = *(void *)(v3 + *(int *)(a1 + 44));
  uint64_t v20 = v3 + *(int *)(a1 + 52);
  uint64_t v21 = (uint64_t)v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v25, v20, v27);
  TimelineProgressView.FinalTimelineProgressView.init(interval:updateStyle:countdown:tint:extendedState:)((uint64_t)v10, v18, v5, v19, v21, (uint64_t)v14);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v14);
  char v22 = *(void (**)(char *, uint64_t))(v12 + 8);
  swift_retain();
  v22(v14, v11);
  static ViewBuilder.buildExpression<A>(_:)(v17);
  return ((uint64_t (*)(char *, uint64_t))v22)(v17, v11);
}

uint64_t TimelineProgressView.FinalTimelineProgressView.init(interval:updateStyle:countdown:tint:extendedState:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v10 = a2 & 1;
  outlined init with take of ClosedRange<Date>(a1, a6, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  uint64_t v11 = (int *)type metadata accessor for TimelineProgressView.FinalTimelineProgressView();
  *(unsigned char *)(a6 + v11[9]) = v10;
  *(unsigned char *)(a6 + v11[10]) = a3;
  *(void *)(a6 + v11[11]) = a4;
  uint64_t v12 = a6 + v11[12];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32);

  return v14(v12, a5, AssociatedTypeWitness);
}

uint64_t TimelineProgressView.ConditionallyArchivableTimelineProgressView.archivedBody.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  double v5 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1, v5);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = *(void *)(a1 + 24);
  *(void *)(v7 + 16) = *(void *)(a1 + 16);
  *(void *)(v7 + 24) = v8;
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7 + v6, (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  type metadata accessor for TimelineProgressView.ArchivableTimelineProgressView();
  swift_getWitnessTable();
  EnvironmentReader.init(_:)();
  uint64_t v12 = v20;
  uint64_t v13 = v21;
  type metadata accessor for EnvironmentReader();
  uint64_t WitnessTable = swift_getWitnessTable();
  View.fixedSize(horizontal:vertical:)();
  swift_release();
  uint64_t v12 = v16;
  uint64_t v13 = v17;
  char v14 = v18;
  char v15 = v19;
  type metadata accessor for ModifiedContent();
  v11[1] = WitnessTable;
  _OWORD v11[2] = MEMORY[0x1E4F3FE40];
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(&v12);
  swift_release();
  uint64_t v16 = v20;
  uint64_t v17 = v21;
  char v18 = v22;
  char v19 = v23;
  static ViewBuilder.buildExpression<A>(_:)(&v16);
  return swift_release();
}

uint64_t closure #1 in TimelineProgressView.ConditionallyArchivableTimelineProgressView.archivedBody.getter@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v27 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)&AssociatedTypeWitness - v10;
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1F4188790](v12 - 8);
  char v14 = (char *)&AssociatedTypeWitness - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = a4;
  uint64_t v29 = a3;
  char v15 = (int *)type metadata accessor for TimelineProgressView.ConditionallyArchivableTimelineProgressView();
  uint64_t v16 = *(void *)(a2 + v15[11]);
  if (v16)
  {
    long long v30 = *a1;
    dispatch thunk of AnyColorBox.resolve(in:)();
    unint64_t v19 = v17 | ((unint64_t)v18 << 32);
    unint64_t v22 = v20 | ((unint64_t)v21 << 32);
  }
  else
  {
    unint64_t v19 = 0;
    unint64_t v22 = 0;
  }
  outlined init with copy of ClosedRange<Date>(a2, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  char v23 = *(unsigned char *)(a2 + v15[9]);
  char v24 = *(unsigned char *)(a2 + v15[10]);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2 + v15[13], AssociatedTypeWitness);
  return TimelineProgressView.ArchivableTimelineProgressView.init(interval:updateStyle:countdown:resolvedTint:extendedState:)((uint64_t)v14, v23, v24, v19, v22, v16 == 0, (uint64_t)v11, v27);
}

uint64_t TimelineProgressView.ArchivableTimelineProgressView.init(interval:updateStyle:countdown:resolvedTint:extendedState:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  char v14 = a2 & 1;
  outlined init with take of ClosedRange<Date>(a1, a8, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  char v15 = (int *)type metadata accessor for TimelineProgressView.ArchivableTimelineProgressView();
  *(unsigned char *)(a8 + v15[9]) = v14;
  *(unsigned char *)(a8 + v15[10]) = a3;
  uint64_t v16 = a8 + v15[11];
  *(void *)uint64_t v16 = a4;
  *(void *)(v16 + 8) = a5;
  *(unsigned char *)(v16 + 16) = a6 & 1;
  uint64_t v17 = a8 + v15[12];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32);

  return v19(v17, a7, AssociatedTypeWitness);
}

uint64_t TimelineProgressView.ConditionallyArchivableTimelineProgressView.init(interval:updateStyle:countdown:tint:isCircular:extendedState:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v12 = a2 & 1;
  outlined init with take of ClosedRange<Date>(a1, a7, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  uint64_t v13 = (int *)type metadata accessor for TimelineProgressView.ConditionallyArchivableTimelineProgressView();
  *(unsigned char *)(a7 + v13[9]) = v12;
  *(unsigned char *)(a7 + v13[10]) = a3;
  *(void *)(a7 + v13[11]) = a4;
  *(unsigned char *)(a7 + v13[12]) = a5;
  uint64_t v14 = a7 + v13[13];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32);

  return v16(v14, a6, AssociatedTypeWitness);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41003C0](a1, a2, a3, WitnessTable);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41003C8](a1, a2, a3, WitnessTable);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView()
{
  return static ConditionallyArchivableView._viewListCount(inputs:)();
}

uint64_t TimelineProgressView.ArchivableTimelineProgressView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 24);
  v16[0] = a2;
  v16[1] = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)v16 - v7;
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = 0;
  if ((*(unsigned char *)(v2 + *(int *)(a1 + 44) + 16) & 1) == 0) {
    uint64_t v12 = Color.init(_:)();
  }
  outlined init with copy of ClosedRange<Date>(v2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  char v13 = *(unsigned char *)(v2 + *(int *)(a1 + 36));
  char v14 = *(unsigned char *)(v2 + *(int *)(a1 + 40));
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2 + *(int *)(a1 + 48), AssociatedTypeWitness);
  return TimelineProgressView.FinalTimelineProgressView.init(interval:updateStyle:countdown:tint:extendedState:)((uint64_t)v11, v13, v14, v12, (uint64_t)v8, v16[0]);
}

BOOL static TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C61767265746E69 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7453657461647075 && a2 == 0xEB00000000656C79 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x776F64746E756F63 && a2 == 0xE90000000000006ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6465766C6F736572 && a2 == 0xEC000000746E6954 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6465646E65747865 && a2 == 0xED00006574617453)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

Swift::Int TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x6C61767265746E69;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x7453657461647075;
      break;
    case 2:
      uint64_t result = 0x776F64746E756F63;
      break;
    case 3:
      uint64_t result = 0x6465766C6F736572;
      break;
    case 4:
      uint64_t result = 0x6465646E65747865;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t TimelineProgressView.ArchivableTimelineProgressView.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v17 = a2;
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a2 + 16);
  v16[0] = *(void *)(a2 + 24);
  v16[1] = v5;
  type metadata accessor for TimelineProgressView.ArchivableTimelineProgressView.CodingKeys();
  swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v16 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v19) = 0;
  type metadata accessor for ClosedRange<Date>();
  lazy protocol witness table accessor for type ClosedRange<Date> and conformance <> ClosedRange<A>(&lazy protocol witness table cache variable for type ClosedRange<Date> and conformance <> ClosedRange<A>, &lazy protocol witness table cache variable for type Date and conformance Date);
  uint64_t v10 = v18;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v10) {
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  uint64_t v12 = v7;
  uint64_t v13 = v17;
  LOBYTE(v19) = *(unsigned char *)(v3 + *(int *)(v17 + 36));
  char v21 = 1;
  lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle and conformance TimelineProgressViewUpdateStyle();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v19) = 2;
  KeyedEncodingContainer.encode(_:forKey:)();
  char v14 = (long long *)(v3 + *(int *)(v13 + 44));
  char v15 = *((unsigned char *)v14 + 16);
  long long v19 = *v14;
  char v20 = v15;
  char v21 = 3;
  lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  LOBYTE(v19) = 4;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v9, v6);
}

uint64_t TimelineProgressView.ArchivableTimelineProgressView.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v29 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v28 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  long long v30 = (char *)&v27 - v7;
  type metadata accessor for ClosedRange<Date>();
  uint64_t v33 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v36 = (uint64_t)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimelineProgressView.ArchivableTimelineProgressView.CodingKeys();
  swift_getWitnessTable();
  uint64_t v38 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v31 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v38);
  uint64_t v11 = (char *)&v27 - v10;
  uint64_t v34 = a3;
  uint64_t v35 = a2;
  uint64_t v12 = (int *)type metadata accessor for TimelineProgressView.ArchivableTimelineProgressView();
  uint64_t v27 = *((void *)v12 - 1);
  MEMORY[0x1F4188790](v12);
  char v14 = (char *)&v27 - v13;
  uint64_t v16 = (char *)&v27 + *(int *)(v15 + 44) - v13;
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = 0;
  v16[16] = 1;
  uint64_t v17 = a1[3];
  uint64_t v39 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v17);
  uint64_t v37 = v11;
  uint64_t v18 = v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v18) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  }
  uint64_t v19 = (uint64_t)v14;
  uint64_t v21 = v31;
  uint64_t v20 = AssociatedTypeWitness;
  LOBYTE(v41) = 0;
  lazy protocol witness table accessor for type ClosedRange<Date> and conformance <> ClosedRange<A>(&lazy protocol witness table cache variable for type ClosedRange<Date> and conformance <> ClosedRange<A>, &lazy protocol witness table cache variable for type Date and conformance Date);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  outlined init with take of ClosedRange<Date>(v36, v19, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  char v43 = 1;
  lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle and conformance TimelineProgressViewUpdateStyle();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(unsigned char *)(v19 + v12[9]) = v41;
  LOBYTE(v41) = 2;
  *(unsigned char *)(v19 + v12[10]) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
  char v43 = 3;
  lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  char v22 = v42;
  *(_OWORD *)uint64_t v16 = v41;
  v16[16] = v22;
  LOBYTE(v41) = 4;
  uint64_t v23 = v20;
  swift_getAssociatedConformanceWitness();
  char v24 = v30;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v37, v38);
  (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v19 + v12[12], v24, v23);
  uint64_t v25 = v27;
  (*(void (**)(uint64_t, uint64_t, int *))(v27 + 16))(v29, v19, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  return (*(uint64_t (**)(uint64_t, int *))(v25 + 8))(v19, v12);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TimelineProgressView<A>.ArchivableTimelineProgressView.CodingKeys(char *a1, char *a2)
{
  return static TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TimelineProgressView<A>.ArchivableTimelineProgressView.CodingKeys()
{
  return TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance TimelineProgressView<A>.ArchivableTimelineProgressView.CodingKeys(uint64_t a1)
{
  TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TimelineProgressView<A>.ArchivableTimelineProgressView.CodingKeys()
{
  Hasher.init(_seed:)();
  TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TimelineProgressView<A>.ArchivableTimelineProgressView.CodingKeys()
{
  return TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TimelineProgressView<A>.ArchivableTimelineProgressView.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance TimelineProgressView<A>.ArchivableTimelineProgressView.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimelineProgressView<A>.ArchivableTimelineProgressView.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimelineProgressView<A>.ArchivableTimelineProgressView.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TimelineProgressView<A>.ArchivableTimelineProgressView@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return TimelineProgressView.ArchivableTimelineProgressView.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TimelineProgressView<A>.ArchivableTimelineProgressView(void *a1, uint64_t a2)
{
  return TimelineProgressView.ArchivableTimelineProgressView.encode(to:)(a1, a2);
}

uint64_t TimelineProgressView.FinalTimelineProgressView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v34 = a2;
  uint64_t v5 = *(void *)(a1 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = type metadata accessor for ProgressViewSchedule(255);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v32 = lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type ProgressViewSchedule and conformance ProgressViewSchedule, (void (*)(uint64_t))type metadata accessor for ProgressViewSchedule);
  uint64_t v9 = type metadata accessor for TimelineView();
  uint64_t v33 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v30 = (uint64_t)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v31 = (char *)&v28 - v12;
  uint64_t v29 = v7;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v28 - v17;
  outlined init with copy of ClosedRange<Date>(v3, (uint64_t)&v28 - v17, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  v18[*(int *)(v7 + 20)] = *(unsigned char *)(v3 + *(int *)(a1 + 36));
  outlined init with copy of ClosedRange<Date>((uint64_t)v18, (uint64_t)v15, type metadata accessor for ProgressViewSchedule);
  uint64_t v19 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v19, v3, a1);
  unint64_t v20 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v21 = swift_allocObject();
  uint64_t v22 = *(void *)(a1 + 24);
  *(void *)(v21 + 16) = v8;
  *(void *)(v21 + 24) = v22;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v21 + v20, v19, a1);
  uint64_t v23 = *(void *)(v22 + 8);
  uint64_t v24 = v30;
  TimelineView<>.init(_:content:)((uint64_t)v15, (uint64_t)partial apply for closure #1 in TimelineProgressView.FinalTimelineProgressView.body.getter, v21, v29, v8, v32, v23, v30);
  outlined destroy of ClosedRange<Date>((uint64_t)v18, type metadata accessor for ProgressViewSchedule);
  uint64_t v35 = v23;
  swift_getWitnessTable();
  uint64_t v25 = v31;
  static ViewBuilder.buildExpression<A>(_:)(v24);
  uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
  v26(v24, v9);
  static ViewBuilder.buildExpression<A>(_:)(v25);
  return ((uint64_t (*)(char *, uint64_t))v26)(v25, v9);
}

uint64_t closure #1 in TimelineProgressView.FinalTimelineProgressView.body.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  v24[1] = a4;
  v24[0] = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(v24[0] - 8);
  MEMORY[0x1F4188790](v24[0]);
  uint64_t v9 = (char *)v24 - v8;
  uint64_t v10 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)v24 - v15;
  uint64_t v17 = type metadata accessor for TimelineProgressView.FinalTimelineProgressView();
  ClosedRange<>.progress(at:countdown:)();
  double v19 = v18;
  (*(void (**)(char *, uint64_t, void))(v7 + 16))(v9, a1 + *(int *)(v17 + 48), v24[0]);
  unint64_t v20 = *(void (**)(uint64_t, char *, uint64_t, uint64_t, double))(a3 + 40);
  uint64_t v21 = swift_retain();
  v20(v21, v9, a2, a3, v19);
  static ViewBuilder.buildExpression<A>(_:)(v13);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v10 + 8);
  v22(v13, a2);
  static ViewBuilder.buildExpression<A>(_:)(v16);
  return ((uint64_t (*)(char *, uint64_t))v22)(v16, a2);
}

uint64_t TimelineProgressView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v29 = a2;
  uint64_t v5 = *(void *)(a1 + 24);
  v24[1] = *(void *)(a1 + 16);
  void v24[2] = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v28 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v25 = (char *)v24 - v7;
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TimelineProgressView.ConditionallyArchivableTimelineProgressView();
  uint64_t v26 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)v24 - v15;
  outlined init with copy of ClosedRange<Date>(v3, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  char v17 = *(unsigned char *)(v3 + *(int *)(a1 + 36));
  LOBYTE(v5) = *(unsigned char *)(v3 + *(int *)(a1 + 40));
  uint64_t v18 = *(void *)(v3 + *(int *)(a1 + 44));
  char v19 = *(unsigned char *)(v3 + *(int *)(a1 + 48));
  uint64_t v20 = v3 + *(int *)(a1 + 52);
  uint64_t v21 = (uint64_t)v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v25, v20, v28);
  TimelineProgressView.ConditionallyArchivableTimelineProgressView.init(interval:updateStyle:countdown:tint:isCircular:extendedState:)((uint64_t)v10, v17, v5, v18, v19, v21, (uint64_t)v13);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v13);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v26 + 8);
  swift_retain();
  v22(v13, v11);
  static ViewBuilder.buildExpression<A>(_:)(v16);
  return ((uint64_t (*)(char *, uint64_t))v22)(v16, v11);
}

uint64_t associated type witness table accessor for View.Body : View in TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in TimelineProgressView<A>.ArchivableTimelineProgressView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for TimelineProgressView<A>.ArchivableTimelineProgressView(void *a1)
{
  a1[1] = swift_getWitnessTable();
  a1[2] = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  a1[3] = result;
  return result;
}

uint64_t associated type witness table accessor for ConditionallyArchivableView.ArchivedBody : View in TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for TimelineProgressViewExtendedBase.init(fractionCompleted:tint:extendedState:) in conformance LinearUIKitProgressView.Base@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  *(double *)a2 = a3;
  *(void *)(a2 + 8) = result;
  return result;
}

uint64_t protocol witness for TimelineProgressViewExtendedBase.init(fractionCompleted:tint:extendedState:) in conformance ResolvedCircularPlaybackProgressView.Base@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  if (!result) {
    uint64_t result = static Color.white.getter();
  }
  *(double *)a2 = a3;
  *(void *)(a2 + 8) = result;
  return result;
}

uint64_t sub_187753000()
{
  uint64_t v1 = (int *)(type metadata accessor for TimelineProgressView.ConditionallyArchivableTimelineProgressView() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  v4(v2, v3);
  type metadata accessor for ClosedRange<Date>();
  v4(v2 + *(int *)(v5 + 36), v3);
  swift_release();
  uint64_t v6 = v2 + v1[15];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TimelineProgressView.ConditionallyArchivableTimelineProgressView.archivedBody.getter@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(type metadata accessor for TimelineProgressView.ConditionallyArchivableTimelineProgressView() - 8);
  uint64_t v8 = v2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return closure #1 in TimelineProgressView.ConditionallyArchivableTimelineProgressView.archivedBody.getter(a1, v8, v5, v6, a2);
}

uint64_t type metadata accessor for TimelineProgressView.FinalTimelineProgressView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for TimelineProgressView.ArchivableTimelineProgressView.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle and conformance TimelineProgressViewUpdateStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle and conformance TimelineProgressViewUpdateStyle;
  if (!lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle and conformance TimelineProgressViewUpdateStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle and conformance TimelineProgressViewUpdateStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle and conformance TimelineProgressViewUpdateStyle;
  if (!lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle and conformance TimelineProgressViewUpdateStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle and conformance TimelineProgressViewUpdateStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle and conformance TimelineProgressViewUpdateStyle;
  if (!lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle and conformance TimelineProgressViewUpdateStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle and conformance TimelineProgressViewUpdateStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved()
{
  unint64_t result = lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved;
  if (!lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved;
  if (!lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ClosedRange<Date> and conformance <> ClosedRange<A>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ClosedRange<Date>();
    lazy protocol witness table accessor for type Date and conformance Date(a2, MEMORY[0x1E4F27928]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for TimelineProgressView.ArchivableTimelineProgressView.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187753500);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

uint64_t destroy for DefaultDateProgressLabel(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  unsigned int v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v6)((void *)(v2 - 8), a1, v2);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v4 = a1 + *(int *)(v3 + 36);

  return v6(v4, v2);
}

uint64_t assignWithCopy for DefaultDateProgressLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  type metadata accessor for ClosedRange<Date>();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for DefaultDateProgressLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  type metadata accessor for ClosedRange<Date>();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for ProgressViewSchedule(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187753730);
}

uint64_t sub_187753730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for ClosedRange<Date>();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      return v10 - 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for ProgressViewSchedule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187753800);
}

void sub_187753800(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for ClosedRange<Date>();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  }
}

uint64_t type metadata accessor for ProgressViewSchedule(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ProgressViewSchedule);
}

void type metadata completion function for DefaultDateProgressLabel()
{
  type metadata accessor for ClosedRange<Date>();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata completion function for TimelineProgressView.FinalTimelineProgressView()
{
}

void *initializeBufferWithCopyOfBuffer for TimelineProgressView.FinalTimelineProgressView(void *a1, void *a2)
{
  uint64_t v26 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v26 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  int v5 = *(_DWORD *)(v3 + 80);
  uint64_t v6 = v4 + v5;
  uint64_t v7 = (v6 & ~(unint64_t)v5) + v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  if ((v10 | (unint64_t)v5) > 7
    || ((*(_DWORD *)(v9 + 80) | v5) & 0x100000) != 0
    || ((v10 + ((v7 + 9) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v10)
     + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) > 0x18)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    char v17 = (void *)(v13
                   + (((v10 | v5) & 0xF8 ^ 0x1F8) & ((v10 | v5) + 16)));
    swift_retain();
  }
  else
  {
    unint64_t v14 = ~(unint64_t)v5;
    uint64_t v25 = AssociatedTypeWitness;
    uint64_t v15 = *(void (**)(void *, void *, uint64_t))(v3 + 16);
    uint64_t v16 = a2;
    char v17 = a1;
    v15(a1, v16, v26);
    v15((void *)(((unint64_t)a1 + v6) & v14), (void *)(((unint64_t)v16 + v6) & v14), v26);
    uint64_t v18 = (char *)a1 + v7;
    *uint64_t v18 = *((unsigned char *)v16 + v7);
    v18[1] = *((unsigned char *)v16 + v7 + 1);
    char v19 = (void *)(((unint64_t)a1 + v7 + 9) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v20 = (void *)(((unint64_t)v16 + v7 + 9) & 0xFFFFFFFFFFFFFFF8);
    *char v19 = *v20;
    uint64_t v21 = ((unint64_t)v19 + v10 + 8) & ~v10;
    uint64_t v22 = ((unint64_t)v20 + v10 + 8) & ~v10;
    uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    swift_retain();
    v23(v21, v22, v25);
  }
  return v17;
}

uint64_t destroy for TimelineProgressView.FinalTimelineProgressView(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v5 = v3 + 8;
  v4(a1, v2);
  uint64_t v6 = *(void *)(v5 + 56);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 72);
  v4((v7 + v8) & ~v8, v2);
  swift_release();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = *(uint64_t (**)(unint64_t, uint64_t))(v10 + 8);
  uint64_t v12 = AssociatedTypeWitness;
  unint64_t v13 = (((v7 + ((v6 + v8) & ~v8) + 9) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);

  return v11(v13, v12);
}

uint64_t initializeWithCopy for TimelineProgressView.FinalTimelineProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  uint64_t v7 = v5 + 16;
  v6(a1, a2, v4);
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 64);
  v6((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, v4);
  uint64_t v10 = ((v8 + v9) & ~v9) + v8;
  uint64_t v11 = (unsigned char *)(v10 + a1);
  uint64_t v12 = (unsigned char *)(v10 + a2);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  unint64_t v13 = (void *)((unint64_t)(v11 + 9) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = (void *)((unint64_t)(v12 + 9) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v13 = *v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  char v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = ((unint64_t)v13 + v18 + 8) & ~v18;
  uint64_t v20 = ((unint64_t)v14 + v18 + 8) & ~v18;
  swift_retain();
  v17(v19, v20, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for TimelineProgressView.FinalTimelineProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  uint64_t v7 = v5 + 24;
  v6(a1, a2, v4);
  uint64_t v8 = *(void *)(v7 + 40);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 56);
  v6((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, v4);
  uint64_t v10 = ((v8 + v9) & ~v9) + v8;
  uint64_t v11 = (unsigned char *)(v10 + a1);
  uint64_t v12 = (unsigned char *)(v10 + a2);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  unint64_t v13 = (void *)((unint64_t)(v11 + 9) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = (void *)((unint64_t)(v12 + 9) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v13 = *v14;
  swift_retain();
  swift_release();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 24))(((unint64_t)v13 + *(unsigned __int8 *)(v16 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), ((unint64_t)v14 + *(unsigned __int8 *)(v16 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for TimelineProgressView.FinalTimelineProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  uint64_t v7 = v5 + 32;
  v6(a1, a2, v4);
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 48);
  v6((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, v4);
  uint64_t v10 = ((v8 + v9) & ~v9) + v8;
  uint64_t v11 = (unsigned char *)(v10 + a1);
  uint64_t v12 = (unsigned char *)(v10 + a2);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  unint64_t v13 = (void *)((unint64_t)(v11 + 9) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = (void *)((unint64_t)(v12 + 9) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v13 = *v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 32))(((unint64_t)v13 + *(unsigned __int8 *)(v16 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), ((unint64_t)v14 + *(unsigned __int8 *)(v16 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for TimelineProgressView.FinalTimelineProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  uint64_t v7 = v5 + 40;
  v6(a1, a2, v4);
  uint64_t v8 = *(void *)(v7 + 24);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 40);
  v6((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, v4);
  uint64_t v10 = ((v8 + v9) & ~v9) + v8;
  uint64_t v11 = (unsigned char *)(v10 + a1);
  uint64_t v12 = (unsigned char *)(v10 + a2);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  unint64_t v13 = (void *)((unint64_t)(v11 + 9) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = (void *)((unint64_t)(v12 + 9) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v13 = *v14;
  swift_release();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 40))(((unint64_t)v13 + *(unsigned __int8 *)(v16 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), ((unint64_t)v14 + *(unsigned __int8 *)(v16 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimelineProgressView.FinalTimelineProgressView(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  if (v6 <= *(_DWORD *)(v8 + 84)) {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  else {
    unsigned int v10 = v6;
  }
  if (v10 <= 0x7FFFFFFE) {
    unsigned int v11 = 2147483646;
  }
  else {
    unsigned int v11 = v10;
  }
  if (!a2) {
    return 0;
  }
  unint64_t v12 = ((*(void *)(v5 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
      + *(void *)(v5 + 64);
  uint64_t v13 = v9 + 8;
  if (a2 <= v11) {
    goto LABEL_28;
  }
  unint64_t v14 = ((v13 + ((v12 + 9) & 0xFFFFFFFFFFFFFFF8)) & ~v9) + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v18 = ((a2 - v11 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v18))
    {
      int v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v18 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(unsigned __int16 *)((char *)a1 + v14)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v18 < 2)
    {
LABEL_28:
      if (v6 == v11)
      {
        uint64_t v22 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48);
        return v22(a1, v6, v4);
      }
      else
      {
        uint64_t v23 = (unint64_t *)(((unint64_t)a1 + v12 + 9) & 0xFFFFFFFFFFFFFFF8);
        if (v10 > 0x7FFFFFFE)
        {
          uint64_t v25 = *(uint64_t (**)(unint64_t))(v8 + 48);
          return v25(((unint64_t)v23 + v13) & ~v9);
        }
        else
        {
          unint64_t v24 = *v23;
          if (v24 >= 0xFFFFFFFF) {
            LODWORD(v24) = -1;
          }
          if ((v24 + 1) >= 2) {
            return v24;
          }
          else {
            return 0;
          }
        }
      }
    }
  }
  int v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_28;
  }
LABEL_18:
  int v19 = (v16 - 1) << v15;
  if (v14 > 3) {
    int v19 = 0;
  }
  if (v14)
  {
    if (v14 <= 3) {
      int v20 = v14;
    }
    else {
      int v20 = 4;
    }
    switch(v20)
    {
      case 2:
        int v21 = *a1;
        break;
      case 3:
        int v21 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v21 = *(_DWORD *)a1;
        break;
      default:
        int v21 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v21 = 0;
  }
  return v11 + (v21 | v19) + 1;
}

void storeEnumTagSinglePayload for TimelineProgressView.FinalTimelineProgressView(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  if (v8 <= *(_DWORD *)(v10 + 84)) {
    unsigned int v12 = *(_DWORD *)(v10 + 84);
  }
  else {
    unsigned int v12 = v8;
  }
  if (v12 <= 0x7FFFFFFE) {
    unsigned int v13 = 2147483646;
  }
  else {
    unsigned int v13 = v12;
  }
  unint64_t v14 = ((*(void *)(v7 + 64) + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
      + *(void *)(v7 + 64);
  uint64_t v15 = v11 + 8;
  size_t v16 = ((v11 + 8 + ((v14 + 9) & 0xFFFFFFFFFFFFFFF8)) & ~v11)
      + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (a3 <= v13)
  {
    int v17 = 0;
  }
  else if (v16 <= 3)
  {
    unsigned int v21 = ((a3 - v13 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
    if (HIWORD(v21))
    {
      int v17 = 4;
    }
    else if (v21 >= 0x100)
    {
      int v17 = 2;
    }
    else
    {
      int v17 = v21 > 1;
    }
  }
  else
  {
    int v17 = 1;
  }
  if (v13 < a2)
  {
    unsigned int v18 = ~v13 + a2;
    if (v16 < 4)
    {
      int v19 = (v18 >> (8 * v16)) + 1;
      if (v16)
      {
        int v22 = v18 & ~(-1 << (8 * v16));
        bzero(a1, v16);
        if (v16 == 3)
        {
          *(_WORD *)a1 = v22;
          a1[2] = BYTE2(v22);
        }
        else if (v16 == 2)
        {
          *(_WORD *)a1 = v22;
        }
        else
        {
          *a1 = v22;
        }
      }
    }
    else
    {
      bzero(a1, v16);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v16] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v16] = v19;
        return;
      case 3:
        goto LABEL_48;
      case 4:
        *(_DWORD *)&a1[v16] = v19;
        return;
      default:
        return;
    }
  }
  uint64_t v20 = ~v11;
  switch(v17)
  {
    case 1:
      a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_48:
      __break(1u);
      JUMPOUT(0x1877549C0);
    case 4:
      *(_DWORD *)&a1[v16] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v8 == v13)
        {
          uint64_t v23 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
          v23(a1, a2, v8, v6);
        }
        else
        {
          unint64_t v24 = (void *)((unint64_t)&a1[v14 + 9] & 0xFFFFFFFFFFFFFFF8);
          if (v12 > 0x7FFFFFFE)
          {
            uint64_t v25 = *(void (**)(unint64_t, uint64_t))(v10 + 56);
            v25(((unint64_t)v24 + v15) & v20, a2);
          }
          else if (a2 > 0x7FFFFFFE)
          {
            *unint64_t v24 = 0;
            *(_DWORD *)unint64_t v24 = a2 - 0x7FFFFFFF;
          }
          else
          {
            *unint64_t v24 = a2;
          }
        }
      }
      return;
  }
}

ValueMetadata *type metadata accessor for TimelineProgressViewUpdateStyle()
{
  return &type metadata for TimelineProgressViewUpdateStyle;
}

uint64_t sub_1877549FC()
{
  return swift_getWitnessTable();
}

uint64_t sub_187754AC0(void *a1)
{
  return get_witness_table_7SwiftUI32TimelineProgressViewExtendedBaseRzlAA0cdE0V05FinalcdE033_E25B5CE50FE780022155187DDAA79ACALLVyx_GAA0E0HPyHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for TimelineProgressView.FinalTimelineProgressView);
}

uint64_t sub_187754AEC(void *a1)
{
  return get_witness_table_7SwiftUI32TimelineProgressViewExtendedBaseRzlAA0cdE0V05FinalcdE033_E25B5CE50FE780022155187DDAA79ACALLVyx_GAA0E0HPyHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for TimelineProgressView.ConditionallyArchivableTimelineProgressView);
}

uint64_t get_witness_table_7SwiftUI32TimelineProgressViewExtendedBaseRzlAA0cdE0V05FinalcdE033_E25B5CE50FE780022155187DDAA79ACALLVyx_GAA0E0HPyHCTm(void *a1, void (*a2)(uint64_t, void, void))
{
  a2(255, *a1, a1[1]);

  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in TimelineProgressView<A>.ArchivableTimelineProgressView.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for View.Body : View in TimelineProgressView<A>.FinalTimelineProgressView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TimelineProgressView<A>.ArchivableTimelineProgressView.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in TimelineProgressView<A>.ArchivableTimelineProgressView.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for TimelineSchedule.Entries : Sequence in ProgressViewSchedule()
{
  return lazy protocol witness table accessor for type AnyIterator<Date> and conformance AnyIterator<A>(&lazy protocol witness table cache variable for type AnyIterator<Date> and conformance AnyIterator<A>, &lazy cache variable for type metadata for AnyIterator<Date>, MEMORY[0x1E4FBB978]);
}

uint64_t outlined init with copy of ClosedRange<Date>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of ClosedRange<Date>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for _SequenceBox<PeriodicTimelineSchedule.Entries>()
{
  if (!lazy cache variable for type metadata for _SequenceBox<PeriodicTimelineSchedule.Entries>)
  {
    type metadata accessor for PeriodicTimelineSchedule.Entries();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type PeriodicTimelineSchedule.Entries and conformance PeriodicTimelineSchedule.Entries, MEMORY[0x1E4F40D98]);
    unint64_t v0 = type metadata accessor for _SequenceBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SequenceBox<PeriodicTimelineSchedule.Entries>);
    }
  }
}

uint64_t sub_187754E00()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for ProgressViewSchedule(0) - 8) + 80);
  uint64_t v2 = (v1 + 24) & ~v1;
  swift_release();
  uint64_t v3 = v0 + v2;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(v3, v4);
  type metadata accessor for ClosedRange<Date>();
  v5(v3 + *(int *)(v6 + 36), v4);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ProgressViewSchedule.entries(from:mode:)@<X0>(char *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for ProgressViewSchedule(0) - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return closure #1 in ProgressViewSchedule.entries(from:mode:)(v4, a1);
}

void type metadata accessor for _IteratorBox<_ClosureBasedIterator<Date>>()
{
  if (!lazy cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<Date>>)
  {
    uint64_t v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBBD98];
    type metadata accessor for Date?(255, &lazy cache variable for type metadata for _ClosureBasedIterator<Date>, MEMORY[0x1E4F27928], MEMORY[0x1E4FBBD98]);
    lazy protocol witness table accessor for type AnyIterator<Date> and conformance AnyIterator<A>(&lazy protocol witness table cache variable for type _ClosureBasedIterator<Date> and conformance _ClosureBasedIterator<A>, &lazy cache variable for type metadata for _ClosureBasedIterator<Date>, v0);
    unint64_t v1 = type metadata accessor for _IteratorBox();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<Date>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type AnyIterator<Date> and conformance AnyIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Date?(255, a2, MEMORY[0x1E4F27928], a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _SequenceBox<AnimationTimelineSchedule.Entries>()
{
  if (!lazy cache variable for type metadata for _SequenceBox<AnimationTimelineSchedule.Entries>)
  {
    type metadata accessor for AnimationTimelineSchedule.Entries();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type AnimationTimelineSchedule.Entries and conformance AnimationTimelineSchedule.Entries, (void (*)(uint64_t))type metadata accessor for AnimationTimelineSchedule.Entries);
    unint64_t v0 = type metadata accessor for _SequenceBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SequenceBox<AnimationTimelineSchedule.Entries>);
    }
  }
}

uint64_t outlined init with take of ClosedRange<Date>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t specialized TimelineProgressViewUpdateStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746C7561666564 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6365536568546E6FLL && a2 == 0xEB00000000646E6FLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized TimelineProgressViewUpdateStyle.init(from:)(uint64_t a1)
{
  BOOL v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBBDC0];
  type metadata accessor for KeyedEncodingContainer<_TimelineProgressViewBaseEmptyState.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys and conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys, (uint64_t)&unk_1ED45BD70, MEMORY[0x1E4FBBDC0]);
  uint64_t v27 = *(void *)(v3 - 8);
  uint64_t v28 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v31 = (char *)&v25 - v4;
  type metadata accessor for KeyedEncodingContainer<_TimelineProgressViewBaseEmptyState.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TimelineProgressViewUpdateStyle.DefaultCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.DefaultCodingKeys and conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys, (uint64_t)&unk_1ED45BD50, v2);
  uint64_t v6 = v5;
  uint64_t v30 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v25 - v7;
  type metadata accessor for KeyedEncodingContainer<_TimelineProgressViewBaseEmptyState.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TimelineProgressViewUpdateStyle.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys, (uint64_t)&unk_1ED45BCC0, v2);
  uint64_t v10 = v9;
  uint64_t v29 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  unsigned int v12 = (char *)&v25 - v11;
  __swift_project_boxed_opaque_existential_1((void *)a1, *(void *)(a1 + 24));
  lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys();
  uint64_t v13 = v32;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    goto LABEL_7;
  }
  uint64_t v26 = v6;
  uint64_t v15 = v30;
  unint64_t v14 = v31;
  uint64_t v32 = a1;
  size_t v16 = v12;
  uint64_t v17 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v17 + 16) != 1)
  {
    uint64_t v20 = type metadata accessor for DecodingError();
    swift_allocError();
    int v22 = v21;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    void *v22 = &type metadata for TimelineProgressViewUpdateStyle;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v20 - 8) + 104))(v22, *MEMORY[0x1E4FBBA70], v20);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v10);
    a1 = v32;
LABEL_7:
    __swift_destroy_boxed_opaque_existential_1(a1);
    return a1;
  }
  a1 = *(unsigned __int8 *)(v17 + 32);
  if (a1)
  {
    uint64_t v18 = *(unsigned __int8 *)(v17 + 32);
    char v34 = 1;
    lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys and conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v19 = v29;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v14, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v10);
    a1 = v18;
  }
  else
  {
    char v33 = 0;
    lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.DefaultCodingKeys and conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v23 = v29;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v8, v26);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v16, v10);
  }
  __swift_destroy_boxed_opaque_existential_1(v32);
  return a1;
}

uint64_t specialized TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.init(intValue:)()
{
  return 5;
}

unint64_t lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys and conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys and conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys;
  if (!lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys and conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys and conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys and conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys;
  if (!lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys and conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys and conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys and conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys;
  if (!lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys and conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys and conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.DefaultCodingKeys and conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.DefaultCodingKeys and conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys;
  if (!lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.DefaultCodingKeys and conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.DefaultCodingKeys and conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.DefaultCodingKeys and conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys;
  if (!lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.DefaultCodingKeys and conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.DefaultCodingKeys and conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.DefaultCodingKeys and conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys;
  if (!lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.DefaultCodingKeys and conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.DefaultCodingKeys and conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys);
  }
  return result;
}

void type metadata accessor for KeyedEncodingContainer<_TimelineProgressViewBaseEmptyState.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t sub_1877558E4()
{
  uint64_t v1 = (int *)(type metadata accessor for TimelineProgressView.FinalTimelineProgressView() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  v4(v2, v3);
  type metadata accessor for ClosedRange<Date>();
  v4(v2 + *(int *)(v5 + 36), v3);
  swift_release();
  uint64_t v6 = v2 + v1[14];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TimelineProgressView.FinalTimelineProgressView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(type metadata accessor for TimelineProgressView.FinalTimelineProgressView() - 8);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return closure #1 in TimelineProgressView.FinalTimelineProgressView.body.getter(v6, v3, v4, a1);
}

unsigned char *storeEnumTagSinglePayload for TimelineProgressViewUpdateStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187755BD4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for TimelineProgressViewUpdateStyle.CodingKeys()
{
  return &unk_1ED45BCC0;
}

void *type metadata accessor for TimelineProgressViewUpdateStyle.DefaultCodingKeys()
{
  return &unk_1ED45BD50;
}

void *type metadata accessor for TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys()
{
  return &unk_1ED45BD70;
}

uint64_t sub_187755C2C()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for StageConfigurationAttributes()
{
  return &type metadata for StageConfigurationAttributes;
}

void protocol witness for WindowSceneConfigurationAttributes.sceneListValue(_:) in conformance StageConfigurationAttributes()
{
}

uint64_t key path getter for EnvironmentValues.multimodalListIconStyle : EnvironmentValues@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<IconStyleKey>, (uint64_t)&type metadata for IconStyleKey, (uint64_t)&protocol witness table for IconStyleKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<IconStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<IconStyleKey>, (uint64_t)&type metadata for IconStyleKey, (uint64_t)&protocol witness table for IconStyleKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<IconStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.multimodalListIconStyle : EnvironmentValues()
{
  return EnvironmentValues.multimodalListIconStyle.setter();
}

uint64_t sub_18775611C()
{
  return EnvironmentValues.multimodalListIconStyle.setter();
}

uint64_t sub_187756154@<X0>(void *a1@<X8>)
{
  uint64_t result = EnvironmentValues.pixelLength.getter();
  *a1 = v3;
  return result;
}

double key path getter for EnvironmentValues.fontBodyLeading : EnvironmentValues@<D0>(double *a1@<X8>)
{
  lazy protocol witness table accessor for type EnvironmentValues.FontBodyLeadingKey and conformance EnvironmentValues.FontBodyLeadingKey();
  EnvironmentValues.subscript.getter();
  double result = v3;
  *a1 = v3;
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentValues.FontBodyLeadingKey and conformance EnvironmentValues.FontBodyLeadingKey()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentValues.FontBodyLeadingKey and conformance EnvironmentValues.FontBodyLeadingKey;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.FontBodyLeadingKey and conformance EnvironmentValues.FontBodyLeadingKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.FontBodyLeadingKey and conformance EnvironmentValues.FontBodyLeadingKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<IconStyleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<IconStyleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<IconStyleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<IconStyleKey>, (uint64_t)&type metadata for IconStyleKey, (uint64_t)&protocol witness table for IconStyleKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<IconStyleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for IsInImmersiveContext()
{
  return &type metadata for IsInImmersiveContext;
}

ValueMetadata *type metadata accessor for IsInVolumetricContext()
{
  return &type metadata for IsInVolumetricContext;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsInVolumetricContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsInVolumetricContext(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type IsInVolumetricContext and conformance IsInVolumetricContext);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsInVolumetricContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsInVolumetricContext(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type IsInVolumetricContext and conformance IsInVolumetricContext);
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in IsInVolumetricContext()
{
  return &protocol witness table for IsInVolumetricContext;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsInImmersiveContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsInVolumetricContext(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type IsInImmersiveContext and conformance IsInImmersiveContext);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsInVolumetricContext(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  PropertyList.subscript.getter();
  return v5;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsInImmersiveContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsInVolumetricContext(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type IsInImmersiveContext and conformance IsInImmersiveContext);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsInVolumetricContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  return PropertyList.subscript.setter();
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in IsInImmersiveContext()
{
  return &protocol witness table for IsInImmersiveContext;
}

id EnvironmentValues.supportsMultipleWindows.getter()
{
  if (!static AppGraph.shared) {
    return 0;
  }
  id v0 = objc_msgSend(self, sel_sharedApplication);
  id v1 = objc_msgSend(v0, sel_supportsMultipleScenes);

  return v1;
}

uint64_t one-time initialization function for clarityUIButtonTitle()
{
  uint64_t result = static Font.system(_:design:weight:)();
  static Font.clarityUIButtonTitle = result;
  return result;
}

uint64_t one-time initialization function for clarityUINavigationTitle(uint64_t a1)
{
  return one-time initialization function for clarityUINavigationTitle(a1, 0, &static Font.clarityUINavigationTitle);
}

uint64_t static Font.clarityUINavigationTitle.getter()
{
  if (one-time initialization token for clarityUINavigationTitle != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t one-time initialization function for clarityUIGridCellTitle(uint64_t a1)
{
  return one-time initialization function for clarityUINavigationTitle(a1, 9, &static Font.clarityUIGridCellTitle);
}

uint64_t one-time initialization function for clarityUINavigationTitle(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  static Font.Weight.semibold.getter();
  uint64_t result = static Font.system(_:design:weight:)();
  *a3 = result;
  return result;
}

void static AlternatingRowBackgroundBehavior.enabled.getter()
{
}

void View.alternatingRowBackgrounds(_:)()
{
}

void EnvironmentValues.alternatingRowBackgroundBehavior.getter()
{
}

void EnvironmentValues.alternatingRowBackgroundBehavior.setter()
{
}

void AlternatingRowBackgroundBehavior.hash(into:)()
{
}

void static AlternatingRowBackgroundBehavior.== infix(_:_:)()
{
}

void AlternatingRowBackgroundBehavior.hashValue.getter()
{
}

void EnvironmentValues.alternatingRowBackgroundColors.getter()
{
}

void EnvironmentValues.alternatingRowBackgroundColors.setter()
{
}

void EnvironmentValues.alternatingRowBackgroundColors.modify()
{
}

void View.alternatingRowBackgroundColors(_:_:)()
{
}

void View.alternatesRowBackgrounds(_:)()
{
}

unint64_t lazy protocol witness table accessor for type AlternatingRowBackgroundBehavior and conformance AlternatingRowBackgroundBehavior()
{
  unint64_t result = lazy protocol witness table cache variable for type AlternatingRowBackgroundBehavior and conformance AlternatingRowBackgroundBehavior;
  if (!lazy protocol witness table cache variable for type AlternatingRowBackgroundBehavior and conformance AlternatingRowBackgroundBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AlternatingRowBackgroundBehavior and conformance AlternatingRowBackgroundBehavior);
  }
  return result;
}

void sub_1877569A0()
{
}

void sub_1877569C8()
{
}

void sub_1877569DC()
{
}

void sub_187756A04()
{
}

ValueMetadata *type metadata accessor for AlternatingRowBackgroundBehavior()
{
  return &type metadata for AlternatingRowBackgroundBehavior;
}

uint64_t sub_187756A34()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<AlternatingRowBackgroundBehavior> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<AlternatingRowBackgroundBehavior> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<AlternatingRowBackgroundBehavior> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<AlternatingRowBackgroundBehavior>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<AlternatingRowBackgroundBehavior>, (uint64_t)&type metadata for AlternatingRowBackgroundBehavior, MEMORY[0x1E4F411E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<AlternatingRowBackgroundBehavior> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t sub_187756B40()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<[Color]?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<[Color]?>)
  {
    type metadata accessor for [Color]?();
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<[Color]?>);
    }
  }
}

void type metadata accessor for [Color]?()
{
  if (!lazy cache variable for type metadata for [Color]?)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<AlternatingRowBackgroundBehavior>(255, &lazy cache variable for type metadata for [Color], MEMORY[0x1E4F414E0], MEMORY[0x1E4FBB320]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [Color]?);
    }
  }
}

void type metadata accessor for _EnvironmentKeyWritingModifier<AlternatingRowBackgroundBehavior>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<[Color]?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<[Color]?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<[Color]?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<[Color]?>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<[Color]?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AlternatingRowBackgroundBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187756DF0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AlternatingRowBackgroundBehavior.Guts()
{
  return &type metadata for AlternatingRowBackgroundBehavior.Guts;
}

unint64_t lazy protocol witness table accessor for type AlternatingRowBackgroundBehavior.Guts and conformance AlternatingRowBackgroundBehavior.Guts()
{
  unint64_t result = lazy protocol witness table cache variable for type AlternatingRowBackgroundBehavior.Guts and conformance AlternatingRowBackgroundBehavior.Guts;
  if (!lazy protocol witness table cache variable for type AlternatingRowBackgroundBehavior.Guts and conformance AlternatingRowBackgroundBehavior.Guts)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AlternatingRowBackgroundBehavior.Guts and conformance AlternatingRowBackgroundBehavior.Guts);
  }
  return result;
}

void static AlternatingRowBackgroundBehavior.automatic.getter()
{
}

void static AlternatingRowBackgroundBehavior.disabled.getter()
{
}

void static ScrollDecelerationRate.fast.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

BOOL static ScrollDecelerationRate.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void static ScrollDecelerationRate.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static ScrollDecelerationRate.standard.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

void ScrollTargetBehaviorDecelerationContext.defaultDecelerationRate.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t ScrollTargetBehaviorDecelerationContext.axes.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t ScrollTargetBehaviorDecelerationContext.environment.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  *a1 = *(void *)(v1 + 8);
  a1[1] = v2;
  swift_retain();

  return swift_retain();
}

uint64_t ScrollTargetBehaviorContext.axes.getter()
{
  return *(unsigned __int8 *)(v0 + 184);
}

__n128 ScrollTargetBehaviorContext.originalTarget.getter@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 48);
  long long v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = *(__n128 *)(v1 + 32);
  *(__n128 *)(a1 + 32) = result;
  *(unsigned char *)(a1 + 48) = v2;
  return result;
}

__n128 ScrollTargetBehaviorContext.originalTarget.setter(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 48);
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v3;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v1 + 32) = result;
  *(unsigned char *)(v1 + 48) = v2;
  return result;
}

__n128 (*ScrollTargetBehaviorContext.originalTarget.modify(void *a1))(void **a1)
{
  long long v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[7] = v1;
  char v4 = *(unsigned char *)(v1 + 48);
  long long v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)long long v3 = *(_OWORD *)v1;
  *((_OWORD *)v3 + 1) = v5;
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 32);
  *((unsigned char *)v3 + 48) = v4;
  return ScrollTargetBehaviorContext.originalTarget.modify;
}

__n128 ScrollTargetBehaviorContext.originalTarget.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = v1[7];
  char v3 = *((unsigned char *)v1 + 48);
  long long v5 = *((_OWORD *)v1 + 1);
  long long v4 = *((_OWORD *)v1 + 2);
  *(_OWORD *)uint64_t v2 = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 16) = v5;
  *(_OWORD *)(v2 + 32) = v4;
  *(unsigned char *)(v2 + 48) = v3;
  free(v1);
  return result;
}

double ScrollTargetBehaviorContext.velocity.getter()
{
  return *(double *)(v0 + 56);
}

uint64_t (*ScrollTargetBehaviorContext.velocity.modify(_OWORD *a1))(void, void, void, void)
{
  *a1 = *(_OWORD *)(v1 + 56);
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t ScrollTargetBehaviorContext.contentSize.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ScrollTargetBehaviorContext.contentSize.getter(MEMORY[0x1E4F3F9D8], a2, a3, a4, a5, a6, a7, a8);
}

uint64_t (*ScrollTargetBehaviorContext.contentSize.modify(void *a1))(void, void, void, void)
{
  ScrollGeometry.contentSize.getter();
  *a1 = v2;
  a1[1] = v3;
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t ScrollTargetBehaviorContext.containerSize.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ScrollTargetBehaviorContext.contentSize.getter(MEMORY[0x1E4F3F9E0], a2, a3, a4, a5, a6, a7, a8);
}

uint64_t (*ScrollTargetBehaviorContext.containerSize.modify(void *a1))(void, void, void, void)
{
  ScrollGeometry.containerSize.getter();
  *a1 = v2;
  a1[1] = v3;
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double ScrollTargetBehaviorContext.contentInsets.getter()
{
  return *(double *)(v0 + 104);
}

uint64_t ScrollTargetBehaviorContext.contentOffset.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ScrollTargetBehaviorContext.contentSize.getter(MEMORY[0x1E4F3F9E8], a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ScrollTargetBehaviorContext.axes.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 184) = result;
  return result;
}

unsigned char *(*ScrollTargetBehaviorContext.axes.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 184);
  return ScrollTargetBehaviorContext.axes.modify;
}

unsigned char *ScrollTargetBehaviorContext.axes.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 184) = result[8];
  return result;
}

uint64_t ScrollTargetBehaviorContext.subscript.getter()
{
  return swift_release();
}

uint64_t ScrollTargetBehaviorContext.viewportSize.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ScrollTargetBehaviorContext.contentSize.getter(MEMORY[0x1E4F3F9E0], a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ScrollTargetBehaviorContext.contentSize.getter(uint64_t (*a1)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1(a1, a2, a3, a4, a5, a6, a7, a8, v8[9], v8[10], v8[11], v8[12], v8[13], v8[14]);
}

void key path getter for ScrollTargetBehaviorContext.contentSize : ScrollTargetBehaviorContext(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double (*a4)(void *, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  *(double *)a9 = a4(a1, a2, a3, a4, a5, a6, a7, a8, a1[9], a1[10], a1[11], a1[12], a1[13], a1[14]);
  *(void *)(a9 + 8) = v10;
}

uint64_t (*ScrollTargetBehaviorContext.viewportSize.modify(void *a1))(void, void, void, void)
{
  ScrollGeometry.containerSize.getter();
  *a1 = v2;
  a1[1] = v3;
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t ResolvedScrollBehavior.updateTarget(_:context:)(uint64_t result, long long *a2)
{
  long long v3 = a2[11];
  long long v56 = a2[10];
  long long v57 = v3;
  long long v4 = a2[13];
  long long v58 = a2[12];
  long long v59 = v4;
  long long v5 = a2[7];
  *(_OWORD *)&v52[48] = a2[6];
  long long v53 = v5;
  long long v6 = a2[9];
  long long v54 = a2[8];
  long long v55 = v6;
  long long v7 = a2[3];
  long long v51 = a2[2];
  *(_OWORD *)uint64_t v52 = v7;
  long long v8 = a2[5];
  *(_OWORD *)&unsigned char v52[16] = a2[4];
  *(_OWORD *)&v52[32] = v8;
  long long v9 = a2[1];
  long long v49 = *a2;
  long long v50 = v9;
  if (*(unsigned char *)(v2 + 45))
  {
    __break(1u);
  }
  else
  {
    uint64_t v10 = result;
    char v11 = *(unsigned char *)(v2 + 44);
    type metadata accessor for [ScrollableCollection](0);
    Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
    if (WeakValue)
    {
      uint64_t v13 = *WeakValue;
      outlined retain of ScrollTargetBehaviorContext((uint64_t)&v49);
      uint64_t v27 = v13;
      swift_bridgeObjectRetain();
    }
    else
    {
      outlined retain of ScrollTargetBehaviorContext((uint64_t)&v49);
      uint64_t v27 = MEMORY[0x1E4FBC860];
    }
    swift_bridgeObjectRelease();
    unint64_t v14 = (uint64_t *)AGGraphGetWeakValue();
    char v36 = v11;
    if (v14)
    {
      uint64_t v15 = *v14;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v15 = MEMORY[0x1E4FBC860];
    }
    swift_bridgeObjectRelease();
    size_t v16 = (uint64_t *)AGGraphGetWeakValue();
    if (v16)
    {
      uint64_t v17 = *v16;
      uint64_t v18 = v16[1];
      swift_retain();
      swift_retain();
      swift_release();
      swift_release();
    }
    else
    {
      EnvironmentValues.init()();
      swift_release();
      swift_release();
      uint64_t v17 = v47;
      uint64_t v18 = v48;
    }
    char v19 = BYTE9(v57);
    long long v34 = *(_OWORD *)&v52[40];
    long long v35 = *(_OWORD *)&v52[24];
    uint64_t v20 = *(void *)&v52[56];
    long long v32 = v54;
    long long v33 = v53;
    long long v30 = v56;
    long long v31 = v55;
    uint64_t v21 = v57;
    long long v28 = v49;
    long long v29 = *(_OWORD *)&v52[8];
    long long v22 = v50;
    long long v23 = v51;
    char v24 = v52[0];
    uint64_t v25 = *(void *)(v2 + 24);
    uint64_t v26 = *(void *)(v2 + 32);
    __swift_project_boxed_opaque_existential_1((void *)v2, v25);
    v38[0] = v28;
    v38[1] = v22;
    _OWORD v38[2] = v23;
    v39[0] = v24;
    *(_OWORD *)&v39[8] = v29;
    *(_OWORD *)&v39[24] = v35;
    *(_OWORD *)&v39[40] = v34;
    *(void *)&v39[56] = v20;
    long long v40 = v33;
    long long v41 = v32;
    long long v42 = v31;
    long long v43 = v30;
    *(void *)&long long v44 = v21;
    BYTE8(v44) = v36;
    BYTE9(v44) = v19;
    *(void *)&long long v45 = v27;
    *((void *)&v45 + 1) = v15;
    *(void *)&long long v46 = v17;
    *((void *)&v46 + 1) = v18;
    v37[10] = v30;
    v37[11] = v44;
    unsigned char v37[12] = v45;
    v37[13] = v46;
    v37[6] = *(_OWORD *)&v39[48];
    v37[7] = v33;
    v37[8] = v32;
    v37[9] = v31;
    v37[2] = v23;
    void v37[3] = *(_OWORD *)v39;
    v37[4] = *(_OWORD *)&v39[16];
    _OWORD v37[5] = *(_OWORD *)&v39[32];
    v37[0] = v28;
    v37[1] = v22;
    (*(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t))(v26 + 8))(v10, v37, v25, v26);
    return outlined release of ScrollTargetBehaviorContext((uint64_t)v38);
  }
  return result;
}

uint64_t ScrollBehaviorModifier.LayoutRoleFilter.value.getter()
{
  type metadata accessor for [ScrollTargetRole.Role : [ScrollableCollection]]();
  if (*(void *)(*(void *)AGGraphGetValue() + 16)
    && (specialized __RawDictionaryStorage.find<A>(_:)(*v0), (v1 & 1) != 0))
  {
    return swift_bridgeObjectRetain();
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
}

uint64_t protocol witness for Rule.value.getter in conformance ScrollBehaviorModifier<A>.LayoutRoleFilter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ScrollBehaviorModifier.LayoutRoleFilter.value.getter();
  *a1 = result;
  return result;
}

double protocol witness for static StatefulRule.initialValue.getter in conformance ScrollBehaviorModifier<A>.ScrollBehaviorProvider@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TransformScrollDeceleration(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  void v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TransformScrollDeceleration(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  void v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance TransformScrollDeceleration()
{
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance TransformScrollDeceleration()
{
  lazy protocol witness table accessor for type TransformScrollDeceleration and conformance TransformScrollDeceleration();

  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

uint64_t View.scrollDeceleration(_:axes:)(unsigned char *a1, char a2, uint64_t a3)
{
  v4[0] = *a1;
  v4[1] = a2;
  return MEMORY[0x18C113660](v4, a3, &type metadata for TransformScrollDeceleration);
}

void protocol witness for ViewModifier.body(content:) in conformance ScrollTargetModifier()
{
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ScrollTargetModifier(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Attribute<ResolvedScrollBehavior>(0, &lazy cache variable for type metadata for _GraphValue<ScrollTargetModifier>, (uint64_t)&type metadata for ScrollTargetModifier, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  _GraphInputs.scrollTargetRole.setter();
  uint64_t result = _GraphInputs.scrollTargetRemovePreference.setter();
  *(_DWORD *)(a2 + 36) |= 0x800u;
  return result;
}

uint64_t View.scrollTarget(isEnabled:)(char a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    char v3 = 1;
  }
  else {
    char v3 = 2;
  }
  char v5 = v3;
  return MEMORY[0x18C113660](&v5, a2, &type metadata for ScrollTargetModifier, a3);
}

__n128 sub_187757A00@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(a1 + 48);
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  *(unsigned char *)(a2 + 48) = v2;
  return result;
}

__n128 sub_187757A1C(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a1 + 48);
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  *(unsigned char *)(a2 + 48) = v2;
  return result;
}

__n128 sub_187757A38@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 56);
  *a2 = result;
  return result;
}

void sub_187757A48(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
}

void sub_187757A78(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
}

uint64_t sub_187757AA8@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 184);
  return result;
}

unsigned char *sub_187757AB4(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 184) = *result;
  return result;
}

void sub_187757AC0(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
}

uint64_t dispatch thunk of ScrollTargetBehavior.updateTarget(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of static ScrollTargetBehavior._makeInputs(_:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of ScrollTargetBehavior._updateEnvironment(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

ValueMetadata *type metadata accessor for ScrollDecelerationRate()
{
  return &type metadata for ScrollDecelerationRate;
}

uint64_t initializeBufferWithCopyOfBuffer for ScrollTargetBehaviorDecelerationContext(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScrollTargetBehaviorDecelerationContext(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ScrollTargetBehaviorDecelerationContext(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ScrollTargetBehaviorDecelerationContext()
{
  return &type metadata for ScrollTargetBehaviorDecelerationContext;
}

ValueMetadata *type metadata accessor for _ScrollTargetBehaviorEnvironmentContext()
{
  return &type metadata for _ScrollTargetBehaviorEnvironmentContext;
}

uint64_t destroy for ScrollTargetBehaviorContext()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for ScrollTargetBehaviorContext(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_WORD *)(a1 + 184) = *(_WORD *)(a2 + 184);
  uint64_t v4 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v4;
  uint64_t v5 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScrollTargetBehaviorContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(unsigned char *)(a1 + 185) = *(unsigned char *)(a2 + 185);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_retain();
  swift_release();
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy224_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  long long v11 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v11;
  *(__n128 *)(a1 + 160) = result;
  *(_OWORD *)(a1 + 176) = v10;
  return result;
}

uint64_t assignWithTake for ScrollTargetBehaviorContext(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_WORD *)(a1 + 184) = *(_WORD *)(a2 + 184);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  swift_bridgeObjectRelease();
  swift_release();
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollTargetBehaviorContext(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 224)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 192);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollTargetBehaviorContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 216) = 0;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 224) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 192) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 224) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollTargetBehaviorContext()
{
  return &type metadata for ScrollTargetBehaviorContext;
}

uint64_t sub_187758074()
{
  return swift_getWitnessTable();
}

uint64_t sub_1877580E4()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

uint64_t sub_1877580F8()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

unsigned char *storeEnumTagSinglePayload for ScrollDecelerationRate(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *__n128 result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1877581D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollDecelerationRate.Role()
{
  return &type metadata for ScrollDecelerationRate.Role;
}

uint64_t assignWithCopy for ResolvedScrollBehavior(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollTargetModifier(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  if (*a1 <= 2u) {
    int v6 = 2;
  }
  else {
    int v6 = *a1;
  }
  int v7 = v6 - 3;
  if (*a1 < 2u) {
    int v8 = -1;
  }
  else {
    int v8 = v7;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ScrollTargetModifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1877583E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TransformScrollDeceleration(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 65284 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65284 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65284;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65284;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65284;
    }
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TransformScrollDeceleration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65284 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65284 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 16) + 1;
    *(_WORD *)__n128 result = a2 - 252;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187758570);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)__n128 result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TransformScrollDeceleration()
{
  return &type metadata for TransformScrollDeceleration;
}

uint64_t getEnumTagSinglePayload for ScrollBehaviorModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for ScrollBehaviorModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18775891CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        size_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in TransformScrollDeceleration()
{
  return &protocol witness table for TransformScrollDeceleration;
}

_UNKNOWN **base witness table accessor for ViewModifier in TransformScrollDeceleration()
{
  return &protocol witness table for TransformScrollDeceleration;
}

_UNKNOWN **base witness table accessor for ViewModifier in ScrollTargetModifier()
{
  return &protocol witness table for ScrollTargetModifier;
}

unint64_t lazy protocol witness table accessor for type ScrollDecelerationRate.Role and conformance ScrollDecelerationRate.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollDecelerationRate.Role and conformance ScrollDecelerationRate.Role;
  if (!lazy protocol witness table cache variable for type ScrollDecelerationRate.Role and conformance ScrollDecelerationRate.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollDecelerationRate.Role and conformance ScrollDecelerationRate.Role);
  }
  return result;
}

uint64_t outlined retain of ScrollTargetBehaviorContext(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ScrollTargetBehaviorContext(uint64_t a1)
{
  return a1;
}

char *specialized static TransformScrollDeceleration.makeEnvironment(modifier:environment:)(uint64_t a1, uint64_t a2)
{
  unint64_t result = (char *)AGGraphGetValue();
  if (result[1])
  {
    char v4 = *result;
    uint64_t v5 = *(void *)(a2 + 8);
    type metadata accessor for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    if (v5)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    v7[80] = v4;
    outlined init with copy of ScrollEnvironmentProperties((uint64_t)v7, (uint64_t)&v6);
    type metadata accessor for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.setter();
    if (v5)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    return (char *)outlined destroy of ScrollEnvironmentProperties((uint64_t)v7);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TransformScrollDeceleration and conformance TransformScrollDeceleration()
{
  unint64_t result = lazy protocol witness table cache variable for type TransformScrollDeceleration and conformance TransformScrollDeceleration;
  if (!lazy protocol witness table cache variable for type TransformScrollDeceleration and conformance TransformScrollDeceleration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformScrollDeceleration and conformance TransformScrollDeceleration);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ScrollBehaviorModifier.LayoutRoleFilter(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[8]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

Swift::Void __swiftcall DismissAction.callAsFunction()()
{
  type metadata accessor for Binding<PresentationMode>();
  uint64_t v1 = v0;
  swift_retain();
  swift_retain();
  MEMORY[0x18C113DA0](&v2, v1);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
}

uint64_t EnvironmentValues.dismiss.getter@<X0>(uint64_t a1@<X8>)
{
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<PresentationModeKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<PresentationModeKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  return result;
}

uint64_t static View.mapKitMakeSelectionEnabled<A>(forType:inputs:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  int v11 = *((_DWORD *)a1 + 2);
  uint64_t v12 = a1[2];
  uint64_t v13 = a1[5];
  uint64_t v21 = *a1;
  int v22 = v11;
  uint64_t v23 = v12;
  long long v24 = *(_OWORD *)(a1 + 3);
  uint64_t v25 = v13;
  uint64_t v14 = _GraphInputs.selectionStorage<A>(forType:)();
  unint64_t v16 = SelectionBasedStorage.$isSelectionEnabled.getter(v14, v15);
  LODWORD(v21) = v16;
  BYTE4(v21) = BYTE4(v16) & 1;
  id v20[2] = a2;
  _OWORD v20[3] = a3;
  v20[4] = a4;
  _OWORD v20[5] = a5;
  swift_getFunctionTypeMetadata1();
  type metadata accessor for Attribute();
  type metadata accessor for Optional();
  uint64_t v17 = type metadata accessor for _GraphValue();
  return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in static View.mapKitMakeSelectionEnabled<A>(forType:inputs:), (uint64_t)v20, MEMORY[0x1E4FBC248], v17, v18, a6);
}

uint64_t partial apply for closure #1 in static View.mapKitMakeSelectionEnabled<A>(forType:inputs:)()
{
  return _GraphValue.init(_:)();
}

unsigned char *static BorderlessButtonLabelShapeStyle._apply(to:)(unsigned char *result)
{
  *uint64_t result = 1;
  return result;
}

uint64_t protocol witness for static ShapeStyle._makeView<A>(view:inputs:) in conformance BorderlessButtonLabelShapeStyle<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FD1C0](a1, a2, a5, a3, a6, a4);
}

void protocol witness for ShapeStyle.resolve(in:) in conformance BorderlessButtonLabelShapeStyle<A>()
{
}

uint64_t BorderlessButtonStyle.buttonStyleRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v3 = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = KeyPath;
  *(_WORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = v3;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = result;
  *(unsigned char *)(a1 + 56) = 0;
  return result;
}

uint64_t protocol witness for ButtonStyleConvertible.buttonStyleRepresentation.getter in conformance BorderlessButtonStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v3 = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = KeyPath;
  *(_WORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = v3;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = result;
  *(unsigned char *)(a1 + 56) = 0;
  return result;
}

uint64_t key path getter for EnvironmentValues.defaultFont : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.defaultFont.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.defaultFont : EnvironmentValues()
{
  return EnvironmentValues.defaultFont.setter();
}

uint64_t ConditionallyBorderedButton.resolvedBorderShape.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = *(unsigned char *)(v2 + *(int *)(a1 + 36));
  uint64_t v5 = v2 + *(int *)(a1 + 44);
  uint64_t v6 = *(void *)v5;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 8);
  int v8 = *(unsigned __int8 *)(v5 + 9);
  outlined copy of Environment<CGFloat?>.Content(*(void *)v5, v7, *(unsigned char *)(v5 + 9));
  specialized Environment.wrappedValue.getter(v6, v7 | (v8 << 8), (uint64_t)&v15);
  outlined consume of Environment<CGFloat?>.Content(v6, v7, v8);
  uint64_t v9 = v15;
  LOBYTE(v7) = v16;
  uint64_t result = static EdgeInsets.zero.getter();
  *(unsigned char *)a2 = v4;
  *(void *)(a2 + 8) = v9;
  *(unsigned char *)(a2 + 16) = v7;
  *(void *)(a2 + 24) = v11;
  *(void *)(a2 + 32) = v12;
  *(void *)(a2 + 40) = v13;
  *(void *)(a2 + 48) = v14;
  return result;
}

uint64_t ConditionallyBorderedButton.background.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  ConditionallyBorderedButton.resolvedBorderShape.getter(a1, (uint64_t)v17);
  char v5 = v17[0];
  uint64_t v6 = v18;
  char v7 = v19;
  long long v16 = v20;
  uint64_t v8 = v21;
  uint64_t v9 = v22;
  uint64_t v10 = v2 + *(int *)(a1 + 40);
  uint64_t v11 = *(void *)v10;
  char v12 = *(unsigned char *)(v10 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v10, v12);
  char v13 = specialized Environment.wrappedValue.getter(v11, v12, 0x6C616E6F6974704FLL, 0xEE003E6C6F6F423CLL, (void (*)(uint64_t, void))outlined consume of Environment<Bool?>.Content);
  uint64_t result = outlined consume of Environment<Bool>.Content(v11, v12);
  float v15 = 0.18;
  *(unsigned char *)a2 = v5;
  *(void *)(a2 + 8) = v6;
  if ((v13 & 1) == 0) {
    float v15 = 0.0;
  }
  *(unsigned char *)(a2 + 16) = v7;
  *(_OWORD *)(a2 + 24) = v16;
  *(void *)(a2 + 40) = v8;
  *(void *)(a2 + 48) = v9;
  *(float *)(a2 + 56) = v15;
  *(_WORD *)(a2 + 60) = 256;
  return result;
}

uint64_t ConditionallyBorderedButton.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v38 = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  char v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v36 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  long long v33 = (char *)&v32 - v9;
  type metadata accessor for _BackgroundModifier<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>>();
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v37 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  long long v34 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  long long v35 = (char *)&v32 - v13;
  uint64_t v14 = (uint64_t *)(v2 + *(int *)(a1 + 48));
  char v15 = *((unsigned char *)v14 + 8);
  uint64_t v16 = v14[4];
  LOBYTE(v13) = *((unsigned char *)v14 + 40);
  char v17 = *((unsigned char *)v14 + 41);
  uint64_t v18 = v14[6];
  char v19 = *((unsigned char *)v14 + 56);
  uint64_t v51 = *v14;
  LOBYTE(v52) = v15;
  *(_OWORD *)long long v53 = *((_OWORD *)v14 + 1);
  *(void *)&char v53[16] = v16;
  LOBYTE(v54) = v13;
  BYTE1(v54) = v17;
  *((void *)&v54 + 1) = v18;
  LOBYTE(v55) = v19;
  BorderedButtonSpec.padding.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  uint64_t v20 = v2 + *(int *)(a1 + 40);
  uint64_t v21 = *(void *)v20;
  char v22 = *(unsigned char *)(v20 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v20, v22);
  int v23 = specialized Environment.wrappedValue.getter(v21, v22, 0x6C616E6F6974704FLL, 0xEE003E6C6F6F423CLL, (void (*)(uint64_t, void))outlined consume of Environment<Bool?>.Content);
  outlined consume of Environment<Bool>.Content(v21, v22);
  if (v23 == 2) {
    static EdgeInsets.zero.getter();
  }
  uint64_t v24 = *(void *)(a1 + 24);
  uint64_t v25 = v33;
  View.padding(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  ConditionallyBorderedButton.background.getter(a1, (uint64_t)&v51);
  char v43 = v51;
  uint64_t v44 = v52;
  char v45 = v53[0];
  long long v46 = *(_OWORD *)&v53[8];
  long long v47 = v54;
  int v48 = v55;
  char v49 = v56;
  char v50 = v57;
  static Alignment.center.getter();
  type metadata accessor for _ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>();
  uint64_t v41 = v24;
  uint64_t v42 = MEMORY[0x1E4F3FA78];
  uint64_t WitnessTable = swift_getWitnessTable();
  lazy protocol witness table accessor for type _BackgroundModifier<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type _ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>> and conformance _ShapeView<A, B>, (void (*)(uint64_t))type metadata accessor for _ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>);
  uint64_t v27 = v34;
  View.background<A>(_:alignment:)();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v25, v8);
  uint64_t v28 = lazy protocol witness table accessor for type _BackgroundModifier<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type _BackgroundModifier<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>> and conformance _BackgroundModifier<A>, (void (*)(uint64_t))type metadata accessor for _BackgroundModifier<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>>);
  uint64_t v39 = WitnessTable;
  uint64_t v40 = v28;
  swift_getWitnessTable();
  long long v29 = v35;
  static ViewBuilder.buildExpression<A>(_:)(v27);
  long long v30 = *(void (**)(char *, uint64_t))(v37 + 8);
  v30(v27, v10);
  static ViewBuilder.buildExpression<A>(_:)(v29);
  return ((uint64_t (*)(char *, uint64_t))v30)(v29, v10);
}

uint64_t key path getter for EnvironmentValues.colorScheme : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.colorScheme.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.colorScheme : EnvironmentValues()
{
  return EnvironmentValues.colorScheme.setter();
}

uint64_t key path getter for EnvironmentValues.controlSize : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.controlSize.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.controlSize : EnvironmentValues(char *a1)
{
  char v2 = *a1;
  return MEMORY[0x18C10F960](&v2);
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v3 = result;
  if (a2)
  {
    *a3 = result;
  }
  else
  {
    outlined copy of Environment<Bool>.Content(result, 0);
    os_log_type_t v4 = static os_log_type_t.fault.getter();
    uint64_t v5 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v6 = v4;
    if (os_log_type_enabled(v5, v4))
    {
      char v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      uint64_t v9 = v8;
      *(_DWORD *)char v7 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x8000000188328120, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v5, v6, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v8, -1, -1);
      MEMORY[0x18C119C60](v7, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<Bool>.Content(v3, 0);
    swift_release();
    return swift_release();
  }
  return result;
}

{
  uint64_t v3;
  os_log_type_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v3 = result;
  if (a2)
  {
    *a3 = result;
  }
  else
  {
    outlined copy of Environment<Bool>.Content(result, 0);
    os_log_type_t v4 = static os_log_type_t.fault.getter();
    uint64_t v5 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v6 = v4;
    if (os_log_type_enabled(v5, v4))
    {
      char v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      uint64_t v9 = v8;
      *(_DWORD *)char v7 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x8000000188327EE0, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v5, v6, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v8, -1, -1);
      MEMORY[0x18C119C60](v7, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<Bool>.Content(v3, 0);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  if ((a3 & 0x100) != 0)
  {
    *(void *)a4 = result;
    *(void *)(a4 + 8) = a2;
    *(unsigned char *)(a4 + 16) = a3;
  }
  else
  {
    outlined copy of Environment<PlaybackButton._StyleStorage>.Content(result, a2, a3, 0);
    os_log_type_t v7 = static os_log_type_t.fault.getter();
    uint64_t v8 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v9 = v7;
    if (os_log_type_enabled(v8, v7))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      uint64_t v12 = v11;
      *(_DWORD *)uint64_t v10 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x7453656C7974535FLL, 0xED0000656761726FLL, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v8, v9, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v11, -1, -1);
      MEMORY[0x18C119C60](v10, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<PlaybackButton._StyleStorage>.Content(v6, a2, a3, 0);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t specialized Environment.wrappedValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  if ((a3 & 0x100) != 0)
  {
    outlined copy of Binding<NavigationSplitViewColumn>?(a1, a2);
  }
  else
  {
    swift_retain();
    os_log_type_t v6 = static os_log_type_t.fault.getter();
    os_log_type_t v7 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v8 = v6;
    if (os_log_type_enabled(v7, v6))
    {
      os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v12 = v10;
      *(_DWORD *)os_log_type_t v9 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x8000000188327E40, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v7, v8, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v10, -1, -1);
      MEMORY[0x18C119C60](v9, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<Binding<Visibility>?>.Content(v5, a2, a3, 0);
    swift_release();
    swift_release();
    return v12;
  }
  return v5;
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t result@<X0>, char a2@<W1>, _WORD *a3@<X8>)
{
  uint64_t v3 = result;
  if (a2)
  {
    *a3 = result;
  }
  else
  {
    outlined copy of Environment<Bool>.Content(result, 0);
    os_log_type_t v4 = static os_log_type_t.fault.getter();
    uint64_t v5 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v6 = v4;
    if (os_log_type_enabled(v5, v4))
    {
      os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      uint64_t v9 = v8;
      *(_DWORD *)os_log_type_t v7 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000016, 0x8000000188328280, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v5, v6, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v8, -1, -1);
      MEMORY[0x18C119C60](v7, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<Bool>.Content(v3, 0);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t specialized Environment.wrappedValue.getter(uint64_t a1, uint64_t a2, char a3)
{
  return specialized Environment.wrappedValue.getter(a1, a2, a3, (void (*)(uint64_t, uint64_t))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?, 0xD000000000000025, 0x8000000188327F20, (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
}

{
  os_log_type_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v11;

  if (a3)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_retain();
    uint64_t v5 = static os_log_type_t.fault.getter();
    os_log_type_t v6 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v7 = v5;
    if (os_log_type_enabled(v6, v5))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v11 = v9;
      *(_DWORD *)uint64_t v8 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x8000000188327F50, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v6, v7, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v9, -1, -1);
      MEMORY[0x18C119C60](v8, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<String?>.Content(a1, a2, 0);
    swift_release();
    swift_release();
    return v11;
  }
  return a1;
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, a3, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?, 0xD00000000000001DLL, 0x8000000188327DC0, (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, a3, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?, 0xD00000000000001BLL, 0x8000000188327E20, (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, a3, (void (*)(uint64_t, uint64_t))outlined copy of (Color, Color)?, 0xD000000000000018, 0x8000000188328060, (uint64_t (*)(void))outlined consume of ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?);
}

uint64_t specialized Environment.wrappedValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    swift_retain();
    os_log_type_t v7 = static os_log_type_t.fault.getter();
    uint64_t v8 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v9 = v7;
    if (os_log_type_enabled(v8, v7))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      uint64_t v13 = v11;
      *(_DWORD *)uint64_t v10 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000024, 0x80000001883283B0, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v8, v9, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v11, -1, -1);
      MEMORY[0x18C119C60](v10, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<TabSidebarAccessoryViewConfiguration>.Content(a1, a2, a3, 0);
    swift_release();
    swift_release();
    return v13;
  }
  return a1;
}

uint64_t specialized Environment.wrappedValue.getter(uint64_t a1, uint64_t a2, char a3, void (*a4)(uint64_t, uint64_t), uint64_t a5, unint64_t a6, uint64_t (*a7)(void))
{
  uint64_t v8 = a1;
  if (a3)
  {
    a4(a1, a2);
  }
  else
  {
    swift_retain();
    os_log_type_t v12 = static os_log_type_t.fault.getter();
    uint64_t v13 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v14 = v12;
    if (os_log_type_enabled(v13, v12))
    {
      char v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      uint64_t v18 = v16;
      *(_DWORD *)char v15 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a5, a6, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v13, v14, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v16, -1, -1);
      MEMORY[0x18C119C60](v15, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<TriggerSubmitAction?>.Content(v8, a2, 0, a7);
    swift_release();
    swift_release();
    return v18;
  }
  return v8;
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(unint64_t *a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = v5;
  uint64_t v12 = MEMORY[0x1E4F3F4D8];
  type metadata accessor for Binding<TabViewCustomization>(0, a1, a2, MEMORY[0x1E4F3F4D8]);
  MEMORY[0x1F4188790](v13);
  char v15 = (char *)v23 - v14;
  outlined init with copy of Environment<ToolbarItemPlacement.Role>.Content(v10, (uint64_t)v23 - v14, (uint64_t)a1, (uint64_t)a2, v12, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<TabViewCustomization>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = a3(0);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v16 - 8) + 32))(a5, v15, v16);
  }
  else
  {
    os_log_type_t v18 = static os_log_type_t.fault.getter();
    char v19 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v20 = v18;
    if (os_log_type_enabled(v19, v18))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      uint64_t v24 = v22;
      *(_DWORD *)uint64_t v21 = 136315138;
      v23[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, 0xE800000000000000, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v19, v20, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v22, -1, -1);
      MEMORY[0x18C119C60](v21, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    swift_release();
    swift_release();
    return swift_release();
  }
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if ((a3 & 0x100) != 0)
  {
    *(void *)a4 = a1;
    *(void *)(a4 + 8) = a2;
    *(unsigned char *)(a4 + 16) = a3;
    return outlined copy of Environment<Binding<EditMode>?>.Content(a1, a2, a3, 1);
  }
  else
  {
    outlined copy of Environment<Binding<EditMode>?>.Content(a1, a2, a3, 0);
    os_log_type_t v7 = static os_log_type_t.fault.getter();
    uint64_t v8 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v9 = v7;
    if (os_log_type_enabled(v8, v7))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      uint64_t v13 = v11;
      *(_DWORD *)uint64_t v10 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001BLL, 0x8000000188328210, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v8, v9, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v11, -1, -1);
      MEMORY[0x18C119C60](v10, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<Binding<Visibility>?>.Content(a1, a2, a3, 0);
    swift_release();
    return swift_release();
  }
}

{
  os_log_type_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t vars8;

  if ((a3 & 0x100) != 0)
  {
    *(void *)a4 = a1;
    *(void *)(a4 + 8) = a2;
    *(unsigned char *)(a4 + 16) = a3 & 1;
    return outlined copy of Environment<DismissAction>.Content(a1, a2, a3, 1);
  }
  else
  {
    outlined copy of Environment<DismissAction>.Content(a1, a2, a3, 0);
    os_log_type_t v7 = static os_log_type_t.fault.getter();
    uint64_t v8 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v9 = v7;
    if (os_log_type_enabled(v8, v7))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      uint64_t v13 = v11;
      *(_DWORD *)uint64_t v10 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x417373696D736944, 0xED00006E6F697463, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v8, v9, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v11, -1, -1);
      MEMORY[0x18C119C60](v10, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<DismissAction>.Content(a1, a2, a3, 0);
    swift_release();
    return swift_release();
  }
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = result;
  if ((a4 & 0x1000000) != 0)
  {
    *(void *)a5 = result;
    *(void *)(a5 + 8) = a2;
    *(void *)(a5 + 16) = a3;
    *(_WORD *)(a5 + 24) = a4;
    *(unsigned char *)(a5 + 26) = BYTE2(a4);
  }
  else
  {
    outlined copy of Environment<HoverEffectContext?>.Content(result, a2, a3, a4, 0);
    os_log_type_t v9 = static os_log_type_t.fault.getter();
    uint64_t v10 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v11 = v9;
    if (os_log_type_enabled(v10, v9))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v14 = v13;
      *(_DWORD *)uint64_t v12 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x8000000188327FE0, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v13, -1, -1);
      MEMORY[0x18C119C60](v12, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<HoverEffectContext?>.Content(v8, a2, a3, a4, 0);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t specialized Environment.wrappedValue.getter(void (*a1)(uint64_t, void, void, void), uint64_t a2, unint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = *(void *)v4;
  if (*(unsigned char *)(v4 + 32) == 1)
  {
    a1(v5, *(void *)(v4 + 8), *(void *)(v4 + 16), *(void *)(v4 + 24));
  }
  else
  {
    swift_retain();
    os_log_type_t v9 = static os_log_type_t.fault.getter();
    uint64_t v10 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v11 = v9;
    if (os_log_type_enabled(v10, v9))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v15 = v13;
      *(_DWORD *)uint64_t v12 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v13, -1, -1);
      MEMORY[0x18C119C60](v12, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined release of Environment<Text?>(v4, a4);
    swift_release();
    swift_release();
    return v15;
  }
  return v5;
}

void *specialized Environment.wrappedValue.getter(void *a1, char a2)
{
  char v2 = a1;
  if (a2)
  {
    id v10 = a1;
  }
  else
  {
    swift_retain();
    os_log_type_t v3 = static os_log_type_t.fault.getter();
    uint64_t v4 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v5 = v3;
    if (os_log_type_enabled(v4, v3))
    {
      os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      uint64_t v12 = v7;
      *(_DWORD *)os_log_type_t v6 = 136315138;
      type metadata accessor for UISceneSession?();
      uint64_t v8 = _typeName(_:qualified:)();
      uint64_t v13 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1872C6000, v4, v5, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v7, -1, -1);
      MEMORY[0x18C119C60](v6, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<UISceneSession?>.Content(v2, 0);
    swift_release();
    swift_release();
    return (void *)v13;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>;
  if (!lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>, MEMORY[0x1E4F3FCF0], MEMORY[0x1E4F410E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>);
  }
  return result;
}

uint64_t sub_18775D7C0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.controlSize.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_18775D804(char *a1)
{
  char v2 = *a1;
  return MEMORY[0x18C10F960](&v2);
}

uint64_t associated type witness table accessor for ButtonStyleConvertible.ButtonStyleRepresentation : ButtonStyle in BorderlessButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for BorderlessButtonStyle(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BorderlessButtonStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BorderlessButtonStyleBase(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 57)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 25);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BorderlessButtonStyleBase(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 57) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 25) = -(char)a2;
    }
  }
  return result;
}

uint64_t outlined init with take of Binding<TabViewCustomization>?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_18775D9FC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.colorScheme.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_18775DA40()
{
  return EnvironmentValues.colorScheme.setter();
}

uint64_t sub_18775DA78@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.defaultFont.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18775DAB4()
{
  return EnvironmentValues.defaultFont.setter();
}

uint64_t outlined consume of Environment<String?>.Content(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  else {
    return swift_release();
  }
}

void type metadata accessor for Predicate<Pack{URL}>?(uint64_t a1)
{
}

uint64_t outlined release of Environment<Text?>(uint64_t a1, uint64_t (*a2)(void))
{
  return a1;
}

uint64_t outlined consume of Environment<Text?>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t (*a6)(void))
{
  if (a5) {
    return a6();
  }
  else {
    return swift_release();
  }
}

uint64_t outlined consume of Binding<String>?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t outlined copy of Binding<String>?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_retain();
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined copy of (Color, Color)?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

void type metadata accessor for UISceneSession?()
{
  if (!lazy cache variable for type metadata for UISceneSession?)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UISceneSession);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UISceneSession?);
    }
  }
}

uint64_t outlined release of Environment<NavigationEventHandlers>(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t outlined init with take of Environment<PresentSharingPickerAction?>.Content(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Text.LineStyle?>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<PresentSharingPickerAction?>.Content, &lazy cache variable for type metadata for PresentSharingPickerAction?, (uint64_t)&type metadata for PresentSharingPickerAction, MEMORY[0x1E4F3F4D8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _s7SwiftUI11EnvironmentV7ContentOyAA26PresentSharingPickerActionVSg_GWOg(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

void outlined copy of Environment<PresentSharingPickerAction?>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a19) {
    outlined copy of PresentSharingPickerAction?(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  }
  else {
    swift_retain();
  }
}

uint64_t outlined retain of Environment<PresentSharingPickerAction?>(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 144);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), v4);
  return a1;
}

void outlined consume of Environment<PresentSharingPickerAction?>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a19) {
    outlined consume of PresentSharingPickerAction?(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  }
  else {
    swift_release();
  }
}

void outlined copy of AnyIdentifiableShareConfiguration?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), void (*a16)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (a10 != 1)
  {
    a15(a2, a3, a4, a5, a6);
    a16(a7, a8, a9, a10);
    a16(a11, a12, a13, a14);
  }
}

uint64_t outlined init with take of PresentSharingPickerAction?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>(0, &lazy cache variable for type metadata for PresentSharingPickerAction?, (uint64_t)&type metadata for PresentSharingPickerAction, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of Environment<PlaybackButton._StyleStorage>.Content(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0) {
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of Environment<PlaybackButton._StyleStorage>.Content(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0) {
    return swift_release();
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for BorderlessButtonLabelShapeStyle(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char v3 = (void *)a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = ~v5;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 3) & (unint64_t)~v5) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *char v3 = *a2;
    char v3 = (void *)(v9 + ((v5 + 16) & v6));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    *(unsigned char *)(a1 + 2) = *((unsigned char *)a2 + 2);
    (*(void (**)(uint64_t, unint64_t))(v4 + 16))((a1 + v5 + 3) & v6, ((unint64_t)a2 + v5 + 3) & v6);
  }
  return v3;
}

uint64_t destroy for BorderlessButtonLabelShapeStyle(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80) + 3) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for BorderlessButtonLabelShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))((*(unsigned __int8 *)(v4 + 80) + 3 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 3 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t assignWithCopy for BorderlessButtonLabelShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))((*(unsigned __int8 *)(v4 + 80) + 3 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 3 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t initializeWithTake for BorderlessButtonLabelShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))((*(unsigned __int8 *)(v4 + 80) + 3 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 3 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t assignWithTake for BorderlessButtonLabelShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))((*(unsigned __int8 *)(v4 + 80) + 3 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 3 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void *initializeBufferWithCopyOfBuffer for ConditionallyBorderedButton(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || (((v6 & 0xFFFFFFFFFFFFFFF8) + 41) & 0xFFFFFFFFFFFFFFF8) + 57 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(void *, void *))(v5 + 16))(a1, a2);
    *((unsigned char *)v4 + v6) = *((unsigned char *)a2 + v6);
    unint64_t v10 = ((unint64_t)v4 + v6) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v12 = *(void *)(v11 + 8);
    char v13 = *(unsigned char *)(v11 + 16);
    outlined copy of Environment<Bool>.Content(v12, v13);
    *(void *)(v10 + 8) = v12;
    *(unsigned char *)(v10 + 16) = v13;
    uint64_t v14 = *(void *)(v11 + 24);
    char v15 = *(unsigned char *)(v11 + 33);
    unsigned __int8 v16 = *(unsigned char *)(v11 + 32);
    outlined copy of Environment<CGFloat?>.Content(v14, v16, v15);
    *(void *)(v10 + 24) = v14;
    *(unsigned char *)(v10 + 32) = v16;
    *(unsigned char *)(v10 + 33) = v15;
    unint64_t v17 = (v10 + 41) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v18 = (v11 + 41) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v19 = *(void *)v18;
    char v20 = *(unsigned char *)(v18 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v18, v20);
    *(void *)unint64_t v17 = v19;
    *(unsigned char *)(v17 + 8) = v20;
    uint64_t v21 = *(void *)(v18 + 16);
    uint64_t v22 = *(void *)(v18 + 24);
    uint64_t v23 = *(void *)(v18 + 32);
    LOBYTE(v10) = *(unsigned char *)(v18 + 41);
    LOBYTE(v11) = *(unsigned char *)(v18 + 40);
    outlined copy of Environment<KeyboardShortcut?>.Content(v21, v22, v23, v11, v10);
    *(void *)(v17 + 16) = v21;
    *(void *)(v17 + 24) = v22;
    *(void *)(v17 + 32) = v23;
    *(unsigned char *)(v17 + 40) = v11;
    *(unsigned char *)(v17 + 41) = v10;
    uint64_t v24 = *(void *)(v18 + 48);
    LOBYTE(v22) = *(unsigned char *)(v18 + 56);
    outlined copy of Environment<Bool>.Content(v24, v22);
    *(void *)(v17 + 48) = v24;
    *(unsigned char *)(v17 + 56) = v22;
  }
  return v4;
}

uint64_t initializeWithTake for ConditionallyBorderedButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  *(unsigned char *)uint64_t v7 = *(unsigned char *)v8;
  v7 &= 0xFFFFFFFFFFFFFFF8;
  v8 &= 0xFFFFFFFFFFFFFFF8;
  char v9 = *(unsigned char *)(v8 + 16);
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  *(unsigned char *)(v7 + 16) = v9;
  __int16 v10 = *(_WORD *)(v8 + 32);
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  *(_WORD *)(v7 + 32) = v10;
  unint64_t v11 = (_OWORD *)((v7 + 41) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (long long *)((v8 + 41) & 0xFFFFFFFFFFFFFFF8);
  long long v14 = v12[1];
  long long v13 = v12[2];
  long long v15 = *v12;
  *(_OWORD *)((char *)v11 + 41) = *(long long *)((char *)v12 + 41);
  v11[1] = v14;
  _OWORD v11[2] = v13;
  *unint64_t v11 = v15;
  return a1;
}

uint64_t assignWithTake for ConditionallyBorderedButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  unint64_t v7 = v6 + a1;
  unint64_t v8 = v6 + a2;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v7) = *(unsigned char *)((v8 & 0xFFFFFFFFFFFFFFF8) + 16);
  uint64_t v11 = *(void *)(v9 + 8);
  char v12 = *(unsigned char *)(v9 + 16);
  *(void *)(v9 + 8) = *(void *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(unsigned char *)(v9 + 16) = v7;
  outlined consume of Environment<Bool>.Content(v11, v12);
  char v13 = *(unsigned char *)(v10 + 32);
  char v14 = *(unsigned char *)(v10 + 33);
  uint64_t v15 = *(void *)(v9 + 24);
  char v16 = *(unsigned char *)(v9 + 33);
  *(void *)(v9 + 24) = *(void *)(v10 + 24);
  uint64_t v17 = *(unsigned __int8 *)(v9 + 32);
  *(unsigned char *)(v9 + 32) = v13;
  *(unsigned char *)(v9 + 33) = v14;
  outlined consume of Environment<CGFloat?>.Content(v15, v17, v16);
  unint64_t v18 = (v9 + 41) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v10 + 41) & 0xFFFFFFFFFFFFFFF8;
  char v20 = *(unsigned char *)(v19 + 8);
  uint64_t v21 = *(void *)v18;
  char v22 = *(unsigned char *)(v18 + 8);
  *(void *)unint64_t v18 = *(void *)v19;
  *(unsigned char *)(v18 + 8) = v20;
  outlined consume of Environment<Bool>.Content(v21, v22);
  uint64_t v23 = *(void *)(v19 + 32);
  char v24 = *(unsigned char *)(v19 + 40);
  char v25 = *(unsigned char *)(v19 + 41);
  uint64_t v26 = *(void *)(v18 + 16);
  uint64_t v27 = *(void *)(v18 + 24);
  uint64_t v28 = *(void *)(v18 + 32);
  char v29 = *(unsigned char *)(v18 + 41);
  *(_OWORD *)(v18 + 16) = *(_OWORD *)(v19 + 16);
  *(void *)(v18 + 32) = v23;
  uint64_t v30 = *(unsigned __int8 *)(v18 + 40);
  *(unsigned char *)(v18 + 40) = v24;
  *(unsigned char *)(v18 + 41) = v25;
  outlined consume of Environment<KeyboardShortcut?>.Content(v26, v27, v28, v30, v29);
  char v31 = *(unsigned char *)(v19 + 56);
  uint64_t v32 = *(void *)(v18 + 48);
  char v33 = *(unsigned char *)(v18 + 56);
  *(void *)(v18 + 48) = *(void *)(v19 + 48);
  *(unsigned char *)(v18 + 56) = v31;
  outlined consume of Environment<Bool>.Content(v32, v33);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConditionallyBorderedButton(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = (((v6 & 0xFFFFFFFFFFFFFFF8) + 41) & 0xFFFFFFFFFFFFFFF8) + 57;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18775E894);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v15 = 0;
        }
        if ((((v6 & 0xFFFFFFF8) + 41) & 0xFFFFFFF8) == 0xFFFFFFC8) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v17 = *(unsigned __int8 *)(((unint64_t)&a1[v6] & 0xFFFFFFFFFFFFFFF8) + 16);
  if (v17 > 1) {
    return (v17 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for ConditionallyBorderedButton(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = (((v9 & 0xFFFFFFFFFFFFFFF8) + 41) & 0xFFFFFFFFFFFFFFF8) + 57;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_46;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v7 < 0xFE)
            {
              unint64_t v21 = (unint64_t)&a1[v9] & 0xFFFFFFFFFFFFFFF8;
              if (a2 > 0xFE)
              {
                *(unsigned char *)(v21 + 16) = 0;
                *(void *)(v21 + 8) = a2 - 255;
              }
              else
              {
                *(unsigned char *)(v21 + 16) = -(char)a2;
              }
            }
            else
            {
              char v20 = *(void (**)(void))(v6 + 56);
              v20();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = ~v8 + a2;
  unsigned int v17 = (~(_BYTE)v8 + a2);
  if (v10 < 4) {
    int v18 = (v16 >> v11) + 1;
  }
  else {
    int v18 = 1;
  }
  if (v10 >= 4) {
    unsigned int v19 = v16;
  }
  else {
    unsigned int v19 = v17;
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v19;
  }
  else {
    *(_DWORD *)a1 = v19;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v18;
      break;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x18775EAC0);
    case 4:
      *(_DWORD *)&a1[v10] = v18;
      break;
    default:
      return;
  }
}

uint64_t assignWithTake for OpacityButtonHighlightModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of Environment<Bool>.Content(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for OpacityButtonHighlightModifier(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[17]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for OpacityButtonHighlightModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 1;
    }
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ConditionallyBorderedButton<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ShapeStyle.Resolved : ShapeStyle in BorderlessButtonLabelShapeStyle<A>()
{
  return MEMORY[0x1E4F418D8];
}

uint64_t outlined copy of Environment<DismissAction>.Content(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    swift_retain();
  }

  return swift_retain();
}

uint64_t outlined consume of Environment<DismissAction>.Content(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    swift_release();
  }

  return swift_release();
}

uint64_t outlined copy of Environment<EnvironmentValues>.Content(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    swift_retain();
  }

  return swift_retain();
}

uint64_t outlined consume of Environment<EnvironmentValues>.Content(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = swift_release();
  if (a3)
  {
    return swift_release();
  }
  return result;
}

void type metadata accessor for _BackgroundModifier<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>>()
{
  if (!lazy cache variable for type metadata for _BackgroundModifier<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>>)
  {
    type metadata accessor for _ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>();
    lazy protocol witness table accessor for type _BackgroundModifier<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type _ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>> and conformance _ShapeView<A, B>, (void (*)(uint64_t))type metadata accessor for _ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>);
    unint64_t v0 = type metadata accessor for _BackgroundModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundModifier<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>>);
    }
  }
}

void type metadata accessor for _ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>()
{
  if (!lazy cache variable for type metadata for _ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_0(255, &lazy cache variable for type metadata for _OpacityShapeStyle<TintShapeStyle>, MEMORY[0x1E4F3FA30], MEMORY[0x1E4F3FA28], MEMORY[0x1E4F403C0]);
    lazy protocol witness table accessor for type ResolvedBorderShape and conformance ResolvedBorderShape();
    lazy protocol witness table accessor for type _OpacityShapeStyle<TintShapeStyle> and conformance _OpacityShapeStyle<A>();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _OpacityShapeStyle<TintShapeStyle> and conformance _OpacityShapeStyle<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _OpacityShapeStyle<TintShapeStyle> and conformance _OpacityShapeStyle<A>;
  if (!lazy protocol witness table cache variable for type _OpacityShapeStyle<TintShapeStyle> and conformance _OpacityShapeStyle<A>)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_0(255, &lazy cache variable for type metadata for _OpacityShapeStyle<TintShapeStyle>, MEMORY[0x1E4F3FA30], MEMORY[0x1E4F3FA28], MEMORY[0x1E4F403C0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _OpacityShapeStyle<TintShapeStyle> and conformance _OpacityShapeStyle<A>);
  }
  return result;
}

uint64_t outlined consume of Environment<TabSidebarAccessoryViewConfiguration>.Content(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result = swift_release();
  if (a4)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_18775EF5C()
{
  return swift_getWitnessTable();
}

void type metadata accessor for Binding<TabViewCustomization>?(uint64_t a1)
{
}

void type metadata accessor for Binding<TabViewCustomization>(uint64_t a1)
{
}

uint64_t outlined copy of Environment<HeaderFooterConfiguration>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if (a10) {
    swift_retain();
  }

  return swift_retain();
}

uint64_t outlined retain of Environment<HeaderFooterConfiguration>(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 72);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), v4);
  return a1;
}

uint64_t outlined consume of Environment<HeaderFooterConfiguration>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if (a10) {
    swift_release();
  }

  return swift_release();
}

ValueMetadata *type metadata accessor for _WidgetInputs()
{
  return &type metadata for _WidgetInputs;
}

double ContainerRelativeFrameModifier.MakeLayout.value.getter@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  if (*MEMORY[0x1E4F4E7A0] != HIDWORD(a1))
  {
    uint64_t Value = (uint64_t *)AGGraphGetValue();
    uint64_t v4 = *Value;
    uint64_t v5 = Value[1];
    uint64_t v6 = Value[2];
    uint64_t v7 = Value[3];
    double v11 = MEMORY[0x18C114450](Value, v8, v9, v10);
    ContainerRelativeFrameModifier.MakeLayout.resolvedLength(axis:size:)(0, v11, v12);
    *(void *)&long long v16 = v4;
    *((void *)&v16 + 1) = v5;
    *(void *)&long long v17 = v6;
    *((void *)&v17 + 1) = v7;
    double v13 = MEMORY[0x18C114450]();
    ContainerRelativeFrameModifier.MakeLayout.resolvedLength(axis:size:)(1, v13, v14);
  }
  AGGraphGetValue();
  _FrameLayout.init(width:height:alignment:)();
  *a2 = v16;
  a2[1] = v17;
  double result = *(double *)&v18;
  a2[2] = v18;
  return result;
}

double protocol witness for static Rule.initialValue.getter in conformance ContainerRelativeFrameModifier.MakeLayout@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 48) = 1;
  return result;
}

double protocol witness for Rule.value.getter in conformance ContainerRelativeFrameModifier.MakeLayout@<D0>(_OWORD *a1@<X8>)
{
  return ContainerRelativeFrameModifier.MakeLayout.value.getter(*v1, a1);
}

void protocol witness for ViewModifier.body(content:) in conformance ContainerRelativeFrameModifier()
{
}

uint64_t View.containerRelativeFrame(_:count:span:spacing:alignment:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  *(double *)(v16 + 32) = a8;
  v18[0] = a1;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  unint64_t v21 = partial apply for closure #1 in View.containerRelativeFrame(_:count:span:spacing:alignment:);
  uint64_t v22 = v16;
  MEMORY[0x18C113660](v18, a6, &type metadata for ContainerRelativeFrameModifier, a7);
  return swift_release();
}

uint64_t sub_18775F418()
{
  return swift_deallocObject();
}

double partial apply for closure #1 in View.containerRelativeFrame(_:count:span:spacing:alignment:)(double a1)
{
  double v2 = *(double *)(v1 + 32);
  double v3 = (double)*(uint64_t *)(v1 + 16);
  double v4 = a1 - (v3 + -1.0) * v2;
  if (v4 <= 0.0) {
    double v4 = 0.0;
  }
  return v2 * ((double)*(uint64_t *)(v1 + 24) + -1.0) + v4 / v3 * (double)*(uint64_t *)(v1 + 24);
}

uint64_t sub_18775F46C()
{
  return swift_getWitnessTable();
}

uint64_t assignWithTake for ContainerRelativeFrameModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  double v3 = (_OWORD *)(a1 + 24);
  uint64_t v5 = (_OWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (!*(void *)(a1 + 24))
  {
    if (v4)
    {
      uint64_t v7 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = v7;
      return a1;
    }
LABEL_7:
    *double v3 = *v5;
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v6;
  swift_release();
  return a1;
}

_UNKNOWN **base witness table accessor for ViewModifier in ContainerRelativeFrameModifier()
{
  return &protocol witness table for ContainerRelativeFrameModifier;
}

void *type metadata accessor for ContainerRelativeFrameModifier.MakeLayout()
{
  return &unk_1ED458B78;
}

uint64_t DynamicTableRowContent.onDelete(perform:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = a1;
  v5[1] = a2;
  lazy protocol witness table accessor for type OnDeleteTableRowModifier and conformance OnDeleteTableRowModifier();
  return TableRowContent.modifier<A>(_:)((uint64_t)v5, a3, (uint64_t)&type metadata for OnDeleteTableRowModifier);
}

unint64_t lazy protocol witness table accessor for type OnDeleteTableRowModifier and conformance OnDeleteTableRowModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type OnDeleteTableRowModifier and conformance OnDeleteTableRowModifier;
  if (!lazy protocol witness table cache variable for type OnDeleteTableRowModifier and conformance OnDeleteTableRowModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnDeleteTableRowModifier and conformance OnDeleteTableRowModifier);
  }
  return result;
}

uint64_t OnDeleteTableRowModifier.body.getter@<X0>(uint64_t (**a1)()@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  if (*v1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ();
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)())v5;

  return outlined copy of AppIntentExecutor?(v3);
}

uint64_t sub_18775F6A8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t protocol witness for _TableRowContentModifier.body.getter in conformance OnDeleteTableRowModifier@<X0>(uint64_t (**a1)()@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  if (*v1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ()partial apply;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)())v5;

  return outlined copy of AppIntentExecutor?(v3);
}

uint64_t TableRowContent.deleteDisabled(_:)(char a1, uint64_t a2)
{
  char v4 = a1;
  lazy protocol witness table accessor for type DeleteDisabledTableRowModifier and conformance DeleteDisabledTableRowModifier();
  return TableRowContent.modifier<A>(_:)((uint64_t)&v4, a2, (uint64_t)&type metadata for DeleteDisabledTableRowModifier);
}

unint64_t lazy protocol witness table accessor for type DeleteDisabledTableRowModifier and conformance DeleteDisabledTableRowModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type DeleteDisabledTableRowModifier and conformance DeleteDisabledTableRowModifier;
  if (!lazy protocol witness table cache variable for type DeleteDisabledTableRowModifier and conformance DeleteDisabledTableRowModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeleteDisabledTableRowModifier and conformance DeleteDisabledTableRowModifier);
  }
  return result;
}

void DeleteDisabledTableRowModifier.body.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t associated type witness table accessor for _TableRowContentModifier.Body : _TableRowContentModifier in OnDeleteTableRowModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for _TableRowContentModifier.Body : _TableRowContentModifier in DeleteDisabledTableRowModifier()
{
  return swift_getOpaqueTypeConformance2();
}

void *assignWithCopy for OnDeleteTableRowModifier(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (!*a1)
  {
    if (v4)
    {
      uint64_t v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for OnDeleteTableRowModifier(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (!*a1)
  {
    if (v4)
    {
      uint64_t v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for OnDeleteTableRowModifier(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for OnDeleteTableRowModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OnDeleteTableRowModifier()
{
  return &type metadata for OnDeleteTableRowModifier;
}

unsigned char *storeEnumTagSinglePayload for DeleteDisabledTableRowModifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18775FAC4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeleteDisabledTableRowModifier()
{
  return &type metadata for DeleteDisabledTableRowModifier;
}

_UNKNOWN **sub_18775FAFC()
{
  return &protocol witness table for _TraitWritingTableRowModifier<A>;
}

uint64_t sub_18775FB08()
{
  return swift_getWitnessTable();
}

_UNKNOWN **sub_18775FB6C()
{
  return &protocol witness table for _TraitWritingTableRowModifier<A>;
}

uint64_t View.navigationDestinations<A>(_:)(void (*a1)(double), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = a5;
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for NavigationDestinationsModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  int v15 = (char *)&v17 - v14;
  a1(v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a4);
  MEMORY[0x18C113660](v15, a3, v11, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t type metadata accessor for NavigationDestinationsModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t View.navigationDestination<A, B>(presenting:destination:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return View.navigationDestination<A, B>(for:destination:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t View.navigationDestination<A>(isPresented:destination:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v24 = a7;
  uint64_t v22 = a8;
  uint64_t v23 = a5;
  int v21 = a3;
  MEMORY[0x1F4188790](a1);
  double v13 = &v20[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = type metadata accessor for ViewDestinationNavigationDestinationModifier();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = &v20[-v16];
  swift_retain();
  uint64_t v18 = swift_retain();
  a4(v18);
  ViewDestinationNavigationDestinationModifier.init(isPresented:destination:)(a1, a2, v21, (uint64_t)v13, a6, (uint64_t)v17);
  MEMORY[0x18C113660](v17, v23, v14, v24);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t View.navigationDestination<A, B>(item:destination:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v29 = a7;
  uint64_t v27 = a9;
  uint64_t v28 = a4;
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v24 = a1;
  type metadata accessor for Optional();
  uint64_t v13 = type metadata accessor for Binding();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v23 - v15;
  uint64_t v30 = a5;
  uint64_t v31 = a6;
  uint64_t v32 = a8;
  uint64_t v33 = a10;
  uint64_t v17 = type metadata accessor for ItemBoundNavigationDestinationModifier();
  uint64_t v18 = *(void *)(v17 - 8);
  double v19 = MEMORY[0x1F4188790](v17);
  int v21 = (char *)&v23 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v16, v24, v13, v19);
  ItemBoundNavigationDestinationModifier.init(item:destination:)((uint64_t)v16, v25, v26, (uint64_t)v21);
  swift_retain();
  MEMORY[0x18C113660](v21, v28, v17, v29);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v21, v17);
}

void protocol witness for static StatefulRule.initialValue.getter in conformance NavigationDestinationModifier<A, B>.MakeSeededResolver(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
}

uint64_t sub_1877600B0()
{
  return swift_getWitnessTable();
}

uint64_t sub_187760120()
{
  return swift_getWitnessTable();
}

uint64_t sub_1877601A0()
{
  return swift_getWitnessTable();
}

uint64_t sub_187760234()
{
  return swift_getWitnessTable();
}

uint64_t sub_1877602D8()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for NavigationDestinationsModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for NavigationDestinationsModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1877606B0);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in NavigationDestinationsModifier<A>()
{
  return &protocol witness table for NavigationDestinationsModifier<A>;
}

void protocol witness for ViewModifier.body(content:) in conformance NavigationDestinationScopeModifier()
{
}

uint64_t protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance NavigationDestinationScopeModifier()
{
  return PreferencesInputs.remove<A>(_:)();
}

uint64_t static NavigationDestinationsModifier._makeView(modifier:inputs:body:)@<X0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  int v7 = *((_DWORD *)a1 + 2);
  uint64_t v8 = a1[2];
  uint64_t v10 = a1[5];
  uint64_t v9 = a1[6];
  int v11 = *((_DWORD *)a1 + 20);
  uint64_t v58 = *a1;
  int v59 = v7;
  long long v61 = *(_OWORD *)(a1 + 3);
  uint64_t v60 = v8;
  uint64_t v62 = v10;
  uint64_t v63 = v9;
  long long v64 = *(_OWORD *)(a1 + 7);
  unint64_t v65 = a1[9];
  int v66 = v11;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.add(_:)();
  PreferencesOutputs.init()();
  uint64_t v56 = v47;
  int v57 = v48;
  uint64_t v38 = a4;
  uint64_t v12 = a3;
  type metadata accessor for NavigationDestinationsModifier();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  uint64_t v13 = v58;
  uint64_t v14 = v60;
  unsigned int v35 = v61;
  int v36 = v59;
  unsigned int v33 = DWORD2(v61);
  unsigned int v34 = DWORD1(v61);
  uint64_t v15 = v63;
  LODWORD(a3) = v64;
  unsigned int v16 = DWORD1(v64);
  unsigned int v17 = DWORD2(v64);
  unsigned int v18 = HIDWORD(v64);
  unsigned int v31 = v65;
  unsigned int v32 = HIDWORD(v61);
  unsigned int v30 = HIDWORD(v65);
  int v37 = v66;
  uint64_t v47 = v58;
  int v48 = v59;
  uint64_t v49 = v60;
  long long v50 = v61;
  uint64_t v51 = v10;
  uint64_t v52 = v63;
  long long v53 = v64;
  unint64_t v54 = v65;
  int v55 = v66;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t *, uint64_t))(v38 + 32))(&v41, &v47, &v56, v12);
  uint64_t v47 = v13;
  int v48 = v36;
  uint64_t v49 = v14;
  *(void *)&long long v50 = __PAIR64__(v34, v35);
  *((void *)&v50 + 1) = __PAIR64__(v32, v33);
  uint64_t v51 = v10;
  uint64_t v52 = v15;
  *(void *)&long long v53 = __PAIR64__(v16, a3);
  *((void *)&v53 + 1) = __PAIR64__(v18, v17);
  unint64_t v54 = __PAIR64__(v30, v31);
  int v55 = v37;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v19 = swift_bridgeObjectRetain();
  a2(&v44, v19, &v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>();
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_18834BB70;
  int v21 = v45;
  *(void *)(v20 + 32) = v44;
  *(_DWORD *)(v20 + 40) = v21;
  int v22 = v57;
  *(void *)(v20 + 48) = v56;
  *(_DWORD *)(v20 + 56) = v22;
  swift_bridgeObjectRetain();
  PreferencesOutputs.init()();
  uint64_t v41 = v20;
  uint64_t v42 = v47;
  int v43 = v48;
  uint64_t v40 = 0;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    while (1)
    {
      uint64_t v23 = (void (*)(uint64_t *, void))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      v23(&v47, 0);
      uint64_t v24 = v40;
      uint64_t v47 = v15;
      swift_bridgeObjectRetain();
      uint64_t result = PreferenceKeys.endIndex.getter();
      if (v40 < 0 || v40 >= result) {
        break;
      }
      ++v40;
      swift_bridgeObjectRelease();
      static PreferenceKey.visitKey<A>(_:)();
      if (v24 + 1 == PreferenceKeys.endIndex.getter()) {
        goto LABEL_6;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_6:
    swift_bridgeObjectRelease();
    uint64_t v26 = v42;
    int v27 = v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    int v28 = v46;
    *(void *)a5 = v26;
    *(_DWORD *)(a5 + 8) = v27;
    *(_DWORD *)(a5 + 12) = v28;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #1 in static NavigationDestinationsModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  v7[2] = type metadata accessor for NavigationDestinationsModifier();
  v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance NavigationDestinationsModifier<A>@<X0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  return static NavigationDestinationsModifier._makeView(modifier:inputs:body:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance NavigationDestinationsModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3F8](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t partial apply for closure #1 in static NavigationDestinationsModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in static NavigationDestinationsModifier._makeView(modifier:inputs:body:)(a1, *(void *)(v1 + 16));
}

void type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<PreferencesOutputs>)
  {
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PreferencesOutputs>);
    }
  }
}

uint64_t assignWithCopy for NavigationDestinationModifier.MakeSeededResolver(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for NavigationDestinationModifier.MakeSeededResolver(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationDestinationModifier.MakeSeededResolver(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 20)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationDestinationModifier.MakeSeededResolver(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 20) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 20) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t assignWithTake for NavigationDestinationModifier.SeededResolver(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t sub_187760EDC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187760F14()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t View.writingToolsBehavior(_:)()
{
  return swift_release();
}

uint64_t EnvironmentValues.writingToolsBehavior.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.writingToolsBehavior : EnvironmentValues, serialized(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t sub_187761230()
{
  return EnvironmentValues.writingToolsBehavior.setter();
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>);
    }
  }
}

uint64_t EnvironmentValues.writingToolsBehavior.setter()
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void static WritingToolsBehavior.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static WritingToolsBehavior.complete.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static WritingToolsBehavior.limited.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

void static WritingToolsBehavior.disabled.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void WritingToolsBehavior.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static WritingToolsBehavior.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int WritingToolsBehavior.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.__Key_writingToolsBehavior(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.__Key_writingToolsBehavior(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized static EnvironmentKey<>._valuesEqual(_:_:)(*a1, *a2);
}

uint64_t key path getter for EnvironmentValues.writingToolsBehavior : EnvironmentValues@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t (*EnvironmentValues.writingToolsBehavior.modify(void *a1))(uint64_t *a1)
{
  *a1 = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.writingToolsBehavior.modify;
}

uint64_t EnvironmentValues.writingToolsBehavior.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *((unsigned char *)a1 + 9) = *((unsigned char *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }

  return swift_release();
}

unint64_t lazy protocol witness table accessor for type WritingToolsBehavior and conformance WritingToolsBehavior()
{
  unint64_t result = lazy protocol witness table cache variable for type WritingToolsBehavior and conformance WritingToolsBehavior;
  if (!lazy protocol witness table cache variable for type WritingToolsBehavior and conformance WritingToolsBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WritingToolsBehavior and conformance WritingToolsBehavior);
  }
  return result;
}

uint64_t sub_187761884()
{
  return EnvironmentValues.writingToolsBehavior.setter();
}

ValueMetadata *type metadata accessor for WritingToolsBehavior()
{
  return &type metadata for WritingToolsBehavior;
}

uint64_t sub_1877618D0()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<WritingToolsBehavior?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<WritingToolsBehavior?>)
  {
    type metadata accessor for WritingToolsBehavior?();
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<WritingToolsBehavior?>);
    }
  }
}

void type metadata accessor for WritingToolsBehavior?()
{
  if (!lazy cache variable for type metadata for WritingToolsBehavior?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WritingToolsBehavior?);
    }
  }
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for WritingToolsBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187761B30);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WritingToolsBehavior.Value()
{
  return &type metadata for WritingToolsBehavior.Value;
}

ValueMetadata *type metadata accessor for EnvironmentValues.__Key_writingToolsBehavior()
{
  return &type metadata for EnvironmentValues.__Key_writingToolsBehavior;
}

unint64_t lazy protocol witness table accessor for type WritingToolsBehavior.Value and conformance WritingToolsBehavior.Value()
{
  unint64_t result = lazy protocol witness table cache variable for type WritingToolsBehavior.Value and conformance WritingToolsBehavior.Value;
  if (!lazy protocol witness table cache variable for type WritingToolsBehavior.Value and conformance WritingToolsBehavior.Value)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WritingToolsBehavior.Value and conformance WritingToolsBehavior.Value);
  }
  return result;
}

uint64_t type metadata completion function for MulticolumnSplitViewRepresentable.Coordinator()
{
  return swift_initClassMetadata2();
}

uint64_t static MulticolumnSplitView._makeView(view:inputs:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a2;
  int v9 = *((_DWORD *)a2 + 2);
  uint64_t v10 = a2[2];
  unsigned int v11 = *((_DWORD *)a2 + 6);
  unsigned int v12 = *((_DWORD *)a2 + 7);
  unsigned int v13 = *((_DWORD *)a2 + 8);
  uint64_t v15 = a2[5];
  uint64_t v14 = a2[6];
  unsigned int v25 = *((_DWORD *)a2 + 14);
  unsigned int v26 = *((_DWORD *)a2 + 9);
  unsigned int v23 = *((_DWORD *)a2 + 16);
  unsigned int v24 = *((_DWORD *)a2 + 15);
  unsigned int v21 = *((_DWORD *)a2 + 18);
  unsigned int v22 = *((_DWORD *)a2 + 17);
  int v19 = *((_DWORD *)a2 + 20);
  unsigned int v20 = *((_DWORD *)a2 + 19);
  int v49 = HIDWORD(a4);
  type metadata accessor for MulticolumnSplitView();
  type metadata accessor for _GraphValue();
  int v33 = _GraphValue.value.getter();
  uint64_t v47 = v8;
  uint64_t v50 = v10;
  int v48 = v9;
  *(void *)&long long v51 = __PAIR64__(v12, v11);
  uint64_t v52 = v15;
  uint64_t v53 = v14;
  *((void *)&v51 + 1) = __PAIR64__(v26, v13);
  *(void *)&long long v54 = __PAIR64__(v24, v25);
  *((void *)&v54 + 1) = __PAIR64__(v22, v23);
  unint64_t v55 = __PAIR64__(v20, v21);
  int v56 = v19;
  uint64_t v43 = v14;
  *(void *)&long long v44 = __PAIR64__(v24, v25);
  *((void *)&v44 + 1) = __PAIR64__(v22, v23);
  unint64_t v45 = __PAIR64__(v20, v21);
  int v46 = v19;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v34 = _ViewInputs.environment.getter();
  uint64_t v38 = a3;
  uint64_t v39 = a4;
  uint64_t v40 = a5;
  *(void *)&long long v41 = a6;
  *((void *)&v41 + 1) = a7;
  uint64_t v42 = a8;
  uint64_t v36 = type metadata accessor for MulticolumnSplitView.EnvironmentTransform();
  uint64_t WitnessTable = swift_getWitnessTable();
  _sypSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<EnvironmentValues>, MEMORY[0x1E4F40140], MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v34, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v35, v36, MEMORY[0x1E4FBC248], v16, MEMORY[0x1E4FBC278], v17);
  _ViewInputs.environment.setter();
  uint64_t v38 = a3;
  uint64_t v39 = a4;
  uint64_t v40 = a5;
  *(void *)&long long v41 = a6;
  *((void *)&v41 + 1) = a7;
  uint64_t v42 = a8;
  type metadata accessor for MulticolumnSplitView.Container();
  int v34 = v33;
  uint64_t v38 = a3;
  uint64_t v39 = a4;
  uint64_t v40 = a5;
  *(void *)&long long v41 = a6;
  *((void *)&v41 + 1) = a7;
  uint64_t v42 = a8;
  type metadata accessor for MulticolumnSplitView.Child();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  uint64_t v38 = v47;
  LODWORD(v39) = v48;
  uint64_t v40 = v50;
  long long v41 = v51;
  uint64_t v42 = v52;
  uint64_t v43 = v53;
  long long v44 = v54;
  unint64_t v45 = v55;
  int v46 = v56;
  swift_getWitnessTable();
  static View.makeDebuggableView(view:inputs:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t MulticolumnSplitView.Child.multicolumnSplitView.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for MulticolumnSplitView();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t MulticolumnSplitView.Child.value.getter@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  v23[1] = a1;
  uint64_t v24 = a8;
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  uint64_t v30 = a7;
  uint64_t v14 = type metadata accessor for MulticolumnSplitView.Configuration();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)v23 - v16;
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  uint64_t v30 = a7;
  uint64_t v18 = type metadata accessor for MulticolumnSplitView();
  MEMORY[0x1F4188790](v18 - 8);
  unsigned int v20 = (char *)v23 - v19;
  MulticolumnSplitView.Child.multicolumnSplitView.getter((uint64_t)v23 - v19);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v20, v14);
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  uint64_t v30 = a7;
  uint64_t v21 = type metadata accessor for MulticolumnSplitView.Configuration();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v24, v17, v21);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance MulticolumnSplitView<A, B, C>.Child@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for MulticolumnSplitView.Container();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance MulticolumnSplitView<A, B, C>.Child@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return MulticolumnSplitView.Child.value.getter(*v2, a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a2);
}

uint64_t MulticolumnSplitView.EnvironmentTransform.value.getter@<X0>(void *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v5 = *Value;
  uint64_t v6 = Value[1];
  swift_retain();
  swift_retain();
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  EnvironmentValues.horizontalSizeClass.getter();
  swift_release();
  swift_release();
  type metadata accessor for StyleContextSplitViewNavigationController<NoStyleContext>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>, (uint64_t)&type metadata for ExpandedSplitViewKey, (uint64_t)&protocol witness table for ExpandedSplitViewKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v6)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
    uint64_t result = swift_release();
    uint64_t v4 = v6;
  }
  else
  {
    uint64_t result = swift_release();
    uint64_t v4 = 0;
  }
  *a1 = v5;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance MulticolumnSplitView<A, B, C>.EnvironmentTransform@<X0>(void *a1@<X8>)
{
  return MulticolumnSplitView.EnvironmentTransform.value.getter(a1);
}

uint64_t MulticolumnSplitView.Container.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[6];
  uint64_t v6 = a1[7];
  uint64_t v37 = a1[2];
  uint64_t v38 = v2;
  uint64_t v30 = v2;
  uint64_t v31 = v37;
  uint64_t v7 = v2;
  uint64_t v39 = v3;
  uint64_t v40 = v4;
  uint64_t v8 = v3;
  v28[1] = v4;
  uint64_t v29 = v3;
  uint64_t v9 = v4;
  uint64_t v41 = v5;
  uint64_t v42 = v6;
  uint64_t v10 = v5;
  v28[0] = v5;
  uint64_t v32 = type metadata accessor for MulticolumnSplitView.Configuration();
  uint64_t v11 = *(void *)(v32 - 8);
  MEMORY[0x1F4188790](v32);
  unsigned int v13 = (char *)v28 - v12;
  uint64_t v38 = v7;
  uint64_t v39 = v8;
  uint64_t v40 = v9;
  uint64_t v41 = v10;
  uint64_t v42 = v6;
  uint64_t v14 = type metadata accessor for MulticolumnSplitViewRepresentable();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)v28 - v16;
  uint64_t v18 = type metadata accessor for ModifiedContent();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v23 = MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)v28 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v13, v33, v32, v23);
  MulticolumnSplitViewRepresentable.init(configuration:)((uint64_t)v13, v31, v30, v29, (uint64_t)v17);
  static Edge.Set.all.getter();
  View.ignoresSafeArea(_:edges:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  unsigned int v35 = &protocol witness table for MulticolumnSplitViewRepresentable<A, B, C>;
  uint64_t v36 = MEMORY[0x1E4F41200];
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v21);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v19 + 8);
  v26(v21, v18);
  static ViewBuilder.buildExpression<A>(_:)(v25);
  return ((uint64_t (*)(char *, uint64_t))v26)(v25, v18);
}

uint64_t MulticolumnSplitViewRepresentable.init(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for MulticolumnSplitViewRepresentable();
  uint64_t v11 = a5 + *(int *)(v10 + 68);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(v11, 1, 1, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a5, a1, a2);
  uint64_t v12 = type metadata accessor for MulticolumnSplitView.Configuration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v10 + 72), a1 + *(int *)(v12 + 72), a4);
  uint64_t v13 = a1 + *(int *)(v12 + 68);
  uint64_t v14 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v11, v13, v14);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance MulticolumnSplitView<A, B, C>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return static MulticolumnSplitView._makeView(view:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7]);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance MulticolumnSplitView<A, B, C>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance MulticolumnSplitView<A, B, C>()
{
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance MulticolumnSplitView<A, B, C>()
{
}

BOOL MulticolumnSplitViewRepresentable.hasSupplementary.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)&v11 - v7, v1 + *(int *)(a1 + 68), v4, v6);
  BOOL v9 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v8, 1, v3) != 1;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v9;
}

uint64_t MulticolumnSplitViewRepresentable.supplementary.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 - 8);
  double v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v15, v3, a1, v13);
  BOOL v16 = MulticolumnSplitViewRepresentable.hasSupplementary.getter(a1);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v15, a1);
  if (v16)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v3 + *(int *)(a1 + 68), v7);
    uint64_t v18 = *(void *)(v6 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v10, 1, v6);
    if (result != 1) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 32))(a2, v10, v6);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id MulticolumnSplitViewRepresentable.makeUIViewController(context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v27 = *(void *)(a2 + 24);
  uint64_t v26 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v25 = (uint64_t)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v6;
  unint64_t v8 = v6[1];
  uint64_t v10 = v6[2];
  uint64_t v9 = v6[3];
  if (MulticolumnSplitViewRepresentable.hasSupplementary.getter(v11)) {
    uint64_t v12 = 2;
  }
  else {
    uint64_t v12 = 1;
  }
  id v13 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for NotifyingMulticolumnSplitViewController()), sel_initWithStyle_, v12);
  objc_msgSend(v13, sel_setDelegate_, v7);
  MulticolumnSplitViewRepresentable.Coordinator.addSecondaryView(_:)(v3 + *(int *)(a2 + 72));
  type metadata accessor for StyleContextSplitViewNavigationController<NoStyleContext>(0, &lazy cache variable for type metadata for StyleContextSplitViewNavigationController<SidebarStyleContext>, MEMORY[0x1E4F404D0], MEMORY[0x1E4F404C8], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for StyleContextSplitViewNavigationController);
  v28[0] = v10;
  v28[1] = v9;
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t v15 = *(void *)(a2 + 40);
  id v16 = v13;
  swift_retain();
  swift_retain();
  swift_retain();
  id v17 = specialized StyleContextSplitViewNavigationController.__allocating_init<A>(rootView:wantsTransparentBackground:environment:transaction:)(v3, 0, v28, v8, v14, v15);
  if (objc_msgSend(v16, sel_style)) {
    objc_msgSend(v16, sel_setViewController_forColumn_, v17, 0);
  }

  objc_msgSend(v16, sel_setPrimaryBackgroundStyle_, 1);
  id v18 = objc_retain(*(id *)(v7
                          + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.secondaryController));
  id v19 = v16;
  if (objc_msgSend(v19, sel_style)) {
    objc_msgSend(v19, sel_setViewController_forColumn_, v18, 2);
  }

  if (MulticolumnSplitViewRepresentable.hasSupplementary.getter(a2))
  {
    uint64_t v20 = v25;
    MulticolumnSplitViewRepresentable.supplementary.getter(a2, v25);
    MulticolumnSplitViewRepresentable.Coordinator.addSupplementaryView(_:)(v20);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v20, v27);
    id v21 = objc_retain(*(id *)(v7
                            + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.supplementaryController));
    id v22 = v19;
    if (objc_msgSend(v22, sel_style)) {
      objc_msgSend(v22, sel_setViewController_forColumn_, v21, 1);
    }
  }
  return v19;
}

void MulticolumnSplitViewRepresentable.updateUIViewController(_:context:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  double v9 = MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  uint64_t v15 = v12[2];
  uint64_t v16 = v12[3];
  if (!objc_msgSend(v17, sel_style, v9))
  {
    __break(1u);
    goto LABEL_11;
  }
  id v30 = objc_msgSend(a1, sel_viewControllerForColumn_, 0);
  if (!v30)
  {
LABEL_12:
    __break(1u);
    return;
  }
  uint64_t v28 = v7;
  uint64_t v29 = v14;
  uint64_t v26 = v11;
  uint64_t v27 = v8;
  self;
  if (!swift_dynamicCastObjCClass()
    || (type metadata accessor for SplitViewNavigationController(), (id v18 = (void *)swift_dynamicCastClass()) == 0))
  {
LABEL_11:

    goto LABEL_12;
  }
  *(void *)&long long v31 = v15;
  *((void *)&v31 + 1) = v16;
  id v19 = *(void (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v18) + 0x190);
  uint64_t v20 = *(void *)(a3 + 16);
  uint64_t v21 = *(void *)(a3 + 40);
  swift_retain();
  swift_retain();
  v19(v4, &v31, v13, v20, v21);
  swift_release();
  swift_release();
  uint64_t v22 = v4 + *(int *)(a3 + 72);
  *(void *)&long long v31 = v15;
  *((void *)&v31 + 1) = v16;
  swift_retain();
  swift_retain();
  specialized MulticolumnSplitViewRepresentable.Coordinator.updateSecondaryPlaceholder(_:for:environment:transaction:)(v22, &v31, v13);
  swift_release();
  swift_release();
  if (MulticolumnSplitViewRepresentable.hasSupplementary.getter(a3))
  {
    uint64_t v23 = (uint64_t)v26;
    MulticolumnSplitViewRepresentable.supplementary.getter(a3, (uint64_t)v26);
    *(void *)&long long v31 = v15;
    *((void *)&v31 + 1) = v16;
    swift_retain();
    swift_retain();
    specialized MulticolumnSplitViewRepresentable.Coordinator.updateSupplementaryPlaceholder(_:for:environment:transaction:)(v23, &v31, v13);
    swift_release();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v23, v28);
  }
  else
  {
    id v24 = v30;
  }
}

void MulticolumnSplitViewRepresentable.Coordinator.secondaryController.setter(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.secondaryController);
  *(void *)(v1 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.secondaryController) = a1;
}

void MulticolumnSplitViewRepresentable.Coordinator.supplementaryController.setter(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.supplementaryController);
  *(void *)(v1 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.supplementaryController) = a1;
}

uint64_t MulticolumnSplitViewRepresentable.Coordinator.secondaryPlaceholderHost.getter()
{
  return *(void *)(v0 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.secondaryPlaceholderHost);
}

uint64_t MulticolumnSplitViewRepresentable.Coordinator.secondaryPlaceholderHost.setter(uint64_t result)
{
  *(void *)(v1 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.secondaryPlaceholderHost) = result;
  return result;
}

uint64_t MulticolumnSplitViewRepresentable.Coordinator.supplementaryPlaceholderHost.getter()
{
  return *(void *)(v0
                   + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.supplementaryPlaceholderHost);
}

uint64_t MulticolumnSplitViewRepresentable.Coordinator.supplementaryPlaceholderHost.setter(uint64_t result)
{
  *(void *)(v1 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.supplementaryPlaceholderHost) = result;
  return result;
}

void MulticolumnSplitViewRepresentable.Coordinator.addSecondaryView(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *MEMORY[0x1E4FBC8C8] & *v2;
  type metadata accessor for StyleContextSplitViewNavigationController<NoStyleContext>(0, &lazy cache variable for type metadata for StyleContextSplitViewNavigationController<NoStyleContext>, MEMORY[0x1E4F3F9B0], MEMORY[0x1E4F3F9A8], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for StyleContextSplitViewNavigationController);
  long long v10 = xmmword_18834FC50;
  id v5 = specialized StyleContextSplitViewNavigationController.__allocating_init<A>(rootView:wantsTransparentBackground:environment:transaction:)(a1, 0, (uint64_t *)&v10, 1uLL, *(void *)(v4 + 96), *(void *)(v4 + 120));
  uint64_t v6 = *(void **)((char *)v2 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.secondaryController);
  *(void *)((char *)v2 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.secondaryController) = v5;

  uint64_t v7 = *(void **)((char *)v2 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.secondaryController);
  if (v7)
  {
    id v8 = objc_msgSend(v7, sel_topViewController);
    if (v8)
    {
      id v9 = v8;

      *(void *)((char *)v2
                + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.secondaryPlaceholderHost) = v9;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void MulticolumnSplitViewRepresentable.Coordinator.addSupplementaryView(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *MEMORY[0x1E4FBC8C8] & *v2;
  type metadata accessor for StyleContextSplitViewNavigationController<NoStyleContext>(0, &lazy cache variable for type metadata for StyleContextSplitViewNavigationController<ContentListStyleContext>, MEMORY[0x1E4F40C28], MEMORY[0x1E4F40C20], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for StyleContextSplitViewNavigationController);
  long long v10 = xmmword_18834FC50;
  id v5 = specialized StyleContextSplitViewNavigationController.__allocating_init<A>(rootView:wantsTransparentBackground:environment:transaction:)(a1, 0, (uint64_t *)&v10, 1uLL, *(void *)(v4 + 88), *(void *)(v4 + 112));
  uint64_t v6 = *(void **)((char *)v2
                + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.supplementaryController);
  *(void *)((char *)v2 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.supplementaryController) = v5;

  uint64_t v7 = *(void **)((char *)v2
                + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.supplementaryController);
  if (v7)
  {
    id v8 = objc_msgSend(v7, sel_topViewController);
    if (v8)
    {
      id v9 = v8;

      *(void *)((char *)v2
                + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.supplementaryPlaceholderHost) = v9;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

UISplitViewControllerColumn __swiftcall MulticolumnSplitViewRepresentable.Coordinator.splitViewController(_:topColumnForCollapsingToProposedTopColumn:)(UISplitViewController *_, UISplitViewControllerColumn topColumnForCollapsingToProposedTopColumn)
{
  if ([(UISplitViewController *)_ style])
  {
    id v5 = [(UISplitViewController *)_ viewControllerForColumn:topColumnForCollapsingToProposedTopColumn];
    if (v5)
    {
      uint64_t v6 = v5;
      self;
      uint64_t v7 = (void *)swift_dynamicCastObjCClass();
      if (v7 && (id v8 = objc_msgSend(v7, sel_topViewController)) != 0)
      {
        id v9 = v8;

        id v10 = *(id *)(v2 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.secondaryPlaceholderHost);
        if (v10 && v9 == v10) {
          return (unint64_t)(*(void *)(v2
        }
                                              + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.supplementaryController) != 0);
      }
      else
      {
      }
    }
  }
  return topColumnForCollapsingToProposedTopColumn;
}

UISplitViewControllerColumn @objc MulticolumnSplitViewRepresentable.Coordinator.splitViewController(_:topColumnForCollapsingToProposedTopColumn:)(void *a1, uint64_t a2, void *a3, UISplitViewControllerColumn a4)
{
  uint64_t v6 = a3;
  id v7 = a1;
  UISplitViewControllerColumn v8 = MulticolumnSplitViewRepresentable.Coordinator.splitViewController(_:topColumnForCollapsingToProposedTopColumn:)(v6, a4);

  return v8;
}

uint64_t @objc MulticolumnSplitViewRepresentable.Coordinator.splitViewController(_:displayModeForExpandingToProposedDisplayMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

id MulticolumnSplitViewRepresentable.Coordinator.init()()
{
  uint64_t v1 = (_OWORD *)(*MEMORY[0x1E4FBC8C8] & *v0);
  *(void *)((char *)v0 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.secondaryController) = 0;
  *(void *)((char *)v0 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.supplementaryController) = 0;
  *(void *)((char *)v0 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.secondaryPlaceholderHost) = 0;
  *(void *)((char *)v0
            + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.supplementaryPlaceholderHost) = 0;
  long long v3 = v1[5];
  long long v4 = v1[6];
  long long v5 = v1[7];
  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for MulticolumnSplitViewRepresentable.Coordinator();
  return objc_msgSendSuper2(&v6, sel_init, v3, v4, v5);
}

id @objc MulticolumnSplitViewRepresentable.Coordinator.init()()
{
  return MulticolumnSplitViewRepresentable.Coordinator.init()();
}

void MulticolumnSplitViewRepresentable.Coordinator.__ivar_destroyer()
{
  uint64_t v1 = *(void **)(v0 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.supplementaryController);
}

id MulticolumnSplitViewRepresentable.Coordinator.__deallocating_deinit()
{
  long long v2 = *(_OWORD *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x50);
  long long v3 = *(_OWORD *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60);
  long long v4 = *(_OWORD *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70);
  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for MulticolumnSplitViewRepresentable.Coordinator();
  return objc_msgSendSuper2(&v5, sel_dealloc, v2, v3, v4);
}

void @objc MulticolumnSplitViewRepresentable.Coordinator.__ivar_destroyer(uint64_t a1)
{
  long long v2 = *(void **)(a1 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.supplementaryController);
}

uint64_t type metadata accessor for MulticolumnSplitViewRepresentable.Coordinator()
{
  return swift_getGenericMetadata();
}

id protocol witness for UIViewControllerRepresentable.makeCoordinator() in conformance MulticolumnSplitViewRepresentable<A, B, C>@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  id result = specialized MulticolumnSplitViewRepresentable.makeCoordinator()(a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
  *a2 = result;
  return result;
}

uint64_t one-time initialization function for willShowDetailNotification()
{
  uint64_t result = MEMORY[0x18C115780](0xD00000000000002FLL, 0x8000000188328A30);
  static ColumnNavigationViewStyle.willShowDetailNotification = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = MEMORY[0x18C115780](0xD00000000000002FLL, 0x8000000188328A30);
  static DoubleColumnNavigationViewStyle.willShowDetailNotification = result;
  return result;
}

id @objc UISplitViewController.makeDetailNavigationController(root:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitNavigationController()), sel_initWithRootViewController_, a3);

  return v3;
}

uint64_t NotifyingMulticolumnSplitViewController.showDetailViewController(_:sender:)(void *a1, uint64_t a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v6 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for willShowDetailNotification != -1) {
    swift_once();
  }
  uint64_t v7 = static ColumnNavigationViewStyle.willShowDetailNotification;
  type metadata accessor for _ContiguousArrayStorage<(AnyHashable, Any)>();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18834BB80;
  v21[0] = 0xD000000000000017;
  v21[1] = 0x8000000188328A10;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 96) = type metadata accessor for UIViewController();
  *(void *)(inited + 72) = a1;
  id v9 = a1;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v6, sel_postNotificationName_object_userInfo_, v7, v2, isa);

  outlined init with copy of Any?(a2, (uint64_t)v21);
  uint64_t v11 = v22;
  if (v22)
  {
    uint64_t v12 = __swift_project_boxed_opaque_existential_1(v21, v22);
    uint64_t v13 = *(void *)(v11 - 8);
    double v14 = MEMORY[0x1F4188790](v12);
    uint64_t v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v13 + 16))(v16, v14);
    uint64_t v17 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  else
  {
    uint64_t v17 = 0;
  }
  v20.receiver = v2;
  v20.super_class = ObjectType;
  objc_msgSendSuper2(&v20, sel_showDetailViewController_sender_, v9, v17);
  return swift_unknownObjectRelease();
}

void NotifyingMulticolumnSplitViewController.childForStatusBarHidden.getter()
{
  if (!objc_msgSend(v0, sel_isCollapsed))
  {
    id v5 = objc_msgSend(v0, sel_viewControllerForColumn_, 2);
    id v6 = objc_msgSend(v5, sel_childViewControllerForStatusBarHidden);
    goto LABEL_11;
  }
  id v1 = objc_msgSend(v0, sel_viewControllers);
  type metadata accessor for UIViewController();
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    id v3 = (void *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v3) {
      goto LABEL_4;
    }
  }
  else
  {
    id v3 = *(void **)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3)
    {
LABEL_4:
      if ((v2 & 0xC000000000000001) != 0)
      {
        id v4 = (id)MEMORY[0x18C117680](0, v2);
      }
      else
      {
        if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        id v4 = *(id *)(v2 + 32);
      }
      id v3 = v4;
    }
  }
  swift_bridgeObjectRelease();
  if (!objc_msgSend(v3, sel_childViewControllerForStatusBarHidden)) {
    return;
  }
  id v5 = v3;
LABEL_11:
}

uint64_t type metadata accessor for NotifyingMulticolumnSplitViewController()
{
  return self;
}

uint64_t SplitViewNavigationController.applyStyleContextModifier<A>(to:)(uint64_t a1)
{
  double v1 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  return AnyView.init<A>(_:)();
}

void SplitViewNavigationController.replaceRoot<A>(_:environment:transaction:)(objc_class *a1, uint64_t a2, uint64_t a3)
{
  UINavigationController.updateRootHost<A>(root:environment:transaction:)(a1, (uint64_t)&v3, a3);
}

id SplitViewNavigationController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SplitViewNavigationController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SplitViewNavigationController()
{
  return self;
}

uint64_t type metadata completion function for StyleContextSplitViewNavigationController()
{
  return swift_initClassMetadata2();
}

void closure #1 in StyleContextSplitViewNavigationController.init<A>(rootView:wantsTransparentBackground:environment:transaction:)(uint64_t a1, uint64_t a2)
{
  id v3 = (id)specialized UIHostingController.host.getter();
  uint64_t v7 = a2;
  uint64_t WitnessTable = swift_getWitnessTable();
  swift_getWitnessTable();
  type metadata accessor for _UIHostingView();
  swift_getWitnessTable();
  ViewRendererHost.updateViewGraph<A>(body:)();

  if (v6 == 1)
  {
    id v4 = (id)specialized UIHostingController.host.getter();
    _UIHostingView.preferencesDidChange()();
  }
  long long v6 = xmmword_18834FC50;
  id v5 = (id)specialized UIHostingController.host.getter();
  _UIHostingView.inheritedEnvironment.setter(&v6);
}

BOOL closure #1 in closure #1 in StyleContextSplitViewNavigationController.init<A>(rootView:wantsTransparentBackground:environment:transaction:)@<W0>(unsigned char *a1@<X8>)
{
  BOOL result = GraphHost.updatePreferences()();
  *a1 = result;
  return result;
}

uint64_t StyleContextSplitViewNavigationController.applyStyleContextModifier<A>(to:)()
{
  type metadata accessor for StyleContextWriter();
  uint64_t v0 = type metadata accessor for ModifiedContent();
  double v1 = MEMORY[0x1F4188790](v0);
  MEMORY[0x18C113660](v1);
  swift_getWitnessTable();
  swift_getWitnessTable();
  return AnyView.init<A>(_:)();
}

uint64_t StyleContextSplitViewNavigationController.replaceRoot<A>(_:environment:transaction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for StyleContextWriter();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v8 = *(void *)(v7 - 8);
  double v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (objc_class *)((char *)v14 - v10);
  MEMORY[0x18C113660](v9);
  uint64_t WitnessTable = swift_getWitnessTable();
  v14[0] = a5;
  v14[1] = WitnessTable;
  swift_getWitnessTable();
  UINavigationController.updateRootHost<A>(root:environment:transaction:)(v11, (uint64_t)v15, a3);
  return (*(uint64_t (**)(objc_class *, uint64_t))(v8 + 8))(v11, v7);
}

id @objc StyleContextSplitViewNavigationController.childForStatusBarHidden.getter(void *a1)
{
  id v1 = a1;
  id v2 = StyleContextSplitViewNavigationController.childForStatusBarHidden.getter();

  return v2;
}

id StyleContextSplitViewNavigationController.childForStatusBarHidden.getter()
{
  id v1 = objc_msgSend(v0, sel_topViewController);
  id v2 = objc_msgSend(v1, sel_childViewControllerForStatusBarHidden);

  if (!v2) {
    return objc_msgSend(v0, sel_topViewController);
  }
  return v2;
}

id @objc StyleContextSplitViewNavigationController.init(rootViewController:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = specialized StyleContextSplitViewNavigationController.init(rootViewController:)((uint64_t)a3);

  return v5;
}

id StyleContextSplitViewNavigationController.init(coder:)(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)swift_getObjectType();
  id v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id @objc StyleContextSplitViewNavigationController.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  return StyleContextSplitViewNavigationController.init(coder:)(a3);
}

uint64_t type metadata accessor for StyleContextSplitViewNavigationController()
{
  return __swift_instantiateGenericMetadata();
}

id specialized MulticolumnSplitViewRepresentable.makeCoordinator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MulticolumnSplitViewRepresentable.Coordinator()), sel_init, a1, a2, a3, a4, a5, a6);
}

id specialized StyleContextSplitViewNavigationController.__allocating_init<A>(rootView:wantsTransparentBackground:environment:transaction:)(uint64_t a1, int a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v27 = a4;
  int v28 = a2;
  uint64_t v9 = type metadata accessor for StyleContextWriter();
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (objc_class *)((char *)&v26 - v12);
  uint64_t v14 = *a3;
  uint64_t v26 = a3[1];
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v31 = a6;
  uint64_t v32 = WitnessTable;
  swift_getWitnessTable();
  uint64_t v16 = type metadata accessor for UIHostingController();
  MEMORY[0x18C113660](v16, a5, v9, a6);
  id v17 = specialized UIHostingController.__allocating_init(rootView:)(v13);
  (*(void (**)(objc_class *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v18 = v27;
  if (v14 != 1)
  {
    if (v27 > 1)
    {
      uint64_t v19 = (void *)specialized UIHostingController.host.getter();
      long long v30 = (unint64_t)v14;
      id v20 = v19;
      outlined copy of Transaction?(v18);
      swift_retain();
      _UIHostingView.inheritedEnvironment.setter(&v30);

      specialized UIHostingController.host.getter();
      specialized _UIHostingView.viewGraph.getter();
      uint64_t v21 = swift_allocObject();
      *(void *)(v21 + 16) = a6;
      *(void *)(v21 + 24) = v17;
      swift_retain();
      id v22 = v17;
      default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
      GraphHost.asyncTransaction(_:id:_:)();
      outlined consume of EnvironmentValues?(v14);
      swift_release();
      swift_release();
      outlined consume of Transaction?(v18);
    }
    else
    {
      outlined consume of EnvironmentValues?(v14);
    }
  }
  id v23 = (id)specialized UIHostingController.host.getter();
  _UIHostingView.setWantsTransparentBackground(for:_:)(4, v28 & 1);

  id v24 = objc_msgSend(objc_allocWithZone(v29), sel_initWithRootViewController_, v17);
  outlined consume of Transaction?(v18);

  return v24;
}

void specialized MulticolumnSplitViewRepresentable.Coordinator.updateSecondaryPlaceholder(_:for:environment:transaction:)(uint64_t a1, long long *a2, uint64_t a3)
{
  id v4 = (void *)MEMORY[0x1E4FBC8C8];
  objc_super v5 = *(void **)((char *)v3 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.secondaryController);
  if (v5)
  {
    uint64_t v8 = *MEMORY[0x1E4FBC8C8] & *v3;
    long long v12 = *a2;
    uint64_t v14 = v5;
    id v9 = objc_msgSend(v14, sel_topViewController);
    if (v9)
    {
      id v10 = *(id *)((char *)v3
                  + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.secondaryPlaceholderHost);
      id v13 = v9;
      if (v10 && v9 == v10)
      {
        long long v15 = v12;
        (*(void (**)(uint64_t, long long *, uint64_t, void, void))((*v4 & *v14) + 0x190))(a1, &v15, a3, *(void *)(v8 + 96), *(void *)(v8 + 120));

        return;
      }

      uint64_t v11 = v13;
    }
    else
    {
      uint64_t v11 = v14;
    }
  }
}

void specialized MulticolumnSplitViewRepresentable.Coordinator.updateSupplementaryPlaceholder(_:for:environment:transaction:)(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  objc_super v5 = (void *)MEMORY[0x1E4FBC8C8];
  long long v6 = *(void **)((char *)v3
                + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.supplementaryController);
  if (v6)
  {
    uint64_t v8 = *MEMORY[0x1E4FBC8C8] & *v3;
    *(_OWORD *)uint64_t v16 = *a2;
    id v9 = objc_msgSend(v6, sel_topViewController);
    if (v9)
    {
      id v10 = *(id *)((char *)v3
                  + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.supplementaryPlaceholderHost);
      if (v10
        && v9 == v10
        && (uint64_t v11 = *(void **)((char *)v3
                             + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.supplementaryController)) != 0)
      {
        long long v18 = *(_OWORD *)v16;
        long long v12 = *(void (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t))((*v5 & *v11) + 0x190);
        uint64_t v13 = *(void *)(v8 + 88);
        uint64_t v14 = *(void *)(v8 + 112);
        id v17 = v9;
        long long v15 = v11;
        v12(a1, &v18, a3, v13, v14);
      }
      else
      {
      }
    }
  }
}

id specialized StyleContextSplitViewNavigationController.init(rootViewController:)(uint64_t a1)
{
  v4.receiver = v1;
  v4.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v4, sel_initWithRootViewController_, a1);
}

void type metadata accessor for _ContiguousArrayStorage<(AnyHashable, Any)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>)
  {
    type metadata accessor for (AnyHashable, Any)();
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
    }
  }
}

void type metadata accessor for (AnyHashable, Any)()
{
  if (!lazy cache variable for type metadata for (AnyHashable, Any))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AnyHashable, Any));
    }
  }
}

uint64_t sub_187764ED4()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in StyleContextSplitViewNavigationController.init<A>(rootView:wantsTransparentBackground:environment:transaction:)()
{
  closure #1 in StyleContextSplitViewNavigationController.init<A>(rootView:wantsTransparentBackground:environment:transaction:)(*(void *)(v0 + 24), *(void *)(v0 + 16));
}

uint64_t type metadata accessor for MulticolumnSplitView()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for MulticolumnSplitView.Configuration()
{
  return swift_getGenericMetadata();
}

_UNKNOWN **base witness table accessor for View in MulticolumnSplitView<A, B, C>()
{
  return &protocol witness table for MulticolumnSplitView<A, B, C>;
}

uint64_t type metadata accessor for MulticolumnSplitView.EnvironmentTransform()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for MulticolumnSplitView.Container()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for MulticolumnSplitView.Child()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata completion function for MulticolumnSplitView()
{
  uint64_t result = type metadata accessor for MulticolumnSplitView.Configuration();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in MulticolumnSplitView<A, B, C>.Container()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in MulticolumnSplitView<A, B, C>.Child()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in MulticolumnSplitView<A, B, C>.EnvironmentTransform()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for MulticolumnSplitViewRepresentable()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata completion function for MulticolumnSplitView.Configuration()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MulticolumnSplitView(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v8 = a3[3];
  uint64_t v7 = a3[4];
  uint64_t v9 = *(void *)(v8 - 8);
  int v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v10;
  uint64_t v12 = v6 + v10;
  uint64_t v13 = (v6 + v11) & ~v11;
  if (*(_DWORD *)(v9 + 84)) {
    size_t v14 = *(void *)(v9 + 64);
  }
  else {
    size_t v14 = *(void *)(v9 + 64) + 1;
  }
  uint64_t v15 = *(void *)(v7 - 8);
  uint64_t v16 = *(_DWORD *)(v15 + 80);
  size_t v17 = v14 + v16;
  int v18 = v10 | *(_DWORD *)(v5 + 80) | *(_DWORD *)(v15 + 80);
  uint64_t v19 = v18;
  int v20 = v18 & 0x100000;
  if (v19 <= 7
    && ((v14 + v16 + v13) & ~v16) + *(void *)(*(void *)(v7 - 8) + 64) <= 0x18
    && v20 == 0)
  {
    uint64_t v24 = ~v11;
    uint64_t v27 = ~v16;
    uint64_t v28 = a3[4];
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v25 = (const void *)(((unint64_t)a2 + v12) & v24);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v25, 1, v8))
    {
      memcpy((void *)(((unint64_t)a1 + v12) & v24), v25, v14);
    }
    else
    {
      (*(void (**)(unint64_t, const void *, uint64_t))(v9 + 16))(((unint64_t)a1 + v12) & v24, v25, v8);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v9 + 56))(((unint64_t)a1 + v12) & v24, 0, 1, v8);
    }
    (*(void (**)(size_t, unint64_t, uint64_t))(v15 + 16))((v17 + (((unint64_t)a1 + v12) & v24)) & v27, ((unint64_t)v25 + v17) & v27, v28);
  }
  else
  {
    uint64_t v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v19 + 16) & ~v19));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for MulticolumnSplitView(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a2[2] - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56);
  uint64_t v6 = a2[3];
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = (v5 + a1 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v6)) {
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v8, v6);
  }
  uint64_t v9 = a2[4];
  int v10 = *(uint64_t (**)(unint64_t))(*(void *)(v9 - 8) + 8);
  uint64_t v11 = *(unsigned __int8 *)(*(void *)(v9 - 8) + 80);
  unint64_t v12 = *(void *)(v7 + 64) + v8;
  if (!*(_DWORD *)(v7 + 84)) {
    ++v12;
  }

  return v10((v12 + v11) & ~v11);
}

uint64_t initializeWithCopy for MulticolumnSplitView(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = a3[3];
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v6 + 48) + v9;
  uint64_t v11 = (void *)((v10 + a1) & ~v9);
  unint64_t v12 = (const void *)((v10 + a2) & ~v9);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
  {
    int v13 = *(_DWORD *)(v8 + 84);
    size_t v14 = *(void *)(v8 + 64);
    if (v13) {
      size_t v15 = v14;
    }
    else {
      size_t v15 = v14 + 1;
    }
    memcpy(v11, v12, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v11, v12, v7);
    size_t v17 = *(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56);
    uint64_t v16 = v8 + 56;
    v17(v11, 0, 1, v7);
    int v13 = *(_DWORD *)(v16 + 28);
    size_t v14 = *(void *)(v16 + 8);
  }
  if (v13) {
    size_t v18 = v14;
  }
  else {
    size_t v18 = v14 + 1;
  }
  uint64_t v19 = *(void *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v19 + 16))(((unint64_t)v11 + v18 + *(unsigned __int8 *)(v19 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80), ((unint64_t)v12 + v18 + *(unsigned __int8 *)(v19 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  return a1;
}

uint64_t assignWithCopy for MulticolumnSplitView(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = a3[3];
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v6 + 40) + v9;
  uint64_t v11 = (void *)((v10 + a1) & ~v9);
  unint64_t v12 = (void *)((v10 + a2) & ~v9);
  int v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  int v14 = v13(v11, 1, v7);
  int v15 = v13(v12, 1, v7);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v11, v12, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
      goto LABEL_12;
    }
    int v16 = *(_DWORD *)(v8 + 84);
    size_t v17 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 24))(v11, v12, v7);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v11, v7);
    int v16 = *(_DWORD *)(v8 + 84);
    size_t v17 = *(void *)(v8 + 64);
  }
  if (v16) {
    size_t v18 = v17;
  }
  else {
    size_t v18 = v17 + 1;
  }
  memcpy(v11, v12, v18);
LABEL_12:
  if (*(_DWORD *)(v8 + 84)) {
    uint64_t v19 = *(void *)(v8 + 64);
  }
  else {
    uint64_t v19 = *(void *)(v8 + 64) + 1;
  }
  uint64_t v20 = *(void *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v20 + 24))(((unint64_t)v11 + v19 + *(unsigned __int8 *)(v20 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80), ((unint64_t)v12 + v19 + *(unsigned __int8 *)(v20 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
  return a1;
}

uint64_t initializeWithTake for MulticolumnSplitView(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = a3[3];
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v6 + 32) + v9;
  uint64_t v11 = (void *)((v10 + a1) & ~v9);
  unint64_t v12 = (const void *)((v10 + a2) & ~v9);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
  {
    int v13 = *(_DWORD *)(v8 + 84);
    size_t v14 = *(void *)(v8 + 64);
    if (v13) {
      size_t v15 = v14;
    }
    else {
      size_t v15 = v14 + 1;
    }
    memcpy(v11, v12, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v11, v12, v7);
    size_t v17 = *(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56);
    uint64_t v16 = v8 + 56;
    v17(v11, 0, 1, v7);
    int v13 = *(_DWORD *)(v16 + 28);
    size_t v14 = *(void *)(v16 + 8);
  }
  if (v13) {
    size_t v18 = v14;
  }
  else {
    size_t v18 = v14 + 1;
  }
  uint64_t v19 = *(void *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v19 + 32))(((unint64_t)v11 + v18 + *(unsigned __int8 *)(v19 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80), ((unint64_t)v12 + v18 + *(unsigned __int8 *)(v19 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  return a1;
}

uint64_t assignWithTake for MulticolumnSplitView(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = a3[3];
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v6 + 24) + v9;
  uint64_t v11 = (void *)((v10 + a1) & ~v9);
  unint64_t v12 = (void *)((v10 + a2) & ~v9);
  int v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  int v14 = v13(v11, 1, v7);
  int v15 = v13(v12, 1, v7);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v11, v12, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
      goto LABEL_12;
    }
    int v16 = *(_DWORD *)(v8 + 84);
    size_t v17 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 40))(v11, v12, v7);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v11, v7);
    int v16 = *(_DWORD *)(v8 + 84);
    size_t v17 = *(void *)(v8 + 64);
  }
  if (v16) {
    size_t v18 = v17;
  }
  else {
    size_t v18 = v17 + 1;
  }
  memcpy(v11, v12, v18);
LABEL_12:
  if (*(_DWORD *)(v8 + 84)) {
    uint64_t v19 = *(void *)(v8 + 64);
  }
  else {
    uint64_t v19 = *(void *)(v8 + 64) + 1;
  }
  uint64_t v20 = *(void *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v20 + 40))(((unint64_t)v11 + v19 + *(unsigned __int8 *)(v20 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80), ((unint64_t)v12 + v19 + *(unsigned __int8 *)(v20 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for MulticolumnSplitView(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[2] - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3[3] - 8);
  int v7 = *(_DWORD *)(v6 + 84);
  if (v7) {
    unsigned int v8 = v7 - 1;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 <= v5) {
    unsigned int v9 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v9 = v8;
  }
  uint64_t v10 = a3[4];
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v14 = *(unsigned __int8 *)(v11 + 80);
  if (v12 <= v9) {
    unsigned int v15 = v9;
  }
  else {
    unsigned int v15 = *(_DWORD *)(v11 + 84);
  }
  if (v7) {
    uint64_t v16 = *(void *)(*(void *)(a3[3] - 8) + 64);
  }
  else {
    uint64_t v16 = *(void *)(*(void *)(a3[3] - 8) + 64) + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v17 = *(void *)(*(void *)(a3[2] - 8) + 64) + v13;
  int v18 = a2 - v15;
  if (a2 <= v15) {
    goto LABEL_33;
  }
  uint64_t v19 = ((v16 + v14 + (v17 & ~v13)) & ~v14) + *(void *)(*(void *)(v10 - 8) + 64);
  char v20 = 8 * v19;
  if (v19 <= 3)
  {
    unsigned int v22 = ((v18 + ~(-1 << v20)) >> v20) + 1;
    if (HIWORD(v22))
    {
      int v21 = *(_DWORD *)((char *)a1 + v19);
      if (!v21) {
        goto LABEL_33;
      }
      goto LABEL_23;
    }
    if (v22 > 0xFF)
    {
      int v21 = *(unsigned __int16 *)((char *)a1 + v19);
      if (!*(unsigned __int16 *)((char *)a1 + v19)) {
        goto LABEL_33;
      }
      goto LABEL_23;
    }
    if (v22 < 2)
    {
LABEL_33:
      if (v15)
      {
        if (v5 == v15)
        {
          uint64_t v26 = *(uint64_t (**)(void))(v4 + 48);
          return v26();
        }
        else
        {
          unint64_t v28 = ((unint64_t)a1 + v17) & ~v13;
          if (v8 == v15)
          {
            unsigned int v29 = (*(uint64_t (**)(unint64_t))(v6 + 48))(v28);
            if (v29 >= 2) {
              return v29 - 1;
            }
            else {
              return 0;
            }
          }
          else
          {
            uint64_t v30 = (v28 + v16 + v14) & ~v14;
            uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
            return v31(v30, v12, v10);
          }
        }
      }
      return 0;
    }
  }
  int v21 = *((unsigned __int8 *)a1 + v19);
  if (!*((unsigned char *)a1 + v19)) {
    goto LABEL_33;
  }
LABEL_23:
  int v23 = (v21 - 1) << v20;
  if (v19 > 3) {
    int v23 = 0;
  }
  if (v19)
  {
    if (v19 <= 3) {
      int v24 = ((v16 + v14 + (v17 & ~v13)) & ~v14) + *(_DWORD *)(*(void *)(v10 - 8) + 64);
    }
    else {
      int v24 = 4;
    }
    switch(v24)
    {
      case 2:
        int v25 = *a1;
        break;
      case 3:
        int v25 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v25 = *(_DWORD *)a1;
        break;
      default:
        int v25 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v25 = 0;
  }
  return v15 + (v25 | v23) + 1;
}

void storeEnumTagSinglePayload for MulticolumnSplitView(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(a4[2] - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(a4[3] - 8);
  int v10 = *(_DWORD *)(v9 + 84);
  if (v10) {
    unsigned int v11 = v10 - 1;
  }
  else {
    unsigned int v11 = 0;
  }
  uint64_t v12 = *(void *)(a4[4] - 8);
  if (v11 <= v8) {
    unsigned int v13 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v13 = v11;
  }
  uint64_t v14 = *(void *)(a4[4] - 8);
  uint64_t v15 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = *(void *)(*(void *)(a4[3] - 8) + 64);
  uint64_t v17 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v18 = *(void *)(v12 + 64);
  if (*(_DWORD *)(v12 + 84) <= v13) {
    unsigned int v19 = v13;
  }
  else {
    unsigned int v19 = *(_DWORD *)(v12 + 84);
  }
  uint64_t v20 = *(void *)(*(void *)(a4[2] - 8) + 64) + v15;
  if (!v10) {
    ++v16;
  }
  size_t v21 = ((v16 + v17 + (v20 & ~v15)) & ~v17) + v18;
  BOOL v22 = a3 >= v19;
  unsigned int v23 = a3 - v19;
  if (v23 == 0 || !v22)
  {
LABEL_21:
    if (v19 < a2) {
      goto LABEL_22;
    }
    goto LABEL_29;
  }
  if (v21 <= 3)
  {
    unsigned int v24 = ((v23 + ~(-1 << (8 * v21))) >> (8 * v21)) + 1;
    if (HIWORD(v24))
    {
      int v6 = 4;
      if (v19 < a2)
      {
LABEL_22:
        unsigned int v25 = ~v19 + a2;
        if (v21 < 4)
        {
          int v26 = (v25 >> (8 * v21)) + 1;
          if (v21)
          {
            int v27 = v25 & ~(-1 << (8 * v21));
            bzero(a1, v21);
            if (v21 == 3)
            {
              *(_WORD *)a1 = v27;
              a1[2] = BYTE2(v27);
            }
            else if (v21 == 2)
            {
              *(_WORD *)a1 = v27;
            }
            else
            {
              *a1 = v27;
            }
          }
        }
        else
        {
          bzero(a1, v21);
          *(_DWORD *)a1 = v25;
          int v26 = 1;
        }
        switch(v6)
        {
          case 1:
            a1[v21] = v26;
            return;
          case 2:
            *(_WORD *)&a1[v21] = v26;
            return;
          case 3:
            goto LABEL_54;
          case 4:
            *(_DWORD *)&a1[v21] = v26;
            return;
          default:
            return;
        }
      }
      goto LABEL_29;
    }
    if (v24 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v24 > 1;
    }
    goto LABEL_21;
  }
  int v6 = 1;
  if (v19 < a2) {
    goto LABEL_22;
  }
LABEL_29:
  uint64_t v28 = ~v15;
  switch(v6)
  {
    case 1:
      a1[v21] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_34;
    case 2:
      *(_WORD *)&a1[v21] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_34;
    case 3:
LABEL_54:
      __break(1u);
      JUMPOUT(0x187766388);
    case 4:
      *(_DWORD *)&a1[v21] = 0;
      goto LABEL_33;
    default:
LABEL_33:
      if (!a2) {
        return;
      }
LABEL_34:
      if (v8 == v19)
      {
        unsigned int v29 = *(void (**)(char *))(v7 + 56);
        uint64_t v30 = a1;
LABEL_37:
        v29(v30);
        return;
      }
      unint64_t v31 = (unint64_t)&a1[v20] & v28;
      if (v11 != v19)
      {
        uint64_t v30 = (char *)((v31 + v16 + v17) & ~v17);
        unsigned int v29 = *(void (**)(char *))(v14 + 56);
        goto LABEL_37;
      }
      uint64_t v32 = a2 + 1;
      uint64_t v33 = *(void (**)(unint64_t, uint64_t))(v9 + 56);
      v33(v31, v32);
      return;
  }
}

uint64_t sub_1877663B0()
{
  return swift_getWitnessTable();
}

void type metadata accessor for StyleContextSplitViewNavigationController<NoStyleContext>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

id static ForEach<>._makeToolbar(content:inputs:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v7 = *a1;
  int v19 = *((_DWORD *)a1 + 2);
  uint64_t v8 = a1[2];
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  uint64_t v11 = a1[5];
  uint64_t v12 = a1[6];
  int v21 = *((_DWORD *)a1 + 14);
  uint64_t v20 = a1[8];
  int v18 = *((_DWORD *)a1 + 18);
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  type metadata accessor for ForEach();
  type metadata accessor for _GraphValue();
  int v17 = _GraphValue.value.getter();
  swift_retain();
  uint64_t v13 = v8;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v14 = default argument 2 of ForEach<>.PreferenceTransform.init(forEach:inputs:cache:)();
  id result = (id)AGSubgraphGetCurrent();
  if (result)
  {
    LODWORD(v25) = v17;
    uint64_t v26 = v7;
    LODWORD(v27) = v19;
    uint64_t v28 = v13;
    uint64_t v29 = v9;
    uint64_t v30 = v10;
    uint64_t v31 = v11;
    uint64_t v32 = v12;
    int v33 = v21;
    uint64_t v34 = v20;
    int v35 = v18;
    id v36 = result;
    uint64_t v37 = v14;
    uint64_t v16 = PreferencesOutputs.init()();
    MEMORY[0x1F4188790](v16);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_bridgeObjectRelease();
    id result = (id)outlined release of ForEach<A, B, C><>.PreferenceTransform((uint64_t)&v25);
    *(void *)a7 = v23;
    *(_DWORD *)(a7 + 8) = v24;
    *(void *)(a7 + 16) = v20;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t default argument 2 of ForEach<>.PreferenceTransform.init(forEach:inputs:cache:)()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t implicit closure #1 in static ForEach<>._makeToolbar(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  long long v8 = *(_OWORD *)(a1 + 64);
  long long v9 = *(_OWORD *)(a1 + 80);
  long long v10 = *(_OWORD *)(a1 + 32);
  v25[3] = *(_OWORD *)(a1 + 48);
  unsigned char v25[4] = v8;
  long long v26 = v9;
  long long v11 = *(_OWORD *)(a1 + 16);
  v25[0] = *(_OWORD *)a1;
  v25[1] = v11;
  uint64_t v27 = *(void *)(a1 + 96);
  v25[2] = v10;
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  uint64_t v23 = a6;
  uint64_t v24 = a7;
  uint64_t v17 = type metadata accessor for ForEach<>.PreferenceTransform();
  uint64_t WitnessTable = swift_getWitnessTable();
  outlined retain of ForEach<A, B, C><>.PreferenceTransform(a1);
  type metadata accessor for Attribute<(_:)>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v25, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)v16, v17, MEMORY[0x1E4FBC248], v12, MEMORY[0x1E4FBC278], v13);
  uint64_t v14 = (void *)*((void *)&v26 + 1);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v19;
}

uint64_t partial apply for implicit closure #1 in static ForEach<>._makeToolbar(content:inputs:)()
{
  return implicit closure #1 in static ForEach<>._makeToolbar(content:inputs:)(v0[8], v0[2], v0[3], v0[4], v0[5], v0[6], v0[7]);
}

uint64_t outlined release of ForEach<A, B, C><>.PreferenceTransform(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 88);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1;
}

uint64_t ForEach<>.PreferenceTransform.forEach.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ForEach();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t ForEach<>.PreferenceTransform.updateValue()(void *a1)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[3];
  uint64_t v70 = *(void *)(v3 - 8);
  uint64_t v4 = *(void *)(v70 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v63 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v58 - v6;
  MEMORY[0x1F4188790](v8);
  long long v10 = (char *)&v58 - v9;
  uint64_t v65 = v1;
  long long v11 = *(void **)(v1 + 88);
  uint64_t result = AGSubgraphIsValid();
  if (result)
  {
    uint64_t v58 = v4;
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = 0u;
    uint64_t v14 = v13 + 16;
    *(_OWORD *)(v13 + 32) = 0u;
    uint64_t v15 = MEMORY[0x1E4FBC860];
    *(void *)(v13 + 48) = 0;
    *(void *)(v13 + 56) = v15;
    *(unsigned char *)(v13 + 64) = 1;
    *(void *)(v13 + 72) = MEMORY[0x1E4FBC870];
    uint64_t v75 = 0;
    uint64_t v16 = static Array._allocateUninitialized(_:)();
    uint64_t v17 = MEMORY[0x18C115CC0](v16, v3);
    uint64_t v62 = v7;
    uint64_t v59 = v13;
    long long v61 = v10;
    if (v17)
    {
      uint64_t v64 = a1[6];
      uint64_t v18 = specialized Set.init(_nonEmptyArrayLiteral:)(v16, v3, v64);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v64 = a1[6];
      uint64_t v18 = MEMORY[0x1E4FBC870];
    }
    uint64_t v73 = (uint64_t (**)(uint64_t *))&v58;
    uint64_t v74 = v18;
    uint64_t v19 = *(void *)(v65 + 8);
    int v20 = *(_DWORD *)(v65 + 16);
    uint64_t v21 = *(void *)(v65 + 24);
    uint64_t v23 = *(void *)(v65 + 48);
    uint64_t v22 = *(void *)(v65 + 56);
    int v24 = *(_DWORD *)(v65 + 64);
    uint64_t v25 = *(void *)(v65 + 72);
    int v26 = *(_DWORD *)(v65 + 80);
    LODWORD(v76) = *(_DWORD *)v65;
    uint64_t v27 = *(void *)(v65 + 96);
    uint64_t v60 = (void *)(v65 + 96);
    uint64_t v77 = v19;
    LODWORD(v78) = v20;
    uint64_t v79 = v21;
    long long v80 = *(_OWORD *)(v65 + 32);
    uint64_t v81 = v23;
    uint64_t v82 = v22;
    int v83 = v24;
    uint64_t v84 = v25;
    int v85 = v26;
    uint64_t v86 = v11;
    uint64_t v87 = v27;
    MEMORY[0x1F4188790](v19);
    uint64_t v71 = (uint64_t (*)(uint64_t *))a1[2];
    *(&v58 - 10) = (uint64_t)v71;
    *(&v58 - 9) = v3;
    uint64_t v68 = (void (**)(char *, char *, uint64_t))a1[4];
    uint64_t v66 = v3;
    uint64_t v69 = a1[5];
    uint64_t v28 = v69;
    *(&v58 - 8) = (uint64_t)v68;
    *(&v58 - 7) = v28;
    uint64_t v29 = a1[7];
    uint64_t v30 = v64;
    *(&v58 - 6) = v64;
    *(&v58 - 5) = v29;
    *(&v58 - 4) = v31;
    *(&v58 - 3) = (uint64_t)&v75;
    *(&v58 - 2) = (uint64_t)&v74;
    *(&v58 - 1) = v14;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v32 = v11;
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    StatefulRule.withObservation<A>(do:)();
    int v33 = v86;
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v34 = v60;
    int v35 = (uint64_t (*)(uint64_t *))*v60;
    id v36 = v71;
    char v76 = v71;
    uint64_t v77 = v66;
    uint64_t v37 = v68;
    uint64_t v38 = v69;
    uint64_t v78 = v68;
    uint64_t v79 = v69;
    *(void *)&long long v80 = v30;
    *((void *)&v80 + 1) = v29;
    uint64_t v39 = type metadata accessor for ForEach<>.PreferenceTransform.Item();
    uint64_t v73 = (uint64_t (**)(uint64_t *))&v58;
    char v76 = v35;
    MEMORY[0x1F4188790](v39);
    uint64_t v40 = v66;
    *(&v58 - 8) = (uint64_t)v36;
    *(&v58 - 7) = v40;
    *(&v58 - 6) = (uint64_t)v37;
    *(&v58 - 5) = v38;
    uint64_t v41 = v66;
    *(&v58 - 4) = v30;
    *(&v58 - 3) = v29;
    *(&v58 - 2) = (uint64_t)&v74;
    uint64_t v42 = v30;
    type metadata accessor for Dictionary.Keys();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    uint64_t v43 = Sequence.filter(_:)();
    long long v44 = v34;
    uint64_t v45 = MEMORY[0x18C115CB0](v43, v41);
    int v46 = v62;
    uint64_t v47 = v61;
    if (v45)
    {
      uint64_t v48 = 0;
      uint64_t v73 = (uint64_t (**)(uint64_t *))(v70 + 16);
      uint64_t v68 = (void (**)(char *, char *, uint64_t))(v70 + 32);
      uint64_t v67 = (void (**)(char *, uint64_t))(v70 + 8);
      uint64_t v72 = v39;
      uint64_t v64 = v42;
      uint64_t v69 = v43;
      do
      {
        Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
        Array._checkSubscript(_:wasNativeTypeChecked:)();
        if (IsNativeType)
        {
          long long v51 = *(uint64_t (**)(uint64_t *))(v70 + 16);
          ((void (*)(char *, unint64_t, uint64_t))v51)(v47, v43+ ((*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80))+ *(void *)(v70 + 72) * v48, v41);
          uint64_t v52 = v48 + 1;
          if (__OFADD__(v48, 1)) {
            goto LABEL_15;
          }
        }
        else
        {
          uint64_t v56 = _ArrayBuffer._getElementSlowPath(_:)();
          if (v58 != 8) {
            __break(1u);
          }
          char v76 = (uint64_t (*)(uint64_t *))v56;
          uint64_t v57 = *v73;
          ((void (*)(char *, uint64_t (**)(uint64_t *), uint64_t))*v73)(v47, &v76, v41);
          long long v51 = v57;
          swift_unknownObjectRelease();
          uint64_t v52 = v48 + 1;
          if (__OFADD__(v48, 1))
          {
LABEL_15:
            __break(1u);
            break;
          }
        }
        (*v68)(v46, v47, v41);
        MEMORY[0x18C115450](&v76, v46, *v44, v41, v39, v42);
        uint64_t v53 = v76;
        if (v76)
        {
          uint64_t v71 = v51;
          long long v54 = *(void **)(v65 + 88);
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v55 = v54;
          swift_bridgeObjectRetain();
          AGSubgraphRef.willInvalidate(isInserted:)(1);
          AGSubgraphInvalidate();
          swift_bridgeObjectRelease();

          int v46 = v62;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v41 = v66;
          swift_release();
          uint64_t v42 = v64;
          uint64_t v47 = v61;
          swift_release();
          ((void (*)(char *, char *, uint64_t))v71)(v63, v46, v41);
          char v76 = 0;
          LODWORD(v77) = 0;
          type metadata accessor for Dictionary();
          long long v44 = v60;
          Dictionary.subscript.setter();
        }
        (*v67)(v46, v41);
        uint64_t v43 = v69;
        uint64_t v49 = MEMORY[0x18C115CB0](v69, v41);
        ++v48;
        uint64_t v39 = v72;
      }
      while (v52 != v49);
    }
    swift_bridgeObjectRelease();
    char v76 = partial apply for closure #3 in ForEach<>.PreferenceTransform.updateValue();
    uint64_t v77 = v59;
    type metadata accessor for (_:)();
    swift_retain();
    AGGraphSetOutputValue();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #1 in ForEach<>.PreferenceTransform.updateValue()(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v123 = a7;
  uint64_t v112 = a3;
  long long v128 = a2;
  unint64_t v97 = *(void (***)(uint64_t, uint64_t))(a6 - 8);
  long long v127 = a10;
  MEMORY[0x1F4188790](a1);
  int v110 = (char *)v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v109 = (char *)v95 - v17;
  MEMORY[0x1F4188790](v18);
  uint64_t v117 = (char *)v95 - v19;
  uint64_t v21 = *(void *)(v20 + 8);
  uint64_t v118 = v20;
  uint64_t v22 = *(void *)(v21 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v119 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v146 = (uint64_t)v95 - v23;
  uint64_t v24 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v24 - 8);
  long long v116 = (char *)v95 - v25;
  uint64_t v113 = v22;
  uint64_t v26 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v26);
  uint64_t v125 = (char *)v95 - v27;
  uint64_t v122 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v28);
  uint64_t v115 = (char *)v95 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = a5;
  uint64_t v137 = a6;
  uint64_t v138 = v123;
  uint64_t v139 = a8;
  *(void *)&long long v140 = a9;
  uint64_t v30 = type metadata accessor for ForEach();
  uint64_t v121 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30);
  uint64_t v107 = (uint64_t)v95 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v32);
  uint64_t v34 = (char *)v95 - v33;
  uint64_t v35 = a5;
  uint64_t v102 = v26;
  uint64_t AssociatedConformanceWitness = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v120 = swift_getAssociatedTypeWitness();
  v95[0] = *(void *)(v120 - 8);
  MEMORY[0x1F4188790](v120);
  uint64_t v124 = (char *)v95 - v36;
  uint64_t v37 = *(void *)(a1 + 8);
  int v38 = *(_DWORD *)(a1 + 16);
  uint64_t v39 = *(void *)(a1 + 24);
  int v40 = *(_DWORD *)(a1 + 64);
  uint64_t v41 = *(void *)(a1 + 72);
  int v42 = *(_DWORD *)(a1 + 80);
  LODWORD(v136) = *(_DWORD *)a1;
  uint64_t v137 = v37;
  LODWORD(v138) = v38;
  uint64_t v139 = v39;
  long long v43 = *(_OWORD *)(a1 + 48);
  long long v140 = *(_OWORD *)(a1 + 32);
  long long v141 = v43;
  int v142 = v40;
  uint64_t v143 = v41;
  int v144 = v42;
  uint64_t v100 = a1;
  long long v145 = *(_OWORD *)(a1 + 88);
  uint64_t v130 = a5;
  uint64_t v131 = a6;
  uint64_t v126 = a6;
  uint64_t v44 = AssociatedTypeWitness;
  uint64_t v132 = v123;
  uint64_t v133 = v118;
  uint64_t v45 = v146;
  uint64_t v111 = a9;
  int v46 = v116;
  uint64_t v134 = a9;
  uint64_t v135 = v127;
  long long v127 = (void *)type metadata accessor for ForEach<>.PreferenceTransform();
  ForEach<>.PreferenceTransform.forEach.getter((uint64_t)v34);
  uint64_t v47 = v115;
  ForEach.data.getter();
  uint64_t v48 = *(void (**)(void, void))(v121 + 8);
  uint64_t v106 = v34;
  uint64_t v108 = v30;
  v121 += 8;
  uint64_t v105 = v48;
  v48(v34, v30);
  dispatch thunk of Collection.indices.getter();
  uint64_t v49 = *(void (**)(char *, uint64_t))(v122 + 8);
  uint64_t v113 = v35;
  uint64_t v50 = v117;
  v122 += 8;
  uint64_t v104 = v49;
  v49(v47, v35);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v51 = v119;
  uint64_t v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48);
  uint64_t v102 = v119 + 48;
  uint64_t v101 = v52;
  if (v52(v46, 1, v44) != 1)
  {
    uint64_t v99 = *(void (**)(uint64_t, char *, uint64_t))(v51 + 32);
    uint64_t v98 = (void (**)(char *, char *, uint64_t))(v97 + 2);
    long long v54 = (char *)(v97 + 1);
    uint64_t v119 = v51 + 32;
    unint64_t v97 = (void (**)(uint64_t, uint64_t))(v51 + 8);
    uint64_t v125 = v54;
    uint64_t v96 = a4;
    v99(v45, v46, v44);
    while (1)
    {
      uint64_t v61 = v100;
      uint64_t v62 = *(void *)(v100 + 8);
      int v63 = *(_DWORD *)(v100 + 16);
      uint64_t v64 = *(void *)(v100 + 24);
      int v65 = *(_DWORD *)(v100 + 64);
      uint64_t v66 = *(void *)(v100 + 72);
      int v67 = *(_DWORD *)(v100 + 80);
      LODWORD(v136) = *(_DWORD *)v100;
      uint64_t v137 = v62;
      LODWORD(v138) = v63;
      uint64_t v139 = v64;
      long long v68 = *(_OWORD *)(v100 + 48);
      long long v140 = *(_OWORD *)(v100 + 32);
      long long v141 = v68;
      int v142 = v65;
      uint64_t v143 = v66;
      int v144 = v67;
      long long v145 = *(_OWORD *)(v100 + 88);
      uint64_t v69 = (uint64_t)v106;
      ForEach<>.PreferenceTransform.forEach.getter((uint64_t)v106);
      uint64_t v70 = v108;
      ForEach.idGenerator.getter();
      uint64_t v71 = v105;
      v105(v69, v70);
      uint64_t v129 = v130;
      uint64_t v72 = *(void *)(v61 + 8);
      int v73 = *(_DWORD *)(v61 + 16);
      uint64_t v74 = *(void *)(v61 + 24);
      int v75 = *(_DWORD *)(v61 + 64);
      uint64_t v76 = *(void *)(v61 + 72);
      int v77 = *(_DWORD *)(v61 + 80);
      LODWORD(v136) = *(_DWORD *)v61;
      uint64_t v137 = v72;
      LODWORD(v138) = v73;
      uint64_t v139 = v74;
      long long v78 = *(_OWORD *)(v61 + 48);
      long long v140 = *(_OWORD *)(v61 + 32);
      long long v141 = v78;
      int v142 = v75;
      uint64_t v143 = v76;
      int v144 = v77;
      long long v145 = *(_OWORD *)(v61 + 88);
      uint64_t v79 = v107;
      ForEach<>.PreferenceTransform.forEach.getter(v107);
      long long v80 = v115;
      ForEach.data.getter();
      v71(v79, v70);
      uint64_t v81 = (void **)v128;
      uint64_t v82 = v113;
      uint64_t v83 = v126;
      uint64_t v136 = v113;
      uint64_t v137 = v126;
      uint64_t v138 = v123;
      uint64_t v139 = v118;
      *(void *)&long long v140 = v111;
      type metadata accessor for ForEach.IDGenerator();
      ForEach.IDGenerator.makeID(data:index:offset:)();
      uint64_t v84 = v80;
      int v85 = v96;
      v104(v84, v82);
      swift_release();
      (*v98)(v110, v50, v83);
      type metadata accessor for Set();
      uint64_t v86 = v109;
      Set.insert(_:)();
      uint64_t v87 = *(void (**)(char *, uint64_t))v125;
      (*(void (**)(char *, uint64_t))v125)(v86, v83);
      uint64_t v88 = (void *)ForEach<>.PreferenceTransform.item(at:offset:)(v146, *v81, v127);
      uint64_t Value = (uint64_t *)AGGraphGetValue();
      uint64_t v91 = Value[2];
      uint64_t v90 = Value[3];
      uint64_t v92 = Value[4];
      uint64_t v93 = v85[1];
      if (v93)
      {
        uint64_t v94 = *v85;
      }
      else
      {
        uint64_t v94 = *Value;
        uint64_t v93 = swift_bridgeObjectRetain();
      }
      *int v85 = v94;
      v85[1] = v93;
      uint64_t v55 = v85[3];
      if (v55)
      {
        uint64_t v92 = v85[4];
        uint64_t v91 = v85[2];
      }
      else
      {
        outlined copy of Binding<NavigationSplitViewColumn>?(v91, v90);
        uint64_t v55 = v90;
      }
      uint64_t v56 = v126;
      uint64_t v57 = AssociatedTypeWitness;
      v85[2] = v91;
      v85[3] = v55;
      v85[4] = v92;
      uint64_t v136 = v85[5];
      uint64_t v58 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v58);
      v85[5] = v136;
      uint64_t v50 = v117;
      v87(v117, v56);
      uint64_t v59 = v146;
      (*v97)(v146, v57);

      ++*v128;
      uint64_t v60 = v116;
      dispatch thunk of IteratorProtocol.next()();
      if (v101(v60, 1, v57) == 1) {
        break;
      }
      v99(v59, v60, v57);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v95[0] + 8))(v124, v120);
}

uint64_t ForEach<>.PreferenceTransform.item(at:offset:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v121 = a2;
  *(void *)&long long v125 = a1;
  uint64_t v6 = a3[4];
  uint64_t v128 = v6;
  uint64_t v109 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v122 = (uint64_t)v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(*(void *)(v8 + 40) + 8);
  uint64_t v127 = *(void *)(v8 + 40);
  uint64_t v10 = v127;
  uint64_t v114 = *(void *)(v9 + 8);
  uint64_t v11 = *(void *)(v8 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v117 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  long long v116 = (char *)v101 - v12;
  uint64_t v130 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v13);
  *(void *)&long long v124 = (char *)v101 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = a3[3];
  uint64_t v126 = a3[6];
  uint64_t v136 = v11;
  uint64_t v137 = v15;
  uint64_t v16 = v15;
  uint64_t v129 = v15;
  uint64_t v138 = v6;
  *(void *)uint64_t v139 = v10;
  *(void *)&v139[8] = v126;
  uint64_t v17 = type metadata accessor for ForEach();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)v101 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)v101 - v22;
  uint64_t v120 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v108 = (char *)v101 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v123 = (char *)v101 - v27;
  uint64_t v28 = *((void *)v4 + 1);
  int v29 = v4[4];
  uint64_t v30 = *((void *)v4 + 3);
  LODWORD(v27) = v4[16];
  uint64_t v31 = *((void *)v4 + 9);
  int v32 = v4[20];
  LODWORD(v136) = *v4;
  uint64_t v137 = v28;
  LODWORD(v138) = v29;
  *(void *)uint64_t v139 = v30;
  long long v33 = *((_OWORD *)v4 + 3);
  *(_OWORD *)&v139[8] = *((_OWORD *)v4 + 2);
  long long v140 = v33;
  LODWORD(v141) = v27;
  uint64_t v142 = v31;
  int v143 = v32;
  long long v144 = *(_OWORD *)(v4 + 22);
  ForEach<>.PreferenceTransform.forEach.getter((uint64_t)v23);
  ForEach.idGenerator.getter();
  uint64_t v34 = *(void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v112 = v23;
  v34(v23, v17);
  uint64_t v131 = v135;
  uint64_t v35 = *((void *)v4 + 1);
  int v36 = v4[4];
  uint64_t v37 = *((void *)v4 + 3);
  int v38 = v4[16];
  uint64_t v39 = *((void *)v4 + 9);
  int v40 = v4[20];
  LODWORD(v136) = *v4;
  uint64_t v137 = v35;
  LODWORD(v138) = v36;
  *(void *)uint64_t v139 = v37;
  long long v41 = *((_OWORD *)v4 + 3);
  *(_OWORD *)&v139[8] = *((_OWORD *)v4 + 2);
  long long v140 = v41;
  LODWORD(v141) = v38;
  uint64_t v142 = v39;
  int v143 = v40;
  long long v144 = *(_OWORD *)(v4 + 22);
  ForEach<>.PreferenceTransform.forEach.getter((uint64_t)v20);
  uint64_t v42 = v124;
  ForEach.data.getter();
  uint64_t v115 = v17;
  uint64_t v113 = v18 + 8;
  uint64_t v111 = (void (*)(uint64_t, uint64_t))v34;
  v34(v20, v17);
  long long v43 = a3;
  uint64_t v44 = v11;
  uint64_t v136 = v11;
  uint64_t v45 = v129;
  uint64_t v46 = v128;
  uint64_t v137 = v129;
  uint64_t v138 = v128;
  uint64_t v47 = v127;
  uint64_t v48 = v126;
  *(void *)uint64_t v139 = v127;
  *(void *)&v139[8] = v126;
  type metadata accessor for ForEach.IDGenerator();
  uint64_t v49 = v123;
  ForEach.IDGenerator.makeID(data:index:offset:)();
  uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v130 + 8);
  uint64_t v51 = v42;
  uint64_t v52 = v44;
  v130 += 8;
  int v110 = v50;
  v50(v51, v44);
  swift_release();
  uint64_t v53 = *((void *)v4 + 12);
  uint64_t v121 = v43;
  uint64_t v54 = v43[7];
  uint64_t v119 = v52;
  uint64_t v136 = v52;
  uint64_t v137 = v45;
  uint64_t v138 = v46;
  *(void *)uint64_t v139 = v47;
  *(void *)&v139[8] = v48;
  *(void *)&v139[16] = v54;
  uint64_t v55 = v54;
  uint64_t v56 = type metadata accessor for ForEach<>.PreferenceTransform.Item();
  uint64_t v57 = v53;
  MEMORY[0x18C115450](&v135, v49, v53, v45, v56, v48);
  id v58 = v135;
  if (v135)
  {
    (*(void (**)(char *, uint64_t))(v120 + 8))(v49, v129);
    return (uint64_t)v58;
  }
  v101[0] = v56;
  v101[1] = v4 + 24;
  uint64_t v59 = *((void *)v4 + 11);
  id v60 = (id)AGSubgraphGetGraph();
  int v61 = *v4;
  uint64_t v107 = *((void *)v4 + 1);
  int v105 = v4[4];
  uint64_t v104 = *((void *)v4 + 3);
  int v62 = v4[16];
  uint64_t v63 = *((void *)v4 + 9);
  int v64 = v4[20];
  long long v103 = *((_OWORD *)v4 + 3);
  long long v102 = *((_OWORD *)v4 + 2);
  uint64_t v106 = AGSubgraphCreate2();

  AGSubgraphAddChild();
  LODWORD(v136) = v61;
  uint64_t v137 = v107;
  LODWORD(v138) = v105;
  *(void *)uint64_t v139 = v104;
  *(_OWORD *)&v139[8] = v102;
  long long v140 = v103;
  LODWORD(v141) = v62;
  uint64_t v142 = v63;
  int v143 = v64;
  *(void *)&long long v144 = v59;
  *((void *)&v144 + 1) = v57;
  uint64_t v107 = v55;
  uint64_t v65 = (uint64_t)v112;
  ForEach<>.PreferenceTransform.forEach.getter((uint64_t)v112);
  uint64_t v66 = v124;
  uint64_t v67 = v115;
  ForEach.data.getter();
  long long v68 = v111;
  v111(v65, v67);
  uint64_t v69 = v119;
  uint64_t v70 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
  uint64_t v71 = v116;
  (*(void (**)(char *))(v117 + 16))(v116);
  v70(&v136, 0);
  v110(v66, v69);
  uint64_t v72 = *((void *)v4 + 1);
  int v73 = v4[4];
  uint64_t v74 = *((void *)v4 + 3);
  int v75 = v4[16];
  uint64_t v76 = *((void *)v4 + 9);
  int v77 = v4[20];
  LODWORD(v136) = *v4;
  uint64_t v137 = v72;
  LODWORD(v138) = v73;
  *(void *)uint64_t v139 = v74;
  long long v78 = *((_OWORD *)v4 + 3);
  *(_OWORD *)&v139[8] = *((_OWORD *)v4 + 2);
  long long v140 = v78;
  LODWORD(v141) = v75;
  uint64_t v142 = v76;
  int v143 = v77;
  long long v144 = *(_OWORD *)(v4 + 22);
  ForEach<>.PreferenceTransform.forEach.getter(v65);
  uint64_t v79 = (void (*)(char *))specialized ForEach.content.getter(v67);
  swift_retain();
  v68(v65, v67);
  v79(v71);
  swift_release();
  uint64_t v80 = *((void *)v4 + 1);
  int v81 = v4[4];
  uint64_t v82 = *((void *)v4 + 3);
  uint64_t v83 = *((void *)v4 + 6);
  uint64_t v130 = *((void *)v4 + 7);
  int v84 = v4[16];
  uint64_t v85 = *((void *)v4 + 9);
  int v86 = v4[20];
  uint64_t v136 = v80;
  LODWORD(v137) = v81;
  *(_OWORD *)uint64_t v139 = *((_OWORD *)v4 + 2);
  *(void *)&v139[16] = v83;
  *(void *)&long long v140 = v130;
  DWORD2(v140) = v84;
  uint64_t v141 = v85;
  LODWORD(v142) = v86;
  swift_beginAccess();
  LODWORD(v65) = *(_DWORD *)(v82 + 16);
  uint64_t v87 = *(void *)(v82 + 24);
  long long v125 = *(_OWORD *)(v82 + 32);
  long long v124 = *(_OWORD *)(v82 + 48);
  uint64_t v88 = *(void *)(v82 + 64);
  uint64_t v89 = *(void *)(v82 + 72);
  LOBYTE(v68) = *(unsigned char *)(v82 + 80);
  LOBYTE(v67) = *(unsigned char *)(v82 + 81);
  uint64_t v90 = *(void *)(v82 + 88);
  type metadata accessor for MutableBox<CachedEnvironment>();
  uint64_t v91 = swift_allocObject();
  *(_DWORD *)(v91 + 16) = v65;
  *(void *)(v91 + 24) = v87;
  long long v92 = v124;
  *(_OWORD *)(v91 + 32) = v125;
  *(_OWORD *)(v91 + 48) = v92;
  *(void *)(v91 + 64) = v88;
  *(void *)(v91 + 72) = v89;
  uint64_t v93 = (void *)v106;
  *(unsigned char *)(v91 + 80) = (_BYTE)v68;
  *(unsigned char *)(v91 + 81) = v67;
  *(void *)(v91 + 88) = v90;
  swift_retain();
  uint64_t v138 = v91;
  uint64_t v94 = v128;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v133 = 0;
  char v134 = 1;
  AGGraphClearUpdate();
  id v95 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  uint64_t v96 = v129;
  closure #1 in ForEach<>.PreferenceTransform.item(at:offset:)(v122, &v136, &v133, v119, v129, v94, v127, v126, v107);
  AGSubgraphSetCurrent();

  uint64_t result = AGGraphSetUpdate();
  if ((v134 & 1) == 0)
  {
    int v98 = v133;
    uint64_t v99 = v120;
    uint64_t v100 = v123;
    (*(void (**)(char *, char *, uint64_t))(v120 + 16))(v108, v123, v96);
    uint64_t v131 = v93;
    int v132 = v98;
    type metadata accessor for Dictionary();
    id v58 = v93;
    Dictionary.subscript.setter();
    (*(void (**)(char *, uint64_t))(v117 + 8))(v116, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v99 + 8))(v100, v96);
    (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v122, v94);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return (uint64_t)v58;
  }
  __break(1u);
  return result;
}

uint64_t closure #3 in ForEach<>.PreferenceTransform.updateValue()(uint64_t *a1, void *a2)
{
  swift_beginAccess();
  uint64_t v4 = a2[4];
  uint64_t v5 = a2[5];
  uint64_t v6 = a2[6];
  uint64_t v7 = a1[1];
  if (v7)
  {
    uint64_t v8 = *a1;
  }
  else
  {
    uint64_t v8 = a2[2];
    uint64_t v7 = swift_bridgeObjectRetain();
  }
  *a1 = v8;
  a1[1] = v7;
  uint64_t v9 = a1[3];
  if (v9)
  {
    uint64_t v6 = a1[4];
    uint64_t v4 = a1[2];
  }
  else
  {
    outlined copy of Binding<NavigationSplitViewColumn>?(v4, v5);
    uint64_t v9 = v5;
  }
  a1[2] = v4;
  a1[3] = v9;
  a1[4] = v6;
  uint64_t v12 = a1[5];
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t result = specialized Array.append<A>(contentsOf:)(v10);
  a1[5] = v12;
  return result;
}

uint64_t closure #1 in ForEach<>.PreferenceTransform.item(at:offset:)(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v32 = a3;
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a6 - 8);
  uint64_t v33 = a9;
  double v13 = MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16);
  v16(v15, a1, v17, v13);
  uint64_t v41 = a6;
  uint64_t v18 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v15, (uint64_t)partial apply for closure #1 in Attribute.init(value:), (uint64_t)v40, a6, MEMORY[0x1E4FBC248], v18, MEMORY[0x1E4FBC278], v19);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v12 + 8);
  v20(v15, a6);
  int v21 = v42;
  ((void (*)(char *, uint64_t, uint64_t))v16)(v15, a1, a6);
  uint64_t v38 = a6;
  int v39 = v21;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v15, (uint64_t)partial apply for closure #1 in Attribute.setValue(_:), (uint64_t)v37, a6, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB390], MEMORY[0x1E4FBC278], v22);
  v20(v15, a6);
  _GraphValue.init(_:)();
  int v23 = *((_DWORD *)a2 + 2);
  uint64_t v24 = a2[2];
  int v25 = *((_DWORD *)a2 + 14);
  uint64_t v26 = a2[8];
  int v27 = *((_DWORD *)a2 + 18);
  uint64_t v42 = *a2;
  int v43 = v23;
  uint64_t v44 = v24;
  long long v45 = *(_OWORD *)(a2 + 3);
  long long v46 = *(_OWORD *)(a2 + 5);
  uint64_t v48 = v26;
  int v47 = v25;
  int v49 = v27;
  (*(void (**)(uint64_t *__return_ptr, unsigned char *, uint64_t *, uint64_t))(v33 + 32))(&v35, v34, &v42, a6);
  uint64_t v42 = v35;
  int v43 = v36;
  uint64_t v28 = PreferencesOutputs.subscript.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v28 & 0x100000000) != 0) {
    __break(1u);
  }
  uint64_t v30 = v32;
  *int v32 = v28;
  *((unsigned char *)v30 + 4) = 0;
  return result;
}

id protocol witness for static ToolbarContent._makeToolbar(content:inputs:) in conformance <> ForEach<A, B, C>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  return static ForEach<>._makeToolbar(content:inputs:)(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a3);
}

uint64_t ForEach<>.init<>(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  return ForEach<>.init<>(_:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

{
  return ForEach<>.init<>(_:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

{
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  void v21[12];

  void v21[2] = a2;
  void v21[3] = a3;
  v21[1] = a9;
  uint64_t v16 = *(void *)(a4 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v19, v17);
  v21[4] = a4;
  v21[5] = a5;
  v21[6] = a6;
  v21[7] = a7;
  v21[8] = a8;
  v21[9] = a10;
  v21[11] = swift_getKeyPath();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  ForEach.init(_:idGenerator:content:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(a1, a4);
}

uint64_t sub_187768C40()
{
  return key path getter for Identifiable.id : <A, B, C>A.Element();
}

uint64_t sub_187768C58()
{
  return 48;
}

__n128 sub_187768C64(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t ForEach<>.init(_:id:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return ForEach<>.init(_:id:content:)(a1, a2, a3, a4, a5, a6, a7);
}

{
  return ForEach<>.init(_:id:content:)(a1, a2, a3, a4, a5, a6, a7);
}

{
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  void v15[4];

  v15[1] = a6;
  void v15[2] = a7;
  uint64_t v10 = *(void *)(a5 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v13, v11);
  v15[3] = a2;
  ForEach.init(_:idGenerator:content:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a1, a5);
}

{
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  void v15[4];

  v15[1] = a6;
  void v15[2] = a7;
  uint64_t v10 = *(void *)(a5 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v13, v11);
  v15[3] = a2;
  ForEach.init(_:idGenerator:content:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a1, a5);
}

double ForEach<>.init<>(_:content:)@<D0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  *(void *)&double result = ForEach<>.init<>(_:content:)(a1, a2, a3, a4, a5).n128_u64[0];
  return result;
}

{
  double result;

  *(void *)&double result = ForEach<>.init<>(_:content:)(a1, a2, a3, a4, a5).n128_u64[0];
  return result;
}

uint64_t sub_187768CA4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned Int) -> (@out C)(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 32))(*a1);
}

{
  uint64_t v1;

  return (*(uint64_t (**)(void))(v1 + 40))(*a1);
}

void type metadata accessor for Range<Int>()
{
  if (!lazy cache variable for type metadata for Range<Int>)
  {
    unint64_t v0 = type metadata accessor for Range();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Range<Int>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>)
  {
    type metadata accessor for Range<Int>();
    lazy protocol witness table accessor for type Int and conformance Int();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>)
  {
    type metadata accessor for Range<Int>();
    lazy protocol witness table accessor for type Int and conformance Int();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
  }
  return result;
}

uint64_t key path getter for Identifiable.id : <A, B, C>A.Element()
{
  return dispatch thunk of Identifiable.id.getter();
}

uint64_t sub_18776906C()
{
  return key path getter for Identifiable.id : <A, B, C>A.Element();
}

uint64_t sub_187769084()
{
  return 48;
}

__n128 sub_187769090(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

__n128 ForEach<>.init<>(_:content:)@<Q0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v10 = (void *)swift_allocObject();
  _OWORD v10[2] = a3;
  _OWORD v10[3] = a4;
  void v10[4] = a1;
  v10[5] = a2;
  type metadata accessor for Range<Int>();
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  ForEach.init(_:idGenerator:content:)();
  __n128 result = v13;
  *(_OWORD *)a5 = v12;
  *(__n128 *)(a5 + 16) = v13;
  *(_OWORD *)(a5 + 32) = v14;
  *(void *)(a5 + 48) = v15;
  return result;
}

_UNKNOWN **associated type witness table accessor for ToolbarContent.Body : ToolbarContent in <> ForEach<A, B, C>()
{
  return &protocol witness table for Never;
}

uint64_t instantiation function for generic protocol witness table for <> ForEach<A, B, C>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **associated type witness table accessor for ToolbarContent.Body : CustomizableToolbarContent in <> ForEach<A, B, C>()
{
  return &protocol witness table for Never;
}

uint64_t type metadata accessor for ForEach<>.PreferenceTransform()
{
  return swift_getGenericMetadata();
}

uint64_t outlined retain of ForEach<A, B, C><>.PreferenceTransform(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 88);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v3 = v2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t type metadata accessor for ForEach<>.PreferenceTransform.Item()
{
  return swift_getGenericMetadata();
}

uint64_t assignWithCopy for ForEach<>.PreferenceTransform.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for ForEach<>.PreferenceTransform.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t destroy for ForEach<>.PreferenceTransform(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ForEach<>.PreferenceTransform(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v3;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  uint64_t v5 = *(void **)(a2 + 88);
  uint64_t v4 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = v5;
  *(void *)(a1 + 96) = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v6 = v5;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ForEach<>.PreferenceTransform(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  uint64_t v4 = *(void **)(a2 + 88);
  uint64_t v5 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = v4;
  id v6 = v4;

  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ForEach<>.PreferenceTransform(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);

  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ForEach<>.PreferenceTransform(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ForEach<>.PreferenceTransform(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in ForEach<A, B, C><>.PreferenceTransform()
{
  return swift_getWitnessTable();
}

uint64_t sub_1877698C4()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 40))
  {
    swift_release();
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ForEach<>.PreferenceTransform.updateValue()()
{
  return closure #1 in ForEach<>.PreferenceTransform.updateValue()(*(void *)(v0 + 64), *(void **)(v0 + 72), *(void *)(v0 + 80), *(uint64_t **)(v0 + 88), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void **)(v0 + 56));
}

BOOL partial apply for closure #2 in ForEach<>.PreferenceTransform.updateValue()()
{
  swift_bridgeObjectRetain();
  char v0 = Set.contains(_:)();
  swift_bridgeObjectRelease();
  return (v0 & 1) == 0;
}

uint64_t partial apply for closure #3 in ForEach<>.PreferenceTransform.updateValue()(uint64_t *a1)
{
  return closure #3 in ForEach<>.PreferenceTransform.updateValue()(a1, v1);
}

uint64_t partial apply for closure #1 in Attribute.setValue(_:)@<X0>(unsigned char *a1@<X8>)
{
  return closure #1 in Attribute.setValue(_:)(a1);
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFSi_s5NeverOSbTg5(void *(*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    return 2;
  }
  uint64_t v6 = a3;
  uint64_t result = (uint64_t)a1(&var1, &v6);
  if (!v4) {
    return var1;
  }
  return result;
}

void *_sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFSi_s5NeverOSiSgTg5(void *(*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    return 0;
  }
  uint64_t v6 = a3;
  uint64_t result = a1(&v7, &v6);
  if (!v4) {
    return (void *)v7;
  }
  return result;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF5UIKit24UICellConfigurationStateV_s5NeverOAD012UIBackgroundE0VTg5@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = type metadata accessor for UICellConfigurationState();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UICellConfigurationState?(0);
  MEMORY[0x1F4188790](v10 - 8);
  long long v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ScrollableCollection?(v2, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for UICellConfigurationState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
  {
    uint64_t v13 = type metadata accessor for UIBackgroundConfiguration();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a2, 1, 1, v13);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
    a1(v9);
    if (v3)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      uint64_t v15 = type metadata accessor for UIBackgroundConfiguration();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a2, 0, 1, v15);
    }
  }
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI7BindingVySbG_s5NeverOytTg5(void (*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!a4) {
    return a4 == 0;
  }
  v9[0] = a3;
  v9[1] = a4;
  char v10 = a5 & 1;
  swift_retain();
  swift_retain();
  a1(&v11, v9);
  swift_release();
  uint64_t result = swift_release();
  if (!v5) {
    return a4 == 0;
  }
  return result;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI23RootEnvironmentModifier33_4475FD12FD59DEBA453321BD91F6EA04LLV_s5NeverOSbTg5(void (*a1)(uint64_t *__return_ptr, unsigned char *))
{
  outlined init with copy of AccessibilityScrollableContext?(v1, (uint64_t)v6, &lazy cache variable for type metadata for RootEnvironmentModifier?, (uint64_t)&type metadata for RootEnvironmentModifier, MEMORY[0x1E4FBB718]);
  if (v6[24] == 3) {
    return 2;
  }
  outlined init with take of RootEnvironmentModifier((uint64_t)v6, (uint64_t)v5);
  a1(&v7, v5);
  uint64_t result = outlined destroy of RootEnvironmentModifier((uint64_t)v5);
  if (!v2) {
    return v7;
  }
  return result;
}

uint64_t _ScrollableLayoutView.init(data:layout:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v23 = a8;
  uint64_t v24 = a2;
  uint64_t v16 = *(void *)(a3 - 8);
  double v17 = MEMORY[0x1F4188790](a1);
  uint64_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v16 + 16))(v19, a1, v17);
  uint64_t v20 = dispatch thunk of Collection.count.getter();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a9, v19, a3);
  *(void *)(a9 + *(int *)(swift_getTupleTypeMetadata2() + 48)) = v20;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  uint64_t v29 = a7;
  uint64_t v30 = v23;
  uint64_t v21 = type metadata accessor for _ScrollableLayoutView();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a9 + *(int *)(v21 + 68), v24, a4);
}

uint64_t static _ScrollableLayoutView._makeView(view:inputs:)@<X0>(unsigned int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v83 = a9;
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8);
  uint64_t v94 = (uint64_t *)((char *)&v73 - v18);
  *(void *)&long long v128 = a3;
  *((void *)&v128 + 1) = a4;
  uint64_t v91 = a4;
  *(void *)&long long v129 = a5;
  *((void *)&v129 + 1) = a6;
  uint64_t v99 = a6;
  *(void *)&long long v130 = a7;
  *((void *)&v130 + 1) = a8;
  uint64_t v19 = type metadata accessor for ScrollableLayoutState();
  uint64_t v81 = *(void *)(v19 - 8);
  uint64_t v82 = v19;
  MEMORY[0x1F4188790](v19);
  uint64_t v80 = (uint64_t)&v73 - v20;
  unsigned int v96 = *a1;
  long long v21 = a2[1];
  long long v128 = *a2;
  long long v129 = v21;
  long long v22 = a2[3];
  long long v130 = a2[2];
  *(_OWORD *)uint64_t v131 = v22;
  *(_OWORD *)&v131[16] = a2[4];
  *((void *)&v21 + 1) = *(void *)&v131[24];
  *(_DWORD *)&v131[32] = *((_DWORD *)a2 + 20);
  *(void *)&long long v21 = *((void *)&v128 + 1);
  id v90 = (id)v128;
  uint64_t v119 = v128;
  long long v89 = v21;
  int v120 = DWORD2(v128);
  uint64_t v88 = v129;
  long long v121 = v129;
  unsigned int v86 = HIDWORD(v129);
  unsigned int v87 = DWORD2(v129);
  uint64_t v84 = *((void *)&v130 + 1);
  uint64_t v123 = *((void *)&v130 + 1);
  uint64_t v124 = v22;
  int v125 = DWORD2(v22);
  long long v126 = *(_OWORD *)&v131[12];
  uint64_t v127 = *(void *)&v131[28];
  unsigned int v95 = DWORD1(v130);
  unsigned int v85 = v130;
  unint64_t v122 = v130 & 0xFFFFFFFDFFFFFFFFLL;
  uint64_t v78 = *(void *)(*(void *)(a5 + 8) + 8);
  uint64_t v98 = a3;
  v106[2] = swift_getAssociatedTypeWitness();
  outlined retain of _ViewInputs((uint64_t)&v128);
  uint64_t v23 = type metadata accessor for External();
  uint64_t v24 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v24, (uint64_t)partial apply for closure #1 in Attribute.init(type:), (uint64_t)v106, v23, MEMORY[0x1E4FBC248], v24, MEMORY[0x1E4FBC278], v25);
  uint64_t v79 = 0;
  unsigned int v26 = v113;
  LODWORD(v113) = 0;
  uint64_t v27 = MEMORY[0x1E4FBC4C0];
  type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for External<UInt32>, MEMORY[0x1E4FBC4C0], MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<UInt32> and conformance External<A>(&lazy protocol witness table cache variable for type External<UInt32> and conformance External<A>, &lazy cache variable for type metadata for External<UInt32>, v27);
  unsigned int v28 = Attribute.init<A>(body:value:flags:update:)();
  id v29 = (id)AGSubgraphGetCurrent();
  if (!v29)
  {
    __break(1u);
LABEL_7:
    __break(1u);
  }
  uint64_t v30 = v29;
  id v31 = (id)AGSubgraphGetGraph();

  int v32 = (void *)AGSubgraphCreate();
  AGGraphClearUpdate();
  id v33 = (id)AGSubgraphGetCurrent();
  id v75 = v32;
  AGSubgraphSetCurrent();
  unsigned int v76 = v28;
  unsigned int v77 = v26;
  uint64_t v34 = v98;
  uint64_t v35 = v99;
  uint64_t v36 = v91;
  closure #1 in static _ScrollableLayoutView._makeView(view:inputs:)((uint64_t)&v119);
  AGSubgraphSetCurrent();

  uint64_t v37 = AGGraphSetUpdate();
  long long v92 = &v73;
  uint64_t v38 = *((void *)&v113 + 1);
  uint64_t v74 = v113;
  MEMORY[0x1F4188790](v37);
  uint64_t v93 = &v66;
  LODWORD(v103) = v96;
  *(void *)&long long v113 = v34;
  *((void *)&v113 + 1) = v36;
  *(void *)&long long v114 = a5;
  *((void *)&v114 + 1) = v35;
  *(void *)&long long v115 = a7;
  *((void *)&v115 + 1) = a8;
  type metadata accessor for _ScrollableLayoutView();
  type metadata accessor for _GraphValue();
  swift_getTupleTypeMetadata2();
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue();
  uint64_t v39 = _GraphValue.value.getter();
  LODWORD(v93) = v39;
  MEMORY[0x1F4188790](v39);
  uint64_t v67 = v34;
  uint64_t v68 = v36;
  uint64_t v40 = v35;
  uint64_t v41 = v36;
  long long v92 = (uint64_t *)a5;
  uint64_t v69 = a5;
  uint64_t v70 = v40;
  uint64_t v97 = a7;
  uint64_t WitnessTable = a7;
  uint64_t v72 = a8;
  LODWORD(v113) = v96;
  _GraphValue.subscript.getter();
  *(void *)&long long v113 = v90;
  *((void *)&v113 + 1) = v89;
  *(void *)&long long v114 = v88;
  *((void *)&v114 + 1) = __PAIR64__(v86, v87);
  *(void *)&long long v115 = __PAIR64__(v95, v85);
  *((void *)&v115 + 1) = v84;
  unsigned int v96 = static Animatable.makeAnimatable(value:inputs:)();
  outlined retain of _ViewInputs((uint64_t)&v128);
  lazy protocol witness table accessor for type _ViewInputs.ContainingScrollViewInput and conformance _ViewInputs.ContainingScrollViewInput();
  PropertyList.subscript.getter();
  outlined release of _ViewInputs((uint64_t)&v128);
  if (BYTE8(v113)) {
    goto LABEL_7;
  }
  *(void *)&long long v89 = v113;
  *(void *)&long long v113 = __PAIR64__(v76, v77);
  *((void *)&v113 + 1) = v75;
  *(void *)&long long v114 = v74;
  *((void *)&v114 + 1) = v38;
  uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v40 + 40);
  id v90 = v75;
  v42(v41, v40);
  uint64_t v43 = v98;
  swift_getAssociatedTypeWitness();
  uint64_t v44 = Array.init()();
  uint64_t v45 = Dictionary.init()();
  double v46 = *MEMORY[0x1E4F1DB20];
  double v47 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
  double v48 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
  double v49 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  uint64_t v72 = a8;
  uint64_t v50 = v97;
  uint64_t v70 = v40;
  uint64_t WitnessTable = v97;
  uint64_t v51 = (uint64_t)v92;
  uint64_t v68 = v41;
  uint64_t v69 = (uint64_t)v92;
  uint64_t v67 = v43;
  uint64_t v52 = a8;
  uint64_t v53 = v80;
  uint64_t v54 = ScrollableLayoutState.init(data:layout:scrollView:template:state:stateSeed:proxyStorage:identifiers:placements:validSize:validRect:contentSize:)((int)v93, v96, v89, (uint64_t)&v113, (uint64_t)v94, 0, 0, MEMORY[0x1E4FBC868], v80, 0.0, 0.0, v46, v47, v48, v49, 0.0, 0.0, v44, v45);
  uint64_t v94 = &v73;
  MEMORY[0x1F4188790](v54);
  *(void *)&long long v113 = v43;
  *((void *)&v113 + 1) = v41;
  *(void *)&long long v114 = v51;
  *((void *)&v114 + 1) = v99;
  *(void *)&long long v115 = v50;
  *((void *)&v115 + 1) = v52;
  uint64_t v55 = type metadata accessor for ScrollableLayoutState.Value();
  uint64_t v56 = v82;
  uint64_t v69 = v55;
  uint64_t v70 = v82;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v57 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v53, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)&v67, v56, MEMORY[0x1E4FBC248], v57, MEMORY[0x1E4FBC278], v58);
  uint64_t v59 = v52;
  (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v53, v56);
  int v60 = v113;
  uint64_t v61 = v97;
  uint64_t v62 = default argument 3 of ScrollableLayoutViewAdaptor.init(dataAndCount:layout:state:items:itemsSeed:lastContentOffset:)();
  *(void *)&long long v103 = __PAIR64__(v96, v93);
  DWORD2(v103) = v60;
  *(void *)&long long v104 = v62;
  DWORD2(v104) = 0;
  long long v105 = *MEMORY[0x1E4F1DB10];
  long long v100 = v103;
  long long v101 = v104;
  long long v102 = v105;
  long long v115 = v130;
  long long v116 = *(_OWORD *)v131;
  long long v117 = *(_OWORD *)&v131[16];
  int v118 = *(_DWORD *)&v131[32];
  long long v113 = v128;
  long long v114 = v129;
  uint64_t v107 = v43;
  uint64_t v108 = v41;
  uint64_t v63 = v99;
  uint64_t v109 = v51;
  uint64_t v110 = v99;
  uint64_t v111 = v61;
  uint64_t v112 = v59;
  type metadata accessor for ScrollableLayoutViewAdaptor();
  swift_getWitnessTable();
  static DynamicContainer.makeContainer<A>(adaptor:inputs:)();
  outlined release of PlacementProperties<LazyHGridLayout>((uint64_t)&v103);
  if ((v95 & 2) != 0)
  {
    closure #4 in static _ScrollableLayoutView._makeView(view:inputs:)(1, v98, v41, (uint64_t)v92, v63, v97, v59);
    LODWORD(v113) = AGGraphCreateOffsetAttribute2();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type ScrollableItemLayoutComputer and conformance ScrollableItemLayoutComputer();
    Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v113) = 0;
    _ViewOutputs.layoutComputer.setter();
  }

  int v64 = v83;
  *uint64_t v83 = v107;
  v64[1] = v108;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for ScrollableLayoutState()
{
  return swift_getGenericMetadata();
}

uint64_t closure #1 in static _ScrollableLayoutView._makeView(view:inputs:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  swift_beginAccess();
  int v2 = *(_DWORD *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  long long v12 = *(_OWORD *)(v1 + 48);
  long long v13 = *(_OWORD *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(v1 + 72);
  char v6 = *(unsigned char *)(v1 + 80);
  char v7 = *(unsigned char *)(v1 + 81);
  uint64_t v8 = *(void *)(v1 + 88);
  type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, MEMORY[0x1E4F3FEE0], MEMORY[0x1E4F3F398]);
  uint64_t v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = v2;
  *(void *)(v9 + 24) = v3;
  *(_OWORD *)(v9 + 32) = v13;
  *(_OWORD *)(v9 + 48) = v12;
  *(void *)(v9 + 64) = v5;
  *(void *)(v9 + 72) = v4;
  *(unsigned char *)(v9 + 80) = v6;
  *(unsigned char *)(v9 + 81) = v7;
  *(void *)(v9 + 88) = v8;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v10 = MEMORY[0x1E4F3F560];
  type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for External<Transaction>, MEMORY[0x1E4F3F560], MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<UInt32> and conformance External<A>(&lazy protocol witness table cache variable for type External<Transaction> and conformance External<A>, &lazy cache variable for type metadata for External<Transaction>, v10);
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.transaction.setter();
  _ViewInputs.viewPhase.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type TemplateViewPhase and conformance TemplateViewPhase();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.viewPhase.setter();
  PreferenceKeys.init()();
  swift_bridgeObjectRelease();
  swift_getAssociatedTypeWitness();
  _GraphValue.init(_:)();
  static View.makeDebuggableView(view:inputs:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #2 in static _ScrollableLayoutView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v17 = a6;
  uint64_t v18 = a7;
  _OWORD v11[2] = type metadata accessor for _ScrollableLayoutView();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v11, TupleTypeMetadata2, MEMORY[0x1E4FBC248], v8, MEMORY[0x1E4FBC278], v9);
  return v13;
}

uint64_t closure #3 in static _ScrollableLayoutView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  uint64_t v20 = a7;
  uint64_t v9 = type metadata accessor for _ScrollableLayoutView();
  uint64_t v10 = a1 + *(int *)(v9 + 68);
  void v14[2] = v9;
  v14[3] = a3;
  uint64_t v11 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v10, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v14, a3, MEMORY[0x1E4FBC248], v11, MEMORY[0x1E4FBC278], v12);
  return v15;
}

uint64_t ScrollableLayoutState.init(data:layout:scrollView:template:state:stateSeed:proxyStorage:identifiers:placements:validSize:validRect:contentSize:)@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, double a14@<D4>, double a15@<D5>, double a16@<D6>, double a17@<D7>, uint64_t a18, uint64_t a19)
{
  *(_DWORD *)a9 = a1;
  *(_DWORD *)(a9 + 4) = a2;
  *(_DWORD *)(a9 + 8) = a3;
  *(void *)(a9 + 16) = *(void *)a4;
  *(_OWORD *)(a9 + 24) = *(_OWORD *)(a4 + 8);
  *(void *)(a9 + 40) = *(void *)(a4 + 24);
  id v31 = (int *)type metadata accessor for ScrollableLayoutState();
  uint64_t v32 = a9 + v31[20];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(v32, a5, AssociatedTypeWitness);
  *(_DWORD *)(a9 + v31[21]) = a6;
  uint64_t v35 = a9 + v31[22];
  *(_DWORD *)uint64_t v35 = a7;
  *(void *)(v35 + 8) = a8;
  *(void *)(a9 + v31[23]) = a18;
  *(void *)(a9 + v31[24]) = a19;
  uint64_t v36 = (double *)(a9 + v31[25]);
  *uint64_t v36 = a10;
  v36[1] = a11;
  uint64_t v37 = (double *)(a9 + v31[26]);
  *uint64_t v37 = a12;
  v37[1] = a13;
  v37[2] = a14;
  void v37[3] = a15;
  uint64_t v38 = (double *)(a9 + v31[27]);
  *uint64_t v38 = a16;
  v38[1] = a17;
  return result;
}

uint64_t default argument 3 of ScrollableLayoutViewAdaptor.init(dataAndCount:layout:state:items:itemsSeed:lastContentOffset:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();

  return Array.init()();
}

uint64_t closure #4 in static _ScrollableLayoutView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v20 = a6;
  uint64_t v21 = a7;
  uint64_t v8 = type metadata accessor for ScrollableLayoutState.Value();
  uint64_t v9 = a1 + *(int *)(v8 + 92);
  void v15[2] = v8;
  type metadata accessor for CGSize(0);
  uint64_t v11 = v10;
  uint64_t v12 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v9, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_2, (uint64_t)v15, v11, MEMORY[0x1E4FBC248], v12, MEMORY[0x1E4FBC278], v13);
  return v16;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _ScrollableLayoutView<A, B>@<X0>(unsigned int *a1@<X0>, long long *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  return static _ScrollableLayoutView._makeView(view:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _ScrollableLayoutView<A, B>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _ScrollableLayoutView<A, B>()
{
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance _ScrollableLayoutView<A, B>()
{
}

uint64_t _ScrollableLayoutView.scrollableContent.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t _ScrollableLayoutView.decelerationTarget(contentOffset:originalContentOffset:velocity:size:)(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 64))(*(void *)(a1 + 24));
}

uint64_t protocol witness for _ScrollableContentProvider.decelerationTarget(contentOffset:originalContentOffset:velocity:size:) in conformance _ScrollableLayoutView<A, B>(uint64_t a1)
{
  return _ScrollableLayoutView.decelerationTarget(contentOffset:originalContentOffset:velocity:size:)(a1);
}

uint64_t ScrollableLayoutViewAdaptor.dataAndCount.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  char v6 = (char *)&v12 - v5;
  uint64_t Value = AGGraphGetValue();
  uint64_t v8 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v9 = *(void *)(v3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v6, Value, v3);
  uint64_t v10 = *(void *)(Value + v8);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v6, v3);
  return v10;
}

uint64_t ScrollableLayoutViewAdaptor.updatedItems()(void *a1)
{
  uint64_t v3 = a1[4];
  uint64_t v4 = *(void *)(*(void *)(v3 + 8) + 8);
  uint64_t v5 = a1[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v142 = v4;
  uint64_t v7 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  long long v140 = (char *)&v115 - v8;
  uint64_t v141 = v7;
  uint64_t v132 = *(void (***)(char *, uint64_t))(v7 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v139 = (char *)&v115 - v10;
  *(void *)&long long v143 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v138 = (char *)&v115 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = v12;
  MEMORY[0x1F4188790](v13);
  *(void *)&long long v151 = (char *)&v115 - v14;
  uint64_t v116 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v15);
  *(void *)&long long v144 = (char *)&v115 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = a1[3];
  uint64_t v18 = a1[5];
  uint64_t v19 = a1[6];
  uint64_t v136 = a1;
  uint64_t v20 = a1[7];
  uint64_t v145 = v5;
  *(void *)&long long v152 = v5;
  *((void *)&v152 + 1) = v17;
  uint64_t v129 = v17;
  uint64_t v121 = v3;
  *(void *)&long long v153 = v3;
  *((void *)&v153 + 1) = v18;
  uint64_t v127 = v18;
  uint64_t v120 = v19;
  *(void *)&long long v154 = v19;
  *((void *)&v154 + 1) = v20;
  uint64_t v119 = v20;
  uint64_t v21 = type metadata accessor for ScrollableLayoutState.Value();
  uint64_t v22 = swift_getTupleTypeMetadata2();
  uint64_t v124 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v137 = (char *)&v115 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  *(void *)&long long v150 = (char *)&v115 - v25;
  MEMORY[0x1F4188790](v26);
  unsigned int v28 = (char *)&v115 - v27;
  MEMORY[0x1F4188790](v29);
  id v31 = (char *)&v115 - v30;
  *(void *)&long long v149 = *(int *)(v32 + 48);
  long long v128 = v1;
  uint64_t Value = AGGraphGetValue();
  LOBYTE(v5) = v34;
  *(void *)&long long v148 = v34;
  uint64_t v35 = *(void *)(v21 - 8);
  uint64_t v37 = v35 + 16;
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 16);
  v36(v31, Value, v21);
  int v38 = v5 & 1;
  v31[v149] = v5 & 1;
  uint64_t v130 = v22;
  uint64_t v39 = *(int *)(v22 + 48);
  v36(v28, (uint64_t)v31, v21);
  int v126 = v38;
  v28[v39] = v38;
  uint64_t v42 = *(void (**)(char *, int *))(v35 + 8);
  uint64_t v41 = v35 + 8;
  uint64_t v40 = v42;
  v42(v28, (int *)v21);
  uint64_t v147 = v36;
  uint64_t v43 = (int *)v21;
  uint64_t v123 = v28;
  uint64_t v125 = v37;
  if ((v148 & 1) == 0
    || (uint64_t v44 = *(int *)(v130 + 48),
        v147(v28, (uint64_t)v31, (uint64_t)v43),
        v28[v44] = 1,
        LODWORD(v44) = *(_DWORD *)&v28[v43[17]],
        v40(v28, v43),
        int v45 = *((_DWORD *)v128 + 6),
        v44 == v45))
  {
    uint64_t v46 = swift_getAssociatedTypeWitness();
    uint64_t v47 = MEMORY[0x1E4F3F740];
    uint64_t v48 = v130;
    uint64_t v49 = *(int *)(v130 + 48);
    uint64_t v50 = (char *)v150;
    v147((char *)v150, (uint64_t)v31, (uint64_t)v43);
    uint64_t v51 = v50;
    char v52 = v126;
    v50[v49] = v126;
    BOOL v53 = v46 == v47;
    uint64_t v54 = v48;
    uint64_t v55 = v31;
    if (v53)
    {
      uint64_t v70 = *(void (**)(uint64_t, uint64_t))(v124 + 8);
      v70((uint64_t)v51, v48);
      goto LABEL_9;
    }
    char v56 = v52;
    uint64_t v57 = *(int *)(v48 + 48);
    uint64_t v58 = v40;
    uint64_t v59 = v137;
    v147(v137, (uint64_t)v51, (uint64_t)v43);
    v59[v57] = v56;
    int v60 = &v59[v43[19]];
    long long v151 = *(_OWORD *)v60;
    long long v149 = *((_OWORD *)v60 + 1);
    long long v148 = *((_OWORD *)v60 + 2);
    long long v144 = *((_OWORD *)v60 + 3);
    long long v143 = *((_OWORD *)v60 + 4);
    uint64_t v61 = *((void *)v60 + 10);
    uint64_t v62 = *((void *)v60 + 11);
    uint64_t v118 = v41;
    long long v117 = v58;
    v58(v59, v43);
    long long v152 = v151;
    long long v153 = v149;
    long long v154 = v148;
    long long v155 = v144;
    long long v156 = v143;
    uint64_t v157 = v61;
    uint64_t v158 = v62;
    _ScrollLayout.contentOffset.getter();
    int v64 = v128;
    uint64_t v65 = v124;
    uint64_t v66 = v43;
    if (v67 == *((double *)v128 + 4) && v63 == *((double *)v128 + 5))
    {
      AGGraphGetValue();
      char v69 = v68;
      uint64_t v70 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
      v70(v150, v54);
      uint64_t v71 = v54;
      uint64_t v72 = v123;
      if ((v69 & 1) == 0)
      {
        uint64_t v54 = v71;
LABEL_9:
        v70((uint64_t)v55, v54);
        return 0;
      }
    }
    else
    {
      (*(void (**)(void, uint64_t))(v124 + 8))(v150, v54);
      uint64_t v71 = v54;
      uint64_t v72 = v123;
    }
LABEL_22:
    uint64_t v97 = *(int *)(v71 + 48);
    uint64_t v98 = v71;
    uint64_t v99 = (uint64_t (*)(char *, char *, int *))v147;
    v147(v72, (uint64_t)v55, (uint64_t)v66);
    unint64_t v122 = v55;
    char v100 = v126;
    v72[v97] = v126;
    long long v101 = &v72[v66[19]];
    long long v151 = *(_OWORD *)v101;
    long long v150 = *((_OWORD *)v101 + 1);
    long long v149 = *((_OWORD *)v101 + 2);
    long long v148 = *((_OWORD *)v101 + 3);
    long long v144 = *((_OWORD *)v101 + 4);
    uint64_t v102 = *((void *)v101 + 10);
    uint64_t v103 = *((void *)v101 + 11);
    v117(v72, v66);
    long long v152 = v151;
    long long v153 = v150;
    long long v154 = v149;
    long long v155 = v148;
    long long v156 = v144;
    uint64_t v157 = v102;
    uint64_t v158 = v103;
    _ScrollLayout.contentOffset.getter();
    v64[4] = v104;
    v64[5] = v105;
    *(void *)&long long v152 = v64[2];
    uint64_t v106 = *(int *)(v98 + 48);
    uint64_t v107 = v99(v72, v55, v66);
    v72[v106] = v100;
    MEMORY[0x1F4188790](v107);
    uint64_t v108 = v129;
    *(&v115 - 8) = v145;
    *(&v115 - 7) = v108;
    uint64_t v109 = v127;
    *(&v115 - 6) = v121;
    *(&v115 - 5) = v109;
    uint64_t v110 = v119;
    *(&v115 - 4) = v120;
    *(&v115 - 3) = v110;
    *(&v115 - 2) = (uint64_t)v72;
    *(&v115 - 1) = (uint64_t)v64;
    uint64_t v111 = type metadata accessor for Array();
    swift_bridgeObjectRetain();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v73 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ScrollableLayoutViewAdaptor.updatedItems(), (uint64_t)(&v115 - 10), v111, (uint64_t)&type metadata for AnyDynamicItem, MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v113);
    swift_bridgeObjectRelease();
    long long v114 = *(void (**)(char *, uint64_t))(v65 + 8);
    v114(v122, v98);
    v114(v72, v98);
    return v73;
  }
  int v74 = *((_DWORD *)v128 + 2);
  uint64_t v76 = v128[2];
  id v75 = (char *)(v128 + 2);
  uint64_t v159 = *v128;
  int v160 = v74;
  uint64_t v161 = v76;
  int v162 = v45;
  long long v163 = *((_OWORD *)v128 + 2);
  unsigned int v77 = v40;
  ScrollableLayoutViewAdaptor.dataAndCount.getter(v144, (uint64_t)v136);
  uint64_t v136 = (void *)type metadata accessor for Array();
  uint64_t v137 = v75;
  Array.removeAll(keepingCapacity:)(1);
  uint64_t v78 = *(int *)(v130 + 48);
  unint64_t v122 = v31;
  uint64_t v79 = v31;
  uint64_t v80 = (void (*)(char *, char *, int *))v147;
  v147(v28, (uint64_t)v79, (uint64_t)v43);
  v28[v78] = 1;
  uint64_t v81 = *(void *)&v28[v43[20]];
  swift_bridgeObjectRetain();
  uint64_t v118 = v41;
  long long v117 = v77;
  v77(v28, v43);
  uint64_t v66 = v43;
  uint64_t v82 = v80;
  if (!MEMORY[0x18C115CB0](v81, AssociatedTypeWitness))
  {
LABEL_20:
    swift_bridgeObjectRelease();
    (*(void (**)(void, uint64_t))(v116 + 8))(v144, v145);
    uint64_t v95 = v130;
    uint64_t v96 = *(int *)(v130 + 48);
    uint64_t v72 = v123;
    uint64_t v55 = v122;
    v82(v123, v122, v66);
    v72[v96] = 1;
    LODWORD(v96) = *(_DWORD *)&v72[v66[17]];
    v117(v72, v66);
    uint64_t v71 = v95;
    int v64 = v128;
    *((_DWORD *)v128 + 6) = v96;
    uint64_t v65 = v124;
    goto LABEL_22;
  }
  uint64_t v83 = 0;
  *(void *)&long long v150 = v143 + 16;
  char v134 = (void (**)(char *, void, uint64_t))(v143 + 32);
  int v133 = (void (**)(char *))(v132 + 2);
  ++v132;
  uint64_t v131 = (void (**)(char *, uint64_t))(v143 + 8);
  uint64_t v135 = v43;
  uint64_t v84 = v139;
  uint64_t v85 = v141;
  while (1)
  {
    Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (IsNativeType)
    {
      unsigned int v87 = *(void (**)(void, unint64_t, uint64_t))(v143 + 16);
      v87(v151, v81+ ((*(unsigned __int8 *)(v143 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v143 + 80))+ *(void *)(v143 + 72) * v83, AssociatedTypeWitness);
      uint64_t v88 = v83 + 1;
      if (__OFADD__(v83, 1)) {
        goto LABEL_19;
      }
      goto LABEL_14;
    }
    uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
    if (v115 != 8) {
      break;
    }
    *(void *)&long long v152 = result;
    unsigned int v87 = *(void (**)(void, unint64_t, uint64_t))v150;
    (*(void (**)(void, long long *, uint64_t))v150)(v151, &v152, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    uint64_t v88 = v83 + 1;
    if (__OFADD__(v83, 1))
    {
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
LABEL_14:
    *(void *)&long long v149 = v88;
    long long v89 = v138;
    (*v134)(v138, v151, AssociatedTypeWitness);
    id v90 = (void (*)(long long *, void))dispatch thunk of Collection.subscript.read();
    *(void *)&long long v148 = v87;
    uint64_t v91 = *v133;
    (*v133)(v84);
    v90(&v152, 0);
    long long v92 = &v140[*(int *)(TupleTypeMetadata2 + 48)];
    ((void (*)(char *, char *, uint64_t))v148)(v140, v89, AssociatedTypeWitness);
    ((void (*)(char *, char *, uint64_t))v91)(v92, v84, v85);
    uint64_t v66 = v135;
    Array.append(_:)();
    (*v132)(v84, v85);
    (*v131)(v89, AssociatedTypeWitness);
    uint64_t v93 = MEMORY[0x18C115CB0](v81, AssociatedTypeWitness);
    ++v83;
    uint64_t v82 = (void (*)(char *, char *, int *))v147;
    if ((void)v149 == v93) {
      goto LABEL_20;
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in ScrollableLayoutViewAdaptor.updatedItems()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  uint64_t v193 = a9;
  uint64_t v211 = a8;
  *(void *)&long long v204 = a6;
  *(void *)&long long v183 = a3;
  uint64_t v209 = a2;
  uint64_t v207 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Pair();
  uint64_t v14 = *(void *)(a10 + 8);
  uint64_t v234 = MEMORY[0x1E4FBC4E0];
  uint64_t v235 = v14;
  uint64_t WitnessTable = swift_getWitnessTable();
  *(void *)&long long v227 = AssociatedTypeWitness;
  *((void *)&v227 + 1) = v13;
  *(void *)&long long v228 = a10;
  *((void *)&v228 + 1) = WitnessTable;
  uint64_t v169 = type metadata accessor for AnyViewVisitor();
  uint64_t v166 = *(void *)(v169 - 8);
  MEMORY[0x1F4188790](v169);
  uint64_t v168 = (uint64_t)&v165 - v16;
  uint64_t v214 = swift_getAssociatedTypeWitness();
  *(void *)&long long v227 = v214;
  *((void *)&v227 + 1) = v13;
  uint64_t v17 = v211;
  *(void *)&long long v228 = v211;
  *((void *)&v228 + 1) = WitnessTable;
  uint64_t v197 = WitnessTable;
  uint64_t v18 = type metadata accessor for EquatableProxyView();
  uint64_t v189 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v188 = (uint64_t)&v165 - v19;
  uint64_t v20 = swift_getAssociatedTypeWitness();
  uint64_t v190 = v18;
  uint64_t v21 = v20;
  uint64_t v205 = v20;
  uint64_t v22 = type metadata accessor for ModifiedContent();
  uint64_t v186 = *(void *)(v22 - 8);
  uint64_t v187 = v22;
  MEMORY[0x1F4188790](v22);
  v185 = (char *)&v165 - v23;
  uint64_t v24 = swift_getAssociatedTypeWitness();
  uint64_t v179 = *(void *)(v24 - 8);
  uint64_t v180 = v24;
  MEMORY[0x1F4188790](v24);
  v177 = (char *)&v165 - v25;
  uint64_t v178 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v26);
  v199 = (char *)&v165 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v182 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v28);
  v181 = (char *)&v165 - v29;
  *(void *)&long long v184 = a4;
  *(void *)&long long v227 = a4;
  *((void *)&v227 + 1) = a5;
  uint64_t v200 = a5;
  uint64_t v201 = a7;
  *(void *)&long long v228 = v204;
  *((void *)&v228 + 1) = a7;
  *(void *)&long long v229 = v17;
  *((void *)&v229 + 1) = a10;
  uint64_t v210 = a10;
  uint64_t v203 = type metadata accessor for ScrollableLayoutState.Value();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v176 = (char *)&v165 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v31);
  *(void *)&long long v175 = (char *)&v165 - v32;
  MEMORY[0x1F4188790](v33);
  uint64_t v202 = (char *)&v165 - v34;
  uint64_t v206 = v13;
  uint64_t v196 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v35);
  uint64_t v167 = (char *)&v165 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v37);
  uint64_t v213 = (uint64_t)&v165 - v38;
  uint64_t v39 = AssociatedTypeWitness;
  uint64_t v40 = v214;
  uint64_t v41 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](v41 - 8);
  uint64_t v43 = (char *)&v165 - v42;
  uint64_t v44 = *(void *)(v40 - 8);
  MEMORY[0x1F4188790](v45);
  v172 = (char *)&v165 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v47);
  v212 = (char *)&v165 - v48;
  uint64_t v49 = v39;
  uint64_t v50 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v51);
  v195 = (char *)&v165 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v54 = MEMORY[0x1F4188790](v53);
  char v56 = (char *)&v165 - v55;
  uint64_t v58 = *(int *)(v57 + 56);
  uint64_t v59 = &v43[v58];
  uint64_t v60 = v207 + v58;
  uint64_t v61 = *(void (**)(char *, double))(v50 + 16);
  uint64_t v198 = v50 + 16;
  *(void *)&long long v194 = v61;
  v61(v43, v54);
  uint64_t v62 = v60;
  uint64_t v63 = v214;
  uint64_t v170 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 16);
  uint64_t v171 = v44 + 16;
  v170(v59, v62, v214);
  uint64_t v191 = v50;
  uint64_t v64 = v50;
  uint64_t v65 = v209;
  (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v56, v43, v49);
  uint64_t v192 = v44;
  uint64_t v66 = v203;
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v212, v59, v63);
  uint64_t v67 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v68 = *(void *)(v66 - 8);
  char v69 = (char *)(v68 + 16);
  uint64_t v70 = v202;
  id v174 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 16);
  v174(v202, v65, v66);
  char v71 = *(unsigned char *)(v65 + v67);
  uint64_t v72 = (void (*)(char *, char *, uint64_t))v194;
  uint64_t v73 = v56;
  int v74 = v195;
  id v75 = v70;
  uint64_t v207 = v67;
  v70[v67] = v71;
  LODWORD(v70) = *(_DWORD *)&v70[*(int *)(v66 + 72)];
  uint64_t v78 = *(void (**)(void, void))(v68 + 8);
  uint64_t v76 = v68 + 8;
  unsigned int v77 = v78;
  v78(v75, v66);
  LODWORD(v227) = v70;
  v72(v74, v73, AssociatedTypeWitness);
  Pair.init(_:_:)();
  if (v205 != MEMORY[0x1E4F3F740])
  {
    uint64_t v79 = (uint64_t)v73;
    *(void *)&long long v194 = v77;
    uint64_t v80 = v210;
    _convertToAnyHashable<A>(_:)();
    uint64_t v81 = v209;
    uint64_t v82 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v83 = v175;
    v195 = v69;
    uint64_t v198 = v76;
    uint64_t v84 = v174;
    v174((char *)v175, v209, v66);
    *(unsigned char *)(v83 + v82) = *(unsigned char *)(v81 + v207);
    uint64_t v85 = *(void *)(v83 + *(int *)(v66 + 84));
    swift_bridgeObjectRetain();
    uint64_t v86 = v66;
    unsigned int v87 = (void (*)(char *, uint64_t))v194;
    ((void (*)(uint64_t, uint64_t))v194)(v83, v86);
    uint64_t v173 = v79;
    MEMORY[0x18C115450](&v227, v79, v85, AssociatedTypeWitness, MEMORY[0x1E4F3F428], v80);
    swift_bridgeObjectRelease();
    uint64_t v88 = v87;
    if (v231)
    {
      static UnitPoint.topLeading.getter();
      long long v89 = &v217;
      _Placement.init(proposedSize:anchoring:at:)();
      char v90 = BYTE8(v217);
      uint64_t v91 = v218;
      char v92 = BYTE8(v218);
      long long v93 = v219;
      long long v94 = v220;
    }
    else
    {
      long long v93 = v229;
      long long v94 = v230;
      uint64_t v91 = v228;
      char v90 = BYTE8(v227) & 1;
      char v92 = BYTE8(v228) & 1;
      long long v89 = &v227;
    }
    uint64_t v114 = *(void *)v89;
    long long v227 = v224;
    long long v228 = v225;
    *(void *)&long long v229 = v226;
    *((void *)&v229 + 1) = v114;
    LOBYTE(v230) = v90;
    *((void *)&v230 + 1) = v91;
    char v231 = v92;
    long long v232 = v93;
    long long v233 = v94;
    *(void *)&long long v217 = v184;
    *((void *)&v217 + 1) = v200;
    *(void *)&long long v218 = v204;
    *((void *)&v218 + 1) = v201;
    *(void *)&long long v219 = v211;
    *((void *)&v219 + 1) = v210;
    uint64_t v115 = *(void *)(type metadata accessor for ScrollableLayoutViewAdaptor() + 24);
    uint64_t Value = AGGraphGetValue();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v115 - 8) + 16))(v199, Value, v115);
    uint64_t v118 = TupleTypeMetadata2;
    uint64_t v117 = v209;
    uint64_t v119 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v121 = v202;
    uint64_t v120 = v203;
    v84(v202, v209, v203);
    v121[v119] = *(unsigned char *)(v117 + v207);
    unint64_t v122 = &v121[*(int *)(v120 + 76)];
    long long v204 = *(_OWORD *)v122;
    long long v194 = *((_OWORD *)v122 + 1);
    long long v123 = *((_OWORD *)v122 + 2);
    long long v183 = *((_OWORD *)v122 + 3);
    long long v184 = v123;
    long long v175 = *((_OWORD *)v122 + 4);
    uint64_t v124 = *((void *)v122 + 10);
    uint64_t v125 = *((void *)v122 + 11);
    int v126 = v121;
    uint64_t v127 = v84;
    long long v128 = v88;
    v88(v126, v120);
    long long v217 = v204;
    long long v218 = v194;
    long long v219 = v184;
    long long v220 = v183;
    long long v221 = v175;
    uint64_t v222 = v124;
    uint64_t v223 = v125;
    uint64_t v129 = *(int *)(v118 + 48);
    uint64_t v130 = v176;
    v127(v176, v117, v120);
    v130[v129] = *(unsigned char *)(v117 + v207);
    uint64_t v132 = v179;
    uint64_t v131 = v180;
    int v133 = v177;
    (*(void (**)(char *, char *, uint64_t))(v179 + 16))(v177, v130, v180);
    v128(v130, v120);
    uint64_t v134 = v200;
    uint64_t v135 = v181;
    uint64_t v136 = v199;
    (*(void (**)(long long *, long long *, char *, uint64_t, uint64_t))(v201 + 56))(&v227, &v217, v133, v200, v201);
    (*(void (**)(char *, uint64_t))(v132 + 8))(v133, v131);
    (*(void (**)(char *, uint64_t))(v178 + 8))(v136, v134);
    uint64_t v137 = v188;
    View.equatableProxy<A>(_:)(v213, v214, v206, v188);
    uint64_t v138 = (uint64_t)v185;
    uint64_t v139 = v190;
    uint64_t v140 = v205;
    MEMORY[0x18C113660](v135, v190, v205, &protocol witness table for EquatableProxyView<A, B>);
    (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v137, v139);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v215 = &protocol witness table for EquatableProxyView<A, B>;
    uint64_t v216 = AssociatedConformanceWitness;
    uint64_t v142 = v187;
    uint64_t v143 = swift_getWitnessTable();
    uint64_t v144 = v173;
    uint64_t v145 = AssociatedTypeWitness;
    double v146 = specialized AnyDynamicItem.init<A, B>(_:id:)(v138, v173, v142, AssociatedTypeWitness, v143);
    uint64_t v148 = v147;
    uint64_t v211 = v149;
    LOBYTE(v134) = v150;
    double v110 = v146;
    (*(void (**)(uint64_t, uint64_t))(v186 + 8))(v138, v142);
    (*(void (**)(char *, uint64_t))(v182 + 8))(v135, v140);
    outlined destroy of _ScrollableLayoutItem((uint64_t)&v227);
    (*(void (**)(uint64_t, uint64_t))(v196 + 8))(v213, v206);
    (*(void (**)(char *, uint64_t))(v192 + 8))(v212, v214);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v191 + 8))(v144, v145);
    uint64_t v113 = v193;
    uint64_t v151 = v211;
    *uint64_t v193 = v148;
    v113[1] = v151;
    char v152 = v134 & 1;
    goto LABEL_10;
  }
  uint64_t v95 = (void (*)(uint64_t, uint64_t, uint64_t))v72;
  uint64_t v96 = (uint64_t)v74;
  uint64_t v97 = (uint64_t)v73;
  uint64_t v98 = v212;
  uint64_t v99 = v214;
  v170(v172, (uint64_t)v212, v214);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v153 = v99;
    uint64_t v154 = v188;
    uint64_t v155 = v213;
    uint64_t v156 = v153;
    uint64_t v157 = v206;
    View.equatableProxy<A>(_:)(v213, v153, v206, v188);
    uint64_t v158 = v190;
    uint64_t v159 = AssociatedTypeWitness;
    double v160 = specialized AnyDynamicItem.init<A, B>(_:id:)(v154, v97, v190, AssociatedTypeWitness, (uint64_t)&protocol witness table for EquatableProxyView<A, B>);
    uint64_t v210 = v162;
    uint64_t v211 = v161;
    LODWORD(v209) = v163;
    double v110 = v160;
    (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v154, v158);
    (*(void (**)(uint64_t, uint64_t))(v196 + 8))(v155, v157);
    (*(void (**)(char *, uint64_t))(v192 + 8))(v98, v156);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v191 + 8))(v97, v159);
    uint64_t v113 = v193;
    uint64_t v164 = v210;
    *uint64_t v193 = v211;
    v113[1] = v164;
    char v152 = v209 & 1;
LABEL_10:
    *((unsigned char *)v113 + 16) = v152;
    goto LABEL_11;
  }
  uint64_t v173 = v97;
  uint64_t v100 = AssociatedTypeWitness;
  v95(v96, v97, AssociatedTypeWitness);
  uint64_t v101 = v196;
  uint64_t v102 = (uint64_t)v167;
  uint64_t v103 = v206;
  (*(void (**)(char *, uint64_t, uint64_t))(v196 + 16))(v167, v213, v206);
  uint64_t v104 = v168;
  AnyViewVisitor.init(id:token:item:)(v96, v102, 0, 0, 0, 0, v100, v103, v168);
  uint64_t v105 = v169;
  uint64_t v106 = v104;
  swift_getWitnessTable();
  uint64_t result = AnyView.visitContent<A>(_:)();
  uint64_t v108 = v104 + *(int *)(v105 + 56);
  uint64_t v109 = *(void *)v108;
  if (*(void *)v108)
  {
    double v110 = *(double *)(v108 + 24);
    int v111 = *(_DWORD *)(v108 + 16);
    uint64_t v112 = *(void *)(v108 + 8);
    swift_retain();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v166 + 8))(v106, v105);
    (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v213, v103);
    (*(void (**)(char *, uint64_t))(v192 + 8))(v212, v214);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v191 + 8))(v173, AssociatedTypeWitness);
    uint64_t v113 = v193;
    *uint64_t v193 = v109;
    v113[1] = v112;
    *((unsigned char *)v113 + 16) = v111 & 1;
LABEL_11:
    *((double *)v113 + 3) = v110;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t AnyViewVisitor.init(id:token:item:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(a9, a1, a7);
  uint64_t v16 = type metadata accessor for AnyViewVisitor();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a8 - 8) + 32))(a9 + *(int *)(v16 + 52), a2, a8);
  uint64_t v18 = (void *)(a9 + *(int *)(v16 + 56));
  *uint64_t v18 = a3;
  v18[1] = a4;
  char v18[2] = a5;
  v18[3] = a6;
  return result;
}

uint64_t ScrollableLayoutViewAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, unsigned int a5, uint64_t a6, unsigned int a7, void (*a8)(unint64_t *), uint64_t a9, void *a10)
{
  v92[2] = *MEMORY[0x1E4F143B8];
  unint64_t v12 = *(void *)a6;
  unint64_t v61 = *(void *)(a6 + 16);
  unsigned int v48 = *(_DWORD *)(a6 + 24);
  int v49 = *(_DWORD *)(a6 + 8);
  unsigned int v46 = *(_DWORD *)(a6 + 32);
  unsigned int v47 = *(_DWORD *)(a6 + 28);
  uint64_t v13 = *(void *)(a6 + 40);
  uint64_t v50 = *(void *)(a6 + 48);
  unsigned int v44 = *(_DWORD *)(a6 + 60);
  unsigned int v45 = *(_DWORD *)(a6 + 56);
  unsigned int v54 = *(_DWORD *)(a6 + 68);
  unsigned int v55 = *(_DWORD *)(a6 + 64);
  unsigned int v53 = *(_DWORD *)(a6 + 72);
  unsigned int v51 = *(_DWORD *)(a6 + 36);
  unsigned int v52 = *(_DWORD *)(a6 + 76);
  unsigned int v62 = *(_DWORD *)(a6 + 80);
  unint64_t v84 = v12;
  unint64_t v43 = v12;
  LODWORD(v85) = v49;
  unint64_t v86 = v61;
  unint64_t v87 = __PAIR64__(v47, v48);
  unint64_t v88 = __PAIR64__(v51, v46);
  uint64_t v89 = v13;
  uint64_t v90 = v50;
  *(void *)&long long v91 = __PAIR64__(v44, v45);
  *((void *)&v91 + 1) = __PAIR64__(v54, v55);
  v92[0] = __PAIR64__(v52, v53);
  LODWORD(v92[1]) = v62;
  swift_getKeyPath();
  int v33 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  unint64_t v14 = a10[2];
  unint64_t v15 = a10[4];
  unint64_t v16 = a10[5];
  unint64_t v59 = a10[6];
  uint64_t v57 = a10[3];
  uint64_t v58 = a10[7];
  unsigned int v40 = a7;
  unint64_t v72 = __PAIR64__(a5, a7);
  unsigned int v38 = a5;
  unint64_t v17 = v15;
  unint64_t v60 = v15;
  unint64_t v18 = v14;
  unint64_t v56 = v14;
  swift_getAssociatedTypeWitness();
  v69[2] = type metadata accessor for Optional();
  unint64_t v84 = v18;
  uint64_t v85 = v57;
  unint64_t v86 = v17;
  unint64_t v87 = v16;
  unint64_t v88 = v59;
  uint64_t v89 = v58;
  uint64_t v70 = type metadata accessor for ScrollableItemIdentifier();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v19 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v72, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)v69, v70, MEMORY[0x1E4FBC248], v19, MEMORY[0x1E4FBC278], v20);
  unsigned int v32 = v84;
  unsigned int v35 = *(_DWORD *)(v34 + 8);
  unint64_t v84 = v12;
  LODWORD(v85) = v49;
  unint64_t v86 = v61;
  unint64_t v87 = __PAIR64__(v47, v48);
  unint64_t v88 = __PAIR64__(v51, v46);
  uint64_t v89 = v13;
  uint64_t v90 = v50;
  *(void *)&long long v91 = __PAIR64__(v44, v45);
  *((void *)&v91 + 1) = __PAIR64__(v54, v55);
  v92[0] = __PAIR64__(v52, v53);
  LODWORD(v92[1]) = v62;
  int v31 = _ViewInputs.position.getter();
  unint64_t v84 = v12;
  LODWORD(v85) = v49;
  unint64_t v86 = v61;
  unint64_t v87 = __PAIR64__(v47, v48);
  unint64_t v88 = __PAIR64__(v51, v46);
  uint64_t v89 = v13;
  uint64_t v90 = v50;
  *(void *)&long long v91 = __PAIR64__(v44, v45);
  *((void *)&v91 + 1) = __PAIR64__(v54, v55);
  LODWORD(v92[0]) = v53;
  *(void *)((char *)v92 + 4) = __PAIR64__(v62, v52);
  unsigned int v21 = _ViewInputs.size.getter();
  unsigned int v22 = *MEMORY[0x1E4F4E7A0];
  unint64_t v72 = __PAIR64__(v35, v32);
  int v73 = v33;
  int v74 = v31;
  unint64_t v75 = __PAIR64__(v22, v21);
  unint64_t v84 = v56;
  uint64_t v85 = v57;
  unint64_t v86 = v60;
  unint64_t v87 = v16;
  unint64_t v88 = v59;
  uint64_t v89 = v58;
  uint64_t v67 = type metadata accessor for ScrollableItemGeometry();
  uint64_t v68 = swift_getWitnessTable();
  type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for Attribute<ViewGeometry>, MEMORY[0x1E4F3F668], MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v72, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v66, v67, MEMORY[0x1E4FBC248], v23, MEMORY[0x1E4FBC278], v24);
  uint64_t v25 = v84;
  unint64_t v84 = v43;
  LODWORD(v85) = v49;
  unint64_t v86 = v61;
  unint64_t v87 = __PAIR64__(v47, v48);
  unint64_t v88 = __PAIR64__(v51, v46);
  uint64_t v89 = v13;
  uint64_t v90 = v50;
  *(void *)&long long v91 = __PAIR64__(v44, v45);
  *((void *)&v91 + 1) = __PAIR64__(v54, v55);
  v92[0] = __PAIR64__(v52, v53);
  LODWORD(v92[1]) = v62;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a8(&v84);
  if ((v51 & 0x20) != 0)
  {
    Attribute<A>.size()();
    _ViewInputs.size.setter();
    Attribute<A>.origin()();
    _ViewInputs.position.setter();
    int v26 = HIDWORD(v88) | 2;
    HIDWORD(v88) |= 2u;
  }
  else
  {
    int v26 = HIDWORD(v88);
  }
  unint64_t v72 = v84;
  int v73 = v85;
  unint64_t v75 = v86;
  unint64_t v76 = v87;
  int v77 = v88;
  int v78 = v26;
  uint64_t v79 = v89;
  uint64_t v80 = v90;
  long long v81 = v91;
  uint64_t v82 = v92[0];
  int v83 = v92[1];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v27 = swift_getWitnessTable();
  AnyDynamicItem.makeView<A>(uniqueId:container:inputs:adaptor:)(v38, v40, (uint64_t *)&v72, (uint64_t)a10, a2, a3, a4 & 1, (uint64_t)a10, v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v28 = swift_release();
  MEMORY[0x1F4188790](v28);
  MEMORY[0x1F4188790](v29);
  AGGraphMutateAttribute();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)a1 = v63;
  *(_DWORD *)(a1 + 8) = v64;
  *(_DWORD *)(a1 + 12) = v65;
  return v25;
}

uint64_t closure #1 in ScrollableLayoutViewAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:)(uint64_t a1)
{
  uint64_t v2 = _ViewOutputs.layoutComputer.getter();
  uint64_t result = type metadata accessor for ScrollableItemGeometry();
  if ((v2 & 0x100000000) != 0) {
    int v4 = *MEMORY[0x1E4F4E7A0];
  }
  else {
    int v4 = v2;
  }
  *(_DWORD *)(a1 + 20) = v4;
  return result;
}

uint64_t protocol witness for static DynamicContainerAdaptor.maxUnusedItems.getter in conformance ScrollableLayoutViewAdaptor<A, B>()
{
  return protocol witness for static PreferenceKey._isReadableByHost.getter in conformance AccessibilityLargeContentViewTree.Key();
}

uint64_t protocol witness for DynamicContainerAdaptor.updatedItems() in conformance ScrollableLayoutViewAdaptor<A, B>@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = ScrollableLayoutViewAdaptor.updatedItems()(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for DynamicContainerAdaptor.foreachItem(items:_:) in conformance ScrollableLayoutViewAdaptor<A, B>(uint64_t *a1, void (*a2)(void *))
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 16);
  swift_bridgeObjectRetain();
  if (!v4) {
    return swift_bridgeObjectRelease();
  }
  for (unint64_t i = 0; ; ++i)
  {
    char v6 = specialized Array.subscript.read((uint64_t (*)())v14, i, v3);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    char v10 = *((unsigned char *)v7 + 16);
    uint64_t v11 = v7[3];
    swift_retain();
    uint64_t result = ((uint64_t (*)(void *, void))v6)(v14, 0);
    unint64_t v13 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    v14[0] = v8;
    v14[1] = v9;
    char v15 = v10;
    uint64_t v16 = v11;
    a2(v14);
    swift_release();
    if (v13 == *(void *)(v3 + 16)) {
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for static DynamicContainerAdaptor.containsItem(_:_:) in conformance ScrollableLayoutViewAdaptor<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for External<UInt32>(255, &lazy cache variable for type metadata for [AnyDynamicItem], (uint64_t)&type metadata for AnyDynamicItem, MEMORY[0x1E4FBB320]);
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41000C0](a1, a2, a3, a4, WitnessTable);
}

__n128 ScrollableLayoutState.Value.init(state:stateSeed:contentSeed:scrollLayout:identifiers:placements:validRect:contentSize:)@<Q0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, long long *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>, double a10@<D2>, double a11@<D3>, double a12@<D4>, double a13@<D5>)
{
  long long v34 = a4[1];
  long long v35 = *a4;
  long long v32 = a4[3];
  long long v33 = a4[2];
  __n128 v31 = (__n128)a4[4];
  uint64_t v23 = *((void *)a4 + 10);
  uint64_t v24 = *((void *)a4 + 11);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a7, a1, AssociatedTypeWitness);
  int v26 = (int *)type metadata accessor for ScrollableLayoutState.Value();
  *(_DWORD *)(a7 + v26[17]) = a2;
  *(_DWORD *)(a7 + v26[18]) = a3;
  uint64_t v27 = a7 + v26[19];
  *(_OWORD *)uint64_t v27 = v35;
  *(_OWORD *)(v27 + 16) = v34;
  *(_OWORD *)(v27 + 32) = v33;
  *(_OWORD *)(v27 + 48) = v32;
  __n128 result = v31;
  *(__n128 *)(v27 + 64) = v31;
  *(void *)(v27 + 80) = v23;
  *(void *)(v27 + 88) = v24;
  *(void *)(a7 + v26[20]) = a5;
  *(void *)(a7 + v26[21]) = a6;
  uint64_t v29 = (double *)(a7 + v26[22]);
  *uint64_t v29 = a8;
  v29[1] = a9;
  v29[2] = a10;
  v29[3] = a11;
  uint64_t v30 = (double *)(a7 + v26[23]);
  *uint64_t v30 = a12;
  v30[1] = a13;
  return result;
}

uint64_t protocol witness for DynamicContainerAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:) in conformance ScrollableLayoutViewAdaptor<A, B>(uint64_t a1, _DWORD *a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned int a6, void (*a7)(unint64_t *), uint64_t a8, void *a9)
{
  uint64_t result = ScrollableLayoutViewAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:)(a1, *(void *)a3, *(void *)(a3 + 8), *(unsigned char *)(a3 + 16), a4, a5, a6, a7, a8, a9);
  *a2 = result;
  return result;
}

uint64_t ScrollableLayoutState.updateValue()(int *a1)
{
  uint64_t v260 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)a1 + 5);
  uint64_t v4 = *((void *)a1 + 3);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v192 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v193 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  long long v194 = (char *)&v172 - v6;
  uint64_t v7 = *((void *)a1 + 2);
  uint64_t v8 = *((void *)a1 + 4);
  uint64_t v9 = *((void *)a1 + 6);
  uint64_t v10 = *((void *)a1 + 7);
  uint64_t v207 = a1;
  *(void *)&unsigned long long v247 = v7;
  uint64_t v11 = v7;
  *((void *)&v247 + 1) = v4;
  uint64_t v248 = v8;
  uint64_t v217 = v10;
  uint64_t v218 = v3;
  *(void *)&long long v249 = v3;
  uint64_t v209 = v9;
  *((void *)&v249 + 1) = v9;
  *(void *)&long long v250 = v10;
  uint64_t v12 = type metadata accessor for ScrollableLayoutState.Value();
  uint64_t v196 = *(void *)(v12 - 8);
  uint64_t v197 = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v195 = (uint64_t)&v172 - v13;
  uint64_t v210 = v8;
  uint64_t v186 = swift_getAssociatedTypeWitness();
  uint64_t v173 = *(void *)(v186 - 8);
  MEMORY[0x1F4188790](v186);
  id v174 = (char *)&v172 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  long long v225 = (char *)&v172 - v16;
  uint64_t v212 = v11;
  uint64_t v223 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v17);
  v185 = (char *)&v172 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v222 = (char *)&v172 - v20;
  MEMORY[0x1F4188790](v21);
  long long v183 = (char *)&v172 - v22;
  uint64_t v184 = v23;
  MEMORY[0x1F4188790](v24);
  long long v221 = (char *)&v172 - v25;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v198 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  v181 = (char *)&v172 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v28);
  uint64_t v190 = (char *)&v172 - v29;
  MEMORY[0x1F4188790](v30);
  long long v32 = (char *)&v172 - v31;
  uint64_t v33 = swift_getTupleTypeMetadata2();
  uint64_t v202 = swift_getTupleTypeMetadata2();
  uint64_t v191 = *(void *)(v202 - 8);
  MEMORY[0x1F4188790](v202);
  long long v35 = (char *)&v172 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v36);
  unsigned int v38 = (char *)&v172 - v37;
  uint64_t v224 = *(int *)(v33 + 48);
  uint64_t v40 = *(int *)(v39 + 48);
  uint64_t Value = AGGraphGetValue();
  char v43 = v42;
  uint64_t v188 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16))(v38, Value, v33);
  LODWORD(v187) = v43 & 1;
  v38[v40] = v43 & 1;
  uint64_t v201 = TupleTypeMetadata2;
  uint64_t v44 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v45 = AGGraphGetValue();
  LOBYTE(v40) = v46;
  uint64_t v47 = v4;
  uint64_t v48 = *(void *)(v4 - 8);
  int v49 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
  uint64_t v219 = v47;
  uint64_t v189 = v49;
  v49(v32, (char *)v45, v47);
  uint64_t v50 = v40 & 1;
  uint64_t v211 = v32;
  v32[v44] = v50;
  long long v220 = v1;
  AGGraphGetValue();
  swift_retain();
  _ScrollLayout.init(_:)(&v247);
  unsigned int v51 = (void (*)(char *, char *, uint64_t))*((void *)&v247 + 1);
  unsigned int v52 = (char *)v247;
  uint64_t v53 = v248;
  unsigned int v54 = (char *)v249;
  uint64_t v205 = v250;
  uint64_t v206 = *((void *)&v249 + 1);
  uint64_t v203 = v251;
  uint64_t v204 = *((void *)&v250 + 1);
  uint64_t v215 = v253;
  uint64_t v216 = v252;
  uint64_t v213 = v254;
  uint64_t v214 = *((void *)&v253 + 1);
  uint64_t v55 = *(int *)(v202 + 48);
  uint64_t v56 = *(int *)(v33 + 48);
  uint64_t v57 = v223;
  uint64_t v58 = v212;
  v199 = *(void (**)(char *, char *, uint64_t))(v223 + 16);
  uint64_t v200 = v223 + 16;
  v199(v35, v38, v212);
  v208 = v38;
  *(void *)&v35[v56] = *(void *)&v38[v224];
  v35[v55] = v187;
  unint64_t v59 = *(void (**)(void, void))(v57 + 8);
  unint64_t v60 = v35;
  uint64_t v187 = v57 + 8;
  uint64_t v182 = (void (*)(char *, uint64_t))v59;
  v59(v35, v58);
  if (v188)
  {
    uint64_t v67 = v207;
    uint64_t v84 = v219;
    uint64_t v85 = v220;
    ++*(_DWORD *)&v220[v207[22]];
    uint64_t v86 = v201;
    uint64_t v87 = *(int *)(v201 + 48);
    unint64_t v88 = v190;
    v189(v190, v211, v84);
    v88[v87] = v50;
    (*(void (**)(char *, uint64_t))(v198 + 8))(v88, v86);
    char v69 = v85;
  }
  else
  {
    uint64_t v61 = v201;
    uint64_t v62 = *(int *)(v201 + 48);
    uint64_t v63 = v190;
    uint64_t v64 = v219;
    v189(v190, v211, v219);
    v63[v62] = v50;
    uint64_t v65 = *(int *)(v61 + 48);
    uint64_t v66 = v181;
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v181, v63, v64);
    v66[v65] = v50;
    (*(void (**)(char *, uint64_t))(v48 + 8))(v66, v64);
    uint64_t v67 = v207;
    uint64_t v68 = v61;
    char v69 = v220;
    if (!v50)
    {
      uint64_t v70 = (double *)&v220[v207[25]];
      double v72 = *v70;
      double v71 = v70[1];
      unsigned long long v247 = __PAIR128__((unint64_t)v51, (unint64_t)v52);
      uint64_t v248 = v53;
      *(void *)&long long v249 = v54;
      *((void *)&v249 + 1) = v206;
      *(void *)&long long v250 = v205;
      *((void *)&v250 + 1) = v204;
      uint64_t v251 = v203;
      uint64_t v252 = v216;
      *(void *)&long long v253 = v215;
      *((void *)&v253 + 1) = v214;
      *(void *)&long long v254 = v213;
      _ScrollLayout.size.getter();
      if (v72 == v74 && v71 == v73)
      {
        unint64_t v75 = (double *)&v69[v67[26]];
        double v76 = *v75;
        double v77 = v75[1];
        double v78 = v75[2];
        double v79 = v75[3];
        unsigned long long v247 = __PAIR128__((unint64_t)v51, (unint64_t)v52);
        uint64_t v248 = v53;
        *(void *)&long long v249 = v54;
        *((void *)&v249 + 1) = v206;
        *(void *)&long long v250 = v205;
        *((void *)&v250 + 1) = v204;
        uint64_t v251 = v203;
        uint64_t v252 = v216;
        *(void *)&long long v253 = v215;
        *((void *)&v253 + 1) = v214;
        *(void *)&long long v254 = v213;
        _ScrollLayout.visibleRect.getter();
        v262.origin.x = v80;
        v262.origin.y = v81;
        v262.size.double width = v82;
        v262.size.double height = v83;
        v261.origin.x = v76;
        v261.origin.y = v77;
        v261.size.double width = v78;
        v261.size.double height = v79;
        if (CGRectContainsRect(v261, v262)) {
          goto LABEL_13;
        }
      }
    }
  }
  uint64_t v89 = &v69[v67[22]];
  int v179 = *(_DWORD *)v89;
  uint64_t v180 = v89;
  uint64_t v178 = *((void *)v89 + 1);
  *(void *)&unsigned long long v247 = v52;
  *((void *)&v247 + 1) = v51;
  uint64_t v248 = v53;
  *(void *)&long long v249 = v54;
  uint64_t v91 = v205;
  uint64_t v90 = v206;
  *((void *)&v249 + 1) = v206;
  *(void *)&long long v250 = v205;
  uint64_t v93 = v203;
  uint64_t v92 = v204;
  *((void *)&v250 + 1) = v204;
  uint64_t v251 = v203;
  uint64_t v252 = v216;
  *(void *)&long long v253 = v215;
  *((void *)&v253 + 1) = v214;
  *(void *)&long long v254 = v213;
  swift_bridgeObjectRetain();
  _ScrollLayout.size.getter();
  uint64_t v176 = v95;
  uint64_t v177 = v94;
  uint64_t v189 = v51;
  uint64_t v190 = v52;
  *(void *)&unsigned long long v247 = v52;
  *((void *)&v247 + 1) = v51;
  uint64_t v188 = v53;
  uint64_t v248 = v53;
  v181 = v54;
  *(void *)&long long v249 = v54;
  *((void *)&v249 + 1) = v90;
  *(void *)&long long v250 = v91;
  *((void *)&v250 + 1) = v92;
  uint64_t v251 = v93;
  uint64_t v252 = v216;
  *(void *)&long long v253 = v215;
  *((void *)&v253 + 1) = v214;
  *(void *)&long long v254 = v213;
  _ScrollLayout.visibleRect.getter();
  uint64_t v97 = v96;
  uint64_t v99 = v98;
  uint64_t v101 = v100;
  uint64_t v103 = v102;
  uint64_t v224 = *(void *)&v208[v224];
  uint64_t v104 = v60;
  uint64_t v105 = v212;
  uint64_t v106 = v199;
  ((void (*)(char *))v199)(v60);
  uint64_t v107 = v223 + 32;
  uint64_t v108 = *(void (**)(char *, char *, uint64_t))(v223 + 32);
  uint64_t v109 = v221;
  v108(v221, v60, v105);
  double v110 = v183;
  v106(v183, v109, v105);
  uint64_t v111 = *(unsigned __int8 *)(v107 + 48);
  uint64_t v112 = v184;
  uint64_t v223 = v111 | 7;
  uint64_t v113 = (char *)swift_allocObject();
  uint64_t v114 = v219;
  *((void *)v113 + 2) = v105;
  *((void *)v113 + 3) = v114;
  uint64_t v115 = v218;
  *((void *)v113 + 4) = v210;
  *((void *)v113 + 5) = v115;
  uint64_t v116 = v217;
  *((void *)v113 + 6) = v209;
  *((void *)v113 + 7) = v116;
  v108(&v113[(v111 + 64) & ~v111], v110, v105);
  long long v175 = (void *)*((void *)v220 + 3);
  uint64_t v117 = (v111 + 96) & ~v111;
  long long v183 = (char *)*((void *)v220 + 4);
  uint64_t v184 = v117 + v112;
  uint64_t v118 = *((void *)v220 + 2);
  uint64_t v119 = *((void *)v220 + 5);
  uint64_t v120 = v199;
  v199(v104, v208, v105);
  uint64_t v121 = v222;
  v108(v222, v104, v105);
  unint64_t v122 = v185;
  v120(v185, v121, v105);
  long long v123 = (void *)swift_allocObject();
  uint64_t v124 = v219;
  v123[2] = v105;
  v123[3] = v124;
  uint64_t v125 = v218;
  v123[4] = v210;
  v123[5] = v125;
  uint64_t v126 = v217;
  v123[6] = v209;
  v123[7] = v126;
  v123[8] = v118;
  uint64_t v127 = v175;
  long long v128 = v183;
  v123[9] = v175;
  v123[10] = v128;
  uint64_t v129 = (char *)v123 + v117;
  uint64_t v130 = v219;
  v123[11] = v119;
  v108(v129, v122, v105);
  uint64_t v67 = v207;
  LODWORD(v247) = v179;
  *((void *)&v247 + 1) = v178;
  uint64_t v248 = v177;
  *(void *)&long long v249 = v176;
  *((void *)&v249 + 1) = v97;
  *(void *)&long long v250 = v99;
  *((void *)&v250 + 1) = v101;
  uint64_t v251 = v103;
  uint64_t v252 = v224;
  *(void *)&long long v253 = partial apply for closure #1 in ScrollableLayoutState.updateValue();
  *((void *)&v253 + 1) = v113;
  *(void *)&long long v254 = partial apply for closure #2 in ScrollableLayoutState.updateValue();
  *((void *)&v254 + 1) = v123;
  uint64_t v257 = 0;
  uint64_t v255 = MEMORY[0x1E4FBC860];
  uint64_t v256 = 0;
  long long v131 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
  long long v258 = *MEMORY[0x1E4F1DB20];
  long long v259 = v131;
  id v132 = v127;
  swift_bridgeObjectRetain();
  int v133 = v182;
  v182(v222, v105);
  v133(v221, v105);
  char v69 = v220;
  (*(void (**)(char *, unsigned long long *, uint64_t))(v218 + 48))(&v220[v67[20]], &v247, v130);
  uint64_t v134 = (uint64_t)&v69[v67[23]];
  uint64_t v135 = v186;
  uint64_t v136 = type metadata accessor for Array();
  Array.removeAll(keepingCapacity:)(1);
  uint64_t v137 = &v69[v67[24]];
  uint64_t v200 = type metadata accessor for Dictionary();
  uint64_t v224 = (uint64_t)v137;
  Dictionary.removeAll(keepingCapacity:)(1);
  uint64_t v138 = v255;
  uint64_t v139 = *(void *)(v255 + 16);
  if (v139)
  {
    uint64_t v223 = v134;
    uint64_t v140 = v255 + 32;
    uint64_t v141 = (void (**)(char *, char *, uint64_t))(v173 + 16);
    uint64_t v142 = (void (**)(char *, uint64_t))(v173 + 8);
    v199 = (void (*)(char *, char *, uint64_t))v255;
    swift_bridgeObjectRetain();
    long long v221 = (char *)v136;
    uint64_t v222 = (char *)(MEMORY[0x1E4FBC840] + 8);
    uint64_t v143 = v174;
    do
    {
      outlined init with copy of _ScrollableLayoutItem(v140, (uint64_t)&v226);
      AnyHashable.base.getter();
      swift_dynamicCast();
      uint64_t v144 = *v141;
      (*v141)(v143, v225, v135);
      Array.append(_:)();
      v144(v143, v225, v135);
      uint64_t v145 = v225;
      uint64_t v240 = v230;
      uint64_t v241 = BYTE8(v230);
      uint64_t v242 = v231;
      uint64_t v243 = v232;
      long long v244 = v233;
      long long v245 = v234;
      char v246 = 0;
      Dictionary.subscript.setter();
      outlined destroy of _ScrollableLayoutItem((uint64_t)&v226);
      (*v142)(v145, v135);
      v140 += 104;
      --v139;
    }
    while (v139);
    swift_bridgeObjectRelease();
    uint64_t v138 = v255;
    uint64_t v67 = v207;
    char v69 = v220;
  }
  uint64_t v53 = v188;
  unsigned int v54 = v181;
  ++*(_DWORD *)&v69[v67[21]];
  int v146 = v247;
  uint64_t v147 = *((void *)&v247 + 1);
  uint64_t v148 = v180;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)uint64_t v148 = v146;
  *((void *)v148 + 1) = v147;
  uint64_t v149 = &v69[v67[25]];
  double v77 = *((double *)&v258 + 1);
  *(void *)&double v76 = v258;
  double v79 = *((double *)&v259 + 1);
  *(void *)&double v78 = v259;
  uint64_t v150 = v251;
  uint64_t v228 = v248;
  long long v151 = v249;
  long long v152 = v250;
  *(void *)uint64_t v149 = v248;
  *((void *)v149 + 1) = v151;
  long long v229 = v151;
  uint64_t v153 = v256;
  uint64_t v154 = v257;
  uint64_t v155 = v252;
  int v226 = v146;
  uint64_t v227 = v147;
  uint64_t v156 = &v69[v67[26]];
  *(_OWORD *)uint64_t v156 = __PAIR128__(*(unint64_t *)&v77, *(unint64_t *)&v76);
  *((_OWORD *)v156 + 1) = __PAIR128__(*(unint64_t *)&v79, *(unint64_t *)&v78);
  long long v230 = v152;
  uint64_t v231 = v150;
  uint64_t v232 = v155;
  long long v233 = v253;
  long long v234 = v254;
  uint64_t v235 = v138;
  uint64_t v236 = v153;
  uint64_t v237 = v154;
  unsigned long long v238 = __PAIR128__(*(unint64_t *)&v77, *(unint64_t *)&v76);
  unsigned long long v239 = __PAIR128__(*(unint64_t *)&v79, *(unint64_t *)&v78);
  outlined release of _ScrollableLayoutProxy((uint64_t)&v226);
  uint64_t v157 = &v69[v67[27]];
  *(void *)uint64_t v157 = v153;
  *((void *)v157 + 1) = v154;
  uint64_t v68 = v201;
  unsigned int v51 = v189;
  unsigned int v52 = v190;
LABEL_13:
  uint64_t v158 = (uint64_t)v194;
  (*(void (**)(char *, char *, uint64_t))(v192 + 16))(v194, &v69[v67[20]], v193);
  int v159 = *(_DWORD *)&v69[v67[21]];
  int v160 = *(_DWORD *)&v69[v67[22]];
  *(void *)&unsigned long long v247 = v52;
  *((void *)&v247 + 1) = v51;
  uint64_t v248 = v53;
  *(void *)&long long v249 = v54;
  *((void *)&v249 + 1) = v206;
  *(void *)&long long v250 = v205;
  *((void *)&v250 + 1) = v204;
  uint64_t v251 = v203;
  uint64_t v252 = v216;
  *(void *)&long long v253 = v215;
  *((void *)&v253 + 1) = v214;
  *(void *)&long long v254 = v213;
  uint64_t v161 = *(void *)&v69[v67[23]];
  uint64_t v162 = *(void *)&v69[v67[24]];
  int v163 = (double *)&v69[v67[27]];
  double v164 = *v163;
  double v165 = v163[1];
  v171[1] = v218;
  v171[0] = v210;
  uint64_t v166 = v195;
  ScrollableLayoutState.Value.init(state:stateSeed:contentSeed:scrollLayout:identifiers:placements:validRect:contentSize:)(v158, v159, v160, (long long *)&v247, v161, v162, v195, v76, v77, v78, v79, v164, v165);
  MEMORY[0x1F4188790](v167);
  v171[2] = v67;
  v171[3] = swift_getWitnessTable();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v168 = v197;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v166, (uint64_t)_s14AttributeGraph12StatefulRulePAAE5value5ValueQzvsySPyAFGXEfU_TA_0, (uint64_t)v171, v197, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v169);
  (*(void (**)(uint64_t, uint64_t))(v196 + 8))(v166, v168);
  (*(void (**)(char *, uint64_t))(v198 + 8))(v211, v68);
  return (*(uint64_t (**)(char *, uint64_t))(v191 + 8))(v208, v202);
}

uint64_t closure #1 in ScrollableLayoutState.updateValue()()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v3 = (char *)&v5 - v2;
  dispatch thunk of Collection.startIndex.getter();
  Collection.formIndex(_:offsetBy:)();
  _convertToAnyHashable<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
}

double closure #2 in ScrollableLayoutState.updateValue()(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, long long a10, uint64_t a11)
{
  uint64_t v38 = a8;
  uint64_t v34 = a6;
  unint64_t v29 = a5;
  uint64_t v32 = a4;
  uint64_t v31 = a3;
  int v12 = a2;
  uint64_t v37 = a11;
  long long v36 = a10;
  uint64_t v35 = a9;
  unint64_t v28 = HIDWORD(a2);
  unint64_t v30 = HIDWORD(a5);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v28 - v14;
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v28 - v21;
  AnyHashable.base.getter();
  swift_dynamicCast();
  int v50 = v12;
  int v51 = v28;
  uint64_t v52 = v31;
  uint64_t v53 = v32;
  int v54 = v29;
  int v55 = v30;
  _ProposedSize.init(_:)();
  uint64_t v42 = v46;
  char v43 = v47;
  uint64_t v44 = v48;
  char v45 = v49;
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v19, v22, v16);
  uint64_t v23 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
  uint64_t v24 = AssociatedTypeWitness;
  (*(void (**)(char *))(v13 + 16))(v15);
  v23(v39, 0);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v17 + 8);
  v25(v19, v16);
  v39[0] = a7;
  v39[1] = v38;
  v39[2] = v35;
  long long v40 = v36;
  uint64_t v41 = v37;
  type metadata accessor for ScrollableLayoutState.TemplateView();
  double v26 = ScrollableLayoutState.TemplateView.sizeThatFits(_:content:)((uint64_t)&v42, (uint64_t)v15);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v24);
  v25(v22, v16);
  return v26;
}

double ScrollableLayoutState.TemplateView.sizeThatFits(_:content:)(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *(void **)(v2 + 8);
  AGGraphClearUpdate();
  LOBYTE(v7) = v3;
  closure #1 in ScrollableLayoutState.TemplateView.sizeThatFits(_:content:)(v4, a2, &v7);
  AGGraphSetUpdate();
  return v7;
}

uint64_t closure #1 in ScrollableLayoutState.TemplateView.sizeThatFits(_:content:)@<X0>(void *a1@<X1>, uint64_t a2@<X4>, void *a3@<X8>)
{
  if (*(_DWORD *)AGGraphGetValue() == -1) {
    __break(1u);
  }
  id v6 = a1;
  swift_bridgeObjectRetain();
  AGGraphSetValue();
  type metadata accessor for ScrollableLayoutState.TemplateView();
  specialized ScrollableLayoutState.TemplateView.view.setter(a2);
  swift_bridgeObjectRelease();

  if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
  {
    static LayoutComputer.defaultValue.getter();
    LayoutComputer.sizeThatFits(_:)();
    uint64_t v9 = v12;
    uint64_t v11 = v13;
    uint64_t result = swift_release();
  }
  else
  {
    AGGraphGetValue();
    uint64_t result = LayoutComputer.sizeThatFits(_:)();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
  }
  *a3 = v9;
  a3[1] = v11;
  return result;
}

uint64_t ScrollableItemIdentifier.info.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  uint64_t v3 = *(void *)(Value + 8);
  uint64_t v4 = *(void *)(Value + 32);
  char v5 = *(unsigned char *)(Value + 40);
  int v6 = *(_DWORD *)(Value + 44);
  *(void *)a1 = *(void *)Value;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(Value + 16);
  *(void *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 40) = v5;
  *(_DWORD *)(a1 + 44) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance ScrollableLayoutState<A, B>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ScrollableLayoutState.Value();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t ScrollableItemIdentifier.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2 = HIDWORD(a1);
  ScrollableItemIdentifier.info.getter((uint64_t)v14);
  uint64_t v4 = v14[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v4 + 16) && (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v2), (v6 & 1) != 0))
  {
    unint64_t v7 = *(void *)(*(void *)(v4 + 56) + 8 * v5);
    swift_bridgeObjectRelease();
    ScrollableItemIdentifier.info.getter((uint64_t)v14);
    uint64_t v8 = v14[0];
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v8 & 0xC000000000000001) != 0)
    {
      MEMORY[0x18C117680](v7, v8);
      goto LABEL_7;
    }
    if ((v7 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v7 < *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      swift_retain();
LABEL_7:
      swift_bridgeObjectRelease();
      type metadata accessor for ScrollableLayoutViewAdaptor();
      swift_getWitnessTable();
      DynamicContainer._ItemInfo.item.getter();
      uint64_t v10 = swift_release();
      (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v14[0] + 88))(v14, v10);
      AnyHashable.base.getter();
      swift_release();
      outlined destroy of AnyHashable((uint64_t)v14);
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(a2, 0, 1, AssociatedTypeWitness);
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v12 = swift_getAssociatedTypeWitness();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    return v13(a2, 1, 1, v12);
  }
  return result;
}

uint64_t ScrollableItemGeometry.identifier.getter@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t ScrollableItemGeometry.state.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ScrollableLayoutState.Value();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance ScrollableItemIdentifier<A, B>@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance ScrollableItemIdentifier<A, B>@<X0>(uint64_t a1@<X8>)
{
  return ScrollableItemIdentifier.value.getter(*v1, a1);
}

uint64_t ScrollableItemGeometry.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>, uint64_t a10)
{
  uint64_t v57 = a8;
  uint64_t v61 = a3;
  uint64_t v58 = a1;
  uint64_t v56 = a9;
  *(void *)&long long v70 = a4;
  *((void *)&v70 + 1) = a5;
  *(void *)&long long v71 = a6;
  *((void *)&v71 + 1) = a7;
  *(void *)&long long v72 = a8;
  *((void *)&v72 + 1) = a10;
  uint64_t v60 = type metadata accessor for ScrollableLayoutState.Value();
  uint64_t v55 = *(void *)(v60 - 8);
  MEMORY[0x1F4188790](v60);
  uint64_t v59 = (uint64_t)&v47 - v15;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v48 = type metadata accessor for Optional();
  uint64_t v17 = *(void *)(v48 - 8);
  MEMORY[0x1F4188790](v48);
  uint64_t v19 = (char *)&v47 - v18;
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v47 - v21;
  uint64_t v53 = a10;
  uint64_t v54 = a2;
  uint64_t v49 = a4;
  uint64_t v24 = v23;
  uint64_t v50 = a5;
  uint64_t v51 = a6;
  uint64_t v52 = a7;
  ScrollableItemGeometry.identifier.getter((uint64_t)v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v19, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v48);
LABEL_5:
    static LayoutComputer.defaultValue.getter();
    long long v28 = v63;
    static ViewSize.zero.getter();
    long long v29 = v70;
    long long v30 = v71;
    long long v70 = v28;
    long long v71 = v29;
    long long v72 = v30;
    return ViewGeometry.init(dimensions:)();
  }
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v22, v19, AssociatedTypeWitness);
  uint64_t v25 = v53;
  uint64_t v26 = v59;
  int v27 = HIDWORD(v61);
  ScrollableItemGeometry.state.getter(v59);
  MEMORY[0x18C115450](&v70, v22, *(void *)(v26 + *(int *)(v60 + 84)), AssociatedTypeWitness, MEMORY[0x1E4F3F428], v25);
  if (v74)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v22, AssociatedTypeWitness);
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v59, v60);
    goto LABEL_5;
  }
  long long v32 = v73;
  long long v33 = v72;
  long long v34 = v71;
  long long v35 = v70;
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v59, v60);
  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x1E4F4E7A0])
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v70) = *MEMORY[0x1E4F4E7A0] == v27;
    LayoutProxy.init(context:layoutComputer:)();
    uint64_t v68 = v70;
    int v69 = DWORD2(v70);
    *(void *)&long long v63 = v35;
    BYTE8(v63) = BYTE8(v35) & 1;
    uint64_t v64 = v34;
    char v65 = BYTE8(v34) & 1;
    long long v66 = v33;
    long long v67 = v32;
    uint64_t Value = (long long *)AGGraphGetValue();
    long long v37 = Value[1];
    long long v70 = *Value;
    long long v71 = v37;
    MEMORY[0x18C114450]();
    char v62 = *(unsigned char *)AGGraphGetValue();
    LayoutProxy.finallyPlaced(at:in:layoutDirection:)();
    long long v63 = *(_OWORD *)AGGraphGetValue();
    double v38 = MEMORY[0x18C10C240]();
    double v40 = v39;
    uint64_t v41 = (void (*)(long long *, void))ViewOrigin.value.modify();
    double v43 = v40 + v42[1];
    double *v42 = v38 + *v42;
    v42[1] = v43;
    v41(&v63, 0);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v22, AssociatedTypeWitness);
    long long v44 = v71;
    char v45 = v56;
    *uint64_t v56 = v70;
    v45[1] = v44;
    long long v46 = v73;
    v45[2] = v72;
    v45[3] = v46;
  }
  return result;
}

double protocol witness for static Rule.initialValue.getter in conformance ScrollableItemGeometry<A, B>@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance ScrollableItemGeometry<A, B>@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  return ScrollableItemGeometry.value.getter(*v2, v2[1], v2[2], a1[2], a1[3], a1[4], a1[5], a1[6], a2, a1[7]);
}

double protocol witness for LayoutEngine.sizeThatFits(_:) in conformance ScrollableItemLayoutComputer._LayoutEngine()
{
  return *(double *)v0;
}

uint64_t protocol witness for LayoutEngine.childGeometries(at:origin:) in conformance ScrollableItemLayoutComputer._LayoutEngine()
{
  return MEMORY[0x1F40FD928]();
}

uint64_t protocol witness for StatefulRule.updateValue() in conformance ScrollableItemLayoutComputer()
{
  return StatefulRule<>.update<A>(to:)();
}

_DWORD *protocol witness for Rule.value.getter in conformance TemplateViewPhase@<X0>(_DWORD *a1@<X8>)
{
  int v2 = *(_DWORD *)AGGraphGetValue();
  double result = (_DWORD *)AGGraphGetValue();
  *a1 = v2 + 2 * *result;
  return result;
}

uint64_t AnyViewVisitor.visit<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 40);
  v24[0] = a3;
  v24[1] = v8;
  void v24[2] = a4;
  void v24[3] = v9;
  uint64_t v10 = type metadata accessor for EquatableProxyView();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v24 - v12;
  View.equatableProxy<A>(_:)(v4 + *(int *)(a2 + 52), a3, v8, (uint64_t)v24 - v12);
  double v14 = specialized AnyDynamicItem.init<A, B>(_:id:)((uint64_t)v13, v4, v10, *(void *)(a2 + 16), (uint64_t)&protocol witness table for EquatableProxyView<A, B>);
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  double v19 = v14;
  uint64_t v21 = v20 & 1;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v22 = (double *)(v5 + *(int *)(a2 + 56));
  uint64_t result = swift_release();
  *(void *)uint64_t v22 = v16;
  *((void *)v22 + 1) = v18;
  *((void *)v22 + 2) = v21;
  _OWORD v22[3] = v19;
  return result;
}

uint64_t protocol witness for ViewVisitor.visit<A>(_:) in conformance AnyViewVisitor<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AnyViewVisitor.visit<A>(_:)(a1, a4, a2, a3);
}

void specialized FixedSizeLazyLayout<>.place(subviews:context:cache:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v8 = v4[1];
  long long v47 = *v4;
  long long v48 = v8;
  long long v49 = v4[2];
  uint64_t v50 = *((void *)v4 + 6);
  unint64_t v9 = *(void *)(a2 + 280);
  unint64_t v10 = *(void *)(a2 + 288);
  char v11 = *(unsigned char *)(a2 + 296);
  long long v12 = *(_OWORD *)(a2 + 104);
  long long v13 = *(_OWORD *)(a2 + 136);
  long long v55 = *(_OWORD *)(a2 + 120);
  long long v56 = v13;
  long long v57 = *(_OWORD *)(a2 + 152);
  long long v14 = *(_OWORD *)(a2 + 72);
  long long v51 = *(_OWORD *)(a2 + 56);
  long long v52 = v14;
  long long v53 = *(_OWORD *)(a2 + 88);
  long long v54 = v12;
  long long v15 = *(_OWORD *)(a2 + 104);
  long long v16 = *(_OWORD *)(a2 + 136);
  long long v44 = *(_OWORD *)(a2 + 120);
  long long v45 = v16;
  long long v46 = *(_OWORD *)(a2 + 152);
  long long v17 = *(_OWORD *)(a2 + 72);
  long long v40 = *(_OWORD *)(a2 + 56);
  long long v41 = v17;
  long long v42 = *(_OWORD *)(a2 + 88);
  long long v43 = v15;
  if (v11) {
    ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v10, v9));
  }
  double v18 = *(double *)v4;
  int v19 = *((unsigned __int8 *)v4 + 8);
  int v20 = *(_DWORD *)(a2 + 12);
  ScrollGeometry.visibleRect.getter();
  CGRect.subscript.getter();
  double v22 = v21;
  double v24 = v23;
  if (v19 == 1)
  {
    double v18 = 0.0;
    if (v20 != *MEMORY[0x1E4F4E7A0])
    {
      uint64_t Value = (long long *)AGGraphGetValue();
      long long v26 = Value[1];
      long long v40 = *Value;
      long long v41 = v26;
      double v18 = MEMORY[0x18C114450]();
    }
  }
  if (v22 <= 0.0) {
    double v22 = 0.0;
  }
  if (v22 < v24)
  {
    if (v22 > v24)
    {
      __break(1u);
    }
    else if (*(double *)(a2 + 40) > 0.0)
    {
      double v27 = *((double *)v4 + 3);
      *(void *)&long long v40 = *(void *)a2;
      DWORD2(v40) = *(_DWORD *)(a2 + 8);
      swift_getKeyPath();
      SizeAndSpacingContext.subscript.getter();
      swift_release();
      double v28 = *(double *)&v58;
      long long v58 = v47;
      long long v59 = v48;
      long long v60 = v49;
      uint64_t v61 = v50;
      uint64_t v29 = specialized FixedSizeLazyLayout<>.makeIndexRange(in:subviews:subviewLength:pixelLength:)(v22, v24, v18, v28);
      if ((v31 & 1) == 0)
      {
        uint64_t v32 = v29;
        uint64_t v33 = v30;
        v39[1] = v39;
        v39[4] = v29;
        v39[5] = v29;
        MEMORY[0x1F4188790](v29);
        void v39[3] = *(void *)(a1 + 104);
        uint64_t v34 = outlined init with copy of _ViewList_Node(a1 + 16, (uint64_t)&v40);
        v39[2] = 2;
        MEMORY[0x1F4188790](v34);
        swift_bridgeObjectRetain();
        _ViewList_Node.applyNodes(from:style:transform:to:)();
        outlined destroy of _ViewList_Node((uint64_t)&v40);
        swift_bridgeObjectRelease();
        double v35 = v18 + v27;
        long long v44 = v55;
        long long v45 = v56;
        long long v46 = v57;
        long long v40 = v51;
        long long v41 = v52;
        long long v42 = v53;
        long long v43 = v54;
        if (v11) {
          ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v10, v9));
        }
        ScrollGeometry.visibleRect.getter();
        double v36 = v35 * (double)v32;
        *(double *)(a4 + 8) = v36;
        *(void *)(a4 + 16) = v37;
        *(double *)(a4 + 24) = v35 * (double)v33 - v36;
        *(void *)(a4 + 32) = v38;
      }
    }
  }
}

uint64_t specialized FixedSizeLazyLayout<>.place(subviews:context:cache:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v8 = v4[1];
  long long v48 = *v4;
  long long v49 = v8;
  long long v50 = v4[2];
  uint64_t v51 = *((void *)v4 + 6);
  unint64_t v9 = *(void *)(a2 + 280);
  unint64_t v10 = *(void *)(a2 + 288);
  char v11 = *(unsigned char *)(a2 + 296);
  long long v12 = *(_OWORD *)(a2 + 104);
  long long v13 = *(_OWORD *)(a2 + 136);
  long long v56 = *(_OWORD *)(a2 + 120);
  long long v57 = v13;
  long long v58 = *(_OWORD *)(a2 + 152);
  long long v14 = *(_OWORD *)(a2 + 72);
  long long v52 = *(_OWORD *)(a2 + 56);
  long long v53 = v14;
  long long v54 = *(_OWORD *)(a2 + 88);
  long long v55 = v12;
  long long v15 = *(_OWORD *)(a2 + 104);
  long long v16 = *(_OWORD *)(a2 + 136);
  long long v45 = *(_OWORD *)(a2 + 120);
  long long v46 = v16;
  long long v47 = *(_OWORD *)(a2 + 152);
  long long v17 = *(_OWORD *)(a2 + 72);
  long long v41 = *(_OWORD *)(a2 + 56);
  long long v42 = v17;
  long long v43 = *(_OWORD *)(a2 + 88);
  long long v44 = v15;
  if (v11) {
    ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v10, v9));
  }
  double v18 = *(double *)v4;
  int v19 = *((unsigned __int8 *)v4 + 8);
  int v20 = *(_DWORD *)(a2 + 12);
  ScrollGeometry.visibleRect.getter();
  uint64_t result = CGRect.subscript.getter();
  double v23 = v22;
  double v25 = v24;
  if (v19 == 1)
  {
    double v18 = 0.0;
    if (v20 != *MEMORY[0x1E4F4E7A0])
    {
      uint64_t Value = (long long *)AGGraphGetValue();
      long long v27 = Value[1];
      long long v41 = *Value;
      long long v42 = v27;
      uint64_t result = MEMORY[0x18C114450]();
      double v18 = v28;
    }
  }
  if (v23 <= 0.0) {
    double v23 = 0.0;
  }
  if (v23 < v25)
  {
    if (v23 > v25)
    {
      __break(1u);
    }
    else if (*(double *)(a2 + 32) > 0.0)
    {
      double v29 = *((double *)v4 + 3);
      *(void *)&long long v41 = *(void *)a2;
      DWORD2(v41) = *(_DWORD *)(a2 + 8);
      swift_getKeyPath();
      SizeAndSpacingContext.subscript.getter();
      swift_release();
      double v30 = *(double *)&v59;
      long long v59 = v48;
      long long v60 = v49;
      long long v61 = v50;
      uint64_t v62 = v51;
      uint64_t result = specialized FixedSizeLazyLayout<>.makeIndexRange(in:subviews:subviewLength:pixelLength:)(v23, v25, v18, v30);
      if ((v32 & 1) == 0)
      {
        uint64_t v33 = result;
        uint64_t v34 = v31;
        v40[1] = v40;
        v40[4] = result;
        _OWORD v40[5] = result;
        MEMORY[0x1F4188790](result);
        v40[3] = *(void *)(a1 + 104);
        uint64_t v35 = outlined init with copy of _ViewList_Node(a1 + 16, (uint64_t)&v41);
        void v40[2] = 2;
        MEMORY[0x1F4188790](v35);
        swift_bridgeObjectRetain();
        _ViewList_Node.applyNodes(from:style:transform:to:)();
        outlined destroy of _ViewList_Node((uint64_t)&v41);
        swift_bridgeObjectRelease();
        double v36 = v18 + v29;
        long long v45 = v56;
        long long v46 = v57;
        long long v47 = v58;
        long long v41 = v52;
        long long v42 = v53;
        long long v43 = v54;
        long long v44 = v55;
        if (v11) {
          ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v10, v9));
        }
        uint64_t result = ScrollGeometry.visibleRect.getter();
        double v37 = v36 * (double)v33;
        *(void *)(a4 + 8) = v38;
        *(double *)(a4 + 16) = v37;
        *(void *)(a4 + 24) = v39;
        *(double *)(a4 + 32) = v36 * (double)v34 - v37;
      }
    }
  }
  return result;
}

uint64_t specialized FixedSizeLazyLayout<>.makeIndexRange(in:subviews:subviewLength:pixelLength:)(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  long long v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v27 = *(double *)(v4 + 24) + a3;
  if (v27 <= 0.0) {
    return 0;
  }
  double v25 = a2;
  double v26 = a1;
  uint64_t v13 = *MEMORY[0x1E4FBBEA0];
  long long v14 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v14(v12, v13, v9);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v12, a4);
  long long v15 = *(void (**)(char *, uint64_t))(v10 + 8);
  v15(v12, v9);
  v14(v12, v13, v9);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v12, a4);
  v15(v12, v9);
  v14(v12, v13, v9);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v12, a4);
  v15(v12, v9);
  double v16 = v26 / v27;
  double v17 = v25 / v27;
  if ((~COERCE__INT64(v26 / v27) & 0x7FF0000000000000) == 0
    || (~COERCE__INT64(v25 / v27) & 0x7FF0000000000000) == 0)
  {
    return 0;
  }
  uint64_t v24 = 2;
  uint64_t result = _ViewList_Node.estimatedCount(style:)();
  double v21 = floor(v16);
  if ((~*(void *)&v21 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v21 <= -9.22337204e18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v21 >= 9.22337204e18)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v19 = (uint64_t)v21 & ~((uint64_t)v21 >> 63);
  if (result < v19) {
    uint64_t v19 = result;
  }
  double v22 = ceil(v17);
  if ((~*(void *)&v22 & 0x7FF0000000000000) == 0) {
    goto LABEL_25;
  }
  if (v22 <= -9.22337204e18)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v22 < 9.22337204e18)
  {
    uint64_t v23 = (uint64_t)v22 & ~((uint64_t)v22 >> 63);
    if (result < v23) {
      uint64_t v23 = result;
    }
    if (v19 >= v23) {
      return 0;
    }
    return v19;
  }
LABEL_27:
  __break(1u);
  return result;
}

void specialized FixedSizeLazyLayout<>.estimatedPlacement(subviews:context:cache:in:)(uint64_t a1, uint64_t a2)
{
  long long v5 = v2[1];
  long long v37 = *v2;
  long long v38 = v5;
  long long v39 = v2[2];
  uint64_t v40 = *((void *)v2 + 6);
  int v6 = *(_DWORD *)(a2 + 12);
  double v7 = *(double *)(a2 + 40);
  long long v8 = *(_OWORD *)(a2 + 256);
  long long v46 = *(_OWORD *)(a2 + 240);
  long long v47 = v8;
  uint64_t v48 = *(void *)(a2 + 272);
  long long v9 = *(_OWORD *)(a2 + 192);
  long long v42 = *(_OWORD *)(a2 + 176);
  long long v43 = v9;
  long long v10 = *(_OWORD *)(a2 + 224);
  long long v44 = *(_OWORD *)(a2 + 208);
  long long v45 = v10;
  long long v11 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)&v41[64] = *(_OWORD *)(a2 + 112);
  *(_OWORD *)&v41[80] = v11;
  long long v12 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)&v41[96] = *(_OWORD *)(a2 + 144);
  *(_OWORD *)&v41[112] = v12;
  long long v13 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)long long v41 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v41[16] = v13;
  long long v14 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)&v41[32] = *(_OWORD *)(a2 + 80);
  *(_OWORD *)&v41[48] = v14;
  unint64_t v15 = *(void *)(a2 + 280);
  unint64_t v16 = *(void *)(a2 + 288);
  char v17 = *(unsigned char *)(a2 + 296);
  long long v34 = *(_OWORD *)&v41[72];
  long long v35 = *(_OWORD *)&v41[88];
  long long v36 = *(_OWORD *)&v41[104];
  long long v30 = *(_OWORD *)&v41[8];
  long long v31 = *(_OWORD *)&v41[24];
  long long v32 = *(_OWORD *)&v41[40];
  long long v33 = *(_OWORD *)&v41[56];
  if (v17) {
    ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v16, v15));
  }
  double v18 = *(double *)v2;
  int v19 = *((unsigned __int8 *)v2 + 8);
  ScrollGeometry.visibleRect.getter();
  CGRect.subscript.getter();
  double v21 = v20;
  double v23 = v22;
  if (v19 == 1)
  {
    double v18 = 0.0;
    if (v6 != *MEMORY[0x1E4F4E7A0])
    {
      uint64_t Value = (long long *)AGGraphGetValue();
      long long v25 = Value[1];
      long long v30 = *Value;
      long long v31 = v25;
      double v18 = MEMORY[0x18C114450]();
    }
  }
  if (v21 <= 0.0) {
    double v21 = 0.0;
  }
  if (v21 < v23)
  {
    if (v21 > v23)
    {
      __break(1u);
    }
    else
    {
      swift_getKeyPath();
      *(void *)&long long v30 = *(void *)a2;
      DWORD2(v30) = *(_DWORD *)(a2 + 8);
      SizeAndSpacingContext.subscript.getter();
      swift_release();
      long long v49 = v37;
      long long v50 = v38;
      long long v51 = v39;
      uint64_t v52 = v40;
      uint64_t v26 = specialized FixedSizeLazyLayout<>.makeIndexRange(in:subviews:subviewLength:pixelLength:)(v21, v23, v18, v29);
      if (v7 > 0.0 && (v27 & 1) == 0)
      {
        MEMORY[0x1F4188790](v26);
        uint64_t v28 = outlined init with copy of _ViewList_Node(a1 + 16, (uint64_t)&v30);
        MEMORY[0x1F4188790](v28);
        swift_bridgeObjectRetain();
        _ViewList_Node.applyNodes(from:style:transform:to:)();
        outlined destroy of _ViewList_Node((uint64_t)&v30);
        swift_bridgeObjectRelease();
      }
    }
  }
}

uint64_t specialized FixedSizeLazyLayout<>.estimatedPlacement(subviews:context:cache:in:)(uint64_t a1, uint64_t a2)
{
  long long v5 = v2[1];
  long long v38 = *v2;
  long long v39 = v5;
  long long v40 = v2[2];
  uint64_t v41 = *((void *)v2 + 6);
  int v6 = *(_DWORD *)(a2 + 12);
  double v7 = *(double *)(a2 + 32);
  long long v8 = *(_OWORD *)(a2 + 256);
  long long v47 = *(_OWORD *)(a2 + 240);
  long long v48 = v8;
  uint64_t v49 = *(void *)(a2 + 272);
  long long v9 = *(_OWORD *)(a2 + 192);
  long long v43 = *(_OWORD *)(a2 + 176);
  long long v44 = v9;
  long long v10 = *(_OWORD *)(a2 + 224);
  long long v45 = *(_OWORD *)(a2 + 208);
  long long v46 = v10;
  long long v11 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)&v42[64] = *(_OWORD *)(a2 + 112);
  *(_OWORD *)&v42[80] = v11;
  long long v12 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)&v42[96] = *(_OWORD *)(a2 + 144);
  *(_OWORD *)&v42[112] = v12;
  long long v13 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)long long v42 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v42[16] = v13;
  long long v14 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)&v42[32] = *(_OWORD *)(a2 + 80);
  *(_OWORD *)&v42[48] = v14;
  unint64_t v15 = *(void *)(a2 + 280);
  unint64_t v16 = *(void *)(a2 + 288);
  char v17 = *(unsigned char *)(a2 + 296);
  long long v35 = *(_OWORD *)&v42[72];
  long long v36 = *(_OWORD *)&v42[88];
  long long v37 = *(_OWORD *)&v42[104];
  long long v31 = *(_OWORD *)&v42[8];
  long long v32 = *(_OWORD *)&v42[24];
  long long v33 = *(_OWORD *)&v42[40];
  long long v34 = *(_OWORD *)&v42[56];
  if (v17) {
    ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v16, v15));
  }
  double v18 = *(double *)v2;
  int v19 = *((unsigned __int8 *)v2 + 8);
  ScrollGeometry.visibleRect.getter();
  uint64_t result = CGRect.subscript.getter();
  double v22 = v21;
  double v24 = v23;
  if (v19 == 1)
  {
    double v18 = 0.0;
    if (v6 != *MEMORY[0x1E4F4E7A0])
    {
      uint64_t Value = (long long *)AGGraphGetValue();
      long long v26 = Value[1];
      long long v31 = *Value;
      long long v32 = v26;
      uint64_t result = MEMORY[0x18C114450]();
      double v18 = v27;
    }
  }
  if (v22 <= 0.0) {
    double v22 = 0.0;
  }
  if (v22 < v24)
  {
    if (v22 > v24)
    {
      __break(1u);
    }
    else
    {
      swift_getKeyPath();
      *(void *)&long long v31 = *(void *)a2;
      DWORD2(v31) = *(_DWORD *)(a2 + 8);
      SizeAndSpacingContext.subscript.getter();
      swift_release();
      long long v50 = v38;
      long long v51 = v39;
      long long v52 = v40;
      uint64_t v53 = v41;
      uint64_t result = specialized FixedSizeLazyLayout<>.makeIndexRange(in:subviews:subviewLength:pixelLength:)(v22, v24, v18, v30);
      if (v7 > 0.0 && (v28 & 1) == 0)
      {
        MEMORY[0x1F4188790](result);
        uint64_t v29 = outlined init with copy of _ViewList_Node(a1 + 16, (uint64_t)&v31);
        MEMORY[0x1F4188790](v29);
        swift_bridgeObjectRetain();
        _ViewList_Node.applyNodes(from:style:transform:to:)();
        outlined destroy of _ViewList_Node((uint64_t)&v31);
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

uint64_t specialized closure #1 in FixedSizeLazyLayout<>.estimatedPlacement(subviews:context:cache:in:)(uint64_t a1, unsigned char *a2, char a3, uint64_t a4, uint64_t a5, uint64_t *a6, void (*a7)(uint64_t), double a8, double a9)
{
  if (a3) {
    double v16 = a9;
  }
  else {
    double v16 = a8;
  }
  if (a3) {
    double v17 = a8;
  }
  else {
    double v17 = a9;
  }
  uint64_t v18 = _ProposedSize.init(_:)();
  double v19 = (*(double *)(a5 + 24) + a8) * (double)a4;
  if (a3) {
    double v20 = 0.0;
  }
  else {
    double v20 = (*(double *)(a5 + 24) + a8) * (double)a4;
  }
  if (a3) {
    double v21 = v19;
  }
  else {
    double v21 = 0.0;
  }
  uint64_t v22 = *(void *)(a5 + 16);
  a7(v18);
  AlignmentGuide.fraction.getter();
  UnitPoint.init(_:in:by:)();
  v34.origin.x = v20;
  v34.origin.y = v21;
  v34.size.double width = v16;
  v34.size.double height = v17;
  UnitPoint.in(_:)(v34);
  AlignmentGuide.fraction.getter();
  UnitPoint.init(_:in:by:)();
  _Placement.init(proposedSize:anchoring:at:)();
  uint64_t v23 = LazyLayoutViewCache.item(data:)(a1 + 16);
  swift_beginAccess();
  uint64_t result = swift_unownedRetainStrong();
  if (result)
  {
    int v25 = *(_DWORD *)(result + 212);
    swift_release();
    *(_DWORD *)(v23 + 188) = v25;
    *(_DWORD *)(v23 + 196) = 0;
    *a6 = v23;
    a6[1] = v22;
    a6[2] = v27;
    a6[3] = v28;
    a6[4] = v29;
    a6[5] = v30;
    a6[6] = v31;
    a6[7] = v32;
    a6[8] = v33;
    uint64_t result = swift_release();
    *a2 = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized static UnaryPlatformItemsModifier.updateItems(modifier:items:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(char **)(a3 + 16);
  uint64_t v4 = *((void *)v3 + 2);
  if (v4)
  {
    uint64_t v7 = result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_12;
    }
    while (1)
    {
      unint64_t v8 = 0;
      *(void *)(a3 + 16) = v3;
      for (uint64_t i = 32; ; i += 336)
      {
        uint64_t v3 = *(char **)(a3 + 16);
        if (v8 >= *((void *)v3 + 2)) {
          break;
        }
        outlined init with copy of PlatformItem((uint64_t)&v3[i], (uint64_t)v11);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v11[40] = v7;
        v11[41] = a2;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(a3 + 16) = v3;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v3);
          *(void *)(a3 + 16) = v3;
        }
        if (v8 >= *((void *)v3 + 2)) {
          goto LABEL_11;
        }
        ++v8;
        outlined assign with copy of PlatformItem((uint64_t)v11, (uint64_t)&v3[i]);
        uint64_t result = outlined destroy of PlatformItem((uint64_t)v11);
        if (v4 == v8) {
          return result;
        }
      }
      __break(1u);
LABEL_11:
      __break(1u);
LABEL_12:
      uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v3);
    }
  }
  return result;
}

uint64_t specialized static UnaryPlatformItemsModifier.updateItems(modifier:items:)(uint64_t result, uint64_t a2)
{
  int v2 = *(char **)(a2 + 16);
  uint64_t v3 = *((void *)v2 + 2);
  if (v3)
  {
    uint64_t v5 = result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_12;
    }
    while (1)
    {
      unint64_t v6 = 0;
      *(void *)(a2 + 16) = v2;
      int v2 = v12;
      for (uint64_t i = 32; ; i += 336)
      {
        uint64_t v8 = *(void *)(a2 + 16);
        if (v6 >= *(void *)(v8 + 16)) {
          break;
        }
        outlined init with copy of PlatformItem(v8 + i, (uint64_t)v11);
        outlined destroy of AccessibilityScrollableContext?((uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.SelectionContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent, MEMORY[0x1E4FBB718]);
        outlined init with copy of PlatformItem.SelectionContent(v5, (uint64_t)v12);
        long long v9 = *(char **)(a2 + 16);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(a2 + 16) = v9;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          long long v9 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v9);
          *(void *)(a2 + 16) = v9;
        }
        if (v6 >= *((void *)v9 + 2)) {
          goto LABEL_11;
        }
        ++v6;
        outlined assign with copy of PlatformItem((uint64_t)v11, (uint64_t)&v9[i]);
        uint64_t result = outlined destroy of PlatformItem((uint64_t)v11);
        if (v3 == v6) {
          return result;
        }
      }
      __break(1u);
LABEL_11:
      __break(1u);
LABEL_12:
      int v2 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
    }
  }
  return result;
}

uint64_t specialized static UnaryPlatformItemsModifier.updateItems(modifier:items:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(char **)(a2 + 16);
  uint64_t v21 = *((void *)v2 + 2);
  if (v21)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_19;
    }
    while (1)
    {
      unint64_t v4 = 0;
      *(void *)(a2 + 16) = v2;
      int v2 = v34;
      for (uint64_t i = 32; ; i += 336)
      {
        uint64_t v6 = *(void *)(a2 + 16);
        if (v4 >= *(void *)(v6 + 16)) {
          break;
        }
        outlined init with copy of PlatformItem(v6 + i, (uint64_t)v33);
        uint64_t v7 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
        outlined init with copy of AccessibilityScrollableContext?((uint64_t)v34, (uint64_t)&v29, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.SelectionContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent, MEMORY[0x1E4FBB718]);
        uint64_t v8 = v32;
        outlined destroy of AccessibilityScrollableContext?((uint64_t)&v29, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.SelectionContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent, v7);
        if (v8 == 1)
        {
          type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for DocumentCreationStrategy);
          uint64_t Value = AGGraphGetValue();
          outlined init with copy of TableColumnList(Value, (uint64_t)v28);
          unint64_t v10 = AGCreateWeakAttribute();
          unsigned int v11 = v10;
          unint64_t v12 = HIDWORD(v10);
          uint64_t v13 = AGCreateWeakAttribute();
          uint64_t v23 = 0;
          memset(v22, 0, sizeof(v22));
          long long v31 = 0u;
          long long v32 = 0u;
          long long v30 = 0u;
          *(void *)&long long v29 = __PAIR64__(v12, v11);
          *((void *)&v29 + 1) = v13;
          outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)v22, (uint64_t)&v30 + 8, &lazy cache variable for type metadata for PlatformItem.SelectionContent.AuxiliaryContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent.AuxiliaryContent);
          long long v24 = v29;
          *((void *)&v25 + 1) = *((void *)&v30 + 1);
          long long v26 = v31;
          long long v27 = v32;
          *(void *)&long long v25 = 8;
          outlined assign with copy of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)v28, (uint64_t)&v25 + 8);
          long long v29 = v24;
          long long v30 = v25;
          long long v31 = v26;
          long long v32 = v27;
          outlined destroy of AccessibilityScrollableContext?((uint64_t)v28, &lazy cache variable for type metadata for PlatformItem.SelectionContent.AuxiliaryContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent.AuxiliaryContent, MEMORY[0x1E4FBB718]);
          long long v14 = v34;
          unint64_t v15 = (unint64_t *)&lazy cache variable for type metadata for PlatformItem.SelectionContent?;
          double v16 = &type metadata for PlatformItem.SelectionContent;
        }
        else
        {
          if (v36[3] == 1) {
            goto LABEL_12;
          }
          if ((v35 & 8) == 0) {
            v35 |= 8uLL;
          }
          type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for DocumentCreationStrategy);
          uint64_t v17 = AGGraphGetValue();
          outlined init with copy of TableColumnList(v17, (uint64_t)&v29);
          long long v14 = v36;
          unint64_t v15 = &lazy cache variable for type metadata for PlatformItem.SelectionContent.AuxiliaryContent?;
          double v16 = &type metadata for PlatformItem.SelectionContent.AuxiliaryContent;
        }
        outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)&v29, (uint64_t)v14, v15, (uint64_t)v16);
LABEL_12:
        uint64_t v18 = *(char **)(a2 + 16);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(a2 + 16) = v18;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v18);
          *(void *)(a2 + 16) = v18;
        }
        if (v4 >= *((void *)v18 + 2)) {
          goto LABEL_18;
        }
        ++v4;
        outlined assign with copy of PlatformItem((uint64_t)v33, (uint64_t)&v18[i]);
        uint64_t result = outlined destroy of PlatformItem((uint64_t)v33);
        if (v21 == v4) {
          return result;
        }
      }
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      int v2 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
    }
  }
  return result;
}

uint64_t specialized Sequence.min(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v80 = 0;
  uint64_t v81 = 0;
  uint64_t v79 = a1;
  specialized EnumeratedSequence.Iterator.next()((uint64_t)&v69);
  unint64_t v6 = v69;
  unint64_t v5 = v70;
  unint64_t v8 = v71;
  unint64_t v7 = v72;
  unint64_t v9 = v74;
  unint64_t v44 = v73;
  unint64_t v10 = v75;
  unint64_t v11 = v78;
  if (v70)
  {
    long long v46 = a3;
    char v12 = v72 & 1;
    char v13 = v74 & 1;
    unint64_t v14 = v75;
    unint64_t v15 = v76;
    unint64_t v16 = v77;
    unint64_t v17 = v78;
    uint64_t v18 = v80;
    uint64_t v50 = a2;
    uint64_t v51 = v79;
    uint64_t v19 = *(void *)(v79 + 16);
    uint64_t v48 = v81;
    uint64_t result = swift_bridgeObjectRetain();
    if (v18 == v19)
    {
      unint64_t v49 = v6;
    }
    else
    {
      uint64_t v22 = v18;
      uint64_t v39 = v19;
      while (2)
      {
        uint64_t v23 = 0;
        unint64_t v47 = v5;
        char v43 = v12;
        char v45 = v13;
        unint64_t v24 = v14;
        unint64_t v25 = v15;
        unint64_t v26 = v16;
        unint64_t v27 = v17;
        uint64_t v41 = v19 - v22;
        unint64_t v42 = v8;
        uint64_t v40 = v19 - v22 - 1;
        uint64_t v28 = 72 * v22;
        unint64_t v49 = v6;
        while (1)
        {
          if (v22 < 0)
          {
            __break(1u);
LABEL_19:
            __break(1u);
LABEL_20:
            __break(1u);
            return result;
          }
          if ((unint64_t)(v22 + v23) >= *(void *)(v51 + 16)) {
            goto LABEL_19;
          }
          if (__OFADD__(v48 + v23, 1)) {
            goto LABEL_20;
          }
          uint64_t v29 = v22;
          unint64_t v30 = *(void *)(v51 + v28 + 32);
          unint64_t v31 = *(void *)(v51 + v28 + 40);
          char v32 = *(unsigned char *)(v51 + v28 + 48);
          unint64_t v33 = *(void *)(v51 + v28 + 56);
          char v34 = *(unsigned char *)(v51 + v28 + 64);
          unint64_t v14 = *(void *)(v51 + v28 + 72);
          unint64_t v15 = *(void *)(v51 + v28 + 80);
          unint64_t v16 = *(void *)(v51 + v28 + 88);
          unint64_t v17 = *(void *)(v51 + v28 + 96);
          v61[0] = v48 + v23;
          v61[1] = v30;
          unint64_t v35 = v31;
          v61[2] = v31;
          char v12 = v32;
          char v62 = v32;
          unint64_t v36 = v33;
          unint64_t v63 = v33;
          char v13 = v34;
          char v64 = v34;
          unint64_t v65 = v14;
          unint64_t v66 = v15;
          unint64_t v67 = v16;
          unint64_t v68 = v17;
          v53[0] = v6;
          v53[1] = v47;
          v53[2] = v42;
          char v54 = v43 & 1;
          unint64_t v55 = v44;
          char v56 = v45 & 1;
          unint64_t v57 = v24;
          unint64_t v58 = v25;
          unint64_t v59 = v26;
          unint64_t v60 = v27;
          unint64_t v5 = v30;
          swift_retain();
          uint64_t v37 = v82;
          unsigned __int8 v38 = specialized closure #2 in LazySubviewPlacements.makeSizeChangeTranslation(placements:context:axes:)(v61, v53, v50, dword_1ED476778, &dword_1ED476778[1], dword_1ED4767A0, &dword_1ED4767A0[1]);
          uint64_t v82 = v37;
          if (v37)
          {
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            return outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>(v50);
          }
          if (v38) {
            break;
          }
          uint64_t result = swift_release();
          ++v23;
          v28 += 72;
          a3 = v46;
          unint64_t v6 = v49;
          uint64_t v22 = v29;
          if (v41 == v23)
          {
            unint64_t v5 = v47;
            unint64_t v8 = v42;
            char v12 = v43;
            char v13 = v45;
            unint64_t v14 = v24;
            unint64_t v15 = v25;
            unint64_t v16 = v26;
            unint64_t v17 = v27;
            goto LABEL_17;
          }
        }
        uint64_t result = swift_release();
        uint64_t v22 = v29 + v23 + 1;
        unint64_t v6 = v48 + v23;
        v48 += v23 + 1;
        uint64_t v19 = v39;
        a3 = v46;
        unint64_t v44 = v36;
        unint64_t v8 = v35;
        if (v40 != v23) {
          continue;
        }
        break;
      }
      unint64_t v49 = v6;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    uint64_t result = outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>(v50);
    *a3 = v49;
    a3[1] = v5;
    a3[2] = v8;
    a3[3] = v12 & 1;
    a3[4] = v44;
    a3[5] = v13 & 1;
    a3[6] = v14;
    a3[7] = v15;
    a3[8] = v16;
    a3[9] = v17;
  }
  else
  {
    unint64_t v52 = v77;
    unint64_t v21 = v76;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t result = outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>(a2);
    *a3 = v6;
    a3[1] = 0;
    a3[2] = v8;
    a3[3] = v7;
    a3[4] = v44;
    a3[5] = v9;
    a3[6] = v10;
    a3[7] = v21;
    a3[8] = v52;
    a3[9] = v11;
  }
  return result;
}

{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  char v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53[3];
  char v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  void v61[3];
  char v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  uint64_t v80 = 0;
  uint64_t v81 = 0;
  uint64_t v79 = a1;
  specialized EnumeratedSequence.Iterator.next()((uint64_t)&v69);
  unint64_t v6 = v69;
  unint64_t v5 = v70;
  unint64_t v8 = v71;
  unint64_t v7 = v72;
  unint64_t v9 = v74;
  unint64_t v44 = v73;
  unint64_t v10 = v75;
  unint64_t v11 = v78;
  if (v70)
  {
    long long v46 = a3;
    char v12 = v72 & 1;
    char v13 = v74 & 1;
    unint64_t v14 = v75;
    unint64_t v15 = v76;
    unint64_t v16 = v77;
    unint64_t v17 = v78;
    uint64_t v18 = v80;
    uint64_t v50 = a2;
    uint64_t v51 = v79;
    uint64_t v19 = *(void *)(v79 + 16);
    uint64_t v48 = v81;
    uint64_t result = swift_bridgeObjectRetain();
    if (v18 == v19)
    {
      unint64_t v49 = v6;
    }
    else
    {
      uint64_t v22 = v18;
      uint64_t v39 = v19;
      while (2)
      {
        uint64_t v23 = 0;
        unint64_t v47 = v5;
        char v43 = v12;
        char v45 = v13;
        unint64_t v24 = v14;
        unint64_t v25 = v15;
        unint64_t v26 = v16;
        unint64_t v27 = v17;
        uint64_t v41 = v19 - v22;
        unint64_t v42 = v8;
        uint64_t v40 = v19 - v22 - 1;
        uint64_t v28 = 72 * v22;
        unint64_t v49 = v6;
        while (1)
        {
          if (v22 < 0)
          {
            __break(1u);
LABEL_19:
            __break(1u);
LABEL_20:
            __break(1u);
            return result;
          }
          if ((unint64_t)(v22 + v23) >= *(void *)(v51 + 16)) {
            goto LABEL_19;
          }
          if (__OFADD__(v48 + v23, 1)) {
            goto LABEL_20;
          }
          uint64_t v29 = v22;
          unint64_t v30 = *(void *)(v51 + v28 + 32);
          unint64_t v31 = *(void *)(v51 + v28 + 40);
          char v32 = *(unsigned char *)(v51 + v28 + 48);
          unint64_t v33 = *(void *)(v51 + v28 + 56);
          char v34 = *(unsigned char *)(v51 + v28 + 64);
          unint64_t v14 = *(void *)(v51 + v28 + 72);
          unint64_t v15 = *(void *)(v51 + v28 + 80);
          unint64_t v16 = *(void *)(v51 + v28 + 88);
          unint64_t v17 = *(void *)(v51 + v28 + 96);
          v61[0] = v48 + v23;
          v61[1] = v30;
          unint64_t v35 = v31;
          v61[2] = v31;
          char v12 = v32;
          char v62 = v32;
          unint64_t v36 = v33;
          unint64_t v63 = v33;
          char v13 = v34;
          char v64 = v34;
          unint64_t v65 = v14;
          unint64_t v66 = v15;
          unint64_t v67 = v16;
          unint64_t v68 = v17;
          v53[0] = v6;
          v53[1] = v47;
          v53[2] = v42;
          char v54 = v43 & 1;
          unint64_t v55 = v44;
          char v56 = v45 & 1;
          unint64_t v57 = v24;
          unint64_t v58 = v25;
          unint64_t v59 = v26;
          unint64_t v60 = v27;
          unint64_t v5 = v30;
          swift_retain();
          uint64_t v37 = v82;
          unsigned __int8 v38 = specialized closure #2 in LazySubviewPlacements.makeSizeChangeTranslation(placements:context:axes:)(v61, v53, v50, dword_1ED4767C8, &dword_1ED4767C8[1], dword_1ED4767F0, &dword_1ED4767F0[1]);
          uint64_t v82 = v37;
          if (v37)
          {
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            return outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>(v50);
          }
          if (v38) {
            break;
          }
          uint64_t result = swift_release();
          ++v23;
          v28 += 72;
          a3 = v46;
          unint64_t v6 = v49;
          uint64_t v22 = v29;
          if (v41 == v23)
          {
            unint64_t v5 = v47;
            unint64_t v8 = v42;
            char v12 = v43;
            char v13 = v45;
            unint64_t v14 = v24;
            unint64_t v15 = v25;
            unint64_t v16 = v26;
            unint64_t v17 = v27;
            goto LABEL_17;
          }
        }
        uint64_t result = swift_release();
        uint64_t v22 = v29 + v23 + 1;
        unint64_t v6 = v48 + v23;
        v48 += v23 + 1;
        uint64_t v19 = v39;
        a3 = v46;
        unint64_t v44 = v36;
        unint64_t v8 = v35;
        if (v40 != v23) {
          continue;
        }
        break;
      }
      unint64_t v49 = v6;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    uint64_t result = outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>(v50);
    *a3 = v49;
    a3[1] = v5;
    a3[2] = v8;
    a3[3] = v12 & 1;
    a3[4] = v44;
    a3[5] = v13 & 1;
    a3[6] = v14;
    a3[7] = v15;
    a3[8] = v16;
    a3[9] = v17;
  }
  else
  {
    unint64_t v52 = v77;
    unint64_t v21 = v76;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t result = outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>(a2);
    *a3 = v6;
    a3[1] = 0;
    a3[2] = v8;
    a3[3] = v7;
    a3[4] = v44;
    a3[5] = v9;
    a3[6] = v10;
    a3[7] = v21;
    a3[8] = v52;
    a3[9] = v11;
  }
  return result;
}

{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  char v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53[3];
  char v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  void v61[3];
  char v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  uint64_t v80 = 0;
  uint64_t v81 = 0;
  uint64_t v79 = a1;
  specialized EnumeratedSequence.Iterator.next()((uint64_t)&v69);
  unint64_t v6 = v69;
  unint64_t v5 = v70;
  unint64_t v8 = v71;
  unint64_t v7 = v72;
  unint64_t v9 = v74;
  unint64_t v44 = v73;
  unint64_t v10 = v75;
  unint64_t v11 = v78;
  if (v70)
  {
    long long v46 = a3;
    char v12 = v72 & 1;
    char v13 = v74 & 1;
    unint64_t v14 = v75;
    unint64_t v15 = v76;
    unint64_t v16 = v77;
    unint64_t v17 = v78;
    uint64_t v18 = v80;
    uint64_t v50 = a2;
    uint64_t v51 = v79;
    uint64_t v19 = *(void *)(v79 + 16);
    uint64_t v48 = v81;
    uint64_t result = swift_bridgeObjectRetain();
    if (v18 == v19)
    {
      unint64_t v49 = v6;
    }
    else
    {
      uint64_t v22 = v18;
      uint64_t v39 = v19;
      while (2)
      {
        uint64_t v23 = 0;
        unint64_t v47 = v5;
        char v43 = v12;
        char v45 = v13;
        unint64_t v24 = v14;
        unint64_t v25 = v15;
        unint64_t v26 = v16;
        unint64_t v27 = v17;
        uint64_t v41 = v19 - v22;
        unint64_t v42 = v8;
        uint64_t v40 = v19 - v22 - 1;
        uint64_t v28 = 72 * v22;
        unint64_t v49 = v6;
        while (1)
        {
          if (v22 < 0)
          {
            __break(1u);
LABEL_19:
            __break(1u);
LABEL_20:
            __break(1u);
            return result;
          }
          if ((unint64_t)(v22 + v23) >= *(void *)(v51 + 16)) {
            goto LABEL_19;
          }
          if (__OFADD__(v48 + v23, 1)) {
            goto LABEL_20;
          }
          uint64_t v29 = v22;
          unint64_t v30 = *(void *)(v51 + v28 + 32);
          unint64_t v31 = *(void *)(v51 + v28 + 40);
          char v32 = *(unsigned char *)(v51 + v28 + 48);
          unint64_t v33 = *(void *)(v51 + v28 + 56);
          char v34 = *(unsigned char *)(v51 + v28 + 64);
          unint64_t v14 = *(void *)(v51 + v28 + 72);
          unint64_t v15 = *(void *)(v51 + v28 + 80);
          unint64_t v16 = *(void *)(v51 + v28 + 88);
          unint64_t v17 = *(void *)(v51 + v28 + 96);
          v61[0] = v48 + v23;
          v61[1] = v30;
          unint64_t v35 = v31;
          v61[2] = v31;
          char v12 = v32;
          char v62 = v32;
          unint64_t v36 = v33;
          unint64_t v63 = v33;
          char v13 = v34;
          char v64 = v34;
          unint64_t v65 = v14;
          unint64_t v66 = v15;
          unint64_t v67 = v16;
          unint64_t v68 = v17;
          v53[0] = v6;
          v53[1] = v47;
          v53[2] = v42;
          char v54 = v43 & 1;
          unint64_t v55 = v44;
          char v56 = v45 & 1;
          unint64_t v57 = v24;
          unint64_t v58 = v25;
          unint64_t v59 = v26;
          unint64_t v60 = v27;
          unint64_t v5 = v30;
          swift_retain();
          uint64_t v37 = v82;
          unsigned __int8 v38 = specialized closure #2 in LazySubviewPlacements.makeSizeChangeTranslation(placements:context:axes:)(v61, v53, v50, dword_1ED476818, &dword_1ED476818[1], dword_1ED476840, &dword_1ED476840[1]);
          uint64_t v82 = v37;
          if (v37)
          {
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            return outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>(v50);
          }
          if (v38) {
            break;
          }
          uint64_t result = swift_release();
          ++v23;
          v28 += 72;
          a3 = v46;
          unint64_t v6 = v49;
          uint64_t v22 = v29;
          if (v41 == v23)
          {
            unint64_t v5 = v47;
            unint64_t v8 = v42;
            char v12 = v43;
            char v13 = v45;
            unint64_t v14 = v24;
            unint64_t v15 = v25;
            unint64_t v16 = v26;
            unint64_t v17 = v27;
            goto LABEL_17;
          }
        }
        uint64_t result = swift_release();
        uint64_t v22 = v29 + v23 + 1;
        unint64_t v6 = v48 + v23;
        v48 += v23 + 1;
        uint64_t v19 = v39;
        a3 = v46;
        unint64_t v44 = v36;
        unint64_t v8 = v35;
        if (v40 != v23) {
          continue;
        }
        break;
      }
      unint64_t v49 = v6;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    uint64_t result = outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>(v50);
    *a3 = v49;
    a3[1] = v5;
    a3[2] = v8;
    a3[3] = v12 & 1;
    a3[4] = v44;
    a3[5] = v13 & 1;
    a3[6] = v14;
    a3[7] = v15;
    a3[8] = v16;
    a3[9] = v17;
  }
  else
  {
    unint64_t v52 = v77;
    unint64_t v21 = v76;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t result = outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>(a2);
    *a3 = v6;
    a3[1] = 0;
    a3[2] = v8;
    a3[3] = v7;
    a3[4] = v44;
    a3[5] = v9;
    a3[6] = v10;
    a3[7] = v21;
    a3[8] = v52;
    a3[9] = v11;
  }
  return result;
}

{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  char v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53[3];
  char v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  void v61[3];
  char v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  uint64_t v80 = 0;
  uint64_t v81 = 0;
  uint64_t v79 = a1;
  specialized EnumeratedSequence.Iterator.next()((uint64_t)&v69);
  unint64_t v6 = v69;
  unint64_t v5 = v70;
  unint64_t v8 = v71;
  unint64_t v7 = v72;
  unint64_t v9 = v74;
  unint64_t v44 = v73;
  unint64_t v10 = v75;
  unint64_t v11 = v78;
  if (v70)
  {
    long long v46 = a3;
    char v12 = v72 & 1;
    char v13 = v74 & 1;
    unint64_t v14 = v75;
    unint64_t v15 = v76;
    unint64_t v16 = v77;
    unint64_t v17 = v78;
    uint64_t v18 = v80;
    uint64_t v50 = a2;
    uint64_t v51 = v79;
    uint64_t v19 = *(void *)(v79 + 16);
    uint64_t v48 = v81;
    uint64_t result = swift_bridgeObjectRetain();
    if (v18 == v19)
    {
      unint64_t v49 = v6;
    }
    else
    {
      uint64_t v22 = v18;
      uint64_t v39 = v19;
      while (2)
      {
        uint64_t v23 = 0;
        unint64_t v47 = v5;
        char v43 = v12;
        char v45 = v13;
        unint64_t v24 = v14;
        unint64_t v25 = v15;
        unint64_t v26 = v16;
        unint64_t v27 = v17;
        uint64_t v41 = v19 - v22;
        unint64_t v42 = v8;
        uint64_t v40 = v19 - v22 - 1;
        uint64_t v28 = 72 * v22;
        unint64_t v49 = v6;
        while (1)
        {
          if (v22 < 0)
          {
            __break(1u);
LABEL_19:
            __break(1u);
LABEL_20:
            __break(1u);
            return result;
          }
          if ((unint64_t)(v22 + v23) >= *(void *)(v51 + 16)) {
            goto LABEL_19;
          }
          if (__OFADD__(v48 + v23, 1)) {
            goto LABEL_20;
          }
          uint64_t v29 = v22;
          unint64_t v30 = *(void *)(v51 + v28 + 32);
          unint64_t v31 = *(void *)(v51 + v28 + 40);
          char v32 = *(unsigned char *)(v51 + v28 + 48);
          unint64_t v33 = *(void *)(v51 + v28 + 56);
          char v34 = *(unsigned char *)(v51 + v28 + 64);
          unint64_t v14 = *(void *)(v51 + v28 + 72);
          unint64_t v15 = *(void *)(v51 + v28 + 80);
          unint64_t v16 = *(void *)(v51 + v28 + 88);
          unint64_t v17 = *(void *)(v51 + v28 + 96);
          v61[0] = v48 + v23;
          v61[1] = v30;
          unint64_t v35 = v31;
          v61[2] = v31;
          char v12 = v32;
          char v62 = v32;
          unint64_t v36 = v33;
          unint64_t v63 = v33;
          char v13 = v34;
          char v64 = v34;
          unint64_t v65 = v14;
          unint64_t v66 = v15;
          unint64_t v67 = v16;
          unint64_t v68 = v17;
          v53[0] = v6;
          v53[1] = v47;
          v53[2] = v42;
          char v54 = v43 & 1;
          unint64_t v55 = v44;
          char v56 = v45 & 1;
          unint64_t v57 = v24;
          unint64_t v58 = v25;
          unint64_t v59 = v26;
          unint64_t v60 = v27;
          unint64_t v5 = v30;
          swift_retain();
          uint64_t v37 = v82;
          unsigned __int8 v38 = specialized closure #2 in LazySubviewPlacements.makeSizeChangeTranslation(placements:context:axes:)(v61, v53, v50, dword_1ED476868, &dword_1ED476868[1], dword_1ED476890, &dword_1ED476890[1]);
          uint64_t v82 = v37;
          if (v37)
          {
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            return outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>(v50);
          }
          if (v38) {
            break;
          }
          uint64_t result = swift_release();
          ++v23;
          v28 += 72;
          a3 = v46;
          unint64_t v6 = v49;
          uint64_t v22 = v29;
          if (v41 == v23)
          {
            unint64_t v5 = v47;
            unint64_t v8 = v42;
            char v12 = v43;
            char v13 = v45;
            unint64_t v14 = v24;
            unint64_t v15 = v25;
            unint64_t v16 = v26;
            unint64_t v17 = v27;
            goto LABEL_17;
          }
        }
        uint64_t result = swift_release();
        uint64_t v22 = v29 + v23 + 1;
        unint64_t v6 = v48 + v23;
        v48 += v23 + 1;
        uint64_t v19 = v39;
        a3 = v46;
        unint64_t v44 = v36;
        unint64_t v8 = v35;
        if (v40 != v23) {
          continue;
        }
        break;
      }
      unint64_t v49 = v6;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    uint64_t result = outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>(v50);
    *a3 = v49;
    a3[1] = v5;
    a3[2] = v8;
    a3[3] = v12 & 1;
    a3[4] = v44;
    a3[5] = v13 & 1;
    a3[6] = v14;
    a3[7] = v15;
    a3[8] = v16;
    a3[9] = v17;
  }
  else
  {
    unint64_t v52 = v77;
    unint64_t v21 = v76;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t result = outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>(a2);
    *a3 = v6;
    a3[1] = 0;
    a3[2] = v8;
    a3[3] = v7;
    a3[4] = v44;
    a3[5] = v9;
    a3[6] = v10;
    a3[7] = v21;
    a3[8] = v52;
    a3[9] = v11;
  }
  return result;
}

{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  char v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53[3];
  char v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  void v61[3];
  char v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  uint64_t v80 = 0;
  uint64_t v81 = 0;
  uint64_t v79 = a1;
  specialized EnumeratedSequence.Iterator.next()((uint64_t)&v69);
  unint64_t v6 = v69;
  unint64_t v5 = v70;
  unint64_t v8 = v71;
  unint64_t v7 = v72;
  unint64_t v9 = v74;
  unint64_t v44 = v73;
  unint64_t v10 = v75;
  unint64_t v11 = v78;
  if (v70)
  {
    long long v46 = a3;
    char v12 = v72 & 1;
    char v13 = v74 & 1;
    unint64_t v14 = v75;
    unint64_t v15 = v76;
    unint64_t v16 = v77;
    unint64_t v17 = v78;
    uint64_t v18 = v80;
    uint64_t v50 = a2;
    uint64_t v51 = v79;
    uint64_t v19 = *(void *)(v79 + 16);
    uint64_t v48 = v81;
    uint64_t result = swift_bridgeObjectRetain();
    if (v18 == v19)
    {
      unint64_t v49 = v6;
    }
    else
    {
      uint64_t v22 = v18;
      uint64_t v39 = v19;
      while (2)
      {
        uint64_t v23 = 0;
        unint64_t v47 = v5;
        char v43 = v12;
        char v45 = v13;
        unint64_t v24 = v14;
        unint64_t v25 = v15;
        unint64_t v26 = v16;
        unint64_t v27 = v17;
        uint64_t v41 = v19 - v22;
        unint64_t v42 = v8;
        uint64_t v40 = v19 - v22 - 1;
        uint64_t v28 = 72 * v22;
        unint64_t v49 = v6;
        while (1)
        {
          if (v22 < 0)
          {
            __break(1u);
LABEL_19:
            __break(1u);
LABEL_20:
            __break(1u);
            return result;
          }
          if ((unint64_t)(v22 + v23) >= *(void *)(v51 + 16)) {
            goto LABEL_19;
          }
          if (__OFADD__(v48 + v23, 1)) {
            goto LABEL_20;
          }
          uint64_t v29 = v22;
          unint64_t v30 = *(void *)(v51 + v28 + 32);
          unint64_t v31 = *(void *)(v51 + v28 + 40);
          char v32 = *(unsigned char *)(v51 + v28 + 48);
          unint64_t v33 = *(void *)(v51 + v28 + 56);
          char v34 = *(unsigned char *)(v51 + v28 + 64);
          unint64_t v14 = *(void *)(v51 + v28 + 72);
          unint64_t v15 = *(void *)(v51 + v28 + 80);
          unint64_t v16 = *(void *)(v51 + v28 + 88);
          unint64_t v17 = *(void *)(v51 + v28 + 96);
          v61[0] = v48 + v23;
          v61[1] = v30;
          unint64_t v35 = v31;
          v61[2] = v31;
          char v12 = v32;
          char v62 = v32;
          unint64_t v36 = v33;
          unint64_t v63 = v33;
          char v13 = v34;
          char v64 = v34;
          unint64_t v65 = v14;
          unint64_t v66 = v15;
          unint64_t v67 = v16;
          unint64_t v68 = v17;
          v53[0] = v6;
          v53[1] = v47;
          v53[2] = v42;
          char v54 = v43 & 1;
          unint64_t v55 = v44;
          char v56 = v45 & 1;
          unint64_t v57 = v24;
          unint64_t v58 = v25;
          unint64_t v59 = v26;
          unint64_t v60 = v27;
          unint64_t v5 = v30;
          swift_retain();
          uint64_t v37 = v82;
          unsigned __int8 v38 = specialized closure #2 in LazySubviewPlacements.makeSizeChangeTranslation(placements:context:axes:)(v61, v53, v50, dword_1ED4768B8, &dword_1ED4768B8[1], dword_1ED4768E0, &dword_1ED4768E0[1]);
          uint64_t v82 = v37;
          if (v37)
          {
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            return outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>(v50);
          }
          if (v38) {
            break;
          }
          uint64_t result = swift_release();
          ++v23;
          v28 += 72;
          a3 = v46;
          unint64_t v6 = v49;
          uint64_t v22 = v29;
          if (v41 == v23)
          {
            unint64_t v5 = v47;
            unint64_t v8 = v42;
            char v12 = v43;
            char v13 = v45;
            unint64_t v14 = v24;
            unint64_t v15 = v25;
            unint64_t v16 = v26;
            unint64_t v17 = v27;
            goto LABEL_17;
          }
        }
        uint64_t result = swift_release();
        uint64_t v22 = v29 + v23 + 1;
        unint64_t v6 = v48 + v23;
        v48 += v23 + 1;
        uint64_t v19 = v39;
        a3 = v46;
        unint64_t v44 = v36;
        unint64_t v8 = v35;
        if (v40 != v23) {
          continue;
        }
        break;
      }
      unint64_t v49 = v6;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    uint64_t result = outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>(v50);
    *a3 = v49;
    a3[1] = v5;
    a3[2] = v8;
    a3[3] = v12 & 1;
    a3[4] = v44;
    a3[5] = v13 & 1;
    a3[6] = v14;
    a3[7] = v15;
    a3[8] = v16;
    a3[9] = v17;
  }
  else
  {
    unint64_t v52 = v77;
    unint64_t v21 = v76;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t result = outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>(a2);
    *a3 = v6;
    a3[1] = 0;
    a3[2] = v8;
    a3[3] = v7;
    a3[4] = v44;
    a3[5] = v9;
    a3[6] = v10;
    a3[7] = v21;
    a3[8] = v52;
    a3[9] = v11;
  }
  return result;
}

{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  char v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53[3];
  char v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  void v61[3];
  char v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  uint64_t v80 = 0;
  uint64_t v81 = 0;
  uint64_t v79 = a1;
  specialized EnumeratedSequence.Iterator.next()((uint64_t)&v69);
  unint64_t v6 = v69;
  unint64_t v5 = v70;
  unint64_t v8 = v71;
  unint64_t v7 = v72;
  unint64_t v9 = v74;
  unint64_t v44 = v73;
  unint64_t v10 = v75;
  unint64_t v11 = v78;
  if (v70)
  {
    long long v46 = a3;
    char v12 = v72 & 1;
    char v13 = v74 & 1;
    unint64_t v14 = v75;
    unint64_t v15 = v76;
    unint64_t v16 = v77;
    unint64_t v17 = v78;
    uint64_t v18 = v80;
    uint64_t v50 = a2;
    uint64_t v51 = v79;
    uint64_t v19 = *(void *)(v79 + 16);
    uint64_t v48 = v81;
    uint64_t result = swift_bridgeObjectRetain();
    if (v18 == v19)
    {
      unint64_t v49 = v6;
    }
    else
    {
      uint64_t v22 = v18;
      uint64_t v39 = v19;
      while (2)
      {
        uint64_t v23 = 0;
        unint64_t v47 = v5;
        char v43 = v12;
        char v45 = v13;
        unint64_t v24 = v14;
        unint64_t v25 = v15;
        unint64_t v26 = v16;
        unint64_t v27 = v17;
        uint64_t v41 = v19 - v22;
        unint64_t v42 = v8;
        uint64_t v40 = v19 - v22 - 1;
        uint64_t v28 = 72 * v22;
        unint64_t v49 = v6;
        while (1)
        {
          if (v22 < 0)
          {
            __break(1u);
LABEL_19:
            __break(1u);
LABEL_20:
            __break(1u);
            return result;
          }
          if ((unint64_t)(v22 + v23) >= *(void *)(v51 + 16)) {
            goto LABEL_19;
          }
          if (__OFADD__(v48 + v23, 1)) {
            goto LABEL_20;
          }
          uint64_t v29 = v22;
          unint64_t v30 = *(void *)(v51 + v28 + 32);
          unint64_t v31 = *(void *)(v51 + v28 + 40);
          char v32 = *(unsigned char *)(v51 + v28 + 48);
          unint64_t v33 = *(void *)(v51 + v28 + 56);
          char v34 = *(unsigned char *)(v51 + v28 + 64);
          unint64_t v14 = *(void *)(v51 + v28 + 72);
          unint64_t v15 = *(void *)(v51 + v28 + 80);
          unint64_t v16 = *(void *)(v51 + v28 + 88);
          unint64_t v17 = *(void *)(v51 + v28 + 96);
          v61[0] = v48 + v23;
          v61[1] = v30;
          unint64_t v35 = v31;
          v61[2] = v31;
          char v12 = v32;
          char v62 = v32;
          unint64_t v36 = v33;
          unint64_t v63 = v33;
          char v13 = v34;
          char v64 = v34;
          unint64_t v65 = v14;
          unint64_t v66 = v15;
          unint64_t v67 = v16;
          unint64_t v68 = v17;
          v53[0] = v6;
          v53[1] = v47;
          v53[2] = v42;
          char v54 = v43 & 1;
          unint64_t v55 = v44;
          char v56 = v45 & 1;
          unint64_t v57 = v24;
          unint64_t v58 = v25;
          unint64_t v59 = v26;
          unint64_t v60 = v27;
          unint64_t v5 = v30;
          swift_retain();
          uint64_t v37 = v82;
          unsigned __int8 v38 = specialized closure #2 in LazySubviewPlacements.makeSizeChangeTranslation(placements:context:axes:)(v61, v53, v50, dword_1ED476908, &dword_1ED476908[1], dword_1ED476930, &dword_1ED476930[1]);
          uint64_t v82 = v37;
          if (v37)
          {
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            return outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>(v50);
          }
          if (v38) {
            break;
          }
          uint64_t result = swift_release();
          ++v23;
          v28 += 72;
          a3 = v46;
          unint64_t v6 = v49;
          uint64_t v22 = v29;
          if (v41 == v23)
          {
            unint64_t v5 = v47;
            unint64_t v8 = v42;
            char v12 = v43;
            char v13 = v45;
            unint64_t v14 = v24;
            unint64_t v15 = v25;
            unint64_t v16 = v26;
            unint64_t v17 = v27;
            goto LABEL_17;
          }
        }
        uint64_t result = swift_release();
        uint64_t v22 = v29 + v23 + 1;
        unint64_t v6 = v48 + v23;
        v48 += v23 + 1;
        uint64_t v19 = v39;
        a3 = v46;
        unint64_t v44 = v36;
        unint64_t v8 = v35;
        if (v40 != v23) {
          continue;
        }
        break;
      }
      unint64_t v49 = v6;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    uint64_t result = outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>(v50);
    *a3 = v49;
    a3[1] = v5;
    a3[2] = v8;
    a3[3] = v12 & 1;
    a3[4] = v44;
    a3[5] = v13 & 1;
    a3[6] = v14;
    a3[7] = v15;
    a3[8] = v16;
    a3[9] = v17;
  }
  else
  {
    unint64_t v52 = v77;
    unint64_t v21 = v76;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t result = outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>(a2);
    *a3 = v6;
    a3[1] = 0;
    a3[2] = v8;
    a3[3] = v7;
    a3[4] = v44;
    a3[5] = v9;
    a3[6] = v10;
    a3[7] = v21;
    a3[8] = v52;
    a3[9] = v11;
  }
  return result;
}

void specialized LazySubviewPrefetcher.updateValue()(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t Value = AGGraphGetValue();
  if (*(void *)(v2 + 32) != *(void *)Value)
  {
    unsigned __int8 v6 = *(unsigned char *)(Value + 16);
    *(void *)(v2 + 32) = *(void *)Value;
    type metadata accessor for LazyLayoutViewCache();
    if ((*(unsigned char *)(*(void *)AGGraphGetValue() + 216) & v6) != 0)
    {
      unint64_t v28 = a1;
      unsigned int v27 = *(_DWORD *)v2;
      lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging();
      if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) == 0) {
        goto LABEL_8;
      }
      if (one-time initialization token for log != -1) {
        goto LABEL_22;
      }
      while (1)
      {
        uint64_t v7 = type metadata accessor for Logger();
        __swift_project_value_buffer(v7, (uint64_t)static Log.LazyLayoutPrefetch.log);
        unint64_t v8 = Logger.logObject.getter();
        os_log_type_t v9 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v8, v9))
        {
          log = v8;
          uint64_t v10 = swift_slowAlloc();
          uint64_t v26 = swift_slowAlloc();
          uint64_t v30 = v26;
          *(_DWORD *)uint64_t v10 = 136446466;
          uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000040, a1, &v30);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v10 + 12) = 2082;
          uint64_t v11 = MEMORY[0x18C10AA50](v27, a2);
          uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v30);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1872C6000, log, v9, "%{public}s %{public}s start prefetch", (uint8_t *)v10, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x18C119C60](v26, -1, -1);
          MEMORY[0x18C119C60](v10, -1, -1);
        }
        else
        {
        }
LABEL_8:
        if (AGGraphGetCurrentAttribute() != *MEMORY[0x1E4F4E7A0]) {
          break;
        }
        __break(1u);
LABEL_22:
        swift_once();
      }
      id v13 = (id)AGGraphGetAttributeGraph();
      AGGraphGetDeadline();
      AGGraphSetDeadline();
      specialized closure #1 in LazySubviewPrefetcher.updateValue()(v4);
      AGGraphSetDeadline();

      int v14 = *(unsigned __int8 *)(v4 + 56);
      if (static UserDefaultKeyedFeature.isEnabled.getter())
      {
        if (one-time initialization token for log != -1) {
          swift_once();
        }
        uint64_t v15 = type metadata accessor for Logger();
        __swift_project_value_buffer(v15, (uint64_t)static Log.LazyLayoutPrefetch.log);
        unint64_t v16 = Logger.logObject.getter();
        os_log_type_t v17 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v16, v17))
        {
          uint64_t v18 = swift_slowAlloc();
          uint64_t v19 = swift_slowAlloc();
          uint64_t v32 = v19;
          *(_DWORD *)uint64_t v18 = 136446722;
          uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000040, v28, &v32);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v18 + 12) = 2082;
          uint64_t v20 = MEMORY[0x18C10AA50](v27, a2);
          uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v32);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v18 + 22) = 2082;
          if (v14)
          {
            if (v14 == 1)
            {
              unint64_t v22 = 0xEF7374757074754FLL;
              uint64_t v23 = 0x6863746566657270;
            }
            else
            {
              unint64_t v22 = 0xE800000000000000;
              uint64_t v23 = 0x6574656C706D6F63;
            }
          }
          else
          {
            uint64_t v30 = 0x77656956656B616DLL;
            unint64_t v31 = 0xEA00000000002320;
            v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v24);
            swift_bridgeObjectRelease();
            uint64_t v23 = v30;
            unint64_t v22 = v31;
          }
          uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v22, &v32);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1872C6000, v16, v17, "%{public}s %{public}s end prefetch, phase=%{public}s", (uint8_t *)v18, 0x20u);
          swift_arrayDestroy();
          MEMORY[0x18C119C60](v19, -1, -1);
          MEMORY[0x18C119C60](v18, -1, -1);
        }
      }
    }
  }
}

uint64_t specialized closure #1 in LazySubviewPrefetcher.updateValue()(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 40);
  type metadata accessor for LazyLayoutViewCache();
  uint64_t result = AGGraphGetValue();
  int v4 = *(_DWORD *)(*(void *)result + 212);
  if (v2 != v4)
  {
    *(_DWORD *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = 0;
    *(unsigned char *)(a1 + 56) = 0;
  }
  int v5 = *MEMORY[0x1E4F4E7A0];
  do
  {
    unsigned int v8 = *(unsigned __int8 *)(a1 + 56);
    if (v8 > 1) {
      break;
    }
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v9 = *(void *)(a1 + 32);
    int v10 = *(_DWORD *)(a1 + 40);
    long long v11 = *(_OWORD *)(a1 + 16);
    v15[0] = *(_OWORD *)a1;
    v15[1] = v11;
    uint64_t v16 = v9;
    int v17 = v10;
    uint64_t v18 = v7;
    char v19 = v8;
    if (!v8)
    {
      uint64_t result = AGGraphGetCurrentAttribute();
      if (result == v5)
      {
        __break(1u);
        return result;
      }
      uint64_t v12 = result;
      AGGraphClearUpdate();
      unsigned __int8 v13 = specialized closure #1 in LazySubviewPrefetcher.step(info:)(v12, (uint64_t)v15);
      uint64_t result = AGGraphSetUpdate();
      if (!v13)
      {
        uint64_t v7 = v13;
        char v6 = 2;
        goto LABEL_5;
      }
      if (v13 != 2)
      {
LABEL_17:
        *(void *)(a1 + 48) = v7;
        *(unsigned char *)(a1 + 56) = 0;
        return result;
      }
      ++v7;
      goto LABEL_15;
    }
    MEMORY[0x1F4188790](result);
    uint64_t result = static Signpost.prefetchOutputs<A>(_:)();
    if (v14)
    {
      if (v14 != 1) {
        goto LABEL_17;
      }
LABEL_15:
      char v6 = 1;
      goto LABEL_5;
    }
    char v6 = 2;
    uint64_t v7 = 0;
LABEL_5:
    *(void *)(a1 + 48) = v7;
    *(unsigned char *)(a1 + 56) = v6;
    uint64_t result = AGGraphHasDeadlinePassed();
  }
  while ((result & 1) == 0);
  return result;
}

uint64_t specialized closure #1 in LazySubviewPrefetcher.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a1 + 40);
  type metadata accessor for LazyLayoutViewCache();
  uint64_t result = AGGraphGetValue();
  int v10 = *(_DWORD *)(*(void *)result + 212);
  if (v8 != v10)
  {
    unsigned int v11 = 0;
    *(_DWORD *)(a1 + 40) = v10;
    *(void *)(a1 + 48) = 0;
    *(unsigned char *)(a1 + 56) = 0;
    goto LABEL_5;
  }
  unsigned int v11 = *(unsigned __int8 *)(a1 + 56);
  if (v11 <= 1)
  {
LABEL_5:
    int v12 = *MEMORY[0x1E4F4E7A0];
    while (1)
    {
      uint64_t v13 = *(void *)(a1 + 48);
      uint64_t v14 = *(void *)(a1 + 32);
      int v15 = *(_DWORD *)(a1 + 40);
      long long v16 = *(_OWORD *)(a1 + 16);
      v21[0] = *(_OWORD *)a1;
      v21[1] = v16;
      uint64_t v22 = v14;
      int v23 = v15;
      uint64_t v24 = v13;
      char v25 = v11;
      if (v11)
      {
        MEMORY[0x1F4188790](result);
        uint64_t result = static Signpost.prefetchOutputs<A>(_:)();
        if (v20)
        {
          if (v20 != 1) {
            goto LABEL_20;
          }
LABEL_14:
          char v19 = 1;
          goto LABEL_17;
        }
        char v19 = 2;
        uint64_t v13 = 0;
      }
      else
      {
        uint64_t result = AGGraphGetCurrentAttribute();
        if (result == v12)
        {
          __break(1u);
          return result;
        }
        uint64_t v17 = result;
        AGGraphClearUpdate();
        unsigned __int8 v18 = specialized closure #1 in LazySubviewPrefetcher.step(info:)(v17, (uint64_t)v21, a2, a3, a4, v13, (uint64_t)&type metadata for LazyVStackLayout, &lazy cache variable for type metadata for _LazyStack_Cache<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout);
        uint64_t result = AGGraphSetUpdate();
        if (v18)
        {
          if (v18 != 2)
          {
LABEL_20:
            *(void *)(a1 + 48) = v13;
            *(unsigned char *)(a1 + 56) = 0;
            return result;
          }
          ++v13;
          goto LABEL_14;
        }
        uint64_t v13 = v18;
        char v19 = 2;
      }
LABEL_17:
      *(void *)(a1 + 48) = v13;
      *(unsigned char *)(a1 + 56) = v19;
      uint64_t result = AGGraphHasDeadlinePassed();
      if ((result & 1) == 0)
      {
        unsigned int v11 = *(unsigned __int8 *)(a1 + 56);
        if (v11 < 2) {
          continue;
        }
      }
      return result;
    }
  }
  return result;
}

{
  int v8;
  uint64_t result;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  long long v16;
  uint64_t v17;
  unsigned __int8 v18;
  char v19;
  char v20;
  _OWORD v21[2];
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;

  int v8 = *(_DWORD *)(a1 + 40);
  type metadata accessor for LazyLayoutViewCache();
  uint64_t result = AGGraphGetValue();
  int v10 = *(_DWORD *)(*(void *)result + 212);
  if (v8 != v10)
  {
    unsigned int v11 = 0;
    *(_DWORD *)(a1 + 40) = v10;
    *(void *)(a1 + 48) = 0;
    *(unsigned char *)(a1 + 56) = 0;
    goto LABEL_5;
  }
  unsigned int v11 = *(unsigned __int8 *)(a1 + 56);
  if (v11 <= 1)
  {
LABEL_5:
    int v12 = *MEMORY[0x1E4F4E7A0];
    while (1)
    {
      uint64_t v13 = *(void *)(a1 + 48);
      uint64_t v14 = *(void *)(a1 + 32);
      int v15 = *(_DWORD *)(a1 + 40);
      long long v16 = *(_OWORD *)(a1 + 16);
      v21[0] = *(_OWORD *)a1;
      v21[1] = v16;
      uint64_t v22 = v14;
      int v23 = v15;
      uint64_t v24 = v13;
      char v25 = v11;
      if (v11)
      {
        MEMORY[0x1F4188790](result);
        uint64_t result = static Signpost.prefetchOutputs<A>(_:)();
        if (v20)
        {
          if (v20 != 1) {
            goto LABEL_20;
          }
LABEL_14:
          char v19 = 1;
          goto LABEL_17;
        }
        char v19 = 2;
        uint64_t v13 = 0;
      }
      else
      {
        uint64_t result = AGGraphGetCurrentAttribute();
        if (result == v12)
        {
          __break(1u);
          return result;
        }
        uint64_t v17 = result;
        AGGraphClearUpdate();
        unsigned __int8 v18 = specialized closure #1 in LazySubviewPrefetcher.step(info:)(v17, (uint64_t)v21, a2, a3, a4, v13, (uint64_t)&type metadata for LazyHStackLayout, &lazy cache variable for type metadata for _LazyStack_Cache<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout);
        uint64_t result = AGGraphSetUpdate();
        if (v18)
        {
          if (v18 != 2)
          {
LABEL_20:
            *(void *)(a1 + 48) = v13;
            *(unsigned char *)(a1 + 56) = 0;
            return result;
          }
          ++v13;
          goto LABEL_14;
        }
        uint64_t v13 = v18;
        char v19 = 2;
      }
LABEL_17:
      *(void *)(a1 + 48) = v13;
      *(unsigned char *)(a1 + 56) = v19;
      uint64_t result = AGGraphHasDeadlinePassed();
      if ((result & 1) == 0)
      {
        unsigned int v11 = *(unsigned __int8 *)(a1 + 56);
        if (v11 < 2) {
          continue;
        }
      }
      return result;
    }
  }
  return result;
}

{
  int v8;
  uint64_t result;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  long long v16;
  uint64_t v17;
  unsigned __int8 v18;
  char v19;
  char v20;
  _OWORD v21[2];
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;

  int v8 = *(_DWORD *)(a1 + 40);
  type metadata accessor for LazyLayoutViewCache();
  uint64_t result = AGGraphGetValue();
  int v10 = *(_DWORD *)(*(void *)result + 212);
  if (v8 != v10)
  {
    unsigned int v11 = 0;
    *(_DWORD *)(a1 + 40) = v10;
    *(void *)(a1 + 48) = 0;
    *(unsigned char *)(a1 + 56) = 0;
    goto LABEL_5;
  }
  unsigned int v11 = *(unsigned __int8 *)(a1 + 56);
  if (v11 <= 1)
  {
LABEL_5:
    int v12 = *MEMORY[0x1E4F4E7A0];
    while (1)
    {
      uint64_t v13 = *(void *)(a1 + 48);
      uint64_t v14 = *(void *)(a1 + 32);
      int v15 = *(_DWORD *)(a1 + 40);
      long long v16 = *(_OWORD *)(a1 + 16);
      v21[0] = *(_OWORD *)a1;
      v21[1] = v16;
      uint64_t v22 = v14;
      int v23 = v15;
      uint64_t v24 = v13;
      char v25 = v11;
      if (v11)
      {
        MEMORY[0x1F4188790](result);
        uint64_t result = static Signpost.prefetchOutputs<A>(_:)();
        if (v20)
        {
          if (v20 != 1) {
            goto LABEL_20;
          }
LABEL_14:
          char v19 = 1;
          goto LABEL_17;
        }
        char v19 = 2;
        uint64_t v13 = 0;
      }
      else
      {
        uint64_t result = AGGraphGetCurrentAttribute();
        if (result == v12)
        {
          __break(1u);
          return result;
        }
        uint64_t v17 = result;
        AGGraphClearUpdate();
        unsigned __int8 v18 = specialized closure #1 in LazySubviewPrefetcher.step(info:)(v17, (uint64_t)v21, a2, a3, a4, v13, (uint64_t)&type metadata for LazyHGridLayout, &lazy cache variable for type metadata for _LazyStack_Cache<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout);
        uint64_t result = AGGraphSetUpdate();
        if (v18)
        {
          if (v18 != 2)
          {
LABEL_20:
            *(void *)(a1 + 48) = v13;
            *(unsigned char *)(a1 + 56) = 0;
            return result;
          }
          ++v13;
          goto LABEL_14;
        }
        uint64_t v13 = v18;
        char v19 = 2;
      }
LABEL_17:
      *(void *)(a1 + 48) = v13;
      *(unsigned char *)(a1 + 56) = v19;
      uint64_t result = AGGraphHasDeadlinePassed();
      if ((result & 1) == 0)
      {
        unsigned int v11 = *(unsigned __int8 *)(a1 + 56);
        if (v11 < 2) {
          continue;
        }
      }
      return result;
    }
  }
  return result;
}

{
  int v8;
  uint64_t result;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  long long v16;
  uint64_t v17;
  unsigned __int8 v18;
  char v19;
  char v20;
  _OWORD v21[2];
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;

  int v8 = *(_DWORD *)(a1 + 40);
  type metadata accessor for LazyLayoutViewCache();
  uint64_t result = AGGraphGetValue();
  int v10 = *(_DWORD *)(*(void *)result + 212);
  if (v8 != v10)
  {
    unsigned int v11 = 0;
    *(_DWORD *)(a1 + 40) = v10;
    *(void *)(a1 + 48) = 0;
    *(unsigned char *)(a1 + 56) = 0;
    goto LABEL_5;
  }
  unsigned int v11 = *(unsigned __int8 *)(a1 + 56);
  if (v11 <= 1)
  {
LABEL_5:
    int v12 = *MEMORY[0x1E4F4E7A0];
    while (1)
    {
      uint64_t v13 = *(void *)(a1 + 48);
      uint64_t v14 = *(void *)(a1 + 32);
      int v15 = *(_DWORD *)(a1 + 40);
      long long v16 = *(_OWORD *)(a1 + 16);
      v21[0] = *(_OWORD *)a1;
      v21[1] = v16;
      uint64_t v22 = v14;
      int v23 = v15;
      uint64_t v24 = v13;
      char v25 = v11;
      if (v11)
      {
        MEMORY[0x1F4188790](result);
        uint64_t result = static Signpost.prefetchOutputs<A>(_:)();
        if (v20)
        {
          if (v20 != 1) {
            goto LABEL_20;
          }
LABEL_14:
          char v19 = 1;
          goto LABEL_17;
        }
        char v19 = 2;
        uint64_t v13 = 0;
      }
      else
      {
        uint64_t result = AGGraphGetCurrentAttribute();
        if (result == v12)
        {
          __break(1u);
          return result;
        }
        uint64_t v17 = result;
        AGGraphClearUpdate();
        unsigned __int8 v18 = specialized closure #1 in LazySubviewPrefetcher.step(info:)(v17, (uint64_t)v21, a2, a3, a4, v13, (uint64_t)&type metadata for LazyVGridLayout, &lazy cache variable for type metadata for _LazyStack_Cache<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout);
        uint64_t result = AGGraphSetUpdate();
        if (v18)
        {
          if (v18 != 2)
          {
LABEL_20:
            *(void *)(a1 + 48) = v13;
            *(unsigned char *)(a1 + 56) = 0;
            return result;
          }
          ++v13;
          goto LABEL_14;
        }
        uint64_t v13 = v18;
        char v19 = 2;
      }
LABEL_17:
      *(void *)(a1 + 48) = v13;
      *(unsigned char *)(a1 + 56) = v19;
      uint64_t result = AGGraphHasDeadlinePassed();
      if ((result & 1) == 0)
      {
        unsigned int v11 = *(unsigned __int8 *)(a1 + 56);
        if (v11 < 2) {
          continue;
        }
      }
      return result;
    }
  }
  return result;
}

uint64_t specialized closure #1 in LazySubviewPrefetcher.step(info:)(uint64_t a1, uint64_t a2)
{
  int v2 = *MEMORY[0x1E4F4E7A0];
  int v3 = *(_DWORD *)(a2 + 28);
  LOBYTE(v18) = 0;
  SizeAndSpacingContext.init(context:owner:environment:)();
  uint64_t v15 = v18;
  int v16 = v19;
  int v17 = v3;
  void v14[2] = *(_OWORD *)AGGraphGetValue();
  uint64_t Value = (long long *)AGGraphGetValue();
  long long v5 = Value[1];
  v14[0] = *Value;
  v14[1] = v5;
  uint64_t v6 = AGGraphGetValue();
  uint64_t v9 = *(void *)v6;
  long long v10 = *(_OWORD *)(v6 + 8);
  long long v11 = *(_OWORD *)(v6 + 24);
  type metadata accessor for LazyLayoutViewCache();
  AGGraphGetValue();
  char v13 = *(unsigned char *)AGGraphGetValue();
  int v12 = 0;
  AGGraphGetValue();
  LOBYTE(v3) = *(unsigned char *)AGGraphGetValue();
  swift_retain();
  _LazyLayout_PlacementContext.init(base:position:size:transform:layoutDirection:pinnedViews:isAccessibilityEnabled:)(&v15, v14, (uint64_t)&v9, &v13, &v12, v3, (uint64_t)&v18);
  AGGraphGetValue();
  swift_retain();
  LazyLayoutViewCache.subviews(context:)(v2, (uint64_t)&v9);
  swift_release();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(**(void **)AGGraphGetValue() + 280);
  swift_retain();
  v7(MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC848] + 8);
  swift_release();
  static Signpost.prefetchMakeView<A>(_:)();
  outlined destroy of _LazyLayout_Subviews((uint64_t)&v9);
  return LOBYTE(v14[0]);
}

uint64_t specialized closure #1 in LazySubviewPrefetcher.step(info:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t *a8, uint64_t (*a9)(void))
{
  void (*v20)(long long *__return_ptr, uint64_t, uint64_t);
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  char v34;
  long long v35;
  uint64_t v36;
  int v37;
  unsigned char v38[48];
  long long v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;

  int v11 = *MEMORY[0x1E4F4E7A0];
  int v12 = *(_DWORD *)(a2 + 28);
  LOBYTE(v36) = 0;
  SizeAndSpacingContext.init(context:owner:environment:)();
  uint64_t v30 = v36;
  unint64_t v31 = v37;
  uint64_t v32 = v12;
  unint64_t v35 = *(_OWORD *)AGGraphGetValue();
  uint64_t Value = (long long *)AGGraphGetValue();
  long long v14 = Value[1];
  uint64_t v22 = *Value;
  int v23 = v14;
  uint64_t v15 = AGGraphGetValue();
  *(void *)unsigned __int8 v38 = *(void *)v15;
  *(_OWORD *)&v38[8] = *(_OWORD *)(v15 + 8);
  *(_OWORD *)&v38[24] = *(_OWORD *)(v15 + 24);
  type metadata accessor for LazyLayoutViewCache();
  AGGraphGetValue();
  char v34 = *(unsigned char *)AGGraphGetValue();
  unint64_t v33 = *(_DWORD *)(AGGraphGetValue() + 20);
  AGGraphGetValue();
  char v16 = *(unsigned char *)AGGraphGetValue();
  swift_retain();
  _LazyLayout_PlacementContext.init(base:position:size:transform:layoutDirection:pinnedViews:isAccessibilityEnabled:)(&v30, &v22, (uint64_t)v38, &v34, &v33, v16, (uint64_t)&v36);
  AGGraphGetValue();
  swift_retain();
  LazyLayoutViewCache.subviews(context:)(v11, (uint64_t)&v30);
  swift_release();
  uint64_t v17 = *(void *)AGGraphGetValue();
  type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, a8, a9, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LazyStack_Cache);
  uint64_t v19 = v18;
  char v20 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)v17 + 280);
  swift_retain();
  v20(&v22, v19, v19);
  swift_release();
  static Signpost.prefetchMakeView<A>(_:)();
  uint64_t v40 = v26;
  uint64_t v41 = v27;
  unint64_t v42 = v28;
  char v43 = v29;
  *(_OWORD *)unsigned __int8 v38 = v22;
  *(_OWORD *)&v38[16] = v23;
  *(_OWORD *)&v38[32] = v24;
  uint64_t v39 = v25;
  outlined release of _LazyStack_Cache<LazyVStackLayout>((uint64_t)v38);
  outlined destroy of _LazyLayout_Subviews((uint64_t)&v30);
  return v35;
}

{
  int v11;
  int v12;
  long long *Value;
  long long v14;
  uint64_t v15;
  long long v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v23;
  long long v24;
  long long v25;
  long long v26[7];
  int v27;
  char v28;
  long long v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;

  int v11 = *MEMORY[0x1E4F4E7A0];
  int v12 = *(_DWORD *)(a2 + 28);
  LOBYTE(v33) = 0;
  SizeAndSpacingContext.init(context:owner:environment:)();
  uint64_t v30 = v33;
  unint64_t v31 = v34;
  uint64_t v32 = v12;
  uint64_t v29 = *(_OWORD *)AGGraphGetValue();
  uint64_t Value = (long long *)AGGraphGetValue();
  long long v14 = Value[1];
  v26[0] = *Value;
  v26[1] = v14;
  uint64_t v15 = AGGraphGetValue();
  int v23 = *(void *)v15;
  char v16 = *(_OWORD *)(v15 + 24);
  uint64_t v24 = *(_OWORD *)(v15 + 8);
  char v25 = v16;
  type metadata accessor for LazyLayoutViewCache();
  AGGraphGetValue();
  unint64_t v28 = *(unsigned char *)AGGraphGetValue();
  unsigned int v27 = *(_DWORD *)(AGGraphGetValue() + 28);
  AGGraphGetValue();
  uint64_t v17 = *(unsigned char *)AGGraphGetValue();
  swift_retain();
  _LazyLayout_PlacementContext.init(base:position:size:transform:layoutDirection:pinnedViews:isAccessibilityEnabled:)(&v30, v26, (uint64_t)&v23, &v28, &v27, v17, (uint64_t)&v33);
  AGGraphGetValue();
  swift_retain();
  LazyLayoutViewCache.subviews(context:)(v11, (uint64_t)v26);
  swift_release();
  uint64_t v18 = *(void *)AGGraphGetValue();
  type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, a8, a9, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LazyStack_Cache);
  char v20 = v19;
  unint64_t v21 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v18 + 280);
  swift_retain();
  v21(&v23, v20, v20);
  swift_release();
  static Signpost.prefetchMakeView<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of _LazyLayout_Subviews((uint64_t)v26);
  return v30;
}

uint64_t specialized LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)(double *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, char a11, unsigned int a12)
{
  uint64_t v62 = a5;
  uint64_t v73 = a3;
  double v74 = a9;
  uint64_t v75 = a4;
  uint64_t v68 = a7;
  uint64_t v69 = a8;
  uint64_t v70 = a10;
  unsigned __int8 v71 = a11 & 1;
  unsigned int v72 = a12;
  uint64_t v67 = 0;
  *(double *)&uint64_t result = COERCE_DOUBLE(swift_allocObject());
  uint64_t v19 = a6;
  uint64_t v20 = result;
  *(unsigned char *)(result + 16) = 0;
  double v21 = *a1;
  uint64_t v22 = a6 + 104;
  uint64_t v23 = *(void *)(*(void *)(a6 + 104) + 16);
  uint64_t v24 = *(void *)(a6 + 40);
  uint64_t v25 = *(void *)(v22 - 56);
  if (v24 == v25) {
    goto LABEL_29;
  }
  uint64_t v26 = *(void *)(v19 + 16);
  if (!v26) {
    goto LABEL_29;
  }
  if (*(void *)v19 != a3) {
    goto LABEL_29;
  }
  if (*(double *)(v19 + 8) != a9) {
    goto LABEL_29;
  }
  uint64_t v58 = v19;
  uint64_t v61 = v23;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  char v27 = specialized static Array<A>.== infix(_:_:)(a4, v26);
  swift_bridgeObjectRelease_n();
  *(double *)&uint64_t result = COERCE_DOUBLE(swift_bridgeObjectRelease());
  uint64_t v23 = v61;
  uint64_t v19 = v58;
  if (v27)
  {
    *a2 = v24;
    uint64_t v67 = v25;
    double v21 = *(double *)(v19 + 56);
    if (v24 >= a3)
    {
      *(unsigned char *)(v20 + 16) = 1;
      if (__OFSUB__(v24, a3))
      {
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      *a2 = v24 - a3;
      v24 -= a3;
    }
    if (__OFSUB__(v25, v24)) {
      goto LABEL_40;
    }
    if (v25 - v24 <= 1)
    {
      BOOL v28 = __OFADD__(v25, a3);
      v25 += a3;
      if (v28)
      {
LABEL_43:
        __break(1u);
        return result;
      }
      uint64_t v67 = v25;
    }
    if (v24 < v25) {
      goto LABEL_14;
    }
  }
  else
  {
LABEL_29:
    if (v23)
    {
      uint64_t v24 = *a2;
      if ((*a2 & 0x8000000000000000) != 0) {
        goto LABEL_14;
      }
    }
    else
    {
      if (a3 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_38;
      }
      uint64_t v67 = 2 * a3;
      uint64_t v24 = *a2;
      if (*a2 < 2 * a3)
      {
LABEL_14:
        unint64_t v60 = a2;
        uint64_t v57 = v22;
        uint64_t v61 = v23;
        uint64_t v58 = v19;
        uint64_t v53 = a1;
        uint64_t v55 = swift_allocObject();
        *(void *)(v55 + 16) = 0;
        uint64_t v29 = swift_allocObject();
        uint64_t v30 = MEMORY[0x1E4FBC860];
        *(void *)(v29 + 16) = MEMORY[0x1E4FBC860];
        uint64_t v54 = v29;
        uint64_t v31 = swift_allocObject();
        *(void *)(v31 + 16) = 0;
        unint64_t v52 = (double *)(v31 + 16);
        uint64_t v32 = swift_allocObject();
        unint64_t v33 = specialized Dictionary.init(dictionaryLiteral:)(v30);
        unint64_t v34 = specialized Dictionary.init(dictionaryLiteral:)(v30);
        *(void *)(v32 + 16) = v33;
        v51[1] = v32 + 16;
        *(void *)(v32 + 24) = v34;
        uint64_t v35 = swift_allocObject();
        char v56 = v51;
        *(unsigned char *)(v35 + 16) = 0;
        unint64_t v36 = (unsigned char *)(v35 + 16);
        uint64_t v66 = v24;
        MEMORY[0x1F4188790](v35);
        uint64_t v59 = v20;
        uint64_t v37 = v55;
        uint64_t v64 = *(void *)(v62 + 104);
        uint64_t v38 = outlined init with copy of _ViewList_Node(v62 + 16, (uint64_t)v65);
        uint64_t v63 = 2 * a3;
        MEMORY[0x1F4188790](v38);
        uint64_t v39 = v35;
        swift_bridgeObjectRetain();
        _ViewList_Node.applyNodes(from:style:transform:to:)();
        outlined destroy of _ViewList_Node((uint64_t)v65);
        swift_bridgeObjectRelease();
        uint64_t v40 = v54;
        swift_beginAccess();
        if ((*v36 & 1) == 0)
        {
          LOBYTE(v64) = v71;
          specialized flushMinorGroup #1 <A>() in LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)(v39, v40, v73, v75, v59, v68, v69, v70, v71 | ((unint64_t)v72 << 32), v37, v31, v32, v60, (double (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized HVGrid.lengthAndSpacing(subviews:predecessors:minorGeometry:));
        }
        if (v61) {
          goto LABEL_26;
        }
        swift_beginAccess();
        uint64_t v41 = *(void *)(v32 + 16);
        uint64_t v42 = *(void *)(v32 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        EstimationCache.merge(_:)(v41, v42);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v43 = v58;
        *(double *)&uint64_t result = COERCE_DOUBLE(EstimationCache.average.getter(*(void *)(v58 + 104), *(void *)(v58 + 112)));
        if (v73)
        {
          uint64_t v46 = *(void *)(v43 + 40);
          if (v46 == 0x8000000000000000 && v73 == -1) {
            goto LABEL_41;
          }
          uint64_t v47 = v46 / v73;
          if ((unsigned __int128)(v47 * (__int128)v73) >> 64 == (v47 * v73) >> 63)
          {
            double v48 = *(double *)&result;
            if (v44) {
              double v48 = 0.0;
            }
            double v49 = (v45 + v48) * (double)(v47 * v73);
            if (v47 < 1) {
              double v48 = 0.0;
            }
            double v21 = v49 - v48;
LABEL_26:
            uint64_t v50 = v52;
            swift_beginAccess();
            *uint64_t v53 = v21 + *v50;
            if (*v36 == 1) {
              AGGraphCancelUpdate();
            }
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            *(double *)&uint64_t result = COERCE_DOUBLE(swift_release());
            return result;
          }
          goto LABEL_39;
        }
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
  }

  *(double *)&uint64_t result = COERCE_DOUBLE(swift_release());
  return result;
}

{
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  double v49;
  double *v50;
  void v51[2];
  double *v52;
  double *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned char v65[88];
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 v71;
  unsigned int v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  uint64_t vars8;

  uint64_t v62 = a5;
  uint64_t v73 = a3;
  double v74 = a9;
  uint64_t v75 = a4;
  uint64_t v68 = a7;
  uint64_t v69 = a8;
  uint64_t v70 = a10;
  unsigned __int8 v71 = a11 & 1;
  unsigned int v72 = a12;
  uint64_t v67 = 0;
  *(double *)&uint64_t result = COERCE_DOUBLE(swift_allocObject());
  uint64_t v19 = a6;
  uint64_t v20 = result;
  *(unsigned char *)(result + 16) = 0;
  double v21 = *a1;
  uint64_t v22 = a6 + 104;
  uint64_t v23 = *(void *)(*(void *)(a6 + 104) + 16);
  uint64_t v24 = *(void *)(a6 + 40);
  uint64_t v25 = *(void *)(v22 - 56);
  if (v24 == v25) {
    goto LABEL_29;
  }
  uint64_t v26 = *(void *)(v19 + 16);
  if (!v26) {
    goto LABEL_29;
  }
  if (*(void *)v19 != a3) {
    goto LABEL_29;
  }
  if (*(double *)(v19 + 8) != a9) {
    goto LABEL_29;
  }
  uint64_t v58 = v19;
  uint64_t v61 = v23;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  char v27 = specialized static Array<A>.== infix(_:_:)(a4, v26);
  swift_bridgeObjectRelease_n();
  *(double *)&uint64_t result = COERCE_DOUBLE(swift_bridgeObjectRelease());
  uint64_t v23 = v61;
  uint64_t v19 = v58;
  if (v27)
  {
    *a2 = v24;
    uint64_t v67 = v25;
    double v21 = *(double *)(v19 + 56);
    if (v24 >= a3)
    {
      *(unsigned char *)(v20 + 16) = 1;
      if (__OFSUB__(v24, a3))
      {
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      *a2 = v24 - a3;
      v24 -= a3;
    }
    if (__OFSUB__(v25, v24)) {
      goto LABEL_40;
    }
    if (v25 - v24 <= 1)
    {
      BOOL v28 = __OFADD__(v25, a3);
      v25 += a3;
      if (v28)
      {
LABEL_43:
        __break(1u);
        return result;
      }
      uint64_t v67 = v25;
    }
    if (v24 < v25) {
      goto LABEL_14;
    }
  }
  else
  {
LABEL_29:
    if (v23)
    {
      uint64_t v24 = *a2;
      if ((*a2 & 0x8000000000000000) != 0) {
        goto LABEL_14;
      }
    }
    else
    {
      if (a3 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_38;
      }
      uint64_t v67 = 2 * a3;
      uint64_t v24 = *a2;
      if (*a2 < 2 * a3)
      {
LABEL_14:
        unint64_t v60 = a2;
        uint64_t v57 = v22;
        uint64_t v61 = v23;
        uint64_t v58 = v19;
        uint64_t v53 = a1;
        uint64_t v55 = swift_allocObject();
        *(void *)(v55 + 16) = 0;
        uint64_t v29 = swift_allocObject();
        uint64_t v30 = MEMORY[0x1E4FBC860];
        *(void *)(v29 + 16) = MEMORY[0x1E4FBC860];
        uint64_t v54 = v29;
        uint64_t v31 = swift_allocObject();
        *(void *)(v31 + 16) = 0;
        unint64_t v52 = (double *)(v31 + 16);
        uint64_t v32 = swift_allocObject();
        unint64_t v33 = specialized Dictionary.init(dictionaryLiteral:)(v30);
        unint64_t v34 = specialized Dictionary.init(dictionaryLiteral:)(v30);
        *(void *)(v32 + 16) = v33;
        v51[1] = v32 + 16;
        *(void *)(v32 + 24) = v34;
        uint64_t v35 = swift_allocObject();
        char v56 = v51;
        *(unsigned char *)(v35 + 16) = 0;
        unint64_t v36 = (unsigned char *)(v35 + 16);
        uint64_t v66 = v24;
        MEMORY[0x1F4188790](v35);
        uint64_t v59 = v20;
        uint64_t v37 = v55;
        uint64_t v64 = *(void *)(v62 + 104);
        uint64_t v38 = outlined init with copy of _ViewList_Node(v62 + 16, (uint64_t)v65);
        uint64_t v63 = 2 * a3;
        MEMORY[0x1F4188790](v38);
        uint64_t v39 = v35;
        swift_bridgeObjectRetain();
        _ViewList_Node.applyNodes(from:style:transform:to:)();
        outlined destroy of _ViewList_Node((uint64_t)v65);
        swift_bridgeObjectRelease();
        uint64_t v40 = v54;
        swift_beginAccess();
        if ((*v36 & 1) == 0)
        {
          LOBYTE(v64) = v71;
          specialized flushMinorGroup #1 <A>() in LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)(v39, v40, v73, v75, v59, v68, v69, v70, v71 | ((unint64_t)v72 << 32), v37, v31, v32, v60, (double (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized HVGrid.lengthAndSpacing(subviews:predecessors:minorGeometry:));
        }
        if (v61) {
          goto LABEL_26;
        }
        swift_beginAccess();
        uint64_t v41 = *(void *)(v32 + 16);
        uint64_t v42 = *(void *)(v32 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        EstimationCache.merge(_:)(v41, v42);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v43 = v58;
        *(double *)&uint64_t result = COERCE_DOUBLE(EstimationCache.average.getter(*(void *)(v58 + 104), *(void *)(v58 + 112)));
        if (v73)
        {
          uint64_t v46 = *(void *)(v43 + 40);
          if (v46 == 0x8000000000000000 && v73 == -1) {
            goto LABEL_41;
          }
          uint64_t v47 = v46 / v73;
          if ((unsigned __int128)(v47 * (__int128)v73) >> 64 == (v47 * v73) >> 63)
          {
            double v48 = *(double *)&result;
            if (v44) {
              double v48 = 0.0;
            }
            double v49 = (v45 + v48) * (double)(v47 * v73);
            if (v47 < 1) {
              double v48 = 0.0;
            }
            double v21 = v49 - v48;
LABEL_26:
            uint64_t v50 = v52;
            swift_beginAccess();
            *uint64_t v53 = v21 + *v50;
            if (*v36 == 1) {
              AGGraphCancelUpdate();
            }
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            *(double *)&uint64_t result = COERCE_DOUBLE(swift_release());
            return result;
          }
          goto LABEL_39;
        }
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
  }

  *(double *)&uint64_t result = COERCE_DOUBLE(swift_release());
  return result;
}

uint64_t specialized closure #1 in LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)(uint64_t a1, BOOL *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, char a16, void *a17, double (*a18)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t v18 = a7;
  uint64_t v19 = a4;
  uint64_t v20 = a3;
  uint64_t v21 = a1;
  uint64_t v22 = a12;
  unint64_t v23 = a11 & 0xFFFFFFFF00000000;
  uint64_t v24 = a11 & 1;
  uint64_t v25 = (uint64_t *)(a3 + 16);
  if ((*(unsigned char *)(a1 + 93) & 1) == 0 && (*(unsigned char *)(a1 + 94) & 1) == 0)
  {
    uint64_t v62 = a18;
    uint64_t v63 = a14;
    uint64_t v66 = a9;
    uint64_t v67 = a5;
    uint64_t v68 = a8;
    uint64_t v26 = (void *)(a11 & 1);
    uint64_t v64 = a13;
    uint64_t v65 = a10;
    outlined init with copy of _LazyLayout_Subview(a1, (uint64_t)&v71);
    swift_beginAccess();
    uint64_t v21 = *v25;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t *v25 = v21;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }
  uint64_t v26 = (void *)(a12 + 16);
  uint64_t v68 = a11 & 1;
  LOBYTE(v71) = v24 != 0;
  uint64_t v27 = v23 | (v24 != 0);
  unint64_t v23 = a13;
  uint64_t v22 = a10;
  specialized flushMinorGroup #1 <A>() in LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)(a6, a3, a4, a5, a7, a8, a9, a10, v27, a12, a13, a14, a15, a18);
  swift_beginAccess();
  if (*(unsigned char *)(v18 + 16))
  {
    swift_beginAccess();
    *(unsigned char *)(v18 + 16) = 0;
LABEL_15:
    if (__OFADD__(*a15, v19))
    {
      __break(1u);
    }
    else
    {
      *a15 += v19;
      if ((v19 & 0x8000000000000000) == 0)
      {
        if (v19)
        {
          swift_beginAccess();
          do
          {
            outlined init with copy of _LazyLayout_Subview(v21, (uint64_t)&v71);
            double v49 = (char *)*v25;
            char v50 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t *v25 = (uint64_t)v49;
            if ((v50 & 1) == 0)
            {
              double v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v49 + 2) + 1, 1, v49);
              uint64_t *v25 = (uint64_t)v49;
            }
            unint64_t v52 = *((void *)v49 + 2);
            unint64_t v51 = *((void *)v49 + 3);
            if (v52 >= v51 >> 1)
            {
              double v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v51 > 1), v52 + 1, 1, v49);
              uint64_t *v25 = (uint64_t)v49;
            }
            *((void *)v49 + 2) = v52 + 1;
            uint64_t v53 = &v49[96 * v52];
            long long v54 = v72;
            *((_OWORD *)v53 + 2) = v71;
            *((_OWORD *)v53 + 3) = v54;
            long long v55 = v73;
            long long v56 = v74;
            long long v57 = v75[0];
            *(_OWORD *)(v53 + 111) = *(_OWORD *)((char *)v75 + 15);
            *((_OWORD *)v53 + 5) = v56;
            *((_OWORD *)v53 + 6) = v57;
            *((_OWORD *)v53 + 4) = v55;
            --v19;
          }
          while (v19);
        }
        swift_beginAccess();
        swift_beginAccess();
        swapSubviews(_:_:)((uint64_t *)(a12 + 16), v25);
        swift_endAccess();
        swift_endAccess();
        goto LABEL_25;
      }
    }
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v20 = a16 & 1;
  uint64_t v28 = ProposedViewSize.init(_:in:by:)();
  uint64_t v66 = v29;
  uint64_t v67 = v28;
  uint64_t v18 = v30;
  swift_beginAccess();
  uint64_t v31 = *v26;
  if (!*v26)
  {
    long long v74 = 0u;
    memset(v75, 0, 31);
    long long v72 = 0u;
    long long v73 = 0u;
    long long v71 = 0u;
    goto LABEL_14;
  }
  if (*(void *)(v31 + 16))
  {
    outlined init with copy of _LazyLayout_Subview(v31 + 32, (uint64_t)&v71);
LABEL_14:
    unint64_t v23 = a13 + 16;
    double v46 = _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)();
    double v48 = v47;
    outlined destroy of AccessibilityScrollableContext?((uint64_t)&v71, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
    swift_beginAccess();
    *(double *)(a13 + 16) = v48 + v46 + *(double *)(a13 + 16);
    goto LABEL_15;
  }
LABEL_32:
  __break(1u);
LABEL_33:
  uint64_t v21 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v21 + 16) + 1, 1, (char *)v21);
  uint64_t *v25 = v21;
LABEL_9:
  unint64_t v34 = *(void *)(v21 + 16);
  unint64_t v33 = *(void *)(v21 + 24);
  unint64_t v35 = v34 + 1;
  uint64_t v36 = a6;
  uint64_t v37 = v67;
  uint64_t v38 = v68;
  uint64_t v39 = v66;
  if (v34 >= v33 >> 1)
  {
    uint64_t v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1, (char *)v21);
    unint64_t v35 = v34 + 1;
    uint64_t v39 = v66;
    uint64_t v37 = v67;
    uint64_t v38 = v68;
    uint64_t v40 = v26;
    uint64_t v36 = a6;
    uint64_t v21 = (uint64_t)v61;
    uint64_t *v25 = (uint64_t)v61;
  }
  else
  {
    uint64_t v40 = v26;
  }
  *(void *)(v21 + 16) = v35;
  uint64_t v41 = (_OWORD *)(v21 + 96 * v34);
  long long v42 = v72;
  v41[2] = v71;
  v41[3] = v42;
  long long v43 = v73;
  long long v44 = v74;
  long long v45 = v75[0];
  *(_OWORD *)((char *)v41 + 111) = *(_OWORD *)((char *)v75 + 15);
  v41[5] = v44;
  v41[6] = v45;
  v41[4] = v43;
  if (*(void *)(*v25 + 16) == v19)
  {
    LOBYTE(v71) = v40 != 0;
    specialized flushMinorGroup #1 <A>() in LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)(v36, v20, v19, v37, v18, v38, v39, v65, v23 | (v40 != 0), v22, v64, v63, a15, v62);
LABEL_25:
    uint64_t v36 = a6;
  }
  uint64_t v58 = (unsigned char *)(v36 + 16);
  uint64_t result = swift_beginAccess();
  BOOL v60 = (*v58 & 1) != 0 || *a15 >= *a17;
  *a2 = v60;
  return result;
}

uint64_t specialized LazyStack<>.place(subviews:context:cache:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a8;
  unint64_t v16 = *(void *)(a2 + 280);
  unint64_t v17 = *(void *)(a2 + 288);
  char v18 = *(unsigned char *)(a2 + 296);
  long long v19 = *(_OWORD *)(a2 + 104);
  unint64_t v20 = a8 & 0xFFFFFFFF00000000;
  long long v21 = *(_OWORD *)(a2 + 136);
  __dst[4] = *(_OWORD *)(a2 + 120);
  __dst[5] = v21;
  __dst[6] = *(_OWORD *)(a2 + 152);
  long long v22 = *(_OWORD *)(a2 + 72);
  __dst[0] = *(_OWORD *)(a2 + 56);
  __dst[1] = v22;
  __dst[2] = *(_OWORD *)(a2 + 88);
  __dst[3] = v19;
  if (v18) {
    ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v17, v16));
  }
  ScrollGeometry.visibleRect.getter();
  double v24 = v23;
  CGFloat v26 = v25;
  CGFloat v28 = v27;
  CGFloat v30 = v29;
  specialized LazyStack<>.resolvedPlacerProperties(subviews:context:cache:)(a1, a2, a3, a5, a6, a7, v20 | v8 & 1, (uint64_t)__src);
  if (!__src[0])
  {
    long long v45 = (uint64_t (*)(void))type metadata accessor for (StackPlacement<LazyHGridLayout>, PlacementProperties<LazyHGridLayout>)?;
    double v46 = __src;
LABEL_93:
    *(double *)&uint64_t result = COERCE_DOUBLE(outlined destroy of ScrollableCollection?((uint64_t)v46, v45));
    return result;
  }
  CGFloat v100 = v24;
  uint64_t v103 = (double *)a4;
  memcpy(__dst, __src, sizeof(__dst));
  long long v31 = v107;
  long long v32 = *(_OWORD *)v108;
  uint64_t v33 = *(void *)&v108[16];
  char v34 = v108[24];
  char v35 = v108[25];
  long long v36 = v109;
  long long v111 = v107;
  *(_OWORD *)uint64_t v112 = *(_OWORD *)v108;
  *(void *)&v112[16] = *(void *)&v108[16];
  *(_WORD *)&v112[24] = *(_WORD *)&v108[24];
  long long v113 = v109;
  outlined init with copy of StackPlacement<LazyHGridLayout>((uint64_t)__dst, (uint64_t)__src);
  memcpy(v105, __src, 0x150uLL);
  outlined init with copy of StackPlacement<LazyHGridLayout>((uint64_t)__dst, (uint64_t)__src);
  long long v107 = v31;
  *(_OWORD *)uint64_t v108 = v32;
  *(void *)&v108[16] = v33;
  v108[24] = v34;
  v108[25] = v35;
  long long v109 = v36;
  swift_bridgeObjectRetain();
  outlined destroy of StackPlacement<LazyHGridLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyHGridLayout>((uint64_t)__dst, (uint64_t)__src);
  double v37 = *(double *)&v112[8];
  double v38 = *(double *)&v112[16];
  long long v107 = v111;
  *(_OWORD *)uint64_t v108 = *(_OWORD *)v112;
  *(void *)&v108[16] = *(void *)&v112[16];
  *(_WORD *)&v108[24] = *(_WORD *)&v112[24];
  long long v109 = v113;
  outlined destroy of StackPlacement<LazyHGridLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyHGridLayout>((uint64_t)__dst, (uint64_t)__src);
  int v39 = v112[24];
  long long v107 = v111;
  *(void *)uint64_t v108 = *(void *)v112;
  *(_OWORD *)&v108[8] = *(_OWORD *)&v112[8];
  *(_WORD *)&v108[24] = *(_WORD *)&v112[24];
  long long v109 = v113;
  outlined destroy of StackPlacement<LazyHGridLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyHGridLayout>((uint64_t)__dst, (uint64_t)__src);
  int v40 = v112[25];
  long long v107 = v111;
  *(void *)uint64_t v108 = *(void *)v112;
  *(_OWORD *)&v108[8] = *(_OWORD *)&v112[8];
  *(_WORD *)&v108[24] = *(_WORD *)&v112[24];
  long long v109 = v113;
  outlined destroy of StackPlacement<LazyHGridLayout>((uint64_t)__src);
  long long v114 = v111;
  long long v115 = *(_OWORD *)v112;
  long long v116 = *(_OWORD *)&v112[16];
  long long v117 = v113;
  uint64_t v41 = specialized LazyStack<>.resolveIndexAndPosition(subviews:context:cache:placer:properties:)(a1, a2, a3, (uint64_t)v105, (uint64_t)&v114);
  if (v43)
  {
LABEL_92:
    swift_bridgeObjectRelease();
    outlined destroy of StackPlacement<LazyHGridLayout>((uint64_t)v105);
    long long v45 = (uint64_t (*)(void))type metadata accessor for (StackPlacement<LazyHGridLayout>, PlacementProperties<LazyHGridLayout>);
    double v46 = __dst;
    goto LABEL_93;
  }
  char v99 = specialized StackPlacement.place(subviews:from:position:stopping:style:)(a1, v41, 0, 1, v42);
  type metadata accessor for AGGraphRef(0);
  if ((static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()() & 1) != 0 || LOBYTE(v105[39]) == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of StackPlacement<LazyHGridLayout>((uint64_t)v105);
    *(double *)&uint64_t result = COERCE_DOUBLE(outlined destroy of ScrollableCollection?((uint64_t)__dst, (uint64_t (*)(void))type metadata accessor for (StackPlacement<LazyHGridLayout>, PlacementProperties<LazyHGridLayout>)));
    *(unsigned char *)(a4 + 64) = 1;
    return result;
  }
  int v96 = v40;
  int v98 = v39;
  uint64_t v47 = v105[32];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)a4 = v47;
  CGRect.subscript.getter();
  double v50 = v48;
  if (*(double *)&v105[35] >= *(double *)&v105[36])
  {
    double v48 = *MEMORY[0x1E4F1DB20];
    double v52 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
    double v53 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
    double v54 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  }
  else
  {
    double v51 = v49 - v48;
    if (LOBYTE(v105[4]))
    {
      double v52 = *(double *)&v105[35];
    }
    else
    {
      double v48 = *(double *)&v105[35];
      double v52 = v50;
    }
    if (LOBYTE(v105[4])) {
      double v53 = v51;
    }
    else {
      double v53 = *(double *)&v105[36] - *(double *)&v105[35];
    }
    if (LOBYTE(v105[4])) {
      double v54 = *(double *)&v105[36] - *(double *)&v105[35];
    }
    else {
      double v54 = v51;
    }
  }
  v118.origin.x = v100;
  v118.origin.y = v26;
  v118.size.double width = v28;
  v118.size.double height = v30;
  *(CGRect *)(a4 + 8) = CGRectUnion(*(CGRect *)&v48, v118);
  outlined init with copy of StackPlacement<LazyHGridLayout>((uint64_t)__dst, (uint64_t)__src);
  uint64_t v55 = v115;
  long long v101 = v114;
  long long v107 = v114;
  *(_OWORD *)uint64_t v108 = v115;
  *(_OWORD *)&v108[16] = v116;
  long long v109 = v117;
  outlined retain of PlacementProperties<LazyHGridLayout>((uint64_t)&v114);
  swift_bridgeObjectRelease();
  *(_OWORD *)a3 = v101;
  *(void *)(a3 + 16) = v55;
  outlined destroy of StackPlacement<LazyHGridLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyHGridLayout>((uint64_t)__dst, (uint64_t)__src);
  uint64_t v56 = *(void *)&v112[16];
  long long v107 = v111;
  *(_OWORD *)uint64_t v108 = *(_OWORD *)v112;
  *(void *)&v108[16] = *(void *)&v112[16];
  *(_WORD *)&v108[24] = *(_WORD *)&v112[24];
  long long v109 = v113;
  *(void *)(a3 + 72) = *(void *)&v112[8];
  *(void *)(a3 + 80) = v56;
  outlined destroy of StackPlacement<LazyHGridLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyHGridLayout>((uint64_t)__dst, (uint64_t)__src);
  long long v107 = v111;
  *(void *)uint64_t v108 = *(void *)v112;
  *(_OWORD *)&v108[8] = *(_OWORD *)&v112[8];
  *(_WORD *)&v108[24] = *(_WORD *)&v112[24];
  long long v109 = v113;
  *(void *)(a3 + 88) = v113;
  outlined destroy of StackPlacement<LazyHGridLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyHGridLayout>((uint64_t)__dst, (uint64_t)__src);
  long long v107 = v111;
  *(void *)uint64_t v108 = *(void *)v112;
  *(_OWORD *)&v108[8] = *(_OWORD *)&v112[8];
  *(_WORD *)&v108[24] = *(_WORD *)&v112[24];
  long long v109 = v113;
  *(void *)(a3 + 96) = *((void *)&v113 + 1);
  *(double *)&uint64_t result = COERCE_DOUBLE(outlined destroy of StackPlacement<LazyHGridLayout>((uint64_t)__src));
  uint64_t v57 = *(void *)(a3 + 40);
  uint64_t v58 = v105[33];
  uint64_t v59 = v105[34];
  if (v57 != *(void *)(a3 + 48)) {
    goto LABEL_24;
  }
  if (v105[34] >= v105[33])
  {
    if (v105[34] + 1 < v105[33])
    {
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
      goto LABEL_100;
    }
    if (v105[33] != v105[34] + 1)
    {
LABEL_24:
      if (v105[34] >= v105[33])
      {
        uint64_t v60 = v105[34] + 1;
        if (v105[34] + 1 < v105[33])
        {
LABEL_97:
          __break(1u);
          __break(1u);
          goto LABEL_98;
        }
        uint64_t v57 = v105[33];
      }
      else
      {
        uint64_t v57 = v105[13];
        uint64_t v60 = v105[13];
      }
      *(void *)(a3 + 40) = v57;
      *(void *)(a3 + 48) = v60;
      double v61 = *(double *)&v105[35];
      double v62 = *(double *)&v105[36];
      if (*(double *)&v105[35] < *(double *)&v105[36])
      {
        if (*(double *)&v105[35] <= *(double *)&v105[36])
        {
LABEL_32:
          *(double *)(a3 + 56) = v61;
          *(double *)(a3 + 64) = v62;
          if (v99)
          {
            if (v59 >= v58)
            {
              uint64_t v63 = v59 + 1;
              if (v59 + 1 < v58)
              {
LABEL_101:
                __break(1u);
                goto LABEL_102;
              }
            }
            else
            {
              uint64_t v63 = v105[13];
            }
          }
          else
          {
            uint64_t v63 = 0;
          }
          *(void *)(a3 + 24) = v63;
          *(unsigned char *)(a3 + 32) = (v99 & 1) == 0;
          if (v61 < 0.01 && v62 < 0.01)
          {
            uint64_t v57 = 0;
            *(void *)(a3 + 40) = 0;
            *(void *)(a3 + 48) = 0;
          }
          goto LABEL_40;
        }
        __break(1u);
      }
      double v61 = *(double *)&v105[15];
      double v62 = *(double *)&v105[15];
      goto LABEL_32;
    }
  }
LABEL_40:
  uint64_t v97 = v59;
  uint64_t v102 = v58;
  uint64_t v64 = v105[40];
  uint64_t v65 = v105[41];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  EstimationCache.merge(_:)(v64, v65);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = *(uint64_t *)(a3 + 104);
  if (*(void *)(result + 16))
  {
    *(double *)&uint64_t result = COERCE_DOUBLE(EstimationCache.average.getter(result, *(void *)(a3 + 112)));
    double v67 = *(double *)&result;
    if (v68) {
      double v67 = 0.0;
    }
    double v69 = v66 + v67;
  }
  else
  {
    double v69 = 32.0;
  }
  uint64_t v70 = (uint64_t)v103;
  int v71 = v98;
  double v72 = *(double *)(a3 + 56);
  uint64_t v73 = v102;
  uint64_t v74 = v97;
  if ((void)v31 != 1)
  {
    if (!(void)v31)
    {
LABEL_95:
      __break(1u);
      __break(1u);
      goto LABEL_96;
    }
    if (v57 == 0x8000000000000000 && (void)v31 == -1) {
      goto LABEL_99;
    }
    v57 /= (uint64_t)v31;
  }
  if ((v98 & 1) == 0)
  {
    if (v57)
    {
      if (v72 >= 0.01) {
        goto LABEL_66;
      }
      double v75 = v69 * (double)v57;
    }
    else
    {
      if (fabs(v72) <= 0.01) {
        goto LABEL_66;
      }
      double v75 = -v72;
    }
    double v104 = v75;
    if (fabs(v75) > 0.01)
    {
      double v76 = v72 + v75;
      double v77 = v75 + *(double *)(a3 + 64);
      if (v76 > v77)
      {
LABEL_102:
        __break(1u);
        goto LABEL_103;
      }
      *(double *)(a3 + 56) = v76;
      *(double *)(a3 + 64) = v77;
      v103[6] = v75;
      uint64_t v78 = *(void *)v103;
      uint64_t v79 = *(void *)(*(void *)v103 + 16);
      if (v79)
      {
        unint64_t v80 = 0;
        uint64_t v81 = 40;
        while (1)
        {
          *(double *)&uint64_t result = COERCE_DOUBLE(swift_isUniquelyReferenced_nonNull_native());
          if ((result & 1) == 0)
          {
            *(double *)&uint64_t result = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew()(v78));
            uint64_t v78 = result;
          }
          if (v80 >= *(void *)(v78 + 16)) {
            break;
          }
          ++v80;
          uint64_t v82 = (void (*)(void *, void))_Placement.anchorPosition.modify();
          *CGFloat v83 = v75 + *v83;
          v82(__src, 0);
          v81 += 72;
          if (v79 == v80)
          {
            uint64_t v70 = (uint64_t)v103;
            *(void *)uint64_t v103 = v78;
            goto LABEL_65;
          }
        }
        __break(1u);
        goto LABEL_95;
      }
LABEL_65:
      *(double *)&uint64_t result = COERCE_DOUBLE(specialized LazyStack<>.log(_:)((uint64_t)&v104));
      int v71 = v98;
      uint64_t v73 = v102;
      uint64_t v74 = v97;
    }
  }
LABEL_66:
  double v84 = *(double *)&v105[36];
  if (*(double *)&v105[35] < *(double *)&v105[36])
  {
    if (*(double *)&v105[35] <= *(double *)&v105[36]) {
      goto LABEL_70;
    }
    __break(1u);
  }
  double v84 = *(double *)&v105[15];
LABEL_70:
  if (v74 >= v73)
  {
    uint64_t v85 = v74 + 1;
    if (v74 + 1 < v73)
    {
LABEL_96:
      __break(1u);
      goto LABEL_97;
    }
  }
  else
  {
    uint64_t v85 = v105[13];
  }
  double v86 = *(double *)(a2 + 32);
  if (v99)
  {
    double v87 = vabdd_f64(v84, v86);
    *(unsigned char *)(v70 + 40) = v87 >= 1.0;
    if (v87 >= 1.0) {
      specialized LazyStack<>.log(_:)(a2, 0);
    }
    goto LABEL_91;
  }
  if (v86 + 0.01 < v84)
  {
    *(unsigned char *)(v70 + 40) = 1;
    specialized LazyStack<>.log(_:)(a2, 0);
LABEL_91:
    specialized LazyStack<>.log(_:)((double *)a3, v70, v37, v38);
    goto LABEL_92;
  }
  __src[0] = 2 * v31;
  *(double *)&uint64_t result = COERCE_DOUBLE(_ViewList_Node.estimatedCount(style:)());
  if (__OFSUB__(result, v85))
  {
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  uint64_t v88 = (result - v85) & ~((result - v85) >> 63);
  if ((void)v31 == 1)
  {
LABEL_84:
    double v92 = v84 + v69 * (double)v88;
    if (v92 >= v86) {
      double v93 = v86;
    }
    else {
      double v93 = v84 + v69 * (double)v88;
    }
    double v94 = v93 * 0.1;
    if ((v71 & v96) != 0) {
      double v94 = 0.01;
    }
    double v95 = vabdd_f64(v86, v92);
    *(unsigned char *)(v70 + 40) = v94 < v95;
    if (v94 < v95) {
      specialized LazyStack<>.log(_:)();
    }
    goto LABEL_91;
  }
  BOOL v89 = __OFADD__(v88, (void)v31);
  uint64_t v90 = v88 + v31;
  if (!v89)
  {
    uint64_t v91 = v90 - 1;
    if (v91 == 0x8000000000000000 && (void)v31 == -1) {
      goto LABEL_104;
    }
    uint64_t v88 = v91 / (uint64_t)v31;
    goto LABEL_84;
  }
LABEL_103:
  __break(1u);
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

{
  char v8;
  unint64_t v16;
  unint64_t v17;
  char v18;
  long long v19;
  unint64_t v20;
  long long v21;
  long long v22;
  double v23;
  double v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  long long v31;
  long long v32;
  uint64_t v33;
  char v34;
  char v35;
  long long v36;
  double v37;
  double v38;
  int v39;
  int v40;
  uint64_t v41;
  double v42;
  char v43;
  uint64_t result;
  uint64_t (*v45)(void);
  void *v46;
  uint64_t v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  double v67;
  char v68;
  double v69;
  uint64_t v70;
  int v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  double v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  void (*v82)(void *, void);
  uint64_t v83;
  double v84;
  uint64_t v85;
  double v86;
  double v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  double v93;
  double v94;
  double v95;
  int v96;
  uint64_t v97;
  int v98;
  char v99;
  CGFloat v100;
  long long v101;
  uint64_t v102;
  double *v103;
  double v104;
  void v105[43];
  void __src[42];
  long long v107;
  unsigned char v108[32];
  long long v109;
  _OWORD __dst[21];
  long long v111;
  unsigned char v112[32];
  long long v113;
  long long v114;
  long long v115;
  long long v116;
  long long v117;
  CGRect v118;

  char v8 = a8;
  unint64_t v16 = *(void *)(a2 + 280);
  unint64_t v17 = *(void *)(a2 + 288);
  char v18 = *(unsigned char *)(a2 + 296);
  long long v19 = *(_OWORD *)(a2 + 104);
  unint64_t v20 = a8 & 0xFFFFFFFF00000000;
  long long v21 = *(_OWORD *)(a2 + 136);
  __dst[4] = *(_OWORD *)(a2 + 120);
  __dst[5] = v21;
  __dst[6] = *(_OWORD *)(a2 + 152);
  long long v22 = *(_OWORD *)(a2 + 72);
  __dst[0] = *(_OWORD *)(a2 + 56);
  __dst[1] = v22;
  __dst[2] = *(_OWORD *)(a2 + 88);
  __dst[3] = v19;
  if (v18) {
    ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v17, v16));
  }
  ScrollGeometry.visibleRect.getter();
  double v24 = v23;
  CGFloat v26 = v25;
  CGFloat v28 = v27;
  CGFloat v30 = v29;
  specialized LazyStack<>.resolvedPlacerProperties(subviews:context:cache:)(a1, a2, a3, a5, a6, a7, v20 | v8 & 1, (uint64_t)__src);
  if (!__src[0])
  {
    long long v45 = (uint64_t (*)(void))type metadata accessor for (StackPlacement<LazyVGridLayout>, PlacementProperties<LazyVGridLayout>)?;
    double v46 = __src;
LABEL_93:
    *(double *)&uint64_t result = COERCE_DOUBLE(outlined destroy of ScrollableCollection?((uint64_t)v46, v45));
    return result;
  }
  CGFloat v100 = v24;
  uint64_t v103 = (double *)a4;
  memcpy(__dst, __src, sizeof(__dst));
  long long v31 = v107;
  long long v32 = *(_OWORD *)v108;
  uint64_t v33 = *(void *)&v108[16];
  char v34 = v108[24];
  char v35 = v108[25];
  long long v36 = v109;
  long long v111 = v107;
  *(_OWORD *)uint64_t v112 = *(_OWORD *)v108;
  *(void *)&v112[16] = *(void *)&v108[16];
  *(_WORD *)&v112[24] = *(_WORD *)&v108[24];
  long long v113 = v109;
  outlined init with copy of StackPlacement<LazyVGridLayout>((uint64_t)__dst, (uint64_t)__src);
  memcpy(v105, __src, 0x150uLL);
  outlined init with copy of StackPlacement<LazyVGridLayout>((uint64_t)__dst, (uint64_t)__src);
  long long v107 = v31;
  *(_OWORD *)uint64_t v108 = v32;
  *(void *)&v108[16] = v33;
  v108[24] = v34;
  v108[25] = v35;
  long long v109 = v36;
  swift_bridgeObjectRetain();
  outlined destroy of StackPlacement<LazyVGridLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyVGridLayout>((uint64_t)__dst, (uint64_t)__src);
  double v37 = *(double *)&v112[8];
  double v38 = *(double *)&v112[16];
  long long v107 = v111;
  *(_OWORD *)uint64_t v108 = *(_OWORD *)v112;
  *(void *)&v108[16] = *(void *)&v112[16];
  *(_WORD *)&v108[24] = *(_WORD *)&v112[24];
  long long v109 = v113;
  outlined destroy of StackPlacement<LazyVGridLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyVGridLayout>((uint64_t)__dst, (uint64_t)__src);
  int v39 = v112[24];
  long long v107 = v111;
  *(void *)uint64_t v108 = *(void *)v112;
  *(_OWORD *)&v108[8] = *(_OWORD *)&v112[8];
  *(_WORD *)&v108[24] = *(_WORD *)&v112[24];
  long long v109 = v113;
  outlined destroy of StackPlacement<LazyVGridLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyVGridLayout>((uint64_t)__dst, (uint64_t)__src);
  int v40 = v112[25];
  long long v107 = v111;
  *(void *)uint64_t v108 = *(void *)v112;
  *(_OWORD *)&v108[8] = *(_OWORD *)&v112[8];
  *(_WORD *)&v108[24] = *(_WORD *)&v112[24];
  long long v109 = v113;
  outlined destroy of StackPlacement<LazyVGridLayout>((uint64_t)__src);
  long long v114 = v111;
  long long v115 = *(_OWORD *)v112;
  long long v116 = *(_OWORD *)&v112[16];
  long long v117 = v113;
  uint64_t v41 = specialized LazyStack<>.resolveIndexAndPosition(subviews:context:cache:placer:properties:)(a1, a2, a3, (uint64_t)v105, (uint64_t)&v114);
  if (v43)
  {
LABEL_92:
    swift_bridgeObjectRelease();
    outlined destroy of StackPlacement<LazyVGridLayout>((uint64_t)v105);
    long long v45 = (uint64_t (*)(void))type metadata accessor for (StackPlacement<LazyVGridLayout>, PlacementProperties<LazyVGridLayout>);
    double v46 = __dst;
    goto LABEL_93;
  }
  char v99 = specialized StackPlacement.place(subviews:from:position:stopping:style:)(a1, v41, 0, 1, v42);
  type metadata accessor for AGGraphRef(0);
  if ((static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()() & 1) != 0 || LOBYTE(v105[39]) == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of StackPlacement<LazyVGridLayout>((uint64_t)v105);
    *(double *)&uint64_t result = COERCE_DOUBLE(outlined destroy of ScrollableCollection?((uint64_t)__dst, (uint64_t (*)(void))type metadata accessor for (StackPlacement<LazyVGridLayout>, PlacementProperties<LazyVGridLayout>)));
    *(unsigned char *)(a4 + 64) = 1;
    return result;
  }
  int v96 = v40;
  int v98 = v39;
  uint64_t v47 = v105[32];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)a4 = v47;
  CGRect.subscript.getter();
  double v50 = v48;
  if (*(double *)&v105[35] >= *(double *)&v105[36])
  {
    double v48 = *MEMORY[0x1E4F1DB20];
    double v52 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
    double v53 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
    double v54 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  }
  else
  {
    double v51 = v49 - v48;
    if (LOBYTE(v105[4]))
    {
      double v52 = *(double *)&v105[35];
    }
    else
    {
      double v48 = *(double *)&v105[35];
      double v52 = v50;
    }
    if (LOBYTE(v105[4])) {
      double v53 = v51;
    }
    else {
      double v53 = *(double *)&v105[36] - *(double *)&v105[35];
    }
    if (LOBYTE(v105[4])) {
      double v54 = *(double *)&v105[36] - *(double *)&v105[35];
    }
    else {
      double v54 = v51;
    }
  }
  v118.origin.x = v100;
  v118.origin.y = v26;
  v118.size.double width = v28;
  v118.size.double height = v30;
  *(CGRect *)(a4 + 8) = CGRectUnion(*(CGRect *)&v48, v118);
  outlined init with copy of StackPlacement<LazyVGridLayout>((uint64_t)__dst, (uint64_t)__src);
  uint64_t v55 = v115;
  long long v101 = v114;
  long long v107 = v114;
  *(_OWORD *)uint64_t v108 = v115;
  *(_OWORD *)&v108[16] = v116;
  long long v109 = v117;
  outlined retain of PlacementProperties<LazyHGridLayout>((uint64_t)&v114);
  swift_bridgeObjectRelease();
  *(_OWORD *)a3 = v101;
  *(void *)(a3 + 16) = v55;
  outlined destroy of StackPlacement<LazyVGridLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyVGridLayout>((uint64_t)__dst, (uint64_t)__src);
  uint64_t v56 = *(void *)&v112[16];
  long long v107 = v111;
  *(_OWORD *)uint64_t v108 = *(_OWORD *)v112;
  *(void *)&v108[16] = *(void *)&v112[16];
  *(_WORD *)&v108[24] = *(_WORD *)&v112[24];
  long long v109 = v113;
  *(void *)(a3 + 72) = *(void *)&v112[8];
  *(void *)(a3 + 80) = v56;
  outlined destroy of StackPlacement<LazyVGridLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyVGridLayout>((uint64_t)__dst, (uint64_t)__src);
  long long v107 = v111;
  *(void *)uint64_t v108 = *(void *)v112;
  *(_OWORD *)&v108[8] = *(_OWORD *)&v112[8];
  *(_WORD *)&v108[24] = *(_WORD *)&v112[24];
  long long v109 = v113;
  *(void *)(a3 + 88) = v113;
  outlined destroy of StackPlacement<LazyVGridLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyVGridLayout>((uint64_t)__dst, (uint64_t)__src);
  long long v107 = v111;
  *(void *)uint64_t v108 = *(void *)v112;
  *(_OWORD *)&v108[8] = *(_OWORD *)&v112[8];
  *(_WORD *)&v108[24] = *(_WORD *)&v112[24];
  long long v109 = v113;
  *(void *)(a3 + 96) = *((void *)&v113 + 1);
  *(double *)&uint64_t result = COERCE_DOUBLE(outlined destroy of StackPlacement<LazyVGridLayout>((uint64_t)__src));
  uint64_t v57 = *(void *)(a3 + 40);
  uint64_t v58 = v105[33];
  uint64_t v59 = v105[34];
  if (v57 != *(void *)(a3 + 48)) {
    goto LABEL_24;
  }
  if (v105[34] >= v105[33])
  {
    if (v105[34] + 1 < v105[33])
    {
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
      goto LABEL_100;
    }
    if (v105[33] != v105[34] + 1)
    {
LABEL_24:
      if (v105[34] >= v105[33])
      {
        uint64_t v60 = v105[34] + 1;
        if (v105[34] + 1 < v105[33])
        {
LABEL_97:
          __break(1u);
          __break(1u);
          goto LABEL_98;
        }
        uint64_t v57 = v105[33];
      }
      else
      {
        uint64_t v57 = v105[13];
        uint64_t v60 = v105[13];
      }
      *(void *)(a3 + 40) = v57;
      *(void *)(a3 + 48) = v60;
      double v61 = *(double *)&v105[35];
      double v62 = *(double *)&v105[36];
      if (*(double *)&v105[35] < *(double *)&v105[36])
      {
        if (*(double *)&v105[35] <= *(double *)&v105[36])
        {
LABEL_32:
          *(double *)(a3 + 56) = v61;
          *(double *)(a3 + 64) = v62;
          if (v99)
          {
            if (v59 >= v58)
            {
              uint64_t v63 = v59 + 1;
              if (v59 + 1 < v58)
              {
LABEL_101:
                __break(1u);
                goto LABEL_102;
              }
            }
            else
            {
              uint64_t v63 = v105[13];
            }
          }
          else
          {
            uint64_t v63 = 0;
          }
          *(void *)(a3 + 24) = v63;
          *(unsigned char *)(a3 + 32) = (v99 & 1) == 0;
          if (v61 < 0.01 && v62 < 0.01)
          {
            uint64_t v57 = 0;
            *(void *)(a3 + 40) = 0;
            *(void *)(a3 + 48) = 0;
          }
          goto LABEL_40;
        }
        __break(1u);
      }
      double v61 = *(double *)&v105[15];
      double v62 = *(double *)&v105[15];
      goto LABEL_32;
    }
  }
LABEL_40:
  uint64_t v97 = v59;
  uint64_t v102 = v58;
  uint64_t v64 = v105[40];
  uint64_t v65 = v105[41];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  EstimationCache.merge(_:)(v64, v65);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = *(uint64_t *)(a3 + 104);
  if (*(void *)(result + 16))
  {
    *(double *)&uint64_t result = COERCE_DOUBLE(EstimationCache.average.getter(result, *(void *)(a3 + 112)));
    double v67 = *(double *)&result;
    if (v68) {
      double v67 = 0.0;
    }
    double v69 = v66 + v67;
  }
  else
  {
    double v69 = 32.0;
  }
  uint64_t v70 = (uint64_t)v103;
  int v71 = v98;
  double v72 = *(double *)(a3 + 56);
  uint64_t v73 = v102;
  uint64_t v74 = v97;
  if ((void)v31 != 1)
  {
    if (!(void)v31)
    {
LABEL_95:
      __break(1u);
      __break(1u);
      goto LABEL_96;
    }
    if (v57 == 0x8000000000000000 && (void)v31 == -1) {
      goto LABEL_99;
    }
    v57 /= (uint64_t)v31;
  }
  if ((v98 & 1) == 0)
  {
    if (v57)
    {
      if (v72 >= 0.01) {
        goto LABEL_66;
      }
      double v75 = v69 * (double)v57;
    }
    else
    {
      if (fabs(v72) <= 0.01) {
        goto LABEL_66;
      }
      double v75 = -v72;
    }
    double v104 = v75;
    if (fabs(v75) > 0.01)
    {
      double v76 = v72 + v75;
      double v77 = v75 + *(double *)(a3 + 64);
      if (v76 > v77)
      {
LABEL_102:
        __break(1u);
        goto LABEL_103;
      }
      *(double *)(a3 + 56) = v76;
      *(double *)(a3 + 64) = v77;
      v103[7] = v75;
      uint64_t v78 = *(void *)v103;
      uint64_t v79 = *(void *)(*(void *)v103 + 16);
      if (v79)
      {
        unint64_t v80 = 0;
        uint64_t v81 = 40;
        while (1)
        {
          *(double *)&uint64_t result = COERCE_DOUBLE(swift_isUniquelyReferenced_nonNull_native());
          if ((result & 1) == 0)
          {
            *(double *)&uint64_t result = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew()(v78));
            uint64_t v78 = result;
          }
          if (v80 >= *(void *)(v78 + 16)) {
            break;
          }
          ++v80;
          uint64_t v82 = (void (*)(void *, void))_Placement.anchorPosition.modify();
          *(double *)(v83 + 8) = v75 + *(double *)(v83 + 8);
          v82(__src, 0);
          v81 += 72;
          if (v79 == v80)
          {
            uint64_t v70 = (uint64_t)v103;
            *(void *)uint64_t v103 = v78;
            goto LABEL_65;
          }
        }
        __break(1u);
        goto LABEL_95;
      }
LABEL_65:
      *(double *)&uint64_t result = COERCE_DOUBLE(specialized LazyStack<>.log(_:)((uint64_t)&v104));
      int v71 = v98;
      uint64_t v73 = v102;
      uint64_t v74 = v97;
    }
  }
LABEL_66:
  double v84 = *(double *)&v105[36];
  if (*(double *)&v105[35] < *(double *)&v105[36])
  {
    if (*(double *)&v105[35] <= *(double *)&v105[36]) {
      goto LABEL_70;
    }
    __break(1u);
  }
  double v84 = *(double *)&v105[15];
LABEL_70:
  if (v74 >= v73)
  {
    uint64_t v85 = v74 + 1;
    if (v74 + 1 < v73)
    {
LABEL_96:
      __break(1u);
      goto LABEL_97;
    }
  }
  else
  {
    uint64_t v85 = v105[13];
  }
  double v86 = *(double *)(a2 + 40);
  if (v99)
  {
    double v87 = vabdd_f64(v84, v86);
    *(unsigned char *)(v70 + 40) = v87 >= 1.0;
    if (v87 >= 1.0) {
      specialized LazyStack<>.log(_:)(a2, 1);
    }
    goto LABEL_91;
  }
  if (v86 + 0.01 < v84)
  {
    *(unsigned char *)(v70 + 40) = 1;
    specialized LazyStack<>.log(_:)(a2, 1);
LABEL_91:
    specialized LazyStack<>.log(_:)((double *)a3, v70, v37, v38);
    goto LABEL_92;
  }
  __src[0] = 2 * v31;
  *(double *)&uint64_t result = COERCE_DOUBLE(_ViewList_Node.estimatedCount(style:)());
  if (__OFSUB__(result, v85))
  {
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  uint64_t v88 = (result - v85) & ~((result - v85) >> 63);
  if ((void)v31 == 1)
  {
LABEL_84:
    double v92 = v84 + v69 * (double)v88;
    if (v92 >= v86) {
      double v93 = v86;
    }
    else {
      double v93 = v84 + v69 * (double)v88;
    }
    double v94 = v93 * 0.1;
    if ((v71 & v96) != 0) {
      double v94 = 0.01;
    }
    double v95 = vabdd_f64(v86, v92);
    *(unsigned char *)(v70 + 40) = v94 < v95;
    if (v94 < v95) {
      specialized LazyStack<>.log(_:)();
    }
    goto LABEL_91;
  }
  BOOL v89 = __OFADD__(v88, (void)v31);
  uint64_t v90 = v88 + v31;
  if (!v89)
  {
    uint64_t v91 = v90 - 1;
    if (v91 == 0x8000000000000000 && (void)v31 == -1) {
      goto LABEL_104;
    }
    uint64_t v88 = v91 / (uint64_t)v31;
    goto LABEL_84;
  }
LABEL_103:
  __break(1u);
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

void specialized LazyStack<>.resolvedPlacerProperties(subviews:context:cache:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  char v8 = a7;
  unint64_t v16 = a7 & 0xFFFFFFFF00000000;
  specialized LazyStack<>.placer(subviews:context:cache:)(a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001, (uint64_t)&v60);
  if (!(void)v60)
  {
    outlined destroy of StackPlacement<LazyVStackLayout>?((uint64_t)&v60, &lazy cache variable for type metadata for StackPlacement<LazyHGridLayout>?, &lazy cache variable for type metadata for StackPlacement<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout);
    *(_OWORD *)(a8 + 368) = 0u;
    *(_OWORD *)(a8 + 384) = 0u;
    *(_OWORD *)(a8 + 336) = 0u;
    *(_OWORD *)(a8 + 352) = 0u;
    *(_OWORD *)(a8 + 304) = 0u;
    *(_OWORD *)(a8 + 320) = 0u;
    *(_OWORD *)(a8 + 272) = 0u;
    *(_OWORD *)(a8 + 288) = 0u;
    *(_OWORD *)(a8 + 240) = 0u;
    *(_OWORD *)(a8 + 256) = 0u;
    *(_OWORD *)(a8 + 208) = 0u;
    *(_OWORD *)(a8 + 224) = 0u;
    *(_OWORD *)(a8 + 176) = 0u;
    *(_OWORD *)(a8 + 192) = 0u;
    *(_OWORD *)(a8 + 144) = 0u;
    *(_OWORD *)(a8 + 160) = 0u;
    *(_OWORD *)(a8 + 112) = 0u;
    *(_OWORD *)(a8 + 128) = 0u;
    *(_OWORD *)(a8 + 80) = 0u;
    *(_OWORD *)(a8 + 96) = 0u;
    *(_OWORD *)(a8 + 48) = 0u;
    *(_OWORD *)(a8 + 64) = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
    *(_OWORD *)(a8 + 32) = 0u;
    *(_OWORD *)a8 = 0u;
    return;
  }
  uint64_t v57 = a6;
  long long v97 = v60;
  long long v98 = v61;
  uint64_t v58 = *((void *)&v62 + 1);
  uint64_t v99 = v62;
  long long v17 = v63;
  long long v18 = v64;
  long long v83 = v67;
  long long v84 = v68;
  long long v81 = v65;
  long long v82 = v66;
  long long v87 = v71;
  long long v88 = v72;
  long long v85 = v69;
  long long v86 = v70;
  long long v91 = v75;
  long long v92 = v76;
  long long v89 = v73;
  long long v90 = v74;
  long long v95 = v79;
  long long v96 = v80;
  long long v93 = v77;
  long long v94 = v78;
  long long v19 = *(_OWORD *)(a2 + 104);
  long long v20 = *(_OWORD *)(a2 + 136);
  long long v64 = *(_OWORD *)(a2 + 120);
  long long v65 = v20;
  long long v66 = *(_OWORD *)(a2 + 152);
  long long v21 = *(_OWORD *)(a2 + 72);
  long long v60 = *(_OWORD *)(a2 + 56);
  long long v61 = v21;
  long long v62 = *(_OWORD *)(a2 + 88);
  long long v63 = v19;
  swift_bridgeObjectRetain();
  ScrollGeometry.visibleRect.getter();
  double v23 = v22;
  double v24 = 0.0;
  if (*(_DWORD *)(a2 + 12) != *MEMORY[0x1E4F4E7A0])
  {
    uint64_t Value = (long long *)AGGraphGetValue();
    long long v26 = Value[1];
    long long v60 = *Value;
    long long v61 = v26;
    double v24 = MEMORY[0x18C114450]();
  }
  double v28 = *(double *)(a3 + 88);
  double v27 = *(double *)(a3 + 96);
  if (v28 <= 0.0 || v23 <= 0.0)
  {
    BOOL v30 = 0;
    if (v27 > 0.0 && v24 > 0.0) {
LABEL_13:
    }
      BOOL v30 = vabdd_f64(v27, v24) >= 0.01;
  }
  else
  {
    double v29 = vabdd_f64(v28, v23);
    if (v27 > 0.0 && v24 > 0.0)
    {
      if (v29 >= 0.01) {
        goto LABEL_19;
      }
      goto LABEL_13;
    }
    if (v29 >= 0.01)
    {
LABEL_19:
      uint64_t v31 = *(void *)(a3 + 104);
      LOBYTE(v30) = 1;
LABEL_20:
      BOOL v52 = v30;
      char v54 = v8;
      uint64_t v35 = *(void *)(a3 + 112);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v55 = specialized Set.init<A>(_:)(v31);
      uint64_t v53 = a4;
      uint64_t v36 = MEMORY[0x1E4FBC860];
      uint64_t v37 = a5;
      unint64_t v38 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
      swift_bridgeObjectRelease();
      *(void *)(a3 + 104) = v38;
      unint64_t v39 = specialized Dictionary.init(dictionaryLiteral:)(v36);
      uint64_t v56 = v35;
      swift_bridgeObjectRelease();
      *(void *)(a3 + 112) = v39;
      *(void *)&long long v60 = 0;
      uint64_t v59 = 0;
      uint64_t v34 = v58;
      specialized LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)((double *)&v60, &v59, v58, *((uint64_t *)&v17 + 1), a1, a3, v53, v37, *(double *)&v17, v57, v16 | v54 & 1, (v16 | v54 & 1) >> 32);
      specialized LazyStack<>.log(_:)(a3);
      uint64_t v40 = swift_bridgeObjectRetain();
      uint64_t v41 = specialized Set.init<A>(_:)(v40);
      unsigned __int8 v42 = specialized Set.isSubset(of:)(v55, v41);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v32 = v42 ^ 1;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v42 ^ 1))
      {
        BOOL v33 = v52;
      }
      else
      {
        BOOL v33 = 0;
        *(void *)(a3 + 104) = v31;
        *(void *)(a3 + 112) = v56;
      }
      goto LABEL_23;
    }
    BOOL v30 = 0;
  }
  uint64_t v31 = *(void *)(a3 + 104);
  if (!*(void *)(v31 + 16) || v30) {
    goto LABEL_20;
  }
  char v32 = 0;
  BOOL v33 = 0;
  uint64_t v34 = v58;
LABEL_23:
  *(void *)(a8 + 336) = v34;
  *(_OWORD *)(a8 + 344) = v17;
  *(_OWORD *)(a8 + 360) = v18;
  *(unsigned char *)(a8 + 376) = v33;
  *(unsigned char *)(a8 + 377) = v32 & 1;
  *(double *)(a8 + 384) = v23;
  *(double *)(a8 + 392) = v24;
  long long v43 = v98;
  *(_OWORD *)a8 = v97;
  *(_OWORD *)(a8 + 16) = v43;
  *(void *)(a8 + 32) = v99;
  *(void *)(a8 + 40) = v34;
  *(_OWORD *)(a8 + 48) = v17;
  *(_OWORD *)(a8 + 64) = v18;
  long long v44 = v94;
  *(_OWORD *)(a8 + 272) = v93;
  *(_OWORD *)(a8 + 288) = v44;
  long long v45 = v96;
  *(_OWORD *)(a8 + 304) = v95;
  *(_OWORD *)(a8 + 320) = v45;
  long long v46 = v90;
  *(_OWORD *)(a8 + 208) = v89;
  *(_OWORD *)(a8 + 224) = v46;
  long long v47 = v92;
  *(_OWORD *)(a8 + 240) = v91;
  *(_OWORD *)(a8 + 256) = v47;
  long long v48 = v86;
  *(_OWORD *)(a8 + 144) = v85;
  *(_OWORD *)(a8 + 160) = v48;
  long long v49 = v88;
  *(_OWORD *)(a8 + 176) = v87;
  *(_OWORD *)(a8 + 192) = v49;
  long long v50 = v82;
  *(_OWORD *)(a8 + 80) = v81;
  *(_OWORD *)(a8 + 96) = v50;
  long long v51 = v84;
  *(_OWORD *)(a8 + 112) = v83;
  *(_OWORD *)(a8 + 128) = v51;
}

uint64_t specialized LazyStack<>.resolvedPlacerProperties(subviews:context:cache:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  char v8 = a7;
  unint64_t v16 = a7 & 0xFFFFFFFF00000000;
  specialized LazyStack<>.placer(subviews:context:cache:)(a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001, (uint64_t)&v62);
  if (!(void)v62)
  {
    uint64_t result = outlined destroy of StackPlacement<LazyVStackLayout>?((uint64_t)&v62, &lazy cache variable for type metadata for StackPlacement<LazyVGridLayout>?, &lazy cache variable for type metadata for StackPlacement<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout);
    *(_OWORD *)(a8 + 368) = 0u;
    *(_OWORD *)(a8 + 384) = 0u;
    *(_OWORD *)(a8 + 336) = 0u;
    *(_OWORD *)(a8 + 352) = 0u;
    *(_OWORD *)(a8 + 304) = 0u;
    *(_OWORD *)(a8 + 320) = 0u;
    *(_OWORD *)(a8 + 272) = 0u;
    *(_OWORD *)(a8 + 288) = 0u;
    *(_OWORD *)(a8 + 240) = 0u;
    *(_OWORD *)(a8 + 256) = 0u;
    *(_OWORD *)(a8 + 208) = 0u;
    *(_OWORD *)(a8 + 224) = 0u;
    *(_OWORD *)(a8 + 176) = 0u;
    *(_OWORD *)(a8 + 192) = 0u;
    *(_OWORD *)(a8 + 144) = 0u;
    *(_OWORD *)(a8 + 160) = 0u;
    *(_OWORD *)(a8 + 112) = 0u;
    *(_OWORD *)(a8 + 128) = 0u;
    *(_OWORD *)(a8 + 80) = 0u;
    *(_OWORD *)(a8 + 96) = 0u;
    *(_OWORD *)(a8 + 48) = 0u;
    *(_OWORD *)(a8 + 64) = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
    *(_OWORD *)(a8 + 32) = 0u;
    *(_OWORD *)a8 = 0u;
    return result;
  }
  uint64_t v59 = a6;
  long long v99 = v62;
  long long v100 = v63;
  uint64_t v60 = *((void *)&v64 + 1);
  uint64_t v101 = v64;
  long long v17 = v65;
  long long v18 = v66;
  long long v85 = v69;
  long long v86 = v70;
  long long v83 = v67;
  long long v84 = v68;
  long long v89 = v73;
  long long v90 = v74;
  long long v87 = v71;
  long long v88 = v72;
  long long v93 = v77;
  long long v94 = v78;
  long long v91 = v75;
  long long v92 = v76;
  long long v97 = v81;
  long long v98 = v82;
  long long v95 = v79;
  long long v96 = v80;
  long long v19 = *(_OWORD *)(a2 + 104);
  long long v20 = *(_OWORD *)(a2 + 136);
  long long v66 = *(_OWORD *)(a2 + 120);
  long long v67 = v20;
  long long v68 = *(_OWORD *)(a2 + 152);
  long long v21 = *(_OWORD *)(a2 + 72);
  long long v62 = *(_OWORD *)(a2 + 56);
  long long v63 = v21;
  long long v64 = *(_OWORD *)(a2 + 88);
  long long v65 = v19;
  swift_bridgeObjectRetain();
  ScrollGeometry.visibleRect.getter();
  double v23 = v22;
  uint64_t result = *(unsigned int *)(a2 + 12);
  double v25 = 0.0;
  if (result != *MEMORY[0x1E4F4E7A0])
  {
    uint64_t Value = (long long *)AGGraphGetValue();
    long long v27 = Value[1];
    long long v62 = *Value;
    long long v63 = v27;
    uint64_t result = MEMORY[0x18C114450]();
    double v25 = v28;
  }
  double v30 = *(double *)(a3 + 88);
  double v29 = *(double *)(a3 + 96);
  if (v30 <= 0.0 || v23 <= 0.0)
  {
    BOOL v32 = 0;
    if (v29 > 0.0 && v25 > 0.0) {
LABEL_13:
    }
      BOOL v32 = vabdd_f64(v29, v25) >= 0.01;
  }
  else
  {
    double v31 = vabdd_f64(v30, v23);
    if (v29 > 0.0 && v25 > 0.0)
    {
      if (v31 >= 0.01) {
        goto LABEL_19;
      }
      goto LABEL_13;
    }
    if (v31 >= 0.01)
    {
LABEL_19:
      uint64_t v33 = *(void *)(a3 + 104);
      LOBYTE(v32) = 1;
LABEL_20:
      BOOL v54 = v32;
      char v56 = v8;
      uint64_t v37 = *(void *)(a3 + 112);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v57 = specialized Set.init<A>(_:)(v33);
      uint64_t v55 = a4;
      uint64_t v38 = MEMORY[0x1E4FBC860];
      uint64_t v39 = a5;
      unint64_t v40 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
      swift_bridgeObjectRelease();
      *(void *)(a3 + 104) = v40;
      unint64_t v41 = specialized Dictionary.init(dictionaryLiteral:)(v38);
      uint64_t v58 = v37;
      swift_bridgeObjectRelease();
      *(void *)(a3 + 112) = v41;
      *(void *)&long long v62 = 0;
      uint64_t v61 = 0;
      uint64_t v36 = v60;
      specialized LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)((double *)&v62, &v61, v60, *((uint64_t *)&v17 + 1), a1, a3, v55, v39, *(double *)&v17, v59, v16 | v56 & 1, (v16 | v56 & 1) >> 32);
      specialized LazyStack<>.log(_:)(a3);
      uint64_t v42 = swift_bridgeObjectRetain();
      uint64_t v43 = specialized Set.init<A>(_:)(v42);
      unsigned __int8 v44 = specialized Set.isSubset(of:)(v57, v43);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v34 = v44 ^ 1;
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v44 ^ 1))
      {
        BOOL v35 = v54;
      }
      else
      {
        BOOL v35 = 0;
        *(void *)(a3 + 104) = v33;
        *(void *)(a3 + 112) = v58;
      }
      goto LABEL_23;
    }
    BOOL v32 = 0;
  }
  uint64_t v33 = *(void *)(a3 + 104);
  if (!*(void *)(v33 + 16) || v32) {
    goto LABEL_20;
  }
  char v34 = 0;
  BOOL v35 = 0;
  uint64_t v36 = v60;
LABEL_23:
  *(void *)(a8 + 336) = v36;
  *(_OWORD *)(a8 + 344) = v17;
  *(_OWORD *)(a8 + 360) = v18;
  *(unsigned char *)(a8 + 376) = v35;
  *(unsigned char *)(a8 + 377) = v34 & 1;
  *(double *)(a8 + 384) = v23;
  *(double *)(a8 + 392) = v25;
  long long v45 = v100;
  *(_OWORD *)a8 = v99;
  *(_OWORD *)(a8 + 16) = v45;
  *(void *)(a8 + 32) = v101;
  *(void *)(a8 + 40) = v36;
  *(_OWORD *)(a8 + 48) = v17;
  *(_OWORD *)(a8 + 64) = v18;
  long long v46 = v96;
  *(_OWORD *)(a8 + 272) = v95;
  *(_OWORD *)(a8 + 288) = v46;
  long long v47 = v98;
  *(_OWORD *)(a8 + 304) = v97;
  *(_OWORD *)(a8 + 320) = v47;
  long long v48 = v92;
  *(_OWORD *)(a8 + 208) = v91;
  *(_OWORD *)(a8 + 224) = v48;
  long long v49 = v94;
  *(_OWORD *)(a8 + 240) = v93;
  *(_OWORD *)(a8 + 256) = v49;
  long long v50 = v88;
  *(_OWORD *)(a8 + 144) = v87;
  *(_OWORD *)(a8 + 160) = v50;
  long long v51 = v90;
  *(_OWORD *)(a8 + 176) = v89;
  *(_OWORD *)(a8 + 192) = v51;
  long long v52 = v84;
  *(_OWORD *)(a8 + 80) = v83;
  *(_OWORD *)(a8 + 96) = v52;
  long long v53 = v86;
  *(_OWORD *)(a8 + 112) = v85;
  *(_OWORD *)(a8 + 128) = v53;
  return result;
}

uint64_t specialized LazyStack<>.placer(subviews:context:cache:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  unint64_t v14 = *(void *)(a1 + 280);
  unint64_t v15 = *(void *)(a1 + 288);
  char v16 = *(unsigned char *)(a1 + 296);
  long long v17 = *(_OWORD *)(a1 + 104);
  long long v18 = *(_OWORD *)(a1 + 136);
  *(_OWORD *)unint64_t v41 = *(_OWORD *)(a1 + 120);
  *(_OWORD *)&v41[16] = v18;
  long long v42 = *(_OWORD *)(a1 + 152);
  long long v19 = *(_OWORD *)(a1 + 72);
  long long v37 = *(_OWORD *)(a1 + 56);
  long long v38 = v19;
  long long v39 = *(_OWORD *)(a1 + 88);
  long long v40 = v17;
  if (v16) {
    ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v15, v14));
  }
  ScrollGeometry.visibleRect.getter();
  uint64_t result = CGRect.subscript.getter();
  double v23 = v22;
  if (v21 > 0.0) {
    double v24 = v21;
  }
  else {
    double v24 = 0.0;
  }
  if (v24 >= v22)
  {
    specialized LazyStack<>.log(_:)(v21, v22);
LABEL_19:
    uint64_t result = specialized _LazyStack_Cache.reset()();
    *(_OWORD *)(a7 + 304) = 0u;
    *(_OWORD *)(a7 + 320) = 0u;
    *(_OWORD *)(a7 + 272) = 0u;
    *(_OWORD *)(a7 + 288) = 0u;
    *(_OWORD *)(a7 + 240) = 0u;
    *(_OWORD *)(a7 + 256) = 0u;
    *(_OWORD *)(a7 + 208) = 0u;
    *(_OWORD *)(a7 + 224) = 0u;
    *(_OWORD *)(a7 + 176) = 0u;
    *(_OWORD *)(a7 + 192) = 0u;
    *(_OWORD *)(a7 + 144) = 0u;
    *(_OWORD *)(a7 + 160) = 0u;
    *(_OWORD *)(a7 + 112) = 0u;
    *(_OWORD *)(a7 + 128) = 0u;
    *(_OWORD *)(a7 + 80) = 0u;
    *(_OWORD *)(a7 + 96) = 0u;
    *(_OWORD *)(a7 + 48) = 0u;
    *(_OWORD *)(a7 + 64) = 0u;
    *(_OWORD *)(a7 + 16) = 0u;
    *(_OWORD *)(a7 + 32) = 0u;
    *(_OWORD *)a7 = 0u;
    return result;
  }
  if (v24 > v22)
  {
    __break(1u);
    return result;
  }
  double v25 = *(double *)(a1 + 32);
  *(void *)&long long v37 = *(void *)(a1 + 40);
  uint64_t v26 = specialized HVGrid.minorGeometry(updatingSize:)((double *)&v37, a3);
  uint64_t v28 = v27;
  if (v26 < 1 || (uint64_t v29 = v37, *(double *)&v37 <= 0.0) || v25 <= 0.0)
  {
    swift_bridgeObjectRelease();
    specialized LazyStack<>.log(_:)(v24, v23);
    goto LABEL_19;
  }
  uint64_t v30 = v26;
  uint64_t v31 = *(void *)(a2 + 16);
  if (!v31
    || v26 != *(void *)a2
    || *(double *)&v37 != *(double *)(a2 + 8)
    || (swift_bridgeObjectRetain_n(),
        swift_bridgeObjectRetain(),
        char v35 = specialized static Array<A>.== infix(_:_:)(v28, v31),
        swift_bridgeObjectRelease_n(),
        swift_bridgeObjectRelease(),
        (v35 & 1) == 0))
  {
    specialized _LazyStack_Cache.reset()();
  }
  int v32 = *(_DWORD *)(a1 + 48);
  long long v40 = 0u;
  memset(v41, 0, 31);
  long long v38 = 0u;
  long long v39 = 0u;
  long long v37 = 0u;
  uint64_t v33 = MEMORY[0x1E4FBC860];
  unint64_t v36 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  unint64_t v34 = specialized Dictionary.init(dictionaryLiteral:)(v33);
  *(void *)a7 = a3;
  *(void *)(a7 + 8) = a4;
  *(void *)(a7 + 16) = a5;
  *(unsigned char *)(a7 + 24) = a6 & 1;
  *(_DWORD *)(a7 + 28) = HIDWORD(a6);
  *(void *)(a7 + 40) = v30;
  *(void *)(a7 + 48) = v29;
  *(void *)(a7 + 56) = v28;
  *(unsigned char *)(a7 + 32) = 0;
  *(double *)(a7 + 64) = v24;
  *(double *)(a7 + 72) = v23;
  *(_DWORD *)(a7 + 80) = v32;
  *(void *)(a7 + 88) = 0;
  *(unsigned char *)(a7 + 96) = 1;
  *(void *)(a7 + 104) = 0;
  *(unsigned char *)(a7 + 112) = 0;
  *(void *)(a7 + 120) = 0;
  *(void *)(a7 + 128) = 0;
  *(unsigned char *)(a7 + 136) = 1;
  *(void *)(a7 + 144) = v33;
  *(void *)(a7 + 152) = 0;
  outlined init with take of _LazyLayout_PlacementContext?((uint64_t)&v37, a7 + 160, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview);
  *(void *)(a7 + 256) = v33;
  *(void *)(a7 + 264) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a7 + 272) = 0x8000000000000000;
  *(void *)(a7 + 280) = 0x7FF0000000000000;
  *(_OWORD *)(a7 + 288) = xmmword_1883572F0;
  *(void *)(a7 + 304) = 0xFFF0000000000000;
  *(unsigned char *)(a7 + 312) = 0;
  *(void *)(a7 + 320) = v36;
  *(void *)(a7 + 328) = v34;
  return swift_bridgeObjectRetain();
}

{
  unint64_t v14;
  unint64_t v15;
  char v16;
  long long v17;
  long long v18;
  long long v19;
  uint64_t result;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  unsigned char v41[32];
  long long v42;

  unint64_t v14 = *(void *)(a1 + 280);
  unint64_t v15 = *(void *)(a1 + 288);
  char v16 = *(unsigned char *)(a1 + 296);
  long long v17 = *(_OWORD *)(a1 + 104);
  long long v18 = *(_OWORD *)(a1 + 136);
  *(_OWORD *)unint64_t v41 = *(_OWORD *)(a1 + 120);
  *(_OWORD *)&v41[16] = v18;
  long long v42 = *(_OWORD *)(a1 + 152);
  long long v19 = *(_OWORD *)(a1 + 72);
  long long v37 = *(_OWORD *)(a1 + 56);
  long long v38 = v19;
  long long v39 = *(_OWORD *)(a1 + 88);
  long long v40 = v17;
  if (v16) {
    ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v15, v14));
  }
  ScrollGeometry.visibleRect.getter();
  uint64_t result = CGRect.subscript.getter();
  double v23 = v22;
  if (v21 > 0.0) {
    double v24 = v21;
  }
  else {
    double v24 = 0.0;
  }
  if (v24 >= v22)
  {
    specialized LazyStack<>.log(_:)(v21, v22);
LABEL_19:
    uint64_t result = specialized _LazyStack_Cache.reset()();
    *(_OWORD *)(a7 + 304) = 0u;
    *(_OWORD *)(a7 + 320) = 0u;
    *(_OWORD *)(a7 + 272) = 0u;
    *(_OWORD *)(a7 + 288) = 0u;
    *(_OWORD *)(a7 + 240) = 0u;
    *(_OWORD *)(a7 + 256) = 0u;
    *(_OWORD *)(a7 + 208) = 0u;
    *(_OWORD *)(a7 + 224) = 0u;
    *(_OWORD *)(a7 + 176) = 0u;
    *(_OWORD *)(a7 + 192) = 0u;
    *(_OWORD *)(a7 + 144) = 0u;
    *(_OWORD *)(a7 + 160) = 0u;
    *(_OWORD *)(a7 + 112) = 0u;
    *(_OWORD *)(a7 + 128) = 0u;
    *(_OWORD *)(a7 + 80) = 0u;
    *(_OWORD *)(a7 + 96) = 0u;
    *(_OWORD *)(a7 + 48) = 0u;
    *(_OWORD *)(a7 + 64) = 0u;
    *(_OWORD *)(a7 + 16) = 0u;
    *(_OWORD *)(a7 + 32) = 0u;
    *(_OWORD *)a7 = 0u;
    return result;
  }
  if (v24 > v22)
  {
    __break(1u);
    return result;
  }
  double v25 = *(double *)(a1 + 40);
  *(void *)&long long v37 = *(void *)(a1 + 32);
  uint64_t v26 = specialized HVGrid.minorGeometry(updatingSize:)((double *)&v37, a3);
  uint64_t v28 = v27;
  if (v26 < 1 || (uint64_t v29 = v37, *(double *)&v37 <= 0.0) || v25 <= 0.0)
  {
    swift_bridgeObjectRelease();
    specialized LazyStack<>.log(_:)(v24, v23);
    goto LABEL_19;
  }
  uint64_t v30 = v26;
  uint64_t v31 = *(void *)(a2 + 16);
  if (!v31
    || v26 != *(void *)a2
    || *(double *)&v37 != *(double *)(a2 + 8)
    || (swift_bridgeObjectRetain_n(),
        swift_bridgeObjectRetain(),
        char v35 = specialized static Array<A>.== infix(_:_:)(v28, v31),
        swift_bridgeObjectRelease_n(),
        swift_bridgeObjectRelease(),
        (v35 & 1) == 0))
  {
    specialized _LazyStack_Cache.reset()();
  }
  int v32 = *(_DWORD *)(a1 + 48);
  long long v40 = 0u;
  memset(v41, 0, 31);
  long long v38 = 0u;
  long long v39 = 0u;
  long long v37 = 0u;
  uint64_t v33 = MEMORY[0x1E4FBC860];
  unint64_t v36 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  unint64_t v34 = specialized Dictionary.init(dictionaryLiteral:)(v33);
  *(void *)a7 = a3;
  *(void *)(a7 + 8) = a4;
  *(void *)(a7 + 16) = a5;
  *(unsigned char *)(a7 + 24) = a6 & 1;
  *(_DWORD *)(a7 + 28) = HIDWORD(a6);
  *(void *)(a7 + 40) = v30;
  *(void *)(a7 + 48) = v29;
  *(void *)(a7 + 56) = v28;
  *(unsigned char *)(a7 + 32) = 1;
  *(double *)(a7 + 64) = v24;
  *(double *)(a7 + 72) = v23;
  *(_DWORD *)(a7 + 80) = v32;
  *(void *)(a7 + 88) = 0;
  *(unsigned char *)(a7 + 96) = 1;
  *(void *)(a7 + 104) = 0;
  *(unsigned char *)(a7 + 112) = 0;
  *(void *)(a7 + 120) = 0;
  *(void *)(a7 + 128) = 0;
  *(unsigned char *)(a7 + 136) = 1;
  *(void *)(a7 + 144) = v33;
  *(void *)(a7 + 152) = 0;
  outlined init with take of _LazyLayout_PlacementContext?((uint64_t)&v37, a7 + 160, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview);
  *(void *)(a7 + 256) = v33;
  *(void *)(a7 + 264) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a7 + 272) = 0x8000000000000000;
  *(void *)(a7 + 280) = 0x7FF0000000000000;
  *(_OWORD *)(a7 + 288) = xmmword_1883572F0;
  *(void *)(a7 + 304) = 0xFFF0000000000000;
  *(unsigned char *)(a7 + 312) = 0;
  *(void *)(a7 + 320) = v36;
  *(void *)(a7 + 328) = v34;
  return swift_bridgeObjectRetain();
}

uint64_t specialized StackPlacement.measureBackwards(subviews:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(uint64_t a1, uint64_t a2, char a3, char a4, char a5, double a6)
{
  return specialized StackPlacement.measureBackwards(subviews:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(a1, a2, a3, a4, a5, (double (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized HVGrid.lengthAndSpacing(subviews:predecessors:minorGeometry:), a6);
}

{
  return specialized StackPlacement.measureBackwards(subviews:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(a1, a2, a3, a4, a5, (double (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized HVGrid.lengthAndSpacing(subviews:predecessors:minorGeometry:), a6);
}

{
  return specialized StackPlacement.measureBackwards(subviews:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(a1, a2, a3, a4, a5, (double (*)(uint64_t, uint64_t, void, uint64_t, unint64_t, double))specialized LazyHVStack<>.lengthAndSpacing(subviews:predecessors:minorGeometry:), a6);
}

{
  return specialized StackPlacement.measureBackwards(subviews:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(a1, a2, a3, a4, a5, (double (*)(uint64_t, uint64_t, void, uint64_t, unint64_t, double))specialized LazyHVStack<>.lengthAndSpacing(subviews:predecessors:minorGeometry:), a6);
}

uint64_t specialized StackPlacement.measureBackwards(subviews:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(uint64_t result, uint64_t a2, char a3, char a4, char a5, double (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t), double a7)
{
  uint64_t v35 = *(void *)(result + 16);
  if (!v35) {
    return result;
  }
  uint64_t v10 = result;
  specialized StackPlacement.reset(index:position:stoppingCondition:skipFirst:)(a2, 0, 1, 1, a7);
  uint64_t v11 = swift_allocObject();
  *(unsigned char *)(v11 + 16) = 0;
  uint64_t v30 = swift_allocObject();
  *(unsigned char *)(v30 + 16) = 0;
  uint64_t v12 = swift_allocObject();
  *(unsigned char *)(v12 + 16) = 0;
  unint64_t v34 = (unsigned char *)(v11 + 16);
  if (a4)
  {
    uint64_t v13 = v7[5];
    uint64_t v14 = v7[13];
    BOOL v15 = __OFSUB__(v14, v13);
    uint64_t v16 = v14 - v13;
    if (v15)
    {
      __break(1u);
LABEL_34:
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    v7[13] = v16;
    *(unsigned char *)(v12 + 16) = 1;
  }
  swift_bridgeObjectRetain();
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  uint64_t v17 = 0;
  long long v18 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v19 = 8 * v35 + 24;
  uint64_t v20 = v30;
  uint64_t v31 = v12;
  while (1)
  {
    double v21 = v18;
    v7[18] = *(void *)(v10 + v19);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v17 == 1)
    {
      *(unsigned char *)(v20 + 16) = 1;
LABEL_20:
      specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(subviews:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(0, v7, v12, a5 & 1, v11, v20, a6);
LABEL_21:
      long long v18 = v21;
      goto LABEL_22;
    }
    if (v17)
    {
      *(unsigned char *)(v12 + 16) = 1;
      goto LABEL_20;
    }
    uint64_t v22 = v7[18];
    if (v7[19]) {
      double v23 = (void *)v7[19];
    }
    else {
      double v23 = v18;
    }
    v7[18] = (uint64_t)v23;
    v7[19] = v22;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    double v25 = (char *)v7[18];
    if (!isUniquelyReferenced_nonNull_native)
    {
      if (*((void *)v25 + 3) >= 2uLL)
      {
        type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_LazyLayout_Subview>, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBBE00]);
        long long v18 = (void *)swift_allocObject();
        size_t v29 = _swift_stdlib_malloc_size(v18);
        char v18[2] = 0;
        v18[3] = 2 * ((uint64_t)(v29 - 32) / 96);
      }
      v7[18] = (uint64_t)v18;
      swift_bridgeObjectRelease();
      uint64_t v12 = v31;
      goto LABEL_21;
    }
    int64_t v26 = *((void *)v25 + 2);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      double v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 1, v25);
    }
    swift_arrayDestroy();
    if (v26)
    {
      uint64_t v27 = v11;
      uint64_t v28 = *((void *)v25 + 2) - v26;
      if (v28 < 0) {
        goto LABEL_34;
      }
      memmove(v25 + 32, &v25[96 * v26 + 32], 96 * v28);
      *((void *)v25 + 2) = v28;
      uint64_t v11 = v27;
      long long v18 = v21;
    }
    v7[18] = (uint64_t)v25;
    uint64_t v20 = v30;
    uint64_t v12 = v31;
LABEL_22:
    if (*v34 == 1)
    {
      swift_release();
      swift_release();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    if (__OFADD__(v17, 1)) {
      break;
    }
    ++v17;
    v19 -= 8;
    if (v35 == v17) {
      goto LABEL_32;
    }
  }
  __break(1u);
LABEL_32:
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(unsigned char *)(v20 + 16) = 1;
  swift_beginAccess();
  *(unsigned char *)(v12 + 16) = 1;
  specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(subviews:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(a3 & 1, v7, v12, a5 & 1, v11, v20, a6);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t specialized StackPlacement.measureBackwards(subviews:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(uint64_t result, uint64_t a2, char a3, char a4, char a5, double (*a6)(uint64_t, uint64_t, void, uint64_t, unint64_t, double), double a7)
{
  uint64_t v35 = *(void *)(result + 16);
  if (!v35) {
    return result;
  }
  uint64_t v10 = result;
  specialized StackPlacement.reset(index:position:stoppingCondition:skipFirst:)(a2, 0, 1, 1, a7);
  uint64_t v11 = swift_allocObject();
  *(unsigned char *)(v11 + 16) = 0;
  uint64_t v30 = swift_allocObject();
  *(unsigned char *)(v30 + 16) = 0;
  uint64_t v12 = swift_allocObject();
  *(unsigned char *)(v12 + 16) = 0;
  unint64_t v34 = (unsigned char *)(v11 + 16);
  if (a4)
  {
    uint64_t v13 = v7[4];
    uint64_t v14 = v7[12];
    BOOL v15 = __OFSUB__(v14, v13);
    uint64_t v16 = v14 - v13;
    if (v15)
    {
      __break(1u);
LABEL_34:
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    v7[12] = v16;
    *(unsigned char *)(v12 + 16) = 1;
  }
  swift_bridgeObjectRetain();
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  uint64_t v17 = 0;
  long long v18 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v19 = 8 * v35 + 24;
  uint64_t v20 = v30;
  uint64_t v31 = v12;
  while (1)
  {
    double v21 = v18;
    v7[17] = *(void *)(v10 + v19);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v17 == 1)
    {
      *(unsigned char *)(v20 + 16) = 1;
LABEL_20:
      specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(subviews:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(0, v7, v12, a5 & 1, v11, v20, a6);
LABEL_21:
      long long v18 = v21;
      goto LABEL_22;
    }
    if (v17)
    {
      *(unsigned char *)(v12 + 16) = 1;
      goto LABEL_20;
    }
    uint64_t v22 = v7[17];
    if (v7[18]) {
      double v23 = (void *)v7[18];
    }
    else {
      double v23 = v18;
    }
    v7[17] = (uint64_t)v23;
    v7[18] = v22;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    double v25 = (char *)v7[17];
    if (!isUniquelyReferenced_nonNull_native)
    {
      if (*((void *)v25 + 3) >= 2uLL)
      {
        type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_LazyLayout_Subview>, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBBE00]);
        long long v18 = (void *)swift_allocObject();
        size_t v29 = _swift_stdlib_malloc_size(v18);
        char v18[2] = 0;
        v18[3] = 2 * ((uint64_t)(v29 - 32) / 96);
      }
      v7[17] = (uint64_t)v18;
      swift_bridgeObjectRelease();
      uint64_t v12 = v31;
      goto LABEL_21;
    }
    int64_t v26 = *((void *)v25 + 2);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      double v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 1, v25);
    }
    swift_arrayDestroy();
    if (v26)
    {
      uint64_t v27 = v11;
      uint64_t v28 = *((void *)v25 + 2) - v26;
      if (v28 < 0) {
        goto LABEL_34;
      }
      memmove(v25 + 32, &v25[96 * v26 + 32], 96 * v28);
      *((void *)v25 + 2) = v28;
      uint64_t v11 = v27;
      long long v18 = v21;
    }
    v7[17] = (uint64_t)v25;
    uint64_t v20 = v30;
    uint64_t v12 = v31;
LABEL_22:
    if (*v34 == 1)
    {
      swift_release();
      swift_release();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    if (__OFADD__(v17, 1)) {
      break;
    }
    ++v17;
    v19 -= 8;
    if (v35 == v17) {
      goto LABEL_32;
    }
  }
  __break(1u);
LABEL_32:
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(unsigned char *)(v20 + 16) = 1;
  swift_beginAccess();
  *(unsigned char *)(v12 + 16) = 1;
  specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(subviews:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(a3 & 1, v7, v12, a5 & 1, v11, v20, a6);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t specialized LazyStack<>.prefetch(subviews:edges:context:cache:offsetPastVisible:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *(void *)(a4 + 16);
  if (!v9) {
    return 0;
  }
  uint64_t v17 = *(void *)a4;
  uint64_t v18 = *(void *)(a4 + 8);
  uint64_t v82 = *(void *)a4;
  uint64_t v83 = v18;
  uint64_t v84 = v9;
  swift_bridgeObjectRetain();
  uint64_t result = static Edge.Set.horizontal.getter();
  if ((result & a2) == 0) {
    goto LABEL_10;
  }
  if ((a2 & 8) != 0)
  {
    if (*(double *)(a4 + 64) >= *(double *)(a4 + 80))
    {
      uint64_t v25 = *(void *)(a4 + 48);
      uint64_t v67 = v25 + a5;
      if (!__OFADD__(v25, a5)) {
        goto LABEL_14;
      }
      goto LABEL_46;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v20 = (a5 + 1) * v17;
  if ((unsigned __int128)((a5 + 1) * (__int128)v17) >> 64 == v20 >> 63)
  {
    uint64_t v21 = *(void *)(a4 + 40);
    BOOL v22 = __OFSUB__(v21, v20);
    uint64_t v23 = v21 - v20;
    if (!v22)
    {
      uint64_t v67 = v23;
      if (v23 < 0 || *(double *)(a4 + 72) < *(double *)(a4 + 56)) {
        goto LABEL_10;
      }
LABEL_14:
      uint64_t v80 = v67;
      uint64_t v81 = MEMORY[0x1E4FBC860];
      long long v26 = *(_OWORD *)(a4 + 80);
      v78[4] = *(_OWORD *)(a4 + 64);
      v78[5] = v26;
      v78[6] = *(_OWORD *)(a4 + 96);
      uint64_t v79 = *(void *)(a4 + 112);
      long long v27 = *(_OWORD *)(a4 + 16);
      v78[0] = *(_OWORD *)a4;
      v78[1] = v27;
      long long v28 = *(_OWORD *)(a4 + 48);
      unint64_t v29 = 2 * v17;
      v78[2] = *(_OWORD *)(a4 + 32);
      v78[3] = v28;
      if (a5 < 1)
      {
        uint64_t v36 = outlined retain of _LazyStack_Cache<LazyHGridLayout>(a4);
      }
      else
      {
        outlined retain of _LazyStack_Cache<LazyHGridLayout>(a4);
        specialized LazyStack<>.placer(subviews:context:cache:)(a3, (uint64_t)v78, a6, a7, a8, a9 & 0xFFFFFFFF00000001, (uint64_t)v68);
        if (v68[0])
        {
          memcpy(v69, v68, 0x150uLL);
          uint64_t v30 = v67;
          unint64_t v31 = v29;
          if ((a2 & 8) != 0)
          {
            double v58 = *(double *)(a4 + 64);
            char v59 = specialized StackPlacement.place(subviews:from:position:stopping:style:)(a1, *(void *)(a4 + 48), v67 - 1, 0, v58);
            double v60 = *(double *)&v69[36];
            uint64_t result = AGGraphHasDeadlinePassed();
            if ((result & 1) == 0)
            {
              if (v59)
              {
LABEL_43:
                static Signpost.prefetchNotifyMaxItems()();
                outlined destroy of StackPlacement<LazyHGridLayout>((uint64_t)v69);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_10;
              }
              double v35 = v60 - v58;
LABEL_39:
              double v61 = *(double *)(a4 + 96) * 0.75;
              if (v61 < 0.0) {
                goto LABEL_48;
              }
              if (v35 >= 0.0 && v35 < v61)
              {
                uint64_t v36 = outlined destroy of StackPlacement<LazyHGridLayout>((uint64_t)v69);
                goto LABEL_22;
              }
              goto LABEL_43;
            }
          }
          else
          {
            LOBYTE(v68[0]) = 0;
            uint64_t v32 = specialized LazyStack<>.collectBackwards(from:to:subviews:style:atEnd:)(v67 + 1, *(void *)(a4 + 40), a1, v29, v68);
            specialized StackPlacement.measureBackwards(subviews:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(v32, v67 + 1, 1, v68[0], 1, (double (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized HVGrid.lengthAndSpacing(subviews:predecessors:minorGeometry:), *(double *)(a4 + 56));
            swift_bridgeObjectRelease();
            double v33 = *(double *)(a4 + 72);
            double v34 = *(double *)&v69[15];
            uint64_t result = AGGraphHasDeadlinePassed();
            if (!result)
            {
              double v35 = v33 - v34;
              goto LABEL_39;
            }
          }
          outlined destroy of StackPlacement<LazyHGridLayout>((uint64_t)v69);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 1;
        }
        uint64_t v36 = outlined destroy of StackPlacement<LazyVStackLayout>?((uint64_t)v68, &lazy cache variable for type metadata for StackPlacement<LazyHGridLayout>?, &lazy cache variable for type metadata for StackPlacement<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout);
      }
      uint64_t v30 = v67;
      unint64_t v31 = v29;
LABEL_22:
      MEMORY[0x1F4188790](v36);
      v68[0] = *(void *)(a1 + 104);
      uint64_t v37 = outlined init with copy of _ViewList_Node(a1 + 16, (uint64_t)v69);
      unint64_t v74 = v31;
      MEMORY[0x1F4188790](v37);
      swift_bridgeObjectRetain();
      _ViewList_Node.applyNodes(from:style:transform:to:)();
      outlined destroy of _ViewList_Node((uint64_t)v69);
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v38 = *(void *)(v81 + 16);
      if (!v38)
      {
        uint64_t v24 = 0;
LABEL_34:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v24;
      }
      if (v38 <= *(void *)(v84 + 16))
      {
        uint64_t v39 = v81 + 32;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v40 = 40;
        do
        {
          _ProposedSize.init(_:in:by:)();
          uint64_t v41 = v69[0];
          char v42 = v69[1];
          uint64_t v43 = v69[2];
          char v44 = v69[3];
          outlined init with copy of _LazyLayout_Subview(v39, (uint64_t)v69);
          static Signpost.prefetchNotifyStartIndex(_:)();
          v68[0] = v41;
          LOBYTE(v68[1]) = v42;
          v68[2] = v43;
          LOBYTE(v68[3]) = v44;
          ProposedViewSize.init(_:)();
          char v46 = v45;
          char v48 = v47;
          uint64_t v49 = LazyLayoutViewCache.item(data:)((uint64_t)&v69[2]);
          uint64_t v50 = v49;
          if (*(unsigned char *)(v49 + 208))
          {
            if (*(unsigned char *)(v49 + 280))
            {
              LOBYTE(v68[0]) = v46 & 1;
              LOBYTE(v74) = v48 & 1;
              _ProposedSize.init(_:)();
              unint64_t v70 = v74;
              unsigned __int8 v71 = v75;
              uint64_t v72 = v76;
              unsigned __int8 v73 = v77;
              _Placement.init(proposedSize:at:)();
              uint64_t v64 = v68[5];
              uint64_t v65 = v68[4];
              uint64_t v62 = v68[7];
              uint64_t v63 = v68[6];
            }
            else
            {
              uint64_t v52 = *(void *)(v49 + 264);
              uint64_t v51 = *(void *)(v49 + 272);
              uint64_t v53 = *(void *)(v49 + 256);
              v68[4] = *(void *)(v49 + 248);
              v68[5] = v53;
              v68[6] = v52;
              v68[7] = v51;
              uint64_t v64 = v53;
              uint64_t v65 = v68[4];
              uint64_t v62 = v51;
              uint64_t v63 = v52;
            }
            LOBYTE(v74) = v46 & 1;
            LOBYTE(v70) = v48 & 1;
            _ProposedSize.init(_:)();
            uint64_t v54 = v75;
            uint64_t v55 = v76;
            uint64_t v56 = v77;
            *(void *)(v50 + 216) = v74;
            *(void *)(v50 + 224) = v54;
            *(void *)(v50 + 232) = v55;
            *(void *)(v50 + 240) = v56;
            *(void *)(v50 + 248) = v65;
            *(void *)(v50 + 256) = v64;
            *(void *)(v50 + 264) = v63;
            *(void *)(v50 + 272) = v62;
            *(unsigned char *)(v50 + 280) = 0;
            swift_beginAccess();
            uint64_t result = swift_unownedRetainStrong();
            if (!result) {
              goto LABEL_49;
            }
            int v57 = *(_DWORD *)(result + 212);
            swift_release();
            *(_DWORD *)(v50 + 196) = v57;
          }
          swift_release();
          ++v30;
          outlined destroy of _LazyLayout_Subview((uint64_t)v69);
          v39 += 96;
          v40 += 32;
          --v38;
        }
        while (v38);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v24 = 2 * (*(void *)(v81 + 16) != 0);
        goto LABEL_34;
      }
      goto LABEL_47;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

{
  uint64_t v9;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  long long v26;
  long long v27;
  long long v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  double v58;
  char v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  void v68[42];
  void v69[45];
  unint64_t v70;
  unsigned __int8 v71;
  uint64_t v72;
  unsigned __int8 v73;
  unint64_t v74;
  unsigned __int8 v75;
  uint64_t v76;
  unsigned __int8 v77;
  _OWORD v78[7];
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  uint64_t v9 = *(void *)(a4 + 16);
  if (!v9) {
    return 0;
  }
  uint64_t v17 = *(void *)a4;
  uint64_t v18 = *(void *)(a4 + 8);
  uint64_t v82 = *(void *)a4;
  uint64_t v83 = v18;
  uint64_t v84 = v9;
  swift_bridgeObjectRetain();
  uint64_t result = static Edge.Set.vertical.getter();
  if ((result & a2) == 0) {
    goto LABEL_10;
  }
  if ((a2 & 4) != 0)
  {
    if (*(double *)(a4 + 64) >= *(double *)(a4 + 80))
    {
      uint64_t v25 = *(void *)(a4 + 48);
      uint64_t v67 = v25 + a5;
      if (!__OFADD__(v25, a5)) {
        goto LABEL_14;
      }
      goto LABEL_46;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v20 = (a5 + 1) * v17;
  if ((unsigned __int128)((a5 + 1) * (__int128)v17) >> 64 == v20 >> 63)
  {
    uint64_t v21 = *(void *)(a4 + 40);
    BOOL v22 = __OFSUB__(v21, v20);
    uint64_t v23 = v21 - v20;
    if (!v22)
    {
      uint64_t v67 = v23;
      if (v23 < 0 || *(double *)(a4 + 72) < *(double *)(a4 + 56)) {
        goto LABEL_10;
      }
LABEL_14:
      uint64_t v80 = v67;
      uint64_t v81 = MEMORY[0x1E4FBC860];
      long long v26 = *(_OWORD *)(a4 + 80);
      v78[4] = *(_OWORD *)(a4 + 64);
      v78[5] = v26;
      v78[6] = *(_OWORD *)(a4 + 96);
      uint64_t v79 = *(void *)(a4 + 112);
      long long v27 = *(_OWORD *)(a4 + 16);
      v78[0] = *(_OWORD *)a4;
      v78[1] = v27;
      long long v28 = *(_OWORD *)(a4 + 48);
      unint64_t v29 = 2 * v17;
      v78[2] = *(_OWORD *)(a4 + 32);
      v78[3] = v28;
      if (a5 < 1)
      {
        uint64_t v36 = outlined retain of _LazyStack_Cache<LazyHGridLayout>(a4);
      }
      else
      {
        outlined retain of _LazyStack_Cache<LazyHGridLayout>(a4);
        specialized LazyStack<>.placer(subviews:context:cache:)(a3, (uint64_t)v78, a6, a7, a8, a9 & 0xFFFFFFFF00000001, (uint64_t)v68);
        if (v68[0])
        {
          memcpy(v69, v68, 0x150uLL);
          uint64_t v30 = v67;
          unint64_t v31 = v29;
          if ((a2 & 4) != 0)
          {
            double v58 = *(double *)(a4 + 64);
            char v59 = specialized StackPlacement.place(subviews:from:position:stopping:style:)(a1, *(void *)(a4 + 48), v67 - 1, 0, v58);
            double v60 = *(double *)&v69[36];
            uint64_t result = AGGraphHasDeadlinePassed();
            if ((result & 1) == 0)
            {
              if (v59)
              {
LABEL_43:
                static Signpost.prefetchNotifyMaxItems()();
                outlined destroy of StackPlacement<LazyVGridLayout>((uint64_t)v69);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_10;
              }
              double v35 = v60 - v58;
LABEL_39:
              double v61 = *(double *)(a4 + 96) * 0.75;
              if (v61 < 0.0) {
                goto LABEL_48;
              }
              if (v35 >= 0.0 && v35 < v61)
              {
                uint64_t v36 = outlined destroy of StackPlacement<LazyVGridLayout>((uint64_t)v69);
                goto LABEL_22;
              }
              goto LABEL_43;
            }
          }
          else
          {
            LOBYTE(v68[0]) = 0;
            uint64_t v32 = specialized LazyStack<>.collectBackwards(from:to:subviews:style:atEnd:)(v67 + 1, *(void *)(a4 + 40), a1, v29, v68);
            specialized StackPlacement.measureBackwards(subviews:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(v32, v67 + 1, 1, v68[0], 1, (double (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized HVGrid.lengthAndSpacing(subviews:predecessors:minorGeometry:), *(double *)(a4 + 56));
            swift_bridgeObjectRelease();
            double v33 = *(double *)(a4 + 72);
            double v34 = *(double *)&v69[15];
            uint64_t result = AGGraphHasDeadlinePassed();
            if (!result)
            {
              double v35 = v33 - v34;
              goto LABEL_39;
            }
          }
          outlined destroy of StackPlacement<LazyVGridLayout>((uint64_t)v69);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 1;
        }
        uint64_t v36 = outlined destroy of StackPlacement<LazyVStackLayout>?((uint64_t)v68, &lazy cache variable for type metadata for StackPlacement<LazyVGridLayout>?, &lazy cache variable for type metadata for StackPlacement<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout);
      }
      uint64_t v30 = v67;
      unint64_t v31 = v29;
LABEL_22:
      MEMORY[0x1F4188790](v36);
      v68[0] = *(void *)(a1 + 104);
      uint64_t v37 = outlined init with copy of _ViewList_Node(a1 + 16, (uint64_t)v69);
      unint64_t v74 = v31;
      MEMORY[0x1F4188790](v37);
      swift_bridgeObjectRetain();
      _ViewList_Node.applyNodes(from:style:transform:to:)();
      outlined destroy of _ViewList_Node((uint64_t)v69);
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v38 = *(void *)(v81 + 16);
      if (!v38)
      {
        uint64_t v24 = 0;
LABEL_34:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v24;
      }
      if (v38 <= *(void *)(v84 + 16))
      {
        uint64_t v39 = v81 + 32;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v40 = 40;
        do
        {
          _ProposedSize.init(_:in:by:)();
          uint64_t v41 = v69[0];
          char v42 = v69[1];
          uint64_t v43 = v69[2];
          char v44 = v69[3];
          outlined init with copy of _LazyLayout_Subview(v39, (uint64_t)v69);
          static Signpost.prefetchNotifyStartIndex(_:)();
          v68[0] = v41;
          LOBYTE(v68[1]) = v42;
          v68[2] = v43;
          LOBYTE(v68[3]) = v44;
          ProposedViewSize.init(_:)();
          char v46 = v45;
          char v48 = v47;
          uint64_t v49 = LazyLayoutViewCache.item(data:)((uint64_t)&v69[2]);
          uint64_t v50 = v49;
          if (*(unsigned char *)(v49 + 208))
          {
            if (*(unsigned char *)(v49 + 280))
            {
              LOBYTE(v68[0]) = v46 & 1;
              LOBYTE(v74) = v48 & 1;
              _ProposedSize.init(_:)();
              unint64_t v70 = v74;
              unsigned __int8 v71 = v75;
              uint64_t v72 = v76;
              unsigned __int8 v73 = v77;
              _Placement.init(proposedSize:at:)();
              uint64_t v64 = v68[5];
              uint64_t v65 = v68[4];
              uint64_t v62 = v68[7];
              uint64_t v63 = v68[6];
            }
            else
            {
              uint64_t v52 = *(void *)(v49 + 264);
              uint64_t v51 = *(void *)(v49 + 272);
              uint64_t v53 = *(void *)(v49 + 256);
              v68[4] = *(void *)(v49 + 248);
              v68[5] = v53;
              v68[6] = v52;
              v68[7] = v51;
              uint64_t v64 = v53;
              uint64_t v65 = v68[4];
              uint64_t v62 = v51;
              uint64_t v63 = v52;
            }
            LOBYTE(v74) = v46 & 1;
            LOBYTE(v70) = v48 & 1;
            _ProposedSize.init(_:)();
            uint64_t v54 = v75;
            uint64_t v55 = v76;
            uint64_t v56 = v77;
            *(void *)(v50 + 216) = v74;
            *(void *)(v50 + 224) = v54;
            *(void *)(v50 + 232) = v55;
            *(void *)(v50 + 240) = v56;
            *(void *)(v50 + 248) = v65;
            *(void *)(v50 + 256) = v64;
            *(void *)(v50 + 264) = v63;
            *(void *)(v50 + 272) = v62;
            *(unsigned char *)(v50 + 280) = 0;
            swift_beginAccess();
            uint64_t result = swift_unownedRetainStrong();
            if (!result) {
              goto LABEL_49;
            }
            int v57 = *(_DWORD *)(result + 212);
            swift_release();
            *(_DWORD *)(v50 + 196) = v57;
          }
          swift_release();
          ++v30;
          outlined destroy of _LazyLayout_Subview((uint64_t)v69);
          v39 += 96;
          v40 += 32;
          --v38;
        }
        while (v38);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v24 = 2 * (*(void *)(v81 + 16) != 0);
        goto LABEL_34;
      }
      goto LABEL_47;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

uint64_t specialized LazyStack<>.prefetch(subviews:edges:context:cache:offsetPastVisible:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(a4 + 24)) {
    return 0;
  }
  uint64_t v16 = *(void *)a4;
  uint64_t v62 = *(void *)a4;
  long long v63 = *(_OWORD *)(a4 + 8);
  uint64_t result = static Edge.Set.horizontal.getter();
  if ((result & a2) == 0) {
    return 0;
  }
  if ((a2 & 8) == 0)
  {
    uint64_t v18 = (a5 + 1) * v16;
    if ((unsigned __int128)((a5 + 1) * (__int128)v16) >> 64 == v18 >> 63)
    {
      uint64_t v19 = *(void *)(a4 + 48);
      BOOL v20 = __OFSUB__(v19, v18);
      uint64_t v21 = v19 - v18;
      if (!v20)
      {
        if (v21 < 0 || *(double *)(a4 + 80) < *(double *)(a4 + 64)) {
          return 0;
        }
        goto LABEL_13;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (*(double *)(a4 + 72) < *(double *)(a4 + 88)) {
    return 0;
  }
  uint64_t v23 = *(void *)(a4 + 56);
  uint64_t v21 = v23 + a5;
  if (__OFADD__(v23, a5)) {
    goto LABEL_36;
  }
LABEL_13:
  uint64_t v60 = v21;
  uint64_t v61 = MEMORY[0x1E4FBC860];
  long long v24 = *(_OWORD *)(a4 + 80);
  long long v56 = *(_OWORD *)(a4 + 64);
  long long v57 = v24;
  long long v25 = *(_OWORD *)(a4 + 112);
  long long v58 = *(_OWORD *)(a4 + 96);
  long long v59 = v25;
  long long v26 = *(_OWORD *)(a4 + 16);
  long long v52 = *(_OWORD *)a4;
  long long v53 = v26;
  long long v27 = *(_OWORD *)(a4 + 48);
  uint64_t v48 = v21;
  long long v54 = *(_OWORD *)(a4 + 32);
  long long v55 = v27;
  if (a5 < 1)
  {
    uint64_t v33 = outlined retain of _LazyStack_Cache<LazyVStackLayout>(a4);
    uint64_t v28 = 2 * v16;
LABEL_28:
    MEMORY[0x1F4188790](v33);
    *(void *)&v49[0] = *(void *)(a1 + 104);
    uint64_t v38 = outlined init with copy of _ViewList_Node(a1 + 16, (uint64_t)v50);
    uint64_t v51 = v28;
    MEMORY[0x1F4188790](v38);
    swift_bridgeObjectRetain();
    _ViewList_Node.applyNodes(from:style:transform:to:)();
    outlined destroy of _ViewList_Node((uint64_t)v50);
    swift_bridgeObjectRelease();
    uint64_t v39 = v61;
    if (!*(void *)(v61 + 16))
    {
      uint64_t v22 = 0;
      goto LABEL_32;
    }
    swift_bridgeObjectRetain();
    uint64_t result = _ProposedSize.init(_:in:by:)();
    if (*(void *)(v39 + 16))
    {
      uint64_t v40 = *(void *)v50;
      char v41 = v50[8];
      uint64_t v42 = *(void *)&v50[16];
      char v43 = v50[24];
      outlined init with copy of _LazyLayout_Subview(v39 + 32, (uint64_t)v50);
      *(void *)&v49[0] = a6;
      lazy protocol witness table accessor for type VerticalAlignment and conformance VerticalAlignment();
      AlignmentGuide.fraction.getter();
      UnitPoint.init(_:in:by:)();
      static Signpost.prefetchNotifyStartIndex(_:)();
      *(void *)&v49[0] = v40;
      BYTE8(v49[0]) = v41;
      *(void *)&v49[1] = v42;
      BYTE8(v49[1]) = v43;
      uint64_t v44 = ProposedViewSize.init(_:)();
      char v46 = v45;
      LOBYTE(v42) = v47;
      LazyLayoutViewCache.item(data:)((uint64_t)&v50[16]);
      LOBYTE(v49[0]) = v46 & 1;
      LOBYTE(v51) = v42 & 1;
      LazyLayoutCacheItem.beginPrefetching(at:)(v44, v46 & 1);
      swift_release();
      outlined destroy of _LazyLayout_Subview((uint64_t)v50);
      swift_bridgeObjectRelease();
      uint64_t v22 = 2 * (*(void *)(v61 + 16) != 0);
LABEL_32:
      *(_OWORD *)&v50[64] = v56;
      *(_OWORD *)&v50[80] = v57;
      *(_OWORD *)&v50[96] = v58;
      *(_OWORD *)&v50[112] = v59;
      *(_OWORD *)uint64_t v50 = v52;
      *(_OWORD *)&v50[16] = v53;
      *(_OWORD *)&v50[32] = v54;
      *(_OWORD *)&v50[48] = v55;
      outlined release of _LazyStack_Cache<LazyVStackLayout>((uint64_t)v50);
      swift_bridgeObjectRelease();
      return v22;
    }
    goto LABEL_37;
  }
  outlined retain of _LazyStack_Cache<LazyVStackLayout>(a4);
  specialized LazyStack<>.placer(subviews:context:cache:)(a3, (uint64_t)&v52, a6, a7, a8 & 0xFFFFFFFF00000001, (uint64_t)v49);
  if (!*((void *)&v49[8] + 1))
  {
    uint64_t v33 = outlined destroy of StackPlacement<LazyVStackLayout>?((uint64_t)v49, &lazy cache variable for type metadata for StackPlacement<LazyHStackLayout>?, &lazy cache variable for type metadata for StackPlacement<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout);
    uint64_t v28 = 2 * v16;
    goto LABEL_28;
  }
  memcpy(v50, v49, sizeof(v50));
  uint64_t v28 = 2 * v16;
  if ((a2 & 8) == 0)
  {
    LOBYTE(v49[0]) = 0;
    uint64_t v29 = specialized LazyStack<>.collectBackwards(from:to:subviews:style:atEnd:)(v48 + 1, *(void *)(a4 + 48), a1, 2 * v16, v49);
    specialized StackPlacement.measureBackwards(subviews:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(v29, v48 + 1, 1, v49[0], 1, (double (*)(uint64_t, uint64_t, void, uint64_t, unint64_t, double))specialized LazyHVStack<>.lengthAndSpacing(subviews:predecessors:minorGeometry:), *(double *)(a4 + 64));
    swift_bridgeObjectRelease();
    double v30 = *(double *)(a4 + 80);
    double v31 = *(double *)&v50[112];
    uint64_t result = AGGraphHasDeadlinePassed();
    if (!result)
    {
      double v32 = v30 - v31;
      goto LABEL_24;
    }
LABEL_21:
    outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)v50);
    v49[4] = v56;
    v49[5] = v57;
    v49[6] = v58;
    v49[7] = v59;
    v49[0] = v52;
    v49[1] = v53;
    v49[2] = v54;
    void v49[3] = v55;
    outlined release of _LazyStack_Cache<LazyVStackLayout>((uint64_t)v49);
    swift_bridgeObjectRelease();
    return 1;
  }
  double v34 = *(double *)(a4 + 72);
  char v35 = specialized StackPlacement.place(subviews:from:position:stopping:style:)(a1, *(void *)(a4 + 56), v48 - 1, 0, v34);
  double v36 = *(double *)&v50[280];
  uint64_t result = AGGraphHasDeadlinePassed();
  if (result) {
    goto LABEL_21;
  }
  if (v35)
  {
LABEL_33:
    static Signpost.prefetchNotifyMaxItems()();
    outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)v50);
    v49[4] = v56;
    v49[5] = v57;
    v49[6] = v58;
    v49[7] = v59;
    v49[0] = v52;
    v49[1] = v53;
    v49[2] = v54;
    void v49[3] = v55;
    outlined release of _LazyStack_Cache<LazyVStackLayout>((uint64_t)v49);
    swift_bridgeObjectRelease();
    return 0;
  }
  double v32 = v36 - v34;
LABEL_24:
  double v37 = *(double *)(a4 + 104) * 0.75;
  if (v37 >= 0.0)
  {
    if (v32 >= 0.0 && v32 < v37)
    {
      uint64_t v33 = outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)v50);
      goto LABEL_28;
    }
    goto LABEL_33;
  }
LABEL_38:
  __break(1u);
  return result;
}

{
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  double v34;
  char v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  uint64_t v48;
  _OWORD v49[21];
  unsigned char v50[328];
  uint64_t v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  long long v56;
  long long v57;
  long long v58;
  long long v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  long long v63;

  if (*(unsigned char *)(a4 + 24)) {
    return 0;
  }
  uint64_t v16 = *(void *)a4;
  uint64_t v62 = *(void *)a4;
  long long v63 = *(_OWORD *)(a4 + 8);
  uint64_t result = static Edge.Set.vertical.getter();
  if ((result & a2) == 0) {
    return 0;
  }
  if ((a2 & 4) == 0)
  {
    uint64_t v18 = (a5 + 1) * v16;
    if ((unsigned __int128)((a5 + 1) * (__int128)v16) >> 64 == v18 >> 63)
    {
      uint64_t v19 = *(void *)(a4 + 48);
      BOOL v20 = __OFSUB__(v19, v18);
      uint64_t v21 = v19 - v18;
      if (!v20)
      {
        if (v21 < 0 || *(double *)(a4 + 80) < *(double *)(a4 + 64)) {
          return 0;
        }
        goto LABEL_13;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (*(double *)(a4 + 72) < *(double *)(a4 + 88)) {
    return 0;
  }
  uint64_t v23 = *(void *)(a4 + 56);
  uint64_t v21 = v23 + a5;
  if (__OFADD__(v23, a5)) {
    goto LABEL_36;
  }
LABEL_13:
  uint64_t v60 = v21;
  uint64_t v61 = MEMORY[0x1E4FBC860];
  long long v24 = *(_OWORD *)(a4 + 80);
  long long v56 = *(_OWORD *)(a4 + 64);
  long long v57 = v24;
  long long v25 = *(_OWORD *)(a4 + 112);
  long long v58 = *(_OWORD *)(a4 + 96);
  long long v59 = v25;
  long long v26 = *(_OWORD *)(a4 + 16);
  long long v52 = *(_OWORD *)a4;
  long long v53 = v26;
  long long v27 = *(_OWORD *)(a4 + 48);
  uint64_t v48 = v21;
  long long v54 = *(_OWORD *)(a4 + 32);
  long long v55 = v27;
  if (a5 < 1)
  {
    uint64_t v33 = outlined retain of _LazyStack_Cache<LazyVStackLayout>(a4);
    uint64_t v28 = 2 * v16;
LABEL_28:
    MEMORY[0x1F4188790](v33);
    *(void *)&v49[0] = *(void *)(a1 + 104);
    uint64_t v38 = outlined init with copy of _ViewList_Node(a1 + 16, (uint64_t)v50);
    uint64_t v51 = v28;
    MEMORY[0x1F4188790](v38);
    swift_bridgeObjectRetain();
    _ViewList_Node.applyNodes(from:style:transform:to:)();
    outlined destroy of _ViewList_Node((uint64_t)v50);
    swift_bridgeObjectRelease();
    uint64_t v39 = v61;
    if (!*(void *)(v61 + 16))
    {
      uint64_t v22 = 0;
      goto LABEL_32;
    }
    swift_bridgeObjectRetain();
    uint64_t result = _ProposedSize.init(_:in:by:)();
    if (*(void *)(v39 + 16))
    {
      uint64_t v40 = *(void *)v50;
      char v41 = v50[8];
      uint64_t v42 = *(void *)&v50[16];
      char v43 = v50[24];
      outlined init with copy of _LazyLayout_Subview(v39 + 32, (uint64_t)v50);
      *(void *)&v49[0] = a6;
      lazy protocol witness table accessor for type HorizontalAlignment and conformance HorizontalAlignment();
      AlignmentGuide.fraction.getter();
      UnitPoint.init(_:in:by:)();
      static Signpost.prefetchNotifyStartIndex(_:)();
      *(void *)&v49[0] = v40;
      BYTE8(v49[0]) = v41;
      *(void *)&v49[1] = v42;
      BYTE8(v49[1]) = v43;
      uint64_t v44 = ProposedViewSize.init(_:)();
      char v46 = v45;
      LOBYTE(v42) = v47;
      LazyLayoutViewCache.item(data:)((uint64_t)&v50[16]);
      LOBYTE(v49[0]) = v46 & 1;
      LOBYTE(v51) = v42 & 1;
      LazyLayoutCacheItem.beginPrefetching(at:)(v44, v46 & 1);
      swift_release();
      outlined destroy of _LazyLayout_Subview((uint64_t)v50);
      swift_bridgeObjectRelease();
      uint64_t v22 = 2 * (*(void *)(v61 + 16) != 0);
LABEL_32:
      *(_OWORD *)&v50[64] = v56;
      *(_OWORD *)&v50[80] = v57;
      *(_OWORD *)&v50[96] = v58;
      *(_OWORD *)&v50[112] = v59;
      *(_OWORD *)uint64_t v50 = v52;
      *(_OWORD *)&v50[16] = v53;
      *(_OWORD *)&v50[32] = v54;
      *(_OWORD *)&v50[48] = v55;
      outlined release of _LazyStack_Cache<LazyVStackLayout>((uint64_t)v50);
      swift_bridgeObjectRelease();
      return v22;
    }
    goto LABEL_37;
  }
  outlined retain of _LazyStack_Cache<LazyVStackLayout>(a4);
  specialized LazyStack<>.placer(subviews:context:cache:)(a3, (uint64_t)&v52, a6, a7, a8 & 0xFFFFFFFF00000001, (uint64_t)v49);
  if (!*((void *)&v49[8] + 1))
  {
    uint64_t v33 = outlined destroy of StackPlacement<LazyVStackLayout>?((uint64_t)v49, &lazy cache variable for type metadata for StackPlacement<LazyVStackLayout>?, &lazy cache variable for type metadata for StackPlacement<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout);
    uint64_t v28 = 2 * v16;
    goto LABEL_28;
  }
  memcpy(v50, v49, sizeof(v50));
  uint64_t v28 = 2 * v16;
  if ((a2 & 4) == 0)
  {
    LOBYTE(v49[0]) = 0;
    uint64_t v29 = specialized LazyStack<>.collectBackwards(from:to:subviews:style:atEnd:)(v48 + 1, *(void *)(a4 + 48), a1, 2 * v16, v49);
    specialized StackPlacement.measureBackwards(subviews:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(v29, v48 + 1, 1, v49[0], 1, (double (*)(uint64_t, uint64_t, void, uint64_t, unint64_t, double))specialized LazyHVStack<>.lengthAndSpacing(subviews:predecessors:minorGeometry:), *(double *)(a4 + 64));
    swift_bridgeObjectRelease();
    double v30 = *(double *)(a4 + 80);
    double v31 = *(double *)&v50[112];
    uint64_t result = AGGraphHasDeadlinePassed();
    if (!result)
    {
      double v32 = v30 - v31;
      goto LABEL_24;
    }
LABEL_21:
    outlined destroy of StackPlacement<LazyVStackLayout>((uint64_t)v50);
    v49[4] = v56;
    v49[5] = v57;
    v49[6] = v58;
    v49[7] = v59;
    v49[0] = v52;
    v49[1] = v53;
    v49[2] = v54;
    void v49[3] = v55;
    outlined release of _LazyStack_Cache<LazyVStackLayout>((uint64_t)v49);
    swift_bridgeObjectRelease();
    return 1;
  }
  double v34 = *(double *)(a4 + 72);
  char v35 = specialized StackPlacement.place(subviews:from:position:stopping:style:)(a1, *(void *)(a4 + 56), v48 - 1, 0, v34);
  double v36 = *(double *)&v50[280];
  uint64_t result = AGGraphHasDeadlinePassed();
  if (result) {
    goto LABEL_21;
  }
  if (v35)
  {
LABEL_33:
    static Signpost.prefetchNotifyMaxItems()();
    outlined destroy of StackPlacement<LazyVStackLayout>((uint64_t)v50);
    v49[4] = v56;
    v49[5] = v57;
    v49[6] = v58;
    v49[7] = v59;
    v49[0] = v52;
    v49[1] = v53;
    v49[2] = v54;
    void v49[3] = v55;
    outlined release of _LazyStack_Cache<LazyVStackLayout>((uint64_t)v49);
    swift_bridgeObjectRelease();
    return 0;
  }
  double v32 = v36 - v34;
LABEL_24:
  double v37 = *(double *)(a4 + 104) * 0.75;
  if (v37 >= 0.0)
  {
    if (v32 >= 0.0 && v32 < v37)
    {
      uint64_t v33 = outlined destroy of StackPlacement<LazyVStackLayout>((uint64_t)v50);
      goto LABEL_28;
    }
    goto LABEL_33;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t specialized LazyStack<>.estimatedPlacement(subviews:context:cache:in:)(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return specialized LazyStack<>.estimatedPlacement(subviews:context:cache:in:)(a1, a2, a3, a4, a5, a6, a7, a8, (void (*)(_OWORD *__return_ptr, uint64_t, void *, _OWORD *, uint64_t, uint64_t, uint64_t, unint64_t))specialized LazyStack<>.resolvedPlacerProperties(subviews:context:cache:), (void (*)(unsigned char *, _OWORD *))outlined init with copy of StackPlacement<LazyHGridLayout>, (void (*)(_OWORD *))outlined destroy of StackPlacement<LazyHGridLayout>, (uint64_t (*)(uint64_t, void *, _OWORD *, void *, long long *))specialized LazyStack<>.resolveIndexAndPosition(subviews:context:cache:placer:properties:), (void (*)(uint64_t, uint64_t, uint64_t, BOOL, void, double))specialized StackPlacement.place(subviews:from:position:stopping:style:), (uint64_t (*)(void))type metadata accessor for (StackPlacement<LazyHGridLayout>, PlacementProperties<LazyHGridLayout>)?, (uint64_t (*)(void))type metadata accessor for (StackPlacement<LazyHGridLayout>, PlacementProperties<LazyHGridLayout>));
}

{
  return specialized LazyStack<>.estimatedPlacement(subviews:context:cache:in:)(a1, a2, a3, a4, a5, a6, a7, a8, (void (*)(_OWORD *__return_ptr, uint64_t, void *, _OWORD *, uint64_t, uint64_t, uint64_t, unint64_t))specialized LazyStack<>.resolvedPlacerProperties(subviews:context:cache:), (void (*)(unsigned char *, _OWORD *))outlined init with copy of StackPlacement<LazyVGridLayout>, (void (*)(_OWORD *))outlined destroy of StackPlacement<LazyVGridLayout>, (uint64_t (*)(uint64_t, void *, _OWORD *, void *, long long *))specialized LazyStack<>.resolveIndexAndPosition(subviews:context:cache:placer:properties:), (void (*)(uint64_t, uint64_t, uint64_t, BOOL, void, double))specialized StackPlacement.place(subviews:from:position:stopping:style:), (uint64_t (*)(void))type metadata accessor for (StackPlacement<LazyVGridLayout>, PlacementProperties<LazyVGridLayout>)?, (uint64_t (*)(void))type metadata accessor for (StackPlacement<LazyVGridLayout>, PlacementProperties<LazyVGridLayout>));
}

uint64_t specialized LazyStack<>.estimatedPlacement(subviews:context:cache:in:)(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(_OWORD *__return_ptr, uint64_t, void *, _OWORD *, uint64_t, uint64_t, uint64_t, unint64_t), void (*a10)(unsigned char *, _OWORD *), void (*a11)(_OWORD *), uint64_t (*a12)(uint64_t, void *, _OWORD *, void *, long long *), void (*a13)(uint64_t, uint64_t, uint64_t, BOOL, void, double), uint64_t (*a14)(void), uint64_t (*a15)(void))
{
  char v15 = a8;
  unint64_t v21 = a8 & 0xFFFFFFFF00000000;
  memcpy(__dst, a2, 0x129uLL);
  long long v22 = *(_OWORD *)(a3 + 80);
  long long v78 = *(_OWORD *)(a3 + 64);
  long long v79 = v22;
  long long v80 = *(_OWORD *)(a3 + 96);
  uint64_t v81 = *(void *)(a3 + 112);
  long long v23 = *(_OWORD *)(a3 + 16);
  v77[0] = *(_OWORD *)a3;
  v77[1] = v23;
  long long v24 = *(_OWORD *)(a3 + 48);
  v77[2] = *(_OWORD *)(a3 + 32);
  v77[3] = v24;
  outlined retain of _LazyStack_Cache<LazyHGridLayout>(a3);
  a9(__src, a1, __dst, v77, a5, a6, a7, v21 | v15 & 1);
  if (*(void *)&__src[0])
  {
    memcpy(v72, __src, sizeof(v72));
    long long v25 = v68;
    long long v26 = v69;
    uint64_t v27 = v70;
    __int16 v28 = WORD4(v70);
    long long v29 = v71;
    long long v73 = v68;
    long long v74 = v69;
    *(void *)&long long v75 = v70;
    WORD4(v75) = WORD4(v70);
    long long v76 = v71;
    a10(v72, __src);
    long long v68 = v25;
    long long v69 = v26;
    *(void *)&long long v70 = v27;
    WORD4(v70) = v28;
    long long v71 = v29;
    swift_bridgeObjectRetain();
    a11(__src);
    a10(v72, __src);
    long long v83 = v73;
    long long v84 = v74;
    long long v85 = v75;
    long long v86 = v76;
    memcpy(v66, __src, 0x150uLL);
    uint64_t v30 = a12(a1, __dst, v77, v66, &v83);
    if (v31) {
      goto LABEL_23;
    }
    uint64_t v32 = v30;
    a10(v72, __src);
    double v33 = *((double *)&v84 + 1);
    long long v68 = v83;
    long long v69 = v84;
    long long v70 = v85;
    long long v71 = v86;
    a11(__src);
    uint64_t v34 = v33 == *((double *)&v78 + 1) ? v32 : 0;
    a13(a1, v32, v34, v33 != *((double *)&v78 + 1), 2 * v25, *((double *)&v25 + 1));
    __src[12] = *(_OWORD *)&__dst[31];
    __src[13] = *(_OWORD *)&__dst[33];
    __src[14] = *(_OWORD *)&__dst[35];
    LOBYTE(__src[15]) = __dst[37];
    __src[8] = *(_OWORD *)&__dst[23];
    __src[9] = *(_OWORD *)&__dst[25];
    __src[10] = *(_OWORD *)&__dst[27];
    __src[11] = *(_OWORD *)&__dst[29];
    __src[4] = *(_OWORD *)&__dst[15];
    __src[5] = *(_OWORD *)&__dst[17];
    __src[6] = *(_OWORD *)&__dst[19];
    __src[7] = *(_OWORD *)&__dst[21];
    __src[0] = *(_OWORD *)&__dst[7];
    __src[1] = *(_OWORD *)&__dst[9];
    __src[2] = *(_OWORD *)&__dst[11];
    __src[3] = *(_OWORD *)&__dst[13];
    ScrollGeometry.visibleRect.getter();
    uint64_t v35 = *(void *)(v66[32] + 16);
    if (!v35)
    {
LABEL_23:
      a11(v66);
      swift_bridgeObjectRelease();
      outlined destroy of ScrollableCollection?((uint64_t)v72, a15);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      char v56 = 0;
      uint64_t v57 = 0;
      uint64_t v65 = 0;
      uint64_t v58 = 0;
      uint64_t v59 = 0;
      char v55 = 0;
      uint64_t v62 = 0;
      uint64_t v63 = 0;
      uint64_t v60 = 0;
      uint64_t v61 = 0;
      uint64_t v36 = swift_bridgeObjectRetain() + 48;
      char v64 = 1;
      double v37 = INFINITY;
      do
      {
        uint64_t v39 = *(void *)(v36 - 16);
        uint64_t v38 = *(void *)(v36 - 8);
        char v40 = *(unsigned char *)v36;
        uint64_t v41 = *(void *)(v36 + 8);
        char v42 = *(unsigned char *)(v36 + 16);
        uint64_t v43 = *(void *)(v36 + 24);
        uint64_t v44 = *(void *)(v36 + 32);
        uint64_t v46 = *(void *)(v36 + 40);
        uint64_t v45 = *(void *)(v36 + 48);
        swift_retain_n();
        if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
        {
          static LayoutComputer.defaultValue.getter();
        }
        else
        {
          AGGraphGetValue();
          swift_retain();
        }
        LayoutComputer.sizeThatFits(_:)();
        unint64_t v48 = v47;
        unint64_t v50 = v49;
        swift_release();
        _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v50, v48));
        if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
        {
          static LayoutComputer.defaultValue.getter();
        }
        else
        {
          AGGraphGetValue();
          swift_retain();
        }
        LayoutComputer.sizeThatFits(_:)();
        swift_release();
        swift_release();
        distance(_:_:)();
        if (v51 >= v37)
        {
          swift_release();
        }
        else
        {
          double v52 = v51;
          swift_release();
          char v64 = 0;
          uint64_t v62 = v44;
          uint64_t v63 = v43;
          uint64_t v60 = v45;
          uint64_t v61 = v46;
          char v56 = v40;
          uint64_t v57 = v32;
          uint64_t v65 = v39;
          uint64_t v58 = v41;
          uint64_t v59 = v38;
          char v55 = v42;
          double v37 = v52;
        }
        ++v32;
        v36 += 72;
        --v35;
      }
      while (v35);
      swift_bridgeObjectRelease();
      a11(v66);
      swift_bridgeObjectRelease();
      outlined destroy of ScrollableCollection?((uint64_t)v72, a15);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v65)
      {
        if (v64)
        {
          return swift_release();
        }
        else
        {
          *(void *)a4 = v57;
          *(unsigned char *)(a4 + 8) = 0;
          uint64_t result = swift_release();
          *(void *)(a4 + 16) = v65;
          *(void *)(a4 + 24) = v59;
          *(void *)(a4 + 32) = v56 & 1;
          *(void *)(a4 + 40) = v58;
          *(void *)(a4 + 48) = v55 & 1;
          *(void *)(a4 + 56) = v63;
          *(void *)(a4 + 64) = v62;
          *(void *)(a4 + 72) = v61;
          *(void *)(a4 + 80) = v60;
        }
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return outlined destroy of ScrollableCollection?((uint64_t)__src, a14);
  }
  return result;
}

uint64_t specialized StackPlacement.placeSection(_:from:)(long long *a1, uint64_t *a2)
{
  outlined destroy of AccessibilityScrollableContext?(v2 + 160, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 239) = 0u;
  specialized StackPlacement.flushMinorGroup()();
  uint64_t result = specialized StackPlacement.shouldStop()(0x8000000188328CF0);
  if (result) {
    return result;
  }
  uint64_t v28 = 0;
  long long v6 = a1[1];
  long long v20 = *a1;
  long long v21 = v6;
  long long v22 = a1[2];
  int v23 = *((_DWORD *)a1 + 12);
  uint64_t v7 = _LazyLayout_Section.header.getter((uint64_t)v25);
  MEMORY[0x1F4188790](v7);
  uint64_t v24 = v27;
  uint64_t v8 = outlined init with copy of _ViewList_Node((uint64_t)v26, (uint64_t)&v20);
  MEMORY[0x1F4188790](v8);
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)&v20);
  swift_bridgeObjectRelease();
  outlined destroy of _LazyLayout_Subviews((uint64_t)v25);
  uint64_t result = specialized StackPlacement.shouldStop()(0x8000000188328CF0);
  if (result) {
    return result;
  }
  long long v9 = a1[1];
  long long v20 = *a1;
  long long v21 = v9;
  long long v22 = a1[2];
  int v23 = *((_DWORD *)a1 + 12);
  uint64_t v10 = _LazyLayout_Section.content.getter((uint64_t)v25);
  MEMORY[0x1F4188790](v10);
  uint64_t v24 = v27;
  uint64_t v11 = outlined init with copy of _ViewList_Node((uint64_t)v26, (uint64_t)&v20);
  MEMORY[0x1F4188790](v11);
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)&v20);
  swift_bridgeObjectRelease();
  uint64_t result = outlined destroy of _LazyLayout_Subviews((uint64_t)v25);
  uint64_t v12 = *a2;
  if (*a2)
  {
    uint64_t v13 = *(void *)(v2 + 40) & 0x7FFFFFFFFFFFFFFFLL;
    if (v13 != 1)
    {
      if (v13)
      {
        uint64_t v14 = v12 % v13;
        BOOL v15 = __OFSUB__(v12, v14);
        uint64_t v16 = v12 - v14;
        if (!v15)
        {
          *a2 = v16;
          goto LABEL_8;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      return result;
    }
  }
LABEL_8:
  specialized StackPlacement.flushMinorGroup()();
  uint64_t result = specialized StackPlacement.shouldStop()(0x8000000188328CF0);
  if ((result & 1) == 0 || *(double *)(v2 + 64) < *(double *)(v2 + 120) && (*(unsigned char *)(v2 + 80) & 2) != 0)
  {
    uint64_t v24 = 0;
    long long v17 = a1[1];
    long long v20 = *a1;
    long long v21 = v17;
    long long v22 = a1[2];
    int v23 = *((_DWORD *)a1 + 12);
    uint64_t v18 = _LazyLayout_Section.footer.getter((uint64_t)v25);
    MEMORY[0x1F4188790](v18);
    uint64_t v19 = outlined init with copy of _ViewList_Node((uint64_t)v26, (uint64_t)&v20);
    MEMORY[0x1F4188790](v19);
    swift_bridgeObjectRetain();
    _ViewList_Node.applyNodes(from:style:transform:to:)();
    outlined destroy of _ViewList_Node((uint64_t)&v20);
    swift_bridgeObjectRelease();
    return outlined destroy of _LazyLayout_Subviews((uint64_t)v25);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  long long v6;
  uint64_t v7;
  uint64_t v8;
  long long v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  long long v21;
  long long v22;
  int v23;
  uint64_t v24;
  unsigned char v25[16];
  unsigned char v26[88];
  uint64_t v27;
  uint64_t v28;

  outlined destroy of AccessibilityScrollableContext?(v2 + 160, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 239) = 0u;
  specialized StackPlacement.flushMinorGroup()();
  uint64_t result = specialized StackPlacement.shouldStop()(0x8000000188328D40);
  if (result) {
    return result;
  }
  uint64_t v28 = 0;
  long long v6 = a1[1];
  long long v20 = *a1;
  long long v21 = v6;
  long long v22 = a1[2];
  int v23 = *((_DWORD *)a1 + 12);
  uint64_t v7 = _LazyLayout_Section.header.getter((uint64_t)v25);
  MEMORY[0x1F4188790](v7);
  uint64_t v24 = v27;
  uint64_t v8 = outlined init with copy of _ViewList_Node((uint64_t)v26, (uint64_t)&v20);
  MEMORY[0x1F4188790](v8);
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)&v20);
  swift_bridgeObjectRelease();
  outlined destroy of _LazyLayout_Subviews((uint64_t)v25);
  uint64_t result = specialized StackPlacement.shouldStop()(0x8000000188328D40);
  if (result) {
    return result;
  }
  long long v9 = a1[1];
  long long v20 = *a1;
  long long v21 = v9;
  long long v22 = a1[2];
  int v23 = *((_DWORD *)a1 + 12);
  uint64_t v10 = _LazyLayout_Section.content.getter((uint64_t)v25);
  MEMORY[0x1F4188790](v10);
  uint64_t v24 = v27;
  uint64_t v11 = outlined init with copy of _ViewList_Node((uint64_t)v26, (uint64_t)&v20);
  MEMORY[0x1F4188790](v11);
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)&v20);
  swift_bridgeObjectRelease();
  uint64_t result = outlined destroy of _LazyLayout_Subviews((uint64_t)v25);
  uint64_t v12 = *a2;
  if (*a2)
  {
    uint64_t v13 = *(void *)(v2 + 40) & 0x7FFFFFFFFFFFFFFFLL;
    if (v13 != 1)
    {
      if (v13)
      {
        uint64_t v14 = v12 % v13;
        BOOL v15 = __OFSUB__(v12, v14);
        uint64_t v16 = v12 - v14;
        if (!v15)
        {
          *a2 = v16;
          goto LABEL_8;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      return result;
    }
  }
LABEL_8:
  specialized StackPlacement.flushMinorGroup()();
  uint64_t result = specialized StackPlacement.shouldStop()(0x8000000188328D40);
  if ((result & 1) == 0 || *(double *)(v2 + 64) < *(double *)(v2 + 120) && (*(unsigned char *)(v2 + 80) & 2) != 0)
  {
    uint64_t v24 = 0;
    long long v17 = a1[1];
    long long v20 = *a1;
    long long v21 = v17;
    long long v22 = a1[2];
    int v23 = *((_DWORD *)a1 + 12);
    uint64_t v18 = _LazyLayout_Section.footer.getter((uint64_t)v25);
    MEMORY[0x1F4188790](v18);
    uint64_t v19 = outlined init with copy of _ViewList_Node((uint64_t)v26, (uint64_t)&v20);
    MEMORY[0x1F4188790](v19);
    swift_bridgeObjectRetain();
    _ViewList_Node.applyNodes(from:style:transform:to:)();
    outlined destroy of _ViewList_Node((uint64_t)&v20);
    swift_bridgeObjectRelease();
    return outlined destroy of _LazyLayout_Subviews((uint64_t)v25);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  long long v6;
  uint64_t v7;
  uint64_t v8;
  long long v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  long long v21;
  long long v22;
  int v23;
  uint64_t v24;
  unsigned char v25[16];
  unsigned char v26[88];
  uint64_t v27;
  uint64_t v28;

  outlined destroy of AccessibilityScrollableContext?(v2 + 152, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 231) = 0u;
  specialized StackPlacement.flushMinorGroup()();
  uint64_t result = specialized StackPlacement.shouldStop()(0x8000000188328CA0);
  if (result) {
    return result;
  }
  uint64_t v28 = 0;
  long long v6 = a1[1];
  long long v20 = *a1;
  long long v21 = v6;
  long long v22 = a1[2];
  int v23 = *((_DWORD *)a1 + 12);
  uint64_t v7 = _LazyLayout_Section.header.getter((uint64_t)v25);
  MEMORY[0x1F4188790](v7);
  uint64_t v24 = v27;
  uint64_t v8 = outlined init with copy of _ViewList_Node((uint64_t)v26, (uint64_t)&v20);
  MEMORY[0x1F4188790](v8);
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)&v20);
  swift_bridgeObjectRelease();
  outlined destroy of _LazyLayout_Subviews((uint64_t)v25);
  uint64_t result = specialized StackPlacement.shouldStop()(0x8000000188328CA0);
  if (result) {
    return result;
  }
  long long v9 = a1[1];
  long long v20 = *a1;
  long long v21 = v9;
  long long v22 = a1[2];
  int v23 = *((_DWORD *)a1 + 12);
  uint64_t v10 = _LazyLayout_Section.content.getter((uint64_t)v25);
  MEMORY[0x1F4188790](v10);
  uint64_t v24 = v27;
  uint64_t v11 = outlined init with copy of _ViewList_Node((uint64_t)v26, (uint64_t)&v20);
  MEMORY[0x1F4188790](v11);
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)&v20);
  swift_bridgeObjectRelease();
  uint64_t result = outlined destroy of _LazyLayout_Subviews((uint64_t)v25);
  uint64_t v12 = *a2;
  if (*a2)
  {
    uint64_t v13 = *(void *)(v2 + 32) & 0x7FFFFFFFFFFFFFFFLL;
    if (v13 != 1)
    {
      if (v13)
      {
        uint64_t v14 = v12 % v13;
        BOOL v15 = __OFSUB__(v12, v14);
        uint64_t v16 = v12 - v14;
        if (!v15)
        {
          *a2 = v16;
          goto LABEL_8;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      return result;
    }
  }
LABEL_8:
  specialized StackPlacement.flushMinorGroup()();
  uint64_t result = specialized StackPlacement.shouldStop()(0x8000000188328CA0);
  if ((result & 1) == 0 || *(double *)(v2 + 56) < *(double *)(v2 + 112) && (*(unsigned char *)(v2 + 72) & 2) != 0)
  {
    uint64_t v24 = 0;
    long long v17 = a1[1];
    long long v20 = *a1;
    long long v21 = v17;
    long long v22 = a1[2];
    int v23 = *((_DWORD *)a1 + 12);
    uint64_t v18 = _LazyLayout_Section.footer.getter((uint64_t)v25);
    MEMORY[0x1F4188790](v18);
    uint64_t v19 = outlined init with copy of _ViewList_Node((uint64_t)v26, (uint64_t)&v20);
    MEMORY[0x1F4188790](v19);
    swift_bridgeObjectRetain();
    _ViewList_Node.applyNodes(from:style:transform:to:)();
    outlined destroy of _ViewList_Node((uint64_t)&v20);
    swift_bridgeObjectRelease();
    return outlined destroy of _LazyLayout_Subviews((uint64_t)v25);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  long long v6;
  uint64_t v7;
  uint64_t v8;
  long long v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  long long v21;
  long long v22;
  int v23;
  uint64_t v24;
  unsigned char v25[16];
  unsigned char v26[88];
  uint64_t v27;
  uint64_t v28;

  outlined destroy of AccessibilityScrollableContext?(v2 + 152, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 231) = 0u;
  specialized StackPlacement.flushMinorGroup()();
  uint64_t result = specialized StackPlacement.shouldStop()(0x8000000188328BD0);
  if (result) {
    return result;
  }
  uint64_t v28 = 0;
  long long v6 = a1[1];
  long long v20 = *a1;
  long long v21 = v6;
  long long v22 = a1[2];
  int v23 = *((_DWORD *)a1 + 12);
  uint64_t v7 = _LazyLayout_Section.header.getter((uint64_t)v25);
  MEMORY[0x1F4188790](v7);
  uint64_t v24 = v27;
  uint64_t v8 = outlined init with copy of _ViewList_Node((uint64_t)v26, (uint64_t)&v20);
  MEMORY[0x1F4188790](v8);
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)&v20);
  swift_bridgeObjectRelease();
  outlined destroy of _LazyLayout_Subviews((uint64_t)v25);
  uint64_t result = specialized StackPlacement.shouldStop()(0x8000000188328BD0);
  if (result) {
    return result;
  }
  long long v9 = a1[1];
  long long v20 = *a1;
  long long v21 = v9;
  long long v22 = a1[2];
  int v23 = *((_DWORD *)a1 + 12);
  uint64_t v10 = _LazyLayout_Section.content.getter((uint64_t)v25);
  MEMORY[0x1F4188790](v10);
  uint64_t v24 = v27;
  uint64_t v11 = outlined init with copy of _ViewList_Node((uint64_t)v26, (uint64_t)&v20);
  MEMORY[0x1F4188790](v11);
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)&v20);
  swift_bridgeObjectRelease();
  uint64_t result = outlined destroy of _LazyLayout_Subviews((uint64_t)v25);
  uint64_t v12 = *a2;
  if (*a2)
  {
    uint64_t v13 = *(void *)(v2 + 32) & 0x7FFFFFFFFFFFFFFFLL;
    if (v13 != 1)
    {
      if (v13)
      {
        uint64_t v14 = v12 % v13;
        BOOL v15 = __OFSUB__(v12, v14);
        uint64_t v16 = v12 - v14;
        if (!v15)
        {
          *a2 = v16;
          goto LABEL_8;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      return result;
    }
  }
LABEL_8:
  specialized StackPlacement.flushMinorGroup()();
  uint64_t result = specialized StackPlacement.shouldStop()(0x8000000188328BD0);
  if ((result & 1) == 0 || *(double *)(v2 + 56) < *(double *)(v2 + 112) && (*(unsigned char *)(v2 + 72) & 2) != 0)
  {
    uint64_t v24 = 0;
    long long v17 = a1[1];
    long long v20 = *a1;
    long long v21 = v17;
    long long v22 = a1[2];
    int v23 = *((_DWORD *)a1 + 12);
    uint64_t v18 = _LazyLayout_Section.footer.getter((uint64_t)v25);
    MEMORY[0x1F4188790](v18);
    uint64_t v19 = outlined init with copy of _ViewList_Node((uint64_t)v26, (uint64_t)&v20);
    MEMORY[0x1F4188790](v19);
    swift_bridgeObjectRetain();
    _ViewList_Node.applyNodes(from:style:transform:to:)();
    outlined destroy of _ViewList_Node((uint64_t)&v20);
    swift_bridgeObjectRelease();
    return outlined destroy of _LazyLayout_Subviews((uint64_t)v25);
  }
  return result;
}

uint64_t specialized StackPlacement.placeHeaderOrFooter(start:subview:kind:)(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)result;
  if (*(void *)result)
  {
    uint64_t v8 = *(void *)(v3 + 40);
    BOOL v9 = __OFSUB__(v7, v8);
    uint64_t v10 = v7 - v8;
    if (!v9)
    {
      *(void *)uint64_t result = v10;
      if (a3 == 1)
      {
        uint64_t v11 = v3 + 160;
        uint64_t v12 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
        outlined init with copy of AccessibilityScrollableContext?(v11, (uint64_t)&v38, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
        uint64_t v13 = v38;
        uint64_t result = outlined destroy of AccessibilityScrollableContext?((uint64_t)&v38, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, v12);
        if (!v13)
        {
          outlined destroy of AccessibilityScrollableContext?(v11, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
          return outlined init with copy of _LazyLayout_Subview(a2, v11);
        }
      }
      return result;
    }
    __break(1u);
    goto LABEL_50;
  }
  if ((*(unsigned char *)(v3 + 112) & 1) == 0)
  {
    uint64_t result = ProposedViewSize.init(_:in:by:)();
    uint64_t v14 = *(void *)(v3 + 152);
    if (v14)
    {
      if (!*(void *)(v14 + 16))
      {
LABEL_52:
        __break(1u);
        return result;
      }
      outlined init with copy of _LazyLayout_Subview(v14 + 32, (uint64_t)&v38);
    }
    else
    {
      long long v41 = 0u;
      memset(v42, 0, 31);
      long long v39 = 0u;
      long long v40 = 0u;
      long long v38 = 0u;
    }
    double v15 = _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)();
    double v17 = v16;
    outlined destroy of AccessibilityScrollableContext?((uint64_t)&v38, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
    if (*(void *)(v3 + 152)) {
      uint64_t v18 = *(void *)&v17;
    }
    else {
      uint64_t v18 = 0;
    }
    EstimationCache.add(length:spacing:count:)(v18, *(void *)(v3 + 152) == 0, 1, v15);
    *(double *)(v3 + 120) = v17 + *(double *)(v3 + 120);
    uint64_t result = specialized StackPlacement.isVisible(length:)(v15);
    if (result)
    {
      specialized StackPlacement.addVisibleSubview(length:spacing:)(v15, v17);
    }
    else
    {
      if ((*(unsigned char *)(v3 + 80) & 2) == 0 || a3 != 2)
      {
        if (a3 == 1)
        {
          long long v25 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
          outlined init with copy of AccessibilityScrollableContext?(v3 + 160, (uint64_t)&v38, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
          uint64_t v26 = v38;
          uint64_t result = outlined destroy of AccessibilityScrollableContext?((uint64_t)&v38, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, v25);
          if (!v26)
          {
            outlined destroy of AccessibilityScrollableContext?(v3 + 160, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
            uint64_t result = outlined init with copy of _LazyLayout_Subview(a2, v3 + 160);
          }
        }
        goto LABEL_36;
      }
      if (*(void *)(v3 + 264) >= *(void *)(v3 + 272))
      {
LABEL_36:
        *(double *)(v3 + 120) = v15 + *(double *)(v3 + 120);
        goto LABEL_37;
      }
    }
    specialized StackPlacement.flushPendingHeader()((void (*)(uint64_t))lazy protocol witness table accessor for type VerticalAlignment and conformance VerticalAlignment, MEMORY[0x1E4F401B8], 1, (void (*)(_OWORD *, uint64_t, uint64_t, uint64_t, void, double, double, double, double))specialized StackPlacement.emit(_:at:size:anchor:));
    if (*(unsigned char *)(v3 + 32)) {
      double v19 = 0.0;
    }
    else {
      double v19 = *(double *)(v3 + 120);
    }
    if (*(unsigned char *)(v3 + 32)) {
      double v20 = *(double *)(v3 + 120);
    }
    else {
      double v20 = 0.0;
    }
    _ProposedSize.init(_:in:by:)();
    uint64_t v21 = v38;
    char v22 = BYTE8(v38);
    uint64_t v23 = v39;
    char v24 = BYTE8(v39);
    if (a3 == 1 || a3 == 2)
    {
      *(void *)&long long v38 = *(void *)(v3 + 8);
      lazy protocol witness table accessor for type VerticalAlignment and conformance VerticalAlignment();
      AlignmentGuide.fraction.getter();
      UnitPoint.init(_:in:by:)();
    }
    else
    {
      static UnitPoint.center.getter();
    }
    LOBYTE(v38) = v22;
    uint64_t result = specialized StackPlacement.emit(_:at:size:anchor:)(a2, v21, v22, v23, v24, v19, v20);
    goto LABEL_36;
  }
  *(unsigned char *)(v3 + 112) = 0;
  if (a3 == 1)
  {
    outlined destroy of AccessibilityScrollableContext?(v3 + 160, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
    uint64_t result = outlined init with copy of _LazyLayout_Subview(a2, v3 + 160);
  }
LABEL_37:
  uint64_t v27 = *(void *)(v3 + 40);
  uint64_t v28 = *(void *)(v3 + 104);
  BOOL v9 = __OFADD__(v28, v27);
  uint64_t v29 = v28 + v27;
  if (v9)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  *(void *)(v3 + 104) = v29;
  if (v27 < 0)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (v27)
  {
    uint64_t v30 = *(char **)(v3 + 144);
    do
    {
      outlined init with copy of _LazyLayout_Subview(a2, (uint64_t)&v38);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v30 + 2) + 1, 1, v30);
      }
      unint64_t v32 = *((void *)v30 + 2);
      unint64_t v31 = *((void *)v30 + 3);
      if (v32 >= v31 >> 1) {
        uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v32 + 1, 1, v30);
      }
      *((void *)v30 + 2) = v32 + 1;
      double v33 = &v30[96 * v32];
      long long v34 = v39;
      *((_OWORD *)v33 + 2) = v38;
      *((_OWORD *)v33 + 3) = v34;
      long long v35 = v40;
      long long v36 = v41;
      long long v37 = v42[0];
      *(_OWORD *)(v33 + 111) = *(_OWORD *)((char *)v42 + 15);
      *((_OWORD *)v33 + 5) = v36;
      *((_OWORD *)v33 + 6) = v37;
      *((_OWORD *)v33 + 4) = v35;
      --v27;
    }
    while (v27);
    *(void *)(v4 + 144) = v30;
  }
  return swapSubviews(_:_:)((uint64_t *)(v4 + 152), (uint64_t *)(v4 + 144));
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void, uint64_t);
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t (*v25)(void, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  long long v41;
  _OWORD v42[2];

  uint64_t v4 = v3;
  uint64_t v7 = *(void *)result;
  if (*(void *)result)
  {
    uint64_t v8 = *(void *)(v3 + 40);
    BOOL v9 = __OFSUB__(v7, v8);
    uint64_t v10 = v7 - v8;
    if (!v9)
    {
      *(void *)uint64_t result = v10;
      if (a3 == 1)
      {
        uint64_t v11 = v3 + 160;
        uint64_t v12 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
        outlined init with copy of AccessibilityScrollableContext?(v11, (uint64_t)&v38, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
        uint64_t v13 = v38;
        uint64_t result = outlined destroy of AccessibilityScrollableContext?((uint64_t)&v38, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, v12);
        if (!v13)
        {
          outlined destroy of AccessibilityScrollableContext?(v11, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
          return outlined init with copy of _LazyLayout_Subview(a2, v11);
        }
      }
      return result;
    }
    __break(1u);
    goto LABEL_50;
  }
  if ((*(unsigned char *)(v3 + 112) & 1) == 0)
  {
    uint64_t result = ProposedViewSize.init(_:in:by:)();
    uint64_t v14 = *(void *)(v3 + 152);
    if (v14)
    {
      if (!*(void *)(v14 + 16))
      {
LABEL_52:
        __break(1u);
        return result;
      }
      outlined init with copy of _LazyLayout_Subview(v14 + 32, (uint64_t)&v38);
    }
    else
    {
      long long v41 = 0u;
      memset(v42, 0, 31);
      long long v39 = 0u;
      long long v40 = 0u;
      long long v38 = 0u;
    }
    double v15 = _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)();
    double v17 = v16;
    outlined destroy of AccessibilityScrollableContext?((uint64_t)&v38, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
    if (*(void *)(v3 + 152)) {
      uint64_t v18 = *(void *)&v17;
    }
    else {
      uint64_t v18 = 0;
    }
    EstimationCache.add(length:spacing:count:)(v18, *(void *)(v3 + 152) == 0, 1, v15);
    *(double *)(v3 + 120) = v17 + *(double *)(v3 + 120);
    uint64_t result = specialized StackPlacement.isVisible(length:)(v15);
    if (result)
    {
      specialized StackPlacement.addVisibleSubview(length:spacing:)(v15, v17);
    }
    else
    {
      if ((*(unsigned char *)(v3 + 80) & 2) == 0 || a3 != 2)
      {
        if (a3 == 1)
        {
          long long v25 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
          outlined init with copy of AccessibilityScrollableContext?(v3 + 160, (uint64_t)&v38, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
          uint64_t v26 = v38;
          uint64_t result = outlined destroy of AccessibilityScrollableContext?((uint64_t)&v38, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, v25);
          if (!v26)
          {
            outlined destroy of AccessibilityScrollableContext?(v3 + 160, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
            uint64_t result = outlined init with copy of _LazyLayout_Subview(a2, v3 + 160);
          }
        }
        goto LABEL_36;
      }
      if (*(void *)(v3 + 264) >= *(void *)(v3 + 272))
      {
LABEL_36:
        *(double *)(v3 + 120) = v15 + *(double *)(v3 + 120);
        goto LABEL_37;
      }
    }
    specialized StackPlacement.flushPendingHeader()((void (*)(uint64_t))lazy protocol witness table accessor for type HorizontalAlignment and conformance HorizontalAlignment, MEMORY[0x1E4F40430], 0, (void (*)(_OWORD *, uint64_t, uint64_t, uint64_t, void, double, double, double, double))specialized StackPlacement.emit(_:at:size:anchor:));
    if (*(unsigned char *)(v3 + 32)) {
      double v19 = 0.0;
    }
    else {
      double v19 = *(double *)(v3 + 120);
    }
    if (*(unsigned char *)(v3 + 32)) {
      double v20 = *(double *)(v3 + 120);
    }
    else {
      double v20 = 0.0;
    }
    _ProposedSize.init(_:in:by:)();
    uint64_t v21 = v38;
    char v22 = BYTE8(v38);
    uint64_t v23 = v39;
    char v24 = BYTE8(v39);
    if (a3 == 1 || a3 == 2)
    {
      *(void *)&long long v38 = *(void *)(v3 + 8);
      lazy protocol witness table accessor for type HorizontalAlignment and conformance HorizontalAlignment();
      AlignmentGuide.fraction.getter();
      UnitPoint.init(_:in:by:)();
    }
    else
    {
      static UnitPoint.center.getter();
    }
    LOBYTE(v38) = v22;
    uint64_t result = specialized StackPlacement.emit(_:at:size:anchor:)(a2, v21, v22, v23, v24, v19, v20);
    goto LABEL_36;
  }
  *(unsigned char *)(v3 + 112) = 0;
  if (a3 == 1)
  {
    outlined destroy of AccessibilityScrollableContext?(v3 + 160, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
    uint64_t result = outlined init with copy of _LazyLayout_Subview(a2, v3 + 160);
  }
LABEL_37:
  uint64_t v27 = *(void *)(v3 + 40);
  uint64_t v28 = *(void *)(v3 + 104);
  BOOL v9 = __OFADD__(v28, v27);
  uint64_t v29 = v28 + v27;
  if (v9)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  *(void *)(v3 + 104) = v29;
  if (v27 < 0)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (v27)
  {
    uint64_t v30 = *(char **)(v3 + 144);
    do
    {
      outlined init with copy of _LazyLayout_Subview(a2, (uint64_t)&v38);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v30 + 2) + 1, 1, v30);
      }
      unint64_t v32 = *((void *)v30 + 2);
      unint64_t v31 = *((void *)v30 + 3);
      if (v32 >= v31 >> 1) {
        uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v32 + 1, 1, v30);
      }
      *((void *)v30 + 2) = v32 + 1;
      double v33 = &v30[96 * v32];
      long long v34 = v39;
      *((_OWORD *)v33 + 2) = v38;
      *((_OWORD *)v33 + 3) = v34;
      long long v35 = v40;
      long long v36 = v41;
      long long v37 = v42[0];
      *(_OWORD *)(v33 + 111) = *(_OWORD *)((char *)v42 + 15);
      *((_OWORD *)v33 + 5) = v36;
      *((_OWORD *)v33 + 6) = v37;
      *((_OWORD *)v33 + 4) = v35;
      --v27;
    }
    while (v27);
    *(void *)(v4 + 144) = v30;
  }
  return swapSubviews(_:_:)((uint64_t *)(v4 + 152), (uint64_t *)(v4 + 144));
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void, uint64_t);
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t (*v25)(void, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  long long v41;
  _OWORD v42[2];

  uint64_t v4 = v3;
  uint64_t v7 = *(void *)result;
  if (*(void *)result)
  {
    uint64_t v8 = *(void *)(v3 + 32);
    BOOL v9 = __OFSUB__(v7, v8);
    uint64_t v10 = v7 - v8;
    if (!v9)
    {
      *(void *)uint64_t result = v10;
      if (a3 == 1)
      {
        uint64_t v11 = v3 + 152;
        uint64_t v12 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
        outlined init with copy of AccessibilityScrollableContext?(v11, (uint64_t)&v38, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
        uint64_t v13 = v38;
        uint64_t result = outlined destroy of AccessibilityScrollableContext?((uint64_t)&v38, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, v12);
        if (!v13)
        {
          outlined destroy of AccessibilityScrollableContext?(v11, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
          return outlined init with copy of _LazyLayout_Subview(a2, v11);
        }
      }
      return result;
    }
    __break(1u);
    goto LABEL_50;
  }
  if ((*(unsigned char *)(v3 + 104) & 1) == 0)
  {
    uint64_t result = ProposedViewSize.init(_:in:by:)();
    uint64_t v14 = *(void *)(v3 + 144);
    if (v14)
    {
      if (!*(void *)(v14 + 16))
      {
LABEL_52:
        __break(1u);
        return result;
      }
      outlined init with copy of _LazyLayout_Subview(v14 + 32, (uint64_t)&v38);
    }
    else
    {
      long long v41 = 0u;
      memset(v42, 0, 31);
      long long v39 = 0u;
      long long v40 = 0u;
      long long v38 = 0u;
    }
    double v15 = _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)();
    double v17 = v16;
    outlined destroy of AccessibilityScrollableContext?((uint64_t)&v38, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
    if (*(void *)(v3 + 144)) {
      uint64_t v18 = *(void *)&v17;
    }
    else {
      uint64_t v18 = 0;
    }
    EstimationCache.add(length:spacing:count:)(v18, *(void *)(v3 + 144) == 0, 1, v15);
    *(double *)(v3 + 112) = v17 + *(double *)(v3 + 112);
    uint64_t result = specialized StackPlacement.isVisible(length:)(v15);
    if (result)
    {
      specialized StackPlacement.addVisibleSubview(length:spacing:)(v15, v17);
    }
    else
    {
      if ((*(unsigned char *)(v3 + 72) & 2) == 0 || a3 != 2)
      {
        if (a3 == 1)
        {
          long long v25 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
          outlined init with copy of AccessibilityScrollableContext?(v3 + 152, (uint64_t)&v38, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
          uint64_t v26 = v38;
          uint64_t result = outlined destroy of AccessibilityScrollableContext?((uint64_t)&v38, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, v25);
          if (!v26)
          {
            outlined destroy of AccessibilityScrollableContext?(v3 + 152, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
            uint64_t result = outlined init with copy of _LazyLayout_Subview(a2, v3 + 152);
          }
        }
        goto LABEL_36;
      }
      if (*(void *)(v3 + 256) >= *(void *)(v3 + 264))
      {
LABEL_36:
        *(double *)(v3 + 112) = v15 + *(double *)(v3 + 112);
        goto LABEL_37;
      }
    }
    specialized StackPlacement.flushPendingHeader()((void (*)(uint64_t))lazy protocol witness table accessor for type VerticalAlignment and conformance VerticalAlignment, MEMORY[0x1E4F401B8], 1, (void (*)(_OWORD *, uint64_t, uint64_t, uint64_t, void, double, double, double, double))specialized StackPlacement.emit(_:at:size:anchor:));
    if (*(unsigned char *)(v3 + 24)) {
      double v19 = 0.0;
    }
    else {
      double v19 = *(double *)(v3 + 112);
    }
    if (*(unsigned char *)(v3 + 24)) {
      double v20 = *(double *)(v3 + 112);
    }
    else {
      double v20 = 0.0;
    }
    _ProposedSize.init(_:in:by:)();
    uint64_t v21 = v38;
    char v22 = BYTE8(v38);
    uint64_t v23 = v39;
    char v24 = BYTE8(v39);
    if (a3 == 1 || a3 == 2)
    {
      *(void *)&long long v38 = *(void *)v3;
      lazy protocol witness table accessor for type VerticalAlignment and conformance VerticalAlignment();
      AlignmentGuide.fraction.getter();
      UnitPoint.init(_:in:by:)();
    }
    else
    {
      static UnitPoint.center.getter();
    }
    LOBYTE(v38) = v22;
    uint64_t result = specialized StackPlacement.emit(_:at:size:anchor:)(a2, v21, v22, v23, v24, v19, v20);
    goto LABEL_36;
  }
  *(unsigned char *)(v3 + 104) = 0;
  if (a3 == 1)
  {
    outlined destroy of AccessibilityScrollableContext?(v3 + 152, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
    uint64_t result = outlined init with copy of _LazyLayout_Subview(a2, v3 + 152);
  }
LABEL_37:
  uint64_t v27 = *(void *)(v3 + 32);
  uint64_t v28 = *(void *)(v3 + 96);
  BOOL v9 = __OFADD__(v28, v27);
  uint64_t v29 = v28 + v27;
  if (v9)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  *(void *)(v3 + 96) = v29;
  if (v27 < 0)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (v27)
  {
    uint64_t v30 = *(char **)(v3 + 136);
    do
    {
      outlined init with copy of _LazyLayout_Subview(a2, (uint64_t)&v38);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v30 + 2) + 1, 1, v30);
      }
      unint64_t v32 = *((void *)v30 + 2);
      unint64_t v31 = *((void *)v30 + 3);
      if (v32 >= v31 >> 1) {
        uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v32 + 1, 1, v30);
      }
      *((void *)v30 + 2) = v32 + 1;
      double v33 = &v30[96 * v32];
      long long v34 = v39;
      *((_OWORD *)v33 + 2) = v38;
      *((_OWORD *)v33 + 3) = v34;
      long long v35 = v40;
      long long v36 = v41;
      long long v37 = v42[0];
      *(_OWORD *)(v33 + 111) = *(_OWORD *)((char *)v42 + 15);
      *((_OWORD *)v33 + 5) = v36;
      *((_OWORD *)v33 + 6) = v37;
      *((_OWORD *)v33 + 4) = v35;
      --v27;
    }
    while (v27);
    *(void *)(v4 + 136) = v30;
  }
  return swapSubviews(_:_:)((uint64_t *)(v4 + 144), (uint64_t *)(v4 + 136));
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void, uint64_t);
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t (*v25)(void, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  long long v41;
  _OWORD v42[2];

  uint64_t v4 = v3;
  uint64_t v7 = *(void *)result;
  if (*(void *)result)
  {
    uint64_t v8 = *(void *)(v3 + 32);
    BOOL v9 = __OFSUB__(v7, v8);
    uint64_t v10 = v7 - v8;
    if (!v9)
    {
      *(void *)uint64_t result = v10;
      if (a3 == 1)
      {
        uint64_t v11 = v3 + 152;
        uint64_t v12 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
        outlined init with copy of AccessibilityScrollableContext?(v11, (uint64_t)&v38, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
        uint64_t v13 = v38;
        uint64_t result = outlined destroy of AccessibilityScrollableContext?((uint64_t)&v38, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, v12);
        if (!v13)
        {
          outlined destroy of AccessibilityScrollableContext?(v11, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
          return outlined init with copy of _LazyLayout_Subview(a2, v11);
        }
      }
      return result;
    }
    __break(1u);
    goto LABEL_50;
  }
  if ((*(unsigned char *)(v3 + 104) & 1) == 0)
  {
    uint64_t result = ProposedViewSize.init(_:in:by:)();
    uint64_t v14 = *(void *)(v3 + 144);
    if (v14)
    {
      if (!*(void *)(v14 + 16))
      {
LABEL_52:
        __break(1u);
        return result;
      }
      outlined init with copy of _LazyLayout_Subview(v14 + 32, (uint64_t)&v38);
    }
    else
    {
      long long v41 = 0u;
      memset(v42, 0, 31);
      long long v39 = 0u;
      long long v40 = 0u;
      long long v38 = 0u;
    }
    double v15 = _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)();
    double v17 = v16;
    outlined destroy of AccessibilityScrollableContext?((uint64_t)&v38, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
    if (*(void *)(v3 + 144)) {
      uint64_t v18 = *(void *)&v17;
    }
    else {
      uint64_t v18 = 0;
    }
    EstimationCache.add(length:spacing:count:)(v18, *(void *)(v3 + 144) == 0, 1, v15);
    *(double *)(v3 + 112) = v17 + *(double *)(v3 + 112);
    uint64_t result = specialized StackPlacement.isVisible(length:)(v15);
    if (result)
    {
      specialized StackPlacement.addVisibleSubview(length:spacing:)(v15, v17);
    }
    else
    {
      if ((*(unsigned char *)(v3 + 72) & 2) == 0 || a3 != 2)
      {
        if (a3 == 1)
        {
          long long v25 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
          outlined init with copy of AccessibilityScrollableContext?(v3 + 152, (uint64_t)&v38, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
          uint64_t v26 = v38;
          uint64_t result = outlined destroy of AccessibilityScrollableContext?((uint64_t)&v38, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, v25);
          if (!v26)
          {
            outlined destroy of AccessibilityScrollableContext?(v3 + 152, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
            uint64_t result = outlined init with copy of _LazyLayout_Subview(a2, v3 + 152);
          }
        }
        goto LABEL_36;
      }
      if (*(void *)(v3 + 256) >= *(void *)(v3 + 264))
      {
LABEL_36:
        *(double *)(v3 + 112) = v15 + *(double *)(v3 + 112);
        goto LABEL_37;
      }
    }
    specialized StackPlacement.flushPendingHeader()((void (*)(uint64_t))lazy protocol witness table accessor for type HorizontalAlignment and conformance HorizontalAlignment, MEMORY[0x1E4F40430], 0, (void (*)(_OWORD *, uint64_t, uint64_t, uint64_t, void, double, double, double, double))specialized StackPlacement.emit(_:at:size:anchor:));
    if (*(unsigned char *)(v3 + 24)) {
      double v19 = 0.0;
    }
    else {
      double v19 = *(double *)(v3 + 112);
    }
    if (*(unsigned char *)(v3 + 24)) {
      double v20 = *(double *)(v3 + 112);
    }
    else {
      double v20 = 0.0;
    }
    _ProposedSize.init(_:in:by:)();
    uint64_t v21 = v38;
    char v22 = BYTE8(v38);
    uint64_t v23 = v39;
    char v24 = BYTE8(v39);
    if (a3 == 1 || a3 == 2)
    {
      *(void *)&long long v38 = *(void *)v3;
      lazy protocol witness table accessor for type HorizontalAlignment and conformance HorizontalAlignment();
      AlignmentGuide.fraction.getter();
      UnitPoint.init(_:in:by:)();
    }
    else
    {
      static UnitPoint.center.getter();
    }
    LOBYTE(v38) = v22;
    uint64_t result = specialized StackPlacement.emit(_:at:size:anchor:)(a2, v21, v22, v23, v24, v19, v20);
    goto LABEL_36;
  }
  *(unsigned char *)(v3 + 104) = 0;
  if (a3 == 1)
  {
    outlined destroy of AccessibilityScrollableContext?(v3 + 152, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
    uint64_t result = outlined init with copy of _LazyLayout_Subview(a2, v3 + 152);
  }
LABEL_37:
  uint64_t v27 = *(void *)(v3 + 32);
  uint64_t v28 = *(void *)(v3 + 96);
  BOOL v9 = __OFADD__(v28, v27);
  uint64_t v29 = v28 + v27;
  if (v9)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  *(void *)(v3 + 96) = v29;
  if (v27 < 0)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (v27)
  {
    uint64_t v30 = *(char **)(v3 + 136);
    do
    {
      outlined init with copy of _LazyLayout_Subview(a2, (uint64_t)&v38);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v30 + 2) + 1, 1, v30);
      }
      unint64_t v32 = *((void *)v30 + 2);
      unint64_t v31 = *((void *)v30 + 3);
      if (v32 >= v31 >> 1) {
        uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v32 + 1, 1, v30);
      }
      *((void *)v30 + 2) = v32 + 1;
      double v33 = &v30[96 * v32];
      long long v34 = v39;
      *((_OWORD *)v33 + 2) = v38;
      *((_OWORD *)v33 + 3) = v34;
      long long v35 = v40;
      long long v36 = v41;
      long long v37 = v42[0];
      *(_OWORD *)(v33 + 111) = *(_OWORD *)((char *)v42 + 15);
      *((_OWORD *)v33 + 5) = v36;
      *((_OWORD *)v33 + 6) = v37;
      *((_OWORD *)v33 + 4) = v35;
      --v27;
    }
    while (v27);
    *(void *)(v4 + 136) = v30;
  }
  return swapSubviews(_:_:)((uint64_t *)(v4 + 144), (uint64_t *)(v4 + 136));
}

uint64_t specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(subviews:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(uint64_t result, uint64_t *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, double (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))
{
  char v12 = result;
  uint64_t v13 = a2 + 18;
  uint64_t v14 = a2[18];
  uint64_t v15 = *(void *)(v14 + 16);
  if ((result & 1) != 0 || v15)
  {
    double v16 = a2 + 19;
    uint64_t v17 = a2[19];
    if (!v17)
    {
LABEL_33:
      __break(1u);
      return result;
    }
    if (v15)
    {
      swift_bridgeObjectRetain();
      if (*(void *)(v17 + 16))
      {
LABEL_6:
        uint64_t v37 = a3;
        uint64_t v34 = a6;
        outlined init with copy of _LazyLayout_Subview(v17 + 32, (uint64_t)v40);
        if ((v40[93] & 1) == 0 && v40[94] != 1)
        {
          swift_bridgeObjectRetain();
          outlined destroy of _LazyLayout_Subview((uint64_t)v40);
          uint64_t v22 = *a2;
          uint64_t v32 = a2[2];
          uint64_t v33 = a2[1];
          unsigned __int8 v23 = *((unsigned char *)a2 + 24);
          uint64_t v24 = a2[7];
          uint64_t v25 = *((unsigned int *)a2 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          LOBYTE(v38[0]) = v23;
          unint64_t v26 = v23 | (unint64_t)(v25 << 32);
          double v16 = a2 + 19;
          double v19 = a7(v17, v14, v24, v22, v33, v32, v26);
          double v21 = v27;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_16;
        }
        swift_bridgeObjectRetain();
        outlined destroy of _LazyLayout_Subview((uint64_t)v40);
        outlined init with copy of _LazyLayout_Subview(v17 + 32, (uint64_t)v40);
        swift_bridgeObjectRelease();
        uint64_t result = ProposedViewSize.init(_:in:by:)();
        char v7 = v18;
        if (v14)
        {
          if (!*(void *)(v14 + 16))
          {
LABEL_32:
            __break(1u);
            goto LABEL_33;
          }
          outlined init with copy of _LazyLayout_Subview(v14 + 32, (uint64_t)v38);
          swift_bridgeObjectRelease();
          goto LABEL_14;
        }
LABEL_13:
        memset(v38, 0, 95);
LABEL_14:
        char v39 = v7 & 1;
        double v19 = _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)();
        double v21 = v20;
        outlined destroy of AccessibilityScrollableContext?((uint64_t)v38, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
        outlined destroy of _LazyLayout_Subview((uint64_t)v40);
LABEL_16:
        uint64_t result = swift_beginAccess();
        if (*(unsigned char *)(v37 + 16) == 1) {
          *((double *)a2 + 15) = *((double *)a2 + 15) - v19;
        }
        uint64_t v28 = a2[13];
        if (v28)
        {
          uint64_t result = swift_beginAccess();
          if (*(unsigned char *)(v37 + 16)) {
            *((double *)a2 + 15) = *((double *)a2 + 15) - v21;
          }
        }
        if (v21 + *((double *)a2 + 15) <= *((double *)a2 + 8) && (v12 & 1) == 0 && (a4 & 1) == 0)
        {
          swift_beginAccess();
          *(unsigned char *)(a5 + 16) = 1;
          return swapSubviews(_:_:)(v16, v13);
        }
        uint64_t v29 = a2[5];
        BOOL v30 = __OFSUB__(v28, v29);
        uint64_t v31 = v28 - v29;
        if (!v30)
        {
          swift_beginAccess();
          if (*(unsigned char *)(v34 + 16) == 1 && (v31 & 0x8000000000000000) == 0) {
            a2[13] = v31;
          }
          return swapSubviews(_:_:)(v16, v13);
        }
        __break(1u);
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v14 = 0;
      if (*(void *)(v17 + 16)) {
        goto LABEL_6;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  return result;
}

uint64_t specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(subviews:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(uint64_t result, uint64_t *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, double (*a7)(uint64_t, uint64_t, void, uint64_t, unint64_t, double))
{
  char v12 = result;
  uint64_t v13 = a2 + 17;
  uint64_t v14 = a2[17];
  uint64_t v15 = *(void *)(v14 + 16);
  if ((result & 1) != 0 || v15)
  {
    double v16 = a2 + 18;
    uint64_t v17 = a2[18];
    if (!v17)
    {
LABEL_33:
      __break(1u);
      return result;
    }
    if (v15)
    {
      swift_bridgeObjectRetain();
      if (*(void *)(v17 + 16))
      {
LABEL_6:
        uint64_t v31 = a6;
        outlined init with copy of _LazyLayout_Subview(v17 + 32, (uint64_t)v37);
        if ((v37[93] & 1) == 0 && v37[94] != 1)
        {
          swift_bridgeObjectRetain();
          outlined destroy of _LazyLayout_Subview((uint64_t)v37);
          double v22 = *(double *)a2;
          uint64_t v23 = a2[1];
          double v24 = *((double *)a2 + 6);
          uint64_t v25 = *((unsigned int *)a2 + 5);
          LOBYTE(v35[0]) = *((unsigned char *)a2 + 16);
          double v19 = a7(v17, v14, *(void *)&v22, v23, LOBYTE(v35[0]) | (unint64_t)(v25 << 32), v24);
          double v21 = v26;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_16;
        }
        uint64_t v32 = a5;
        uint64_t v33 = a2 + 18;
        swift_bridgeObjectRetain();
        outlined destroy of _LazyLayout_Subview((uint64_t)v37);
        outlined init with copy of _LazyLayout_Subview(v17 + 32, (uint64_t)v37);
        swift_bridgeObjectRelease();
        uint64_t result = ProposedViewSize.init(_:in:by:)();
        LOBYTE(a5) = v18;
        if (v14)
        {
          if (!*(void *)(v14 + 16))
          {
LABEL_32:
            __break(1u);
            goto LABEL_33;
          }
          outlined init with copy of _LazyLayout_Subview(v14 + 32, (uint64_t)v35);
          swift_bridgeObjectRelease();
          goto LABEL_14;
        }
LABEL_13:
        memset(v35, 0, 95);
LABEL_14:
        char v36 = a5 & 1;
        double v19 = _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)();
        double v21 = v20;
        outlined destroy of AccessibilityScrollableContext?((uint64_t)v35, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
        outlined destroy of _LazyLayout_Subview((uint64_t)v37);
        a5 = v32;
        double v16 = v33;
LABEL_16:
        uint64_t result = swift_beginAccess();
        if (*(unsigned char *)(a3 + 16) == 1) {
          *((double *)a2 + 14) = *((double *)a2 + 14) - v19;
        }
        uint64_t v27 = a2[12];
        if (v27)
        {
          uint64_t result = swift_beginAccess();
          if (*(unsigned char *)(a3 + 16)) {
            *((double *)a2 + 14) = *((double *)a2 + 14) - v21;
          }
        }
        if (v21 + *((double *)a2 + 14) <= *((double *)a2 + 7) && (v12 & 1) == 0 && (a4 & 1) == 0)
        {
          swift_beginAccess();
          *(unsigned char *)(a5 + 16) = 1;
          return swapSubviews(_:_:)(v16, v13);
        }
        uint64_t v28 = a2[4];
        BOOL v29 = __OFSUB__(v27, v28);
        uint64_t v30 = v27 - v28;
        if (!v29)
        {
          swift_beginAccess();
          if (*(unsigned char *)(v31 + 16) == 1 && (v30 & 0x8000000000000000) == 0) {
            a2[12] = v30;
          }
          return swapSubviews(_:_:)(v16, v13);
        }
        __break(1u);
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v14 = 0;
      if (*(void *)(v17 + 16)) {
        goto LABEL_6;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  return result;
}

uint64_t specialized LazySubviewPlacements.updateValue()(void (*a1)(_OWORD *__return_ptr), uint64_t a2, uint64_t a3, uint64_t a4, double (*a5)(double *, long long *, void), void (*a6)(uint64_t, double, double), _DWORD *a7, int *a8, _DWORD *a9, _DWORD *a10)
{
  uint64_t v17 = v10;
  uint64_t v164 = *MEMORY[0x1E4F143B8];
  type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for [_LazyLayout_PlacedSubview], (uint64_t)&type metadata for _LazyLayout_PlacedSubview, MEMORY[0x1E4FBB320]);
  if (!AGGraphGetOutputValue()
    || (type metadata accessor for AGGraphRef(0),
        uint64_t result = static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()(),
        (result & 1) == 0))
  {
    uint64_t v109 = a3;
    uint64_t v110 = a4;
    long long v111 = a5;
    type metadata accessor for LazyLayoutViewCache();
    uint64_t Value = AGGraphGetValue();
    uint64_t v20 = *(void *)Value;
    int v21 = *(_DWORD *)(*(void *)Value + 40);
    uint64_t v22 = *(void *)(*(void *)Value + 48);
    int v23 = *(_DWORD *)(*(void *)Value + 112);
    *(void *)&__dst[0] = *(void *)(*(void *)Value + 32);
    DWORD2(__dst[0]) = v21;
    *(void *)&__dst[1] = v22;
    *(_OWORD *)((char *)&__dst[1] + 8) = *(_OWORD *)(v20 + 56);
    *(_OWORD *)((char *)&__dst[2] + 8) = *(_OWORD *)(v20 + 72);
    *(_OWORD *)((char *)&__dst[3] + 8) = *(_OWORD *)(v20 + 88);
    *((void *)&__dst[4] + 1) = *(void *)(v20 + 104);
    LODWORD(__dst[5]) = v23;
    _ViewInputs.viewPhase.getter();
    int v24 = *(_DWORD *)AGGraphGetValue() >> 1;
    int v25 = *(_DWORD *)(v10 + 144);
    if (v25 != v24)
    {
      double v26 = (_OWORD *)MEMORY[0x1E4F1DB20];
      *(_DWORD *)(v10 + 144) = v24;
      long long v27 = v26[1];
      *(_OWORD *)(v10 + 96) = *v26;
      *(_OWORD *)(v10 + 112) = v27;
      swift_bridgeObjectRelease();
      uint64_t v28 = MEMORY[0x1E4FBC860];
      *(void *)(v17 + 128) = MEMORY[0x1E4FBC860];
      swift_bridgeObjectRelease();
      *(void *)(v17 + 136) = v28;
      LOBYTE(__src[0]) = 1;
      long long v29 = *(_OWORD *)(v17 + 264);
      long long v30 = *(_OWORD *)(v17 + 280);
      __dst[6] = *(_OWORD *)(v17 + 248);
      __dst[7] = v29;
      __dst[8] = v30;
      *(_OWORD *)((char *)&__dst[8] + 9) = *(_OWORD *)(v17 + 289);
      long long v31 = *(_OWORD *)(v17 + 200);
      __dst[2] = *(_OWORD *)(v17 + 184);
      __dst[3] = v31;
      long long v32 = *(_OWORD *)(v17 + 232);
      __dst[4] = *(_OWORD *)(v17 + 216);
      __dst[5] = v32;
      long long v33 = *(_OWORD *)(v17 + 168);
      __dst[0] = *(_OWORD *)(v17 + 152);
      __dst[1] = v33;
      outlined release of PositionState((uint64_t)__dst);
      *(unsigned char *)(v17 + 152) = 0;
      *(_OWORD *)(v17 + 160) = 0u;
      *(_OWORD *)(v17 + 176) = 0u;
      *(_OWORD *)(v17 + 192) = 0u;
      *(_OWORD *)(v17 + 208) = 0u;
      *(_OWORD *)(v17 + 224) = 0u;
      *(_OWORD *)(v17 + 240) = 0u;
      *(_OWORD *)(v17 + 256) = 0u;
      *(_OWORD *)(v17 + 272) = 0u;
      *(_OWORD *)(v17 + 288) = 0u;
      *(unsigned char *)(v17 + 304) = __src[0];
    }
    unsigned int v34 = *(_DWORD *)(v17 + 12);
    uint64_t v35 = AGGraphGetValue();
    char v127 = v36;
    if (AGGraphGetCurrentAttribute() == *MEMORY[0x1E4F4E7A0])
    {
      __break(1u);
      goto LABEL_46;
    }
    int v114 = *MEMORY[0x1E4F4E7A0];
    unsigned int v115 = v34;
    uint64_t v112 = a7;
    long long v113 = a8;
    uint64_t v38 = *(void *)(v35 + 24);
    uint64_t v37 = *(void *)(v35 + 32);
    long long v124 = *(_OWORD *)(v35 + 8);
    uint64_t v39 = *(void *)v35;
    unsigned int v40 = *(_DWORD *)(v17 + 36);
    swift_retain();
    LOBYTE(__dst[0]) = 1;
    SizeAndSpacingContext.init(context:owner:environment:)();
    *(void *)&v131[0] = *(void *)&__dst[0];
    *((void *)&v131[0] + 1) = __PAIR64__(v40, DWORD2(__dst[0]));
    unsigned int v41 = *(_DWORD *)(v17 + 8);
    v160[0] = *(_OWORD *)AGGraphGetValue();
    char v42 = (long long *)AGGraphGetValue();
    long long v43 = v42[1];
    __src[0] = *v42;
    __src[1] = v43;
    *(void *)&__dst[0] = v39;
    *(_OWORD *)((char *)__dst + 8) = v124;
    *((void *)&__dst[1] + 1) = v38;
    *(void *)&__dst[2] = v37;
    AGGraphGetValue();
    LOBYTE(v130.origin.x) = *(unsigned char *)AGGraphGetValue();
    LODWORD(v132) = 0;
    AGGraphGetValue();
    char v44 = *(unsigned char *)AGGraphGetValue();
    swift_retain();
    _LazyLayout_PlacementContext.init(base:position:size:transform:layoutDirection:pinnedViews:isAccessibilityEnabled:)((uint64_t *)v131, __src, (uint64_t)__dst, (char *)&v130, (int *)&v132, v44, (uint64_t)v139);
    v131[10] = v152;
    v131[11] = v153;
    v131[12] = v154;
    v131[13] = v155;
    v131[6] = v148;
    v131[7] = v149;
    v131[8] = v150;
    v131[9] = v151;
    v131[2] = v144;
    v131[3] = v145;
    v131[4] = v146;
    v131[5] = v147;
    v131[0] = v142;
    v131[1] = v143;
    unint64_t v116 = v157;
    unint64_t v117 = v156;
    char v45 = v158;
    __dst[4] = v153;
    __dst[5] = v154;
    __dst[6] = v155;
    __dst[0] = v149;
    __dst[1] = v150;
    __dst[3] = v152;
    __dst[2] = v151;
    ScrollGeometry.visibleRect.getter();
    CGFloat v47 = v46;
    CGFloat v49 = v48;
    CGFloat v51 = v50;
    CGFloat v53 = v52;
    v130.origin.CGFloat x = v46;
    v130.origin.CGFloat y = v48;
    v130.size.double width = v50;
    v130.size.double height = v52;
    __dst[4] = v146;
    __dst[5] = v147;
    __dst[6] = v148;
    __dst[0] = v142;
    __dst[1] = v143;
    __dst[3] = v145;
    __dst[2] = v144;
    if (v45) {
      ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v116, v117));
    }
    ScrollGeometry.visibleRect.getter();
    CGFloat v122 = v55;
    CGFloat v125 = v54;
    CGFloat v120 = v57;
    CGFloat v121 = v56;
    __dst[4] = v146;
    __dst[5] = v147;
    __dst[6] = v148;
    __dst[0] = v142;
    __dst[1] = v143;
    __dst[3] = v145;
    __dst[2] = v144;
    ScrollGeometry.visibleRect.getter();
    uint64_t v59 = v58;
    uint64_t v61 = v60;
    uint64_t v63 = v62;
    uint64_t v65 = v64;
    Outputuint64_t Value = AGGraphGetOutputValue();
    if (v25 != v24 || !OutputValue)
    {
      *(CGFloat *)(v17 + 160) = v47;
      *(CGFloat *)(v17 + 168) = v49;
      *(CGFloat *)(v17 + 176) = v51;
      *(CGFloat *)(v17 + 184) = v53;
      *(void *)(v17 + 192) = v59;
      *(void *)(v17 + 200) = v61;
      *(void *)(v17 + 208) = v63;
      *(void *)(v17 + 216) = v65;
    }
    *(unsigned char *)(*(void *)AGGraphGetValue() + 216) = 0;
    if (v127)
    {
      *(void *)(v17 + 312) = 0;
      *(void *)(v17 + 320) = 0;
      *(unsigned char *)(v17 + 328) = 1;
    }
    v178.origin.CGFloat x = 0.0;
    v178.origin.CGFloat y = 0.0;
    v178.size.double width = 0.0;
    v178.size.double height = 0.0;
    v165.origin.CGFloat y = v122;
    v165.origin.CGFloat x = v125;
    v165.size.double height = v120;
    v165.size.double width = v121;
    BOOL v67 = CGRectEqualToRect(v165, v178);
    CGFloat v68 = *(double *)(v17 + 96);
    CGFloat v69 = *(double *)(v17 + 104);
    CGFloat v70 = *(double *)(v17 + 112);
    CGFloat v71 = *(double *)(v17 + 120);
    v166.origin.CGFloat x = v68;
    v166.origin.CGFloat y = v69;
    v166.size.double width = v70;
    v166.size.double height = v71;
    if (!CGRectIsNull(v166))
    {
      *(void *)&__src[0] = __PAIR64__(v115, v41);
      if ((AGGraphAnyInputsChanged() & 1) == 0)
      {
        __dst[4] = v146;
        __dst[5] = v147;
        __dst[6] = v148;
        __dst[0] = v142;
        __dst[1] = v143;
        __dst[3] = v145;
        __dst[2] = v144;
        if (v45) {
          ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v116, v117));
        }
        ScrollGeometry.visibleRect.getter();
        v179.size.double width = v140;
        v179.size.double height = r2;
        v179.origin.CGFloat x = 0.0;
        v179.origin.CGFloat y = 0.0;
        CGRect v168 = CGRectIntersection(v167, v179);
        CGFloat x = v168.origin.x;
        CGFloat y = v168.origin.y;
        double width = v168.size.width;
        double height = v168.size.height;
        if (CGRectIsEmpty(v168))
        {
          if (!v67)
          {
            char v76 = 1;
            goto LABEL_37;
          }
          goto LABEL_34;
        }
        v169.origin.CGFloat x = v68;
        v169.origin.CGFloat y = v69;
        v169.size.double width = v70;
        v169.size.double height = v71;
        v180.origin.CGFloat x = x;
        v180.origin.CGFloat y = y;
        v180.size.double width = width;
        v180.size.double height = height;
        if (CGRectContainsRect(v169, v180))
        {
          v170.origin.CGFloat x = x;
          v170.origin.CGFloat y = y;
          v170.size.double width = width;
          v170.size.double height = height;
          double MinX = CGRectGetMinX(v170);
          v171.origin.CGFloat x = v68;
          v171.origin.CGFloat y = v69;
          v171.size.double width = v70;
          v171.size.double height = v71;
          if (MinX - CGRectGetMinX(v171) < width / 3.0)
          {
            uint64_t v77 = AGGraphGetValue();
            if ((*(unsigned char *)(*(void *)v77 + 216) & 2) == 0) {
              *(unsigned char *)(*(void *)v77 + 216) |= 2u;
            }
          }
          double v129 = height / 3.0;
          v172.origin.CGFloat x = v68;
          v172.origin.CGFloat y = v69;
          v172.size.double width = v70;
          v172.size.double height = v71;
          double MaxX = CGRectGetMaxX(v172);
          v173.origin.CGFloat x = x;
          v173.origin.CGFloat y = y;
          v173.size.double width = width;
          v173.size.double height = height;
          if (MaxX - CGRectGetMaxX(v173) < width / 3.0)
          {
            uint64_t v78 = AGGraphGetValue();
            if ((*(unsigned char *)(*(void *)v78 + 216) & 8) == 0) {
              *(unsigned char *)(*(void *)v78 + 216) |= 8u;
            }
          }
          v174.origin.CGFloat x = x;
          v174.origin.CGFloat y = y;
          v174.size.double width = width;
          v174.size.double height = height;
          double MinY = CGRectGetMinY(v174);
          v175.origin.CGFloat x = v68;
          v175.origin.CGFloat y = v69;
          v175.size.double width = v70;
          v175.size.double height = v71;
          if (MinY - CGRectGetMinY(v175) < v129)
          {
            uint64_t v79 = AGGraphGetValue();
            if ((*(unsigned char *)(*(void *)v79 + 216) & 1) == 0) {
              *(unsigned char *)(*(void *)v79 + 216) |= 1u;
            }
          }
          v176.origin.CGFloat x = v68;
          v176.origin.CGFloat y = v69;
          v176.size.double width = v70;
          v176.size.double height = v71;
          double MaxY = CGRectGetMaxY(v176);
          v177.origin.CGFloat x = x;
          v177.origin.CGFloat y = y;
          v177.size.double width = width;
          v177.size.double height = height;
          if (MaxY - CGRectGetMaxY(v177) < v129)
          {
            uint64_t v81 = AGGraphGetValue();
            if ((*(unsigned char *)(*(void *)v81 + 216) & 4) == 0) {
              *(unsigned char *)(*(void *)v81 + 216) |= 4u;
            }
          }
          goto LABEL_34;
        }
      }
    }
    if (!v67)
    {
      char v76 = 0;
LABEL_37:
      uint64_t v82 = AGGraphGetValue();
      long long v83 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
      long long v133 = *MEMORY[0x1E4F1DB20];
      ++*(_DWORD *)(*(void *)v82 + 212);
      id v132 = (char *)MEMORY[0x1E4FBC860];
      long long v134 = v83;
      char v135 = 0;
      uint64_t v136 = 0;
      uint64_t v137 = 0;
      char v138 = 0;
      if (v76)
      {
        *(_OWORD *)(v17 + 96) = 0u;
        *(_OWORD *)(v17 + 112) = 0u;
      }
      else
      {
        specialized LazySubviewPlacements.placeSubviews(placementContext:in:for:)(v139, (uint64_t *)&v132, &v130, a1, a2, v109, v110, v111, a6);
      }
      Currentint Attribute = AGGraphGetCurrentAttribute();
      if (CurrentAttribute != v114)
      {
        unsigned int v85 = CurrentAttribute;
        char v86 = v138;
        long long v87 = *(char **)(v17 + 128);
        AGGraphGetValue();
        swift_retain();
        LazyLayoutViewCache.commitPlacedSubviews(from:to:wasCancelled:context:)(v87, &v132, v86, v85);
        swift_release();
        long long v88 = v132;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(v17 + 128) = v88;
        uint64_t v89 = swift_bridgeObjectRetain();
        uint64_t v90 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI25_LazyLayout_PlacedSubviewVG_So6CGRectVs5NeverOTg503_s7d4UI21fi30PlacementsV11updateValueyyFSo6j9VAA01_c13g1_H56D0Vcfu0_33_16ad7e5789174c81df73553da90b8b56AhFTf3nnnpk_nTf1cn_n(v89);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(void *)(v17 + 136) = v90;
        int v91 = *(_DWORD *)(v17 + 40);
        uint64_t v92 = *(void *)(v17 + 48);
        int v93 = *(_DWORD *)(v17 + 56);
        uint64_t v94 = *(void *)(v17 + 64);
        uint64_t v95 = *(void *)(v17 + 88);
        uint64_t v96 = *(void *)(v17 + 128);
        int v97 = *(_DWORD *)(v17 + 144);
        long long v98 = *(_OWORD *)(v17 + 264);
        v160[6] = *(_OWORD *)(v17 + 248);
        v160[7] = v98;
        long long v99 = *(_OWORD *)(v17 + 264);
        v161[0] = *(_OWORD *)(v17 + 280);
        *(_OWORD *)((char *)v161 + 9) = *(_OWORD *)(v17 + 289);
        long long v100 = *(_OWORD *)(v17 + 200);
        v160[2] = *(_OWORD *)(v17 + 184);
        v160[3] = v100;
        long long v101 = *(_OWORD *)(v17 + 232);
        v160[4] = *(_OWORD *)(v17 + 216);
        v160[5] = v101;
        long long v102 = *(_OWORD *)(v17 + 168);
        v160[0] = *(_OWORD *)(v17 + 152);
        v160[1] = v102;
        uint64_t v103 = *(void *)(v17 + 312);
        uint64_t v104 = *(void *)(v17 + 320);
        char v105 = *(unsigned char *)(v17 + 328);
        long long v106 = *(_OWORD *)(v17 + 16);
        __src[0] = *(_OWORD *)v17;
        __src[1] = v106;
        *(void *)&__src[2] = *(void *)(v17 + 32);
        DWORD2(__src[2]) = v91;
        *(void *)&__src[3] = v92;
        DWORD2(__src[3]) = v93;
        *(long long *)((char *)&__src[4] + 8) = *(_OWORD *)(v17 + 72);
        *(void *)&__src[4] = v94;
        *((void *)&__src[5] + 1) = v95;
        long long v107 = *(_OWORD *)(v17 + 112);
        __src[6] = *(_OWORD *)(v17 + 96);
        __src[7] = v107;
        *(void *)&__src[8] = v96;
        *((void *)&__src[8] + 1) = v90;
        LODWORD(__src[9]) = v97;
        long long v108 = *(_OWORD *)(v17 + 280);
        *(long long *)((char *)&__src[16] + 8) = v99;
        *(long long *)((char *)&__src[17] + 8) = v108;
        *(long long *)((char *)&__src[18] + 1) = *(_OWORD *)(v17 + 289);
        *(long long *)((char *)&__src[15] + 8) = *(_OWORD *)(v17 + 248);
        *(long long *)((char *)&__src[10] + 8) = *(_OWORD *)(v17 + 168);
        *(long long *)((char *)&__src[9] + 8) = *(_OWORD *)(v17 + 152);
        *(long long *)((char *)&__src[14] + 8) = *(_OWORD *)(v17 + 232);
        *(long long *)((char *)&__src[13] + 8) = *(_OWORD *)(v17 + 216);
        *(long long *)((char *)&__src[12] + 8) = *(_OWORD *)(v17 + 200);
        *(long long *)((char *)&__src[11] + 8) = *(_OWORD *)(v17 + 184);
        *((void *)&__src[19] + 1) = v103;
        *(void *)&__src[20] = v104;
        BYTE8(__src[20]) = v105;
        memcpy(__dst, __src, 0x149uLL);
        outlined retain of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)__src);
        specialized LazySubviewPlacements.mainID(subviews:)(v96, v112, v113, a9, a10, &v159);
        outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)__src);
        outlined release of PositionState((uint64_t)v160);
        *(_OWORD *)(v17 + 272) = v159;
        goto LABEL_42;
      }
LABEL_46:
      __break(1u);
    }
LABEL_34:
    if (AGGraphGetOutputValue())
    {
LABEL_43:
      specialized $defer #1 <A>() in LazySubviewPlacements.updateValue()(v17, &v130, (uint64_t)v139);
      return swift_release();
    }
LABEL_42:
    *(void *)&__src[0] = *(void *)(v17 + 128);
    AGGraphSetOutputValue();
    goto LABEL_43;
  }
  return result;
}

__n128 specialized $defer #1 <A>() in LazySubviewPlacements.updateValue()(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  long long v5 = a2[1];
  *(_OWORD *)(a1 + 160) = *a2;
  *(_OWORD *)(a1 + 176) = v5;
  long long v22 = *(_OWORD *)(a3 + 88);
  ScrollGeometry.visibleRect.getter();
  *(void *)(a1 + 192) = v6;
  *(void *)(a1 + 200) = v7;
  *(void *)(a1 + 208) = v8;
  *(void *)(a1 + 216) = v9;
  uint64_t v10 = 0;
  double v11 = 0.0;
  if (*(_DWORD *)(a3 + 12) != *MEMORY[0x1E4F4E7A0])
  {
    uint64_t Value = (void *)AGGraphGetValue();
    double v11 = MEMORY[0x18C114450](Value, v13, v14, v15, v16, v17, v18, v19, *Value, Value[1], Value[2], Value[3], v22, *((void *)&v22 + 1));
  }
  *(double *)(a1 + 224) = v11;
  *(void *)(a1 + 232) = v10;
  __n128 result = *(__n128 *)(a3 + 16);
  long long v21 = *(_OWORD *)(a3 + 32);
  *(__n128 *)(a1 + 240) = result;
  *(_OWORD *)(a1 + 256) = v21;
  return result;
}

double specialized LazySubviewPlacements.placeSubviews(placementContext:in:for:)(long long *a1, uint64_t *a2, CGRect *a3, void (*a4)(_OWORD *__return_ptr), uint64_t a5, uint64_t a6, uint64_t a7, double (*a8)(double *, long long *, void), void (*a9)(uint64_t, double, double))
{
  uint64_t v109 = a6;
  uint64_t v116 = a5;
  double v12 = v9;
  CGFloat v125 = a2;
  uint64_t v15 = (unsigned char *)(*(void *)&v9 + 304);
  a4(v176);
  outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v176, (uint64_t)v202, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
  outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v202, (uint64_t)v203, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
  long long v107 = a1;
  long long v108 = a8;
  uint64_t v110 = a7;
  if (_s7SwiftUI28_LazyLayout_PlacementContextVSgWOg((uint64_t)v203) == 1)
  {
    uint64_t v16 = *((void *)a1 + 21);
    double v123 = *((double *)a1 + 22);
    uint64_t v124 = v16;
    uint64_t v17 = *((void *)a1 + 23);
    uint64_t v121 = *((void *)a1 + 24);
    uint64_t v122 = v17;
    uint64_t v18 = *((void *)a1 + 25);
    uint64_t v119 = *((void *)a1 + 26);
    uint64_t v120 = v18;
    uint64_t v19 = *((void *)a1 + 28);
    uint64_t v112 = *((void *)a1 + 27);
    uint64_t v20 = *((void *)a1 + 29);
    uint64_t v21 = *((void *)a1 + 30);
    uint64_t v22 = *((void *)a1 + 31);
    uint64_t v23 = *((void *)a1 + 32);
    uint64_t v24 = *((void *)a1 + 33);
    uint64_t v25 = *((void *)a1 + 34);
    CGFloat v26 = *((double *)a1 + 36);
    v117.double width = *((CGFloat *)a1 + 35);
    v117.double height = v26;
    int v27 = *((unsigned char *)a1 + 296) & 1;
    int v28 = *((_DWORD *)a1 + 12);
    long long v29 = a1[2];
    long long v114 = a1[1];
    long long v115 = v29;
    long long v113 = *a1;
    long long v30 = a1;
  }
  else
  {
    outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v202, (uint64_t)v176, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
    int v27 = BYTE8(v176[18]);
    CGSize v117 = *(CGSize *)((char *)&v176[17] + 8);
    double v123 = *(double *)&v176[11];
    uint64_t v124 = *((void *)&v176[10] + 1);
    uint64_t v121 = *(void *)&v176[12];
    uint64_t v122 = *((void *)&v176[11] + 1);
    uint64_t v119 = *(void *)&v176[13];
    uint64_t v120 = *((void *)&v176[12] + 1);
    uint64_t v19 = *(void *)&v176[14];
    uint64_t v112 = *((void *)&v176[13] + 1);
    uint64_t v20 = *((void *)&v176[14] + 1);
    uint64_t v22 = *((void *)&v176[15] + 1);
    uint64_t v21 = *(void *)&v176[15];
    uint64_t v24 = *((void *)&v176[16] + 1);
    uint64_t v23 = *(void *)&v176[16];
    uint64_t v25 = *(void *)&v176[17];
    int v28 = v176[3];
    long long v114 = v176[1];
    long long v115 = v176[2];
    long long v113 = v176[0];
    long long v30 = v176;
  }
  memcpy(v168, v30, 0x129uLL);
  char v31 = v15[24];
  CGRect v118 = v15;
  long long v111 = a3;
  if (v31)
  {
    uint64_t v32 = v112;
  }
  else
  {
    uint64_t v102 = v25;
    uint64_t v103 = v24;
    uint64_t v104 = v23;
    uint64_t v105 = v22;
    uint64_t v106 = v21;
    CGFloat v33 = *(double *)(*(void *)&v12 + 320);
    v101.double width = *(CGFloat *)(*(void *)&v12 + 312);
    v101.double height = v33;
    outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v202, (uint64_t)v176, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
    if (_s7SwiftUI28_LazyLayout_PlacementContextVSgWOg((uint64_t)v176) == 1)
    {
      LODWORD(v112) = v27;
      ScrollGeometry.visibleRect.getter();
      ScrollGeometry.translate(by:limit:)(v101, v117);
      ScrollGeometry.translate(by:limit:)(v101, v117);
      uint64_t v32 = v168[27];
      uint64_t v19 = v168[28];
      uint64_t v20 = v168[29];
      uint64_t v21 = v168[30];
      uint64_t v22 = v168[31];
      uint64_t v23 = v168[32];
      uint64_t v25 = v168[34];
      uint64_t v24 = v168[33];
      double v123 = *(double *)&v168[22];
      uint64_t v124 = v168[21];
      long long v132 = *(_OWORD *)&v168[21];
      uint64_t v121 = v168[24];
      uint64_t v122 = v168[23];
      *(void *)long long v133 = v168[23];
      *(void *)&v133[8] = v168[24];
      uint64_t v119 = v168[26];
      uint64_t v120 = v168[25];
      *(void *)&v133[16] = v168[25];
      uint64_t v134 = v168[26];
      uint64_t v135 = v168[27];
      uint64_t v136 = v168[28];
      uint64_t v137 = v168[29];
      uint64_t v138 = v168[30];
      uint64_t v139 = v168[31];
      uint64_t v140 = v168[32];
      long long v141 = *(_OWORD *)&v168[33];
      ScrollGeometry.visibleRect.getter();
    }
    else
    {
      uint64_t v32 = v112;
      uint64_t v22 = v105;
      uint64_t v21 = v106;
      uint64_t v24 = v103;
      uint64_t v23 = v104;
      uint64_t v25 = v102;
    }
  }
  v177[0] = v113;
  v177[1] = v114;
  v177[2] = v115;
  int v178 = v28;
  long long v179 = *(_OWORD *)&v168[7];
  long long v180 = *(_OWORD *)&v168[9];
  long long v181 = *(_OWORD *)&v168[11];
  long long v182 = *(_OWORD *)&v168[13];
  long long v183 = *(_OWORD *)&v168[15];
  long long v184 = *(_OWORD *)&v168[17];
  long long v185 = *(_OWORD *)&v168[19];
  uint64_t v186 = v124;
  double v187 = v123;
  uint64_t v188 = v122;
  uint64_t v189 = v121;
  uint64_t v190 = v120;
  uint64_t v191 = v119;
  uint64_t v192 = v32;
  uint64_t v193 = v19;
  uint64_t v194 = v20;
  uint64_t v195 = v21;
  uint64_t v196 = v22;
  uint64_t v197 = v23;
  uint64_t v198 = v24;
  uint64_t v199 = v25;
  CGSize v200 = v117;
  char v201 = v27;
  uint64_t v124 = type metadata accessor for LazyLayoutViewCache();
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v35 = *Value;
  MEMORY[0x1F4188790](Value);
  *(double *)&v100[2] = v12;
  v100[3] = v177;
  char v36 = v125;
  v100[4] = v125;
  uint64_t v37 = *(void (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t))(*(void *)v35 + 288);
  swift_retain();
  v37(MEMORY[0x1E4FBC848] + 8, v116, v100, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC848] + 8);
  swift_release();
  if (*((unsigned char *)v36 + 40) == 1)
  {
    AGGraphGetValue();
    swift_retain();
    Swift::Bool v38 = LazyLayoutViewCache.mayInvalidate()();
    swift_release();
    if (v38 && *(_DWORD *)(*(void *)&v12 + 40) != *MEMORY[0x1E4F4E7A0])
    {
      uint64_t v39 = AGCreateWeakAttribute();
      *(void *)(swift_allocObject() + 16) = v39;
      static Update.enqueueAction(_:)();
      swift_release();
    }
  }
  double v123 = v12;
  memcpy(v176, *(const void **)&v12, 0x149uLL);
  int v40 = DWORD1(v176[1]);
  int v41 = DWORD1(v176[0]);
  long long v164 = *(_OWORD *)((char *)&v176[12] + 8);
  long long v165 = *(_OWORD *)((char *)&v176[13] + 8);
  long long v166 = *(_OWORD *)((char *)&v176[14] + 8);
  uint64_t v167 = *((void *)&v176[15] + 1);
  long long v162 = *(_OWORD *)((char *)&v176[10] + 8);
  long long v163 = *(_OWORD *)((char *)&v176[11] + 8);
  long long v42 = v176[16];
  long long v160 = v176[17];
  long long v161 = *(_OWORD *)((char *)&v176[9] + 8);
  double v44 = *((double *)&v176[18] + 1);
  double v43 = *(double *)&v176[18];
  char v45 = v176[19];
  outlined retain of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v176);
  specialized LazySubviewPlacements.transaction.getter();
  outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v176);
  Transaction.scrollContentOffsetAdjustmentBehavior.getter();
  swift_release();
  int v46 = v132;
  AGGraphGetValue();
  LODWORD(v124) = *(unsigned __int8 *)AGGraphGetValue();
  LODWORD(v121) = v41;
  CGFloat v47 = (long long *)AGGraphGetValue();
  long long v48 = v47[1];
  long long v132 = *v47;
  *(_OWORD *)long long v133 = v48;
  MEMORY[0x18C114450]();
  char v51 = v45;
  double v52 = 0.0;
  LODWORD(v122) = v40;
  if (v45)
  {
    unsigned int v54 = 3;
    double v58 = 0.0;
    double v55 = v43;
    double v56 = v123;
    double v57 = v125;
  }
  else
  {
    double v53 = v43;
    unsigned int v54 = 3;
    BOOL v76 = v43 == 0.0;
    double v55 = v43;
    double v56 = v123;
    double v57 = v125;
    if (!v76 || (double v58 = 0.0, v44 != 0.0))
    {
      unsigned int v54 = v46 == 2 ? 3 : 1;
      double v58 = 0.0;
      double v52 = v46 == 2 ? 0.0 : v44;
      if (v46 != 2) {
        double v58 = v53;
      }
    }
  }
  double v59 = *((double *)v57 + 6);
  double v60 = *((double *)v57 + 7);
  BOOL v61 = v59 == 0.0;
  if (v60 != 0.0) {
    BOOL v61 = 0;
  }
  if (v46 == 2) {
    BOOL v61 = 1;
  }
  if (v61) {
    uint64_t v62 = v54;
  }
  else {
    uint64_t v62 = 0;
  }
  if (v61) {
    double v63 = -0.0;
  }
  else {
    double v63 = *((double *)v57 + 7);
  }
  double v64 = v52 + v63;
  if (v61) {
    double v65 = -0.0;
  }
  else {
    double v65 = *((double *)v57 + 6);
  }
  double v66 = v58 + v65;
  if (v58 + v65 != 0.0
    || v64 != 0.0
    || v46 == 2
    || *(double *)&v42 == 0.0 && *((double *)&v42 + 1) == 0.0
    || v49 == 0.0 && v50 == 0.0
    || (double v67 = vabdd_f64(v49, *(double *)&v42), v68 = vabdd_f64(v50, *((double *)&v42 + 1)), v67 < 0.01) && v68 < 0.01)
  {
    uint64_t v69 = *(void *)&v176[3];
    int v70 = DWORD2(v176[3]);
    uint64_t v72 = *((void *)&v176[4] + 1);
    uint64_t v71 = *(void *)&v176[4];
    uint64_t v73 = *((void *)&v176[5] + 1);
    uint64_t v74 = *(void *)&v176[5];
  }
  else
  {
    double v89 = *(double *)v57;
    int v90 = v67 >= 0.01;
    char v91 = *((unsigned char *)v57 + 40);
    if (v68 >= 0.01) {
      v90 |= 2u;
    }
    LODWORD(v120) = v90;
    char v92 = *((unsigned char *)v57 + 64);
    double v169 = v89;
    long long v170 = *(_OWORD *)(v57 + 1);
    long long v171 = *(_OWORD *)(v57 + 3);
    char v172 = v91;
    double v173 = v59;
    double v174 = v60;
    char v175 = v92;
    double v123 = v55;
    double v93 = v44;
    char v94 = v51;
    outlined retain of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v176);
    swift_bridgeObjectRetain();
    double v95 = v108(&v169, v107, v120);
    double v97 = v96;
    swift_bridgeObjectRelease();
    outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v176);
    char v51 = v94;
    double v44 = v93;
    double v55 = v123;
    BOOL v98 = v95 == 0.0;
    BOOL v99 = v97 == 0.0;
    uint64_t v69 = *(void *)&v176[3];
    int v70 = DWORD2(v176[3]);
    uint64_t v72 = *((void *)&v176[4] + 1);
    uint64_t v71 = *(void *)&v176[4];
    uint64_t v73 = *((void *)&v176[5] + 1);
    uint64_t v74 = *(void *)&v176[5];
    if (v98 && v99) {
      uint64_t v62 = v62;
    }
    else {
      uint64_t v62 = 2;
    }
    if (!v98 || !v99)
    {
      double v64 = v97;
      double v66 = v95;
    }
  }
  if ((v124 & (v66 != 0.0)) != 0) {
    double v75 = -v66;
  }
  else {
    double v75 = v66;
  }
  BOOL v76 = v64 == 0.0 && v75 == 0.0;
  if (!v76 && v62 != 3)
  {
    *((void *)&v132 + 1) = *((void *)&v176[0] + 1);
    *(_OWORD *)&v133[8] = *(_OWORD *)((char *)&v176[1] + 8);
    uint64_t v138 = v72;
    uint64_t v139 = v74;
    long long v141 = v176[6];
    long long v142 = v176[7];
    long long v143 = v176[8];
    long long v145 = v161;
    long long v146 = v162;
    long long v150 = v166;
    long long v149 = v165;
    *(void *)&long long v132 = __PAIR64__(v121, v176[0]);
    *(_DWORD *)long long v133 = v176[1];
    *(_DWORD *)&v133[4] = v122;
    LODWORD(v134) = DWORD2(v176[2]);
    uint64_t v135 = v69;
    LODWORD(v136) = v70;
    uint64_t v137 = v71;
    uint64_t v140 = v73;
    int v144 = v176[9];
    uint64_t v151 = v167;
    long long v148 = v164;
    long long v147 = v163;
    long long v152 = v42;
    long long v153 = v160;
    double v154 = v55;
    double v155 = v44;
    char v156 = v51;
    uint64_t v157 = *((void *)&v176[19] + 1);
    uint64_t v158 = *(void *)&v176[20];
    char v159 = BYTE8(v176[20]);
    outlined retain of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)&v132);
    a9(v62, v75, v64);
    outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v176);
    uint64_t v77 = v111;
    *uint64_t v77 = CGRectOffset(*v111, v75, v64);
    *(double *)(*(void *)&v56 + 312) = v75;
    *(double *)(*(void *)&v56 + 320) = v64;
    v118[24] = 0;
    AGGraphClearUpdate();
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
    Weakuint64_t Value = AGGraphGetWeakValue();
    if (WeakValue)
    {
      outlined init with copy of TableColumnList(WeakValue, (uint64_t)v130);
    }
    else
    {
      uint64_t v131 = 0;
      memset(v130, 0, sizeof(v130));
    }
    AGGraphSetUpdate();
    outlined init with copy of ScrollableCollection?((uint64_t)v130, (uint64_t)v127, (uint64_t (*)(void))type metadata accessor for Scrollable?);
    uint64_t v79 = v128;
    if (!v128)
    {
      outlined destroy of ScrollableCollection?((uint64_t)v130, (uint64_t (*)(void))type metadata accessor for Scrollable?);
      outlined destroy of ScrollableCollection?((uint64_t)v127, (uint64_t (*)(void))type metadata accessor for Scrollable?);
      if (v57[8]) {
        goto LABEL_64;
      }
LABEL_66:
      uint64_t v81 = v57 + 1;
      long long v84 = v57 + 2;
      long long v83 = v57 + 3;
      uint64_t v82 = (double *)(v57 + 4);
      goto LABEL_67;
    }
    uint64_t v80 = v129;
    __swift_project_boxed_opaque_existential_1(v127, v128);
    BOOL v126 = v62 == 1;
    double v57 = v125;
    (*(void (**)(BOOL *, uint64_t, uint64_t, double, double))(v80 + 32))(&v126, v79, v80, v75, v64);
    outlined destroy of ScrollableCollection?((uint64_t)v130, (uint64_t (*)(void))type metadata accessor for Scrollable?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v127);
  }
  if ((v57[8] & 1) == 0) {
    goto LABEL_66;
  }
LABEL_64:
  uint64_t v81 = (void *)MEMORY[0x1E4F1DB20];
  uint64_t v82 = (double *)(MEMORY[0x1E4F1DB20] + 24);
  long long v83 = (uint64_t *)(MEMORY[0x1E4F1DB20] + 16);
  long long v84 = (uint64_t *)(MEMORY[0x1E4F1DB20] + 8);
LABEL_67:
  unsigned int v85 = v118;
  double result = *v82;
  uint64_t v87 = *v83;
  uint64_t v88 = *v84;
  *(void *)(*(void *)&v56 + 96) = *v81;
  *(void *)(*(void *)&v56 + 104) = v88;
  *(void *)(*(void *)&v56 + 112) = v87;
  *(double *)(*(void *)&v56 + 120) = result;
  *(void *)(*(void *)&v56 + 288) = 0;
  *(void *)(*(void *)&v56 + 296) = 0;
  *unsigned int v85 = 1;
  return result;
}

uint64_t specialized closure #1 in LazySubviewPlacements.placeSubviews(placementContext:in:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(unsigned char *, uint64_t, uint64_t, uint64_t))
{
  uint64_t Value = AGGraphGetValue();
  long long v11 = *(_OWORD *)(Value + 16);
  long long v16 = *(_OWORD *)Value;
  long long v12 = *(_OWORD *)(Value + 32);
  long long v17 = v11;
  long long v18 = v12;
  uint64_t v19 = *(void *)(Value + 48);
  type metadata accessor for LazyLayoutViewCache();
  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x1E4F4E7A0])
  {
    __break(1u);
  }
  else
  {
    int v14 = result;
    AGGraphGetValue();
    swift_retain();
    LazyLayoutViewCache.subviews(context:)(v14, (uint64_t)v15);
    swift_release();
    a6(v15, a3, a1, a4);
    return outlined destroy of _LazyLayout_Subviews((uint64_t)v15);
  }
  return result;
}

uint64_t specialized closure #1 in LazySubviewPlacements.placeSubviews(placementContext:in:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t Value = AGGraphGetValue();
  uint64_t v9 = *(void *)Value;
  uint64_t v10 = *(void *)(Value + 8);
  uint64_t v11 = *(void *)(Value + 16);
  unsigned __int8 v12 = *(unsigned char *)(Value + 24);
  uint64_t v13 = *(unsigned int *)(Value + 28);
  type metadata accessor for LazyLayoutViewCache();
  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x1E4F4E7A0])
  {
    __break(1u);
  }
  else
  {
    int v15 = result;
    AGGraphGetValue();
    swift_bridgeObjectRetain();
    swift_retain();
    LazyLayoutViewCache.subviews(context:)(v15, (uint64_t)v18);
    swift_release();
    a6(v18, a3, a1, a4, v9, v10, v11, v12 | (unint64_t)(v13 << 32));
    outlined destroy of _LazyLayout_Subviews((uint64_t)v18);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:)(a1, (void (*)(_OWORD *__return_ptr, uint64_t, _OWORD *, uint64_t, uint64_t))specialized LazySubviewPlacements.makeDefaultPlacementContext(_:position:matchingID:), (void (*)(unint64_t, unint64_t))specialized LazySubviewPlacements.logDefaultPlacement(_:), (uint64_t (*)(uint64_t, _OWORD *, uint64_t))specialized PositionState.dispatchSubviewsChange<A>(context:layout:cache:), a2);
}

{
  return specialized LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:)(a1, (void (*)(_OWORD *__return_ptr, uint64_t, _OWORD *, uint64_t, uint64_t))specialized LazySubviewPlacements.makeDefaultPlacementContext(_:position:matchingID:), (void (*)(unint64_t, unint64_t))specialized LazySubviewPlacements.logDefaultPlacement(_:), (uint64_t (*)(uint64_t, _OWORD *, uint64_t))specialized PositionState.dispatchSubviewsChange<A>(context:layout:cache:), a2);
}

uint64_t specialized LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:)@<X0>(uint64_t a1@<X0>, void (*a2)(_OWORD *__return_ptr, uint64_t, _OWORD *, uint64_t, uint64_t)@<X1>, void (*a3)(unint64_t, unint64_t)@<X2>, uint64_t (*a4)(uint64_t, _OWORD *, uint64_t)@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6 = *(void *)(v5 + 48);
  int v7 = *(_DWORD *)(v5 + 56);
  uint64_t v8 = *(void *)(v5 + 64);
  unsigned int v9 = *(_DWORD *)(v5 + 72);
  unsigned int v10 = *(_DWORD *)(v5 + 76);
  unsigned int v11 = *(_DWORD *)(v5 + 80);
  unsigned int v12 = *(_DWORD *)(v5 + 84);
  uint64_t v13 = *(void *)(v5 + 88);
  uint64_t v32 = v6;
  int v33 = v7;
  uint64_t v34 = v8;
  uint64_t v35 = __PAIR64__(v10, v9);
  unint64_t v36 = __PAIR64__(v12, v11);
  uint64_t v37 = v13;
  LOBYTE(v29) = 1;
  if ((_GraphInputs.hasValueScrollPosition(kind:)() & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v32 = v6;
  int v33 = v7;
  uint64_t v34 = v8;
  uint64_t v35 = __PAIR64__(v10, v9);
  unint64_t v36 = __PAIR64__(v12, v11);
  uint64_t v37 = v13;
  if (_GraphInputs.scrollTargetRole.getter() == *MEMORY[0x1E4F4E7A0]) {
    goto LABEL_7;
  }
  type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for ScrollTargetRole.Role?, MEMORY[0x1E4F3FD78], MEMORY[0x1E4FBB718]);
  int v14 = *(unsigned __int8 *)AGGraphGetValue();
  if (v14 == 2 || (v14 & 1) != 0 || *(double *)(a1 + 32) == 0.0 || *(double *)(a1 + 40) == 0.0) {
    goto LABEL_7;
  }
  uint64_t v16 = *(void *)(v5 + 128);
  if (*(void *)(v16 + 16))
  {
    uint64_t v17 = *(void *)(v16 + 32);
    unsigned int v18 = *(_DWORD *)(v17 + 136);
    uint64_t v19 = *(unsigned int *)(v17 + 140);
    uint64_t v20 = *(void *)(v17 + 144);
    swift_bridgeObjectRetain();
LABEL_11:
    specialized LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)(a1, v18 | (unint64_t)(v19 << 32), v20, a2, a3, a4, a5);
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for LazyLayoutViewCache();
  AGGraphGetValue();
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of TableColumnList(Value, (uint64_t)&v32);
  uint64_t v22 = v35;
  unint64_t v23 = v36;
  __swift_project_boxed_opaque_existential_1(&v32, v35);
  if ((*(uint64_t (**)(uint64_t, unint64_t))(v23 + 32))(v22, v23))
  {
    if (dispatch thunk of _ViewList_ID_Views.endIndex.getter())
    {
      dispatch thunk of _ViewList_ID_Views.subscript.getter();
      swift_release();
      unsigned int v18 = v29;
      uint64_t v19 = v30;
      uint64_t v20 = v31;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
      goto LABEL_11;
    }
    swift_release();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
LABEL_7:
  _s7SwiftUI28_LazyLayout_PlacementContextVSgWOi0_((uint64_t)&v32);
  return outlined init with take of _LazyLayout_PlacementContext?((uint64_t)&v32, a5, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
}

uint64_t specialized LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:)@<X0>(double *a1@<X0>, void (*a2)(void *__return_ptr, const void *, _OWORD *, uint64_t, uint64_t)@<X1>, void (*a3)(uint64_t, unint64_t)@<X2>, uint64_t (*a4)(const void *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t)@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6 = *(void *)(v5 + 48);
  int v7 = *(_DWORD *)(v5 + 56);
  uint64_t v8 = *(void *)(v5 + 64);
  unsigned int v9 = *(_DWORD *)(v5 + 72);
  unsigned int v10 = *(_DWORD *)(v5 + 76);
  unsigned int v11 = *(_DWORD *)(v5 + 80);
  unsigned int v12 = *(_DWORD *)(v5 + 84);
  uint64_t v13 = *(void *)(v5 + 88);
  uint64_t v32 = v6;
  int v33 = v7;
  uint64_t v34 = v8;
  uint64_t v35 = __PAIR64__(v10, v9);
  unint64_t v36 = __PAIR64__(v12, v11);
  uint64_t v37 = v13;
  LOBYTE(v29) = 1;
  if ((_GraphInputs.hasValueScrollPosition(kind:)() & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v32 = v6;
  int v33 = v7;
  uint64_t v34 = v8;
  uint64_t v35 = __PAIR64__(v10, v9);
  unint64_t v36 = __PAIR64__(v12, v11);
  uint64_t v37 = v13;
  if (_GraphInputs.scrollTargetRole.getter() == *MEMORY[0x1E4F4E7A0]) {
    goto LABEL_7;
  }
  type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for ScrollTargetRole.Role?, MEMORY[0x1E4F3FD78], MEMORY[0x1E4FBB718]);
  int v14 = *(unsigned __int8 *)AGGraphGetValue();
  if (v14 == 2 || (v14 & 1) != 0 || a1[4] == 0.0 || a1[5] == 0.0) {
    goto LABEL_7;
  }
  uint64_t v16 = *(void *)(v5 + 128);
  if (*(void *)(v16 + 16))
  {
    uint64_t v17 = *(void *)(v16 + 32);
    unsigned int v18 = *(_DWORD *)(v17 + 136);
    uint64_t v19 = *(unsigned int *)(v17 + 140);
    uint64_t v20 = *(void *)(v17 + 144);
    swift_bridgeObjectRetain();
LABEL_11:
    specialized LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)(a1, v18 | (unint64_t)(v19 << 32), v20, a2, a3, a4, a5);
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for LazyLayoutViewCache();
  AGGraphGetValue();
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of TableColumnList(Value, (uint64_t)&v32);
  uint64_t v22 = v35;
  unint64_t v23 = v36;
  __swift_project_boxed_opaque_existential_1(&v32, v35);
  if ((*(uint64_t (**)(uint64_t, unint64_t))(v23 + 32))(v22, v23))
  {
    if (dispatch thunk of _ViewList_ID_Views.endIndex.getter())
    {
      dispatch thunk of _ViewList_ID_Views.subscript.getter();
      swift_release();
      unsigned int v18 = v29;
      uint64_t v19 = v30;
      uint64_t v20 = v31;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
      goto LABEL_11;
    }
    swift_release();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
LABEL_7:
  _s7SwiftUI28_LazyLayout_PlacementContextVSgWOi0_((uint64_t)&v32);
  return outlined init with take of _LazyLayout_PlacementContext?((uint64_t)&v32, a5, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
}

uint64_t specialized LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(_OWORD *__return_ptr, uint64_t, _OWORD *, uint64_t, uint64_t)@<X3>, void (*a5)(unint64_t, unint64_t)@<X4>, uint64_t (*a6)(uint64_t, _OWORD *, uint64_t)@<X6>, uint64_t a7@<X8>)
{
  void (*v21)(_OWORD *__return_ptr, uint64_t, _OWORD *, uint64_t, uint64_t);
  uint64_t (*v22)(void, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t Value;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_OWORD *__return_ptr, uint64_t, _OWORD *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  CGFloat v40;
  long long v41;
  CGFloat v42;
  uint64_t v43;
  void (*v44)(unint64_t, unint64_t);
  uint64_t v45;
  long long v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  double v51;
  double v52;
  _OWORD *v53;
  long long v54;
  double v55;
  int v56;
  uint64_t (*v57)(uint64_t, _OWORD *, uint64_t);
  uint64_t v58;
  void (*v59)(unint64_t, unint64_t);
  _OWORD v60[21];
  _OWORD v61[19];
  unsigned char v62[186];
  _OWORD v63[3];
  long long v64;
  long long v65;
  long long v66;
  long long v67;
  long long v68;
  _OWORD v69[2];
  _OWORD v70[5];
  _OWORD v71[3];
  uint64_t v72;
  _DWORD __dst[86];
  CGRect v74;
  CGRect v75;

  unsigned int v11 = (unsigned char *)v7;
  memcpy(__dst, (const void *)v7, 0x149uLL);
  outlined retain of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)__dst);
  specialized LazySubviewPlacements.transaction.getter();
  outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)__dst);
  Transaction.scrollContentOffsetAdjustmentBehavior.getter();
  swift_release();
  if (LOBYTE(v60[0]) == 2
    || (type metadata accessor for LazyLayoutViewCache(),
        *(_DWORD *)(*(void *)AGGraphGetValue() + 148) == *MEMORY[0x1E4F4E7A0]))
  {
    _s7SwiftUI28_LazyLayout_PlacementContextVSgWOi0_((uint64_t)v60);
    uint64_t v16 = a7;
    goto LABEL_4;
  }
  double v56 = *MEMORY[0x1E4F4E7A0];
  double v57 = a6;
  double v58 = a7;
  double v59 = a5;
  uint64_t v18 = MEMORY[0x1E4F3FA08];
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  uint64_t v22 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F41638];
  type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for Binding<ScrollPosition>, MEMORY[0x1E4F3FA08], MEMORY[0x1E4F41638]);
  unint64_t v23 = a1;
  uint64_t v25 = v24;
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of AccessibilityScrollableContext?(Value, (uint64_t)v62, &lazy cache variable for type metadata for Binding<ScrollPosition>, v18, v22);
  int v27 = v25;
  int v28 = v23;
  MEMORY[0x18C113DA0](v61, v27);
  unsigned int v29 = v18;
  unsigned int v30 = v21;
  uint64_t v31 = v20;
  uint64_t v32 = v19;
  outlined destroy of AccessibilityScrollableContext?((uint64_t)v62, &lazy cache variable for type metadata for Binding<ScrollPosition>, v29, v22);
  _OWORD v70[2] = v61[2];
  v70[3] = v61[3];
  v70[4] = v61[4];
  v70[1] = v61[1];
  v70[0] = v61[0];
  AGGraphClearUpdate();
  int v33 = specialized closure #1 in LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)(v7);
  AGGraphSetUpdate();
  if (v33) {
    goto LABEL_12;
  }
  uint64_t v34 = *(_OWORD *)(v7 + 184);
  uint64_t v35 = *(_OWORD *)(v7 + 248);
  double v64 = *(_OWORD *)(v7 + 200);
  unint64_t v36 = *(_OWORD *)(v7 + 232);
  double v65 = *(_OWORD *)(v7 + 216);
  double v66 = v36;
  uint64_t v37 = *(_OWORD *)(v7 + 168);
  v63[0] = *(_OWORD *)(v7 + 152);
  v63[1] = v37;
  v63[2] = v34;
  Swift::Bool v38 = *(_OWORD *)(v7 + 264);
  uint64_t v39 = *(_OWORD *)(v7 + 280);
  double v67 = v35;
  double v68 = v38;
  v69[0] = v39;
  *(_OWORD *)((char *)v69 + 9) = *(_OWORD *)(v7 + 289);
  int v40 = *((double *)&v34 + 1);
  int v41 = v64;
  long long v42 = *(double *)&v65;
  outlined retain of PositionState((uint64_t)v63);
  v75.origin.CGFloat x = 0.0;
  v75.origin.CGFloat y = 0.0;
  v75.size.double width = 0.0;
  v75.size.double height = 0.0;
  v74.origin.CGFloat x = v40;
  *(_OWORD *)&v74.origin.CGFloat y = v41;
  v74.size.double height = v42;
  if (CGRectEqualToRect(v74, v75))
  {
    outlined release of PositionState((uint64_t)v63);
    double v43 = v58;
    double v44 = v59;
    goto LABEL_9;
  }
  if (*(_DWORD *)(v23 + 12) == v56)
  {
    outlined release of PositionState((uint64_t)v63);
    char v51 = 0.0;
    double v52 = 0.0;
  }
  else
  {
    double v53 = (_OWORD *)AGGraphGetValue();
    unsigned int v54 = v53[1];
    v60[0] = *v53;
    v60[1] = v54;
    double v52 = MEMORY[0x18C114450]();
    char v51 = v55;
    outlined release of PositionState((uint64_t)v63);
  }
  double v43 = v58;
  double v44 = v59;
  if (vabdd_f64(*((double *)&v65 + 1), v52) < 0.1 && vabdd_f64(*(double *)&v66, v51) < 0.1)
  {
LABEL_9:
    char v45 = AGGraphGetValue();
    int v46 = *(_OWORD *)(v45 + 16);
    v71[0] = *(_OWORD *)v45;
    v71[1] = v46;
    v71[2] = *(_OWORD *)(v45 + 32);
    uint64_t v72 = *(void *)(v45 + 48);
    CGFloat v47 = *(void *)AGGraphGetValue();
    swift_retain();
    long long v48 = v57(v28, v71, v47);
    swift_release();
    if (v48)
    {
      v30(v60, v28, v70, v32, v31);
      outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v60, (uint64_t)v61, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
      outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v61, (uint64_t)v62, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
      if (_s7SwiftUI28_LazyLayout_PlacementContextVSgWOg((uint64_t)v62) != 1)
      {
        memcpy(v60, v11, 0x149uLL);
        outlined retain of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v60);
        double v49 = 0x2077656E20726F66;
        double v50 = 0xEF6469206E69616DLL;
LABEL_24:
        v44(v49, v50);
        outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v60);
        goto LABEL_25;
      }
      goto LABEL_25;
    }
LABEL_12:
    if ((v11[152] & 1) == 0)
    {
      v30(v60, v28, v70, v32, v31);
      outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v60, (uint64_t)v61, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
      outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v61, (uint64_t)v62, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
      if (_s7SwiftUI28_LazyLayout_PlacementContextVSgWOg((uint64_t)v62) != 1)
      {
        memcpy(v60, v11, 0x149uLL);
        outlined retain of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v60);
        v59(0xD000000000000011, 0x8000000188328B40);
        outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v60);
      }
      outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v61, v58, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
      uint64_t result = outlined destroy of ScrollPosition((uint64_t)v70);
      goto LABEL_5;
    }
    outlined destroy of ScrollPosition((uint64_t)v70);
    _s7SwiftUI28_LazyLayout_PlacementContextVSgWOi0_((uint64_t)v60);
    uint64_t v16 = v58;
LABEL_4:
    uint64_t result = outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v60, v16, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
LABEL_5:
    v11[152] = 1;
    return result;
  }
  v30(v60, v28, v70, v19, v31);
  outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v60, (uint64_t)v61, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
  outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v61, (uint64_t)v62, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
  if (_s7SwiftUI28_LazyLayout_PlacementContextVSgWOg((uint64_t)v62) != 1)
  {
    memcpy(v60, (const void *)v7, 0x149uLL);
    outlined retain of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v60);
    double v49 = 0xD000000000000014;
    double v50 = 0x8000000188328B20;
    goto LABEL_24;
  }
LABEL_25:
  outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v61, v43, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
  uint64_t result = outlined destroy of ScrollPosition((uint64_t)v70);
  v11[152] = 1;
  return result;
}

uint64_t specialized LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(void *__return_ptr, const void *, _OWORD *, uint64_t, uint64_t)@<X3>, void (*a5)(uint64_t, unint64_t)@<X4>, uint64_t (*a6)(const void *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t)@<X6>, uint64_t a7@<X8>)
{
  void (*v39)(void *__return_ptr, const void *, _OWORD *, uint64_t, uint64_t);
  void (*v40)(uint64_t, unint64_t);
  uint64_t v41;
  void v42[42];
  _OWORD v43[11];
  _OWORD v44[8];
  _OWORD v45[11];
  _OWORD v46[5];
  _DWORD __dst[86];

  unsigned int v11 = v7;
  memcpy(__dst, v7, 0x149uLL);
  specialized LazySubviewPlacements.transaction.getter();
  Transaction.scrollContentOffsetAdjustmentBehavior.getter();
  swift_release();
  if (LOBYTE(v42[0]) == 2
    || (type metadata accessor for LazyLayoutViewCache(),
        *(_DWORD *)(*(void *)AGGraphGetValue() + 148) == *MEMORY[0x1E4F4E7A0]))
  {
    _s7SwiftUI28_LazyLayout_PlacementContextVSgWOi0_((uint64_t)v42);
    uint64_t v16 = a7;
    goto LABEL_4;
  }
  uint64_t v38 = a3;
  uint64_t v39 = a4;
  int v40 = a5;
  int v41 = a7;
  uint64_t v18 = MEMORY[0x1E4F3FA08];
  uint64_t v19 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F41638];
  type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for Binding<ScrollPosition>, MEMORY[0x1E4F3FA08], MEMORY[0x1E4F41638]);
  uint64_t v21 = v20;
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of AccessibilityScrollableContext?(Value, (uint64_t)v44, &lazy cache variable for type metadata for Binding<ScrollPosition>, v18, v19);
  MEMORY[0x18C113DA0](v43, v21);
  outlined destroy of AccessibilityScrollableContext?((uint64_t)v44, &lazy cache variable for type metadata for Binding<ScrollPosition>, v18, v19);
  v46[3] = v43[3];
  v46[4] = v43[4];
  v46[1] = v43[1];
  v46[2] = v43[2];
  v46[0] = v43[0];
  AGGraphClearUpdate();
  BOOL v23 = specialized closure #1 in LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)((uint64_t)v7);
  AGGraphSetUpdate();
  if (v23) {
    goto LABEL_15;
  }
  long long v24 = *(_OWORD *)(v11 + 248);
  long long v25 = *(_OWORD *)(v11 + 200);
  v44[2] = *(_OWORD *)(v11 + 184);
  v44[3] = v25;
  long long v26 = *(_OWORD *)(v11 + 232);
  v44[4] = *(_OWORD *)(v11 + 216);
  v44[5] = v26;
  long long v27 = *(_OWORD *)(v11 + 168);
  v44[0] = *(_OWORD *)(v11 + 152);
  v44[1] = v27;
  long long v28 = *(_OWORD *)(v11 + 264);
  long long v29 = *(_OWORD *)(v11 + 280);
  v44[6] = v24;
  v44[7] = v28;
  v45[0] = v29;
  *(_OWORD *)((char *)v45 + 9) = *(_OWORD *)(v11 + 289);
  memcpy(v42, a1, 0x129uLL);
  if ((PositionState.dispatchContainerSizeChange(context:)((uint64_t)v42) & 1) == 0)
  {
    uint64_t v30 = AGGraphGetValue();
    uint64_t v31 = *(void *)v30;
    uint64_t v37 = *(void *)(v30 + 8);
    uint64_t v32 = *(void *)(v30 + 16);
    unsigned __int8 v33 = *(unsigned char *)(v30 + 24);
    uint64_t v34 = *(unsigned int *)(v30 + 28);
    uint64_t v35 = *(void *)AGGraphGetValue();
    swift_bridgeObjectRetain();
    swift_retain();
    LOBYTE(v42[0]) = v33;
    char v36 = a6(a1, v31, v37, v32, v33 | (unint64_t)(v34 << 32), v35);
    swift_bridgeObjectRelease();
    swift_release();
    if (v36)
    {
      v39(v42, a1, v46, a2, v38);
      outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v42, (uint64_t)v43, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
      outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v43, (uint64_t)v44, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
      if (_s7SwiftUI28_LazyLayout_PlacementContextVSgWOg((uint64_t)v44) != 1)
      {
        memcpy(v42, v11, 0x149uLL);
        outlined retain of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v42);
        v40(0x2077656E20726F66, 0xEF6469206E69616DLL);
        outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v42);
      }
      goto LABEL_10;
    }
LABEL_15:
    if (v11[152] != 1)
    {
      v39(v42, a1, v46, a2, v38);
      outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v42, (uint64_t)v43, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
      outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v43, (uint64_t)v44, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
      if (_s7SwiftUI28_LazyLayout_PlacementContextVSgWOg((uint64_t)v44) != 1)
      {
        memcpy(v42, v11, 0x149uLL);
        outlined retain of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v42);
        v40(0xD000000000000011, 0x8000000188328B40);
        outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v42);
      }
      outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v43, v41, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
      uint64_t result = outlined destroy of ScrollPosition((uint64_t)v46);
      goto LABEL_5;
    }
    outlined destroy of ScrollPosition((uint64_t)v46);
    _s7SwiftUI28_LazyLayout_PlacementContextVSgWOi0_((uint64_t)v42);
    uint64_t v16 = v41;
LABEL_4:
    uint64_t result = outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v42, v16, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
LABEL_5:
    v11[152] = 1;
    return result;
  }
  v39(v42, a1, v46, a2, v38);
  outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v42, (uint64_t)v43, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
  outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v43, (uint64_t)v44, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
  if (_s7SwiftUI28_LazyLayout_PlacementContextVSgWOg((uint64_t)v44) != 1)
  {
    memcpy(v42, v11, 0x149uLL);
    outlined retain of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v42);
    v40(0xD000000000000014, 0x8000000188328B20);
    outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v42);
  }
LABEL_10:
  outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v43, v41, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
  uint64_t result = outlined destroy of ScrollPosition((uint64_t)v46);
  v11[152] = 1;
  return result;
}

uint64_t specialized LazySubviewPlacements.makeDefaultPlacementContext(_:position:matchingID:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X4>, uint64_t (*a6)(void)@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(uint64_t)@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10 = v9;
  uint64_t v13 = a2;
  double v15 = *((double *)a1 + 11);
  double v16 = *((double *)a1 + 12);
  long long v17 = *(_OWORD *)(a1 + 27);
  long long v18 = *(_OWORD *)(a1 + 31);
  long long v127 = *(_OWORD *)(a1 + 29);
  long long v128 = v18;
  uint64_t v19 = (long long *)(a1 + 21);
  long long v129 = *(_OWORD *)(a1 + 33);
  long long v20 = *(_OWORD *)(a1 + 23);
  long long v123 = *(_OWORD *)(a1 + 21);
  long long v124 = v20;
  long long v125 = *(_OWORD *)(a1 + 25);
  long long v126 = v17;
  uint64_t v21 = (void *)a1[35];
  unint64_t v22 = a1[36];
  char v122 = *((unsigned char *)a1 + 296);
  outlined init with copy of ScrollPosition.Storage(a2, (uint64_t)v119);
  double v23 = *(double *)v119;
  switch(v121)
  {
    case 1:
      memcpy(__dst, (const void *)v10, 0x149uLL);
      long long v45 = v19[3];
      long long v46 = v19[5];
      v118[4] = v19[4];
      v118[5] = v46;
      long long v47 = v19[5];
      v118[6] = v19[6];
      long long v48 = v19[1];
      v118[0] = *v19;
      v118[1] = v48;
      long long v49 = v19[3];
      long long v51 = *v19;
      long long v50 = v19[1];
      v118[2] = v19[2];
      v118[3] = v49;
      v114[4] = v118[4];
      v114[5] = v47;
      v114[6] = v19[6];
      v114[0] = v51;
      v114[1] = v50;
      v114[2] = v118[2];
      v114[3] = v45;
      outlined retain of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)__dst);
      ScrollGeometry.targetRect(edge:)();
      double v53 = v52;
      double v55 = v54;
      ScrollGeometry.visibleRect.getter();
      double v57 = v56;
      double v59 = v58;
      outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)__dst);
      double v60 = v53 - v57;
      double v61 = v55 - v59;
      goto LABEL_17;
    case 2:
      double v15 = *((double *)v119 + 1);
      goto LABEL_13;
    case 3:
LABEL_13:
      long long v62 = v19[5];
      __dst[4] = v19[4];
      __dst[5] = v62;
      __dst[6] = v19[6];
      long long v63 = v19[1];
      __dst[0] = *v19;
      __dst[1] = v63;
      long long v64 = v19[2];
      __dst[3] = v19[3];
      __dst[2] = v64;
      ScrollGeometry.visibleRect.getter();
      double v60 = v23 - v65;
      double v61 = v15 - v66;
      goto LABEL_17;
    case 4:
      long long v67 = v19[5];
      __dst[4] = v19[4];
      __dst[5] = v67;
      __dst[6] = v19[6];
      long long v68 = v19[1];
      __dst[0] = *v19;
      __dst[1] = v68;
      long long v69 = v19[2];
      __dst[3] = v19[3];
      __dst[2] = v69;
      ScrollGeometry.visibleRect.getter();
      double v60 = v16 - v70;
      double v61 = v23 - v71;
      goto LABEL_17;
    case 5:
      goto LABEL_19;
    default:
      long long v115 = v119[0];
      long long v116 = v119[1];
      *(_OWORD *)CGSize v117 = *(_OWORD *)v120;
      *(_OWORD *)&v117[9] = *(_OWORD *)&v120[9];
      *(void *)&__dst[0] = a3;
      *((void *)&__dst[0] + 1) = a4;
      uint64_t v24 = _ViewList_ID.allExplicitIDs.getter();
      uint64_t v112 = *(void *)(v24 + 16);
      if (!v112)
      {
        swift_bridgeObjectRelease();
        outlined destroy of ScrollPosition.ViewID((uint64_t)&v115);
LABEL_19:
        _s7SwiftUI28_LazyLayout_PlacementContextVSgWOi0_((uint64_t)__dst);
        uint64_t v72 = __dst;
        return outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v72, a9, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
      }
      uint64_t v96 = a9;
      uint64_t v25 = 0;
      double v26 = 0.0;
      uint64_t v27 = 0;
      char v28 = 1;
      do
      {
        *(void *)&v114[0] = *(void *)(v24 + 8 * v27 + 32);
        swift_retain();
        AnyHashable2.anyValue.getter();
        __swift_project_boxed_opaque_existential_1(__dst, *((uint64_t *)&__dst[1] + 1));
        uint64_t v29 = *(void *)(v13 + 64);
        uint64_t DynamicType = swift_getDynamicType();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)__dst);
        if (v29 == MEMORY[0x1E4FBB960] || DynamicType == v29)
        {
          uint64_t v32 = *((void *)&v116 + 1);
          uint64_t v110 = *(void *)v117;
          long long v108 = __swift_project_boxed_opaque_existential_1(&v115, *((uint64_t *)&v116 + 1));
          memcpy(__dst, (const void *)v10, 0x149uLL);
          memcpy(v114, (const void *)v10, 0x149uLL);
          memcpy(v118, a1, 0x129uLL);
          uint64_t v33 = v24;
          uint64_t v34 = v10;
          uint64_t v35 = *(void *)&v117[8];
          uint64_t v36 = *(void *)&v117[16];
          uint64_t v37 = v13;
          int v38 = v117[24];
          outlined retain of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)__dst);
          type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazySubviewPlacements);
          uint64_t v39 = v36;
          uint64_t v10 = v34;
          uint64_t v24 = v33;
          int v40 = v38;
          uint64_t v13 = v37;
          uint64_t v25 = LazySubviewPlacements.makeViewIDTranslation<A>(_:viewID:anchor:)(v118, (uint64_t)v108, v35, v39, v40, v41, v32, v110);
          double v26 = v42;
          char v44 = v43;
          swift_release();
          char v28 = v44 & 1;
          outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)__dst);
        }
        else
        {
          swift_release();
        }
        ++v27;
      }
      while (v112 != v27);
      swift_bridgeObjectRelease();
      outlined destroy of ScrollPosition.ViewID((uint64_t)&v115);
      a9 = v96;
      if (v28) {
        goto LABEL_19;
      }
      *(void *)&double v60 = v25;
      double v61 = v26;
LABEL_17:
      if (fabs(v60) < 0.01 && fabs(v61) < 0.01) {
        goto LABEL_19;
      }
      memcpy(__dst, (const void *)v10, 0x149uLL);
      uint64_t v73 = outlined retain of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)__dst);
      char v74 = a8(v73);
      outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)__dst);
      if (v74)
      {
        char v75 = v122;
        int v76 = *((_DWORD *)a1 + 12);
        uint64_t v111 = a1[5];
        uint64_t v113 = a1[4];
        long long v109 = *((_OWORD *)a1 + 1);
        v114[4] = v127;
        v114[5] = v128;
        v114[6] = v129;
        v114[0] = v123;
        v114[1] = v124;
        v114[2] = v125;
        v114[3] = v126;
        uint64_t v103 = a1[1];
        double v105 = *(double *)a1;
        memcpy(v118, a1, 0x129uLL);
        ScrollGeometry.visibleRect.getter();
        double v97 = v78;
        double v99 = v77;
        ScrollGeometry.translate(by:limit:)((CGSize)__PAIR128__(*(unint64_t *)&v61, *(unint64_t *)&v60), (CGSize)__PAIR128__(v22, (unint64_t)v21));
        ScrollGeometry.translate(by:limit:)((CGSize)__PAIR128__(*(unint64_t *)&v61, *(unint64_t *)&v60), (CGSize)__PAIR128__(v22, (unint64_t)v21));
        long long v79 = *(long long *)((char *)&v118[10] + 8);
        __srca = v21;
        uint64_t v80 = *((void *)&v118[11] + 1);
        unint64_t v101 = v22;
        uint64_t v81 = *(void *)&v118[12];
        long long v82 = *(long long *)((char *)&v118[12] + 8);
        long long v83 = *(long long *)((char *)&v118[13] + 8);
        uint64_t v94 = *(void *)&v118[15];
        uint64_t v95 = *((void *)&v118[14] + 1);
        uint64_t v92 = *(void *)&v118[16];
        uint64_t v93 = *((void *)&v118[15] + 1);
        uint64_t v90 = *(void *)&v118[17];
        uint64_t v91 = *((void *)&v118[16] + 1);
        v114[0] = *(long long *)((char *)&v118[10] + 8);
        v114[1] = *(long long *)((char *)&v118[11] + 8);
        v114[2] = *(long long *)((char *)&v118[12] + 8);
        v114[3] = *(long long *)((char *)&v118[13] + 8);
        v114[4] = *(long long *)((char *)&v118[14] + 8);
        v114[5] = *(long long *)((char *)&v118[15] + 8);
        v114[6] = *(long long *)((char *)&v118[16] + 8);
        ScrollGeometry.visibleRect.getter();
        *(double *)(v10 + 288) = v84 - v99;
        *(double *)(v10 + 296) = v85 - v97;
        *(unsigned char *)(v10 + 304) = 0;
        *(double *)long long v114 = v105;
        *((void *)&v114[0] + 1) = v103;
        v114[1] = v109;
        *(void *)&v114[2] = v113;
        *((void *)&v114[2] + 1) = v111;
        LODWORD(v114[3]) = v76;
        *(_OWORD *)((char *)&v114[3] + 8) = *(long long *)((char *)&v118[3] + 8);
        *(_OWORD *)((char *)&v114[4] + 8) = *(long long *)((char *)&v118[4] + 8);
        *(_OWORD *)((char *)&v114[5] + 8) = *(long long *)((char *)&v118[5] + 8);
        *(_OWORD *)((char *)&v114[6] + 8) = *(long long *)((char *)&v118[6] + 8);
        *(_OWORD *)((char *)&v114[7] + 8) = *(long long *)((char *)&v118[7] + 8);
        *(_OWORD *)((char *)&v114[8] + 8) = *(long long *)((char *)&v118[8] + 8);
        *(_OWORD *)((char *)&v114[9] + 8) = *(long long *)((char *)&v118[9] + 8);
        *(_OWORD *)((char *)&v114[10] + 8) = v79;
        *((void *)&v114[11] + 1) = v80;
        *(void *)&v114[12] = v81;
        *(_OWORD *)((char *)&v114[12] + 8) = v82;
        *(_OWORD *)((char *)&v114[13] + 8) = v83;
        *((void *)&v114[14] + 1) = v95;
        *(void *)&v114[15] = v94;
        *((void *)&v114[15] + 1) = v93;
        *(void *)&v114[16] = v92;
        *((void *)&v114[16] + 1) = v91;
        *(void *)&v114[17] = v90;
        *((void *)&v114[17] + 1) = __srca;
        *(void *)&v114[18] = v101;
        BYTE8(v114[18]) = v75;
        destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v114, v86, v87, v88);
      }
      else
      {
        _s7SwiftUI28_LazyLayout_PlacementContextVSgWOi0_((uint64_t)v114);
      }
      uint64_t v72 = v114;
      return outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v72, a9, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
  }
}

uint64_t specialized PositionState.dispatchSubviewsChange<A>(context:layout:cache:)(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  AGGraphGetValue();
  uint64_t result = 0;
  if (v7)
  {
    uint64_t v8 = *(void *)(v3 + 128);
    if (v8)
    {
      uint64_t v9 = *(void *)(v3 + 120);
      uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)a3 + 280);
      swift_bridgeObjectRetain();
      v10(MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC848] + 8);
      v20[0] = *(void *)a1;
      LODWORD(v20[1]) = a1[2];
      int v11 = SizeAndSpacingContext.context.getter();
      LazyLayoutViewCache.subviews(context:)(v11, (uint64_t)v19);
      uint64_t v12 = 0;
      char v13 = 1;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      uint64_t v18 = 0;
      memcpy(v20, a1, 0x129uLL);
      specialized FixedSizeLazyLayout<>.estimatedPlacement(subviews:context:cache:in:)((uint64_t)v19, (uint64_t)v20);
      swift_release();
      outlined consume of _ViewList_ID??(0, 1);
      outlined consume of _ViewList_ID??(v9, v8);
      outlined destroy of _LazyLayout_Subviews((uint64_t)v19);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

{
  uint64_t v3;
  uint64_t result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  int v11;
  uint64_t v12;
  char v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  uint64_t v18;
  unsigned char v19[120];
  void v20[38];

  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  AGGraphGetValue();
  uint64_t result = 0;
  if (v7)
  {
    uint64_t v8 = *(void *)(v3 + 128);
    if (v8)
    {
      uint64_t v9 = *(void *)(v3 + 120);
      uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)a3 + 280);
      swift_bridgeObjectRetain();
      v10(MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC848] + 8);
      v20[0] = *(void *)a1;
      LODWORD(v20[1]) = a1[2];
      int v11 = SizeAndSpacingContext.context.getter();
      LazyLayoutViewCache.subviews(context:)(v11, (uint64_t)v19);
      uint64_t v12 = 0;
      char v13 = 1;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      uint64_t v18 = 0;
      memcpy(v20, a1, 0x129uLL);
      specialized FixedSizeLazyLayout<>.estimatedPlacement(subviews:context:cache:in:)((uint64_t)v19, (uint64_t)v20);
      swift_release();
      outlined consume of _ViewList_ID??(0, 1);
      outlined consume of _ViewList_ID??(v9, v8);
      outlined destroy of _LazyLayout_Subviews((uint64_t)v19);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t specialized PositionState.dispatchSubviewsChange<A>(context:layout:cache:)(void *__src, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void (*v18)(_OWORD *__return_ptr, uint64_t, uint64_t);
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  void v25[12];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  uint64_t v35;
  unsigned char v36[16];
  void v37[13];
  _OWORD v38[7];
  uint64_t v39;
  void v40[38];
  _OWORD v41[7];
  uint64_t v42;
  unsigned char v43[297];

  memcpy(v43, __src, sizeof(v43));
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  AGGraphGetValue();
  uint64_t result = 0;
  if (v14)
  {
    uint64_t v15 = *(void *)(v6 + 128);
    if (v15)
    {
      double v23 = *(void *)(v6 + 120);
      type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for _LazyStack_Cache<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LazyStack_Cache);
      uint64_t v17 = v16;
      uint64_t v24 = a3;
      uint64_t v18 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(void *)a6 + 280);
      swift_bridgeObjectRetain();
      v18(v38, v17, v17);
      v40[0] = *__src;
      LODWORD(v40[1]) = *((_DWORD *)__src + 2);
      uint64_t v19 = SizeAndSpacingContext.context.getter();
      LazyLayoutViewCache.subviews(context:)(v19, (uint64_t)v36);
      uint64_t v29 = 0;
      uint64_t v30 = 1;
      uint64_t v31 = 0u;
      uint64_t v32 = 0u;
      uint64_t v33 = 0u;
      uint64_t v34 = 0u;
      uint64_t v35 = 0;
      memcpy(v40, v43, 0x129uLL);
      v41[4] = v38[4];
      v41[5] = v38[5];
      v41[6] = v38[6];
      double v42 = v39;
      v41[0] = v38[0];
      v41[1] = v38[1];
      v41[2] = v38[2];
      v41[3] = v38[3];
      long long v20 = specialized LazyStack<>.estimatedPlacement(subviews:context:cache:in:)((uint64_t)v36, v40, (uint64_t)v41, (uint64_t)&v29, a2, v24, a4, a5 & 0xFFFFFFFF00000001, (void (*)(_OWORD *__return_ptr, uint64_t, void *, _OWORD *, uint64_t, uint64_t, uint64_t, unint64_t))specialized LazyStack<>.resolvedPlacerProperties(subviews:context:cache:), (void (*)(unsigned char *, _OWORD *))outlined init with copy of StackPlacement<LazyHGridLayout>, (void (*)(_OWORD *))outlined destroy of StackPlacement<LazyHGridLayout>, (uint64_t (*)(uint64_t, void *, _OWORD *, void *, long long *))specialized LazyStack<>.resolveIndexAndPosition(subviews:context:cache:placer:properties:), (void (*)(uint64_t, uint64_t, uint64_t, BOOL, void, double))specialized StackPlacement.place(subviews:from:position:stopping:style:), (uint64_t (*)(void))type metadata accessor for (StackPlacement<LazyHGridLayout>, PlacementProperties<LazyHGridLayout>)?, (uint64_t (*)(void))type metadata accessor for (StackPlacement<LazyHGridLayout>, PlacementProperties<LazyHGridLayout>));
      if (v30)
      {
        swift_release();
        outlined release of _LazyStack_Cache<LazyHGridLayout>((uint64_t)v41);
        outlined consume of _ViewList_ID??(0, 1);
        outlined consume of _ViewList_ID??(v23, v15);
        goto LABEL_10;
      }
      uint64_t v27 = 0;
      char v28 = v29;
      double v26 = 0;
      MEMORY[0x1F4188790](v20);
      v25[11] = v37[11];
      uint64_t v21 = outlined init with copy of _ViewList_Node((uint64_t)v37, (uint64_t)v25);
      MEMORY[0x1F4188790](v21);
      swift_bridgeObjectRetain();
      _ViewList_Node.applyNodes(from:style:transform:to:)();
      outlined destroy of _ViewList_Node((uint64_t)v25);
      swift_bridgeObjectRelease();
      if (!v27)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
      v25[0] = v26;
      v25[1] = v27;
      double v26 = v23;
      uint64_t v27 = v15;
      swift_bridgeObjectRetain_n();
      unint64_t v22 = static _ViewList_ID.== infix(_:_:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      if ((v22 & 1) == 0)
      {
LABEL_10:
        outlined destroy of _LazyLayout_Subviews((uint64_t)v36);
        return 1;
      }
      outlined destroy of _LazyLayout_Subviews((uint64_t)v36);
    }
    return 0;
  }
  return result;
}

{
  uint64_t v6;
  uint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_OWORD *__return_ptr, uint64_t, uint64_t);
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  void v25[12];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  uint64_t v35;
  unsigned char v36[16];
  void v37[13];
  _OWORD v38[7];
  uint64_t v39;
  void v40[38];
  _OWORD v41[7];
  uint64_t v42;
  unsigned char v43[297];

  memcpy(v43, __src, sizeof(v43));
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  AGGraphGetValue();
  uint64_t result = 0;
  if (v14)
  {
    uint64_t v15 = *(void *)(v6 + 128);
    if (v15)
    {
      double v23 = *(void *)(v6 + 120);
      type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for _LazyStack_Cache<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LazyStack_Cache);
      uint64_t v17 = v16;
      uint64_t v24 = a3;
      uint64_t v18 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(void *)a6 + 280);
      swift_bridgeObjectRetain();
      v18(v38, v17, v17);
      v40[0] = *__src;
      LODWORD(v40[1]) = *((_DWORD *)__src + 2);
      uint64_t v19 = SizeAndSpacingContext.context.getter();
      LazyLayoutViewCache.subviews(context:)(v19, (uint64_t)v36);
      uint64_t v29 = 0;
      uint64_t v30 = 1;
      uint64_t v31 = 0u;
      uint64_t v32 = 0u;
      uint64_t v33 = 0u;
      uint64_t v34 = 0u;
      uint64_t v35 = 0;
      memcpy(v40, v43, 0x129uLL);
      v41[4] = v38[4];
      v41[5] = v38[5];
      v41[6] = v38[6];
      double v42 = v39;
      v41[0] = v38[0];
      v41[1] = v38[1];
      v41[2] = v38[2];
      v41[3] = v38[3];
      long long v20 = specialized LazyStack<>.estimatedPlacement(subviews:context:cache:in:)((uint64_t)v36, v40, (uint64_t)v41, (uint64_t)&v29, a2, v24, a4, a5 & 0xFFFFFFFF00000001, (void (*)(_OWORD *__return_ptr, uint64_t, void *, _OWORD *, uint64_t, uint64_t, uint64_t, unint64_t))specialized LazyStack<>.resolvedPlacerProperties(subviews:context:cache:), (void (*)(unsigned char *, _OWORD *))outlined init with copy of StackPlacement<LazyVGridLayout>, (void (*)(_OWORD *))outlined destroy of StackPlacement<LazyVGridLayout>, (uint64_t (*)(uint64_t, void *, _OWORD *, void *, long long *))specialized LazyStack<>.resolveIndexAndPosition(subviews:context:cache:placer:properties:), (void (*)(uint64_t, uint64_t, uint64_t, BOOL, void, double))specialized StackPlacement.place(subviews:from:position:stopping:style:), (uint64_t (*)(void))type metadata accessor for (StackPlacement<LazyVGridLayout>, PlacementProperties<LazyVGridLayout>)?, (uint64_t (*)(void))type metadata accessor for (StackPlacement<LazyVGridLayout>, PlacementProperties<LazyVGridLayout>));
      if (v30)
      {
        swift_release();
        outlined release of _LazyStack_Cache<LazyHGridLayout>((uint64_t)v41);
        outlined consume of _ViewList_ID??(0, 1);
        outlined consume of _ViewList_ID??(v23, v15);
        goto LABEL_10;
      }
      uint64_t v27 = 0;
      char v28 = v29;
      double v26 = 0;
      MEMORY[0x1F4188790](v20);
      v25[11] = v37[11];
      uint64_t v21 = outlined init with copy of _ViewList_Node((uint64_t)v37, (uint64_t)v25);
      MEMORY[0x1F4188790](v21);
      swift_bridgeObjectRetain();
      _ViewList_Node.applyNodes(from:style:transform:to:)();
      outlined destroy of _ViewList_Node((uint64_t)v25);
      swift_bridgeObjectRelease();
      if (!v27)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
      v25[0] = v26;
      v25[1] = v27;
      double v26 = v23;
      uint64_t v27 = v15;
      swift_bridgeObjectRetain_n();
      unint64_t v22 = static _ViewList_ID.== infix(_:_:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      if ((v22 & 1) == 0)
      {
LABEL_10:
        outlined destroy of _LazyLayout_Subviews((uint64_t)v36);
        return 1;
      }
      outlined destroy of _LazyLayout_Subviews((uint64_t)v36);
    }
    return 0;
  }
  return result;
}

BOOL specialized closure #1 in LazySubviewPlacements.makeSizeChangeTranslation(placements:context:axes:)(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 32) == *MEMORY[0x1E4F4E7A0])
  {
    default argument 1 of ScrollPhaseState.init(phase:velocity:)();
    uint64_t Value = &v3;
    ScrollPhaseState.init(phase:velocity:)();
  }
  else
  {
    uint64_t Value = (char *)AGGraphGetValue();
  }
  return *Value == 4;
}

void *specialized closure #2 in LazySubviewPlacements.makeSizeChangeTranslation(placements:context:axes:)(void *result, unint64_t *a2, uint64_t a3, _DWORD *a4, int *a5, _DWORD *a6, int *a7)
{
  uint64_t v10 = result[1];
  unint64_t v11 = *a2;
  unint64_t v12 = a2[1];
  int v13 = *a5;
  if ((*a5 & ~*a4) == 0) {
    LOBYTE(v13) = 0;
  }
  char v14 = v13 | *a4;
  if (*(unsigned char *)(v10 + 165) != 1 || (v14 & 1) == 0)
  {
    int v16 = v14 & 2;
    if (*(unsigned char *)(v10 + 166) != 1 || v16 == 0)
    {
      if ((*result & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (*result < *(void *)(*(void *)(a3 + 136) + 16))
      {
        uint64_t result = (void *)distance(_:_:)();
        double v19 = v18;
        goto LABEL_17;
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
  }
  double v19 = INFINITY;
LABEL_17:
  int v20 = *a7;
  if ((*a7 & ~*a6) == 0) {
    LOBYTE(v20) = 0;
  }
  char v21 = v20 | *a6;
  BOOL v22 = *(unsigned char *)(v12 + 165) != 1 || (v21 & 1) == 0;
  if (!v22 || ((int v23 = v21 & 2, *(unsigned char *)(v12 + 166) == 1) ? (v24 = v23 == 0) : (v24 = 1), !v24))
  {
    double v25 = INFINITY;
    return (void *)(v19 < v25);
  }
  if ((v11 & 0x8000000000000000) != 0) {
    goto LABEL_36;
  }
  if (v11 < *(void *)(*(void *)(a3 + 136) + 16))
  {
    distance(_:_:)();
    return (void *)(v19 < v25);
  }
LABEL_37:
  __break(1u);
  return result;
}

void specialized PropertiesTransform.updateValue()()
{
  unint64_t v1 = v0;
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  long long v131 = *(_OWORD *)AGGraphGetValue();
  char v2 = EnvironmentValues.accessibilityEnabled.getter();
  char v3 = (int *)MEMORY[0x1E4F4E7A0];
  if ((v2 & 1) == 0)
  {
    if (*(_DWORD *)(v1 + 36) != *MEMORY[0x1E4F4E7A0])
    {
      uint64_t Value = (long long *)AGGraphGetValue();
      goto LABEL_11;
    }
    if (one-time initialization token for defaultValue == -1)
    {
LABEL_9:
      uint64_t Value = &static AccessibilityNodesKey.defaultValue;
LABEL_11:
      uint64_t v18 = *((void *)Value + 1);
      *(void *)&long long v131 = *(void *)Value;
      *((void *)&v131 + 1) = v18;
      AGGraphSetOutputValue();
      return;
    }
LABEL_83:
    swift_once();
    goto LABEL_9;
  }
  if (*(_DWORD *)(v1 + 80) != *(_DWORD *)AGGraphGetValue() >> 1)
  {

    *(void *)(v1 + 64) = 0;
    swift_unknownObjectWeakAssign();
    *(_DWORD *)(v1 + 80) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  uint64_t v4 = AGGraphGetValue();
  uint64_t v5 = *(void **)v4;
  uint64_t v6 = *(void *)(v4 + 8);
  char v7 = (unint64_t *)AGGraphGetValue();
  char v9 = v8;
  unint64_t v10 = *v7;
  unint64_t v11 = v7[1];
  Currentint Attribute = AGGraphGetCurrentAttribute();
  int v13 = *v3;
  if (CurrentAttribute == *v3)
  {
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  swift_retain();
  id v120 = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  AccessibilityAttachmentToken.init<A>(_:)();
  uint64_t v124 = v131;
  char v125 = BYTE8(v131);
  char v114 = v9;
  if (*(_DWORD *)(v1 + 36) == v13)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    int v16 = 0;
  }
  else
  {
    uint64_t v15 = *(void *)(AGGraphGetValue() + 8);
    int v16 = v19 & 1;
    uint64_t v14 = swift_bridgeObjectRetain();
  }
  if (v14) {
    int v20 = v16;
  }
  else {
    int v20 = 0;
  }
  if (v14) {
    uint64_t v21 = v15;
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v109 = v21;
  if (v14) {
    BOOL v22 = (void *)v14;
  }
  else {
    BOOL v22 = (void *)MEMORY[0x1E4FBC860];
  }
  type metadata accessor for ViewGraph();
  v121._rawuint64_t Value = v22;
  uint64_t v23 = swift_bridgeObjectRetain_n();
  uint64_t v24 = MEMORY[0x18C114EE0](v23) + 200;
  swift_beginAccess();
  uint64_t v25 = MEMORY[0x18C119DF0](v24);
  swift_release();
  int v113 = v20;
  if (!v25) {
    goto LABEL_31;
  }
  swift_getObjectType();
  uint64_t v26 = swift_conformsToProtocol2();
  if (v26) {
    uint64_t v27 = v26;
  }
  else {
    uint64_t v27 = 0;
  }
  if (v26) {
    uint64_t v28 = v25;
  }
  else {
    uint64_t v28 = 0;
  }
  if (!v28)
  {
    swift_unknownObjectRelease();
LABEL_31:
    uint64_t v27 = 0;
  }
  int v115 = v13;
  uint64_t v29 = *(void *)(v1 + 64);
  unint64_t v118 = v11;
  if (v29)
  {
    uint64_t v30 = *(char **)(v1 + 64);
    uint64_t v31 = v30;
  }
  else
  {
    objc_allocWithZone((Class)type metadata accessor for AccessibilityNode());
    uint64_t v32 = swift_unknownObjectRetain();
    uint64_t v31 = (char *)specialized AccessibilityNode.init(viewRendererHost:isFromDisplayList:)(v32, v27, 0);
    swift_unknownObjectRelease();
    uint64_t v30 = 0;
  }
  uint64_t v33 = v30;
  objc_msgSend(v120, sel_setAccessibilityNodeForPlatformElement_, v31);
  swift_unknownObjectRelease();
  long long v123 = v31;
  if (v29 && v31 == (char *)v33)
  {
    swift_bridgeObjectRelease();
    if ((v114 & 1) == 0)
    {
      char v34 = 0;
      goto LABEL_105;
    }
    goto LABEL_95;
  }
  rawuint64_t Value = (unint64_t)v121._rawValue;
  if (AGGraphGetOutputValue())
  {
    if (v29)
    {
      swift_bridgeObjectRelease();
      goto LABEL_43;
    }
    if ((unint64_t)v121._rawValue >> 62) {
      goto LABEL_85;
    }
    uint64_t v37 = *(void *)(((unint64_t)v121._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v37)
    {
LABEL_47:
      unint64_t v38 = 0;
      uint64_t v116 = v37;
      unint64_t v117 = rawValue & 0xC000000000000001;
      long long v107 = (char *)(rawValue + 32);
      uint64_t v108 = rawValue & 0xFFFFFFFFFFFFFF8;
      uint64_t v105 = v6;
      unint64_t v111 = v1;
      unint64_t v112 = v10;
      uint64_t v110 = v33;
      do
      {
        if (v117)
        {
          uint64_t v39 = (char *)MEMORY[0x18C117680](v38, rawValue);
          BOOL v40 = __OFADD__(v38, 1);
          unint64_t v41 = v38 + 1;
          if (v40) {
            goto LABEL_78;
          }
        }
        else
        {
          if (v38 >= *(void *)(v108 + 16)) {
            goto LABEL_80;
          }
          uint64_t v39 = (char *)*(id *)&v107[8 * v38];
          BOOL v40 = __OFADD__(v38, 1);
          unint64_t v41 = v38 + 1;
          if (v40) {
            goto LABEL_78;
          }
        }
        uint64_t v42 = v6;
        unint64_t v122 = v41;
        char v43 = &v39[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
        char v44 = v39;
        swift_beginAccess();
        uint64_t v45 = *(void *)v43;
        uint64_t v46 = *(void *)(*(void *)v43 + 16);
        if (v46)
        {
          uint64_t v119 = v44;
          swift_bridgeObjectRetain();
          unint64_t v1 = 0;
          long long v47 = (unsigned __int8 *)(v45 + 64);
          uint64_t v33 = 40;
          long long v48 = (unsigned __int8 *)(v45 + 64);
          while (1)
          {
            int v50 = *v48;
            v48 += 40;
            char v49 = v50;
            if (v50 != 255)
            {
              *(void *)&long long v129 = *((void *)v47 - 1);
              BYTE8(v129) = v49;
              *(void *)&long long v130 = v124;
              BYTE8(v130) = v125;
              if (static AccessibilityAttachmentToken.== infix(_:_:)()) {
                break;
              }
            }
            ++v1;
            v33 += 40;
            long long v47 = v48;
            if (v46 == v1)
            {

              swift_bridgeObjectRelease();
              unint64_t v1 = v111;
              unint64_t v10 = v112;
              uint64_t v31 = v123;
              uint64_t v33 = v110;
              goto LABEL_49;
            }
          }
          swift_bridgeObjectRelease();
          uint64_t v51 = *(void *)v43;
          unint64_t v10 = *(void *)(*(void *)v43 + 16);
          if (v10 < v1) {
            goto LABEL_81;
          }
          uint64_t v6 = v42;
          swift_beginAccess();
          unint64_t v52 = *(void *)(*(void *)v43 + 16);
          if (v52 < v1) {
            goto LABEL_82;
          }
          swift_bridgeObjectRetain();
          specialized Array.replaceSubrange<A>(_:with:)(v1, v52);
          swift_endAccess();
          double v53 = (void *)MEMORY[0x1E4FBC860];
          uint64_t v54 = v10 - v1;
          if (v10 != v1)
          {
            uint64_t v106 = v51;
            *(void *)&long long v129 = MEMORY[0x1E4FBC860];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v54 & ~(v54 >> 63), 0);
            if ((v54 & 0x8000000000000000) == 0)
            {
              double v53 = (void *)v129;
              if (v10 <= v1) {
                unint64_t v55 = v1;
              }
              else {
                unint64_t v55 = v10;
              }
              double v56 = (void **)(v106 + v33);
              while (v1 != v55)
              {
                uint64_t v57 = (uint64_t)*(v56 - 1);
                double v58 = *v56;
                *(void *)&long long v129 = v53;
                unint64_t v59 = v53[2];
                unint64_t v60 = v53[3];
                swift_bridgeObjectRetain();
                id v61 = v58;
                if (v59 >= v60 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v60 > 1), v59 + 1, 1);
                  double v53 = (void *)v129;
                }
                v53[2] = v59 + 1;
                long long v62 = &v53[2 * v59];
                v62[4] = v57;
                v62[5] = v58;
                --v55;
                --v10;
                v56 += 5;
                if (v1 == v10)
                {
                  uint64_t v6 = v105;
                  goto LABEL_76;
                }
              }
              __break(1u);
LABEL_78:
              __break(1u);
              goto LABEL_79;
            }
            __break(1u);
LABEL_85:
            swift_bridgeObjectRetain();
            rawuint64_t Value = (unint64_t)v121._rawValue;
            uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (!v37) {
              break;
            }
            goto LABEL_47;
          }
LABEL_76:
          static AccessibilityAttachment.combine(_:)(v53, (uint64_t *)&v129);
          swift_bridgeObjectRelease();
          long long v63 = (void *)*((void *)&v129 + 1);
          long long v130 = v129;
          long long v128 = 0uLL;
          AccessibilityNode.scheduleNotifyForAttachmentChange(from:to:)((uint64_t *)&v130, &v128);
          swift_bridgeObjectRelease();

          long long v64 = &v119[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
          uint64_t v65 = *(void *)&v119[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
          double v66 = *(void **)&v119[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
          *long long v64 = 0;
          v64[1] = 0;
          outlined consume of AccessibilityAttachment?(v65, v66);
          v119[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;

          swift_bridgeObjectRelease();
          unint64_t v1 = v111;
          unint64_t v10 = v112;
          rawuint64_t Value = (unint64_t)v121._rawValue;
          uint64_t v31 = v123;
          uint64_t v33 = v110;
        }
        else
        {

LABEL_49:
          uint64_t v6 = v42;
        }
        unint64_t v38 = v122;
      }
      while (v122 != v116);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    if (v29)
    {
LABEL_43:
      uint64_t v36 = v31;

      *(void *)(v1 + 64) = v31;
      if ((v114 & 1) == 0)
      {
        char v34 = 1;
        goto LABEL_105;
      }
      goto LABEL_95;
    }
  }
  if ((v114 & 1) == 0)
  {
    *(void *)&long long v129 = v10;
    *((void *)&v129 + 1) = v118;
    uint64_t v67 = one-time initialization token for configuredForPlatform;
    swift_retain_n();
    swift_retain();
    if (v67 != -1) {
      swift_once();
    }
    uint64_t v68 = static EnvironmentValues.configuredForPlatform;
    if (v10)
    {
      swift_release();
      if (!v68 || v10 != v68) {
        EnvironmentValues._configureForPlatform(traitCollection:)(0);
      }
    }
    else if (static EnvironmentValues.configuredForPlatform)
    {
      swift_retain();
      EnvironmentValues.plist.setter();
    }
    uint64_t v102 = *((void *)&v129 + 1);
    uint64_t v103 = &v31[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment];
    *(void *)uint64_t v103 = v129;
    *((void *)v103 + 1) = v102;
    swift_retain();
    swift_retain();
    swift_release();
    swift_release();
    v31[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedIsPlaceholderOrIgnored] = 2;
    swift_release();
    swift_release();
    uint64_t v104 = v31;

    *(void *)(v1 + 64) = v31;
    goto LABEL_104;
  }
  long long v69 = v31;

  *(void *)(v1 + 64) = v31;
LABEL_95:
  *(void *)&long long v129 = v10;
  *((void *)&v129 + 1) = v118;
  uint64_t v70 = one-time initialization token for configuredForPlatform;
  swift_retain_n();
  swift_retain();
  if (v70 != -1) {
    swift_once();
  }
  uint64_t v71 = static EnvironmentValues.configuredForPlatform;
  if (v10)
  {
    swift_release();
    if (!v71 || v10 != v71) {
      EnvironmentValues._configureForPlatform(traitCollection:)(0);
    }
  }
  else if (static EnvironmentValues.configuredForPlatform)
  {
    swift_retain();
    EnvironmentValues.plist.setter();
  }
  uint64_t v72 = *((void *)&v129 + 1);
  uint64_t v73 = &v31[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment];
  *(void *)uint64_t v73 = v129;
  *((void *)v73 + 1) = v72;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  v31[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedIsPlaceholderOrIgnored] = 2;
  swift_release();
  swift_release();
LABEL_104:
  char v34 = 1;
LABEL_105:
  *(void *)&long long v129 = v6;
  swift_bridgeObjectRetain();
  id v74 = v120;
  AccessibilityAttachment.init(properties:platformElement:)();
  swift_bridgeObjectRelease();
  if (*(_DWORD *)(v1 + 32) == v115) {
    goto LABEL_114;
  }
  uint64_t v75 = AGGraphGetValue();
  uint64_t v77 = *(void *)v75;
  int v76 = *(void **)(v75 + 8);
  if (*(unsigned char *)(v75 + 16))
  {
    if (*(unsigned char *)(v75 + 16) != 1) {
      goto LABEL_114;
    }
    uint64_t v78 = swift_bridgeObjectRetain();
    long long v79 = specialized Sequence.compactMap<A>(_:)(v78);
    static AccessibilityAttachment.combine(_:)(v79, (uint64_t *)&v129);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityAttachment.Tree(v77, v76, 1);
    int v76 = (void *)*((void *)&v129 + 1);
    uint64_t v77 = v129;
  }
  else
  {
    id v80 = v76;
    swift_bridgeObjectRetain();
  }
  *(void *)&long long v129 = v77;
  AccessibilityProperties.merge(with:)((uint64_t *)&v129);
  long long v129 = v130;
  uint64_t v81 = (void *)AccessibilityAttachment.platformElement.getter();

  if (!v81)
  {
    *(void *)&long long v129 = v77;
    *((void *)&v129 + 1) = v76;
    if (AccessibilityAttachment.platformElement.getter()) {
      AccessibilityAttachment.platformElement.setter();
    }
  }
  swift_bridgeObjectRelease();

LABEL_114:
  long long v82 = &v123[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
  swift_beginAccess();
  uint64_t v83 = *(void *)v82;
  uint64_t v84 = *(void *)(v83 + 16);
  if (v84)
  {
    swift_bridgeObjectRetain();
    double v85 = (unsigned __int8 *)(v83 + 64);
    uint64_t v86 = (unsigned __int8 *)(v83 + 64);
    while (1)
    {
      int v88 = *v86;
      v86 += 40;
      char v87 = v88;
      if (v88 != 255)
      {
        *(void *)&long long v128 = *((void *)v85 - 1);
        BYTE8(v128) = v87;
        uint64_t v126 = v124;
        char v127 = v125;
        if (static AccessibilityAttachmentToken.== infix(_:_:)()) {
          break;
        }
      }
      double v85 = v86;
      if (!--v84)
      {
        swift_bridgeObjectRelease();
        goto LABEL_125;
      }
    }
    swift_bridgeObjectRelease();
    long long v128 = v130;
    uint64_t v126 = v124;
    char v127 = v125;
    id v89 = *((id *)&v130 + 1);
    swift_bridgeObjectRetain();
    uint64_t v90 = v123;
    char v91 = specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)((char **)&v128, &v126, 0);

    swift_bridgeObjectRelease();
    if ((v91 & 1) == 0)
    {
      AccessibilityNode.platformElement.getter();
      uint64_t v93 = v92;

      if (!v93)
      {
        uint64_t v94 = (void *)MEMORY[0x18C119DF0](&v123[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent]);

        if (v94) {
          char v95 = v34;
        }
        else {
          char v95 = 1;
        }
        goto LABEL_127;
      }
    }
  }
  else
  {
LABEL_125:
    long long v128 = v130;
    uint64_t v126 = v124;
    char v127 = v125;
    id v89 = *((id *)&v130 + 1);
    swift_bridgeObjectRetain();
    uint64_t v90 = v123;
    specialized AccessibilityNode.addAttachment(_:isInPlatformItemList:token:)((uint64_t *)&v128, &v126);

    swift_bridgeObjectRelease();
  }
  char v95 = 1;
LABEL_127:
  AccessibilityNode.updateChildren(_:)(v121);
  swift_bridgeObjectRelease();
  type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v96 = swift_allocObject();
  *(_OWORD *)(v96 + 16) = xmmword_188351940;
  *(void *)(v96 + 32) = v90;
  *(void *)&long long v128 = v96;
  specialized Array._endMutation()();
  uint64_t v97 = v128;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v95)
  {
    DisplayList.Version.init(forUpdate:)();
    uint64_t v98 = v130;
  }
  else
  {
    if (v113)
    {
      double v99 = *(void **)(v1 + 64);
      if (v99)
      {
        *(void *)(swift_allocObject() + 16) = v99;
        id v100 = v99;
        static Update.enqueueAction(_:)();

        swift_release();
      }
    }
    Outputuint64_t Value = AGGraphGetOutputValue();
    if (OutputValue) {
      uint64_t v98 = *(void *)(OutputValue + 8);
    }
    else {
      uint64_t v98 = v109;
    }
  }
  *(void *)&long long v130 = v97;
  *((void *)&v130 + 1) = v98;
  swift_bridgeObjectRetain();
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t specialized PropertiesTransform.updateValue()()
{
  uint64_t v189 = *MEMORY[0x1E4F143B8];
  long long v187 = *(_OWORD *)AGGraphGetValue();
  if (EnvironmentValues.accessibilityEnabled.getter())
  {
    if (*(_DWORD *)(v0 + 80) != *(_DWORD *)AGGraphGetValue() >> 1)
    {

      *(void *)(v0 + 64) = 0;
      swift_unknownObjectWeakAssign();
      *(_DWORD *)(v0 + 80) = *(_DWORD *)AGGraphGetValue() >> 1;
    }
    uint64_t Value = (unsigned __int8 *)AGGraphGetValue();
    int64_t v2 = *Value;
    int v3 = *((_DWORD *)Value + 1);
    uint64_t v4 = *((void *)Value + 1);
    char v177 = *Value;
    int v178 = v3;
    uint64_t v179 = v4;
    uint64_t v5 = (uint64_t *)AGGraphGetValue();
    char v7 = v6;
    uint64_t v8 = *v5;
    uint64_t v9 = v5[1];
    Currentint Attribute = AGGraphGetCurrentAttribute();
    int v11 = *MEMORY[0x1E4F4E7A0];
    if (CurrentAttribute == *MEMORY[0x1E4F4E7A0]) {
      goto LABEL_89;
    }
    uint64_t v163 = v9;
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v162 = v8;
    swift_retain();
    AccessibilityAttachmentToken.init<A>(_:)();
    uint64_t v175 = v187;
    char v174 = BYTE8(v187);
    uint64_t v12 = v0;
    char v167 = v7;
    if (*(_DWORD *)(v0 + 36) == v11)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      int v15 = 0;
    }
    else
    {
      uint64_t v14 = *(void *)(AGGraphGetValue() + 8);
      int v15 = v19 & 1;
      uint64_t v13 = swift_bridgeObjectRetain();
    }
    if (v13) {
      int v20 = v15;
    }
    else {
      int v20 = 0;
    }
    int v161 = v20;
    LOBYTE(v184) = v2;
    if (v13) {
      uint64_t v21 = v14;
    }
    else {
      uint64_t v21 = 0;
    }
    uint64_t v158 = v21;
    if (v13) {
      v22._rawuint64_t Value = (void *)v13;
    }
    else {
      v22._rawuint64_t Value = (void *)MEMORY[0x1E4FBC860];
    }
    DWORD1(v184) = v3;
    *((void *)&v184 + 1) = v4;
    swift_bridgeObjectRetain_n();
    AccessibilityScrollableModifier.scrollableCollection.getter((uint64_t)&v187);
    uint64_t v23 = v188;
    outlined destroy of ScrollableCollection?((uint64_t)&v187, (uint64_t (*)(void))type metadata accessor for ScrollableCollection?);
    rawuint64_t Value = v22._rawValue;
    LOBYTE(v24) = v174;
    int v172 = v11;
    if (v23 && v2)
    {
      type metadata accessor for ViewGraph();
      uint64_t v25 = MEMORY[0x18C114EE0]() + 200;
      swift_beginAccess();
      uint64_t v26 = MEMORY[0x18C119DF0](v25);
      swift_release();
      if (v26)
      {
        swift_getObjectType();
        uint64_t v27 = swift_conformsToProtocol2();
        if (v27) {
          uint64_t v28 = v27;
        }
        else {
          uint64_t v28 = 0;
        }
        if (v27) {
          uint64_t v29 = v26;
        }
        else {
          uint64_t v29 = 0;
        }
        if (v29)
        {
LABEL_44:
          uint64_t v35 = *(void **)(v12 + 64);
          id v36 = v35;
          uint64_t v37 = v28;
          int64_t v2 = (int64_t)v36;
          unint64_t v38 = AccessibilityScrollableModifier.createOrUpdateNode(viewRendererHost:existingNode:)(v29, v37, v35);

          swift_unknownObjectRelease();
          long long v165 = v38;
          uint64_t v173 = v12;
          if (v35 && v38 == (unsigned char *)v2)
          {
            swift_bridgeObjectRelease();
            uint64_t v30 = v163;
            if ((v167 & 1) == 0)
            {
              char v39 = 0;
              goto LABEL_193;
            }
            goto LABEL_183;
          }
          uint64_t v30 = v163;
          long long v164 = (void *)v2;
          if (AGGraphGetOutputValue())
          {
            if (v35)
            {
              swift_bridgeObjectRelease();
              goto LABEL_53;
            }
            if ((unint64_t)v22._rawValue >> 62) {
              goto LABEL_173;
            }
            uint64_t v41 = *(void *)(((unint64_t)v22._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v41)
            {
LABEL_57:
              unint64_t v42 = 0;
              uint64_t v155 = v41;
              unint64_t v156 = (unint64_t)v22._rawValue & 0xC000000000000001;
              long long v153 = (char *)v22._rawValue + 32;
              uint64_t v154 = (unint64_t)v22._rawValue & 0xFFFFFFFFFFFFFF8;
              do
              {
                if (v156)
                {
                  char v43 = (char *)MEMORY[0x18C117680](v42, v22._rawValue);
                  BOOL v44 = __OFADD__(v42, 1);
                  unint64_t v45 = v42 + 1;
                  if (v44) {
                    goto LABEL_88;
                  }
                }
                else
                {
                  if (v42 >= *(void *)(v154 + 16))
                  {
                    __break(1u);
LABEL_92:
                    swift_bridgeObjectRetain();
                    uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
                    swift_bridgeObjectRelease();
                    if (!v31) {
                      goto LABEL_93;
                    }
LABEL_36:
                    if (v31 < 1) {
                      goto LABEL_171;
                    }
                    for (uint64_t i = 0; i != v31; ++i)
                    {
                      if (((unint64_t)v22._rawValue & 0xC000000000000001) != 0) {
                        id v33 = (id)MEMORY[0x18C117680](i, v22._rawValue);
                      }
                      else {
                        id v33 = *((id *)v22._rawValue + i + 4);
                      }
                      char v34 = v33;
                      swift_unknownObjectWeakAssign();
                    }
                    goto LABEL_93;
                  }
                  char v43 = (char *)*(id *)&v153[8 * v42];
                  BOOL v44 = __OFADD__(v42, 1);
                  unint64_t v45 = v42 + 1;
                  if (v44) {
                    goto LABEL_88;
                  }
                }
                unint64_t v170 = v45;
                uint64_t v46 = &v43[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
                long long v47 = v43;
                swift_beginAccess();
                uint64_t v48 = *(void *)v46;
                int64_t v2 = *(void *)(*(void *)v46 + 16);
                if (v2)
                {
                  char v159 = v47;
                  swift_bridgeObjectRetain();
                  unint64_t v49 = 0;
                  int v50 = (unsigned __int8 *)(v48 + 64);
                  uint64_t v30 = 40;
                  uint64_t v51 = (unsigned __int8 *)(v48 + 64);
                  while (1)
                  {
                    int v53 = *v51;
                    v51 += 40;
                    char v52 = v53;
                    if (v53 != 255)
                    {
                      *(void *)&long long v187 = *((void *)v50 - 1);
                      BYTE8(v187) = v52;
                      *(void *)&long long v184 = v175;
                      BYTE8(v184) = v174;
                      if (static AccessibilityAttachmentToken.== infix(_:_:)()) {
                        break;
                      }
                    }
                    ++v49;
                    v30 += 40;
                    int v50 = v51;
                    if (v2 == v49)
                    {

LABEL_86:
                      swift_bridgeObjectRelease();
                      uint64_t v30 = v163;
                      LOBYTE(v24) = v174;
                      uint64_t v41 = v155;
                      goto LABEL_59;
                    }
                  }
                  swift_bridgeObjectRelease();
                  uint64_t v54 = *(void *)v46;
                  unint64_t v24 = *(void *)(*(void *)v46 + 16);
                  if (v24 < v49)
                  {
                    __break(1u);
                  }
                  else
                  {
                    swift_beginAccess();
                    int64_t v2 = *(void *)(*(void *)v46 + 16);
                    if (v2 >= v49)
                    {
                      swift_bridgeObjectRetain();
                      specialized Array.replaceSubrange<A>(_:with:)(v49, v2);
                      swift_endAccess();
                      unint64_t v55 = (void *)MEMORY[0x1E4FBC860];
                      int64_t v2 = v24 - v49;
                      if (v24 == v49)
                      {
LABEL_85:
                        static AccessibilityAttachment.combine(_:)(v55, (uint64_t *)&v187);
                        swift_bridgeObjectRelease();
                        long long v64 = (void *)*((void *)&v187 + 1);
                        long long v184 = v187;
                        v183[0] = 0uLL;
                        AccessibilityNode.scheduleNotifyForAttachmentChange(from:to:)((uint64_t *)&v184, v183);
                        swift_bridgeObjectRelease();

                        uint64_t v65 = &v159[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
                        uint64_t v66 = *(void *)&v159[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
                        uint64_t v67 = *(void **)&v159[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
                        *uint64_t v65 = 0;
                        v65[1] = 0;
                        outlined consume of AccessibilityAttachment?(v66, v67);
                        v159[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;

                        goto LABEL_86;
                      }
                      *(void *)&long long v187 = MEMORY[0x1E4FBC860];
                      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
                      if (v2 < 0) {
                        goto LABEL_172;
                      }
                      unint64_t v55 = (void *)v187;
                      if (v24 <= v49) {
                        unint64_t v56 = v49;
                      }
                      else {
                        unint64_t v56 = v24;
                      }
                      uint64_t v57 = (void **)(v54 + v30);
                      while (v49 != v56)
                      {
                        uint64_t v58 = (uint64_t)*(v57 - 1);
                        unint64_t v59 = *v57;
                        *(void *)&long long v187 = v55;
                        unint64_t v61 = v55[2];
                        unint64_t v60 = v55[3];
                        swift_bridgeObjectRetain();
                        id v62 = v59;
                        if (v61 >= v60 >> 1)
                        {
                          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v60 > 1), v61 + 1, 1);
                          unint64_t v55 = (void *)v187;
                        }
                        v55[2] = v61 + 1;
                        long long v63 = &v55[2 * v61];
                        v63[4] = v58;
                        v63[5] = v59;
                        --v56;
                        --v24;
                        v57 += 5;
                        uint64_t v12 = v173;
                        v22._rawuint64_t Value = rawValue;
                        if (v49 == v24)
                        {
                          int v11 = v172;
                          goto LABEL_85;
                        }
                      }
                      __break(1u);
LABEL_88:
                      __break(1u);
LABEL_89:
                      __break(1u);
LABEL_90:
                      swift_once();
LABEL_9:
                      int v16 = &static AccessibilityNodesKey.defaultValue;
                      goto LABEL_11;
                    }
                  }
                  __break(1u);
LABEL_171:
                  __break(1u);
LABEL_172:
                  __break(1u);
LABEL_173:
                  swift_bridgeObjectRetain();
                  uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
                  if (!v41) {
                    break;
                  }
                  goto LABEL_57;
                }

LABEL_59:
                unint64_t v42 = v170;
                int64_t v2 = (int64_t)v164;
              }
              while (v170 != v41);
            }
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            if (v35)
            {
LABEL_53:
              BOOL v40 = v38;

              *(void *)(v12 + 64) = v40;
              if ((v167 & 1) == 0)
              {
LABEL_192:
                char v39 = 1;
LABEL_193:
                LOBYTE(v183[0]) = v177;
                DWORD1(v183[0]) = v178;
                *((void *)&v183[0] + 1) = v179;
                AccessibilityScrollableModifier.scrollableCollection.getter((uint64_t)&v184);
                if (v185)
                {
                  outlined init with take of OptionalBinaryInteger(&v184, (uint64_t)&v187);
                  *(void *)&long long v186 = v179;
                  outlined init with copy of TableColumnList((uint64_t)&v187, (uint64_t)&v184);
                  outlined init with copy of ScrollableCollection?((uint64_t)&v184, (uint64_t)v183, (uint64_t (*)(void))type metadata accessor for ScrollableCollection?);
                  swift_bridgeObjectRetain();
                  specialized AccessibilityProperties.subscript.setter((uint64_t)v183);
                  outlined destroy of ScrollableCollection?((uint64_t)&v184, (uint64_t (*)(void))type metadata accessor for ScrollableCollection?);
                  type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityVisibility>, MEMORY[0x1E4F40BB8], MEMORY[0x1E4FBBE00]);
                  uint64_t v123 = swift_allocObject();
                  static AccessibilityVisibility.containerElement.getter();
                  int v124 = *(_DWORD *)(v123 + 32);
                  swift_setDeallocating();
                  swift_deallocClassInstance();
                  LODWORD(v184) = v124;
                  DWORD1(v184) = v124;
                  AccessibilityProperties.visibility.setter();
                  *(void *)&v183[0] = v186;
                  static AccessibilityAttachment.properties(_:)();
                  swift_bridgeObjectRelease();
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v187);
                }
                else
                {
                  outlined destroy of ScrollableCollection?((uint64_t)&v184, (uint64_t (*)(void))type metadata accessor for ScrollableCollection?);
                  *(void *)&long long v187 = v179;
                  static AccessibilityAttachment.properties(_:)();
                }
                swift_bridgeObjectRelease();
                if (*(_DWORD *)(v12 + 32) != v11)
                {
                  uint64_t v125 = AGGraphGetValue();
                  uint64_t v127 = *(void *)v125;
                  uint64_t v126 = *(void **)(v125 + 8);
                  if (!*(unsigned char *)(v125 + 16))
                  {
                    id v130 = v126;
                    swift_bridgeObjectRetain();
LABEL_201:
                    *(void *)&long long v187 = v127;
                    AccessibilityProperties.merge(with:)((uint64_t *)&v187);
                    long long v187 = v184;
                    long long v131 = (void *)AccessibilityAttachment.platformElement.getter();

                    if (!v131)
                    {
                      *(void *)&long long v187 = v127;
                      *((void *)&v187 + 1) = v126;
                      if (AccessibilityAttachment.platformElement.getter()) {
                        AccessibilityAttachment.platformElement.setter();
                      }
                    }
                    swift_bridgeObjectRelease();

                    goto LABEL_205;
                  }
                  if (*(unsigned char *)(v125 + 16) == 1)
                  {
                    uint64_t v128 = swift_bridgeObjectRetain();
                    long long v129 = specialized Sequence.compactMap<A>(_:)(v128);
                    static AccessibilityAttachment.combine(_:)(v129, (uint64_t *)&v187);
                    swift_bridgeObjectRelease();
                    outlined consume of AccessibilityAttachment.Tree(v127, v126, 1);
                    uint64_t v126 = (void *)*((void *)&v187 + 1);
                    uint64_t v127 = v187;
                    goto LABEL_201;
                  }
                }
LABEL_205:
                uint64_t v132 = (uint64_t *)&v165[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
                swift_beginAccess();
                uint64_t v133 = *v132;
                uint64_t v134 = *(void *)(v133 + 16);
                if (v134)
                {
                  swift_bridgeObjectRetain();
                  uint64_t v135 = (unsigned __int8 *)(v133 + 64);
                  uint64_t v136 = (unsigned __int8 *)(v133 + 64);
                  while (1)
                  {
                    int v138 = *v136;
                    v136 += 40;
                    char v137 = v138;
                    if (v138 != 255)
                    {
                      *(void *)&v183[0] = *((void *)v135 - 1);
                      BYTE8(v183[0]) = v137;
                      *(void *)&long long v186 = v175;
                      BYTE8(v186) = v24;
                      if (static AccessibilityAttachmentToken.== infix(_:_:)()) {
                        break;
                      }
                    }
                    uint64_t v135 = v136;
                    if (!--v134)
                    {
                      swift_bridgeObjectRelease();
                      goto LABEL_214;
                    }
                  }
                  swift_bridgeObjectRelease();
                  v183[0] = v184;
                  *(void *)&long long v186 = v175;
                  BYTE8(v186) = v24;
                  id v139 = *((id *)&v184 + 1);
                  swift_bridgeObjectRetain();
                  char v140 = specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)((char **)v183, (uint64_t *)&v186, 0);

                  swift_bridgeObjectRelease();
                  if (v140) {
                    goto LABEL_215;
                  }
                  AccessibilityNode.platformElement.getter();
                  if (v141)
                  {

                    goto LABEL_215;
                  }
                  long long v149 = (void *)MEMORY[0x18C119DF0](&v165[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent]);

                  if (v149) {
                    char v142 = v39;
                  }
                  else {
                    char v142 = 1;
                  }
                }
                else
                {
LABEL_214:
                  v183[0] = v184;
                  *(void *)&long long v186 = v175;
                  BYTE8(v186) = v24;
                  id v139 = *((id *)&v184 + 1);
                  swift_bridgeObjectRetain();
                  specialized AccessibilityNode.addAttachment(_:isInPlatformItemList:token:)((uint64_t *)v183, (uint64_t *)&v186);

                  swift_bridgeObjectRelease();
LABEL_215:
                  char v142 = 1;
                }
                AccessibilityNode.updateChildren(_:)(v22);
                swift_bridgeObjectRelease();
                type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
                uint64_t v143 = swift_allocObject();
                *(_OWORD *)(v143 + 16) = xmmword_188351940;
                *(void *)(v143 + 32) = v165;
                *(void *)&v183[0] = v143;
                specialized Array._endMutation()();
                int v144 = *(void **)&v183[0];

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v22._rawuint64_t Value = v144;
                if (v142) {
                  goto LABEL_217;
                }
LABEL_218:
                if (v161)
                {
                  long long v146 = *(void **)(v173 + 64);
                  if (v146)
                  {
                    *(void *)(swift_allocObject() + 16) = v146;
                    id v147 = v146;
                    static Update.enqueueAction(_:)();

                    swift_release();
                  }
                }
                goto LABEL_221;
              }
LABEL_183:
              *(void *)&long long v187 = v162;
              *((void *)&v187 + 1) = v30;
              uint64_t v119 = one-time initialization token for configuredForPlatform;
              swift_retain_n();
              swift_retain();
              if (v119 != -1) {
                swift_once();
              }
              uint64_t v120 = static EnvironmentValues.configuredForPlatform;
              if (v162)
              {
                swift_release();
                if (!v120 || v162 != v120) {
                  EnvironmentValues._configureForPlatform(traitCollection:)(0);
                }
              }
              else if (static EnvironmentValues.configuredForPlatform)
              {
                swift_retain();
                EnvironmentValues.plist.setter();
              }
              uint64_t v121 = *((void *)&v187 + 1);
              unint64_t v122 = &v165[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment];
              *unint64_t v122 = v187;
              v122[1] = v121;
              swift_retain();
              swift_retain();
              swift_release();
              swift_release();
              v165[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedIsPlaceholderOrIgnored] = 2;
              swift_release();
              swift_release();
              goto LABEL_192;
            }
          }
          if ((v167 & 1) == 0)
          {
            *(void *)&long long v187 = v162;
            *((void *)&v187 + 1) = v30;
            uint64_t v116 = one-time initialization token for configuredForPlatform;
            swift_retain_n();
            swift_retain();
            if (v116 != -1) {
              swift_once();
            }
            uint64_t v117 = static EnvironmentValues.configuredForPlatform;
            if (v162)
            {
              swift_release();
              if (!v117 || v162 != v117) {
                EnvironmentValues._configureForPlatform(traitCollection:)(0);
              }
            }
            else if (static EnvironmentValues.configuredForPlatform)
            {
              swift_retain();
              EnvironmentValues.plist.setter();
            }
            uint64_t v150 = *((void *)&v187 + 1);
            uint64_t v151 = &v165[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment];
            *uint64_t v151 = v187;
            v151[1] = v150;
            swift_retain();
            swift_retain();
            swift_release();
            swift_release();
            v165[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedIsPlaceholderOrIgnored] = 2;
            swift_release();
            swift_release();
            long long v152 = v165;

            *(void *)(v12 + 64) = v152;
            goto LABEL_192;
          }
          unint64_t v118 = v165;

          *(void *)(v12 + 64) = v118;
          goto LABEL_183;
        }
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v29 = 0;
      }
      uint64_t v28 = 0;
      goto LABEL_44;
    }
    uint64_t v30 = (unint64_t)v22._rawValue >> 62;
    if (*(void *)(v12 + 64))
    {
      if (v30) {
        goto LABEL_92;
      }
      uint64_t v31 = *(void *)(((unint64_t)v22._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v31) {
        goto LABEL_36;
      }
LABEL_93:
      swift_bridgeObjectRelease();

      *(void *)(v12 + 64) = 0;
      LOBYTE(v24) = v174;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    if (v30) {
      goto LABEL_166;
    }
    uint64_t v68 = *(void *)(((unint64_t)v22._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v68)
    {
LABEL_167:
      swift_bridgeObjectRelease_n();
      if (v161)
      {
LABEL_217:
        DisplayList.Version.init(forUpdate:)();
        uint64_t v145 = v184;
LABEL_223:
        *(Swift::OpaquePointer *)&long long v184 = v22;
        *((void *)&v184 + 1) = v145;
        swift_bridgeObjectRetain();
        AGGraphSetOutputValue();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
LABEL_221:
      Outputuint64_t Value = AGGraphGetOutputValue();
      if (OutputValue) {
        uint64_t v145 = *(void *)(OutputValue + 8);
      }
      else {
        uint64_t v145 = v158;
      }
      goto LABEL_223;
    }
LABEL_96:
    uint64_t v173 = v12;
    unint64_t v171 = (unint64_t)v22._rawValue & 0xC000000000000001;
    type metadata accessor for [Scrollable]();
    unint64_t v69 = 0;
    long long v166 = (char *)v22._rawValue + 32;
    uint64_t v168 = (unint64_t)v22._rawValue & 0xFFFFFFFFFFFFFF8;
    char v160 = v161;
    while (1)
    {
      if (v171)
      {
        uint64_t v72 = (char *)MEMORY[0x18C117680](v69, v22._rawValue);
      }
      else
      {
        if (v69 >= *(void *)(v168 + 16)) {
          goto LABEL_165;
        }
        uint64_t v72 = (char *)*(id *)&v166[8 * v69];
      }
      uint64_t v73 = v72;
      BOOL v44 = __OFADD__(v69++, 1);
      if (v44)
      {
        __break(1u);
LABEL_165:
        __break(1u);
LABEL_166:
        swift_bridgeObjectRetain();
        uint64_t v68 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v68) {
          goto LABEL_167;
        }
        goto LABEL_96;
      }
      uint64_t v12 = v68;
      uint64_t v74 = AGGraphGetValue();
      if (!*(void *)(*(void *)v74 + 16)) {
        break;
      }
      outlined init with copy of TableColumnList(*(void *)v74 + 32, (uint64_t)v183);
      type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
      type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
      swift_bridgeObjectRetain();
      if ((swift_dynamicCast() & 1) == 0)
      {
        uint64_t v182 = 0;
        long long v180 = 0u;
        long long v181 = 0u;
        outlined destroy of ScrollableCollection?((uint64_t)&v180, (uint64_t (*)(void))type metadata accessor for ScrollableCollection?);
        goto LABEL_110;
      }
      outlined init with take of OptionalBinaryInteger(&v180, (uint64_t)&v184);
      outlined init with take of OptionalBinaryInteger(&v184, (uint64_t)&v187);
      uint64_t v176 = v179;
      outlined init with copy of TableColumnList((uint64_t)&v187, (uint64_t)&v184);
      outlined init with copy of ScrollableCollection?((uint64_t)&v184, (uint64_t)v183, (uint64_t (*)(void))type metadata accessor for ScrollableCollection?);
      outlined init with copy of ScrollableCollection?((uint64_t)v183, (uint64_t)&v180, (uint64_t (*)(void))type metadata accessor for ScrollableCollection?);
      if (*((void *)&v181 + 1))
      {
        swift_bridgeObjectRetain();
        outlined destroy of ScrollableCollection?((uint64_t)&v180, (uint64_t (*)(void))type metadata accessor for ScrollableCollection?);
        type metadata accessor for AccessibilityPropertiesEntry<ScrollableCollection?>(0);
        *((void *)&v181 + 1) = v75;
        uint64_t v182 = lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<ScrollableCollection?> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<ScrollableCollection?>);
        *(void *)&long long v180 = swift_allocObject();
        outlined init with copy of ScrollableCollection?((uint64_t)v183, v180 + 16, (uint64_t (*)(void))type metadata accessor for ScrollableCollection?);
        specialized Dictionary.subscript.setter((uint64_t)&v180, (uint64_t)&type metadata for AccessibilityProperties.ScrollableCollectionKey);
        int v76 = v183;
        uint64_t v77 = type metadata accessor for ScrollableCollection?;
      }
      else
      {
        unint64_t v78 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableCollectionKey);
        if (v79)
        {
          unint64_t v80 = v78;
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            specialized _NativeDictionary.copy()();
          }
          outlined init with take of OptionalBinaryInteger((long long *)(*(void *)(v179 + 56) + 40 * v80), (uint64_t)&v180);
          specialized _NativeDictionary._delete(at:)(v80, v179);
          uint64_t v176 = v179;
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v182 = 0;
          long long v180 = 0u;
          long long v181 = 0u;
          swift_bridgeObjectRetain();
        }
        outlined destroy of ScrollableCollection?((uint64_t)v183, (uint64_t (*)(void))type metadata accessor for ScrollableCollection?);
        uint64_t v77 = type metadata accessor for AnyAccessibilityPropertiesEntry?;
        int v76 = &v180;
      }
      outlined destroy of ScrollableCollection?((uint64_t)v76, (uint64_t (*)(void))v77);
      outlined destroy of ScrollableCollection?((uint64_t)&v184, (uint64_t (*)(void))type metadata accessor for ScrollableCollection?);
      type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityVisibility>, MEMORY[0x1E4F40BB8], MEMORY[0x1E4FBBE00]);
      uint64_t v81 = swift_allocObject();
      *(_OWORD *)(v81 + 16) = xmmword_18834BB80;
      static AccessibilityVisibility.containerElement.getter();
      int v82 = *(_DWORD *)(v81 + 32);
      swift_bridgeObjectRelease();
      LODWORD(v184) = v82;
      DWORD1(v184) = v82;
      AccessibilityProperties.visibility.setter();
      *(void *)&long long v184 = v176;
      static AccessibilityAttachment.properties(_:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v187);
LABEL_118:
      swift_bridgeObjectRelease();
      if (*(_DWORD *)(v173 + 32) != v11)
      {
        uint64_t v83 = AGGraphGetValue();
        uint64_t v85 = *(void *)v83;
        uint64_t v84 = *(void **)(v83 + 8);
        if (!*(unsigned char *)(v83 + 16))
        {
          id v88 = v84;
          swift_bridgeObjectRetain();
LABEL_123:
          *(void *)&long long v187 = v85;
          AccessibilityProperties.merge(with:)((uint64_t *)&v187);
          long long v187 = v186;
          id v89 = (void *)AccessibilityAttachment.platformElement.getter();

          if (!v89)
          {
            *(void *)&long long v187 = v85;
            *((void *)&v187 + 1) = v84;
            if (AccessibilityAttachment.platformElement.getter()) {
              AccessibilityAttachment.platformElement.setter();
            }
          }
          swift_bridgeObjectRelease();

          goto LABEL_127;
        }
        if (*(unsigned char *)(v83 + 16) == 1)
        {
          uint64_t v86 = swift_bridgeObjectRetain();
          char v87 = specialized Sequence.compactMap<A>(_:)(v86);
          static AccessibilityAttachment.combine(_:)(v87, (uint64_t *)&v187);
          swift_bridgeObjectRelease();
          outlined consume of AccessibilityAttachment.Tree(v85, v84, 1);
          uint64_t v84 = (void *)*((void *)&v187 + 1);
          uint64_t v85 = v187;
          goto LABEL_123;
        }
      }
LABEL_127:
      uint64_t v90 = (char **)&v73[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
      swift_beginAccess();
      char v91 = *v90;
      uint64_t v92 = *((void *)*v90 + 2);
      if (v92)
      {
        swift_bridgeObjectRetain();
        uint64_t v93 = (unsigned __int8 *)(v91 + 64);
        uint64_t v94 = (unsigned __int8 *)(v91 + 64);
        do
        {
          int v96 = *v94;
          v94 += 40;
          char v95 = v96;
          if (v96 != 255)
          {
            *(void *)&long long v187 = *((void *)v93 - 1);
            BYTE8(v187) = v95;
            *(void *)&long long v184 = v175;
            BYTE8(v184) = v24;
            if (static AccessibilityAttachmentToken.== infix(_:_:)())
            {
              char v97 = 1;
              goto LABEL_134;
            }
          }
          uint64_t v93 = v94;
          --v92;
        }
        while (v92);
        char v97 = 0;
LABEL_134:
        swift_bridgeObjectRelease();
      }
      else
      {
        char v97 = 0;
      }
      long long v98 = v186;
      long long v187 = v186;
      if (AccessibilityAttachment.isEmpty.getter())
      {
        if ((v97 & 1) == 0)
        {
          swift_bridgeObjectRelease();

          goto LABEL_98;
        }
LABEL_97:
        long long v187 = v98;
        *(void *)&long long v184 = v175;
        BYTE8(v184) = v174;
        id v70 = *((id *)&v98 + 1);
        swift_bridgeObjectRetain();
        char v71 = specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)((char **)&v187, (uint64_t *)&v184, 0);

        swift_bridgeObjectRelease_n();
        if (v71)
        {
          char v160 = 1;
          uint64_t v68 = v12;
          LOBYTE(v24) = v174;
          int v11 = v172;
          if (v69 == v12) {
            goto LABEL_163;
          }
        }
        else
        {
LABEL_98:
          LOBYTE(v24) = v174;
          int v11 = v172;
          uint64_t v68 = v12;
          if (v69 == v12)
          {
            swift_bridgeObjectRelease_n();
            if (v160) {
              goto LABEL_217;
            }
            goto LABEL_218;
          }
        }
      }
      else
      {
        if (v97) {
          goto LABEL_97;
        }
        AccessibilityNode.traits.getter((uint64_t *)&v187);
        if ((v187 & 0x80000) != 0) {
          goto LABEL_150;
        }
        uint64_t v99 = *(void *)&v73[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_relationshipScope];
        if (v99)
        {
          Swift::UInt v100 = *(void *)&v73[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];
          swift_beginAccess();
          uint64_t v101 = *(void *)(v99 + 32);
          if (*(void *)(v101 + 16)
            && (unint64_t v102 = specialized __RawDictionaryStorage.find<A>(_:)(v100, 0), (v103 & 1) != 0))
          {
            uint64_t v104 = *(void *)(*(void *)(v101 + 56) + 8 * v102);
            swift_endAccess();
            swift_retain();
            swift_bridgeObjectRetain();
            unint64_t v105 = specialized Sequence.reduce<A>(into:_:)(MEMORY[0x1E4FBC860], v104, v99, 1u);
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_endAccess();
            swift_retain();
            unint64_t v105 = MEMORY[0x1E4FBC860];
          }
          if (v105 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v106 = _CocoaArrayWrapper.endIndex.getter();
            swift_release();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v106 = *(void *)((v105 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_release();
          }
          swift_bridgeObjectRelease();
          if (v106)
          {
LABEL_150:
            *(void *)&long long v184 = v98;
            AccessibilityProperties.traits.getter();
            if ((BYTE2(v187) & 8) != 0 || (BYTE10(v187) & 8) == 0)
            {
              swift_bridgeObjectRelease();

              v22._rawuint64_t Value = rawValue;
              goto LABEL_98;
            }
          }
        }
        long long v187 = v98;
        id v107 = *((id *)&v98 + 1);
        swift_bridgeObjectRetain();
        AccessibilityNode.scheduleNotifyForAttachmentAddition(of:)(&v187);
        uint64_t v108 = *v90;
        swift_bridgeObjectRetain_n();
        id v157 = v107;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v90 = v108;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v108 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v108 + 2) + 1, 1, v108);
          *uint64_t v90 = v108;
        }
        unint64_t v111 = *((void *)v108 + 2);
        unint64_t v110 = *((void *)v108 + 3);
        if (v111 >= v110 >> 1)
        {
          uint64_t v108 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v110 > 1), v111 + 1, 1, v108);
          *uint64_t v90 = v108;
        }
        int v11 = v172;
        *((void *)v108 + 2) = v111 + 1;
        unint64_t v112 = &v108[40 * v111];
        *((_OWORD *)v112 + 2) = v98;
        *((void *)v112 + 6) = 0;
        *((void *)v112 + 7) = v175;
        LOBYTE(v24) = v174;
        v112[64] = v174;
        int v113 = &v73[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
        uint64_t v114 = *(void *)&v73[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
        int v115 = *(void **)&v73[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
        *(void *)int v113 = 0;
        *((void *)v113 + 1) = 0;
        outlined consume of AccessibilityAttachment?(v114, v115);
        char v160 = 1;
        v73[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;

        swift_bridgeObjectRelease_n();
        uint64_t v68 = v12;
        v22._rawuint64_t Value = rawValue;
        if (v69 == v12)
        {
LABEL_163:
          swift_bridgeObjectRelease_n();
          goto LABEL_217;
        }
      }
    }
    swift_bridgeObjectRetain();
LABEL_110:
    *(void *)&long long v187 = v179;
    static AccessibilityAttachment.properties(_:)();
    goto LABEL_118;
  }
  if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E4F4E7A0])
  {
    if (one-time initialization token for defaultValue != -1) {
      goto LABEL_90;
    }
    goto LABEL_9;
  }
  int v16 = (long long *)AGGraphGetValue();
LABEL_11:
  uint64_t v17 = *((void *)v16 + 1);
  *(void *)&long long v187 = *(void *)v16;
  *((void *)&v187 + 1) = v17;
  return AGGraphSetOutputValue();
}

{
  unsigned __int8 *v0;
  uint64_t *v1;
  long long *v2;
  uint64_t v3;
  long long *v4;
  char v5;
  uint64_t *v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int CurrentAttribute;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t *Value;
  uint64_t v19;
  char v21;
  int v22;
  uint64_t v23;
  Swift::OpaquePointer v24;
  uint64_t (*v25)(void *);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  long long *v32;
  uint64_t v33;
  uint64_t i;
  id v35;
  void *v36;
  uint64_t v37;
  long long *v38;
  uint64_t v39;
  uint64_t *v40;
  long long *v41;
  char v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  BOOL v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  long long *v51;
  uint64_t v52;
  char v53;
  int v54;
  char *v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  void **v60;
  uint64_t v61;
  void *v62;
  unint64_t v63;
  unint64_t v64;
  id v65;
  void *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  id v74;
  char v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  void *v79;
  id v80;
  long long v81;
  void *v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  id v91;
  void *v92;
  char **v93;
  char *v94;
  uint64_t v95;
  unsigned __int8 *v96;
  unsigned __int8 *v97;
  char v98;
  int v99;
  char v100;
  long long v101;
  uint64_t v102;
  Swift::UInt v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  id v110;
  char *v111;
  id v112;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  unsigned __int8 *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned __int8 *v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  id v132;
  void *v133;
  unsigned __int8 *v134;
  uint64_t v135;
  uint64_t v136;
  unsigned __int8 *v137;
  unsigned __int8 *v138;
  char v139;
  int v140;
  id v141;
  char v142;
  void *v143;
  char v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  void *v148;
  id v149;
  uint64_t OutputValue;
  void *v151;
  uint64_t v152;
  unsigned __int8 *v153;
  unsigned __int8 *v154;
  char *v155;
  char v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  long long *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  long long *v166;
  void *rawValue;
  unint64_t v168;
  uint64_t v169;
  unsigned char *v170;
  uint64_t v171;
  long long *v172;
  unint64_t v173;
  int v174;
  char v175;
  unint64_t v176;
  long long *v177;
  char *v178;
  void *v179;
  char v180;
  uint64_t v181;
  long long v182;
  long long v183;
  long long v184;
  long long v185;
  long long v186;
  long long v187;
  uint64_t v188;
  long long *v189;
  char v190;
  uint64_t v191;

  uint64_t v191 = *MEMORY[0x1E4F143B8];
  long long v187 = *(_OWORD *)AGGraphGetValue();
  if ((EnvironmentValues.accessibilityEnabled.getter() & 1) == 0)
  {
    if (*((_DWORD *)v0 + 9) != *MEMORY[0x1E4F4E7A0])
    {
      uint64_t Value = (uint64_t *)AGGraphGetValue();
      goto LABEL_11;
    }
    if (one-time initialization token for defaultValue == -1)
    {
LABEL_9:
      uint64_t Value = &static AccessibilityNodesKey.defaultValue;
LABEL_11:
      char v19 = Value[1];
      *(void *)&long long v187 = *Value;
      *((void *)&v187 + 1) = v19;
      return AGGraphSetOutputValue();
    }
LABEL_95:
    swift_once();
    goto LABEL_9;
  }
  if (*((_DWORD *)v0 + 20) != *(_DWORD *)AGGraphGetValue() >> 1)
  {

    *((void *)v0 + 8) = 0;
    swift_unknownObjectWeakAssign();
    *((_DWORD *)v0 + 20) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  unint64_t v1 = (uint64_t *)AGGraphGetValue();
  int64_t v2 = (long long *)v0;
  int v3 = *v1;
  uint64_t v4 = (long long *)v1[1];
  uint64_t v188 = *v1;
  uint64_t v189 = v4;
  uint64_t v190 = v5 & 1;
  char v6 = (uint64_t *)AGGraphGetValue();
  uint64_t v8 = v7;
  uint64_t v9 = *v6;
  unint64_t v10 = v6[1];
  Currentint Attribute = AGGraphGetCurrentAttribute();
  LODWORD(v12) = *MEMORY[0x1E4F4E7A0];
  if (CurrentAttribute == *MEMORY[0x1E4F4E7A0])
  {
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  char v159 = v10;
  swift_retain();
  swift_retain();
  swift_retain();
  char v160 = v9;
  swift_retain();
  AccessibilityAttachmentToken.init<A>(_:)();
  uint64_t v13 = v187;
  LOBYTE(v14) = BYTE8(v187);
  int v161 = v2;
  uint64_t v175 = v8;
  if (*((_DWORD *)v2 + 9) == v12)
  {
    int v15 = 0;
    int v16 = 0;
    uint64_t v17 = 0;
  }
  else
  {
    int v16 = *(void *)(AGGraphGetValue() + 8);
    uint64_t v17 = v21 & 1;
    int v15 = swift_bridgeObjectRetain();
  }
  if (v15) {
    Swift::OpaquePointer v22 = v17;
  }
  else {
    Swift::OpaquePointer v22 = 0;
  }
  uint64_t v158 = v22;
  if (v15) {
    uint64_t v23 = v16;
  }
  else {
    uint64_t v23 = 0;
  }
  id v157 = v23;
  if (v15) {
    v24._rawuint64_t Value = (void *)v15;
  }
  else {
    v24._rawuint64_t Value = (void *)MEMORY[0x1E4FBC860];
  }
  rawuint64_t Value = v24._rawValue;
  long long v180 = BYTE8(v187);
  long long v181 = v187;
  char v174 = v12;
  if (v4)
  {
    uint64_t v25 = *(uint64_t (**)(void *))(*(void *)v4 + 80);
    swift_bridgeObjectRetain_n();
    swift_retain();
    LOBYTE(v25) = v25(v24._rawValue);
    swift_release();
    if (v25) {
      goto LABEL_24;
    }
  }
  else
  {
    if ((unint64_t)v24._rawValue >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v4 = (long long *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v4) {
        goto LABEL_36;
      }
    }
    else
    {
      uint64_t v4 = *(long long **)(((unint64_t)v24._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v4) {
        goto LABEL_36;
      }
    }
    swift_beginAccess();
    uint64_t v31 = *(void *)(v3 + 24);
    *(void *)&long long v187 = *(void *)(v3 + 16);
    *((void *)&v187 + 1) = v31;
    uint64_t v4 = &v187;
    if ((AccessibilityAttachment.isEmpty.getter() & 1) == 0)
    {
LABEL_24:
      type metadata accessor for ViewGraph();
      uint64_t v26 = MEMORY[0x18C114EE0]() + 200;
      swift_beginAccess();
      uint64_t v27 = MEMORY[0x18C119DF0](v26);
      swift_release();
      if (v27)
      {
        swift_getObjectType();
        uint64_t v28 = swift_conformsToProtocol2();
        if (v28) {
          uint64_t v29 = v28;
        }
        else {
          uint64_t v29 = 0;
        }
        if (v28) {
          uint64_t v30 = v27;
        }
        else {
          uint64_t v30 = 0;
        }
        if (v30)
        {
LABEL_47:
          uint64_t v37 = *((void *)v2 + 8);
          if (v37)
          {
            unint64_t v38 = (long long *)*((void *)v2 + 8);
            int64_t v2 = v38;
          }
          else
          {
            objc_allocWithZone((Class)type metadata accessor for AccessibilityNode());
            char v39 = swift_unknownObjectRetain();
            int64_t v2 = (long long *)specialized AccessibilityNode.init(viewRendererHost:isFromDisplayList:)(v39, v29, 0);
            swift_unknownObjectRelease();
            unint64_t v38 = 0;
          }
          uint64_t v4 = v38;
          swift_unknownObjectRelease();
          BOOL v40 = &lazy cache variable for type metadata for UIView;
          if (v37 && v2 == v4)
          {
            swift_bridgeObjectRelease();
            uint64_t v41 = v161;
            if ((v175 & 1) == 0)
            {
              unint64_t v42 = 0;
              goto LABEL_196;
            }
            goto LABEL_187;
          }
          int v172 = v4;
          if (AGGraphGetOutputValue())
          {
            if (v37)
            {
              swift_bridgeObjectRelease();
              goto LABEL_58;
            }
            if ((unint64_t)v24._rawValue >> 62) {
              goto LABEL_177;
            }
            BOOL v44 = *(void *)(((unint64_t)v24._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v44)
            {
              while (1)
              {
                unint64_t v45 = 0;
                uint64_t v168 = (unint64_t)v24._rawValue & 0xC000000000000001;
                uint64_t v162 = (unint64_t)v24._rawValue & 0xFFFFFFFFFFFFFF8;
                long long v164 = v44;
                uint64_t v155 = (char *)v24._rawValue + 32;
                long long v166 = v2;
                while (1)
                {
                  if (v168)
                  {
                    uint64_t v46 = (char *)MEMORY[0x18C117680](v45, v24._rawValue);
                    long long v47 = __OFADD__(v45, 1);
                    uint64_t v48 = v45 + 1;
                    if (v47) {
                      goto LABEL_94;
                    }
                  }
                  else
                  {
                    if (v45 >= *(void *)(v162 + 16))
                    {
                      __break(1u);
                      goto LABEL_173;
                    }
                    uint64_t v46 = (char *)*(id *)&v155[8 * v45];
                    long long v47 = __OFADD__(v45, 1);
                    uint64_t v48 = v45 + 1;
                    if (v47) {
                      goto LABEL_94;
                    }
                  }
                  uint64_t v176 = v48;
                  uint64_t v4 = (long long *)&v46[v40[3]];
                  unint64_t v49 = v46;
                  swift_beginAccess();
                  v24._rawuint64_t Value = *(void **)v4;
                  int v50 = *(void *)(*(void *)v4 + 16);
                  if (v50) {
                    break;
                  }

                  v24._rawuint64_t Value = rawValue;
LABEL_64:
                  unint64_t v45 = v176;
                  uint64_t v4 = v172;
                  if (v176 == v44) {
                    goto LABEL_178;
                  }
                }
                unint64_t v170 = v49;
                swift_bridgeObjectRetain();
                uint64_t v12 = 0;
                uint64_t v51 = (long long *)((char *)v24._rawValue + 64);
                char v52 = 40;
                int64_t v2 = (long long *)((char *)v24._rawValue + 64);
                while (1)
                {
                  uint64_t v54 = *(unsigned __int8 *)v2;
                  int64_t v2 = (long long *)((char *)v2 + 40);
                  int v53 = v54;
                  if (v54 != 255)
                  {
                    *(void *)&uint64_t v185 = *((void *)v51 - 1);
                    BYTE8(v185) = v53;
                    *(void *)&long long v186 = v13;
                    BYTE8(v186) = v14;
                    if (static AccessibilityAttachmentToken.== infix(_:_:)()) {
                      break;
                    }
                  }
                  ++v12;
                  v52 += 40;
                  uint64_t v51 = v2;
                  if (v50 == v12)
                  {

                    swift_bridgeObjectRelease();
                    int64_t v2 = v166;
                    v24._rawuint64_t Value = rawValue;
                    LODWORD(v12) = v174;
LABEL_91:
                    BOOL v44 = v164;
                    goto LABEL_64;
                  }
                }
                swift_bridgeObjectRelease();
                unint64_t v55 = *(char **)v4;
                uint64_t v14 = *(void *)(*(void *)v4 + 16);
                if (v14 < v12) {
                  goto LABEL_174;
                }
                swift_beginAccess();
                unint64_t v56 = *(void *)(*(void *)v4 + 16);
                int64_t v2 = v166;
                v24._rawuint64_t Value = rawValue;
                if (v56 >= v12) {
                  break;
                }
LABEL_175:
                __break(1u);
LABEL_176:
                __break(1u);
LABEL_177:
                swift_bridgeObjectRetain();
                BOOL v40 = &lazy cache variable for type metadata for UIView;
                BOOL v44 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                if (!v44) {
                  goto LABEL_178;
                }
              }
              swift_bridgeObjectRetain();
              specialized Array.replaceSubrange<A>(_:with:)(v12, v56);
              swift_endAccess();
              uint64_t v57 = (void *)MEMORY[0x1E4FBC860];
              uint64_t v58 = v14 - v12;
              if (v14 == v12)
              {
LABEL_90:
                static AccessibilityAttachment.combine(_:)(v57, (uint64_t *)&v185);
                swift_bridgeObjectRelease();
                uint64_t v67 = (void *)*((void *)&v185 + 1);
                long long v186 = v185;
                long long v183 = 0uLL;
                AccessibilityNode.scheduleNotifyForAttachmentChange(from:to:)((uint64_t *)&v186, &v183);
                swift_bridgeObjectRelease();

                uint64_t v68 = &v170[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
                unint64_t v69 = *(void *)&v170[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
                id v70 = *(void **)&v170[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
                *uint64_t v68 = 0;
                v68[1] = 0;
                outlined consume of AccessibilityAttachment?(v69, v70);
                v170[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;

                swift_bridgeObjectRelease();
                LOBYTE(v14) = v180;
                LODWORD(v12) = v174;
                BOOL v40 = &lazy cache variable for type metadata for UIView;
                goto LABEL_91;
              }
              *(void *)&uint64_t v185 = MEMORY[0x1E4FBC860];
              uint64_t v4 = &v185;
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v58 & ~(v58 >> 63), 0);
              if (v58 < 0) {
                goto LABEL_176;
              }
              uint64_t v57 = (void *)v185;
              if (v14 <= v12) {
                unint64_t v59 = v12;
              }
              else {
                unint64_t v59 = v14;
              }
              unint64_t v60 = (void **)&v55[v52];
              while (v12 != v59)
              {
                unint64_t v61 = (uint64_t)*(v60 - 1);
                id v62 = *v60;
                *(void *)&uint64_t v185 = v57;
                long long v63 = v57[2];
                long long v64 = v57[3];
                swift_bridgeObjectRetain();
                uint64_t v65 = v62;
                if (v63 >= v64 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v64 > 1), v63 + 1, 1);
                  uint64_t v57 = (void *)v185;
                }
                v57[2] = v63 + 1;
                uint64_t v66 = &v57[2 * v63];
                v66[4] = v61;
                v66[5] = v62;
                --v59;
                --v14;
                v60 += 5;
                v24._rawuint64_t Value = rawValue;
                if (v12 == v14)
                {
                  uint64_t v13 = v181;
                  int64_t v2 = v166;
                  goto LABEL_90;
                }
              }
              __break(1u);
              goto LABEL_93;
            }
LABEL_178:
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            if (v37)
            {
LABEL_58:
              char v43 = v2;

              *((void *)v161 + 8) = v43;
              uint64_t v41 = v161;
              if ((v175 & 1) == 0)
              {
                unint64_t v42 = 1;
                goto LABEL_196;
              }
              goto LABEL_187;
            }
          }
          if ((v175 & 1) == 0)
          {
            *(void *)&uint64_t v185 = v160;
            *((void *)&v185 + 1) = v159;
            uint64_t v120 = one-time initialization token for configuredForPlatform;
            swift_retain_n();
            swift_retain();
            if (v120 != -1) {
              swift_once();
            }
            uint64_t v121 = static EnvironmentValues.configuredForPlatform;
            if (v160)
            {
              swift_release();
              if (!v121 || v160 != v121) {
                EnvironmentValues._configureForPlatform(traitCollection:)(0);
              }
            }
            else if (static EnvironmentValues.configuredForPlatform)
            {
              swift_retain();
              EnvironmentValues.plist.setter();
            }
            long long v152 = *((void *)&v185 + 1);
            long long v153 = (unsigned __int8 *)v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment;
            *(void *)long long v153 = v185;
            *((void *)v153 + 1) = v152;
            swift_retain();
            swift_retain();
            swift_release();
            swift_release();
            *((unsigned char *)v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedIsPlaceholderOrIgnored) = 2;
            swift_release();
            swift_release();
            uint64_t v154 = v2;

            *((void *)v161 + 8) = v154;
            uint64_t v41 = v161;
            unint64_t v42 = 1;
LABEL_196:
            AccessibilityAttachmentModifier.initialAttachment(for:)((uint64_t)v24._rawValue, (uint64_t *)&v186);
            swift_bridgeObjectRelease();
            if (*((_DWORD *)v41 + 8) != v12)
            {
              uint64_t v127 = AGGraphGetValue();
              long long v129 = *(void *)v127;
              uint64_t v128 = *(void **)(v127 + 8);
              if (!*(unsigned char *)(v127 + 16))
              {
                uint64_t v132 = v128;
                swift_bridgeObjectRetain();
LABEL_201:
                *(void *)&uint64_t v185 = v129;
                AccessibilityProperties.merge(with:)((uint64_t *)&v185);
                uint64_t v185 = v186;
                uint64_t v133 = (void *)AccessibilityAttachment.platformElement.getter();

                if (!v133)
                {
                  *(void *)&uint64_t v185 = v129;
                  *((void *)&v185 + 1) = v128;
                  if (AccessibilityAttachment.platformElement.getter()) {
                    AccessibilityAttachment.platformElement.setter();
                  }
                }
                swift_bridgeObjectRelease();

                goto LABEL_205;
              }
              if (*(unsigned char *)(v127 + 16) == 1)
              {
                id v130 = swift_bridgeObjectRetain();
                long long v131 = specialized Sequence.compactMap<A>(_:)(v130);
                static AccessibilityAttachment.combine(_:)(v131, (uint64_t *)&v185);
                swift_bridgeObjectRelease();
                outlined consume of AccessibilityAttachment.Tree(v129, v128, 1);
                uint64_t v128 = (void *)*((void *)&v185 + 1);
                long long v129 = v185;
                goto LABEL_201;
              }
            }
LABEL_205:
            uint64_t v134 = (unsigned __int8 *)v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage;
            swift_beginAccess();
            uint64_t v135 = *(void *)v134;
            uint64_t v136 = *(void *)(v135 + 16);
            if (v136)
            {
              swift_bridgeObjectRetain();
              char v137 = (unsigned __int8 *)(v135 + 64);
              int v138 = (unsigned __int8 *)(v135 + 64);
              while (1)
              {
                char v140 = *v138;
                v138 += 40;
                id v139 = v140;
                if (v140 != 255)
                {
                  *(void *)&long long v183 = *((void *)v137 - 1);
                  BYTE8(v183) = v139;
                  *(void *)&uint64_t v182 = v13;
                  BYTE8(v182) = v14;
                  if (static AccessibilityAttachmentToken.== infix(_:_:)()) {
                    break;
                  }
                }
                char v137 = v138;
                if (!--v136)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_214;
                }
              }
              swift_bridgeObjectRelease();
              long long v183 = v186;
              *(void *)&uint64_t v182 = v13;
              BYTE8(v182) = v14;
              long long v141 = *((id *)&v186 + 1);
              swift_bridgeObjectRetain();
              char v142 = specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)((char **)&v183, (uint64_t *)&v182, 0);

              swift_bridgeObjectRelease();
              if (v142) {
                goto LABEL_215;
              }
              AccessibilityNode.platformElement.getter();
              if (v143)
              {

                goto LABEL_215;
              }
              uint64_t v151 = (void *)MEMORY[0x18C119DF0]((char *)v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent);

              if (v151) {
                int v144 = v42;
              }
              else {
                int v144 = 1;
              }
            }
            else
            {
LABEL_214:
              long long v183 = v186;
              *(void *)&uint64_t v182 = v13;
              BYTE8(v182) = v14;
              long long v141 = *((id *)&v186 + 1);
              swift_bridgeObjectRetain();
              specialized AccessibilityNode.addAttachment(_:isInPlatformItemList:token:)((uint64_t *)&v183, (uint64_t *)&v182);

              swift_bridgeObjectRelease();
LABEL_215:
              int v144 = 1;
            }
            AccessibilityNode.updateChildren(_:)(v24);
            swift_bridgeObjectRelease();
            type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
            uint64_t v145 = swift_allocObject();
            *(_OWORD *)(v145 + 16) = xmmword_188351940;
            *(void *)(v145 + 32) = v2;
            *(void *)&long long v183 = v145;
            specialized Array._endMutation()();
            long long v146 = (void *)v183;

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v24._rawuint64_t Value = v146;
            if (v144) {
              goto LABEL_217;
            }
LABEL_218:
            if (v158)
            {
              long long v148 = (void *)*((void *)v161 + 8);
              if (v148)
              {
                *(void *)(swift_allocObject() + 16) = v148;
                long long v149 = v148;
                static Update.enqueueAction(_:)();

                swift_release();
              }
            }
LABEL_221:
            Outputuint64_t Value = AGGraphGetOutputValue();
            if (OutputValue) {
              id v147 = *(void *)(OutputValue + 8);
            }
            else {
              id v147 = v157;
            }
            goto LABEL_223;
          }
          unint64_t v122 = v2;

          *((void *)v161 + 8) = v122;
LABEL_187:
          *(void *)&uint64_t v185 = v160;
          *((void *)&v185 + 1) = v159;
          uint64_t v123 = one-time initialization token for configuredForPlatform;
          swift_retain_n();
          swift_retain();
          if (v123 != -1) {
            swift_once();
          }
          int v124 = static EnvironmentValues.configuredForPlatform;
          if (v160)
          {
            swift_release();
            if (!v124 || v160 != v124) {
              EnvironmentValues._configureForPlatform(traitCollection:)(0);
            }
          }
          else if (static EnvironmentValues.configuredForPlatform)
          {
            swift_retain();
            EnvironmentValues.plist.setter();
          }
          uint64_t v125 = *((void *)&v185 + 1);
          uint64_t v126 = (unsigned __int8 *)v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment;
          *(void *)uint64_t v126 = v185;
          *((void *)v126 + 1) = v125;
          swift_retain();
          swift_retain();
          swift_release();
          swift_release();
          *((unsigned char *)v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedIsPlaceholderOrIgnored) = 2;
          swift_release();
          swift_release();
          unint64_t v42 = 1;
          uint64_t v41 = v161;
          goto LABEL_196;
        }
        swift_unknownObjectRelease();
      }
      uint64_t v29 = 0;
      goto LABEL_47;
    }
  }
LABEL_36:
  uint64_t v32 = v2;
  if (!*((void *)v2 + 8))
  {
    swift_bridgeObjectRelease();
    goto LABEL_98;
  }
  if ((unint64_t)v24._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    id v33 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v33) {
      goto LABEL_39;
    }
  }
  else
  {
    id v33 = *(void *)(((unint64_t)v24._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v33)
    {
LABEL_39:
      if (v33 < 1)
      {
LABEL_173:
        __break(1u);
LABEL_174:
        __break(1u);
        goto LABEL_175;
      }
      for (uint64_t i = 0; i != v33; ++i)
      {
        if (((unint64_t)v24._rawValue & 0xC000000000000001) != 0) {
          uint64_t v35 = (id)MEMORY[0x18C117680](i, v24._rawValue);
        }
        else {
          uint64_t v35 = *((id *)v24._rawValue + i + 4);
        }
        id v36 = v35;
        swift_unknownObjectWeakAssign();
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v32 = v2;

  *((void *)v2 + 8) = 0;
LABEL_98:
  if ((unint64_t)v24._rawValue >> 62) {
    goto LABEL_167;
  }
  char v71 = *(void *)(((unint64_t)v24._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v71)
  {
    uint64_t v173 = (unint64_t)v24._rawValue & 0xC000000000000001;
    char v177 = v189;
    uint64_t v72 = *((_DWORD *)v32 + 8);
    double v169 = v188;
    swift_beginAccess();
    uint64_t v73 = 0;
    long long v165 = (unint64_t)v24._rawValue & 0xFFFFFFFFFFFFFF8;
    uint64_t v163 = (char *)v24._rawValue + 32;
    unint64_t v156 = v158;
    unint64_t v171 = v71;
    while (1)
    {
      if (v173)
      {
        int v76 = (char *)MEMORY[0x18C117680](v73, v24._rawValue);
        uint64_t v77 = v73 + 1;
        if (__OFADD__(v73, 1)) {
          break;
        }
        goto LABEL_109;
      }
      if (v73 >= *(void *)(v165 + 16)) {
        goto LABEL_166;
      }
      int v76 = (char *)*(id *)&v163[8 * v73];
      uint64_t v77 = v73 + 1;
      if (__OFADD__(v73, 1)) {
        break;
      }
LABEL_109:
      int v178 = v76;
      unint64_t v78 = *(void *)(v169 + 16);
      char v79 = *(void **)(v169 + 24);
      *(void *)&long long v184 = v78;
      *((void *)&v184 + 1) = v79;
      if (v177)
      {
        *(void *)&uint64_t v182 = v181;
        BYTE8(v182) = v14;
        unint64_t v80 = v79;
        swift_retain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        AccessibilityContainerModifier.updatedAttachment(for:nodes:atIndex:)((uint64_t *)&v182, (unint64_t)v24._rawValue);
        uint64_t v81 = v183;
        *(void *)&uint64_t v182 = v183;
        AccessibilityProperties.merge(with:)((uint64_t *)&v182);
        char v79 = (void *)*((void *)&v184 + 1);
        unint64_t v78 = v184;
        uint64_t v182 = v184;
        int v82 = (void *)AccessibilityAttachment.platformElement.getter();

        if (v82 || (uint64_t v182 = v81, !AccessibilityAttachment.platformElement.getter()))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release_n();
        }
        else
        {
          AccessibilityAttachment.platformElement.setter();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release_n();

          char v79 = (void *)*((void *)&v184 + 1);
          unint64_t v78 = v184;
        }
        LOBYTE(v14) = v180;
      }
      else
      {
        uint64_t v83 = v79;
        swift_bridgeObjectRetain();
      }
      *(void *)&long long v186 = v78;
      *((void *)&v186 + 1) = v79;
      if (v72 == v12)
      {
        uint64_t v84 = v181;
      }
      else
      {
        uint64_t v85 = AGGraphGetValue();
        char v87 = *(void *)v85;
        uint64_t v86 = *(void **)(v85 + 8);
        if (!*(unsigned char *)(v85 + 16))
        {
          char v91 = v86;
          swift_bridgeObjectRetain();
          uint64_t v84 = v181;
LABEL_123:
          uint64_t v90 = v178;
          *(void *)&long long v184 = v87;
          AccessibilityProperties.merge(with:)((uint64_t *)&v184);
          long long v184 = v186;
          uint64_t v92 = (void *)AccessibilityAttachment.platformElement.getter();

          if (!v92)
          {
            *(void *)&long long v184 = v87;
            *((void *)&v184 + 1) = v86;
            if (AccessibilityAttachment.platformElement.getter()) {
              AccessibilityAttachment.platformElement.setter();
            }
          }
          swift_bridgeObjectRelease();

          goto LABEL_127;
        }
        uint64_t v84 = v181;
        if (*(unsigned char *)(v85 + 16) == 1)
        {
          id v88 = swift_bridgeObjectRetain();
          id v89 = specialized Sequence.compactMap<A>(_:)(v88);
          static AccessibilityAttachment.combine(_:)(v89, (uint64_t *)&v184);
          swift_bridgeObjectRelease();
          outlined consume of AccessibilityAttachment.Tree(v87, v86, 1);
          uint64_t v86 = (void *)*((void *)&v184 + 1);
          char v87 = v184;
          goto LABEL_123;
        }
      }
      uint64_t v90 = v178;
LABEL_127:
      uint64_t v93 = (char **)&v90[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
      swift_beginAccess();
      uint64_t v94 = *v93;
      char v95 = *((void *)*v93 + 2);
      if (v95)
      {
        swift_bridgeObjectRetain();
        int v96 = (unsigned __int8 *)(v94 + 64);
        char v97 = (unsigned __int8 *)(v94 + 64);
        do
        {
          uint64_t v99 = *v97;
          v97 += 40;
          long long v98 = v99;
          if (v99 != 255)
          {
            *(void *)&long long v184 = *((void *)v96 - 1);
            BYTE8(v184) = v98;
            *(void *)&long long v183 = v84;
            BYTE8(v183) = v14;
            if (static AccessibilityAttachmentToken.== infix(_:_:)())
            {
              Swift::UInt v100 = 1;
              goto LABEL_134;
            }
          }
          int v96 = v97;
          --v95;
        }
        while (v95);
        Swift::UInt v100 = 0;
LABEL_134:
        swift_bridgeObjectRelease();
      }
      else
      {
        Swift::UInt v100 = 0;
      }
      uint64_t v73 = v77;
      uint64_t v101 = v186;
      long long v184 = v186;
      if (AccessibilityAttachment.isEmpty.getter())
      {
        if ((v100 & 1) == 0)
        {
          swift_bridgeObjectRelease();

          goto LABEL_102;
        }
LABEL_101:
        long long v184 = v101;
        *(void *)&long long v183 = v181;
        BYTE8(v183) = v180;
        uint64_t v74 = *((id *)&v101 + 1);
        swift_bridgeObjectRetain();
        uint64_t v75 = specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)((char **)&v184, (uint64_t *)&v183, 0);

        swift_bridgeObjectRelease_n();
        if (v75)
        {
          unint64_t v156 = 1;
          LOBYTE(v14) = v180;
          LODWORD(v12) = v174;
          if (v77 == v171) {
            goto LABEL_164;
          }
        }
        else
        {
LABEL_102:
          LODWORD(v12) = v174;
          LOBYTE(v14) = v180;
          if (v77 == v171)
          {
            swift_bridgeObjectRelease_n();
            if (v156) {
              goto LABEL_217;
            }
            goto LABEL_218;
          }
        }
      }
      else
      {
        if (v100) {
          goto LABEL_101;
        }
        AccessibilityNode.traits.getter((uint64_t *)&v184);
        if ((v184 & 0x80000) != 0) {
          goto LABEL_151;
        }
        unint64_t v102 = *(void *)&v90[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_relationshipScope];
        if (v102)
        {
          char v103 = *(void *)&v90[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];
          swift_beginAccess();
          uint64_t v104 = *(void *)(v102 + 32);
          if (*(void *)(v104 + 16)
            && (unint64_t v105 = specialized __RawDictionaryStorage.find<A>(_:)(v103, 0), (v106 & 1) != 0))
          {
            id v107 = *(void *)(*(void *)(v104 + 56) + 8 * v105);
            swift_endAccess();
            swift_retain();
            swift_bridgeObjectRetain();
            uint64_t v108 = specialized Sequence.reduce<A>(into:_:)(MEMORY[0x1E4FBC860], v107, v102, 1u);
            uint64_t v90 = v178;
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_endAccess();
            swift_retain();
            uint64_t v108 = MEMORY[0x1E4FBC860];
          }
          if (v108 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v109 = _CocoaArrayWrapper.endIndex.getter();
            swift_release();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v109 = *(void *)((v108 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_release();
          }
          swift_bridgeObjectRelease();
          if (v109)
          {
LABEL_151:
            *(void *)&long long v183 = v101;
            AccessibilityProperties.traits.getter();
            if ((BYTE2(v184) & 8) != 0 || (BYTE10(v184) & 8) == 0)
            {
              swift_bridgeObjectRelease();

              v24._rawuint64_t Value = rawValue;
              goto LABEL_102;
            }
          }
        }
        long long v184 = v101;
        unint64_t v110 = *((id *)&v101 + 1);
        swift_bridgeObjectRetain();
        AccessibilityNode.scheduleNotifyForAttachmentAddition(of:)(&v184);
        unint64_t v111 = *v93;
        swift_bridgeObjectRetain_n();
        unint64_t v112 = v110;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v93 = v111;
        uint64_t v179 = v112;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          unint64_t v111 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v111 + 2) + 1, 1, v111);
          *uint64_t v93 = v111;
        }
        int v115 = *((void *)v111 + 2);
        uint64_t v114 = *((void *)v111 + 3);
        if (v115 >= v114 >> 1)
        {
          unint64_t v111 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v114 > 1), v115 + 1, 1, v111);
          *uint64_t v93 = v111;
        }
        LODWORD(v12) = v174;
        *((void *)v111 + 2) = v115 + 1;
        uint64_t v116 = &v111[40 * v115];
        *((_OWORD *)v116 + 2) = v101;
        *((void *)v116 + 6) = 0;
        *((void *)v116 + 7) = v181;
        LOBYTE(v14) = v180;
        v116[64] = v180;
        uint64_t v117 = &v90[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
        unint64_t v118 = *(void *)&v90[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
        uint64_t v119 = *(void **)&v90[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
        *(void *)uint64_t v117 = 0;
        *((void *)v117 + 1) = 0;
        outlined consume of AccessibilityAttachment?(v118, v119);
        unint64_t v156 = 1;
        v90[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;

        swift_bridgeObjectRelease_n();
        v24._rawuint64_t Value = rawValue;
        if (v77 == v171)
        {
LABEL_164:
          swift_bridgeObjectRelease_n();
          goto LABEL_217;
        }
      }
    }
    __break(1u);
LABEL_166:
    __break(1u);
LABEL_167:
    swift_bridgeObjectRetain();
    uint64_t v32 = v161;
    char v71 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease_n();
  if ((v158 & 1) == 0) {
    goto LABEL_221;
  }
LABEL_217:
  DisplayList.Version.init(forUpdate:)();
  id v147 = v186;
LABEL_223:
  *(Swift::OpaquePointer *)&long long v186 = v24;
  *((void *)&v186 + 1) = v147;
  swift_bridgeObjectRetain();
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char *v4;
  char **v5;
  char *v6;
  char *v7;
  int CurrentAttribute;
  int v9;
  char **v10;
  char v11;
  char v12;
  char *v13;
  long long *Value;
  uint64_t v15;
  uint64_t i;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  int v23;
  char *v24;
  char *v25;
  uint64_t v27;
  void *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  void *v34;
  char **v35;
  char *v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  char v40;
  int v41;
  char *v42;
  char *v43;
  char *v44;
  char v45;
  BOOL v46;
  uint64_t v47;
  Swift::UInt v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  id v64;
  char *v65;
  char *v66;
  uint64_t OutputValue;
  uint64_t v68;
  char *v69;
  char *v70;
  char v71;
  int v72;
  char *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  char *v77;
  int v78;
  char *v79;
  char *v80;
  char *v81;
  char v82;
  char *v83;
  char *v84;
  long long v85;
  char *v86;
  char *v87;
  uint64_t v88;

  int64_t v2 = v0;
  id v88 = *MEMORY[0x1E4F143B8];
  uint64_t v85 = *(_OWORD *)AGGraphGetValue();
  int v3 = EnvironmentValues.accessibilityEnabled.getter();
  uint64_t v4 = (char *)MEMORY[0x1E4F4E7A0];
  if ((v3 & 1) == 0)
  {
    if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E4F4E7A0])
    {
      if (one-time initialization token for defaultValue != -1) {
        swift_once();
      }
      uint64_t Value = &static AccessibilityNodesKey.defaultValue;
    }
    else
    {
      uint64_t Value = (long long *)AGGraphGetValue();
    }
    char v19 = *((void *)Value + 1);
    *(void *)&uint64_t v85 = *(void *)Value;
    *((void *)&v85 + 1) = v19;
    return AGGraphSetOutputValue();
  }
  if (*(_DWORD *)(v0 + 80) != *(_DWORD *)AGGraphGetValue() >> 1)
  {

    *(void *)(v0 + 64) = 0;
    swift_unknownObjectWeakAssign();
    *(_DWORD *)(v0 + 80) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  uint64_t v5 = (char **)AGGraphGetValue();
  char v7 = *v5;
  char v6 = v5[1];
  AGGraphGetValue();
  Currentint Attribute = AGGraphGetCurrentAttribute();
  uint64_t v9 = *(_DWORD *)v4;
  if (CurrentAttribute == *(_DWORD *)v4)
  {
    __break(1u);
    goto LABEL_28;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  char v79 = v6;
  swift_retain();
  AccessibilityAttachmentToken.init<A>(_:)();
  uint64_t v4 = (char *)v85;
  unint64_t v1 = BYTE8(v85);
  uint64_t v74 = v0;
  uint64_t v77 = v6;
  if (*(_DWORD *)(v0 + 36) == v9
    || (unint64_t v10 = (char **)AGGraphGetValue(),
        uint64_t v12 = v11,
        uint64_t v13 = *v10,
        id v70 = v10[1],
        swift_bridgeObjectRetain(),
        (unint64_t v80 = v13) == 0))
  {
    id v70 = 0;
    unint64_t v80 = (char *)MEMORY[0x1E4FBC860];
  }
  else if (v12)
  {
    uint64_t v72 = 1;
    goto LABEL_15;
  }
  uint64_t v72 = 0;
LABEL_15:
  char v6 = (char *)((unint64_t)v80 >> 62);
  unint64_t v78 = v9;
  if (*(void *)(v2 + 64))
  {
    if (!v6)
    {
      int v15 = *(void *)(((unint64_t)v80 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v15)
      {
LABEL_18:
        if (v15 < 1) {
          __break(1u);
        }
        for (uint64_t i = 0; i != v15; ++i)
        {
          if (((unint64_t)v80 & 0xC000000000000001) != 0) {
            uint64_t v17 = (id)MEMORY[0x18C117680](i, v80);
          }
          else {
            uint64_t v17 = *(id *)&v80[8 * i + 32];
          }
          uint64_t v18 = v17;
          swift_unknownObjectWeakAssign();
        }
      }
LABEL_29:
      swift_bridgeObjectRelease();

      *(void *)(v74 + 64) = 0;
      uint64_t v9 = v78;
      goto LABEL_30;
    }
LABEL_28:
    swift_bridgeObjectRetain_n();
    int v15 = _CocoaArrayWrapper.endIndex.getter();
    if (v15) {
      goto LABEL_18;
    }
    goto LABEL_29;
  }
  swift_bridgeObjectRetain_n();
LABEL_30:
  if (v6)
  {
LABEL_89:
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v21) {
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t v21 = *(void *)(((unint64_t)v80 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v21)
    {
LABEL_32:
      Swift::OpaquePointer v22 = 0;
      int v76 = v21;
      uint64_t v23 = *(_DWORD *)(v74 + 32);
      char v71 = v72;
      uint64_t v75 = v23;
      uint64_t v73 = v7;
      while (1)
      {
        if (((unint64_t)v80 & 0xC000000000000001) != 0)
        {
          unint64_t v24 = (char *)MEMORY[0x18C117680](v22, v80);
        }
        else
        {
          if (v22 >= *(void *)(((unint64_t)v80 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_88;
          }
          unint64_t v24 = (char *)*(id *)&v80[8 * v22 + 32];
        }
        uint64_t v25 = v24;
        if (__OFADD__(v22++, 1))
        {
          __break(1u);
LABEL_88:
          __break(1u);
          goto LABEL_89;
        }
        uint64_t v86 = v7;
        char v87 = v77;
        if (v23 != v9)
        {
          uint64_t v27 = AGGraphGetValue();
          uint64_t v29 = *(char **)v27;
          uint64_t v28 = *(void **)(v27 + 8);
          if (!*(unsigned char *)(v27 + 16))
          {
            swift_bridgeObjectRetain();
            id v33 = v79;
            outlined copy of AccessibilityAttachment.Tree((uint64_t)v29, v28, 0);
LABEL_46:
            uint64_t v83 = v29;
            AccessibilityProperties.merge(with:)((uint64_t *)&v83);
            uint64_t v83 = v86;
            uint64_t v84 = v87;
            char v34 = (void *)AccessibilityAttachment.platformElement.getter();

            if (!v34)
            {
              uint64_t v83 = v29;
              uint64_t v84 = (char *)v28;
              if (AccessibilityAttachment.platformElement.getter()) {
                AccessibilityAttachment.platformElement.setter();
              }
            }
            swift_bridgeObjectRelease();

            goto LABEL_50;
          }
          if (*(unsigned char *)(v27 + 16) == 1)
          {
            swift_bridgeObjectRetain();
            uint64_t v30 = v79;
            outlined copy of AccessibilityAttachment.Tree((uint64_t)v29, v28, 1);
            uint64_t v31 = specialized Sequence.compactMap<A>(_:)((uint64_t)v29);
            static AccessibilityAttachment.combine(_:)(v31, (uint64_t *)&v83);
            swift_bridgeObjectRelease();
            outlined consume of AccessibilityAttachment.Tree((uint64_t)v29, v28, 1);
            uint64_t v29 = v83;
            uint64_t v28 = v84;
            goto LABEL_46;
          }
        }
        swift_bridgeObjectRetain();
        uint64_t v32 = v79;
LABEL_50:
        uint64_t v35 = (char **)&v25[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
        swift_beginAccess();
        id v36 = *v35;
        uint64_t v37 = *((void *)*v35 + 2);
        if (v37)
        {
          swift_bridgeObjectRetain();
          unint64_t v38 = (unsigned __int8 *)(v36 + 64);
          char v39 = (unsigned __int8 *)(v36 + 64);
          while (1)
          {
            uint64_t v41 = *v39;
            v39 += 40;
            BOOL v40 = v41;
            if (v41 != 255)
            {
              uint64_t v83 = (char *)*((void *)v38 - 1);
              LOBYTE(v84) = v40;
              uint64_t v81 = v4;
              int v82 = v1;
              if (static AccessibilityAttachmentToken.== infix(_:_:)()) {
                break;
              }
            }
            unint64_t v38 = v39;
            if (!--v37) {
              goto LABEL_56;
            }
          }
          LOBYTE(v37) = 1;
LABEL_56:
          swift_bridgeObjectRelease();
        }
        char v43 = v86;
        unint64_t v42 = v87;
        uint64_t v83 = v86;
        uint64_t v84 = v87;
        if (AccessibilityAttachment.isEmpty.getter())
        {
          if ((v37 & 1) == 0) {
            goto LABEL_33;
          }
LABEL_61:
          uint64_t v83 = v43;
          uint64_t v84 = v42;
          uint64_t v81 = v4;
          int v82 = v1;
          BOOL v44 = v42;
          swift_bridgeObjectRetain();
          unint64_t v45 = specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)(&v83, (uint64_t *)&v81, 0);

          swift_bridgeObjectRelease_n();
          if ((v45 & 1) == 0) {
            goto LABEL_34;
          }
          char v71 = 1;
          uint64_t v46 = v22 == v76;
          uint64_t v9 = v78;
LABEL_79:
          uint64_t v23 = v75;
          if (v46)
          {
            uint64_t v65 = v80;
            swift_bridgeObjectRelease_n();
            goto LABEL_91;
          }
        }
        else
        {
          if (v37) {
            goto LABEL_61;
          }
          AccessibilityNode.traits.getter((uint64_t *)&v83);
          if ((v83 & 0x80000) == 0)
          {
            long long v47 = *(void *)&v25[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_relationshipScope];
            if (!v47) {
              goto LABEL_74;
            }
            uint64_t v48 = *(void *)&v25[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];
            swift_beginAccess();
            unint64_t v49 = *(void *)(v47 + 32);
            if (*(void *)(v49 + 16) && (int v50 = specialized __RawDictionaryStorage.find<A>(_:)(v48, 0), (v51 & 1) != 0))
            {
              uint64_t v68 = *(void *)(*(void *)(v49 + 56) + 8 * v50);
              swift_endAccess();
              swift_retain();
              swift_bridgeObjectRetain();
              char v52 = specialized Sequence.reduce<A>(into:_:)(MEMORY[0x1E4FBC860], v68, v47, 1u);
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_endAccess();
              swift_retain();
              char v52 = MEMORY[0x1E4FBC860];
            }
            if (v52 >> 62)
            {
              swift_bridgeObjectRetain();
              int v53 = _CocoaArrayWrapper.endIndex.getter();
              swift_release();
              swift_bridgeObjectRelease();
            }
            else
            {
              int v53 = *(void *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10);
              swift_release();
            }
            swift_bridgeObjectRelease();
            char v7 = v73;
            if (!v53) {
              goto LABEL_74;
            }
          }
          uint64_t v81 = v43;
          AccessibilityProperties.traits.getter();
          if ((BYTE2(v83) & 8) == 0 && (BYTE2(v84) & 8) != 0)
          {
LABEL_74:
            uint64_t v83 = v43;
            uint64_t v84 = v42;
            uint64_t v54 = v42;
            swift_bridgeObjectRetain();
            AccessibilityNode.scheduleNotifyForAttachmentAddition(of:)(&v83);
            unint64_t v55 = *v35;
            swift_bridgeObjectRetain_n();
            unint64_t v69 = v54;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *uint64_t v35 = v55;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              unint64_t v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v55 + 2) + 1, 1, v55);
              *uint64_t v35 = v55;
            }
            uint64_t v58 = *((void *)v55 + 2);
            uint64_t v57 = *((void *)v55 + 3);
            if (v58 >= v57 >> 1)
            {
              unint64_t v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v57 > 1), v58 + 1, 1, v55);
              *uint64_t v35 = v55;
            }
            uint64_t v9 = v78;
            *((void *)v55 + 2) = v58 + 1;
            unint64_t v59 = &v55[40 * v58];
            *((void *)v59 + 4) = v43;
            *((void *)v59 + 5) = v42;
            *((void *)v59 + 6) = 0;
            *((void *)v59 + 7) = v4;
            v59[64] = v1;
            unint64_t v60 = &v25[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
            unint64_t v61 = *(void *)&v25[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
            id v62 = *(void **)&v25[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
            *(void *)unint64_t v60 = 0;
            *((void *)v60 + 1) = 0;
            outlined consume of AccessibilityAttachment?(v61, v62);
            char v71 = 1;
            v25[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;

            swift_bridgeObjectRelease_n();
            uint64_t v46 = v22 == v76;
            char v7 = v73;
            goto LABEL_79;
          }
LABEL_33:
          swift_bridgeObjectRelease();

LABEL_34:
          uint64_t v9 = v78;
          uint64_t v23 = v75;
          if (v22 == v76)
          {
            uint64_t v65 = v80;
            swift_bridgeObjectRelease_n();
            if (v71) {
              goto LABEL_91;
            }
            if (v72)
            {
              long long v63 = *(void **)(v74 + 64);
              if (v63)
              {
                *(void *)(swift_allocObject() + 16) = v63;
                long long v64 = v63;
                static Update.enqueueAction(_:)();

                swift_release();
              }
            }
LABEL_92:
            Outputuint64_t Value = AGGraphGetOutputValue();
            uint64_t v66 = v70;
            if (OutputValue) {
              uint64_t v66 = *(char **)(OutputValue + 8);
            }
            goto LABEL_94;
          }
        }
      }
    }
  }
  uint64_t v65 = v80;
  swift_bridgeObjectRelease_n();
  if ((v72 & 1) == 0) {
    goto LABEL_92;
  }
LABEL_91:
  DisplayList.Version.init(forUpdate:)();
  uint64_t v66 = v83;
LABEL_94:
  uint64_t v83 = v65;
  uint64_t v84 = v66;
  swift_bridgeObjectRetain();
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  int *v6;
  int CurrentAttribute;
  int v8;
  unint64_t *v9;
  char v10;
  char v11;
  unint64_t v12;
  long long *Value;
  uint64_t v14;
  uint64_t i;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  char *v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  void *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  id v33;
  void *v34;
  char **v35;
  char *v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  char v40;
  int v41;
  char v42;
  char *v43;
  char *v44;
  char *v45;
  char v46;
  BOOL v47;
  uint64_t v48;
  Swift::UInt v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  void *v63;
  void *v64;
  id v65;
  char *v66;
  uint64_t OutputValue;
  uint64_t v68;
  char *v69;
  char *v70;
  char v71;
  int v72;
  uint64_t v73;
  int v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  unint64_t v81;
  uint64_t v82;
  char v83;
  char *v84;
  char *v85;
  long long v86;
  char *v87;
  char *v88;
  uint64_t v89;

  uint64_t v4 = v0;
  id v89 = *MEMORY[0x1E4F143B8];
  uint64_t v86 = *(_OWORD *)AGGraphGetValue();
  uint64_t v5 = EnvironmentValues.accessibilityEnabled.getter();
  char v6 = (int *)MEMORY[0x1E4F4E7A0];
  if ((v5 & 1) == 0)
  {
    if (*(_DWORD *)(v4 + 36) == *MEMORY[0x1E4F4E7A0])
    {
      if (one-time initialization token for defaultValue != -1) {
        swift_once();
      }
      uint64_t Value = &static AccessibilityNodesKey.defaultValue;
    }
    else
    {
      uint64_t Value = (long long *)AGGraphGetValue();
    }
    uint64_t v18 = *((void *)Value + 1);
    *(void *)&uint64_t v86 = *(void *)Value;
    *((void *)&v86 + 1) = v18;
    return AGGraphSetOutputValue();
  }
  if (*(_DWORD *)(v4 + 80) != *(_DWORD *)AGGraphGetValue() >> 1)
  {

    *(void *)(v4 + 64) = 0;
    swift_unknownObjectWeakAssign();
    *(_DWORD *)(v4 + 80) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  uint64_t v74 = *(_DWORD *)AGGraphGetValue();
  AGGraphGetValue();
  Currentint Attribute = AGGraphGetCurrentAttribute();
  uint64_t v8 = *v6;
  if (CurrentAttribute == v8)
  {
    __break(1u);
    goto LABEL_28;
  }
  swift_retain();
  swift_retain();
  AccessibilityAttachmentToken.init<A>(_:)();
  int v3 = v86;
  int64_t v2 = BYTE8(v86);
  uint64_t v73 = v4;
  unint64_t v80 = v8;
  if (*(_DWORD *)(v4 + 36) == v8
    || (uint64_t v9 = (unint64_t *)AGGraphGetValue(),
        int v11 = v10,
        uint64_t v12 = *v9,
        id v70 = (char *)v9[1],
        swift_bridgeObjectRetain(),
        !v12))
  {
    id v70 = 0;
    uint64_t v12 = MEMORY[0x1E4FBC860];
  }
  else if (v11)
  {
    uint64_t v72 = 1;
    goto LABEL_15;
  }
  uint64_t v72 = 0;
LABEL_15:
  unint64_t v1 = v12 >> 62;
  uint64_t v81 = v12;
  if (*(void *)(v4 + 64))
  {
    if (!v1)
    {
      uint64_t v14 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v14)
      {
LABEL_18:
        if (v14 < 1) {
          __break(1u);
        }
        for (uint64_t i = 0; i != v14; ++i)
        {
          if ((v81 & 0xC000000000000001) != 0) {
            int v16 = (id)MEMORY[0x18C117680](i, v81);
          }
          else {
            int v16 = *(id *)(v81 + 8 * i + 32);
          }
          uint64_t v17 = v16;
          swift_unknownObjectWeakAssign();
        }
      }
LABEL_29:
      uint64_t v12 = v81;
      swift_bridgeObjectRelease();

      *(void *)(v73 + 64) = 0;
      goto LABEL_30;
    }
LABEL_28:
    swift_bridgeObjectRetain_n();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    if (v14) {
      goto LABEL_18;
    }
    goto LABEL_29;
  }
  swift_bridgeObjectRetain_n();
LABEL_30:
  if (v1)
  {
LABEL_97:
    swift_bridgeObjectRetain();
    int v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v20) {
      goto LABEL_32;
    }
  }
  else
  {
    int v20 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v20)
    {
LABEL_32:
      uint64_t v21 = 0;
      unint64_t v78 = v20;
      char v79 = v12 & 0xC000000000000001;
      Swift::OpaquePointer v22 = *(_DWORD *)(v73 + 32);
      int v76 = v12 & 0xFFFFFFFFFFFFFF8;
      uint64_t v75 = v12 + 32;
      char v71 = v72;
      uint64_t v77 = v22;
      while (1)
      {
        if (v79)
        {
          uint64_t v23 = MEMORY[0x18C117680](v21, v12);
          if (__OFADD__(v21, 1))
          {
            __break(1u);
LABEL_95:
            __break(1u);
LABEL_96:
            __break(1u);
            goto LABEL_97;
          }
          unint64_t v24 = (char *)v23;
          swift_bridgeObjectRetain();
          uint64_t v25 = (void *)MEMORY[0x18C117680](v21++, v12);
        }
        else
        {
          if ((v21 & 0x8000000000000000) != 0) {
            goto LABEL_95;
          }
          if (v21 >= *(void *)(v76 + 16)) {
            goto LABEL_96;
          }
          uint64_t v26 = *(void **)(v75 + 8 * v21++);
          uint64_t v27 = v26;
          swift_bridgeObjectRetain();
          unint64_t v24 = (char *)v27;
          uint64_t v25 = v24;
        }
        AccessibilityNode.visibility.getter((int *)&v84);

        if ((v84 & 4) != 0 || (v84 & 8) != 0 && (BYTE4(v84) & 4) == 0) {
          AccessibilityAttachment.init()();
        }
        else {
          AccessibilityGestureModifier.initialAttachment(for:)(v12, v74);
        }
        swift_bridgeObjectRelease();
        if (v22 == v80) {
          goto LABEL_55;
        }
        uint64_t v28 = AGGraphGetValue();
        uint64_t v30 = *(char **)v28;
        uint64_t v29 = *(void **)(v28 + 8);
        if (!*(unsigned char *)(v28 + 16)) {
          break;
        }
        if (*(unsigned char *)(v28 + 16) == 1)
        {
          uint64_t v31 = swift_bridgeObjectRetain();
          uint64_t v32 = specialized Sequence.compactMap<A>(_:)(v31);
          static AccessibilityAttachment.combine(_:)(v32, (uint64_t *)&v84);
          swift_bridgeObjectRelease();
          outlined consume of AccessibilityAttachment.Tree((uint64_t)v30, v29, 1);
          uint64_t v30 = v84;
          uint64_t v29 = v85;
          goto LABEL_51;
        }
LABEL_55:
        uint64_t v35 = (char **)&v24[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
        swift_beginAccess();
        id v36 = *v35;
        uint64_t v37 = *((void *)*v35 + 2);
        if (v37)
        {
          swift_bridgeObjectRetain();
          unint64_t v38 = (unsigned __int8 *)(v36 + 64);
          char v39 = (unsigned __int8 *)(v36 + 64);
          do
          {
            uint64_t v41 = *v39;
            v39 += 40;
            BOOL v40 = v41;
            if (v41 != 255)
            {
              uint64_t v84 = (char *)*((void *)v38 - 1);
              LOBYTE(v85) = v40;
              int v82 = v3;
              uint64_t v83 = v2;
              if (static AccessibilityAttachmentToken.== infix(_:_:)())
              {
                unint64_t v42 = 1;
                goto LABEL_62;
              }
            }
            unint64_t v38 = v39;
            --v37;
          }
          while (v37);
          unint64_t v42 = 0;
LABEL_62:
          swift_bridgeObjectRelease();
        }
        else
        {
          unint64_t v42 = 0;
        }
        char v43 = v87;
        BOOL v44 = v88;
        uint64_t v84 = v87;
        uint64_t v85 = v88;
        if (AccessibilityAttachment.isEmpty.getter())
        {
          if ((v42 & 1) == 0) {
            goto LABEL_33;
          }
LABEL_68:
          uint64_t v84 = v43;
          uint64_t v85 = v44;
          int v82 = v3;
          uint64_t v83 = v2;
          unint64_t v45 = v44;
          swift_bridgeObjectRetain();
          uint64_t v46 = specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)(&v84, &v82, 0);

          swift_bridgeObjectRelease_n();
          if ((v46 & 1) == 0) {
            goto LABEL_34;
          }
          char v71 = 1;
          long long v47 = v21 == v78;
          uint64_t v12 = v81;
LABEL_86:
          Swift::OpaquePointer v22 = v77;
          if (v47)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_99;
          }
        }
        else
        {
          if (v42) {
            goto LABEL_68;
          }
          AccessibilityNode.traits.getter((uint64_t *)&v84);
          if ((v84 & 0x80000) == 0)
          {
            uint64_t v48 = *(void *)&v24[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_relationshipScope];
            if (!v48) {
              goto LABEL_81;
            }
            unint64_t v49 = *(void *)&v24[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];
            swift_beginAccess();
            int v50 = *(void *)(v48 + 32);
            if (*(void *)(v50 + 16) && (uint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)(v49, 0), (v52 & 1) != 0))
            {
              uint64_t v68 = *(void *)(*(void *)(v50 + 56) + 8 * v51);
              swift_endAccess();
              swift_retain();
              swift_bridgeObjectRetain();
              int v53 = specialized Sequence.reduce<A>(into:_:)(MEMORY[0x1E4FBC860], v68, v48, 1u);
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_endAccess();
              swift_retain();
              int v53 = MEMORY[0x1E4FBC860];
            }
            if (v53 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
              swift_release();
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v54 = *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10);
              swift_release();
            }
            swift_bridgeObjectRelease();
            if (!v54) {
              goto LABEL_81;
            }
          }
          int v82 = (uint64_t)v43;
          AccessibilityProperties.traits.getter();
          if ((BYTE2(v84) & 8) == 0 && (BYTE2(v85) & 8) != 0)
          {
LABEL_81:
            uint64_t v84 = v43;
            uint64_t v85 = v44;
            unint64_t v55 = v44;
            swift_bridgeObjectRetain();
            AccessibilityNode.scheduleNotifyForAttachmentAddition(of:)(&v84);
            unint64_t v56 = *v35;
            swift_bridgeObjectRetain_n();
            unint64_t v69 = v55;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *uint64_t v35 = v56;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              unint64_t v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v56 + 2) + 1, 1, v56);
              *uint64_t v35 = v56;
            }
            unint64_t v59 = *((void *)v56 + 2);
            uint64_t v58 = *((void *)v56 + 3);
            if (v59 >= v58 >> 1)
            {
              unint64_t v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v58 > 1), v59 + 1, 1, v56);
              *uint64_t v35 = v56;
            }
            uint64_t v12 = v81;
            *((void *)v56 + 2) = v59 + 1;
            unint64_t v60 = &v56[40 * v59];
            *((void *)v60 + 4) = v43;
            *((void *)v60 + 5) = v44;
            *((void *)v60 + 6) = 0;
            *((void *)v60 + 7) = v3;
            v60[64] = v2;
            unint64_t v61 = &v24[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
            id v62 = *(void *)&v24[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
            long long v63 = *(void **)&v24[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
            *(void *)unint64_t v61 = 0;
            *((void *)v61 + 1) = 0;
            outlined consume of AccessibilityAttachment?(v62, v63);
            char v71 = 1;
            v24[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;

            swift_bridgeObjectRelease_n();
            long long v47 = v21 == v78;
            goto LABEL_86;
          }
LABEL_33:
          swift_bridgeObjectRelease();

LABEL_34:
          uint64_t v12 = v81;
          Swift::OpaquePointer v22 = v77;
          if (v21 == v78)
          {
            swift_bridgeObjectRelease_n();
            if (v71) {
              goto LABEL_99;
            }
            if (v72)
            {
              long long v64 = *(void **)(v73 + 64);
              if (v64)
              {
                *(void *)(swift_allocObject() + 16) = v64;
                uint64_t v65 = v64;
                static Update.enqueueAction(_:)();

                swift_release();
              }
            }
LABEL_100:
            Outputuint64_t Value = AGGraphGetOutputValue();
            uint64_t v66 = v70;
            if (OutputValue) {
              uint64_t v66 = *(char **)(OutputValue + 8);
            }
            goto LABEL_102;
          }
        }
      }
      id v33 = v29;
      swift_bridgeObjectRetain();
LABEL_51:
      uint64_t v84 = v30;
      AccessibilityProperties.merge(with:)((uint64_t *)&v84);
      uint64_t v84 = v87;
      uint64_t v85 = v88;
      char v34 = (void *)AccessibilityAttachment.platformElement.getter();

      if (!v34)
      {
        uint64_t v84 = v30;
        uint64_t v85 = (char *)v29;
        if (AccessibilityAttachment.platformElement.getter()) {
          AccessibilityAttachment.platformElement.setter();
        }
      }
      swift_bridgeObjectRelease();

      goto LABEL_55;
    }
  }
  swift_bridgeObjectRelease_n();
  if ((v72 & 1) == 0) {
    goto LABEL_100;
  }
LABEL_99:
  DisplayList.Version.init(forUpdate:)();
  uint64_t v66 = v84;
LABEL_102:
  uint64_t v84 = (char *)v12;
  uint64_t v85 = v66;
  swift_bridgeObjectRetain();
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease_n();
  swift_release();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  unint64_t v3;
  uint64_t v4;
  char v5;
  int *v6;
  double v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  int CurrentAttribute;
  int v12;
  int v13;
  unint64_t *v14;
  char v15;
  char v16;
  uint64_t *Value;
  uint64_t v18;
  uint64_t i;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  id v44;
  void *v45;
  char **v46;
  char *v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  char v51;
  int v52;
  char v53;
  long long v54;
  id v55;
  char v56;
  BOOL v57;
  uint64_t v58;
  Swift::UInt v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  void *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  id v67;
  char *v68;
  id v69;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  void *v76;
  id v77;
  void *v78;
  id v79;
  unint64_t v80;
  uint64_t OutputValue;
  uint64_t v82;
  id v83;
  unint64_t v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  long long v101;
  uint64_t v102;
  uint64_t v103;
  long long v104;
  uint64_t v105;

  uint64_t v4 = v0;
  unint64_t v105 = *MEMORY[0x1E4F143B8];
  uint64_t v101 = *(_OWORD *)AGGraphGetValue();
  uint64_t v5 = EnvironmentValues.accessibilityEnabled.getter();
  char v6 = (int *)MEMORY[0x1E4F4E7A0];
  if ((v5 & 1) == 0)
  {
    if (*(_DWORD *)(v4 + 36) == *MEMORY[0x1E4F4E7A0])
    {
      if (one-time initialization token for defaultValue != -1) {
        swift_once();
      }
      uint64_t Value = &static AccessibilityNodesKey.defaultValue;
    }
    else
    {
      uint64_t Value = (uint64_t *)AGGraphGetValue();
    }
    Swift::OpaquePointer v22 = Value[1];
    *(void *)&uint64_t v101 = *Value;
    *((void *)&v101 + 1) = v22;
    return AGGraphSetOutputValue();
  }
  if (*(_DWORD *)(v4 + 80) != *(_DWORD *)AGGraphGetValue() >> 1)
  {

    *(void *)(v4 + 64) = 0;
    swift_unknownObjectWeakAssign();
    *(_DWORD *)(v4 + 80) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  char v7 = *(double *)AGGraphGetValue();
  uint64_t v8 = (uint64_t *)AGGraphGetValue();
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  Currentint Attribute = AGGraphGetCurrentAttribute();
  uint64_t v12 = *v6;
  if (CurrentAttribute == v12)
  {
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v86 = v10;
  swift_retain();
  char v87 = v9;
  swift_retain();
  AccessibilityAttachmentToken.init<A>(_:)();
  unint64_t v1 = v101;
  int64_t v2 = BYTE8(v101);
  uint64_t v13 = *(_DWORD *)(v4 + 36);
  int v96 = v12;
  if (v13 == v12
    || (uint64_t v14 = (unint64_t *)AGGraphGetValue(), v16 = v15, v3 = *v14, v84 = v14[1], swift_bridgeObjectRetain(), !v3))
  {
    uint64_t v84 = 0;
    int v3 = MEMORY[0x1E4FBC860];
  }
  else if (v16)
  {
    id v88 = 1;
    goto LABEL_15;
  }
  id v88 = 0;
LABEL_15:
  unint64_t v10 = v3 >> 62;
  if (*(void *)(v4 + 64))
  {
    if (!v10)
    {
      uint64_t v18 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v18)
      {
LABEL_18:
        if (v18 < 1) {
          __break(1u);
        }
        for (uint64_t i = 0; i != v18; ++i)
        {
          if ((v3 & 0xC000000000000001) != 0) {
            int v20 = (id)MEMORY[0x18C117680](i, v3);
          }
          else {
            int v20 = *(id *)(v3 + 8 * i + 32);
          }
          uint64_t v21 = v20;
          swift_unknownObjectWeakAssign();
        }
      }
LABEL_29:
      swift_bridgeObjectRelease();

      *(void *)(v4 + 64) = 0;
      goto LABEL_30;
    }
LABEL_28:
    swift_bridgeObjectRetain_n();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    if (v18) {
      goto LABEL_18;
    }
    goto LABEL_29;
  }
  swift_bridgeObjectRetain_n();
LABEL_30:
  if (v10)
  {
LABEL_93:
    swift_bridgeObjectRetain();
    unint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v24) {
      goto LABEL_32;
    }
  }
  else
  {
    unint64_t v24 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v24)
    {
LABEL_32:
      uint64_t v25 = 0;
      char v91 = 0;
      char v95 = v3 & 0xC000000000000001;
      uint64_t v90 = v3 & 0xFFFFFFFFFFFFFF8;
      id v89 = v3 + 32;
      uint64_t v85 = v88;
      uint64_t v93 = v3;
      uint64_t v92 = v24;
      uint64_t v94 = v4;
      while (1)
      {
        if (v95)
        {
          uint64_t v26 = (char *)MEMORY[0x18C117680](v25, v3);
        }
        else
        {
          if (v25 >= *(void *)(v90 + 16)) {
            goto LABEL_92;
          }
          uint64_t v26 = (char *)*(id *)(v89 + 8 * v25);
        }
        uint64_t v27 = v26;
        if (__OFADD__(v25++, 1))
        {
          __break(1u);
LABEL_92:
          __break(1u);
          goto LABEL_93;
        }
        if (v7 >= 0.001)
        {
          AccessibilityAttachment.init()();
        }
        else
        {
          uint64_t v29 = dword_1ED42D728;
          type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
          swift_bridgeObjectRetain();
          uint64_t v30 = Dictionary.init(minimumCapacity:)();
          type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>(0);
          unint64_t v102 = v31;
          char v103 = lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>);
          *(void *)&uint64_t v101 = v29;
          outlined init with take of OptionalBinaryInteger(&v101, (uint64_t)&v98);
          LOBYTE(v29) = swift_isUniquelyReferenced_nonNull_native();
          char v97 = v30;
          uint64_t v32 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v98, v100);
          id v33 = MEMORY[0x1F4188790](v32);
          uint64_t v35 = (unint64_t *)((char *)&v82 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
          (*(void (**)(unint64_t *, double))(v36 + 16))(v35, v33);
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(*v35, MEMORY[0x1E4F40AA8], v29, &v97);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v98);
          uint64_t v37 = v97;
          swift_bridgeObjectRelease();
          *(void *)&uint64_t v101 = v37;
          static AccessibilityAttachment.properties(_:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        if (*(_DWORD *)(v4 + 32) == v96) {
          goto LABEL_52;
        }
        unint64_t v38 = AGGraphGetValue();
        BOOL v40 = *(void *)v38;
        char v39 = *(void **)(v38 + 8);
        if (!*(unsigned char *)(v38 + 16)) {
          break;
        }
        if (*(unsigned char *)(v38 + 16) == 1)
        {
          uint64_t v41 = swift_bridgeObjectRetain();
          unint64_t v42 = v91;
          char v43 = specialized Sequence.compactMap<A>(_:)(v41);
          char v91 = v42;
          static AccessibilityAttachment.combine(_:)(v43, (uint64_t *)&v101);
          swift_bridgeObjectRelease();
          outlined consume of AccessibilityAttachment.Tree(v40, v39, 1);
          char v39 = (void *)*((void *)&v101 + 1);
          BOOL v40 = v101;
          goto LABEL_48;
        }
LABEL_52:
        uint64_t v46 = (char **)&v27[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
        swift_beginAccess();
        long long v47 = *v46;
        uint64_t v48 = *((void *)*v46 + 2);
        if (v48)
        {
          swift_bridgeObjectRetain();
          unint64_t v49 = (unsigned __int8 *)(v47 + 64);
          int v50 = (unsigned __int8 *)(v47 + 64);
          do
          {
            char v52 = *v50;
            v50 += 40;
            uint64_t v51 = v52;
            if (v52 != 255)
            {
              *(void *)&uint64_t v101 = *((void *)v49 - 1);
              BYTE8(v101) = v51;
              long long v98 = v1;
              uint64_t v99 = v2;
              if (static AccessibilityAttachmentToken.== infix(_:_:)())
              {
                int v53 = 1;
                goto LABEL_59;
              }
            }
            unint64_t v49 = v50;
            --v48;
          }
          while (v48);
          int v53 = 0;
LABEL_59:
          swift_bridgeObjectRelease();
        }
        else
        {
          int v53 = 0;
        }
        uint64_t v54 = v104;
        uint64_t v101 = v104;
        if (AccessibilityAttachment.isEmpty.getter())
        {
          if ((v53 & 1) == 0) {
            goto LABEL_33;
          }
LABEL_65:
          uint64_t v101 = v54;
          long long v98 = v1;
          uint64_t v99 = v2;
          unint64_t v55 = *((id *)&v54 + 1);
          swift_bridgeObjectRetain();
          unint64_t v56 = specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)((char **)&v101, &v98, 0);

          swift_bridgeObjectRelease_n();
          if ((v56 & 1) == 0) {
            goto LABEL_34;
          }
          uint64_t v85 = 1;
          uint64_t v57 = v25 == v92;
          uint64_t v4 = v94;
LABEL_83:
          int v3 = v93;
          if (v57)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_95;
          }
        }
        else
        {
          if (v53) {
            goto LABEL_65;
          }
          AccessibilityNode.traits.getter((uint64_t *)&v101);
          if ((v101 & 0x80000) == 0)
          {
            uint64_t v58 = *(void *)&v27[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_relationshipScope];
            if (!v58) {
              goto LABEL_78;
            }
            unint64_t v59 = *(void *)&v27[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];
            swift_beginAccess();
            unint64_t v60 = *(void *)(v58 + 32);
            if (*(void *)(v60 + 16) && (unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)(v59, 0), (v62 & 1) != 0))
            {
              long long v63 = *(void **)(*(void *)(v60 + 56) + 8 * v61);
              uint64_t v83 = v63;
              swift_endAccess();
              swift_retain();
              swift_bridgeObjectRetain();
              long long v64 = v91;
              uint64_t v65 = specialized Sequence.reduce<A>(into:_:)(MEMORY[0x1E4FBC860], (uint64_t)v63, v58, 1u);
              char v91 = v64;
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_endAccess();
              swift_retain();
              uint64_t v65 = MEMORY[0x1E4FBC860];
            }
            if (v65 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v66 = _CocoaArrayWrapper.endIndex.getter();
              swift_release();
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v66 = *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
              swift_release();
            }
            swift_bridgeObjectRelease();
            if (!v66) {
              goto LABEL_78;
            }
          }
          long long v98 = v54;
          AccessibilityProperties.traits.getter();
          if ((BYTE2(v101) & 8) == 0 && (BYTE10(v101) & 8) != 0)
          {
LABEL_78:
            uint64_t v101 = v54;
            uint64_t v67 = *((id *)&v54 + 1);
            swift_bridgeObjectRetain();
            AccessibilityNode.scheduleNotifyForAttachmentAddition(of:)(&v101);
            uint64_t v68 = *v46;
            swift_bridgeObjectRetain_n();
            unint64_t v69 = v67;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *uint64_t v46 = v68;
            uint64_t v83 = v69;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              uint64_t v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v68 + 2) + 1, 1, v68);
              *uint64_t v46 = v68;
            }
            uint64_t v72 = *((void *)v68 + 2);
            char v71 = *((void *)v68 + 3);
            if (v72 >= v71 >> 1)
            {
              uint64_t v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v71 > 1), v72 + 1, 1, v68);
              *uint64_t v46 = v68;
            }
            uint64_t v4 = v94;
            *((void *)v68 + 2) = v72 + 1;
            uint64_t v73 = &v68[40 * v72];
            *((_OWORD *)v73 + 2) = v54;
            *((void *)v73 + 6) = 0;
            *((void *)v73 + 7) = v1;
            v73[64] = v2;
            uint64_t v74 = &v27[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
            uint64_t v75 = *(void *)&v27[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
            int v76 = *(void **)&v27[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
            *(void *)uint64_t v74 = 0;
            *((void *)v74 + 1) = 0;
            outlined consume of AccessibilityAttachment?(v75, v76);
            uint64_t v85 = 1;
            v27[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;

            uint64_t v77 = v83;
            swift_bridgeObjectRelease_n();
            uint64_t v57 = v25 == v92;
            goto LABEL_83;
          }
LABEL_33:
          swift_bridgeObjectRelease();

LABEL_34:
          uint64_t v4 = v94;
          int v3 = v93;
          if (v25 == v92)
          {
            swift_bridgeObjectRelease_n();
            if (v85) {
              goto LABEL_95;
            }
            if (v88)
            {
              unint64_t v78 = *(void **)(v4 + 64);
              if (v78)
              {
                *(void *)(swift_allocObject() + 16) = v78;
                char v79 = v78;
                static Update.enqueueAction(_:)();

                swift_release();
              }
            }
LABEL_96:
            Outputuint64_t Value = AGGraphGetOutputValue();
            unint64_t v80 = v84;
            if (OutputValue) {
              unint64_t v80 = *(void *)(OutputValue + 8);
            }
            goto LABEL_98;
          }
        }
      }
      BOOL v44 = v39;
      swift_bridgeObjectRetain();
LABEL_48:
      *(void *)&uint64_t v101 = v40;
      AccessibilityProperties.merge(with:)((uint64_t *)&v101);
      uint64_t v101 = v104;
      unint64_t v45 = (void *)AccessibilityAttachment.platformElement.getter();

      if (!v45)
      {
        *(void *)&uint64_t v101 = v40;
        *((void *)&v101 + 1) = v39;
        if (AccessibilityAttachment.platformElement.getter()) {
          AccessibilityAttachment.platformElement.setter();
        }
      }
      swift_bridgeObjectRelease();

      goto LABEL_52;
    }
  }
  swift_bridgeObjectRelease_n();
  if ((v88 & 1) == 0) {
    goto LABEL_96;
  }
LABEL_95:
  DisplayList.Version.init(forUpdate:)();
  unint64_t v80 = v101;
LABEL_98:
  *(void *)&uint64_t v101 = v3;
  *((void *)&v101 + 1) = v80;
  swift_bridgeObjectRetain();
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease_n();
  swift_release();
  return swift_release();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  char v3;
  int *v4;
  uint64_t v5;
  uint64_t *v6;
  char v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  int CurrentAttribute;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  long long *Value;
  uint64_t v17;
  uint64_t result;
  char v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t (*v23)(unint64_t);
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *rawValue;
  uint64_t v32;
  uint64_t i;
  id v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  char v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  BOOL v44;
  char *v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char v50;
  int v51;
  unint64_t v52;
  void *v53;
  char *v54;
  void **v55;
  uint64_t v56;
  void *v57;
  unint64_t v58;
  unint64_t v59;
  id v60;
  void *v61;
  void *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void (*v72)(long long *__return_ptr, void *);
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  id v78;
  void *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 *v83;
  unsigned __int8 *v84;
  char v85;
  int v86;
  id v87;
  char v88;
  void *v89;
  uint64_t v90;
  void *v91;
  void *v92;
  uint64_t v93;
  void *v94;
  id v95;
  uint64_t v96;
  char *v97;
  char *v98;
  void (*v99)(uint64_t *__return_ptr, long long *, unint64_t);
  char *v100;
  char v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  id v107;
  void *v108;
  char **v109;
  char *v110;
  uint64_t v111;
  unsigned __int8 *v112;
  unsigned __int8 *v113;
  char v114;
  int v115;
  char v116;
  long long v117;
  id v118;
  char v119;
  void *v120;
  uint64_t v121;
  Swift::UInt v122;
  uint64_t v123;
  unint64_t v124;
  char v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  char *v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  id v135;
  char *v136;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  void *v145;
  char *v146;
  id v147;
  char *v148;
  uint64_t v149;
  void *v150;
  id v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t OutputValue;
  unsigned char *v155;
  uint64_t v156;
  id v157;
  unint64_t v158;
  char v159;
  uint64_t v160;
  int v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  uint64_t v166;
  char v167;
  id *v168;
  uint64_t v169;
  void *v170;
  unint64_t v171;
  uint64_t v172;
  int v173;
  unint64_t v174;
  unint64_t v175;
  Swift::OpaquePointer v176;
  unsigned int v177;
  uint64_t v178;
  long long v179;
  uint64_t v180;
  char v181;
  long long v182;
  long long v183;
  long long v184;
  uint64_t v185;

  int64_t v2 = v0;
  uint64_t v185 = *MEMORY[0x1E4F143B8];
  long long v183 = *(_OWORD *)AGGraphGetValue();
  int v3 = EnvironmentValues.accessibilityEnabled.getter();
  uint64_t v4 = (int *)MEMORY[0x1E4F4E7A0];
  if ((v3 & 1) == 0)
  {
    if (*(_DWORD *)(v0 + 36) != *MEMORY[0x1E4F4E7A0])
    {
      uint64_t Value = (long long *)AGGraphGetValue();
      goto LABEL_11;
    }
    if (one-time initialization token for defaultValue == -1)
    {
LABEL_9:
      uint64_t Value = &static AccessibilityNodesKey.defaultValue;
LABEL_11:
      uint64_t v17 = *((void *)Value + 1);
      *(void *)&long long v183 = *(void *)Value;
      *((void *)&v183 + 1) = v17;
      return AGGraphSetOutputValue();
    }
LABEL_135:
    swift_once();
    goto LABEL_9;
  }
  if (*(_DWORD *)(v0 + 80) != *(_DWORD *)AGGraphGetValue() >> 1)
  {

    *(void *)(v0 + 64) = 0;
    swift_unknownObjectWeakAssign();
    *(_DWORD *)(v0 + 80) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  uint64_t v5 = *(void *)AGGraphGetValue();
  char v6 = (uint64_t *)AGGraphGetValue();
  uint64_t v8 = v7;
  uint64_t v9 = *v6;
  unint64_t v10 = v6[1];
  Currentint Attribute = AGGraphGetCurrentAttribute();
  uint64_t v12 = *v4;
  if (CurrentAttribute == v12)
  {
LABEL_134:
    __break(1u);
    goto LABEL_135;
  }
  swift_retain();
  swift_retain();
  swift_retain();
  AccessibilityAttachmentToken.init<A>(_:)();
  int v178 = v183;
  char v177 = BYTE8(v183);
  uint64_t v173 = v12;
  if (*(_DWORD *)(v0 + 36) == v12)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    int v15 = 0;
  }
  else
  {
    uint64_t v14 = *(void *)(AGGraphGetValue() + 8);
    int v15 = v19 & 1;
    uint64_t v13 = swift_bridgeObjectRetain();
  }
  if (v13) {
    int v20 = v15;
  }
  else {
    int v20 = 0;
  }
  int v161 = v20;
  if (v13) {
    uint64_t v21 = v14;
  }
  else {
    uint64_t v21 = 0;
  }
  char v160 = v21;
  if (v13) {
    Swift::OpaquePointer v22 = v13;
  }
  else {
    Swift::OpaquePointer v22 = MEMORY[0x1E4FBC860];
  }
  uint64_t v23 = *(uint64_t (**)(unint64_t))(*(void *)v5 + 80);
  unint64_t v24 = *(void *)v5 + 80;
  swift_bridgeObjectRetain_n();
  swift_retain();
  uint64_t v25 = v23(v22);
  swift_release();
  uint64_t v162 = v10;
  uint64_t v163 = v9;
  double v169 = v2;
  v176._rawuint64_t Value = (void *)v22;
  if (v25)
  {
    type metadata accessor for ViewGraph();
    uint64_t v26 = MEMORY[0x18C114EE0]() + 200;
    swift_beginAccess();
    uint64_t v27 = MEMORY[0x18C119DF0](v26);
    swift_release();
    if (v27)
    {
      swift_getObjectType();
      uint64_t v28 = swift_conformsToProtocol2();
      if (v28) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0;
      }
      if (v28) {
        uint64_t v30 = v27;
      }
      else {
        uint64_t v30 = 0;
      }
      if (v30)
      {
LABEL_42:
        char v167 = v8;
        id v36 = *(void *)(v2 + 64);
        if (v36)
        {
          uint64_t v37 = *(void **)(v2 + 64);
          unint64_t v1 = (unint64_t)v37;
        }
        else
        {
          objc_allocWithZone((Class)type metadata accessor for AccessibilityNode());
          unint64_t v38 = swift_unknownObjectRetain();
          unint64_t v1 = (unint64_t)specialized AccessibilityNode.init(viewRendererHost:isFromDisplayList:)(v38, v29, 0);
          swift_unknownObjectRelease();
          uint64_t v37 = 0;
        }
        unint64_t v24 = v37;
        swift_unknownObjectRelease();
        if (v36 && v1 == v24)
        {
          swift_bridgeObjectRelease();
          if (v8) {
            goto LABEL_96;
          }
          char v39 = 0;
          goto LABEL_105;
        }
        long long v165 = (void *)v24;
        if (AGGraphGetOutputValue())
        {
          if (!v36)
          {
            rawuint64_t Value = (char *)v176._rawValue;
            if ((unint64_t)v176._rawValue >> 62) {
              goto LABEL_237;
            }
            uint64_t v41 = *(void *)(((unint64_t)v176._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (!v41) {
              goto LABEL_87;
            }
LABEL_58:
            unint64_t v42 = 0;
            unint64_t v171 = v1;
            long long v164 = v5;
            unint64_t v156 = v41;
            while (1)
            {
              if (((unint64_t)v176._rawValue & 0xC000000000000001) != 0)
              {
                char v43 = (char *)MEMORY[0x18C117680](v42, v176._rawValue);
                uint64_t v9 = v177;
                BOOL v44 = __OFADD__(v42++, 1);
                if (v44) {
                  goto LABEL_133;
                }
              }
              else
              {
                uint64_t v9 = v177;
                if (v42 >= *(void *)(((unint64_t)v176._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10))
                {
                  __break(1u);
LABEL_137:
                  swift_bridgeObjectRetain();
                  uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
                  if (!v32) {
                    goto LABEL_138;
                  }
LABEL_35:
                  if (v32 >= 1)
                  {
                    for (uint64_t i = 0; i != v32; ++i)
                    {
                      if ((v10 & 0xC000000000000001) != 0) {
                        char v34 = (id)MEMORY[0x18C117680](i, v10);
                      }
                      else {
                        char v34 = *(id *)(v10 + 8 * i + 32);
                      }
                      uint64_t v35 = v34;
                      swift_unknownObjectWeakAssign();
                    }
                    goto LABEL_138;
                  }
                  __break(1u);
LABEL_236:
                  __break(1u);
LABEL_237:
                  swift_bridgeObjectRetain();
                  uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
                  if (!v41) {
                    goto LABEL_87;
                  }
                  goto LABEL_58;
                }
                char v43 = (char *)*((id *)v176._rawValue + v42 + 4);
                BOOL v44 = __OFADD__(v42++, 1);
                if (v44)
                {
LABEL_133:
                  __break(1u);
                  goto LABEL_134;
                }
              }
              unint64_t v45 = &v43[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
              swift_beginAccess();
              unint64_t v1 = *(void *)v45;
              rawuint64_t Value = *(char **)(*(void *)v45 + 16);
              if (rawValue)
              {
                char v174 = v42;
                swift_bridgeObjectRetain();
                uint64_t v46 = 0;
                long long v47 = (char *)(v1 + 64);
                uint64_t v48 = 40;
                unint64_t v49 = (char *)(v1 + 64);
                while (1)
                {
                  uint64_t v51 = *v49;
                  v49 += 40;
                  int v50 = v51;
                  if (v51 != 255)
                  {
                    *(void *)&uint64_t v182 = *((void *)v47 - 1);
                    BYTE8(v182) = v50;
                    *(void *)&uint64_t v179 = v178;
                    BYTE8(v179) = v9;
                    if (static AccessibilityAttachmentToken.== infix(_:_:)()) {
                      break;
                    }
                  }
                  ++v46;
                  v48 += 40;
                  long long v47 = v49;
                  if (rawValue == (char *)v46)
                  {

                    swift_bridgeObjectRelease();
                    unint64_t v10 = v162;
                    uint64_t v9 = v163;
                    unint64_t v1 = v171;
                    goto LABEL_86;
                  }
                }
                uint64_t v155 = v43;
                swift_bridgeObjectRelease();
                uint64_t v158 = *(void *)v45;
                rawuint64_t Value = *(char **)(*(void *)v45 + 16);
                if ((unint64_t)rawValue < v46) {
                  goto LABEL_232;
                }
                swift_beginAccess();
                char v52 = *(void *)(*(void *)v45 + 16);
                unint64_t v10 = v162;
                uint64_t v9 = v163;
                unint64_t v1 = v171;
                if (v52 < v46) {
                  goto LABEL_233;
                }
                swift_bridgeObjectRetain();
                specialized Array.replaceSubrange<A>(_:with:)(v46, v52);
                swift_endAccess();
                int v53 = (void *)MEMORY[0x1E4FBC860];
                unint64_t v24 = (uint64_t)&rawValue[-v46];
                if (rawValue != (char *)v46)
                {
                  *(void *)&uint64_t v182 = MEMORY[0x1E4FBC860];
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24 & ~(v24 >> 63), 0);
                  if (v24 < 0) {
                    goto LABEL_236;
                  }
                  int v53 = (void *)v182;
                  if ((unint64_t)rawValue <= v46) {
                    uint64_t v54 = (char *)v46;
                  }
                  else {
                    uint64_t v54 = rawValue;
                  }
                  unint64_t v55 = (void **)(v158 + v48);
                  while ((char *)v46 != v54)
                  {
                    unint64_t v56 = (uint64_t)*(v55 - 1);
                    uint64_t v57 = *v55;
                    *(void *)&uint64_t v182 = v53;
                    uint64_t v58 = v53[2];
                    unint64_t v59 = v53[3];
                    swift_bridgeObjectRetain();
                    unint64_t v60 = v57;
                    if (v58 >= v59 >> 1)
                    {
                      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v59 > 1), v58 + 1, 1);
                      int v53 = (void *)v182;
                    }
                    v53[2] = v58 + 1;
                    unint64_t v61 = &v53[2 * v58];
                    v61[4] = v56;
                    v61[5] = v57;
                    --v54;
                    --rawValue;
                    v55 += 5;
                    uint64_t v5 = v164;
                    int64_t v2 = v169;
                    if ((char *)v46 == rawValue)
                    {
                      unint64_t v10 = v162;
                      uint64_t v9 = v163;
                      unint64_t v1 = v171;
                      goto LABEL_85;
                    }
                  }
                  __break(1u);
                  goto LABEL_133;
                }
LABEL_85:
                static AccessibilityAttachment.combine(_:)(v53, (uint64_t *)&v182);
                swift_bridgeObjectRelease();
                rawuint64_t Value = (char *)*((void *)&v182 + 1);
                uint64_t v179 = v182;
                long long v184 = 0uLL;
                AccessibilityNode.scheduleNotifyForAttachmentChange(from:to:)((uint64_t *)&v179, &v184);
                swift_bridgeObjectRelease();

                id v62 = &v155[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
                long long v63 = *(void *)&v155[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
                long long v64 = *(void **)&v155[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
                *id v62 = 0;
                v62[1] = 0;
                outlined consume of AccessibilityAttachment?(v63, v64);
                v155[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;

                swift_bridgeObjectRelease();
LABEL_86:
                unint64_t v24 = (uint64_t)v165;
                uint64_t v41 = v156;
                unint64_t v42 = v174;
                if (v174 != v156) {
                  continue;
                }
LABEL_87:
                swift_bridgeObjectRelease();
LABEL_88:
                if ((v167 & 1) == 0)
                {
                  *(void *)&uint64_t v182 = v9;
                  *((void *)&v182 + 1) = v10;
                  uint64_t v65 = one-time initialization token for configuredForPlatform;
                  swift_retain_n();
                  swift_retain();
                  if (v65 != -1) {
                    swift_once();
                  }
                  uint64_t v66 = static EnvironmentValues.configuredForPlatform;
                  if (v9)
                  {
                    swift_release();
                    if (!v66 || v9 != v66) {
                      EnvironmentValues._configureForPlatform(traitCollection:)(0);
                    }
                  }
                  else if (static EnvironmentValues.configuredForPlatform)
                  {
                    swift_retain();
                    EnvironmentValues.plist.setter();
                  }
                  uint64_t v93 = *((void *)&v182 + 1);
                  uint64_t v94 = (void *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
                  *uint64_t v94 = v182;
                  v94[1] = v93;
                  swift_retain();
                  swift_retain();
                  swift_release();
                  swift_release();
                  *(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedIsPlaceholderOrIgnored) = 2;
                  swift_release();
                  swift_release();
                  char v95 = (id)v1;

                  *(void *)(v2 + 64) = v95;
                  goto LABEL_104;
                }
                uint64_t v67 = (id)v1;

                *(void *)(v2 + 64) = v67;
LABEL_96:
                *(void *)&uint64_t v182 = v9;
                *((void *)&v182 + 1) = v10;
                uint64_t v68 = one-time initialization token for configuredForPlatform;
                swift_retain_n();
                swift_retain();
                if (v68 != -1) {
LABEL_234:
                }
                  swift_once();
                unint64_t v69 = static EnvironmentValues.configuredForPlatform;
                if (v9)
                {
                  swift_release();
                  if (!v69 || v9 != v69) {
                    EnvironmentValues._configureForPlatform(traitCollection:)(0);
                  }
                }
                else if (static EnvironmentValues.configuredForPlatform)
                {
                  swift_retain();
                  EnvironmentValues.plist.setter();
                }
                id v70 = *((void *)&v182 + 1);
                char v71 = (void *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
                *char v71 = v182;
                v71[1] = v70;
                swift_retain();
                swift_retain();
                swift_release();
                swift_release();
                *(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedIsPlaceholderOrIgnored) = 2;
                swift_release();
                swift_release();
LABEL_104:
                char v39 = 1;
LABEL_105:
                uint64_t v72 = *(void (**)(long long *__return_ptr, void *))(*(void *)v5 + 88);
                swift_retain();
                v72(&v179, v176._rawValue);
                swift_bridgeObjectRelease();
                swift_release();
                if (*(_DWORD *)(v2 + 32) != v173)
                {
                  uint64_t v73 = AGGraphGetValue();
                  uint64_t v75 = *(void *)v73;
                  uint64_t v74 = *(void **)(v73 + 8);
                  if (!*(unsigned char *)(v73 + 16))
                  {
                    unint64_t v78 = v74;
                    swift_bridgeObjectRetain();
                    goto LABEL_110;
                  }
                  if (*(unsigned char *)(v73 + 16) == 1)
                  {
                    int v76 = swift_bridgeObjectRetain();
                    uint64_t v77 = specialized Sequence.compactMap<A>(_:)(v76);
                    static AccessibilityAttachment.combine(_:)(v77, (uint64_t *)&v182);
                    swift_bridgeObjectRelease();
                    outlined consume of AccessibilityAttachment.Tree(v75, v74, 1);
                    uint64_t v74 = (void *)*((void *)&v182 + 1);
                    uint64_t v75 = v182;
LABEL_110:
                    *(void *)&uint64_t v182 = v75;
                    AccessibilityProperties.merge(with:)((uint64_t *)&v182);
                    uint64_t v182 = v179;
                    char v79 = (void *)AccessibilityAttachment.platformElement.getter();

                    if (!v79)
                    {
                      *(void *)&uint64_t v182 = v75;
                      *((void *)&v182 + 1) = v74;
                      if (AccessibilityAttachment.platformElement.getter()) {
                        AccessibilityAttachment.platformElement.setter();
                      }
                    }
                    swift_bridgeObjectRelease();
                  }
                }
                unint64_t v80 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
                swift_beginAccess();
                uint64_t v81 = *v80;
                int v82 = *(void *)(v81 + 16);
                if (v82)
                {
                  swift_bridgeObjectRetain();
                  uint64_t v83 = (unsigned __int8 *)(v81 + 64);
                  uint64_t v84 = (unsigned __int8 *)(v81 + 64);
                  while (1)
                  {
                    uint64_t v86 = *v84;
                    v84 += 40;
                    uint64_t v85 = v86;
                    if (v86 != 255)
                    {
                      *(void *)&long long v184 = *((void *)v83 - 1);
                      BYTE8(v184) = v85;
                      long long v180 = v178;
                      long long v181 = v177;
                      if (static AccessibilityAttachmentToken.== infix(_:_:)()) {
                        break;
                      }
                    }
                    uint64_t v83 = v84;
                    if (!--v82)
                    {
                      swift_bridgeObjectRelease();
                      goto LABEL_123;
                    }
                  }
                  swift_bridgeObjectRelease();
                  long long v184 = v179;
                  long long v180 = v178;
                  long long v181 = v177;
                  char v87 = *((id *)&v179 + 1);
                  swift_bridgeObjectRetain();
                  id v88 = specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)((char **)&v184, &v180, 0);

                  swift_bridgeObjectRelease();
                  if (v88) {
                    goto LABEL_124;
                  }
                  AccessibilityNode.platformElement.getter();
                  if (v89)
                  {

                    goto LABEL_124;
                  }
                  uint64_t v92 = (void *)MEMORY[0x18C119DF0](v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent);

                  if (!v92) {
                    char v39 = 1;
                  }
                }
                else
                {
LABEL_123:
                  long long v184 = v179;
                  long long v180 = v178;
                  long long v181 = v177;
                  char v87 = *((id *)&v179 + 1);
                  swift_bridgeObjectRetain();
                  specialized AccessibilityNode.addAttachment(_:isInPlatformItemList:token:)((uint64_t *)&v184, &v180);

                  swift_bridgeObjectRelease();
LABEL_124:
                  char v39 = 1;
                }
                AccessibilityNode.updateChildren(_:)(v176);
                swift_bridgeObjectRelease();
                type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
                uint64_t v90 = swift_allocObject();
                *(_OWORD *)(v90 + 16) = xmmword_188351940;
                *(void *)(v90 + 32) = v1;
                *(void *)&long long v184 = v90;
                specialized Array._endMutation()();
                char v91 = (void *)v184;

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v176._rawuint64_t Value = v91;
                if (v39)
                {
LABEL_226:
                  DisplayList.Version.init(forUpdate:)();
                  long long v153 = v184;
LABEL_230:
                  *(Swift::OpaquePointer *)&long long v184 = v176;
                  *((void *)&v184 + 1) = v153;
                  swift_bridgeObjectRetain();
                  AGGraphSetOutputValue();
                  swift_bridgeObjectRelease();
                  swift_release();
                  swift_release();
                  swift_bridgeObjectRelease();
                  return swift_release();
                }
LABEL_215:
                if (v161)
                {
                  uint64_t v150 = *(void **)(v2 + 64);
                  if (v150)
                  {
                    *(void *)(swift_allocObject() + 16) = v150;
                    uint64_t v151 = v150;
                    static Update.enqueueAction(_:)();

                    swift_release();
                  }
                }
LABEL_227:
                Outputuint64_t Value = AGGraphGetOutputValue();
                if (OutputValue) {
                  long long v153 = *(void *)(OutputValue + 8);
                }
                else {
                  long long v153 = v160;
                }
                goto LABEL_230;
              }

              unint64_t v10 = v162;
              uint64_t v9 = v163;
              unint64_t v1 = v171;
              if (v42 == v41) {
                goto LABEL_87;
              }
            }
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          if (!v36) {
            goto LABEL_88;
          }
        }
        BOOL v40 = (id)v1;

        *(void *)(v2 + 64) = v40;
        if ((v8 & 1) == 0) {
          goto LABEL_104;
        }
        goto LABEL_96;
      }
      swift_unknownObjectRelease();
    }
    uint64_t v29 = 0;
    goto LABEL_42;
  }
  rawuint64_t Value = (char *)(v22 >> 62);
  unint64_t v10 = v22;
  if (*(void *)(v2 + 64))
  {
    if (rawValue) {
      goto LABEL_137;
    }
    uint64_t v32 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v32) {
      goto LABEL_35;
    }
LABEL_138:
    swift_bridgeObjectRelease();

    *(void *)(v2 + 64) = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  int v96 = v10 & 0xFFFFFFFFFFFFFF8;
  if (rawValue)
  {
LABEL_223:
    swift_bridgeObjectRetain();
    long long v152 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v170 = (void *)v152;
    if (v152)
    {
      swift_bridgeObjectRetain();
      int v172 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      goto LABEL_141;
    }
LABEL_225:
    swift_bridgeObjectRelease_n();
    if (v161) {
      goto LABEL_226;
    }
    goto LABEL_227;
  }
  unint64_t v170 = *(void **)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  int v172 = (uint64_t)v170;
  if (!v170) {
    goto LABEL_225;
  }
LABEL_141:
  long long v166 = v96;
  unint64_t v1 = 0;
  int v96 = 0;
  uint64_t v175 = v10 & 0xC000000000000001;
  uint64_t v168 = (id *)(v10 + 32);
  char v159 = v161;
  while (1)
  {
    if (v175)
    {
      char v97 = (char *)MEMORY[0x18C117680](v1, v10);
    }
    else
    {
      if (v1 >= *(void *)(v166 + 16)) {
        goto LABEL_221;
      }
      char v97 = (char *)v168[v1];
    }
    long long v98 = v97;
    BOOL v44 = __OFADD__(v1++, 1);
    if (v44)
    {
      __break(1u);
LABEL_221:
      __break(1u);
LABEL_222:
      __break(1u);
      goto LABEL_223;
    }
    if (v172 != 1)
    {
      swift_bridgeObjectRetain();
LABEL_154:
      AccessibilityAttachment.init()();
      uint64_t v101 = v177;
      goto LABEL_155;
    }
    *(void *)&uint64_t v182 = v178;
    BYTE8(v182) = v177;
    uint64_t v99 = *(void (**)(uint64_t *__return_ptr, long long *, unint64_t))(*(void *)v5 + 120);
    swift_bridgeObjectRetain();
    swift_retain();
    v99(&v180, &v182, v10);
    swift_release();
    if ((v180 & 0x40) != 0) {
      goto LABEL_154;
    }
    if (v175)
    {
      Swift::UInt v100 = (char *)MEMORY[0x18C117680](0, v10);
    }
    else
    {
      if (!*(void *)(v166 + 16)) {
        goto LABEL_222;
      }
      Swift::UInt v100 = (char *)*v168;
    }
    uint64_t v128 = v100;
    long long v129 = &v100[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
    swift_beginAccess();
    uint64_t v9 = *(void *)v129;
    id v130 = *(void *)(*(void *)v129 + 16);
    if (v130) {
      break;
    }
    swift_bridgeObjectRetain();
LABEL_209:

    swift_bridgeObjectRelease();
    if (v175)
    {
      swift_retain();
      long long v146 = (char *)MEMORY[0x18C117680](0, v176._rawValue);
    }
    else
    {
      id v147 = *v168;
      swift_retain();
      long long v146 = (char *)v147;
    }
    uint64_t v101 = v177;
    long long v148 = &v146[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children];
    swift_beginAccess();
    long long v149 = *(void *)v148;
    swift_bridgeObjectRetain();

    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v5 + 88))(&v184, v149);
    swift_bridgeObjectRelease();
    swift_release();
LABEL_155:
    swift_bridgeObjectRelease();
    if (*(_DWORD *)(v2 + 32) != v173)
    {
      unint64_t v102 = AGGraphGetValue();
      uint64_t v104 = *(void *)v102;
      char v103 = *(void **)(v102 + 8);
      if (!*(unsigned char *)(v102 + 16))
      {
        id v107 = v103;
        swift_bridgeObjectRetain();
LABEL_160:
        *(void *)&uint64_t v182 = v104;
        AccessibilityProperties.merge(with:)((uint64_t *)&v182);
        uint64_t v182 = v184;
        uint64_t v108 = (void *)AccessibilityAttachment.platformElement.getter();

        if (!v108)
        {
          *(void *)&uint64_t v182 = v104;
          *((void *)&v182 + 1) = v103;
          if (AccessibilityAttachment.platformElement.getter()) {
            AccessibilityAttachment.platformElement.setter();
          }
        }
        swift_bridgeObjectRelease();

        goto LABEL_164;
      }
      if (*(unsigned char *)(v102 + 16) == 1)
      {
        unint64_t v105 = swift_bridgeObjectRetain();
        uint64_t v106 = specialized Sequence.compactMap<A>(_:)(v105);
        static AccessibilityAttachment.combine(_:)(v106, (uint64_t *)&v182);
        swift_bridgeObjectRelease();
        outlined consume of AccessibilityAttachment.Tree(v104, v103, 1);
        char v103 = (void *)*((void *)&v182 + 1);
        uint64_t v104 = v182;
        goto LABEL_160;
      }
    }
LABEL_164:
    uint64_t v109 = (char **)&v98[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
    swift_beginAccess();
    unint64_t v110 = *v109;
    unint64_t v111 = *((void *)*v109 + 2);
    if (v111)
    {
      swift_bridgeObjectRetain();
      unint64_t v112 = (unsigned __int8 *)(v110 + 64);
      int v113 = (unsigned __int8 *)(v110 + 64);
      do
      {
        int v115 = *v113;
        v113 += 40;
        uint64_t v114 = v115;
        if (v115 != 255)
        {
          *(void *)&uint64_t v182 = *((void *)v112 - 1);
          BYTE8(v182) = v114;
          long long v180 = v178;
          long long v181 = v101;
          if (static AccessibilityAttachmentToken.== infix(_:_:)())
          {
            uint64_t v116 = 1;
            goto LABEL_171;
          }
        }
        unint64_t v112 = v113;
        --v111;
      }
      while (v111);
      uint64_t v116 = 0;
LABEL_171:
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v116 = 0;
    }
    uint64_t v117 = v184;
    uint64_t v182 = v184;
    if (AccessibilityAttachment.isEmpty.getter())
    {
      if ((v116 & 1) == 0) {
        goto LABEL_142;
      }
LABEL_177:
      uint64_t v182 = v117;
      long long v180 = v178;
      long long v181 = v177;
      unint64_t v118 = *((id *)&v117 + 1);
      swift_bridgeObjectRetain();
      uint64_t v119 = specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)((char **)&v182, &v180, 0);

      swift_bridgeObjectRelease_n();
      if ((v119 & 1) == 0) {
        goto LABEL_143;
      }
      char v159 = 1;
      uint64_t v120 = v170;
LABEL_204:
      unint64_t v10 = (unint64_t)v176._rawValue;
      if ((void *)v1 == v120)
      {
LABEL_219:
        swift_bridgeObjectRelease_n();
        goto LABEL_226;
      }
    }
    else
    {
      if (v116) {
        goto LABEL_177;
      }
      AccessibilityNode.traits.getter((uint64_t *)&v182);
      if ((v182 & 0x80000) == 0)
      {
        uint64_t v121 = *(void *)&v98[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_relationshipScope];
        if (!v121) {
          goto LABEL_199;
        }
        unint64_t v122 = *(void *)&v98[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];
        swift_beginAccess();
        uint64_t v123 = *(void *)(v121 + 32);
        if (*(void *)(v123 + 16) && (int v124 = specialized __RawDictionaryStorage.find<A>(_:)(v122, 0), (v125 & 1) != 0))
        {
          uint64_t v126 = *(void *)(*(void *)(v123 + 56) + 8 * v124);
          swift_endAccess();
          swift_retain();
          swift_bridgeObjectRetain();
          uint64_t v127 = specialized Sequence.reduce<A>(into:_:)(MEMORY[0x1E4FBC860], v126, v121, 1u);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_endAccess();
          swift_retain();
          uint64_t v127 = MEMORY[0x1E4FBC860];
        }
        if (v127 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v134 = _CocoaArrayWrapper.endIndex.getter();
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v134 = *(void *)((v127 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_release();
        }
        swift_bridgeObjectRelease();
        int64_t v2 = v169;
        if (!v134) {
          goto LABEL_199;
        }
      }
      long long v180 = v117;
      AccessibilityProperties.traits.getter();
      if ((BYTE2(v182) & 8) == 0 && (BYTE10(v182) & 8) != 0)
      {
LABEL_199:
        uint64_t v182 = v117;
        uint64_t v135 = *((id *)&v117 + 1);
        swift_bridgeObjectRetain();
        AccessibilityNode.scheduleNotifyForAttachmentAddition(of:)(&v182);
        uint64_t v136 = *v109;
        swift_bridgeObjectRetain_n();
        id v157 = v135;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v109 = v136;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v136 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v136 + 2) + 1, 1, v136);
          *uint64_t v109 = v136;
        }
        id v139 = *((void *)v136 + 2);
        int v138 = *((void *)v136 + 3);
        if (v139 >= v138 >> 1)
        {
          uint64_t v136 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v138 > 1), v139 + 1, 1, v136);
          *uint64_t v109 = v136;
        }
        *((void *)v136 + 2) = v139 + 1;
        char v140 = &v136[40 * v139];
        *((_OWORD *)v140 + 2) = v117;
        *((void *)v140 + 6) = 0;
        *((void *)v140 + 7) = v178;
        v140[64] = v177;
        long long v141 = &v98[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
        char v142 = *(void *)&v98[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
        uint64_t v143 = *(void **)&v98[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
        *(void *)long long v141 = 0;
        *((void *)v141 + 1) = 0;
        outlined consume of AccessibilityAttachment?(v142, v143);
        char v159 = 1;
        v98[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;

        swift_bridgeObjectRelease_n();
        int64_t v2 = v169;
        uint64_t v120 = v170;
        goto LABEL_204;
      }
LABEL_142:
      swift_bridgeObjectRelease();

LABEL_143:
      unint64_t v10 = (unint64_t)v176._rawValue;
      if ((void *)v1 == v170)
      {
        swift_bridgeObjectRelease_n();
        if (v159) {
          goto LABEL_226;
        }
        goto LABEL_215;
      }
    }
  }
  swift_bridgeObjectRetain();
  long long v131 = (uint64_t *)(v9 + 40 * v130);
  while (1)
  {
    if (v130 > *(void *)(v9 + 16))
    {
      __break(1u);
      goto LABEL_219;
    }
    uint64_t v132 = *v131;
    *(void *)&uint64_t v182 = *(v131 - 1);
    *((void *)&v182 + 1) = v132;
    uint64_t v133 = (void *)AccessibilityAttachment.platformElement.getter();

    if (v133) {
      break;
    }
    v131 -= 5;
    if (!--v130) {
      goto LABEL_209;
    }
  }
  if (v130 > *(void *)(v9 + 16))
  {
    __break(1u);
LABEL_232:
    __break(1u);
LABEL_233:
    __break(1u);
    goto LABEL_234;
  }
  int v144 = *v131;
  *(void *)&uint64_t v182 = *(v131 - 1);
  *((void *)&v182 + 1) = v144;
  uint64_t result = AccessibilityAttachment.platformElement.getter();
  if (result)
  {
    uint64_t v145 = (void *)result;

    swift_bridgeObjectRelease();
    goto LABEL_154;
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  unint64_t v1;
  char **v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  int CurrentAttribute;
  int v10;
  int v11;
  unint64_t *v12;
  char v13;
  char v14;
  long long *Value;
  char *v16;
  uint64_t v17;
  uint64_t i;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  BOOL v26;
  unint64_t v27;
  char **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  double v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  long long v39;
  long long v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  long long v57;
  long long v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  void *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  id v70;
  void *v71;
  char **v72;
  char *v73;
  uint64_t v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  char v77;
  int v78;
  char *v79;
  char *v80;
  char *v81;
  char v82;
  uint64_t v83;
  Swift::UInt v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  char v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  void *v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t OutputValue;
  char *v107;
  int v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  int v117;
  char *v118;
  int v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  long long v124;
  uint64_t v125;
  unint64_t v126;
  long long v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130[5];
  long long v131;
  uint64_t v132;
  unint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  _OWORD v138[4];
  char v139;
  uint64_t v140;

  int64_t v2 = (char **)v0;
  char v140 = *MEMORY[0x1E4F143B8];
  v138[0] = *(_OWORD *)AGGraphGetValue();
  if ((EnvironmentValues.accessibilityEnabled.getter() & 1) == 0)
  {
    if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E4F4E7A0])
    {
      if (one-time initialization token for defaultValue != -1) {
        swift_once();
      }
      uint64_t Value = &static AccessibilityNodesKey.defaultValue;
    }
    else
    {
      uint64_t Value = (long long *)AGGraphGetValue();
    }
    uint64_t v21 = *((void *)Value + 1);
    *(void *)&v138[0] = *(void *)Value;
    *((void *)&v138[0] + 1) = v21;
    return AGGraphSetOutputValue();
  }
  if (*(_DWORD *)(v0 + 80) != *(_DWORD *)AGGraphGetValue() >> 1)
  {

    *(void *)(v0 + 64) = 0;
    swift_unknownObjectWeakAssign();
    *(_DWORD *)(v0 + 80) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  int v3 = AGGraphGetValue();
  uint64_t v5 = v4;
  outlined init with copy of AccessibilityScrollableContextModifier(v3, (uint64_t)v138);
  id v139 = v5 & 1;
  char v6 = (uint64_t *)AGGraphGetValue();
  char v7 = *v6;
  uint64_t v8 = v6[1];
  Currentint Attribute = AGGraphGetCurrentAttribute();
  unint64_t v10 = *MEMORY[0x1E4F4E7A0];
  if (CurrentAttribute == *MEMORY[0x1E4F4E7A0])
  {
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v109 = v8;
  swift_retain();
  swift_retain();
  AccessibilityAttachmentToken.init<A>(_:)();
  unint64_t v118 = v134;
  uint64_t v119 = v135;
  int v11 = *((_DWORD *)v2 + 9);
  uint64_t v117 = v10;
  if (v11 == v10
    || (uint64_t v12 = (unint64_t *)AGGraphGetValue(),
        uint64_t v14 = v13,
        unint64_t v1 = *v12,
        id v107 = (char *)v12[1],
        swift_bridgeObjectRetain(),
        !v1))
  {
    id v107 = 0;
    unint64_t v1 = MEMORY[0x1E4FBC860];
  }
  else if (v14)
  {
    unint64_t v111 = 1;
    goto LABEL_15;
  }
  unint64_t v111 = 0;
LABEL_15:
  int v16 = v2[8];
  uint64_t v8 = v1 >> 62;
  unint64_t v110 = v7;
  if (v16)
  {
    if (!v8)
    {
      uint64_t v17 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v17)
      {
LABEL_18:
        if (v17 < 1) {
          __break(1u);
        }
        for (uint64_t i = 0; i != v17; ++i)
        {
          if ((v1 & 0xC000000000000001) != 0) {
            char v19 = (id)MEMORY[0x18C117680](i, v1);
          }
          else {
            char v19 = *(id *)(v1 + 8 * i + 32);
          }
          int v20 = v19;
          swift_unknownObjectWeakAssign();
        }
      }
LABEL_29:
      swift_bridgeObjectRelease();

      v2[8] = 0;
      goto LABEL_30;
    }
LABEL_28:
    swift_bridgeObjectRetain_n();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    if (v17) {
      goto LABEL_18;
    }
    goto LABEL_29;
  }
  swift_bridgeObjectRetain_n();
LABEL_30:
  if (v8)
  {
LABEL_102:
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v23) {
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t v23 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v23)
    {
LABEL_32:
      unint64_t v24 = 0;
      int v115 = v23;
      uint64_t v116 = v1 & 0xC000000000000001;
      int v113 = v1 & 0xFFFFFFFFFFFFFF8;
      uint64_t v114 = 0;
      unint64_t v112 = v1 + 32;
      uint64_t v108 = v111;
      uint64_t v121 = v1;
      while (1)
      {
        if (v116)
        {
          uint64_t v25 = (char *)MEMORY[0x18C117680](v24, v1);
          uint64_t v26 = __OFADD__(v24, 1);
          uint64_t v27 = v24 + 1;
          if (v26) {
            goto LABEL_98;
          }
        }
        else
        {
          if (v24 >= *(void *)(v113 + 16)) {
            goto LABEL_101;
          }
          uint64_t v25 = (char *)*(id *)(v112 + 8 * v24);
          uint64_t v26 = __OFADD__(v24, 1);
          uint64_t v27 = v24 + 1;
          if (v26)
          {
LABEL_98:
            __break(1u);
LABEL_99:
            __break(1u);
LABEL_100:
            __break(1u);
LABEL_101:
            __break(1u);
            goto LABEL_102;
          }
        }
        unint64_t v122 = v25;
        uint64_t v120 = v27;
        uint64_t v28 = v2;
        outlined init with copy of AccessibilityScrollableContext((uint64_t)v138, (uint64_t)&v134);
        type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
        swift_bridgeObjectRetain();
        uint64_t v29 = Dictionary.init(minimumCapacity:)();
        type metadata accessor for AccessibilityPropertiesEntry<AccessibilityScrollableContext?>();
        uint64_t v31 = v30;
        uint64_t v132 = v30;
        unint64_t v1 = lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityScrollableContext?>);
        uint64_t v133 = v1;
        *(void *)&long long v131 = swift_allocObject();
        outlined init with copy of AccessibilityScrollableContext?((uint64_t)&v134, v131 + 16, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, MEMORY[0x1E4FBB718]);
        outlined init with take of OptionalBinaryInteger(&v131, (uint64_t)v130);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v123 = v29;
        id v33 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v130, v130[3]);
        int64_t v2 = &v107;
        char v34 = MEMORY[0x1F4188790](v33);
        id v36 = (char *)&v107 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, double))(v37 + 16))(v36, v34);
        uint64_t v128 = v31;
        long long v129 = v1;
        unint64_t v38 = swift_allocObject();
        *(void *)&uint64_t v127 = v38;
        char v39 = *((_OWORD *)v36 + 3);
        *(_OWORD *)(v38 + 48) = *((_OWORD *)v36 + 2);
        *(_OWORD *)(v38 + 64) = v39;
        *(void *)(v38 + 79) = *(void *)(v36 + 63);
        BOOL v40 = *((_OWORD *)v36 + 1);
        *(_OWORD *)(v38 + 16) = *(_OWORD *)v36;
        *(_OWORD *)(v38 + 32) = v40;
        unint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey);
        char v43 = *(void *)(v29 + 16);
        BOOL v44 = (v41 & 1) == 0;
        unint64_t v45 = v43 + v44;
        if (__OFADD__(v43, v44)) {
          goto LABEL_99;
        }
        uint64_t v46 = v41;
        if (*(void *)(v29 + 24) >= v45)
        {
          unint64_t v49 = v122;
          if (isUniquelyReferenced_nonNull_native)
          {
            int v50 = v123;
            if (v41) {
              goto LABEL_49;
            }
          }
          else
          {
            specialized _NativeDictionary.copy()();
            int v50 = v123;
            if (v46) {
              goto LABEL_49;
            }
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v45, isUniquelyReferenced_nonNull_native);
          long long v47 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey);
          unint64_t v49 = v122;
          if ((v46 & 1) != (v48 & 1))
          {
            uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          unint64_t v42 = v47;
          int v50 = v123;
          if (v46)
          {
LABEL_49:
            unint64_t v61 = *(void *)(v50 + 56) + 40 * v42;
            __swift_destroy_boxed_opaque_existential_1(v61);
            outlined init with take of OptionalBinaryInteger(&v127, v61);
            goto LABEL_50;
          }
        }
        uint64_t v51 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v127, v128);
        char v52 = MEMORY[0x1F4188790](v51);
        uint64_t v54 = (char *)&v107 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, double))(v55 + 16))(v54, v52);
        uint64_t v125 = v31;
        uint64_t v126 = v1;
        unint64_t v56 = swift_allocObject();
        *(void *)&int v124 = v56;
        *(void *)(v56 + 79) = *(void *)(v54 + 63);
        uint64_t v57 = *((_OWORD *)v54 + 3);
        *(_OWORD *)(v56 + 48) = *((_OWORD *)v54 + 2);
        *(_OWORD *)(v56 + 64) = v57;
        uint64_t v58 = *((_OWORD *)v54 + 1);
        *(_OWORD *)(v56 + 16) = *(_OWORD *)v54;
        *(_OWORD *)(v56 + 32) = v58;
        *(void *)(v50 + 8 * (v42 >> 6) + 64) |= 1 << v42;
        *(void *)(*(void *)(v50 + 48) + 8 * v42) = &type metadata for AccessibilityProperties.ScrollableContextKey;
        outlined init with take of OptionalBinaryInteger(&v124, *(void *)(v50 + 56) + 40 * v42);
        unint64_t v59 = *(void *)(v50 + 16);
        uint64_t v26 = __OFADD__(v59, 1);
        unint64_t v60 = v59 + 1;
        if (v26) {
          goto LABEL_100;
        }
        *(void *)(v50 + 16) = v60;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v127);
        unint64_t v49 = v122;
LABEL_50:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v130);
        swift_bridgeObjectRelease();
        outlined destroy of AccessibilityScrollableContext?((uint64_t)&v134, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, MEMORY[0x1E4FBB718]);
        uint64_t v134 = (char *)v50;
        static AccessibilityAttachment.properties(_:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        int64_t v2 = v28;
        id v62 = v119;
        if (*((_DWORD *)v28 + 8) != v117)
        {
          long long v63 = AGGraphGetValue();
          uint64_t v65 = *(char **)v63;
          long long v64 = *(void **)(v63 + 8);
          if (!*(unsigned char *)(v63 + 16))
          {
            id v70 = v64;
            swift_bridgeObjectRetain();
LABEL_56:
            uint64_t v134 = v65;
            AccessibilityProperties.merge(with:)((uint64_t *)&v134);
            uint64_t v134 = v136;
            uint64_t v135 = v137;
            char v71 = (void *)AccessibilityAttachment.platformElement.getter();

            unint64_t v69 = v118;
            if (!v71)
            {
              uint64_t v134 = v65;
              uint64_t v135 = (char *)v64;
              if (AccessibilityAttachment.platformElement.getter()) {
                AccessibilityAttachment.platformElement.setter();
              }
            }
            swift_bridgeObjectRelease();

            goto LABEL_60;
          }
          if (*(unsigned char *)(v63 + 16) == 1)
          {
            uint64_t v66 = swift_bridgeObjectRetain();
            uint64_t v67 = v114;
            uint64_t v68 = specialized Sequence.compactMap<A>(_:)(v66);
            uint64_t v114 = v67;
            static AccessibilityAttachment.combine(_:)(v68, (uint64_t *)&v134);
            swift_bridgeObjectRelease();
            outlined consume of AccessibilityAttachment.Tree((uint64_t)v65, v64, 1);
            uint64_t v65 = v134;
            long long v64 = v135;
            goto LABEL_56;
          }
        }
        unint64_t v69 = v118;
LABEL_60:
        uint64_t v72 = (char **)&v49[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
        swift_beginAccess();
        uint64_t v73 = *v72;
        uint64_t v74 = *((void *)*v72 + 2);
        if (v74)
        {
          swift_bridgeObjectRetain();
          uint64_t v75 = (unsigned __int8 *)(v73 + 64);
          int v76 = (unsigned __int8 *)(v73 + 64);
          while (1)
          {
            unint64_t v78 = *v76;
            v76 += 40;
            uint64_t v77 = v78;
            if (v78 != 255)
            {
              uint64_t v134 = (char *)*((void *)v75 - 1);
              LOBYTE(v135) = v77;
              *(void *)&long long v131 = v69;
              BYTE8(v131) = v62;
              if (static AccessibilityAttachmentToken.== infix(_:_:)()) {
                break;
              }
            }
            uint64_t v75 = v76;
            if (!--v74) {
              goto LABEL_66;
            }
          }
          LOBYTE(v74) = 1;
LABEL_66:
          swift_bridgeObjectRelease();
        }
        unint64_t v80 = v136;
        char v79 = v137;
        uint64_t v134 = v136;
        uint64_t v135 = v137;
        if (AccessibilityAttachment.isEmpty.getter())
        {
          if ((v74 & 1) == 0) {
            goto LABEL_33;
          }
LABEL_71:
          uint64_t v134 = v80;
          uint64_t v135 = v79;
          *(void *)&long long v131 = v69;
          BYTE8(v131) = v119;
          uint64_t v81 = v79;
          swift_bridgeObjectRetain();
          int v82 = specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)(&v134, (uint64_t *)&v131, 0);

          swift_bridgeObjectRelease_n();
          if ((v82 & 1) == 0) {
            goto LABEL_34;
          }
          uint64_t v108 = 1;
LABEL_89:
          unint64_t v24 = v120;
          unint64_t v1 = v121;
          if (v120 == v115)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_104;
          }
        }
        else
        {
          if (v74) {
            goto LABEL_71;
          }
          AccessibilityNode.traits.getter((uint64_t *)&v134);
          if ((v134 & 0x80000) == 0)
          {
            uint64_t v83 = *(void *)&v49[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_relationshipScope];
            if (!v83) {
              goto LABEL_84;
            }
            uint64_t v84 = *(void *)&v49[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];
            swift_beginAccess();
            uint64_t v85 = *(void *)(v83 + 32);
            if (*(void *)(v85 + 16) && (uint64_t v86 = specialized __RawDictionaryStorage.find<A>(_:)(v84, 0), (v87 & 1) != 0))
            {
              id v88 = *(void *)(*(void *)(v85 + 56) + 8 * v86);
              swift_endAccess();
              swift_retain();
              swift_bridgeObjectRetain();
              id v89 = v114;
              uint64_t v90 = specialized Sequence.reduce<A>(into:_:)(MEMORY[0x1E4FBC860], v88, v83, 1u);
              uint64_t v114 = v89;
              unint64_t v69 = v118;
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_endAccess();
              swift_retain();
              uint64_t v90 = MEMORY[0x1E4FBC860];
            }
            if (v90 >> 62)
            {
              swift_bridgeObjectRetain();
              char v91 = _CocoaArrayWrapper.endIndex.getter();
              swift_release();
              swift_bridgeObjectRelease();
            }
            else
            {
              char v91 = *(void *)((v90 & 0xFFFFFFFFFFFFFF8) + 0x10);
              swift_release();
            }
            swift_bridgeObjectRelease();
            if (!v91) {
              goto LABEL_84;
            }
          }
          *(void *)&long long v131 = v80;
          AccessibilityProperties.traits.getter();
          if ((BYTE2(v134) & 8) == 0 && (BYTE2(v135) & 8) != 0)
          {
LABEL_84:
            uint64_t v134 = v80;
            uint64_t v135 = v79;
            uint64_t v92 = v79;
            swift_bridgeObjectRetain();
            AccessibilityNode.scheduleNotifyForAttachmentAddition(of:)(&v134);
            uint64_t v93 = *v72;
            swift_bridgeObjectRetain_n();
            uint64_t v94 = v92;
            char v95 = swift_isUniquelyReferenced_nonNull_native();
            *uint64_t v72 = v93;
            if ((v95 & 1) == 0)
            {
              uint64_t v93 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v93 + 2) + 1, 1, v93);
              *uint64_t v72 = v93;
            }
            char v97 = *((void *)v93 + 2);
            int v96 = *((void *)v93 + 3);
            if (v97 >= v96 >> 1)
            {
              uint64_t v93 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v96 > 1), v97 + 1, 1, v93);
              *uint64_t v72 = v93;
            }
            *((void *)v93 + 2) = v97 + 1;
            long long v98 = &v93[40 * v97];
            *((void *)v98 + 4) = v80;
            *((void *)v98 + 5) = v79;
            *((void *)v98 + 6) = 0;
            *((void *)v98 + 7) = v69;
            v98[64] = v119;
            uint64_t v99 = v122;
            Swift::UInt v100 = &v122[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
            uint64_t v101 = *(void *)&v122[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
            unint64_t v102 = *(void **)&v122[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
            *(void *)Swift::UInt v100 = 0;
            *((void *)v100 + 1) = 0;
            outlined consume of AccessibilityAttachment?(v101, v102);
            uint64_t v108 = 1;
            v99[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;

            swift_bridgeObjectRelease_n();
            goto LABEL_89;
          }
LABEL_33:
          swift_bridgeObjectRelease();

LABEL_34:
          unint64_t v24 = v120;
          unint64_t v1 = v121;
          if (v120 == v115)
          {
            swift_bridgeObjectRelease_n();
            if (v108) {
              goto LABEL_104;
            }
            if (v111)
            {
              char v103 = v2[8];
              if (v103)
              {
                *(void *)(swift_allocObject() + 16) = v103;
                uint64_t v104 = v103;
                static Update.enqueueAction(_:)();

                swift_release();
              }
            }
LABEL_105:
            Outputuint64_t Value = AGGraphGetOutputValue();
            unint64_t v105 = v107;
            if (OutputValue) {
              unint64_t v105 = *(char **)(OutputValue + 8);
            }
            goto LABEL_107;
          }
        }
      }
    }
  }
  swift_bridgeObjectRelease_n();
  if ((v111 & 1) == 0) {
    goto LABEL_105;
  }
LABEL_104:
  DisplayList.Version.init(forUpdate:)();
  unint64_t v105 = v134;
LABEL_107:
  uint64_t v134 = (char *)v1;
  uint64_t v135 = v105;
  swift_bridgeObjectRetain();
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of ScrollableCollection?((uint64_t)v138, (uint64_t (*)(void))type metadata accessor for (value: AccessibilityScrollableContextModifier, changed: Bool));
  return swift_bridgeObjectRelease();
}

uint64_t specialized AccessibilityBridgedPlatformView.updateValue()()
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  type metadata accessor for (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, changed: Bool)(0, &lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>, changed: Bool), (void (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
  uint64_t v1 = v0 - 8;
  MEMORY[0x1F4188790](v0);
  int v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  char v6 = (char *)&v24 - v5;
  uint64_t v7 = *(int *)(v1 + 56);
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>();
  uint64_t v9 = v8;
  uint64_t Value = AGGraphGetValue();
  char v12 = v11;
  outlined init with copy of ScrollableCollection?(Value, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
  v6[v7] = v12 & 1;
  uint64_t v13 = *(int *)(v1 + 56);
  outlined init with copy of ScrollableCollection?((uint64_t)v6, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
  v3[v13] = v12 & 1;
  uint64_t v14 = *(id *)&v3[*(int *)(v9 + 36)];
  outlined destroy of ScrollableCollection?((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
  id v15 = *(id *)((char *)v14 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v14) + 0x78));

  if ((v12 & 1) != 0 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    id v16 = v15;
    uint64_t v17 = Dictionary.init(minimumCapacity:)();
    id v26 = v16;
    uint64_t v27 = v17;
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  id v18 = v15;
  uint64_t v25 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  uint64_t v28 = v19;
  uint64_t v29 = lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>);
  id v26 = v15;
  specialized Dictionary.subscript.setter((uint64_t)&v26, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  uint64_t v20 = v25;
  Outputuint64_t Value = (id *)AGGraphGetOutputValue();
  if (!OutputValue) {
    __break(1u);
  }
  id v22 = *OutputValue;
  id v26 = v22;
  uint64_t v27 = v20;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  return outlined destroy of (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, changed: Bool)((uint64_t)v6, &lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>, changed: Bool), (void (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
}

{
  void *Value;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  id *OutputValue;
  id v16;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v23 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitStepper>>();
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v1 = Value[1];
  uint64_t v2 = Value[3];
  int v3 = (void *)Value[7];
  uint64_t v4 = (void *)Value[8];
  uint64_t v5 = *(void **)((char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x78));
  if ((v6 & 1) != 0 || !AGGraphGetOutputValue())
  {
    swift_retain();
    unint64_t v10 = v5;
    outlined copy of AppIntentExecutor?(v1);
    outlined copy of AppIntentExecutor?(v2);
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    swift_retain();
    char v11 = v3;
    char v12 = v4;
    uint64_t v19 = v10;
    uint64_t v20 = Dictionary.init(minimumCapacity:)();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    outlined copy of AppIntentExecutor?(v1);
    outlined copy of AppIntentExecutor?(v2);
    swift_retain();
    uint64_t v7 = v3;
    uint64_t v8 = v4;
    uint64_t v9 = v5;
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  uint64_t v13 = v5;
  id v18 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  uint64_t v21 = v14;
  id v22 = lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>);
  uint64_t v19 = v5;
  specialized Dictionary.subscript.setter((uint64_t)&v19, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  Outputuint64_t Value = (id *)AGGraphGetOutputValue();
  if (!OutputValue) {
    __break(1u);
  }
  id v16 = *OutputValue;
  uint64_t v19 = v16;
  uint64_t v20 = v18;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v2);

  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Value;
  char v11;
  char v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id *OutputValue;
  id v22;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  uint64_t v30 = *MEMORY[0x1E4F143B8];
  type metadata accessor for (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, changed: Bool)(0, &lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>, changed: Bool), (void (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
  uint64_t v1 = v0 - 8;
  MEMORY[0x1F4188790](v0);
  int v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  char v6 = (char *)&v24 - v5;
  uint64_t v7 = *(int *)(v1 + 56);
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>();
  uint64_t v9 = v8;
  uint64_t Value = AGGraphGetValue();
  char v12 = v11;
  outlined init with copy of ScrollableCollection?(Value, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
  v6[v7] = v12 & 1;
  uint64_t v13 = *(int *)(v1 + 56);
  outlined init with copy of ScrollableCollection?((uint64_t)v6, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
  v3[v13] = v12 & 1;
  uint64_t v14 = *(id *)&v3[*(int *)(v9 + 36)];
  outlined destroy of ScrollableCollection?((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
  id v15 = *(id *)((char *)v14 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v14) + 0x78));

  if ((v12 & 1) != 0 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    id v16 = v15;
    uint64_t v17 = Dictionary.init(minimumCapacity:)();
    id v26 = v16;
    uint64_t v27 = v17;
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  id v18 = v15;
  uint64_t v25 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  uint64_t v28 = v19;
  uint64_t v29 = lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>);
  id v26 = v15;
  specialized Dictionary.subscript.setter((uint64_t)&v26, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  uint64_t v20 = v25;
  Outputuint64_t Value = (id *)AGGraphGetOutputValue();
  if (!OutputValue) {
    __break(1u);
  }
  id v22 = *OutputValue;
  id v26 = v22;
  uint64_t v27 = v20;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  return outlined destroy of (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, changed: Bool)((uint64_t)v6, &lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>, changed: Bool), (void (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
}

{
  uint64_t Value;
  char v1;
  char v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id *OutputValue;
  id v10;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  char v18;
  unsigned char v19[104];
  uint64_t v20;

  uint64_t v20 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>();
  uint64_t Value = AGGraphGetValue();
  uint64_t v2 = v1;
  outlined init with copy of ScrollableCollection?(Value, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
  v19[96] = v2 & 1;
  outlined init with copy of ScrollableCollection?((uint64_t)v19, (uint64_t)&v13, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
  id v18 = v2 & 1;
  int v3 = v17;
  outlined destroy of ScrollableCollection?((uint64_t)&v13, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
  uint64_t v4 = *(id *)((char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x78));

  if ((v2 & 1) != 0 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    uint64_t v5 = v4;
    char v6 = Dictionary.init(minimumCapacity:)();
    uint64_t v13 = v5;
    uint64_t v14 = v6;
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  uint64_t v7 = v4;
  char v12 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  id v15 = v8;
  id v16 = lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>);
  uint64_t v13 = v4;
  specialized Dictionary.subscript.setter((uint64_t)&v13, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  Outputuint64_t Value = (id *)AGGraphGetOutputValue();
  if (!OutputValue) {
    __break(1u);
  }
  unint64_t v10 = *OutputValue;
  uint64_t v13 = v10;
  uint64_t v14 = v12;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  return outlined destroy of (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, changed: Bool)((uint64_t)v19, &lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>, changed: Bool), (void (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Value;
  char v11;
  char v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id *OutputValue;
  id v22;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  uint64_t v30 = *MEMORY[0x1E4F143B8];
  type metadata accessor for (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, changed: Bool)(0, &lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>, changed: Bool), (void (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
  uint64_t v1 = v0 - 8;
  MEMORY[0x1F4188790](v0);
  int v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  char v6 = (char *)&v24 - v5;
  uint64_t v7 = *(int *)(v1 + 56);
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>();
  uint64_t v9 = v8;
  uint64_t Value = AGGraphGetValue();
  char v12 = v11;
  outlined init with copy of ScrollableCollection?(Value, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
  v6[v7] = v12 & 1;
  uint64_t v13 = *(int *)(v1 + 56);
  outlined init with copy of ScrollableCollection?((uint64_t)v6, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
  v3[v13] = v12 & 1;
  uint64_t v14 = *(id *)&v3[*(int *)(v9 + 36)];
  outlined destroy of ScrollableCollection?((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
  id v15 = *(id *)((char *)v14 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v14) + 0x78));

  if ((v12 & 1) != 0 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    id v16 = v15;
    uint64_t v17 = Dictionary.init(minimumCapacity:)();
    id v26 = v16;
    uint64_t v27 = v17;
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  id v18 = v15;
  uint64_t v25 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  uint64_t v28 = v19;
  uint64_t v29 = lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>);
  id v26 = v15;
  specialized Dictionary.subscript.setter((uint64_t)&v26, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  uint64_t v20 = v25;
  Outputuint64_t Value = (id *)AGGraphGetOutputValue();
  if (!OutputValue) {
    __break(1u);
  }
  id v22 = *OutputValue;
  id v26 = v22;
  uint64_t v27 = v20;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  return outlined destroy of (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, changed: Bool)((uint64_t)v6, &lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>, changed: Bool), (void (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Value;
  char v11;
  char v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id *OutputValue;
  id v22;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  uint64_t v30 = *MEMORY[0x1E4F143B8];
  type metadata accessor for (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, changed: Bool)(0, &lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>, changed: Bool), (void (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>);
  uint64_t v1 = v0 - 8;
  MEMORY[0x1F4188790](v0);
  int v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  char v6 = (char *)&v24 - v5;
  uint64_t v7 = *(int *)(v1 + 56);
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>();
  uint64_t v9 = v8;
  uint64_t Value = AGGraphGetValue();
  char v12 = v11;
  outlined init with copy of ScrollableCollection?(Value, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>);
  v6[v7] = v12 & 1;
  uint64_t v13 = *(int *)(v1 + 56);
  outlined init with copy of ScrollableCollection?((uint64_t)v6, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>);
  v3[v13] = v12 & 1;
  uint64_t v14 = *(id *)&v3[*(int *)(v9 + 36)];
  outlined destroy of ScrollableCollection?((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>);
  id v15 = *(id *)((char *)v14 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v14) + 0x78));

  if ((v12 & 1) != 0 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    id v16 = v15;
    uint64_t v17 = Dictionary.init(minimumCapacity:)();
    id v26 = v16;
    uint64_t v27 = v17;
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  id v18 = v15;
  uint64_t v25 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  uint64_t v28 = v19;
  uint64_t v29 = lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>);
  id v26 = v15;
  specialized Dictionary.subscript.setter((uint64_t)&v26, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  uint64_t v20 = v25;
  Outputuint64_t Value = (id *)AGGraphGetOutputValue();
  if (!OutputValue) {
    __break(1u);
  }
  id v22 = *OutputValue;
  id v26 = v22;
  uint64_t v27 = v20;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  return outlined destroy of (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, changed: Bool)((uint64_t)v6, &lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>, changed: Bool), (void (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>);
}

{
  uint64_t Value;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  id *OutputValue;
  id v20;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  uint64_t v31 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>();
  uint64_t Value = AGGraphGetValue();
  uint64_t v1 = *(void *)Value;
  uint64_t v2 = *(unsigned char *)(Value + 8);
  int v3 = *(unsigned __int8 *)(Value + 24);
  uint64_t v4 = *(unsigned char *)(Value + 25);
  uint64_t v24 = *(void *)(Value + 32);
  uint64_t v25 = *(void *)(Value + 16);
  uint64_t v5 = *(unsigned __int8 *)(Value + 40);
  char v6 = *(void *)(Value + 48);
  uint64_t v23 = *(unsigned char *)(Value + 56);
  uint64_t v7 = *(void **)(Value + 88);
  uint64_t v8 = *(void **)(Value + 96);
  uint64_t v9 = *(void **)((char *)v7 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v7) + 0x78));
  id v22 = v6;
  if ((v10 & 1) != 0 || !AGGraphGetOutputValue())
  {
    uint64_t v14 = v9;
    outlined copy of Environment<Bool>.Content(v1, v2);
    outlined copy of Environment<CGFloat?>.Content(v25, v3, v4);
    outlined copy of Environment<HoverEffect?>.Content(v24, v5);
    outlined copy of Environment<Bool>.Content(v6, v23);
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    swift_bridgeObjectRetain();
    swift_retain();
    id v15 = v7;
    id v16 = v8;
    uint64_t v27 = v14;
    uint64_t v28 = Dictionary.init(minimumCapacity:)();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined copy of Environment<Bool>.Content(v1, v2);
    outlined copy of Environment<CGFloat?>.Content(v25, v3, v4);
    outlined copy of Environment<HoverEffect?>.Content(v24, v5);
    outlined copy of Environment<Bool>.Content(v6, v23);
    swift_bridgeObjectRetain();
    swift_retain();
    char v11 = v7;
    char v12 = v8;
    uint64_t v13 = v9;
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  uint64_t v17 = v9;
  id v26 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  uint64_t v29 = v18;
  uint64_t v30 = lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>);
  uint64_t v27 = v9;
  specialized Dictionary.subscript.setter((uint64_t)&v27, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  Outputuint64_t Value = (id *)AGGraphGetOutputValue();
  if (!OutputValue) {
    __break(1u);
  }
  uint64_t v20 = *OutputValue;
  uint64_t v27 = v20;
  uint64_t v28 = v26;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  outlined consume of Environment<Bool>.Content(v1, v2);
  outlined consume of Environment<CGFloat?>.Content(v25, v3, v4);
  outlined consume of Environment<AnyShapeStyle?>.Content(v24, v5);
  outlined consume of Environment<Bool>.Content(v22, v23);

  swift_release();
  return swift_bridgeObjectRelease();
}

{
  void *Value;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  char v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  id *OutputValue;
  id v17;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  uint64_t v24 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>();
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v1 = (void *)Value[2];
  uint64_t v2 = (void *)Value[6];
  int v3 = (void *)Value[7];
  uint64_t v4 = *(void **)((char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x78));
  if ((v5 & 1) != 0 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    unint64_t v10 = v4;
    swift_retain();
    swift_retain();
    char v11 = v1;
    swift_bridgeObjectRetain();
    char v12 = v2;
    uint64_t v13 = v3;
    uint64_t v20 = v10;
    uint64_t v21 = Dictionary.init(minimumCapacity:)();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    char v6 = v2;
    uint64_t v7 = v3;
    uint64_t v8 = v4;
    swift_retain();
    swift_retain();
    uint64_t v9 = v1;
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  uint64_t v14 = v4;
  uint64_t v19 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  id v22 = v15;
  uint64_t v23 = lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>);
  uint64_t v20 = v4;
  specialized Dictionary.subscript.setter((uint64_t)&v20, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  Outputuint64_t Value = (id *)AGGraphGetOutputValue();
  if (!OutputValue) {
    __break(1u);
  }
  uint64_t v17 = *OutputValue;
  uint64_t v20 = v17;
  uint64_t v21 = v19;
  AGGraphSetOutputValue();

  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Value;
  char v11;
  char v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id *OutputValue;
  id v22;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  uint64_t v30 = *MEMORY[0x1E4F143B8];
  type metadata accessor for (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, changed: Bool)(0, &lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, changed: Bool), (void (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
  uint64_t v1 = v0 - 8;
  MEMORY[0x1F4188790](v0);
  int v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  char v6 = (char *)&v24 - v5;
  uint64_t v7 = *(int *)(v1 + 56);
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>();
  uint64_t v9 = v8;
  uint64_t Value = AGGraphGetValue();
  char v12 = v11;
  outlined init with copy of ScrollableCollection?(Value, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
  v6[v7] = v12 & 1;
  uint64_t v13 = *(int *)(v1 + 56);
  outlined init with copy of ScrollableCollection?((uint64_t)v6, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
  v3[v13] = v12 & 1;
  uint64_t v14 = *(id *)&v3[*(int *)(v9 + 36)];
  outlined destroy of ScrollableCollection?((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
  id v15 = *(id *)((char *)v14 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v14) + 0x78));

  if ((v12 & 1) != 0 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    id v16 = v15;
    uint64_t v17 = Dictionary.init(minimumCapacity:)();
    id v26 = v16;
    uint64_t v27 = v17;
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  id v18 = v15;
  uint64_t v25 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  uint64_t v28 = v19;
  uint64_t v29 = lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>);
  id v26 = v15;
  specialized Dictionary.subscript.setter((uint64_t)&v26, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  uint64_t v20 = v25;
  Outputuint64_t Value = (id *)AGGraphGetOutputValue();
  if (!OutputValue) {
    __break(1u);
  }
  id v22 = *OutputValue;
  id v26 = v22;
  uint64_t v27 = v20;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  return outlined destroy of (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, changed: Bool)((uint64_t)v6, &lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, changed: Bool), (void (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
}

{
  uint64_t Value;
  char v1;
  char v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id *OutputValue;
  id v12;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char v20;
  unsigned char v21[88];
  uint64_t v22;

  id v22 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>();
  uint64_t Value = AGGraphGetValue();
  uint64_t v2 = v1;
  outlined init with copy of ScrollableCollection?(Value, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
  int v3 = v2 & 1;
  v21[80] = v2 & 1;
  outlined init with copy of ScrollableCollection?((uint64_t)v21, (uint64_t)&v15, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
  uint64_t v20 = v2 & 1;
  uint64_t v4 = v19;
  outlined destroy of ScrollableCollection?((uint64_t)&v15, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
  uint64_t v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)((char *)v4
                                                             + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x78)), sel_view));
  if (!v5)
  {
    __break(1u);
    goto LABEL_8;
  }
  char v6 = v5;

  if (v3 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    uint64_t v7 = v6;
    uint64_t v8 = Dictionary.init(minimumCapacity:)();
    id v15 = v7;
    id v16 = v8;
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  uint64_t v9 = v6;
  uint64_t v14 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  uint64_t v17 = v10;
  id v18 = lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>);
  id v15 = v6;
  specialized Dictionary.subscript.setter((uint64_t)&v15, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  Outputuint64_t Value = (id *)AGGraphGetOutputValue();
  if (!OutputValue) {
LABEL_8:
  }
    __break(1u);
  char v12 = *OutputValue;
  id v15 = v12;
  id v16 = v14;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  return outlined destroy of (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, changed: Bool)((uint64_t)v21, &lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>, changed: Bool), (void (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Value;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id *OutputValue;
  id v24;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v32 = *MEMORY[0x1E4F143B8];
  type metadata accessor for (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, changed: Bool)(0, &lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>, changed: Bool), (void (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
  uint64_t v1 = v0 - 8;
  MEMORY[0x1F4188790](v0);
  int v3 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  char v6 = (char *)&v26 - v5;
  uint64_t v7 = *(int *)(v1 + 56);
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>();
  uint64_t v9 = v8;
  uint64_t Value = AGGraphGetValue();
  char v12 = v11;
  outlined init with copy of ScrollableCollection?(Value, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
  uint64_t v13 = v12 & 1;
  v6[v7] = v12 & 1;
  uint64_t v14 = *(int *)(v1 + 56);
  outlined init with copy of ScrollableCollection?((uint64_t)v6, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
  v3[v14] = v13;
  id v15 = *(id *)&v3[*(int *)(v9 + 36)];
  outlined destroy of ScrollableCollection?((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
  id v16 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)((char *)v15
                                                              + *(void *)((*MEMORY[0x1E4FBC8C8] & *v15) + 0x78)), sel_view));
  if (!v16)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v17 = v16;

  if (v13 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    id v18 = v17;
    uint64_t v19 = Dictionary.init(minimumCapacity:)();
    uint64_t v28 = v18;
    uint64_t v29 = v19;
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  uint64_t v20 = v17;
  uint64_t v27 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  uint64_t v30 = v21;
  uint64_t v31 = lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>);
  uint64_t v28 = v17;
  specialized Dictionary.subscript.setter((uint64_t)&v28, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  id v22 = v27;
  Outputuint64_t Value = (id *)AGGraphGetOutputValue();
  if (!OutputValue) {
LABEL_8:
  }
    __break(1u);
  uint64_t v24 = *OutputValue;
  uint64_t v28 = v24;
  uint64_t v29 = v22;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  return outlined destroy of (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, changed: Bool)((uint64_t)v6, &lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>, changed: Bool), (void (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
}

{
  uint64_t Value;
  void *v1;
  void *v2;
  void *v3;
  char v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  id *OutputValue;
  id v14;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  uint64_t v21 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>();
  uint64_t Value = AGGraphGetValue();
  uint64_t v1 = *(void **)(Value + 40);
  uint64_t v2 = *(void **)(Value + 48);
  int v3 = *(void **)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x78));
  if ((v4 & 1) != 0 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    uint64_t v8 = v3;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    uint64_t v9 = v1;
    unint64_t v10 = v2;
    uint64_t v17 = v8;
    id v18 = Dictionary.init(minimumCapacity:)();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    swift_retain();
    uint64_t v5 = v1;
    char v6 = v2;
    uint64_t v7 = v3;
    swift_bridgeObjectRetain();
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  char v11 = v3;
  id v16 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  uint64_t v19 = v12;
  uint64_t v20 = lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>);
  uint64_t v17 = v3;
  specialized Dictionary.subscript.setter((uint64_t)&v17, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  Outputuint64_t Value = (id *)AGGraphGetOutputValue();
  if (!OutputValue) {
    __break(1u);
  }
  uint64_t v14 = *OutputValue;
  uint64_t v17 = v14;
  id v18 = v16;
  AGGraphSetOutputValue();

  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_release();
}

{
  void *v0;
  void *v1;
  char v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  id *OutputValue;
  id v10;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  uint64_t v17 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>();
  uint64_t v0 = *(void **)(AGGraphGetValue() + 16);
  uint64_t v1 = *(void **)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78));
  if ((v2 & 1) != 0 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    uint64_t v5 = v1;
    swift_retain();
    char v6 = v0;
    uint64_t v13 = v5;
    uint64_t v14 = Dictionary.init(minimumCapacity:)();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    int v3 = v0;
    uint64_t v4 = v1;
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  uint64_t v7 = v1;
  char v12 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  id v15 = v8;
  id v16 = lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>);
  uint64_t v13 = v1;
  specialized Dictionary.subscript.setter((uint64_t)&v13, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  Outputuint64_t Value = (id *)AGGraphGetOutputValue();
  if (!OutputValue) {
    __break(1u);
  }
  unint64_t v10 = *OutputValue;
  uint64_t v13 = v10;
  uint64_t v14 = v12;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Value;
  char v11;
  char v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id *OutputValue;
  id v22;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  uint64_t v30 = *MEMORY[0x1E4F143B8];
  type metadata accessor for (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, changed: Bool)(0, &lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>, changed: Bool), (void (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
  uint64_t v1 = v0 - 8;
  MEMORY[0x1F4188790](v0);
  int v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  char v6 = (char *)&v24 - v5;
  uint64_t v7 = *(int *)(v1 + 56);
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>();
  uint64_t v9 = v8;
  uint64_t Value = AGGraphGetValue();
  char v12 = v11;
  outlined init with copy of ScrollableCollection?(Value, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
  v6[v7] = v12 & 1;
  uint64_t v13 = *(int *)(v1 + 56);
  outlined init with copy of ScrollableCollection?((uint64_t)v6, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
  v3[v13] = v12 & 1;
  uint64_t v14 = *(id *)&v3[*(int *)(v9 + 36)];
  outlined destroy of ScrollableCollection?((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
  id v15 = *(id *)((char *)v14 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v14) + 0x78));

  if ((v12 & 1) != 0 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    id v16 = v15;
    uint64_t v17 = Dictionary.init(minimumCapacity:)();
    id v26 = v16;
    uint64_t v27 = v17;
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  id v18 = v15;
  uint64_t v25 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  uint64_t v28 = v19;
  uint64_t v29 = lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>);
  id v26 = v15;
  specialized Dictionary.subscript.setter((uint64_t)&v26, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  uint64_t v20 = v25;
  Outputuint64_t Value = (id *)AGGraphGetOutputValue();
  if (!OutputValue) {
    __break(1u);
  }
  id v22 = *OutputValue;
  id v26 = v22;
  uint64_t v27 = v20;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  return outlined destroy of (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, changed: Bool)((uint64_t)v6, &lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>, changed: Bool), (void (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
}

{
  uint64_t Value;
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  void *v10;
  char v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  id *OutputValue;
  id v17;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[11];
  void *v25;
  uint64_t v26;

  id v26 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>();
  uint64_t Value = AGGraphGetValue();
  uint64_t v1 = *(_OWORD *)(Value + 48);
  int v3 = *(_OWORD *)Value;
  uint64_t v2 = *(_OWORD *)(Value + 16);
  void v24[2] = *(_OWORD *)(Value + 32);
  void v24[3] = v1;
  v24[0] = v3;
  v24[1] = v2;
  uint64_t v4 = *(_OWORD *)(Value + 112);
  char v6 = *(_OWORD *)(Value + 64);
  uint64_t v5 = *(_OWORD *)(Value + 80);
  v24[6] = *(_OWORD *)(Value + 96);
  v24[7] = v4;
  void v24[4] = v6;
  v24[5] = v5;
  uint64_t v8 = *(_OWORD *)(Value + 144);
  uint64_t v7 = *(_OWORD *)(Value + 160);
  uint64_t v9 = *(_OWORD *)(Value + 128);
  uint64_t v25 = *(void **)(Value + 176);
  v24[9] = v8;
  v24[10] = v7;
  v24[8] = v9;
  unint64_t v10 = *(void **)((char *)v25 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v25) + 0x78));
  if ((v11 & 1) != 0 || !AGGraphGetOutputValue())
  {
    uint64_t v13 = v10;
    outlined retain of ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>((uint64_t)v24);
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    uint64_t v20 = v13;
    uint64_t v21 = Dictionary.init(minimumCapacity:)();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined retain of ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>((uint64_t)v24);
    char v12 = v10;
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  uint64_t v14 = v10;
  uint64_t v19 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  id v22 = v15;
  uint64_t v23 = lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>);
  uint64_t v20 = v10;
  specialized Dictionary.subscript.setter((uint64_t)&v20, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  Outputuint64_t Value = (id *)AGGraphGetOutputValue();
  if (!OutputValue) {
    __break(1u);
  }
  uint64_t v17 = *OutputValue;
  uint64_t v20 = v17;
  uint64_t v21 = v19;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  return outlined release of ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>((uint64_t)v24);
}

{
  uint64_t Value;
  char v1;
  char v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id *OutputValue;
  id v12;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char v20;
  unsigned char v21[400];
  uint64_t v22;

  id v22 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>();
  uint64_t Value = AGGraphGetValue();
  uint64_t v2 = v1;
  outlined init with copy of ScrollableCollection?(Value, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
  int v3 = v2 & 1;
  v21[392] = v2 & 1;
  outlined init with copy of ScrollableCollection?((uint64_t)v21, (uint64_t)&v15, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
  uint64_t v20 = v2 & 1;
  uint64_t v4 = v19;
  outlined destroy of ScrollableCollection?((uint64_t)&v15, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
  uint64_t v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)((char *)v4
                                                             + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x78)), sel_view));
  if (!v5)
  {
    __break(1u);
    goto LABEL_8;
  }
  char v6 = v5;

  if (v3 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    uint64_t v7 = v6;
    uint64_t v8 = Dictionary.init(minimumCapacity:)();
    id v15 = v7;
    id v16 = v8;
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  uint64_t v9 = v6;
  uint64_t v14 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  uint64_t v17 = v10;
  id v18 = lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>);
  id v15 = v6;
  specialized Dictionary.subscript.setter((uint64_t)&v15, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  Outputuint64_t Value = (id *)AGGraphGetOutputValue();
  if (!OutputValue) {
LABEL_8:
  }
    __break(1u);
  char v12 = *OutputValue;
  id v15 = v12;
  id v16 = v14;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  return outlined destroy of (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, changed: Bool)((uint64_t)v21, &lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>, changed: Bool), (void (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
}

{
  uint64_t Value;
  char v1;
  char v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id *OutputValue;
  id v12;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char v20;
  unsigned char v21[200];
  uint64_t v22;

  id v22 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>();
  uint64_t Value = AGGraphGetValue();
  uint64_t v2 = v1;
  outlined init with copy of ScrollableCollection?(Value, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
  int v3 = v2 & 1;
  v21[192] = v2 & 1;
  outlined init with copy of ScrollableCollection?((uint64_t)v21, (uint64_t)&v15, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
  uint64_t v20 = v2 & 1;
  uint64_t v4 = v19;
  outlined destroy of ScrollableCollection?((uint64_t)&v15, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
  uint64_t v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)((char *)v4
                                                             + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x78)), sel_view));
  if (!v5)
  {
    __break(1u);
    goto LABEL_8;
  }
  char v6 = v5;

  if (v3 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    uint64_t v7 = v6;
    uint64_t v8 = Dictionary.init(minimumCapacity:)();
    id v15 = v7;
    id v16 = v8;
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  uint64_t v9 = v6;
  uint64_t v14 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  uint64_t v17 = v10;
  id v18 = lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>);
  id v15 = v6;
  specialized Dictionary.subscript.setter((uint64_t)&v15, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  Outputuint64_t Value = (id *)AGGraphGetOutputValue();
  if (!OutputValue) {
LABEL_8:
  }
    __break(1u);
  char v12 = *OutputValue;
  id v15 = v12;
  id v16 = v14;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  return outlined destroy of (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, changed: Bool)((uint64_t)v21, (unint64_t *)&lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>, changed: Bool), (void (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Value;
  char v11;
  char v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id *OutputValue;
  id v22;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  uint64_t v30 = *MEMORY[0x1E4F143B8];
  type metadata accessor for (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, changed: Bool)(0, &lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>, changed: Bool), (void (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
  uint64_t v1 = v0 - 8;
  MEMORY[0x1F4188790](v0);
  int v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  char v6 = (char *)&v24 - v5;
  uint64_t v7 = *(int *)(v1 + 56);
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>();
  uint64_t v9 = v8;
  uint64_t Value = AGGraphGetValue();
  char v12 = v11;
  outlined init with copy of ScrollableCollection?(Value, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
  v6[v7] = v12 & 1;
  uint64_t v13 = *(int *)(v1 + 56);
  outlined init with copy of ScrollableCollection?((uint64_t)v6, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
  v3[v13] = v12 & 1;
  uint64_t v14 = *(id *)&v3[*(int *)(v9 + 36)];
  outlined destroy of ScrollableCollection?((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
  id v15 = *(id *)((char *)v14 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v14) + 0x78));

  if ((v12 & 1) != 0 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    id v16 = v15;
    uint64_t v17 = Dictionary.init(minimumCapacity:)();
    id v26 = v16;
    uint64_t v27 = v17;
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  id v18 = v15;
  uint64_t v25 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  uint64_t v28 = v19;
  uint64_t v29 = lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>);
  id v26 = v15;
  specialized Dictionary.subscript.setter((uint64_t)&v26, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  uint64_t v20 = v25;
  Outputuint64_t Value = (id *)AGGraphGetOutputValue();
  if (!OutputValue) {
    __break(1u);
  }
  id v22 = *OutputValue;
  id v26 = v22;
  uint64_t v27 = v20;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  return outlined destroy of (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, changed: Bool)((uint64_t)v6, &lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>, changed: Bool), (void (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Value;
  char v11;
  char v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id *OutputValue;
  id v22;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  uint64_t v30 = *MEMORY[0x1E4F143B8];
  type metadata accessor for (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, changed: Bool)(0, &lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>, changed: Bool), (void (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
  uint64_t v1 = v0 - 8;
  MEMORY[0x1F4188790](v0);
  int v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  char v6 = (char *)&v24 - v5;
  uint64_t v7 = *(int *)(v1 + 56);
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>();
  uint64_t v9 = v8;
  uint64_t Value = AGGraphGetValue();
  char v12 = v11;
  outlined init with copy of ScrollableCollection?(Value, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
  v6[v7] = v12 & 1;
  uint64_t v13 = *(int *)(v1 + 56);
  outlined init with copy of ScrollableCollection?((uint64_t)v6, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
  v3[v13] = v12 & 1;
  uint64_t v14 = *(id *)&v3[*(int *)(v9 + 36)];
  outlined destroy of ScrollableCollection?((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
  id v15 = *(id *)((char *)v14 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v14) + 0x78));

  if ((v12 & 1) != 0 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    id v16 = v15;
    uint64_t v17 = Dictionary.init(minimumCapacity:)();
    id v26 = v16;
    uint64_t v27 = v17;
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  id v18 = v15;
  uint64_t v25 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  uint64_t v28 = v19;
  uint64_t v29 = lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>);
  id v26 = v15;
  specialized Dictionary.subscript.setter((uint64_t)&v26, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  uint64_t v20 = v25;
  Outputuint64_t Value = (id *)AGGraphGetOutputValue();
  if (!OutputValue) {
    __break(1u);
  }
  id v22 = *OutputValue;
  id v26 = v22;
  uint64_t v27 = v20;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  return outlined destroy of (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, changed: Bool)((uint64_t)v6, &lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>, changed: Bool), (void (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
}

{
  uint64_t Value;
  char v1;
  char v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id *OutputValue;
  id v12;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char v20;
  unsigned char v21[256];
  uint64_t v22;

  id v22 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>();
  uint64_t Value = AGGraphGetValue();
  uint64_t v2 = v1;
  outlined init with copy of ScrollableCollection?(Value, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
  int v3 = v2 & 1;
  v21[248] = v2 & 1;
  outlined init with copy of ScrollableCollection?((uint64_t)v21, (uint64_t)&v15, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
  uint64_t v20 = v2 & 1;
  uint64_t v4 = v19;
  outlined destroy of ScrollableCollection?((uint64_t)&v15, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
  uint64_t v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)((char *)v4
                                                             + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x78)), sel_view));
  if (!v5)
  {
    __break(1u);
    goto LABEL_8;
  }
  char v6 = v5;

  if (v3 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    uint64_t v7 = v6;
    uint64_t v8 = Dictionary.init(minimumCapacity:)();
    id v15 = v7;
    id v16 = v8;
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  uint64_t v9 = v6;
  uint64_t v14 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  uint64_t v17 = v10;
  id v18 = lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>);
  id v15 = v6;
  specialized Dictionary.subscript.setter((uint64_t)&v15, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  Outputuint64_t Value = (id *)AGGraphGetOutputValue();
  if (!OutputValue) {
LABEL_8:
  }
    __break(1u);
  char v12 = *OutputValue;
  id v15 = v12;
  id v16 = v14;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  return outlined destroy of (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, changed: Bool)((uint64_t)v21, &lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>, changed: Bool), (void (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
}

{
  _OWORD *Value;
  char v1;
  char v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  id *OutputValue;
  id v18;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD v25[11];
  uint64_t v26;

  id v26 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>();
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  uint64_t v2 = v1;
  uint64_t v4 = Value[1];
  int v3 = Value[2];
  v25[0] = *Value;
  v25[1] = v4;
  v25[2] = v3;
  uint64_t v5 = Value[6];
  uint64_t v7 = Value[3];
  char v6 = Value[4];
  _OWORD v25[5] = Value[5];
  v25[6] = v5;
  v25[3] = v7;
  unsigned char v25[4] = v6;
  uint64_t v8 = Value[10];
  unint64_t v10 = Value[7];
  uint64_t v9 = Value[8];
  v25[9] = Value[9];
  v25[10] = v8;
  v25[7] = v10;
  _OWORD v25[8] = v9;
  char v11 = *(void **)(*((void *)&v8 + 1) + *(void *)((*MEMORY[0x1E4FBC8C8] & **((void **)&v8 + 1)) + 0x78));
  char v12 = *((id *)&v8 + 1);
  outlined retain of ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>((uint64_t)v25);
  uint64_t v13 = objc_msgSend(v11, sel_view);
  if (!v13)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v14 = v13;

  if ((v2 & 1) != 0 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    uint64_t v21 = v14;
    id v22 = Dictionary.init(minimumCapacity:)();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  id v15 = v14;
  uint64_t v20 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  uint64_t v23 = v16;
  uint64_t v24 = lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>);
  uint64_t v21 = v14;
  specialized Dictionary.subscript.setter((uint64_t)&v21, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  Outputuint64_t Value = (id *)AGGraphGetOutputValue();
  if (!OutputValue) {
LABEL_8:
  }
    __break(1u);
  id v18 = *OutputValue;
  uint64_t v21 = v18;
  id v22 = v20;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  return outlined release of ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>((uint64_t)v25);
}

{
  uint64_t Value;
  void *v1;
  void *v2;
  void *v3;
  char v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  id *OutputValue;
  id v14;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  uint64_t v21 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<Switch>>();
  uint64_t Value = AGGraphGetValue();
  uint64_t v1 = *(void **)(Value + 48);
  uint64_t v2 = *(void **)(Value + 56);
  int v3 = *(void **)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x78));
  if ((v4 & 1) != 0 || !AGGraphGetOutputValue())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    uint64_t v8 = v3;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v9 = v1;
    unint64_t v10 = v2;
    uint64_t v17 = v8;
    id v18 = Dictionary.init(minimumCapacity:)();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    swift_retain();
    uint64_t v5 = v1;
    char v6 = v2;
    uint64_t v7 = v3;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  char v11 = v3;
  id v16 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>(0);
  uint64_t v19 = v12;
  uint64_t v20 = lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>);
  uint64_t v17 = v3;
  specialized Dictionary.subscript.setter((uint64_t)&v17, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  Outputuint64_t Value = (id *)AGGraphGetOutputValue();
  if (!OutputValue) {
    __break(1u);
  }
  uint64_t v14 = *OutputValue;
  uint64_t v17 = v14;
  id v18 = v16;
  AGGraphSetOutputValue();

  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}