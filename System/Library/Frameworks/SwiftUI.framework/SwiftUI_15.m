ValueMetadata *type metadata accessor for ContentModeModifier()
{
  return &type metadata for ContentModeModifier;
}

void *type metadata accessor for TabSidebarCustomizationTransform()
{
  return &unk_1ED45D7D8;
}

void *type metadata accessor for TabGroupCustomizationEntry.CodingKeys()
{
  return &unk_1ED44C870;
}

unsigned char *storeEnumTagSinglePayload for TabItemKind.Item(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *result = a2;
        return result;
      case 2:
        *(_WORD *)result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *result = 0;
      break;
    case 2:
      *(_WORD *)result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x187AFD814);
    case 4:
      *(_DWORD *)result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for TabSidebarCustomization.CodingKeys()
{
  return &unk_1ED440B58;
}

ValueMetadata *type metadata accessor for TabSidebarCustomization.ToTabViewCustomization()
{
  return &type metadata for TabSidebarCustomization.ToTabViewCustomization;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ContentModeModifier()
{
  return &protocol witness table for ContentModeModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in ContentModeModifier()
{
  return &protocol witness table for ContentModeModifier;
}

unint64_t lazy protocol witness table accessor for type TabViewContentDisplayMode.ContentMode and conformance TabViewContentDisplayMode.ContentMode()
{
  unint64_t result = lazy protocol witness table cache variable for type TabViewContentDisplayMode.ContentMode and conformance TabViewContentDisplayMode.ContentMode;
  if (!lazy protocol witness table cache variable for type TabViewContentDisplayMode.ContentMode and conformance TabViewContentDisplayMode.ContentMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabViewContentDisplayMode.ContentMode and conformance TabViewContentDisplayMode.ContentMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TabItemKind.Item and conformance TabItemKind.Item()
{
  unint64_t result = lazy protocol witness table cache variable for type TabItemKind.Item and conformance TabItemKind.Item;
  if (!lazy protocol witness table cache variable for type TabItemKind.Item and conformance TabItemKind.Item)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabItemKind.Item and conformance TabItemKind.Item);
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in AdaptiveTabViewStyle.Body<A>()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _DictionaryStorage<UniqueID, (_ViewList_ID.Canonical, AccessibilitySectionContext?)>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<UniqueID, (_ViewList_ID.Canonical, AccessibilitySectionContext?)>)
  {
    type metadata accessor for (_ViewList_ID.Canonical, AccessibilitySectionContext?)();
    lazy protocol witness table accessor for type UniqueID and conformance UniqueID();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UniqueID, (_ViewList_ID.Canonical, AccessibilitySectionContext?)>);
    }
  }
}

void type metadata accessor for (_ViewList_ID.Canonical, AccessibilitySectionContext?)()
{
  if (!lazy cache variable for type metadata for (_ViewList_ID.Canonical, AccessibilitySectionContext?))
  {
    type metadata accessor for [TabCustomizationID](255, &lazy cache variable for type metadata for AccessibilitySectionContext?, (uint64_t)&type metadata for AccessibilitySectionContext, MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (_ViewList_ID.Canonical, AccessibilitySectionContext?));
    }
  }
}

void type metadata accessor for [CGRect](uint64_t a1)
{
}

void type metadata accessor for _DictionaryStorage<UInt32, PinnedSection>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<UInt32, PinnedSection>)
  {
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UInt32, PinnedSection>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TabViewContentDisplayMode.Key> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabViewContentDisplayMode.Key> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabViewContentDisplayMode.Key> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for TransformBox<TabSidebarCustomizationTransform>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabViewContentDisplayMode.Key>, (uint64_t)&type metadata for TabViewContentDisplayMode.Key, (uint64_t)&protocol witness table for TabViewContentDisplayMode.Key, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabViewContentDisplayMode.Key> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in AdaptiveTabViewStyle.Body.value.getter()
{
  return closure #1 in AdaptiveTabViewStyle.Body.value.getter(*(unsigned int *)(v0 + 32), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t outlined assign with copy of TabViewCustomization(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TabViewCustomization();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t specialized TabSidebarCustomizationTransform.writeValue(_:to:key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for Binding<TabSidebarCustomization>?(0, &lazy cache variable for type metadata for TabSidebarCustomization?, (uint64_t (*)(uint64_t))type metadata accessor for TabSidebarCustomization, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v7 - 8);
  v9 = (char *)&v20 - v8;
  uint64_t v10 = type metadata accessor for TabSidebarCustomization();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any(a1, (uint64_t)v22);
  int v14 = swift_dynamicCast();
  v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  if (v14)
  {
    v15(v9, 0, 1, v10);
    outlined init with take of TabSidebarCustomization((uint64_t)v9, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for TabSidebarCustomization);
    TabViewCustomization.removeTransientIdentifiers()();
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    lazy protocol witness table accessor for type TabViewCustomization and conformance TabViewCustomization((unint64_t *)&lazy protocol witness table cache variable for type TabSidebarCustomization and conformance TabSidebarCustomization, (void (*)(uint64_t))type metadata accessor for TabSidebarCustomization);
    uint64_t v17 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    unint64_t v19 = v18;
    swift_release();
    *(void *)&long long v20 = a3;
    *((void *)&v20 + 1) = a4;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    if (v19 >> 60 == 15)
    {
      long long v20 = 0u;
      long long v21 = 0u;
    }
    else
    {
      *((void *)&v21 + 1) = MEMORY[0x1E4F277C0];
      *(void *)&long long v20 = v17;
      *((void *)&v20 + 1) = v19;
    }
    specialized Dictionary.subscript.setter((uint64_t)&v20, (uint64_t)v22);
    return outlined destroy of TabViewCustomizationModifier((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for TabSidebarCustomization);
  }
  else
  {
    v15(v9, 1, 1, v10);
    return _sypSgWOhTm_4((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for TabSidebarCustomization?, (uint64_t)type metadata accessor for TabSidebarCustomization, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for Binding<TabSidebarCustomization>?);
  }
}

uint64_t specialized TabSidebarCustomization.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000014 && a2 == 0x8000000188331960)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t specialized static TabSidebarCustomizationTransform.writeValue(_:to:key:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for Binding<TabSidebarCustomization>?(0, &lazy cache variable for type metadata for TabSidebarCustomization?, (uint64_t (*)(uint64_t))type metadata accessor for TabSidebarCustomization, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  v13 = (char *)&v33 - v12;
  MEMORY[0x1F4188790](v14);
  v16 = (char *)&v33 - v15;
  uint64_t v17 = MEMORY[0x1E4FBC840] + 8;
  outlined init with copy of WeakBox<Swift.AnyObject>(a1, (uint64_t)v36, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  uint64_t v34 = a4;
  id v35 = a2;
  uint64_t v33 = a3;
  if (v37)
  {
    uint64_t v18 = type metadata accessor for TabSidebarCustomization();
    int v19 = swift_dynamicCast();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v16, v19 ^ 1u, 1, v18);
  }
  else
  {
    _sypSgWOhTm_4((uint64_t)v36, (uint64_t)&lazy cache variable for type metadata for Any?, v17, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for [TabCustomizationID]);
    uint64_t v18 = type metadata accessor for TabSidebarCustomization();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v16, 1, 1, v18);
  }
  type metadata accessor for TabSidebarCustomization();
  long long v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48);
  if (!v20(v16, 1, v18)) {
    TabViewCustomization.removeTransientIdentifiers()();
  }
  uint64_t v21 = MEMORY[0x1E4FBB718];
  outlined init with copy of Binding<TabSidebarCustomization>?((uint64_t)v16, (uint64_t)v13, &lazy cache variable for type metadata for TabSidebarCustomization?, (uint64_t (*)(uint64_t))type metadata accessor for TabSidebarCustomization, MEMORY[0x1E4FBB718]);
  unsigned int v22 = v20(v13, 1, v18);
  _sypSgWOhTm_4((uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for TabSidebarCustomization?, (uint64_t)type metadata accessor for TabSidebarCustomization, v21, (uint64_t (*)(void))type metadata accessor for Binding<TabSidebarCustomization>?);
  if (v22 == 1)
  {
    v23 = (void *)MEMORY[0x18C115780](v33, v34);
    objc_msgSend(v35, sel_removeObjectForKey_, v23);
  }
  else
  {
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    outlined init with copy of Binding<TabSidebarCustomization>?((uint64_t)v16, (uint64_t)v10, &lazy cache variable for type metadata for TabSidebarCustomization?, (uint64_t (*)(uint64_t))type metadata accessor for TabSidebarCustomization, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type TabSidebarCustomization? and conformance <A> A?();
    uint64_t v24 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    id v25 = v35;
    uint64_t v26 = v33;
    uint64_t v27 = v24;
    unint64_t v29 = v28;
    _sypSgWOhTm_4((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for TabSidebarCustomization?, (uint64_t)type metadata accessor for TabSidebarCustomization, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for Binding<TabSidebarCustomization>?);
    swift_release();
    outlined copy of Data._Representation(v27, v29);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v27, v29);
    v31 = (void *)MEMORY[0x18C115780](v26, v34);
    objc_msgSend(v25, sel_setObject_forKey_, isa, v31);
    swift_unknownObjectRelease();

    outlined consume of Data?(v27, v29);
  }
  return _sypSgWOhTm_4((uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for TabSidebarCustomization?, (uint64_t)type metadata accessor for TabSidebarCustomization, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for Binding<TabSidebarCustomization>?);
}

uint64_t outlined init with copy of WeakBox<Swift.AnyObject>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(void, uint64_t))
{
  type metadata accessor for [TabCustomizationID](0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

unint64_t lazy protocol witness table accessor for type TabSidebarCustomization? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type TabSidebarCustomization? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type TabSidebarCustomization? and conformance <A> A?)
  {
    type metadata accessor for Binding<TabSidebarCustomization>?(255, &lazy cache variable for type metadata for TabSidebarCustomization?, (uint64_t (*)(uint64_t))type metadata accessor for TabSidebarCustomization, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type TabViewCustomization and conformance TabViewCustomization((unint64_t *)&lazy protocol witness table cache variable for type TabSidebarCustomization and conformance TabSidebarCustomization, (void (*)(uint64_t))type metadata accessor for TabSidebarCustomization);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabSidebarCustomization? and conformance <A> A?);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<[Text]>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<[Text]>)
  {
    type metadata accessor for [TabCustomizationID](255, (unint64_t *)&lazy cache variable for type metadata for [Text], MEMORY[0x1E4F41420], MEMORY[0x1E4FBB320]);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<[Text]>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<[AnyAccessibilityAction]>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<[AnyAccessibilityAction]>)
  {
    type metadata accessor for [TabCustomizationID](255, (unint64_t *)&lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction, MEMORY[0x1E4FBB320]);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<[AnyAccessibilityAction]>);
    }
  }
}

void type metadata accessor for ([Text], [AnyAccessibilityAction])()
{
  if (!lazy cache variable for type metadata for ([Text], [AnyAccessibilityAction]))
  {
    unint64_t v0 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB320];
    type metadata accessor for [TabCustomizationID](255, (unint64_t *)&lazy cache variable for type metadata for [Text], MEMORY[0x1E4F41420], MEMORY[0x1E4FBB320]);
    type metadata accessor for [TabCustomizationID](255, (unint64_t *)&lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction, v0);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v2) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for ([Text], [AnyAccessibilityAction]));
    }
  }
}

void type metadata accessor for _DictionaryStorage<AnyHashable, Anchor<CGRect?>>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, Anchor<CGRect?>>)
  {
    type metadata accessor for Binding<TabSidebarCustomization>?(255, &lazy cache variable for type metadata for Anchor<CGRect?>, (uint64_t (*)(uint64_t))type metadata accessor for CGRect?, MEMORY[0x1E4F41588]);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, Anchor<CGRect?>>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<NavigationState.ListKey, [Binding<Bool>]>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<NavigationState.ListKey, [Binding<Bool>]>)
  {
    type metadata accessor for [Binding<Bool>]();
    lazy protocol witness table accessor for type NavigationState.ListKey and conformance NavigationState.ListKey();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NavigationState.ListKey, [Binding<Bool>]>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<ViewIdentity, (_:)>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<ViewIdentity, (_:)>)
  {
    type metadata accessor for (_:)();
    lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ViewIdentity, (_:)>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<(key: Int, value: DragReorderableLayoutCoordinator.ChildFrame)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(key: Int, value: DragReorderableLayoutCoordinator.ChildFrame)>)
  {
    type metadata accessor for (key: Int, value: DragReorderableLayoutCoordinator.ChildFrame)(255, (unint64_t *)&lazy cache variable for type metadata for (key: Int, value: DragReorderableLayoutCoordinator.ChildFrame));
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(key: Int, value: DragReorderableLayoutCoordinator.ChildFrame)>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<UIMenuElement, CommandOperation>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<UIMenuElement, CommandOperation>)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
    type metadata accessor for CommandOperation();
    lazy protocol witness table accessor for type UIScene and conformance NSObject(&lazy protocol witness table cache variable for type UIMenuElement and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UIMenuElement, CommandOperation>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<KeyCommandID, ()>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<KeyCommandID, ()>)
  {
    type metadata accessor for ()();
    lazy protocol witness table accessor for type KeyCommandID and conformance KeyCommandID();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<KeyCommandID, ()>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<Selector, CommandAction>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<Selector, CommandAction>)
  {
    type metadata accessor for ContainerBackgroundHost(255, (unint64_t *)&lazy cache variable for type metadata for CommandAction);
    lazy protocol witness table accessor for type Selector and conformance Selector();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Selector, CommandAction>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Selector and conformance Selector()
{
  unint64_t result = lazy protocol witness table cache variable for type Selector and conformance Selector;
  if (!lazy protocol witness table cache variable for type Selector and conformance Selector)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Selector and conformance Selector);
  }
  return result;
}

uint64_t outlined init with copy of Binding<TabSidebarCustomization>?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  type metadata accessor for Binding<TabSidebarCustomization>?(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

void type metadata accessor for _ContiguousArrayStorage<(name: String, value: String)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(name: String, value: String)>)
  {
    type metadata accessor for (key: Int, value: DragReorderableLayoutCoordinator.ChildFrame)(255, (unint64_t *)&lazy cache variable for type metadata for (name: String, value: String));
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(name: String, value: String)>);
    }
  }
}

void type metadata accessor for (key: Int, value: DragReorderableLayoutCoordinator.ChildFrame)(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

unint64_t type metadata accessor for PlatformListCell & UIFocusItem()
{
  unint64_t result = lazy cache variable for type metadata for PlatformListCell & UIFocusItem;
  if (!lazy cache variable for type metadata for PlatformListCell & UIFocusItem)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for PlatformListCell & UIFocusItem);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<SystemSegmentItem, Int>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<SystemSegmentItem, Int>)
  {
    type metadata accessor for SystemSegmentItem();
    lazy protocol witness table accessor for type TabViewCustomization and conformance TabViewCustomization(&lazy protocol witness table cache variable for type SystemSegmentItem and conformance SystemSegmentItem, (void (*)(uint64_t))type metadata accessor for SystemSegmentItem);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<SystemSegmentItem, Int>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _DisplayList_Identity and conformance _DisplayList_Identity()
{
  unint64_t result = lazy protocol witness table cache variable for type _DisplayList_Identity and conformance _DisplayList_Identity;
  if (!lazy protocol witness table cache variable for type _DisplayList_Identity and conformance _DisplayList_Identity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisplayList_Identity and conformance _DisplayList_Identity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _DisplayList_Identity and conformance _DisplayList_Identity;
  if (!lazy protocol witness table cache variable for type _DisplayList_Identity and conformance _DisplayList_Identity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisplayList_Identity and conformance _DisplayList_Identity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _DisplayList_Identity and conformance _DisplayList_Identity;
  if (!lazy protocol witness table cache variable for type _DisplayList_Identity and conformance _DisplayList_Identity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisplayList_Identity and conformance _DisplayList_Identity);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<DisplayList.HostedViewState.Key, DisplayList.HostedViewState.ViewInfo>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<DisplayList.HostedViewState.Key, DisplayList.HostedViewState.ViewInfo>)
  {
    type metadata accessor for DisplayList.HostedViewState.Key(255);
    lazy protocol witness table accessor for type TabViewCustomization and conformance TabViewCustomization(&lazy protocol witness table cache variable for type DisplayList.HostedViewState.Key and conformance DisplayList.HostedViewState.Key, (void (*)(uint64_t))type metadata accessor for DisplayList.HostedViewState.Key);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<DisplayList.HostedViewState.Key, DisplayList.HostedViewState.ViewInfo>);
    }
  }
}

uint64_t specialized static ContentModeModifier.makeEnvironment(modifier:environment:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type ContentModeModifier and conformance ContentModeModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ContentModeModifier and conformance ContentModeModifier;
  if (!lazy protocol witness table cache variable for type ContentModeModifier and conformance ContentModeModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentModeModifier and conformance ContentModeModifier);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<(offset: Int, element: ToolbarStorage.Item)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(offset: Int, element: ToolbarStorage.Item)>)
  {
    type metadata accessor for (offset: Int, element: ToolbarStorage.Item)(255, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: ToolbarStorage.Item), (void (*)(uint64_t))type metadata accessor for ToolbarStorage.Item);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(offset: Int, element: ToolbarStorage.Item)>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<ToolbarPlacement.Role, BarEnvironmentViewModel>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<ToolbarPlacement.Role, BarEnvironmentViewModel>)
  {
    type metadata accessor for BarEnvironmentViewModel(255);
    lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ToolbarPlacement.Role, BarEnvironmentViewModel>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<IdentifiedDocumentGroupConfiguration, [WeakBox<DocumentViewController>]>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<IdentifiedDocumentGroupConfiguration, [WeakBox<DocumentViewController>]>)
  {
    type metadata accessor for Binding<TabSidebarCustomization>?(255, &lazy cache variable for type metadata for [WeakBox<DocumentViewController>], (uint64_t (*)(uint64_t))type metadata accessor for WeakBox<DocumentViewController>, MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type IdentifiedDocumentGroupConfiguration and conformance IdentifiedDocumentGroupConfiguration();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<IdentifiedDocumentGroupConfiguration, [WeakBox<DocumentViewController>]>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<BackgroundTaskEntry<AppRefreshBackgroundTask>>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<BackgroundTaskEntry<AppRefreshBackgroundTask>>)
  {
    type metadata accessor for TransformBox<TabSidebarCustomizationTransform>(255, &lazy cache variable for type metadata for BackgroundTaskEntry<AppRefreshBackgroundTask>, (uint64_t)&type metadata for AppRefreshBackgroundTask, (uint64_t)&protocol witness table for AppRefreshBackgroundTask, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for BackgroundTaskEntry);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<BackgroundTaskEntry<AppRefreshBackgroundTask>>);
    }
  }
}

void type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>?(uint64_t a1)
{
}

void type metadata accessor for _ContiguousArrayStorage<(offset: Int, element: AccessibilityNode)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(offset: Int, element: AccessibilityNode)>)
  {
    type metadata accessor for (offset: Int, element: ToolbarStorage.Item)(255, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: AccessibilityNode), (void (*)(uint64_t))type metadata accessor for AccessibilityNode);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(offset: Int, element: AccessibilityNode)>);
    }
  }
}

void type metadata accessor for (offset: Int, element: ToolbarStorage.Item)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<(String, Any)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>)
  {
    type metadata accessor for (Badge, Spacer)(255, (unint64_t *)&lazy cache variable for type metadata for (String, Any));
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<AnyHashable, Int>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, Int>)
  {
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, Int>);
    }
  }
}

uint64_t outlined destroy of TabViewCustomizationModifier(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for _ContiguousArrayStorage<BackgroundTaskEntry<UnidentifiedURLSessionBackgroundTask>>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<BackgroundTaskEntry<UnidentifiedURLSessionBackgroundTask>>)
  {
    type metadata accessor for TransformBox<TabSidebarCustomizationTransform>(255, &lazy cache variable for type metadata for BackgroundTaskEntry<UnidentifiedURLSessionBackgroundTask>, (uint64_t)&type metadata for UnidentifiedURLSessionBackgroundTask, (uint64_t)&protocol witness table for UnidentifiedURLSessionBackgroundTask, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for BackgroundTaskEntry);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<BackgroundTaskEntry<UnidentifiedURLSessionBackgroundTask>>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<BackgroundTaskEntry<URLSessionBackgroundTask>>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<BackgroundTaskEntry<URLSessionBackgroundTask>>)
  {
    type metadata accessor for TransformBox<TabSidebarCustomizationTransform>(255, (unint64_t *)&lazy cache variable for type metadata for BackgroundTaskEntry<URLSessionBackgroundTask>, (uint64_t)&type metadata for URLSessionBackgroundTask, (uint64_t)&protocol witness table for URLSessionBackgroundTask, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for BackgroundTaskEntry);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<BackgroundTaskEntry<URLSessionBackgroundTask>>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<AnyHashable, _ScrollableLayoutProxy.SizeRecord>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, _ScrollableLayoutProxy.SizeRecord>)
  {
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, _ScrollableLayoutProxy.SizeRecord>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<UTType, String?>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<UTType, String?>)
  {
    type metadata accessor for UTType();
    type metadata accessor for [TabCustomizationID](255, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type TabViewCustomization and conformance TabViewCustomization(&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E4FBCEA8]);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UTType, String?>);
    }
  }
}

void type metadata accessor for (UTType, String?)()
{
  if (!lazy cache variable for type metadata for (UTType, String?))
  {
    type metadata accessor for UTType();
    type metadata accessor for [TabCustomizationID](255, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (UTType, String?));
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<Attribute<TableRowList>>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Attribute<TableRowList>>)
  {
    type metadata accessor for [TabCustomizationID](255, (unint64_t *)&lazy cache variable for type metadata for Attribute<TableRowList>, (uint64_t)&type metadata for TableRowList, MEMORY[0x1E4F4E740]);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Attribute<TableRowList>>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<_ViewList_ID.Canonical, LazyLayoutCacheItem>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<_ViewList_ID.Canonical, LazyLayoutCacheItem>)
  {
    type metadata accessor for LazyLayoutCacheItem();
    lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<_ViewList_ID.Canonical, LazyLayoutCacheItem>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type KeyboardShortcut and conformance KeyboardShortcut()
{
  unint64_t result = lazy protocol witness table cache variable for type KeyboardShortcut and conformance KeyboardShortcut;
  if (!lazy protocol witness table cache variable for type KeyboardShortcut and conformance KeyboardShortcut)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyboardShortcut and conformance KeyboardShortcut);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type KeyboardShortcut and conformance KeyboardShortcut;
  if (!lazy protocol witness table cache variable for type KeyboardShortcut and conformance KeyboardShortcut)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyboardShortcut and conformance KeyboardShortcut);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type KeyboardShortcutBinding and conformance KeyboardShortcutBinding()
{
  unint64_t result = lazy protocol witness table cache variable for type KeyboardShortcutBinding and conformance KeyboardShortcutBinding;
  if (!lazy protocol witness table cache variable for type KeyboardShortcutBinding and conformance KeyboardShortcutBinding)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyboardShortcutBinding and conformance KeyboardShortcutBinding);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type KeyboardShortcutBinding and conformance KeyboardShortcutBinding;
  if (!lazy protocol witness table cache variable for type KeyboardShortcutBinding and conformance KeyboardShortcutBinding)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyboardShortcutBinding and conformance KeyboardShortcutBinding);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<HitTestTrace<ResponderBasedHitTestTracing>>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<HitTestTrace<ResponderBasedHitTestTracing>>)
  {
    type metadata accessor for TransformBox<TabSidebarCustomizationTransform>(255, (unint64_t *)&lazy cache variable for type metadata for HitTestTrace<ResponderBasedHitTestTracing>, (uint64_t)&type metadata for ResponderBasedHitTestTracing, (uint64_t)&protocol witness table for ResponderBasedHitTestTracing, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for HitTestTrace);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<HitTestTrace<ResponderBasedHitTestTracing>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type GridIndex and conformance GridIndex()
{
  unint64_t result = lazy protocol witness table cache variable for type GridIndex and conformance GridIndex;
  if (!lazy protocol witness table cache variable for type GridIndex and conformance GridIndex)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GridIndex and conformance GridIndex);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GridIndex and conformance GridIndex;
  if (!lazy protocol witness table cache variable for type GridIndex and conformance GridIndex)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GridIndex and conformance GridIndex);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<CodingUserInfoKey, Any>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for _DictionaryStorage();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for PartialKeyPath<UISplitViewController>()
{
  if (!lazy cache variable for type metadata for PartialKeyPath<UISplitViewController>)
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UISplitViewController);
    unint64_t v0 = type metadata accessor for PartialKeyPath();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PartialKeyPath<UISplitViewController>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<Attribute<AccessibilityRotorEntryList>>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Attribute<AccessibilityRotorEntryList>>)
  {
    type metadata accessor for [TabCustomizationID](255, (unint64_t *)&lazy cache variable for type metadata for Attribute<AccessibilityRotorEntryList>, (uint64_t)&type metadata for AccessibilityRotorEntryList, MEMORY[0x1E4F4E740]);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Attribute<AccessibilityRotorEntryList>>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<SliderMark<Double>>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<SliderMark<Double>>)
  {
    _s7SwiftUI21ViewInputFlagModifierVyAA016IsInAdaptableTabc7ContextD0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for SliderMark<Double>, (uint64_t (*)(void))lazy protocol witness table accessor for type Double and conformance Double, MEMORY[0x1E4FBB3D0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SliderMark);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<SliderMark<Double>>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<String?>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<String?>)
  {
    type metadata accessor for [TabCustomizationID](255, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<String?>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ViewDebug.Property and conformance _ViewDebug.Property()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewDebug.Property and conformance _ViewDebug.Property;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Property and conformance _ViewDebug.Property)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Property and conformance _ViewDebug.Property);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<AccessibilityFocus.Match, Set<UniqueID>>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<AccessibilityFocus.Match, Set<UniqueID>>)
  {
    _s7SwiftUI21ViewInputFlagModifierVyAA016IsInAdaptableTabc7ContextD0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for Set<UniqueID>, (uint64_t (*)(void))lazy protocol witness table accessor for type UniqueID and conformance UniqueID, MEMORY[0x1E4F41780], MEMORY[0x1E4FBB510]);
    lazy protocol witness table accessor for type AccessibilityFocus.Match and conformance AccessibilityFocus.Match();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AccessibilityFocus.Match, Set<UniqueID>>);
    }
  }
}

ValueMetadata *type metadata accessor for TabViewContentDisplayMode.Key()
{
  return &type metadata for TabViewContentDisplayMode.Key;
}

void type metadata accessor for _DictionaryStorage<AccessibilityRelationshipScope.NodeRelation, Set<AccessibilityRelationshipScope.Key>>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<AccessibilityRelationshipScope.NodeRelation, Set<AccessibilityRelationshipScope.Key>>)
  {
    _s7SwiftUI21ViewInputFlagModifierVyAA016IsInAdaptableTabc7ContextD0VGMaTm_0(255, &lazy cache variable for type metadata for Set<AccessibilityRelationshipScope.Key>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityRelationshipScope.Key and conformance AccessibilityRelationshipScope.Key, (uint64_t)&type metadata for AccessibilityRelationshipScope.Key, MEMORY[0x1E4FBB510]);
    lazy protocol witness table accessor for type AccessibilityRelationshipScope.NodeRelation and conformance AccessibilityRelationshipScope.NodeRelation();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AccessibilityRelationshipScope.NodeRelation, Set<AccessibilityRelationshipScope.Key>>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<AGAttribute, (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<AGAttribute, (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])>)
  {
    type metadata accessor for AGAttribute(255);
    type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])();
    lazy protocol witness table accessor for type TabViewCustomization and conformance TabViewCustomization((unint64_t *)&lazy protocol witness table cache variable for type AGAttribute and conformance AGAttribute, type metadata accessor for AGAttribute);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AGAttribute, (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])>);
    }
  }
}

void type metadata accessor for WeakBox<AccessibilityNode>(uint64_t a1)
{
}

void type metadata accessor for (UIViewController, TabEntry)()
{
  if (!lazy cache variable for type metadata for (UIViewController, TabEntry))
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (UIViewController, TabEntry));
    }
  }
}

void type metadata accessor for TransformBox<TabSidebarCustomizationTransform>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI21ViewInputFlagModifierVyAA016IsInAdaptableTabc7ContextD0VGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

CGSize __swiftcall _ViewTest.initSize()()
{
  double v0 = 100.0;
  double v1 = 100.0;
  result.height = v1;
  result.width = v0;
  return result;
}

{
  double v0;
  double v1;
  CGSize result;

  double v0 = 100.0;
  double v1 = 100.0;
  result.height = v1;
  result.width = v0;
  return result;
}

uint64_t _ViewTest.setTestView<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _ViewTest.setTestView<A>(_:)(a1, a4, a2, a5, a3);
}

Swift::Void __swiftcall _ViewTest.setUpTest()()
{
  uint64_t v3 = v1;
  uint64_t v4 = v0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = &v15[-v7];
  EnvironmentValues.init()();
  v19[0] = v19[2];
  v19[1] = v19[3];
  MEMORY[0x18C1144F0](v19);
  swift_release();
  swift_release();
  double v9 = (*(double (**)(uint64_t, uint64_t))(v3 + 48))(v4, v3);
  specialized _ViewTest.setSize(_:)(v9, v10);
  static EdgeInsets.zero.getter();
  specialized _ViewTest.setSafeAreaInsets(_:)(v11, v12, v13, v14);
  (*(void (**)(uint64_t, uint64_t))(v3 + 40))(v4, v3);
  swift_getAssociatedConformanceWitness();
  _ViewTest.setRootTestView<A>(_:)((uint64_t)v8, v4, AssociatedTypeWitness, v3);
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  static TestRenderOptions.simple.getter();
  uint64_t v16 = v4;
  uint64_t v17 = v3;
  uint64_t v18 = v2;
  withRenderOptions(_:_:)();
}

uint64_t _ViewTest.setEnvironment(_:)(long long *a1)
{
  long long v2 = *a1;
  return MEMORY[0x18C1144F0](&v2);
}

uint64_t _ViewTest.setRootTestView<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = _ViewTest.findState()(a2, a4, (uint64_t)&v16);
  uint64_t v5 = v17;
  if (v17)
  {
    uint64_t v6 = *(void *)&v16;
    uint64_t v7 = v18;
    uint64_t v8 = v19;
    uint64_t v9 = static _TestApp.host.getter();
    if (v9)
    {
      uint64_t v10 = v9;
      swift_getObjectType();
      uint64_t v11 = swift_conformsToProtocol2();
      if (v11) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0;
      }
      if (v11) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 0;
      }
      if (v13)
      {
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(double *__return_ptr, uint64_t, uint64_t))(v12 + 24))(&v16, ObjectType, v12);
        double v16 = ceil(v16 + 1.0);
        (*(void (**)(double *, uint64_t, uint64_t))(v12 + 32))(&v16, ObjectType, v12);
      }
      swift_unknownObjectRelease();
    }
    double v16 = *(double *)&v6;
    uint64_t v17 = v5;
    uint64_t v18 = v7;
    uint64_t v19 = v8;
    type metadata accessor for Binding<_TestApp.RootView.StateType>();
    MEMORY[0x18C113DA0](v15);
    _TestApp.RootView.StateType.setTestView<A>(_:)();
    double v16 = *(double *)v15;
    uint64_t v17 = v15[1];
    swift_retain();
    swift_retain();
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    outlined consume of Binding<_TestApp.RootView.StateType>?(v6, v5);
    return outlined consume of Binding<_TestApp.RootView.StateType>?(v6, v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall _ViewTest.tearDownTest()()
{
  uint64_t v3 = v1;
  uint64_t v4 = v0;
  uint64_t v5 = *(void *)(v0 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  ((void (*)())MEMORY[0x1F4188790])();
  uint64_t v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = specialized _ViewTest.resetEvents()();
  _ViewTest.setRootTestView<A>(_:)(v8, v4, MEMORY[0x1E4F417F8], v3);
  uint64_t v9 = self;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  unint64_t v10 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v4;
  *(void *)(v11 + 24) = v3;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v11 + v10, v7, v4);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = partial apply for closure #1 in _ViewTest.tearDownTest();
  *(void *)(v12 + 24) = v11;
  aBlock[4] = partial apply for closure #1 in UIKitSearchScopeCoordinating<>.onChange(selectedScope:);
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_23;
  uint64_t v13 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v9, sel_performWithoutAnimation_, v13);
  _Block_release(v13);
  LOBYTE(v13) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (v13) {
    __break(1u);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _ViewTest.tearDownTestWithError()()
{
  uint64_t v2 = v0;
  uint64_t v3 = *(void *)(v0 - 8);
  ((void (*)())MEMORY[0x1F4188790])();
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = self;
  if ((objc_msgSend(v6, sel_areAnimationsEnabled) & 1) == 0)
  {
    objc_msgSend(v6, sel_setAnimationsEnabled_, 1);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
    uint64_t v7 = String.init<A>(describing:)();
    uint64_t v9 = v8;
    lazy protocol witness table accessor for type Error and conformance Error();
    swift_allocError();
    *(void *)uint64_t v10 = v7;
    *(void *)(v10 + 8) = v9;
    *(unsigned char *)(v10 + 16) = 0;
    swift_willThrow();
  }
}

uint64_t _ViewTest.findState()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  type metadata accessor for <<opaque return type of static _TestApp.rootViewIdentifier>>.0();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static _TestApp.rootViewIdentifier.getter();
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  unint64_t v12 = lazy protocol witness table accessor for type _TestApp.RootView and conformance _TestApp.RootView();
  uint64_t v16 = a1;
  uint64_t v17 = v7;
  uint64_t v18 = MEMORY[0x1E4F417B0];
  uint64_t v19 = MEMORY[0x1E4F417C0];
  uint64_t v20 = a2;
  uint64_t v21 = OpaqueTypeConformance2;
  unint64_t v22 = v12;
  v23 = v10;
  uint64_t v13 = type metadata accessor for Binding();
  _ViewTest.withRenderIfNeeded<A>(_:)((void (*)(double))partial apply for closure #1 in _ViewTest.stateForIdentifier<A, B, C>(_:type:in:), v13, a3);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t _ViewTest.stateForIdentifier<A, B, C>(_:type:in:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Binding();
  return _ViewTest.withRenderIfNeeded<A>(_:)((void (*)(double))partial apply for closure #1 in _ViewTest.stateForIdentifier<A, B, C>(_:type:in:), v2, a1);
}

uint64_t _ViewTest.rootViewID.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result = _ViewTest.findState()(a1, a2, (uint64_t)&v7);
  uint64_t v3 = v8;
  if (v8)
  {
    uint64_t v4 = v7;
    type metadata accessor for Binding<_TestApp.RootView.StateType>();
    MEMORY[0x18C113DA0](&v6);
    outlined consume of Binding<_TestApp.RootView.StateType>?(v4, v3);
    uint64_t v5 = v6;
    swift_release();
    return v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ViewTest.rootView.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v14[-1] - v8;
  v14[0] = _ViewTest.rootViewID.getter(a1, a2);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v14[3] = a1;
  v14[4] = AssociatedTypeWitness;
  v14[5] = MEMORY[0x1E4FBB550];
  v14[6] = a2;
  v14[7] = AssociatedConformanceWitness;
  v14[8] = MEMORY[0x1E4FBB560];
  v14[9] = v14;
  v14[10] = AssociatedTypeWitness;
  _ViewTest.withRenderIfNeeded<A>(_:)((void (*)(double))partial apply for closure #1 in _ViewTest.viewForIdentifier<A, B>(_:_:), AssociatedTypeWitness, (uint64_t)v9);
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, AssociatedTypeWitness);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a3, v9, AssociatedTypeWitness);
  }
  __break(1u);
  return result;
}

uint64_t _ViewTest.viewForIdentifier<A, B>(_:_:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return _ViewTest.withRenderIfNeeded<A>(_:)((void (*)(double))partial apply for closure #1 in _ViewTest.viewForIdentifier<A, B>(_:_:), a1, a2);
}

uint64_t closure #1 in _ViewTest.viewForIdentifier<A, B>(_:_:)()
{
  uint64_t result = static _TestApp.host.getter();
  if (result)
  {
    swift_getObjectType();
    _BenchmarkHost.viewForIdentifier<A, B>(_:_:)();
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ViewTest.withRenderIfNeeded<A>(_:)@<X0>(void (*a1)(double)@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v17 - v9;
  a1(v8);
  uint64_t v11 = *(void *)(a2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    uint64_t result = static _TestApp.host.getter();
    if (result)
    {
      uint64_t v14 = v13;
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, double))(*(void *)(v14 + 8) + 8))(ObjectType, 0.0);
      uint64_t v16 = swift_unknownObjectRelease();
      return ((uint64_t (*)(uint64_t))a1)(v16);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a3, v10, a2);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(a3, 0, 1, a2);
  }
  return result;
}

uint64_t closure #1 in _ViewTest.stateForIdentifier<A, B, C>(_:type:in:)()
{
  uint64_t result = static _TestApp.host.getter();
  if (result)
  {
    swift_getObjectType();
    _BenchmarkHost.stateForIdentifier<A, B, C>(_:type:in:)();
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Bool __swiftcall _ViewTest.renderAsync(seconds:)(Swift::Double seconds)
{
  uint64_t v2 = static _TestApp.host.getter();
  if (v2)
  {
    uint64_t v6 = qword_1ED476D18;
    char v4 = specialized _ViewTest.render(host:seconds:options:)(seconds, v2, v3, &v6);
    swift_unknownObjectRelease();
    LOBYTE(v2) = v4 & 1;
  }
  else
  {
    __break(1u);
  }
  return v2;
}

Swift::Void __swiftcall _ViewTest.renderRecursively(seconds:)(Swift::Double seconds)
{
  uint64_t v2 = static _TestApp.host.getter();
  if (v2)
  {
    uint64_t v4 = qword_1ED476D40;
    specialized _ViewTest.render(host:seconds:options:)(seconds, v2, v3, &v4);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #1 in _ViewTest.render(host:seconds:options:)(double a1, uint64_t a2, uint64_t a3, char *a4, char a5)
{
  uint64_t ObjectType = swift_getObjectType();
  if ((a5 & 2) != 0)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, double))(*(void *)(a3 + 8) + 16))(ObjectType, a1);
    if ((result & 1) == 0)
    {
      char v11 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, double))(a3 + 128))(ObjectType, a3, a1);
  }
  char v11 = *a4;
LABEL_6:
  *a4 = v11;
  return result;
}

Swift::Void __swiftcall _ViewTest.turnRunloop(times:)(Swift::Int times)
{
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (times < 0)
  {
    __break(1u);
  }
  else if (times)
  {
    uint64_t v5 = self;
    uint64_t v18 = v22;
    id v19 = v5;
    uint64_t v6 = (void *)*MEMORY[0x1E4F1C3A0];
    uint64_t v7 = (void *)*MEMORY[0x1E4F1C4B0];
    double v8 = (void (**)(char *, uint64_t))(v2 + 8);
    Swift::Int v9 = times - 1;
    long long v17 = xmmword_18834BB70;
    while (1)
    {
      id v10 = v19;
      id v11 = objc_msgSend(v19, sel_currentRunLoop, v17);
      long long v21 = v17;
      v22[0] = v6;
      v22[1] = v7;
      id v12 = v6;
      id v13 = v7;
      id v14 = objc_msgSend(v10, sel_currentRunLoop);
      Date.init(timeIntervalSinceNow:)();
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      (*v8)(v4, v20);
      unsigned __int8 v16 = objc_msgSend(v14, sel_runMode_beforeDate_, v12, isa);

      if ((v16 & 1) == 0) {
        objc_msgSend(self, sel_sleepForTimeInterval_, 0.001);
      }

      type metadata accessor for NSRunLoopMode(0);
      swift_arrayDestroy();

      if (!v9) {
        break;
      }
      --v9;
    }
  }
}

uint64_t _ViewTest.systemColorScheme.getter()
{
  uint64_t result = static _TestApp.host.getter();
  if (result)
  {
    self;
    id v1 = objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_window);
    swift_unknownObjectRelease();
    if (!v1) {
      return 0;
    }
    id v2 = objc_msgSend(v1, sel_windowScene);

    if (!v2) {
      return 0;
    }
    id v3 = objc_msgSend(v2, sel__systemUserInterfaceStyle);

    return (uint64_t)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ViewTest.updateEnvironment(_:)()
{
  return MEMORY[0x1F4101398]();
}

Swift::Void __swiftcall _ViewTest.loop()()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  id v3 = &v16[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  specialized _ViewTest.render(seconds:)(0.0166666667);
  uint64_t v4 = self;
  id v5 = objc_msgSend(v4, sel_currentRunLoop);
  long long v17 = xmmword_18834BB70;
  uint64_t v6 = (void *)*MEMORY[0x1E4F1C4B0];
  v18[0] = *(id *)MEMORY[0x1E4F1C3A0];
  v18[1] = v6;
  uint64_t v7 = (void (**)(unsigned char *, uint64_t))(v1 + 8);
  id v8 = v18[0];
  id v9 = v6;
  uint64_t v10 = 0;
  while ((v10 & 1u) < (unint64_t)v17)
  {
    id v12 = v18[v10 & 1];
    id v13 = objc_msgSend(v4, sel_currentRunLoop);
    Date.init(timeIntervalSinceNow:)();
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*v7)(v3, v0);
    unsigned __int8 v15 = objc_msgSend(v13, sel_runMode_beforeDate_, v12, isa);

    if ((v15 & 1) == 0) {
      objc_msgSend(self, sel_sleepForTimeInterval_, 0.001);
    }

    if (__OFADD__(v10++, 1)) {
      goto LABEL_7;
    }
  }
  __break(1u);
LABEL_7:
  __break(1u);
}

uint64_t _ViewTest.rootState<A>(type:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Binding();
  uint64_t v9 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v9 - 8);
  id v11 = (char *)&v18[-1] - v10;
  v18[0] = _ViewTest.rootViewID.getter(a1, a3);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v18[3] = a1;
  v18[4] = MEMORY[0x1E4FBB550];
  v18[5] = a2;
  v18[6] = AssociatedTypeWitness;
  v18[7] = a3;
  v18[8] = MEMORY[0x1E4FBB560];
  v18[9] = AssociatedConformanceWitness;
  v18[10] = v18;
  uint64_t v14 = type metadata accessor for Binding();
  _ViewTest.withRenderIfNeeded<A>(_:)((void (*)(double))partial apply for closure #1 in _ViewTest.stateForIdentifier<A, B, C>(_:type:in:), v14, (uint64_t)v11);
  uint64_t v15 = *(void *)(v8 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v11, 1, v8);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(a4, v11, v8);
  }
  __break(1u);
  return result;
}

uint64_t _ViewTest.rootState<A, B>(type:in:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for Binding();
  uint64_t v13 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v20[-1] - v14;
  v20[0] = _ViewTest.rootViewID.getter(a1, a4);
  v20[3] = a1;
  v20[4] = MEMORY[0x1E4FBB550];
  v20[5] = a2;
  v20[6] = a3;
  v20[7] = a4;
  v20[8] = MEMORY[0x1E4FBB560];
  v20[9] = a5;
  v20[10] = v20;
  uint64_t v16 = type metadata accessor for Binding();
  _ViewTest.withRenderIfNeeded<A>(_:)((void (*)(double))partial apply for closure #1 in _ViewTest.stateForIdentifier<A, B, C>(_:type:in:), v16, (uint64_t)v15);
  uint64_t v17 = *(void *)(v12 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v12);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 32))(a6, v15, v12);
  }
  __break(1u);
  return result;
}

uint64_t _ViewTest.set<A>(_:to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v21 = a2;
  id v5 = (uint64_t *)(*a1 + *MEMORY[0x1E4FBBC10]);
  uint64_t v6 = *v5;
  uint64_t v22 = *(void *)(*v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v20 - v7;
  uint64_t v10 = *(void *)(v9 + 8);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v20 - v13;
  uint64_t v15 = type metadata accessor for Binding();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v20 - v17;
  _ViewTest.rootState<A>(type:)(a3, v6, v20, (uint64_t)&v20 - v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v21, v10);
  MEMORY[0x18C113DA0](v15);
  swift_setAtWritableKeyPath();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t _ViewTest.get<A>(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v15[1] = a4;
  uint64_t v6 = *(void *)(*a1 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)v15 - v8;
  uint64_t v10 = type metadata accessor for Binding();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v15 - v12;
  _ViewTest.rootState<A>(type:)(a2, v6, a3, (uint64_t)v15 - v12);
  MEMORY[0x18C113DA0](v10);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_getAtKeyPath();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t specialized Binding.wrappedValue.setter()
{
  return dispatch thunk of AnyLocation.set(_:transaction:)();
}

uint64_t specialized _ViewTest.sendEvents(_:)(uint64_t a1)
{
  uint64_t result = static _TestApp.host.getter();
  if (result)
  {
    uint64_t v4 = v3;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 40))(a1, ObjectType, v4);
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized _ViewTest.setSize(_:)(double a1, double a2)
{
  uint64_t result = static _TestApp.host.getter();
  if (result)
  {
    uint64_t v6 = v5;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, double, double))(v6 + 16))(ObjectType, v6, a1, a2);
    swift_unknownObjectRelease();
    uint64_t result = static _TestApp.comparisonHost.getter();
    if (result)
    {
      uint64_t v9 = v8;
      uint64_t v10 = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, double, double))(v9 + 16))(v10, v9, a1, a2);
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized _ViewTest.setSafeAreaInsets(_:)(double a1, double a2, double a3, double a4)
{
  uint64_t result = static _TestApp.host.getter();
  if (result)
  {
    uint64_t v10 = v9;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, double, double, double, double))(v10 + 24))(ObjectType, v10, a1, a2, a3, a4);
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t partial apply for closure #1 in _ViewTest.setUpTest()()
{
  return specialized _ViewTest.render(seconds:)(0.0166666667);
}

uint64_t specialized _ViewTest.render(host:seconds:options:)(double a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *a4;
  if (*a4)
  {
    uint64_t ObjectType = swift_getObjectType();
    double v10 = MEMORY[0x1F4188790](ObjectType);
    (*(void (**)(uint64_t (*)(uint64_t, uint64_t), double))(a3 + 120))(partial apply for closure #1 in _ViewTest.render(host:seconds:options:), v10);
    return 1;
  }
  else
  {
    uint64_t v7 = swift_getObjectType();
    if ((v6 & 2) != 0)
    {
      return (*(uint64_t (**)(uint64_t, double))(*(void *)(a3 + 8) + 16))(v7, a1) & 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, double))(a3 + 128))(v7, a3, a1);
      return 1;
    }
  }
}

uint64_t specialized _ViewTest.render(seconds:)(double a1)
{
  static _TestApp.renderOptions.getter();
  if ((v4 & 8) == 0)
  {
    uint64_t result = static _TestApp.host.getter();
    if (result) {
      goto LABEL_5;
    }
    __break(1u);
  }
  uint64_t result = static _TestApp.comparisonHost.getter();
  if (!result)
  {
    __break(1u);
    return result;
  }
LABEL_5:
  specialized _ViewTest.render(host:seconds:options:)(a1, result, v3, &v4);

  return swift_unknownObjectRelease();
}

uint64_t specialized _ViewTest.resetEvents()()
{
  uint64_t result = static _TestApp.host.getter();
  if (result)
  {
    uint64_t v2 = v1;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v2 + 48))(ObjectType, v2);
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_187B025A0()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in _ViewTest.tearDownTest()()
{
  return withRenderOptions(_:_:)();
}

uint64_t sub_187B026C0()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type Error and conformance Error()
{
  unint64_t result = lazy protocol witness table cache variable for type Error and conformance Error;
  if (!lazy protocol witness table cache variable for type Error and conformance Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Error and conformance Error);
  }
  return result;
}

uint64_t partial apply for closure #1 in _ViewTest.stateForIdentifier<A, B, C>(_:type:in:)()
{
  return closure #1 in _ViewTest.stateForIdentifier<A, B, C>(_:type:in:)();
}

uint64_t partial apply for closure #1 in _ViewTest.viewForIdentifier<A, B>(_:_:)()
{
  return closure #1 in _ViewTest.viewForIdentifier<A, B>(_:_:)();
}

uint64_t dispatch thunk of _ViewTest.initRootView()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of _ViewTest.initSize()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of _ViewTest.setTestView<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

uint64_t destroy for Error()
{
  return outlined consume of TabCustomizationID.Base();
}

uint64_t initializeBufferWithCopyOfBuffer for Error(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  outlined copy of TabCustomizationID.Base();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for Error(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  outlined copy of TabCustomizationID.Base();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of TabCustomizationID.Base();
  return a1;
}

uint64_t assignWithTake for Error(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of TabCustomizationID.Base();
  return a1;
}

void *type metadata accessor for Error()
{
  return &unk_1ED4666E8;
}

uint64_t partial apply for closure #1 in _ViewTest.render(host:seconds:options:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in _ViewTest.render(host:seconds:options:)(*(double *)(v2 + 32), a1, a2, *(char **)(v2 + 16), *(void *)(v2 + 24));
}

void type metadata accessor for Binding<_TestApp.RootView.StateType>()
{
  if (!lazy cache variable for type metadata for Binding<_TestApp.RootView.StateType>)
  {
    unint64_t v0 = type metadata accessor for Binding();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<_TestApp.RootView.StateType>);
    }
  }
}

uint64_t outlined consume of Binding<_TestApp.RootView.StateType>?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t UIViewSnapshotResponder.allowsHitTesting.getter()
{
  return *(unsigned __int8 *)(v0 + 264);
}

uint64_t UIViewSnapshotResponder.containsGlobalPoints(_:cacheKey:options:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  if (*(unsigned char *)(v4 + 264) == 1)
  {
    uint64_t v10 = *a3;
    type metadata accessor for DefaultLayoutViewResponder();
    uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t *))method lookup function for ViewResponder();
    return v8(a1, a2 | ((HIDWORD(a2) & 1) << 32), &v10);
  }
  else
  {
    uint64_t result = MultiViewResponder.children.getter();
    *a4 = 0;
    a4[1] = 0;
    a4[2] = result;
  }
  return result;
}

void UIViewSnapshotResponder.__allocating_init(inputs:)()
{
}

void UIViewSnapshotResponder.__allocating_init(inputs:viewSubgraph:)()
{
}

double UIViewSnapshotResponder.transform.getter@<D0>(uint64_t a1@<X8>)
{
  AGGraphClearUpdate();
  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for ViewTransform?);
  static Update.dispatchImmediately<A>(_:)();
  AGGraphSetUpdate();
  if (v4 == 1)
  {
    ViewTransform.init()();
  }
  else
  {
    uint64_t v7 = v4;
    long long v8 = v5;
    long long v9 = v6;
  }
  ViewTransform.appendPosition(_:)(v1[15]);
  *(void *)a1 = v7;
  *(_OWORD *)(a1 + 8) = v8;
  double result = *(double *)&v9;
  *(_OWORD *)(a1 + 24) = v9;
  return result;
}

uint64_t UIViewSnapshotResponder.contentPath.getter@<X0>(uint64_t a1@<X8>)
{
  long long v11 = 0u;
  long long v12 = 0u;
  char v13 = 6;
  (*(void (**)(_OWORD *__return_ptr))(class metadata base offset for UIViewSnapshotResponder + *v1 + 88))(v14);
  lazy protocol witness table accessor for type UniqueID and conformance UniqueID();
  AnyHashable.init<A>(_:)();
  v10[40] = 0;
  dispatch thunk of ViewResponder.addContentPath(to:kind:in:observer:)();
  outlined destroy of CoordinateSpace((uint64_t)v10);
  v14[0] = v11;
  v14[1] = v12;
  char v3 = v13;
  char v15 = v13;
  uint64_t v5 = *((void *)&v11 + 1);
  uint64_t v4 = v11;
  uint64_t v7 = *((void *)&v12 + 1);
  uint64_t v6 = v12;
  outlined init with take of Path.Storage((uint64_t)v14, (uint64_t)v10);
  outlined retain of Path.Storage((uint64_t)v10, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  char v8 = Path.isEmpty.getter();
  uint64_t result = outlined retain of Path.Storage((uint64_t)v14, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  if (v8)
  {
    uint64_t result = outlined retain of Path.Storage((uint64_t)v14, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    char v3 = -1;
  }
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v3;
  return result;
}

__C::CGRect __swiftcall UIViewSnapshotResponder.convertRectToTargetSpace(_:host:preferredContainer:)(__C::CGRect _, UIView *host, UIView_optional *preferredContainer)
{
  __C::CGRect v33 = _;
  type metadata accessor for HostingScrollViewResponder();
  ResponderNode.firstAncestor<A>(ofType:)();
  if (!v29)
  {
LABEL_10:
    hostingViewCoordinateSpace.getter();
    char v32 = 1;
    AGGraphClearUpdate();
    type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for ViewTransform?);
    static Update.dispatchImmediately<A>(_:)();
    AGGraphSetUpdate();
    if (v25 == 1) {
      ViewTransform.init()();
    }
    ViewTransform.appendPosition(_:)(v3[15]);
    CGRect.convert(to:transform:)();
    swift_release();
    outlined destroy of CoordinateSpace((uint64_t)&v29);
    long long v11 = host;
    if (!preferredContainer) {
      goto LABEL_16;
    }
    goto LABEL_13;
  }
  uint64_t v6 = MEMORY[0x18C119DF0](v29 + 40);
  if (!v6)
  {
    swift_release();
    goto LABEL_10;
  }
  uint64_t v7 = (void *)v6;
  type metadata accessor for HostingScrollView.PlatformContainer();
  uint64_t v8 = swift_dynamicCastClass();
  if (!v8)
  {
    swift_release();

    goto LABEL_10;
  }
  id v9 = *(id *)(v8 + OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer_scrollView);
  swift_release();

  id v10 = objc_msgSend(v9, sel_window);
  if (!v10)
  {

    goto LABEL_10;
  }

  long long v11 = (UIView *)v9;
  AGGraphClearUpdate();
  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for ViewTransform?);
  static Update.dispatchImmediately<A>(_:)();
  AGGraphSetUpdate();
  if (v26 == 1)
  {
    ViewTransform.init()();
  }
  else
  {
    uint64_t v29 = v26;
    long long v30 = v27;
    long long v31 = v28;
  }
  ViewTransform.appendPosition(_:)(v3[15]);
  long long v24 = v30;
  static CoordinateSpace.scrollViewSafeArea.getter();
  CGRect.convert(to:transform:)();
  outlined destroy of CoordinateSpace((uint64_t)&v29);

  swift_release();
  if (!preferredContainer)
  {
LABEL_16:

    CGFloat x = v33.origin.x;
    CGFloat y = v33.origin.y;
    CGFloat width = v33.size.width;
    CGFloat height = v33.size.height;
    goto LABEL_17;
  }
LABEL_13:
  -[UIView convertRect:toCoordinateSpace:](v11, sel_convertRect_toCoordinateSpace_, preferredContainer, v33.origin.x, v33.origin.y, v33.size.width, v33.size.height, v24);
  CGFloat x = v12;
  CGFloat y = v14;
  CGFloat width = v16;
  CGFloat height = v18;

LABEL_17:
  double v20 = x;
  double v21 = y;
  double v22 = width;
  double v23 = height;
  result.size.CGFloat height = v23;
  result.size.CGFloat width = v22;
  result.origin.CGFloat y = v21;
  result.origin.CGFloat x = v20;
  return result;
}

uint64_t closure #1 in closure #1 in UIViewSnapshotResponder.transform.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = AGGraphGetWeakValue();
  if (result)
  {
    long long v6 = *(_OWORD *)result;
    long long v7 = *(_OWORD *)(result + 16);
    uint64_t v3 = *(void *)(result + 32);
    uint64_t result = swift_retain();
    long long v4 = v6;
    long long v5 = v7;
  }
  else
  {
    uint64_t v3 = 0;
    long long v4 = xmmword_18834FC50;
    long long v5 = 0uLL;
  }
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = v3;
  return result;
}

double UIViewSnapshotResponder.portalContainer(centeringPortalRect:inHost:options:preferredContainer:)(uint64_t a1, void *a2, char a3, id a4)
{
  outlined init with take of CGRect?(a1, (uint64_t)v44);
  CGFloat v9 = *(double *)v44;
  CGFloat v10 = *(double *)&v44[1];
  CGFloat v11 = *(double *)&v44[2];
  CGFloat v12 = *(double *)&v44[3];
  outlined init with take of CGRect?(a1, (uint64_t)v45);
  if (v45[32] == 1)
  {
    CGFloat v9 = 0.0;
    CGFloat v10 = 0.0;
    CGFloat v11 = 0.0;
    CGFloat v12 = 0.0;
  }
  v43.origin.double x = v9;
  v43.origin.double y = v10;
  v43.size.CGFloat width = v11;
  v43.size.CGFloat height = v12;
  type metadata accessor for HostingScrollViewResponder();
  ResponderNode.firstAncestor<A>(ofType:)();
  if (v39)
  {
    uint64_t v13 = MEMORY[0x18C119DF0](v39 + 40);
    if (v13)
    {
      double v14 = (void *)v13;
      type metadata accessor for HostingScrollView.PlatformContainer();
      uint64_t v15 = swift_dynamicCastClass();
      if (v15)
      {
        id v16 = *(id *)(v15 + OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer_scrollView);
        swift_release();

        id v17 = objc_msgSend(v16, sel_window);
        if (v17)
        {

          AGGraphClearUpdate();
          type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for ViewTransform?);
          static Update.dispatchImmediately<A>(_:)();
          AGGraphSetUpdate();
          if (v36 == 1)
          {
            ViewTransform.init()();
          }
          else
          {
            uint64_t v39 = v36;
            long long v40 = v37;
            long long v41 = v38;
          }
          ViewTransform.appendPosition(_:)(v4[15]);
          static CoordinateSpace.scrollViewSafeArea.getter();
          CGRect.convert(to:transform:)();
          outlined destroy of CoordinateSpace((uint64_t)&v39);
          swift_release();
          double x = v43.origin.x;
          double y = v43.origin.y;
          CGFloat width = v43.size.width;
          CGFloat height = v43.size.height;
          id v24 = v16;
          v47.origin.double x = x;
          v47.origin.double y = y;
          v47.size.CGFloat width = width;
          v47.size.CGFloat height = height;
          double v22 = x + CGRectGetWidth(v47) * 0.5;
          v48.origin.double x = x;
          v48.origin.double y = y;
          v48.size.CGFloat width = width;
          v48.size.CGFloat height = height;
          double v23 = y + CGRectGetHeight(v48) * 0.5;
          if ((a3 & 1) != 0 && (id v31 = objc_msgSend(v24, sel_superview)) != 0)
          {
            id v32 = v31;
            objc_msgSend(v24, sel_convertPoint_toCoordinateSpace_, v31, v22, v23);
            double v22 = v33;
            double v23 = v34;

            id v24 = v32;
          }
          else
          {
          }
          goto LABEL_15;
        }
      }
      else
      {
        swift_release();
      }
    }
    else
    {
      swift_release();
    }
  }
  hostingViewCoordinateSpace.getter();
  char v42 = 1;
  AGGraphClearUpdate();
  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for ViewTransform?);
  static Update.dispatchImmediately<A>(_:)();
  AGGraphSetUpdate();
  if (v35 == 1) {
    ViewTransform.init()();
  }
  ViewTransform.appendPosition(_:)(v4[15]);
  CGRect.convert(to:transform:)();
  swift_release();
  outlined destroy of CoordinateSpace((uint64_t)&v39);
  double v18 = v43.origin.x;
  double v19 = v43.origin.y;
  CGFloat v20 = v43.size.width;
  CGFloat v21 = v43.size.height;
  double v22 = v18 + CGRectGetWidth(v43) * 0.5;
  v46.origin.double x = v18;
  v46.origin.double y = v19;
  v46.size.CGFloat width = v20;
  v46.size.CGFloat height = v21;
  double v23 = v19 + CGRectGetHeight(v46) * 0.5;
  id v24 = a2;
LABEL_15:
  if (a4 && v24 != a4)
  {
    objc_msgSend(v24, sel_convertPoint_toCoordinateSpace_, a4, v22, v23);
    double v22 = v25;
  }
  return v22;
}

double closure #1 in closure #1 in UIViewSnapshotResponder.portalPreviewTarget<A>(inHost:portalResult:options:preferredContainer:)(char a1, uint64_t a2, CGPoint *a3, double a4, double a5)
{
  double v11 = a4;
  double v12 = a5;
  if ((a1 & 2) == 0)
  {
    outlined init with take of CGRect?(a2, (uint64_t)v13);
    if ((v14 & 1) == 0)
    {
      double v11 = v13[0] + a4;
      double v12 = v13[1] + a5;
    }
  }
  hostingViewCoordinateSpace.getter();
  v10[40] = 1;
  AGGraphClearUpdate();
  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for ViewTransform?);
  static Update.dispatchImmediately<A>(_:)();
  AGGraphSetUpdate();
  if (v9 == 1) {
    ViewTransform.init()();
  }
  ViewTransform.appendPosition(_:)(a3[15]);
  type metadata accessor for CGPoint(0);
  protocol witness for ViewTransformable.convert(to:transform:) in conformance CGPoint();
  swift_release();
  outlined destroy of CoordinateSpace((uint64_t)v10);
  return v11;
}

uint64_t closure #1 in UIViewSnapshotResponder.canPortal.getter@<X0>(BOOL *a1@<X8>)
{
  uint64_t result = AGGraphGetWeakValue();
  if (result) {
    BOOL v3 = (*(_WORD *)(result + 8) & 0x200) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  *a1 = v3;
  return result;
}

void closure #1 in UIViewSnapshotResponder.snapshotView(host:)(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for DisplayList?);
  static Update.ensure<A>(_:)();
  if (v30)
  {
    int v6 = v31 | (v32 << 16);
    double v7 = *(double *)(a1 + 224);
    double v8 = *(double *)(a1 + 232);
    uint64_t v9 = *(void *)(a1 + 280);
    uint64_t v10 = *(void *)(a1 + 288);
    double v11 = (objc_class *)type metadata accessor for DisplayListView();
    double v12 = (char *)objc_allocWithZone(v11);
    uint64_t v13 = &v12[OBJC_IVAR____TtC7SwiftUI15DisplayListView_displayList];
    *(void *)uint64_t v13 = v30;
    *((_WORD *)v13 + 4) = v6;
    v13[10] = BYTE2(v6);
    char v14 = &v12[OBJC_IVAR____TtC7SwiftUI15DisplayListView_displayListPosition];
    *(void *)char v14 = v9;
    *((void *)v14 + 1) = v10;
    v23.receiver = v12;
    v23.super_class = v11;
    id v15 = objc_msgSendSuper2(&v23, sel_initWithFrame_, 0.0, 0.0, v7, v8);
    id v16 = self;
    id v17 = v15;
    id v18 = objc_msgSend(v16, sel_clearColor);
    objc_msgSend(v17, sel_setBackgroundColor_, v18);

LABEL_8:
    *a3 = v17;
    return;
  }
  double v34 = 0.0;
  double v35 = 0.0;
  long long v36 = *(_OWORD *)(a1 + 224);
  hostingViewCoordinateSpace.getter();
  char v33 = 1;
  AGGraphClearUpdate();
  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for ViewTransform?);
  static Update.dispatchImmediately<A>(_:)();
  AGGraphSetUpdate();
  if (v24 == 1)
  {
    ViewTransform.init()();
  }
  else
  {
    uint64_t v27 = v24;
    long long v28 = v25;
    long long v29 = v26;
  }
  ViewTransform.appendPosition(_:)(*(CGPoint *)(a1 + 240));
  CGRect.convert(to:transform:)();
  swift_release();
  outlined destroy of CoordinateSpace((uint64_t)&v30);
  double v19 = v34;
  double v20 = v35;
  long long v21 = v36;
  id v22 = objc_msgSend(a2, sel_resizableSnapshotViewFromRect_afterScreenUpdates_withCapInsets_, 0, v34, v35, v36, *MEMORY[0x1E4FB2848], *(double *)(MEMORY[0x1E4FB2848] + 8), *(double *)(MEMORY[0x1E4FB2848] + 16), *(double *)(MEMORY[0x1E4FB2848] + 24));
  if (v22)
  {
    id v17 = v22;
    objc_msgSend(v22, sel_setContentMode_, 4);
    objc_msgSend(v17, sel_setFrame_, v19, v20, v21);
    goto LABEL_8;
  }
  __break(1u);
}

uint64_t closure #1 in closure #1 in UIViewSnapshotResponder.snapshotView(host:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = AGGraphGetWeakValue();
  if (result)
  {
    int v3 = *(unsigned __int16 *)(result + 8) | (*(unsigned __int8 *)(result + 10) << 16);
    uint64_t result = swift_bridgeObjectRetain();
  }
  else
  {
    int v3 = 0;
  }
  *(void *)a1 = result;
  *(_WORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 10) = BYTE2(v3);
  return result;
}

uint64_t UIViewSnapshotResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for UIViewSnapshotResponder()
{
  return type metadata accessor for UIViewSnapshotResponder();
}

unint64_t implicit closure #1 in DisplayListView.draw(_:)()
{
  return 0xD00000000000001BLL;
}

uint64_t closure #1 in DisplayListView.draw(_:)()
{
  type metadata accessor for DisplayList.GraphicsRenderer();
  swift_allocObject();
  DisplayList.GraphicsRenderer.init(platformViewMode:)();
  GraphicsContext.translateBy(x:y:)();
  swift_bridgeObjectRetain();
  DisplayList.GraphicsRenderer.renderDisplayList(_:at:in:)();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t type metadata accessor for DisplayListView()
{
  return self;
}

uint64_t partial apply for closure #1 in closure #1 in UIViewSnapshotResponder.snapshotView(host:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in UIViewSnapshotResponder.snapshotView(host:)(a1);
}

uint64_t partial apply for closure #1 in DisplayListView.draw(_:)()
{
  return closure #1 in DisplayListView.draw(_:)();
}

ValueMetadata *type metadata accessor for UIViewSnapshotResponder.Transform()
{
  return &type metadata for UIViewSnapshotResponder.Transform;
}

void protocol witness for _SceneModifier.body(content:) in conformance RestorationBehaviorModifier()
{
}

{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void _SceneModifier<>.body(content:)()
{
}

void protocol witness for _SceneModifier.body(content:) in conformance WindowResizabilityModifier()
{
}

void protocol witness for _SceneModifier.body(content:) in conformance EnvironmentWritingSceneModifier<A>()
{
}

uint64_t protocol witness for static _SceneModifier._makeScene(modifier:inputs:body:) in conformance EnvironmentWritingSceneModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static _SceneModifier<>._makeScene(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t)&protocol witness table for EnvironmentWritingSceneModifier<A>);
}

void protocol witness for _SceneModifier.body(content:) in conformance WindowDefaultsPropertyModifier()
{
}

uint64_t protocol witness for static _SceneModifier._makeScene(modifier:inputs:body:) in conformance _EnvironmentKeyTransformModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return static _SceneModifier<>._makeScene(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10, WitnessTable);
}

uint64_t static _SceneModifier._makeScene(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v6 = *a1;
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2[2];
  uint64_t v10 = a2[5];
  uint64_t v11 = a2[6];
  int v12 = *((_DWORD *)a2 + 14);
  static DynamicPropertyCache.fields(of:)();
  uint64_t v13 = v46;
  uint64_t v14 = v47;
  char v15 = v48;
  int v16 = HIDWORD(v48);
  uint64_t v46 = v7;
  LODWORD(v47) = v8;
  uint64_t v48 = v9;
  long long v49 = *(_OWORD *)(a2 + 3);
  uint64_t v50 = v10;
  uint64_t v51 = v11;
  int v52 = v12;
  int v25 = v16;
  int v26 = v6;
  int v41 = v6;
  uint64_t v31 = v14;
  uint64_t v32 = v13;
  char v30 = v15;
  LOBYTE(v36) = v15;
  HIDWORD(v36) = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static _SceneModifier.makeBody(modifier:inputs:fields:)();
  int v17 = v45;
  uint64_t v18 = v43;
  uint64_t v27 = v42;
  LOBYTE(v11) = v44;
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  uint64_t v19 = type metadata accessor for _SceneModifier_Content.BodyInput();
  type metadata accessor for (_:_:)();
  swift_getWitnessTable();
  _SceneInputs.append<A, B>(_:to:)((uint64_t)&v34, v19, v19);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  int v45 = v17;
  uint64_t v34 = v46;
  LODWORD(v35) = v47;
  uint64_t v36 = v48;
  long long v37 = v49;
  uint64_t v38 = v50;
  uint64_t v39 = v51;
  int v40 = v52;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(&v42, &v45, &v34, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v22 = v42;
  int v23 = v43;
  if ((v11 & 1) == 0)
  {
    uint64_t v42 = v27;
    uint64_t v43 = v18;
    int v45 = v26;
    uint64_t v34 = v32;
    uint64_t v35 = v31;
    LOBYTE(v36) = v30;
    HIDWORD(v36) = v25;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(void *)a5 = v22;
  *(_DWORD *)(a5 + 8) = v23;
  return result;
}

uint64_t static EmptyModifier._makeScene(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v4 = a2[2];
  int v5 = *((_DWORD *)a2 + 14);
  uint64_t v7 = *a2;
  int v8 = v3;
  uint64_t v9 = v4;
  long long v10 = *(_OWORD *)(a2 + 3);
  long long v11 = *(_OWORD *)(a2 + 5);
  int v12 = v5;
  return a3(a1, &v7);
}

void protocol witness for _SceneModifier.body(content:) in conformance EmptyModifier()
{
}

uint64_t protocol witness for static _SceneModifier._makeScene(modifier:inputs:body:) in conformance EmptyModifier(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v4 = a2[2];
  int v5 = *((_DWORD *)a2 + 14);
  uint64_t v7 = *a2;
  int v8 = v3;
  uint64_t v9 = v4;
  long long v10 = *(_OWORD *)(a2 + 3);
  long long v11 = *(_OWORD *)(a2 + 5);
  int v12 = v5;
  return a3(a1, &v7);
}

void ModifiedContent<>.body.getter()
{
}

{
  specialized ModifiedContent<>.body.getter();
}

{
  specialized ModifiedContent<>.body.getter();
}

{
  specialized ModifiedContent<>.body.getter();
}

void protocol witness for Scene.body.getter in conformance <> ModifiedContent<A, B>()
{
}

uint64_t static ModifiedContent<>._makeScene(modifier:inputs:body:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *a2;
  int v16 = *((_DWORD *)a2 + 2);
  uint64_t v17 = a2[2];
  int v24 = *((_DWORD *)a2 + 14);
  LODWORD(v26) = *a1;
  int v14 = v26;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  long long v23 = *(_OWORD *)(a2 + 5);
  uint64_t v18 = a2[3];
  uint64_t v19 = a2[4];
  _GraphValue.subscript.getter();
  uint64_t v26 = v15;
  int v27 = v16;
  uint64_t v28 = v17;
  uint64_t v29 = v18;
  uint64_t v30 = v19;
  long long v31 = v23;
  int v32 = v24;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a5;
  *(void *)(v20 + 24) = a6;
  *(void *)(v20 + 32) = a7;
  *(void *)(v20 + 40) = a8;
  *(_DWORD *)(v20 + 48) = v14;
  *(void *)(v20 + 56) = a3;
  *(void *)(v20 + 64) = a4;
  long long v21 = *(void (**)(unsigned char *, uint64_t *, uint64_t (*)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t))(a8 + 32);
  swift_retain();
  v21(v33, &v26, partial apply for closure #2 in static ModifiedContent<>._makeScene(modifier:inputs:body:), v20, a6, a8);
  return swift_release();
}

uint64_t closure #2 in static ModifiedContent<>._makeScene(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = *a2;
  int v14 = *((_DWORD *)a2 + 2);
  uint64_t v15 = a2[2];
  int v16 = *((_DWORD *)a2 + 14);
  LODWORD(v21) = a3;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  long long v20 = *(_OWORD *)(a2 + 5);
  uint64_t v17 = a2[3];
  uint64_t v18 = a2[4];
  _GraphValue.subscript.getter();
  uint64_t v21 = v13;
  int v22 = v14;
  uint64_t v23 = v15;
  uint64_t v24 = v17;
  uint64_t v25 = v18;
  long long v26 = v20;
  int v27 = v16;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 32))(v28, &v21, a4, a5, a6, a8);
}

uint64_t protocol witness for static _SceneModifier._makeScene(modifier:inputs:body:) in conformance <> ModifiedContent<A, B>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ModifiedContent<>._makeScene(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), *(void *)(a6 - 8), *(void *)(a6 - 16));
}

uint64_t static _SceneModifier_Content._makeScene(scene:inputs:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 48);
  int v6 = *(_DWORD *)(a2 + 56);
  uint64_t v17 = *(void (**)(uint64_t, void))a2;
  int v18 = v2;
  uint64_t v19 = v3;
  long long v20 = *(_OWORD *)(a2 + 24);
  uint64_t v21 = v4;
  uint64_t v22 = v5;
  int v23 = v6;
  type metadata accessor for _SceneModifier_Content.BodyInput();
  type metadata accessor for (_:_:)();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  _SceneInputs.popLast<A, B>(_:)();
  uint64_t v7 = v10;
  if (v10)
  {
    long long v10 = v17;
    LODWORD(v11) = v18;
    uint64_t v12 = v19;
    long long v13 = v20;
    uint64_t v14 = v21;
    uint64_t v15 = v22;
    int v16 = v23;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v8 = swift_bridgeObjectRetain();
    v7(v8, &v10);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v7);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return swift_release_n();
  }
  else
  {
    PreferencesOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
}

uint64_t static _SceneModifier_Content.BodyInput.defaultValue.getter()
{
  unint64_t v0 = type metadata accessor for (_:_:)();

  return MEMORY[0x1F4100E88](v0);
}

uint64_t protocol witness for static GraphInput.isTriviallyReusable.getter in conformance _SceneModifier_Content<A>.BodyInput()
{
  return MEMORY[0x1F40FD0F8]();
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _SceneModifier_Content<A>.BodyInput()
{
  return static _SceneModifier_Content.BodyInput.defaultValue.getter();
}

uint64_t protocol witness for static Scene._makeScene(scene:inputs:) in conformance _SceneModifier_Content<A>(uint64_t a1, uint64_t a2)
{
  return static _SceneModifier_Content._makeScene(scene:inputs:)(a1, a2);
}

uint64_t static _SceneModifier.makeBody(modifier:inputs:fields:)()
{
  if (AGTypeID.isValueType.getter())
  {
    type metadata accessor for AppModifierBodyAccessor();
    swift_getWitnessTable();
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v1._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t AppModifierBodyAccessor.updateBody(of:changed:)(uint64_t result, char a2)
{
  if (a2)
  {
    MEMORY[0x1F4188790](result);
    type metadata accessor for AppModifierBodyAccessor();
    swift_getWitnessTable();
    return BodyAccessor.setBody(_:)();
  }
  return result;
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance AppModifierBodyAccessor<A>(uint64_t result, char a2)
{
  return AppModifierBodyAccessor.updateBody(of:changed:)(result, a2);
}

void protocol witness for _SceneModifier.body(content:) in conformance _AppearanceActionModifier()
{
}

void protocol witness for _SceneModifier.body(content:) in conformance ActivationConditionsModifier()
{
}

void protocol witness for _SceneModifier.body(content:) in conformance PersistentSystemOverlaysSceneModifier()
{
}

void protocol witness for _SceneModifier.body(content:) in conformance SceneSafeAreaDisabledModifier()
{
}

void protocol witness for _SceneModifier.body(content:) in conformance CommandsRemovedModifier()
{
}

uint64_t protocol witness for static _SceneModifier._makeScene(modifier:inputs:body:) in conformance WindowToolbarStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static _SceneModifier<>._makeScene(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t)&protocol witness table for WindowToolbarStyleModifier<A>);
}

void specialized _SceneModifier.sceneBodyError()()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized _SceneModifier<>.body(content:)()
{
}

uint64_t type metadata accessor for _SceneModifier_Content.BodyInput()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187B04BA0()
{
  return swift_deallocObject();
}

void specialized _SceneModifier.sceneBodyError()(uint64_t a1, void *a2)
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 46;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized ModifiedContent<>.body.getter()
{
}

{
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  specialized WidgetConfiguration.widgetConfigurationBodyError()();
}

{
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  specialized ControlWidgetConfiguration.controlWidgetConfigurationBodyError()();
}

{
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  specialized ControlWidgetTemplate.controlWidgetTemplateBodyError()();
}

uint64_t sub_187B04CC8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static ModifiedContent<>._makeScene(modifier:inputs:body:)(uint64_t a1, uint64_t *a2)
{
  return closure #2 in static ModifiedContent<>._makeScene(modifier:inputs:body:)(a1, a2, *(_DWORD *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t dispatch thunk of _SceneModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static _SceneModifier._makeScene(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t type metadata accessor for _SceneModifier_Content()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for PropertyKey in _SceneModifier_Content<A>.BodyInput()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for _SceneModifier_Content<A>.BodyInput(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t partial apply for closure #1 in closure #2 in static ModifiedContent<>._makeScene(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in closure #2 in static ModifiedContent<>._makeScene(scene:inputs:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t type metadata accessor for AppModifierBodyAccessor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in AppModifierBodyAccessor.updateBody(of:changed:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 + 24) + 24))(a1, *(void *)(v1 + 16));
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result, char **a2, char a3, char ***a4, double a5, double a6)
{
  uint64_t v7 = result;
  uint64_t v8 = *(void *)(result + 16);
  if (v8)
  {
    uint64_t v9 = a4;
    unint64_t v13 = 0;
    char v14 = a3 & 1;
    uint64_t v15 = MEMORY[0x1E4FBC860];
    while (v13 < *(void *)(v7 + 16))
    {
      long long v20 = *(_OWORD *)(v7 + 16 * v13 + 32);
      long long v21 = v20;
      swift_unknownObjectRetain();
      char v16 = closure #2 in HostingScrollView.PlatformGroupContainer.addFillerItems(in:bounds:axis:metrics:)((char **)&v21, a2, v14, v9, a5, a6);
      if (v6)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        return v15;
      }
      if (v16)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v22 = v15;
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v15 + 16) + 1, 1);
          uint64_t v15 = v22;
        }
        unint64_t v18 = *(void *)(v15 + 16);
        unint64_t v17 = *(void *)(v15 + 24);
        if (v18 >= v17 >> 1)
        {
          uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1);
          uint64_t v15 = v22;
        }
        *(void *)(v15 + 16) = v18 + 1;
        *(_OWORD *)(v15 + 16 * v18 + 32) = v20;
        uint64_t v9 = a4;
      }
      else
      {
        uint64_t result = swift_unknownObjectRelease();
      }
      if (v8 == ++v13) {
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v15 = MEMORY[0x1E4FBC860];
LABEL_14:
    swift_bridgeObjectRelease();
    return v15;
  }
  return result;
}

uint64_t specialized MutableCollection<>.sort(by:)(char **a1, uint64_t (*a2)(void *))
{
  Swift::String v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::String v4 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
  }
  uint64_t v5 = *((void *)v4 + 2);
  v7[0] = v4 + 32;
  v7[1] = v5;
  uint64_t result = a2(v7);
  *a1 = v4;
  return result;
}

uint64_t specialized MutableCollection<>.sort(by:)(char **a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v4 + 64) = v5;
  *(unsigned char *)(v4 + 80) = *(unsigned char *)(a2 + 64);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 32) = v6;
  uint64_t v7 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v7 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v7);
  }
  uint64_t v8 = *((void *)v7 + 2);
  v10[0] = (uint64_t)(v7 + 32);
  v10[1] = v8;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v10, a2);
  *a1 = v7;
  return swift_release();
}

double *specialized MutableCollection<>.sort(by:)(void **a1, char a2)
{
  uint64_t v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
  }
  uint64_t v5 = v4[2];
  v7[0] = (uint64_t)(v4 + 4);
  v7[1] = v5;
  uint64_t result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7, a2 & 1);
  *a1 = v4;
  return result;
}

void FocusableFillerBounds.fillerFrames(in:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  ranges #1 (_:) in FocusableFillerBounds.fillerFrames(in:)(0, v4, a1, a2, a3, a4);
  uint64_t v10 = v9;
  ranges #1 (_:) in FocusableFillerBounds.fillerFrames(in:)(1, v4, a1, a2, a3, a4);
  uint64_t v26 = *(void *)(v10 + 16);
  if (v26)
  {
    unint64_t v12 = 0;
    uint64_t v13 = *(void *)(v11 + 16);
    uint64_t v14 = v10 + 32;
    uint64_t v25 = (double *)(v11 + 40);
    uint64_t v15 = (char *)MEMORY[0x1E4FBC860];
    while (v12 < *(void *)(v10 + 16))
    {
      if (v13)
      {
        double v16 = *(double *)(v14 + 16 * v12);
        double v17 = *(double *)(v14 + 16 * v12 + 8) - v16;
        swift_bridgeObjectRetain();
        unint64_t v18 = v25;
        uint64_t v19 = v13;
        do
        {
          double v20 = *(v18 - 1);
          double v21 = *v18;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v15 + 2) + 1, 1, v15);
          }
          unint64_t v23 = *((void *)v15 + 2);
          unint64_t v22 = *((void *)v15 + 3);
          if (v23 >= v22 >> 1) {
            uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v23 + 1, 1, v15);
          }
          *((void *)v15 + 2) = v23 + 1;
          uint64_t v24 = (double *)&v15[32 * v23];
          v24[4] = v16;
          v24[5] = v20;
          v24[6] = v17;
          v24[7] = v21 - v20;
          v18 += 2;
          --v19;
        }
        while (v19);
        swift_bridgeObjectRelease();
      }
      if (++v12 == v26) {
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void CGRect.range(in:)(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  if ((~*(void *)&a2 & 0x7FF0000000000000) != 0
    && (~*(void *)&a3 & 0x7FF0000000000000) != 0
    && (char v9 = a1, (~((uint64_t (__cdecl *)(CGRect))CGRectGetWidth)(*(CGRect *)&a2) & 0x7FF0000000000000) != 0)
    && (v12.origin.double x = a2,
        v12.origin.double y = a3,
        v12.size.CGFloat width = a4,
        v12.size.CGFloat height = a5,
        (~((uint64_t (__cdecl *)(CGRect))CGRectGetHeight)(v12) & 0x7FF0000000000000) != 0))
  {
    if (v9) {
      double v10 = a5;
    }
    else {
      double v10 = a4;
    }
    if (v9) {
      double v11 = a3;
    }
    else {
      double v11 = a2;
    }
    if (v10 <= 0.0) {
      double v10 = 0.0;
    }
    if (v11 > v11 + v10) {
      __break(1u);
    }
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    static Log.internalError(_:)();
  }
}

__n128 one-time initialization function for zero()
{
  static HostingScrollView.PlatformGroupContainer.Viewport.zero = 0u;
  *(_OWORD *)&qword_1E90FC4D0 = 0u;
  __n128 result = *(__n128 *)MEMORY[0x1E4FB2848];
  long long v1 = *(_OWORD *)(MEMORY[0x1E4FB2848] + 16);
  xmmword_1E90FC4E0 = *MEMORY[0x1E4FB2848];
  *(_OWORD *)&qword_1E90FC4F0 = v1;
  return result;
}

double HostingScrollView.PlatformGroupContainer.visibleBounds.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_scrollView;
  uint64_t v2 = (void *)MEMORY[0x18C119DF0](v0 + OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_scrollView);
  if (v2)
  {
    uint64_t v3 = v2;
    v10.receiver = v2;
    v10.super_class = (Class)type metadata accessor for HostingScrollView();
    objc_msgSendSuper2(&v10, sel_bounds);
    objc_msgSend(v3, sel_contentOffset);
    double v5 = v4;
    objc_msgSend(v3, sel_adjustedContentInset);
  }
  else
  {
    if (one-time initialization token for zero != -1) {
      swift_once();
    }
    double v5 = *(double *)&qword_1E90FC4D0;
  }
  uint64_t v6 = MEMORY[0x18C119DF0](v1);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    uint64_t v8 = (objc_class *)type metadata accessor for HostingScrollView();
    v11.receiver = v7;
    v11.super_class = v8;
    objc_msgSendSuper2(&v11, sel_bounds);
    objc_msgSend(v7, sel_contentOffset);
    objc_msgSend(v7, sel_adjustedContentInset);
  }
  else if (one-time initialization token for zero != -1)
  {
    swift_once();
  }
  return v5;
}

double HostingScrollView.PlatformGroupContainer.pageBounds.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_scrollView;
  uint64_t v2 = (void *)MEMORY[0x18C119DF0](v0 + OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_scrollView);
  if (v2)
  {
    uint64_t v3 = v2;
    v31.receiver = v2;
    v31.super_class = (Class)type metadata accessor for HostingScrollView();
    objc_msgSendSuper2(&v31, sel_bounds);
    objc_msgSend(v3, sel_contentOffset);
    double v30 = v4;
    objc_msgSend(v3, sel_adjustedContentInset, v5);
  }
  else
  {
    if (one-time initialization token for zero != -1) {
      swift_once();
    }
    double v30 = *(double *)&qword_1E90FC4D0;
  }
  uint64_t v6 = MEMORY[0x18C119DF0](v1);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    uint64_t v8 = (objc_class *)type metadata accessor for HostingScrollView();
    v32.receiver = v7;
    v32.super_class = v8;
    objc_msgSendSuper2(&v32, sel_bounds);
    objc_msgSend(v7, sel_contentOffset);
    objc_msgSend(v7, sel_adjustedContentInset);
    double v10 = v9;
  }
  else
  {
    if (one-time initialization token for zero != -1) {
      swift_once();
    }
    double v10 = *((double *)&xmmword_1E90FC4E0 + 1);
  }
  uint64_t v11 = MEMORY[0x18C119DF0](v1);
  if (v11)
  {
    CGRect v12 = (void *)v11;
    uint64_t v13 = (objc_class *)type metadata accessor for HostingScrollView();
    v33.receiver = v12;
    v33.super_class = v13;
    objc_msgSendSuper2(&v33, sel_bounds);
    objc_msgSend(v12, sel_contentOffset);
    objc_msgSend(v12, sel_adjustedContentInset);
  }
  else if (one-time initialization token for zero != -1)
  {
    swift_once();
  }
  uint64_t v14 = MEMORY[0x18C119DF0](v1);
  if (v14)
  {
    uint64_t v15 = (void *)v14;
    double v16 = (objc_class *)type metadata accessor for HostingScrollView();
    v34.receiver = v15;
    v34.super_class = v16;
    objc_msgSendSuper2(&v34, sel_bounds);
    objc_msgSend(v15, sel_contentOffset);
    objc_msgSend(v15, sel_adjustedContentInset);
  }
  else if (one-time initialization token for zero != -1)
  {
    swift_once();
  }
  uint64_t v17 = MEMORY[0x18C119DF0](v1);
  if (v17)
  {
    unint64_t v18 = (void *)v17;
    uint64_t v19 = (objc_class *)type metadata accessor for HostingScrollView();
    v35.receiver = v18;
    v35.super_class = v19;
    objc_msgSendSuper2(&v35, sel_bounds);
    objc_msgSend(v18, sel_contentOffset);
    objc_msgSend(v18, sel_adjustedContentInset);
  }
  else if (one-time initialization token for zero != -1)
  {
    swift_once();
  }
  uint64_t v20 = MEMORY[0x18C119DF0](v1);
  if (v20)
  {
    double v21 = (void *)v20;
    unint64_t v22 = (objc_class *)type metadata accessor for HostingScrollView();
    v36.receiver = v21;
    v36.super_class = v22;
    objc_msgSendSuper2(&v36, sel_bounds);
    objc_msgSend(v21, sel_contentOffset);
    objc_msgSend(v21, sel_adjustedContentInset);
  }
  else if (one-time initialization token for zero != -1)
  {
    swift_once();
  }
  uint64_t v23 = MEMORY[0x18C119DF0](v1);
  if (v23)
  {
    uint64_t v24 = (void *)v23;
    uint64_t v25 = (objc_class *)type metadata accessor for HostingScrollView();
    v37.receiver = v24;
    v37.super_class = v25;
    objc_msgSendSuper2(&v37, sel_bounds);
    objc_msgSend(v24, sel_contentOffset);
    objc_msgSend(v24, sel_adjustedContentInset);
  }
  else if (one-time initialization token for zero != -1)
  {
    swift_once();
  }
  uint64_t v26 = MEMORY[0x18C119DF0](v1);
  if (v26)
  {
    int v27 = (void *)v26;
    uint64_t v28 = (objc_class *)type metadata accessor for HostingScrollView();
    v38.receiver = v27;
    v38.super_class = v28;
    objc_msgSendSuper2(&v38, sel_bounds);
    objc_msgSend(v27, sel_contentOffset);
    objc_msgSend(v27, sel_adjustedContentInset);
  }
  else if (one-time initialization token for zero != -1)
  {
    swift_once();
  }
  return v30 + v10;
}

id HostingScrollView.PlatformGroupContainer.updateFocusScrollBoundaryMetrics(_:for:)(void *a1, id a2)
{
  id result = objc_msgSend(a2, sel_parentFocusEnvironment);
  if (result)
  {
    self;
    uint64_t v6 = swift_dynamicCastObjCClass();
    if (v6)
    {
      uint64_t v7 = (void *)v6;
      objc_msgSend(a2, sel_frame);
      id v8 = objc_msgSend(v7, sel_convertRect_toView_, v2);
      CGFloat v10 = v9;
      CGFloat v12 = v11;
      CGFloat v14 = v13;
      CGFloat v16 = v15;
      unsigned __int8 v37 = 1;
      char v36 = 1;
      unsigned __int8 v35 = 1;
      char v34 = 1;
      MEMORY[0x1F4188790](v8);
      static Update.ensure<A>(_:)();
      uint64_t v17 = (void *)MEMORY[0x18C119DF0](&v2[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_scrollView]);
      if (v17)
      {
        unint64_t v18 = v17;
        v33.receiver = v17;
        v33.super_class = (Class)type metadata accessor for HostingScrollView();
        objc_msgSendSuper2(&v33, sel_bounds);
        double v20 = v19;
        objc_msgSend(v18, sel_contentOffset);
        double v22 = v21;
        objc_msgSend(v18, sel_adjustedContentInset);
        double v24 = v23;
        double v26 = v25;
      }
      else
      {
        if (one-time initialization token for zero != -1) {
          swift_once();
        }
        double v20 = *((double *)&static HostingScrollView.PlatformGroupContainer.Viewport.zero + 1);
        double v22 = *(double *)&qword_1E90FC4D8;
        double v24 = *(double *)&xmmword_1E90FC4E0;
        double v26 = *(double *)&qword_1E90FC4F0;
      }
      double MaxY = v20 - (v24 + v26);
      if (v36)
      {
        if (v34)
        {
          BOOL v28 = 1;
          BOOL v29 = 1;
LABEL_23:
          objc_msgSend(a1, sel_setIsMinX_, v37, MaxY);
          objc_msgSend(a1, sel_setIsMinY_, v29);
          objc_msgSend(a1, sel_setIsMaxX_, v35);
          objc_msgSend(a1, sel_setIsMaxY_, v28);
          return (id)swift_unknownObjectRelease();
        }
        double v32 = v20 - (v24 + v26);
        BOOL v29 = 1;
LABEL_20:
        v42.origin.double x = v10;
        v42.origin.double y = v12;
        v42.size.CGFloat width = v14;
        v42.size.CGFloat height = v16;
        double MaxY = CGRectGetMaxY(v42);
        if (v20 + v22 - v26 <= MaxY)
        {
          v43.origin.double x = v10;
          v43.origin.double y = v12;
          v43.size.CGFloat width = v14;
          v43.size.CGFloat height = v16;
          double MinY = CGRectGetMinY(v43);
          objc_msgSend(v2, sel_bounds);
          double MaxY = CGRectGetMaxY(v44) - v32;
          BOOL v28 = MaxY <= MinY;
        }
        else
        {
          BOOL v28 = 0;
        }
        goto LABEL_23;
      }
      double v32 = v20 - (v24 + v26);
      v39.origin.double x = v10;
      v39.origin.double y = v12;
      v39.size.CGFloat width = v14;
      v39.size.CGFloat height = v16;
      double MaxY = CGRectGetMinY(v39);
      if (MaxY <= v22 + v24)
      {
        v40.origin.double x = v10;
        v40.origin.double y = v12;
        v40.size.CGFloat width = v14;
        v40.size.CGFloat height = v16;
        double v30 = CGRectGetMaxY(v40);
        objc_msgSend(v2, sel_bounds);
        double MaxY = v32 + CGRectGetMinY(v41);
        BOOL v29 = v30 <= MaxY;
        if ((v34 & 1) == 0) {
          goto LABEL_20;
        }
      }
      else
      {
        BOOL v29 = 0;
        if ((v34 & 1) == 0) {
          goto LABEL_20;
        }
      }
      BOOL v28 = 1;
      goto LABEL_23;
    }
    return (id)swift_unknownObjectRelease();
  }
  return result;
}

uint64_t closure #1 in HostingScrollView.PlatformGroupContainer.updateFocusScrollBoundaryMetrics(_:for:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, BOOL *a6, BOOL *a7, BOOL *a8, BOOL *a9)
{
  v58 = a6;
  uint64_t v17 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  double v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  type metadata accessor for _ContiguousArrayStorage<FocusableBounds>(0, &lazy cache variable for type metadata for FocusableBorder?, (uint64_t)&type metadata for FocusableBorder, MEMORY[0x1E4FBB718]);
  uint64_t result = AGGraphGetWeakValue();
  if (result && (*(unsigned char *)(result + 64) & 1) == 0)
  {
    double v50 = *(double *)(result + 56);
    double v53 = *(double *)(result + 48);
    double v46 = *(double *)(result + 40);
    double v48 = *(double *)(result + 32);
    CGFloat v52 = *(double *)(result + 24);
    CGFloat v22 = *(double *)(result + 8);
    CGFloat v51 = *(double *)(result + 16);
    CGFloat v23 = *(double *)result;
    swift_beginAccess();
    WeakValue = (double *)AGGraphGetWeakValue();
    v56 = a9;
    uint64_t v57 = v9;
    v54 = a7;
    v55 = a8;
    if (WeakValue) {
      double v25 = *WeakValue;
    }
    else {
      double v25 = 1.0;
    }
    v60.origin.double x = a1;
    v60.origin.double y = a2;
    v60.size.CGFloat width = a3;
    v60.size.CGFloat height = a4;
    CGFloat MinX = CGRectGetMinX(v60);
    uint64_t v27 = *MEMORY[0x1E4FBBEA8];
    BOOL v28 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 104);
    v28(v20, v27, v17);
    double v59 = MinX;
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v20, v25);
    double v49 = v59;
    BOOL v29 = *(void (**)(char *, uint64_t))(v18 + 8);
    v29(v20, v17);
    v61.origin.double x = a1;
    v61.origin.double y = a2;
    v61.size.CGFloat width = a3;
    v61.size.CGFloat height = a4;
    CGFloat MinY = CGRectGetMinY(v61);
    v28(v20, v27, v17);
    double v59 = MinY;
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v20, v25);
    double v47 = v59;
    v29(v20, v17);
    v62.origin.double x = a1;
    v62.origin.double y = a2;
    v62.size.CGFloat width = a3;
    v62.size.CGFloat height = a4;
    CGFloat MaxX = CGRectGetMaxX(v62);
    uint64_t v32 = *MEMORY[0x1E4FBBEB0];
    v28(v20, v32, v17);
    double v59 = MaxX;
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v20, v25);
    double v45 = v59;
    v29(v20, v17);
    v63.origin.double x = a1;
    v63.origin.double y = a2;
    v63.size.CGFloat width = a3;
    v63.size.CGFloat height = a4;
    CGFloat MaxY = CGRectGetMaxY(v63);
    v28(v20, v32, v17);
    double v59 = MaxY;
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v20, v25);
    double v44 = v59;
    v29(v20, v17);
    v64.origin.double x = v23;
    v64.origin.double y = v22;
    CGFloat v34 = v51;
    v64.size.CGFloat width = v51;
    CGFloat v35 = v52;
    v64.size.CGFloat height = v52;
    double v36 = v46 + CGRectGetMinX(v64);
    v28(v20, v27, v17);
    double v59 = v36;
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v20, v25);
    double v37 = v59;
    v29(v20, v17);
    v65.origin.double x = v23;
    v65.origin.double y = v22;
    v65.size.CGFloat width = v34;
    v65.size.CGFloat height = v35;
    double v38 = v48 + CGRectGetMinY(v65);
    v28(v20, v27, v17);
    double v59 = v38;
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v20, v25);
    double v39 = v59;
    v29(v20, v17);
    v66.origin.double x = v23;
    v66.origin.double y = v22;
    v66.size.CGFloat width = v34;
    v66.size.CGFloat height = v35;
    CGFloat v40 = CGRectGetMaxX(v66) - v50;
    v28(v20, v32, v17);
    double v59 = v40;
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v20, v25);
    double v41 = v59;
    v29(v20, v17);
    v67.origin.double x = v23;
    v67.origin.double y = v22;
    v67.size.CGFloat width = v34;
    v67.size.CGFloat height = v35;
    CGFloat v42 = CGRectGetMaxY(v67) - v53;
    v28(v20, v32, v17);
    double v59 = v42;
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v20, v25);
    double v43 = v59;
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v29)(v20, v17);
    BOOL *v58 = v45 <= v37;
    BOOL *v54 = v44 <= v39;
    BOOL *v55 = v41 <= v49;
    BOOL *v56 = v43 <= v47;
  }
  return result;
}

uint64_t HostingScrollView.PlatformGroupContainer.preferredFocusEnvironments.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_requestedFocusItem);
  if (!v1) {
    return MEMORY[0x1E4FBC860];
  }
  swift_getObjectType();
  uint64_t v2 = swift_conformsToProtocol2();
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v2) {
    uint64_t v4 = v1;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 56);
    swift_unknownObjectRetain_n();
    v6(ObjectType, v3);
    swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRetain();
  }
  type metadata accessor for _ContiguousArrayStorage<FocusableBounds>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_188351940;
  *(void *)(v8 + 32) = v1;
  uint64_t v9 = v8;
  specialized Array._endMutation()();
  return v9;
}

void closure #1 in HostingScrollView.PlatformGroupContainer.focusItems(in:)(void *a1@<X0>, void *a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  double v49 = a2;
  v48.receiver = a1;
  v48.super_class = (Class)type metadata accessor for HostingScrollView.PlatformGroupContainer();
  id v11 = objc_msgSendSuper2(&v48, sel_focusItemsInRect_, a3, a4, a5, a6);
  type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusItem);
  unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v47 = MEMORY[0x1E4FBC860];
  if (!(v12 >> 62))
  {
    uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v13) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v15 = MEMORY[0x1E4FBC860];
LABEL_15:
    *double v49 = v15;
    id v16 = a1;
    unint64_t v17 = MEMORY[0x1E4FBC860];
    id v46 = v16;
    while (1)
    {
      swift_getObjectType();
      uint64_t v18 = swift_conformsToProtocol2();
      uint64_t v19 = v18 ? v18 : 0;
      id v20 = v18 ? v16 : 0;
      if (v20) {
        break;
      }
      id v21 = objc_msgSend(v16, sel_parentFocusEnvironment);
      swift_unknownObjectRelease();
      id v16 = v21;
      if (!v21) {
        goto LABEL_59;
      }
    }
    uint64_t ObjectType = swift_getObjectType();
    CGFloat v23 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 48);
    id v24 = v46;
    if (v20 == v46)
    {
      uint64_t v40 = v23(ObjectType, v19);
      swift_unknownObjectRelease();
      if (!v40)
      {
        unint64_t v17 = MEMORY[0x1E4FBC860];
        goto LABEL_59;
      }
    }
    else
    {
      v23(ObjectType, v19);
      swift_release();
      swift_getObjectType();
      uint64_t v25 = swift_conformsToProtocol2();
      if (v25) {
        uint64_t v26 = v25;
      }
      else {
        uint64_t v26 = 0;
      }
      if (v25) {
        uint64_t v27 = v46;
      }
      else {
        uint64_t v27 = 0;
      }
      if (!v27)
      {
LABEL_36:
        id v32 = v24;
        do
        {
          swift_getObjectType();
          uint64_t v34 = swift_conformsToProtocol2();
          if (v34) {
            uint64_t v35 = v34;
          }
          else {
            uint64_t v35 = 0;
          }
          if (v34) {
            id v36 = v32;
          }
          else {
            id v36 = 0;
          }
          if (v36)
          {
            uint64_t v37 = swift_getObjectType();
            double v38 = *(uint64_t (**)(uint64_t, uint64_t))(v35 + 8);
            swift_unknownObjectRetain();
            uint64_t v39 = v38(v37, v35);
            if (v39)
            {
              uint64_t v40 = v39;
              uint64_t v41 = v39 + 16;
              swift_beginAccess();
              uint64_t v42 = MEMORY[0x18C119DF0](v41);
              if (v42)
              {
                uint64_t v43 = v42;
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                if ((id)v43 == v20)
                {
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  goto LABEL_57;
                }
              }
              else
              {
                swift_unknownObjectRelease();
              }
              swift_release();
            }
            else
            {
              swift_unknownObjectRelease();
            }
          }
          id v33 = objc_msgSend(v32, sel_parentFocusEnvironment);
          swift_unknownObjectRelease();
          id v32 = v33;
        }
        while (v33);
        swift_unknownObjectRelease();
        goto LABEL_53;
      }
      uint64_t v28 = swift_getObjectType();
      id v29 = v46;
      double v30 = UIFocusEnvironment.nearestRenderer()();
      if (!v30 || (id v31 = v30, swift_unknownObjectRelease(), v20 != v31))
      {

        id v24 = v46;
        goto LABEL_36;
      }
      uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 48))(v28, v26);

      swift_unknownObjectRelease();
      if (!v40)
      {
LABEL_53:
        unint64_t v17 = MEMORY[0x1E4FBC860];
LABEL_59:
        specialized Array.append<A>(contentsOf:)(v17);
        unint64_t v45 = HostingScrollView.PlatformGroupContainer.fillerFocusItems(in:)(a3, a4, a5, a6);
        specialized Array.append<A>(contentsOf:)(v45);
        return;
      }
LABEL_57:
      id v24 = v46;
    }
    id v44 = v24;
    unint64_t v17 = specialized static FocusBridge.focusItems(responderNode:rect:host:skipRoot:)(v40, v44, v20 != v24, a3, a4, a5, a6);
    swift_release();

    goto LABEL_59;
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v13) {
    goto LABEL_14;
  }
LABEL_3:
  if (v13 >= 1)
  {
    for (uint64_t i = 0; i != v13; ++i)
    {
      if ((v12 & 0xC000000000000001) != 0) {
        MEMORY[0x18C117680](i, v12);
      }
      else {
        swift_unknownObjectRetain();
      }
      self;
      if (swift_dynamicCastObjCClass())
      {
        swift_unknownObjectRelease();
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v15 = v47;
    goto LABEL_15;
  }
  __break(1u);
}

unint64_t HostingScrollView.PlatformGroupContainer.fillerFocusItems(in:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v9 - 8);
  id v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = HostingScrollView.PlatformGroupContainer.fillerAxis.getter();
  unint64_t v13 = MEMORY[0x1E4FBC860];
  if (v12 != 2)
  {
    char v14 = v12;
    v58 = v11;
    MEMORY[0x1F4188790](v12);
    CGRect v60 = v4;
    type metadata accessor for [FocusableBounds]?(0, (unint64_t *)&lazy cache variable for type metadata for [FocusableFillerBounds]?, (unint64_t *)&lazy cache variable for type metadata for [FocusableFillerBounds], (uint64_t)&type metadata for FocusableFillerBounds);
    static Update.ensure<A>(_:)();
    uint64_t v15 = v64;
    if (!v64) {
      uint64_t v15 = v13;
    }
    uint64_t v59 = v15;
    uint64_t v16 = *(void *)(v15 + 16);
    if (v16)
    {
      LODWORD(v61) = v14 & 1;
      uint64_t v17 = v59 + 72;
      do
      {
        CGFloat v23 = *(double *)(v17 - 40);
        CGFloat v22 = *(double *)(v17 - 32);
        double v25 = *(double *)(v17 - 24);
        double v24 = *(double *)(v17 - 16);
        uint64_t v26 = *(NSObject **)(v17 - 8);
        double v27 = *(double *)(v17 + 8);
        double v62 = *(double *)v17;
        os_log_t v63 = v26;
        double v28 = *(double *)(v17 + 16);
        char v29 = *(unsigned char *)(v17 + 24);
        id v31 = *(NSObject **)(v17 + 32);
        double v30 = *(double *)(v17 + 40);
        double v33 = *(double *)(v17 + 48);
        double v32 = *(double *)(v17 + 56);
        char v34 = *(unsigned char *)(v17 + 64);
        v66.origin.double x = a1;
        v66.origin.double y = a2;
        v66.size.CGFloat width = a3;
        v66.size.CGFloat height = a4;
        v68.origin.double x = v23;
        v68.origin.double y = v22;
        v68.size.CGFloat width = v25;
        v68.size.CGFloat height = v24;
        CGRect v67 = CGRectIntersection(v66, v68);
        if (!CGRectIsEmpty(v67))
        {
          if (v61) {
            char v35 = v34;
          }
          else {
            char v35 = v29;
          }
          if (v35)
          {
            if (v61) {
              char v36 = v29;
            }
            else {
              char v36 = v34;
            }
            if ((v36 & 1) == 0)
            {
              if (v61) {
                double v37 = v24;
              }
              else {
                double v37 = v25;
              }
              HostingScrollView.PlatformGroupContainer.addFillerItems(in:bounds:axis:metrics:)(v61, a1, a2, a3, a4, v23, v22, v25, v24, v37, 0.0, 0.0, 0.0);
            }
          }
          else
          {
            if (v61) {
              double v18 = v32;
            }
            else {
              double v18 = v28;
            }
            if (v61) {
              double v19 = v33;
            }
            else {
              double v19 = v27;
            }
            double v20 = v62;
            os_log_t v21 = v63;
            if (v61)
            {
              double v20 = v30;
              os_log_t v21 = v31;
            }
            HostingScrollView.PlatformGroupContainer.addFillerItems(in:bounds:axis:metrics:)(v61, a1, a2, a3, a4, v23, v22, v25, v24, *(double *)&v21, v20, v19, v18);
          }
        }
        v17 += 112;
        --v16;
      }
      while (v16);
    }
    swift_bridgeObjectRelease();
    double v38 = v60;
    HostingScrollView.PlatformGroupContainer.queryFillerItems(in:)(a1, a2, a3, a4);
    unint64_t v13 = v39;
    uint64_t v40 = (uint64_t)v58;
    static Log.focus.getter();
    uint64_t v41 = type metadata accessor for Logger();
    uint64_t v42 = *(void *)(v41 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41) == 1)
    {
      outlined destroy of Logger?(v40);
    }
    else
    {
      swift_bridgeObjectRetain_n();
      id v43 = v38;
      id v44 = Logger.logObject.getter();
      int v45 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v44, (os_log_type_t)v45))
      {
        LODWORD(v62) = v45;
        os_log_t v63 = v44;
        uint64_t v46 = swift_slowAlloc();
        uint64_t v61 = swift_slowAlloc();
        v65[0] = v61;
        *(_DWORD *)uint64_t v46 = 134218498;
        if (v13 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v47 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v47 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        uint64_t v64 = v47;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v46 + 12) = 2080;
        CGRect.loggable.getter();
        uint64_t v48 = LoggableRect.description.getter();
        uint64_t v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v46 + 22) = 2080;
        id v50 = v43;
        uint64_t v51 = specialized UIKitFocusItemDescription.init(_:)();
        unint64_t v53 = v52;

        uint64_t v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v53, v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        os_log_t v54 = v63;
        _os_log_impl(&dword_1872C6000, v63, LOBYTE(v62), "filler items queried: %ld in: %s for: %s", (uint8_t *)v46, 0x20u);
        uint64_t v55 = v61;
        swift_arrayDestroy();
        MEMORY[0x18C119C60](v55, -1, -1);
        MEMORY[0x18C119C60](v46, -1, -1);

        uint64_t v40 = (uint64_t)v58;
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v40, v41);
    }
  }
  return v13;
}

uint64_t HostingScrollView.PlatformGroupContainer.fillerAxis.getter()
{
  objc_msgSend(v0, sel_bounds);
  double Height = CGRectGetHeight(v4);
  v5.origin.double x = HostingScrollView.PlatformGroupContainer.pageBounds.getter();
  if (CGRectGetHeight(v5) < Height) {
    return 1;
  }
  objc_msgSend(v0, sel_bounds);
  double Width = CGRectGetWidth(v6);
  v7.origin.double x = HostingScrollView.PlatformGroupContainer.pageBounds.getter();
  return 2 * (CGRectGetWidth(v7) >= Width);
}

uint64_t HostingScrollView.PlatformGroupContainer.addFillerItems(in:bounds:axis:metrics:)(char a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, double a10, double a11, double a12, double a13)
{
  uint64_t v21 = v20;
  uint64_t v28 = a1 & 1;
  CGRect.range(in:)(v28, a6, a7, a8, a9);
  double v30 = v29;
  double v32 = v31;
  CGRect.range(in:)(v28 ^ 1, a6, a7, a8, a9);
  double v132 = v33;
  double v131 = v34;
  double v35 = HostingScrollView.PlatformGroupContainer.visibleBounds.getter();
  CGRect.range(in:)(v28, v35, v36, v37, v38);
  double v40 = v39;
  double v42 = v41;
  type metadata accessor for [FocusableBounds]?(0, &lazy cache variable for type metadata for [FocusableBounds]?, &lazy cache variable for type metadata for [FocusableBounds], (uint64_t)&type metadata for FocusableBounds);
  static Update.ensure<A>(_:)();
  id v43 = (void *)MEMORY[0x1E4FBC860];
  if (v139[0]) {
    id v44 = v139[0];
  }
  else {
    id v44 = (char *)MEMORY[0x1E4FBC860];
  }
  v142 = v44;
  CGRect.range(in:)(v28, a2, a3, a4, a5);
  double v135 = v30;
  if (v45 > v30) {
    double v30 = v45;
  }
  double v130 = v32;
  if (v32 >= v46) {
    double v32 = v46;
  }
  if (v30 >= v32) {
    return swift_bridgeObjectRelease();
  }
  if (v30 > v32) {
    goto LABEL_177;
  }
  v141[0] = v43;
  uint64_t v47 = OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_fillerItems;
  uint64_t v48 = swift_bridgeObjectRetain();
  unint64_t v49 = (void *)specialized _ArrayProtocol.filter(_:)(v48, &v142, v28, (char ***)v141, v30, v32);
  specialized MutableCollection<>.sort(by:)(v141, v28);
  v140 = v43;
  id v50 = v142;
  uint64_t v51 = *((void *)v142 + 2);
  if (v51)
  {
    uint64_t v129 = v47;
    uint64_t isUniquelyReferenced_nonNull_native = swift_bridgeObjectRetain();
    unint64_t v53 = (CGRect *)(v50 + 64);
    while (1)
    {
      double x = v53[-1].origin.x;
      double y = v53[-1].origin.y;
      double width = v53[-1].size.width;
      double height = v53[-1].size.height;
      char x_low = LOBYTE(v53->origin.x);
      BOOL v60 = (~*(void *)&x & 0x7FF0000000000000) == 0 || (~*(void *)&v53[-1].origin.y & 0x7FF0000000000000) == 0;
      if (!v60
        && (double v66 = CGRectGetWidth(v53[-1]),
            (~*(void *)&v66 & 0x7FF0000000000000) != 0
         && (v143.origin.double x = x,
             v143.origin.double y = y,
             v143.size.double width = width,
             v143.size.double height = height,
             (~((uint64_t (__cdecl *)(CGRect))CGRectGetHeight)(v143) & 0x7FF0000000000000) != 0)))
      {
        if (v28) {
          double v67 = height;
        }
        else {
          double v67 = width;
        }
        if (v28) {
          double x = y;
        }
        if (v67 <= 0.0) {
          double v67 = 0.0;
        }
        double v61 = x + v67;
        if (x > x + v67) {
          goto LABEL_176;
        }
      }
      else
      {
        MEMORY[0x1F4188790](isUniquelyReferenced_nonNull_native);
        uint64_t isUniquelyReferenced_nonNull_native = static Log.internalError(_:)();
        double x = 0.0;
        double v61 = 0.0;
      }
      double v62 = x > v40 ? x : v40;
      double v63 = v42 >= v61 ? v61 : v42;
      if (v62 < v63) {
        break;
      }
      if ((x_low & 1) == 0) {
        goto LABEL_30;
      }
LABEL_13:
      unint64_t v53 = (CGRect *)((char *)v53 + 40);
      if (!--v51)
      {
        swift_bridgeObjectRelease();
        goto LABEL_46;
      }
    }
    if (v62 > v63)
    {
LABEL_174:
      __break(1u);
LABEL_175:
      __break(1u);
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
LABEL_180:
      _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      swift_release();
      __break(1u);
      uint64_t result = swift_release();
      __break(1u);
      return result;
    }
LABEL_30:
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43[2] + 1, 1, (char *)v43);
      id v43 = (void *)isUniquelyReferenced_nonNull_native;
    }
    unint64_t v65 = v43[2];
    unint64_t v64 = v43[3];
    if (v65 >= v64 >> 1)
    {
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v64 > 1), v65 + 1, 1, (char *)v43);
      id v43 = (void *)isUniquelyReferenced_nonNull_native;
    }
    v43[2] = v65 + 1;
    os_log_t v54 = (double *)&v43[2 * v65];
    v54[4] = x;
    v54[5] = v61;
    goto LABEL_13;
  }
LABEL_46:
  uint64_t v68 = v43[2];
  if (v68)
  {
    swift_bridgeObjectRetain();
    uint64_t v69 = 0;
    v70 = (char *)MEMORY[0x1E4FBC860];
    do
    {
      v71 = &v43[2 * v69];
      long long v72 = *((_OWORD *)v71 + 2);
      if (*(double *)&v72 > v30) {
        double v73 = *((double *)v71 + 4);
      }
      else {
        double v73 = v30;
      }
      double v74 = *((double *)v71 + 5);
      if (v32 < *((double *)&v72 + 1)) {
        double v74 = v32;
      }
      if (v73 < v74)
      {
        if (v73 > v74) {
          goto LABEL_175;
        }
        long long v138 = *((_OWORD *)v71 + 2);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v70 + 2) + 1, 1, v70);
        }
        unint64_t v76 = *((void *)v70 + 2);
        unint64_t v75 = *((void *)v70 + 3);
        long long v77 = v138;
        if (v76 >= v75 >> 1)
        {
          v78 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v75 > 1), v76 + 1, 1, v70);
          long long v77 = v138;
          v70 = v78;
        }
        *((void *)v70 + 2) = v76 + 1;
        *(_OWORD *)&v70[16 * v76 + 32] = v77;
      }
      ++v69;
    }
    while (v68 != v69);
    swift_bridgeObjectRelease();
  }
  else
  {
    v70 = (char *)MEMORY[0x1E4FBC860];
  }
  double v134 = a10 * 0.25;
  swift_bridgeObjectRelease();
  if (v30 < v40)
  {
    v139[0] = v70;
    swift_bridgeObjectRetain();
    specialized MutableCollection<>.sort(by:)(v139, specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
    v79 = v139[0];
    if (v40 >= v32) {
      double v80 = v32;
    }
    else {
      double v80 = v40;
    }
    if (v30 > v80) {
      goto LABEL_178;
    }
    double v81 = floor((v30 - v135 - a12 - a10) / (a10 + a11) + 1.0);
    if (v81 <= 0.0) {
      double v81 = 0.0;
    }
    double v82 = v135 + a12 + (a10 + a11) * v81;
    if (v82 < v80)
    {
      uint64_t v129 = v47;
      double v133 = v80;
      while (1)
      {
        int64_t v85 = *((void *)v79 + 2);
        if (!v85) {
          break;
        }
        while (*((double *)v79 + 5) <= v82)
        {
          v86 = (char *)swift_isUniquelyReferenced_nonNull_native();
          if (!v86 || (unint64_t)(v85 - 1) > *((void *)v79 + 3) >> 1) {
            v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v86, v85, 1, v79);
          }
          uint64_t v87 = *((void *)v79 + 2);
          if (!v87) {
            goto LABEL_180;
          }
          memmove(v79 + 32, v79 + 48, 16 * v87 - 16);
          int64_t v85 = v87 - 1;
          *((void *)v79 + 2) = v85;
          if (!v85) {
            goto LABEL_81;
          }
        }
        double v88 = *((double *)v79 + 4) - a11 - v82;
        if (v80 - v82 < v88) {
          double v88 = v80 - v82;
        }
        if (v134 <= v88)
        {
          if (v88 > a10) {
            double v88 = a10;
          }
          goto LABEL_87;
        }
LABEL_73:
        double v82 = a10 + a11 + v82;
        if (v82 >= v80) {
          goto LABEL_156;
        }
      }
LABEL_81:
      double v88 = a10;
LABEL_87:
      if (v28) {
        double v89 = v131 - v132;
      }
      else {
        double v89 = v88;
      }
      if (v28) {
        double v90 = v88;
      }
      else {
        double v90 = v131 - v132;
      }
      if (v28) {
        double v91 = 0.0;
      }
      else {
        double v91 = v82;
      }
      if (v28) {
        double v92 = v82;
      }
      else {
        double v92 = 0.0;
      }
      if (v141[0][2])
      {
        v93 = (char *)v141[0][4];
        swift_unknownObjectRetain();
        specialized Array.replaceSubrange<A>(_:with:)(0, 1);
      }
      else
      {
        v93 = (char *)specialized closure #4 in HostingScrollView.PlatformGroupContainer.addFillerItems(in:bounds:axis:metrics:)(v21, v28, &v140);
      }
      swift_unknownObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49[2] + 1, 1, v49);
      }
      unint64_t v95 = v49[2];
      unint64_t v94 = v49[3];
      if (v95 >= v94 >> 1) {
        unint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v94 > 1), v95 + 1, 1, v49);
      }
      v49[2] = v95 + 1;
      v83 = &v49[2 * v95];
      v83[4] = v93;
      v83[5] = &protocol witness table for UIKitFocusableFillerItem;
      v84 = (double *)&v93[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame];
      double *v84 = v91;
      v84[1] = v92;
      v84[2] = v89;
      v84[3] = v90;
      swift_unknownObjectRelease();
      double v80 = v133;
      goto LABEL_73;
    }
    swift_release();
  }
  if (v42 >= v32) {
    goto LABEL_159;
  }
  do
  {
    v139[0] = v70;
    swift_bridgeObjectRetain();
    specialized MutableCollection<>.sort(by:)(v139, specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
    swift_bridgeObjectRelease();
    if (v30 > v42) {
      double v42 = v30;
    }
    if (v42 > v32) {
      goto LABEL_179;
    }
    v96 = v139[0];
    double v97 = v130 - a13 - v32 - a10;
    double v32 = a10 + a11;
    double v98 = floor(v97 / (a10 + a11) + 1.0);
    if (v98 <= 0.0) {
      double v98 = 0.0;
    }
    double v99 = v130 - a13 - v32 * v98;
    if (v42 >= v99)
    {
      swift_release();
      goto LABEL_160;
    }
    while (1)
    {
      uint64_t v102 = *((void *)v96 + 2);
      if (v102)
      {
        v103 = &v96[16 * v102];
        if (v99 <= *((double *)v103 + 2))
        {
          while (1)
          {
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              uint64_t v105 = *((void *)v96 + 2);
              if (!v105) {
                goto LABEL_173;
              }
            }
            else
            {
              v96 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v96);
              uint64_t v105 = *((void *)v96 + 2);
              if (!v105)
              {
LABEL_173:
                __break(1u);
                goto LABEL_174;
              }
            }
            *((void *)v96 + 2) = v105 - 1;
            if (v105 == 1) {
              goto LABEL_127;
            }
            uint64_t v106 = v105 - 2;
            if (v99 > *(double *)&v96[16 * v106 + 32])
            {
              v104 = (double *)&v96[16 * v106 + 40];
              goto LABEL_128;
            }
          }
        }
        v104 = (double *)(v103 + 24);
LABEL_128:
        double v107 = v99 - *v104 - a11;
        if (v99 - v42 < v107) {
          double v107 = v99 - v42;
        }
        if (v134 > v107) {
          goto LABEL_116;
        }
        if (v107 > a10) {
          double v107 = a10;
        }
      }
      else
      {
LABEL_127:
        double v107 = a10;
      }
      if (v28) {
        double v108 = v131 - v132;
      }
      else {
        double v108 = v107;
      }
      if (v28) {
        double v109 = v107;
      }
      else {
        double v109 = v131 - v132;
      }
      if (v28) {
        double v30 = 0.0;
      }
      else {
        double v30 = v99 - v107;
      }
      if (v28) {
        double v110 = v99 - v107;
      }
      else {
        double v110 = 0.0;
      }
      v70 = (char *)v141[0];
      if (!v141[0][2])
      {
        v113 = (char *)specialized closure #4 in HostingScrollView.PlatformGroupContainer.addFillerItems(in:bounds:axis:metrics:)(v21, v28, &v140);
        goto LABEL_150;
      }
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v111 = *((void *)v70 + 2);
        if (!v111) {
          break;
        }
        goto LABEL_148;
      }
      v70 = (char *)specialized _ArrayBuffer._consumeAndCreateNew()(v70);
      uint64_t v111 = *((void *)v70 + 2);
      if (!v111) {
        break;
      }
LABEL_148:
      uint64_t v112 = v111 - 1;
      v113 = *(char **)&v70[16 * v112 + 32];
      *((void *)v70 + 2) = v112;
      v141[0] = v70;
LABEL_150:
      swift_unknownObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49[2] + 1, 1, v49);
      }
      unint64_t v115 = v49[2];
      unint64_t v114 = v49[3];
      if (v115 >= v114 >> 1) {
        unint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v114 > 1), v115 + 1, 1, v49);
      }
      v49[2] = v115 + 1;
      v100 = &v49[2 * v115];
      v100[4] = v113;
      v100[5] = &protocol witness table for UIKitFocusableFillerItem;
      v101 = (double *)&v113[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame];
      double *v101 = v30;
      v101[1] = v110;
      v101[2] = v108;
      v101[3] = v109;
      swift_unknownObjectRelease();
LABEL_116:
      double v99 = v99 - v32;
      if (v42 >= v99) {
        goto LABEL_159;
      }
    }
    __break(1u);
LABEL_156:
    swift_bridgeObjectRelease();
    uint64_t v47 = v129;
  }
  while (v42 < v32);
LABEL_159:
  swift_bridgeObjectRelease();
LABEL_160:
  v116 = v141[0];
  uint64_t v117 = v141[0][2];
  if (v117)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusSystem);
    swift_bridgeObjectRetain();
    uint64_t v118 = 4;
    do
    {
      uint64_t v119 = v116[v118];
      swift_unknownObjectRetain();
      v120 = (void *)static UIFocusSystem.focusSystem(for:)();
      if (v120)
      {
        v121 = v120;
        objc_msgSend(v120, sel__focusEnvironmentWillDisappear_, v119);
      }
      swift_unknownObjectRelease();
      v118 += 2;
      --v117;
    }
    while (v117);
    swift_bridgeObjectRelease();
  }
  *(void *)(v21 + v47) = v49;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v122 = v140;
  uint64_t v123 = v140[2];
  if (v123)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusSystem);
    v124 = v122 + 4;
    do
    {
      uint64_t v125 = *v124;
      swift_unknownObjectRetain();
      v126 = (void *)static UIFocusSystem.focusSystem(for:)();
      if (v126)
      {
        v127 = v126;
        objc_msgSend(v126, sel__focusEnvironmentDidAppear_, v125);
      }
      swift_unknownObjectRelease();
      v124 += 2;
      --v123;
    }
    while (v123);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void HostingScrollView.PlatformGroupContainer.queryFillerItems(in:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  uint64_t v9 = *(void *)(v4 + OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_fillerItems);
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = 0;
    uint64_t v12 = MEMORY[0x1E4FBC860];
    do
    {
      long long v55 = *(_OWORD *)(v9 + 16 * v11 + 32);
      CGFloat v13 = *(double *)(v55
                      + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame);
      CGFloat v14 = *(double *)(v55
                      + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame
                      + 8);
      CGFloat v15 = *(double *)(v55
                      + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame
                      + 16);
      CGFloat v16 = *(double *)(v55
                      + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame
                      + 24);
      swift_unknownObjectRetain();
      v56.origin.double x = v13;
      v56.origin.double y = v14;
      v56.size.double width = v15;
      v56.size.double height = v16;
      v63.origin.double x = a1;
      v63.origin.double y = a2;
      v63.size.double width = a3;
      v63.size.double height = a4;
      CGRect v57 = CGRectIntersection(v56, v63);
      if (CGRectIsEmpty(v57))
      {
        swift_unknownObjectRelease();
      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v12 + 16) + 1, 1);
        }
        unint64_t v18 = *(void *)(v12 + 16);
        unint64_t v17 = *(void *)(v12 + 24);
        if (v18 >= v17 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1);
        }
        *(void *)(v12 + 16) = v18 + 1;
        *(_OWORD *)(v12 + 16 * v18 + 32) = v55;
      }
      ++v11;
    }
    while (v10 != v11);
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void *)(v12 + 16);
    if (!v19) {
      goto LABEL_64;
    }
  }
  else
  {
    uint64_t v12 = MEMORY[0x1E4FBC860];
    uint64_t v19 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    if (!v19) {
      goto LABEL_64;
    }
  }
  swift_retain();
  uint64_t v20 = 32;
  double v53 = a3;
  double v54 = a4;
  double v51 = a1;
  double v52 = a2;
  while (1)
  {
    uint64_t v21 = *(void *)(v12 + v20);
    int v22 = *(unsigned __int8 *)(v21
                             + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_axis);
    CGFloat v23 = (CGRect *)(v21
                   + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame);
    CGFloat v24 = *(double *)(v21
                    + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame);
    CGFloat v25 = *(double *)(v21
                    + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame
                    + 8);
    CGFloat v26 = *(double *)(v21
                    + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame
                    + 16);
    CGFloat v27 = *(double *)(v21
                    + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame
                    + 24);
    swift_unknownObjectRetain();
    v58.origin.double x = a1;
    v58.origin.double y = a2;
    v58.size.double width = a3;
    v58.size.double height = a4;
    v64.origin.double x = v24;
    v64.origin.double y = v25;
    v64.size.double width = v26;
    v64.size.double height = v27;
    CGRect v59 = CGRectIntersection(v58, v64);
    double x = v59.origin.x;
    double y = v59.origin.y;
    double width = v59.size.width;
    double height = v59.size.height;
    double v33 = v23->origin.x;
    double v34 = v23->origin.y;
    double v35 = v23->size.width;
    double v36 = v23->size.height;
    BOOL v37 = (~*(void *)&v23->origin.x & 0x7FF0000000000000) == 0
       || (~*(void *)&v23->origin.y & 0x7FF0000000000000) == 0;
    if (!v37
      && (double v47 = CGRectGetWidth(*v23),
          (~*(void *)&v47 & 0x7FF0000000000000) != 0
       && (v60.origin.double x = v33,
           v60.origin.double y = v34,
           v60.size.double width = v35,
           v60.size.double height = v36,
           (~((uint64_t (__cdecl *)(CGRect))CGRectGetHeight)(v60) & 0x7FF0000000000000) != 0)))
    {
      if (v22) {
        double v48 = v36;
      }
      else {
        double v48 = v35;
      }
      if (v22) {
        double v33 = v34;
      }
      if (v48 <= 0.0) {
        double v48 = 0.0;
      }
      double v38 = v33 + v48;
      if (v33 > v33 + v48)
      {
        __break(1u);
        return;
      }
    }
    else
    {
      MEMORY[0x1F4188790](v28);
      uint64_t v28 = static Log.internalError(_:)();
      double v33 = 0.0;
      double v38 = 0.0;
    }
    if ((~*(void *)&x & 0x7FF0000000000000) != 0 && (~*(void *)&y & 0x7FF0000000000000) != 0)
    {
      v61.origin.double x = x;
      v61.origin.double y = y;
      v61.size.double width = width;
      v61.size.double height = height;
      double v49 = CGRectGetWidth(v61);
      if ((~*(void *)&v49 & 0x7FF0000000000000) != 0)
      {
        v62.origin.double x = x;
        v62.origin.double y = y;
        v62.size.double width = width;
        v62.size.double height = height;
        if ((~((uint64_t (__cdecl *)(CGRect))CGRectGetHeight)(v62) & 0x7FF0000000000000) != 0) {
          break;
        }
      }
    }
    MEMORY[0x1F4188790](v28);
    static Log.internalError(_:)();
    double v40 = 0.0;
    double v41 = 0.0;
LABEL_27:
    double v42 = v41 - v40;
    if (v22) {
      double v43 = v42;
    }
    else {
      double v43 = v38 - v33;
    }
    if (v22) {
      double v44 = v40;
    }
    else {
      double v44 = v33;
    }
    if (v22) {
      double v40 = v33;
    }
    uint64_t v45 = v21 + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_focusableFrame;
    *(double *)uint64_t v45 = v44;
    *(double *)(v45 + 8) = v40;
    if (v22) {
      double v46 = v38 - v33;
    }
    else {
      double v46 = v42;
    }
    *(double *)(v45 + 16) = v43;
    *(double *)(v45 + 24) = v46;
    *(unsigned char *)(v45 + 32) = 0;
    swift_unknownObjectRelease();
    v20 += 16;
    --v19;
    a3 = v53;
    a4 = v54;
    a1 = v51;
    a2 = v52;
    if (!v19) {
      goto LABEL_63;
    }
  }
  if (v22) {
    double v50 = width;
  }
  else {
    double v50 = height;
  }
  if (v22) {
    double v40 = x;
  }
  else {
    double v40 = y;
  }
  if (v50 <= 0.0) {
    double v50 = 0.0;
  }
  double v41 = v40 + v50;
  if (v40 <= v41) {
    goto LABEL_27;
  }
  __break(1u);
LABEL_63:
  swift_release();
LABEL_64:
  specialized _arrayForceCast<A, B>(_:)(v12);
  swift_release();
}

void HostingScrollView.PlatformGroupContainer.SubstitutionStrategy.searchRect.getter()
{
  double v2 = *(double *)(v0 + 8);
  double v1 = *(double *)(v0 + 16);
  if ((*(unsigned char *)(v0 + 64) & 1) == 0) {
    goto LABEL_6;
  }
  if (v1 <= *(double *)(v0 + 32)) {
    double v1 = *(double *)(v0 + 32);
  }
  if (v2 > v1)
  {
    __break(1u);
LABEL_6:
    if (*(double *)(v0 + 24) < v2) {
      double v2 = *(double *)(v0 + 24);
    }
    if (v2 > v1) {
      __break(1u);
    }
  }
}

uint64_t closure #1 in HostingScrollView.PlatformGroupContainer.pruneFillerItems()(uint64_t *a1, id a2, void **a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  uint64_t v12 = *a1;
  uint64_t v13 = *a1 + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame;
  CGFloat v14 = *(double *)v13;
  CGFloat v15 = *(double *)(v13 + 8);
  CGFloat v16 = *(double *)(v13 + 16);
  CGFloat v17 = *(double *)(v13 + 24);
  objc_msgSend(a2, sel_bounds);
  v28.origin.double x = v14;
  v28.origin.double y = v15;
  v28.size.double width = v16;
  v28.size.double height = v17;
  CGRect v25 = CGRectIntersection(v24, v28);
  v29.origin.double x = v14;
  v29.origin.double y = v15;
  v29.size.double width = v16;
  v29.size.double height = v17;
  if (CGRectEqualToRect(v25, v29))
  {
    v26.origin.double x = a4;
    v26.origin.double y = a5;
    v26.size.double width = a6;
    v26.size.double height = a7;
    v30.origin.double x = v14;
    v30.origin.double y = v15;
    v30.size.double width = v16;
    v30.size.double height = v17;
    CGRect v27 = CGRectIntersection(v26, v30);
    if (CGRectIsEmpty(v27)) {
      return 1;
    }
  }
  uint64_t v19 = *a3;
  swift_unknownObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v19;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
    *a3 = v19;
  }
  unint64_t v22 = v19[2];
  unint64_t v21 = v19[3];
  if (v22 >= v21 >> 1)
  {
    uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v19);
    *a3 = v19;
  }
  v19[2] = v22 + 1;
  CGFloat v23 = &v19[2 * v22];
  v23[4] = v12;
  uint64_t result = 0;
  v23[5] = &protocol witness table for UIKitFocusableFillerItem;
  return result;
}

uint64_t HostingScrollView.PlatformGroupContainer.querySubstitute(for:)(unsigned __int8 *a1)
{
  uint64_t v2 = a1[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_axis];
  objc_msgSend(a1, sel_frame);
  CGRect.range(in:)(v2 ^ 1, v3, v4, v5, v6);
  double v34 = (v7 + v8) * 0.5;
  CGRect.range(in:)(v2, *(CGFloat *)&a1[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame], *(CGFloat *)&a1[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame+ 8], *(CGFloat *)&a1[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame+ 16], *(CGFloat *)&a1[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame+ 24]);
  double v10 = v9;
  double v12 = v11;
  double v13 = HostingScrollView.PlatformGroupContainer.visibleBounds.getter();
  CGRect.range(in:)(v2, v13, v14, v15, v16);
  double v18 = v17;
  double v20 = v19;
  double v21 = HostingScrollView.PlatformGroupContainer.visibleBounds.getter();
  CGRect.range(in:)(v2 ^ 1, v21, v22, v23, v24);
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  double v29 = (v10 + v12) * 0.5;
  double v30 = (v18 + v20) * 0.5;
  v44[0] = v2;
  double v45 = v10;
  double v46 = v12;
  double v47 = v18;
  double v48 = v20;
  uint64_t v49 = v25;
  uint64_t v50 = v27;
  double v51 = v34;
  BOOL v52 = v29 >= v30;
  uint64_t result = HostingScrollView.PlatformGroupContainer.queryDeepestFocusableItem(strategy:)(v44);
  if (!result)
  {
    if (v10 > v18) {
      double v32 = v10;
    }
    else {
      double v32 = v18;
    }
    if (v20 >= v12) {
      double v33 = v12;
    }
    else {
      double v33 = v20;
    }
    if (v32 >= v33) {
      return 0;
    }
    if (v32 > v33)
    {
      __break(1u);
    }
    else
    {
      if ((v12 - v10) * 0.5 > v33 - v32) {
        return 0;
      }
      v35[0] = v2;
      double v36 = v10;
      double v37 = v12;
      double v38 = v18;
      double v39 = v20;
      uint64_t v40 = v26;
      uint64_t v41 = v28;
      double v42 = v34;
      BOOL v43 = v29 < v30;
      return HostingScrollView.PlatformGroupContainer.queryDeepestFocusableItem(strategy:)(v35);
    }
  }
  return result;
}

uint64_t HostingScrollView.PlatformGroupContainer.queryDeepestFocusableItem(strategy:)(unsigned __int8 *a1)
{
  HostingScrollView.PlatformGroupContainer.SubstitutionStrategy.searchRect.getter();
  double v3 = v2;
  double v5 = v4;
  double v7 = v6;
  double v9 = v8;
  id v10 = v1;
  double v11 = &selRef_setObscuresBackgroundDuringPresentation_;
  unint64_t v12 = MEMORY[0x1E4FBC860];
  double v13 = v10;
  while (1)
  {
    swift_getObjectType();
    uint64_t v14 = swift_conformsToProtocol2();
    uint64_t v15 = v14 ? v14 : 0;
    id v16 = v14 ? v13 : 0;
    if (v16) {
      break;
    }
    id v17 = objc_msgSend(v13, sel_parentFocusEnvironment);
    swift_unknownObjectRelease();
    double v13 = v17;
    if (!v17) {
      goto LABEL_43;
    }
  }
  uint64_t ObjectType = swift_getObjectType();
  double v19 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 48);
  if (v16 == v10)
  {
    uint64_t v35 = v19(ObjectType, v15);
  }
  else
  {
    v19(ObjectType, v15);
    swift_release();
    swift_getObjectType();
    uint64_t v20 = swift_conformsToProtocol2();
    if (v20) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = 0;
    }
    if (v20) {
      id v22 = v10;
    }
    else {
      id v22 = 0;
    }
    if (!v22)
    {
LABEL_22:
      id v27 = v10;
      do
      {
        swift_getObjectType();
        uint64_t v29 = swift_conformsToProtocol2();
        if (v29) {
          uint64_t v30 = v29;
        }
        else {
          uint64_t v30 = 0;
        }
        if (v29) {
          id v31 = v27;
        }
        else {
          id v31 = 0;
        }
        if (v31)
        {
          uint64_t v32 = swift_getObjectType();
          double v33 = *(uint64_t (**)(uint64_t, uint64_t))(v30 + 8);
          swift_unknownObjectRetain();
          uint64_t v34 = v33(v32, v30);
          if (v34)
          {
            uint64_t v35 = v34;
            uint64_t v36 = v34 + 16;
            swift_beginAccess();
            uint64_t v37 = MEMORY[0x18C119DF0](v36);
            double v11 = &selRef_setObscuresBackgroundDuringPresentation_;
            if (v37)
            {
              uint64_t v38 = v37;
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              if ((id)v38 == v16)
              {
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                goto LABEL_42;
              }
            }
            else
            {
              swift_unknownObjectRelease();
            }
            swift_release();
          }
          else
          {
            swift_unknownObjectRelease();
            double v11 = &selRef_setObscuresBackgroundDuringPresentation_;
          }
        }
        id v28 = objc_msgSend(v27, sel_parentFocusEnvironment);
        swift_unknownObjectRelease();
        id v27 = v28;
      }
      while (v28);
      swift_unknownObjectRelease();
      goto LABEL_41;
    }
    uint64_t v23 = swift_getObjectType();
    id v24 = v10;
    uint64_t v25 = UIFocusEnvironment.nearestRenderer()();
    if (!v25 || (id v26 = v25, swift_unknownObjectRelease(), v16 != v26))
    {

      goto LABEL_22;
    }
    uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 48))(v23, v21);
  }
  swift_unknownObjectRelease();
  if (!v35)
  {
LABEL_41:
    unint64_t v12 = MEMORY[0x1E4FBC860];
    goto LABEL_43;
  }
LABEL_42:
  id v39 = v10;
  unint64_t v12 = specialized static FocusBridge.focusItems(responderNode:rect:host:skipRoot:)(v35, v39, v16 != v10, v3, v5, v7, v9);
  swift_release();

LABEL_43:
  unint64_t v93 = v12;
  if (v12 >> 62)
  {
LABEL_109:
    swift_bridgeObjectRetain();
    uint64_t v85 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v85) {
      goto LABEL_45;
    }
LABEL_110:
    uint64_t v40 = (char *)MEMORY[0x1E4FBC860];
LABEL_111:
    double v92 = v40;
    swift_bridgeObjectRetain_n();
    specialized MutableCollection<>.sort(by:)(&v92, (uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    if (*((void *)v92 + 2))
    {
      uint64_t v86 = *((void *)v92 + 4);
      swift_unknownObjectRetain();
    }
    else
    {
      uint64_t v86 = 0;
    }
    swift_release();
    return v86;
  }
  if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_110;
  }
LABEL_45:
  uint64_t v40 = (char *)MEMORY[0x1E4FBC860];
  int v88 = *a1;
  double v90 = v5;
  double v91 = v3;
  while (1)
  {
    unint64_t v41 = v12 >> 62;
    if (v12 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v44) {
        goto LABEL_116;
      }
      swift_bridgeObjectRetain();
      uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v45)
      {
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
        goto LABEL_109;
      }
    }
    else if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_106;
    }
    if ((v12 & 0xC000000000000001) != 0)
    {
      double v42 = (void *)MEMORY[0x18C117680](0, v12);
      if (!v41) {
        goto LABEL_51;
      }
    }
    else
    {
      if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_107;
      }
      double v42 = *(void **)(v12 + 32);
      swift_unknownObjectRetain();
      if (!v41)
      {
LABEL_51:
        uint64_t v43 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_57;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
LABEL_57:
    if (!v43) {
      goto LABEL_108;
    }
    specialized Array.replaceSubrange<A>(_:with:)(0, 1);
    id v46 = v10;
    if (!objc_msgSend((id)swift_unknownObjectRetain(), sel_canBecomeFocused)
      || (id v47 = [v42 v11[117]]) == 0
      || (id v48 = objc_msgSend(v47, sel_focusItemContainer),
          swift_unknownObjectRelease(),
          !v48))
    {
      swift_unknownObjectRelease();

      id v66 = objc_msgSend(v42, sel_focusItemContainer);
      if (v66)
      {
        double v67 = v66;
        objc_msgSend(objc_msgSend(v66, sel_coordinateSpace), sel_convertRect_fromCoordinateSpace_, objc_msgSend(v46, sel_coordinateSpace), v3, v5, v7, v9);
        double v69 = v68;
        double v71 = v70;
        double v73 = v72;
        double v75 = v74;
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v76 = objc_msgSend(v67, sel_focusItemsInRect_, v69, v71, v73, v75);
        type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusItem);
        unint64_t v77 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        specialized Array.append<A>(contentsOf:)(v77);
        swift_unknownObjectRelease();
      }
      swift_unknownObjectRelease();
      goto LABEL_90;
    }
    id v49 = objc_msgSend(v48, sel_coordinateSpace);
    objc_msgSend(v42, sel_frame);
    objc_msgSend(v49, sel_convertRect_toCoordinateSpace_, objc_msgSend(v46, sel_coordinateSpace), v50, v51, v52, v53);
    double v55 = v54;
    CGFloat v57 = v56;
    CGFloat v59 = v58;
    CGFloat v61 = v60;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if ((*(void *)&v55 & 0x7FF0000000000000) == 0x7FF0000000000000) {
      goto LABEL_63;
    }
    if ((~*(void *)&v57 & 0x7FF0000000000000) != 0)
    {
      swift_unknownObjectRetain();
      v94.origin.double x = v55;
      v94.origin.double y = v57;
      v94.size.double width = v59;
      v94.size.double height = v61;
      if ((~((uint64_t (__cdecl *)(CGRect))CGRectGetWidth)(v94) & 0x7FF0000000000000) != 0)
      {
        v95.origin.double x = v55;
        v95.origin.double y = v57;
        v95.size.double width = v59;
        v95.size.double height = v61;
        if ((~((uint64_t (__cdecl *)(CGRect))CGRectGetHeight)(v95) & 0x7FF0000000000000) != 0)
        {
          if (v88) {
            double v78 = v61;
          }
          else {
            double v78 = v59;
          }
          if (v88) {
            double v65 = v57;
          }
          else {
            double v65 = v55;
          }
          if (v78 <= 0.0) {
            double v78 = 0.0;
          }
          double v64 = v65 + v78;
          if (v65 > v65 + v78) {
            goto LABEL_115;
          }
          goto LABEL_82;
        }
      }
    }
    else
    {
LABEL_63:
      uint64_t v62 = swift_unknownObjectRetain();
    }
    MEMORY[0x1F4188790](v62);
    uint64_t v63 = static Log.internalError(_:)();
    double v64 = 0.0;
    double v65 = 0.0;
    if ((*(void *)&v55 & 0x7FF0000000000000) == 0x7FF0000000000000
      || (~*(void *)&v57 & 0x7FF0000000000000) == 0)
    {
      goto LABEL_84;
    }
LABEL_82:
    v96.origin.double x = v55;
    v96.origin.double y = v57;
    v96.size.double width = v59;
    v96.size.double height = v61;
    if ((~((uint64_t (__cdecl *)(CGRect))CGRectGetWidth)(v96) & 0x7FF0000000000000) != 0)
    {
      v97.origin.double x = v55;
      v97.origin.double y = v57;
      v97.size.double width = v59;
      v97.size.double height = v61;
      if ((~((uint64_t (__cdecl *)(CGRect))CGRectGetHeight)(v97) & 0x7FF0000000000000) != 0) {
        break;
      }
    }
LABEL_84:
    MEMORY[0x1F4188790](v63);
    static Log.internalError(_:)();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    double v55 = 0.0;
    double v79 = 0.0;
    double v11 = &selRef_setObscuresBackgroundDuringPresentation_;
LABEL_85:
    swift_unknownObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v40 + 2) + 1, 1, v40);
    }
    unint64_t v81 = *((void *)v40 + 2);
    unint64_t v80 = *((void *)v40 + 3);
    if (v81 >= v80 >> 1) {
      uint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v80 > 1), v81 + 1, 1, v40);
    }
    *((void *)v40 + 2) = v81 + 1;
    double v82 = &v40[40 * v81];
    *((void *)v82 + 4) = v42;
    *((double *)v82 + 5) = v65;
    *((double *)v82 + 6) = v64;
    *((double *)v82 + 7) = v55;
    *((double *)v82 + 8) = v79;
    swift_unknownObjectRelease_n();
    double v5 = v90;
    double v3 = v91;
LABEL_90:
    unint64_t v12 = v93;
    if (v93 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v84 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v84) {
        goto LABEL_111;
      }
    }
    else if (!*(void *)((v93 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_111;
    }
  }
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  if (v88) {
    double v83 = v59;
  }
  else {
    double v83 = v61;
  }
  if (!v88) {
    double v55 = v57;
  }
  if (v83 <= 0.0) {
    double v83 = 0.0;
  }
  double v79 = v55 + v83;
  double v11 = &selRef_setObscuresBackgroundDuringPresentation_;
  if (v55 <= v55 + v83) {
    goto LABEL_85;
  }
  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t closure #1 in HostingScrollView.PlatformGroupContainer.fillerFocusItems(in:)@<X0>(unint64_t *a1@<X2>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  swift_beginAccess();
  type metadata accessor for _ContiguousArrayStorage<FocusableBounds>(0, a1, a2, MEMORY[0x1E4FBB320]);
  uint64_t result = AGGraphGetWeakValue();
  if (result) {
    uint64_t result = swift_bridgeObjectRetain();
  }
  *a3 = result;
  return result;
}

uint64_t closure #2 in HostingScrollView.PlatformGroupContainer.addFillerItems(in:bounds:axis:metrics:)(char **a1, char **a2, char a3, char ***a4, double a5, double a6)
{
  double v11 = *a1;
  type metadata accessor for UIKitFocusableFillerItem();
  if (UIFocusItem.isFocused.getter())
  {
    uint64_t v12 = *(void *)&v11[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame];
    uint64_t v13 = *(void *)&v11[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame
                        + 8];
    uint64_t v14 = *(void *)&v11[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame
                        + 16];
    uint64_t v15 = *(void *)&v11[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame
                        + 24];
    id v16 = *a2;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a2 = v16;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      id v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v16 + 2) + 1, 1, v16);
      *a2 = v16;
    }
    unint64_t v19 = *((void *)v16 + 2);
    unint64_t v18 = *((void *)v16 + 3);
    if (v19 >= v18 >> 1) {
      id v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v19 + 1, 1, v16);
    }
    *((void *)v16 + 2) = v19 + 1;
    uint64_t v20 = &v16[40 * v19];
    *((void *)v20 + 4) = v12;
    *((void *)v20 + 5) = v13;
    *((void *)v20 + 6) = v14;
    *((void *)v20 + 7) = v15;
    v20[64] = 0;
    *a2 = v16;
    return 1;
  }
  CGRect.range(in:)(a3 & 1, *(CGFloat *)&v11[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame], *(CGFloat *)&v11[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame+ 8], *(CGFloat *)&v11[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame+ 16], *(CGFloat *)&v11[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame+ 24]);
  if (v21 <= a5) {
    double v21 = a5;
  }
  if (v22 > a6) {
    double v22 = a6;
  }
  if (v21 >= v22) {
    return 1;
  }
  if (v21 > v22)
  {
    __break(1u);
    goto LABEL_19;
  }
  a2 = *a4;
  swift_unknownObjectRetain();
  char v23 = swift_isUniquelyReferenced_nonNull_native();
  *a4 = a2;
  if ((v23 & 1) == 0)
  {
LABEL_19:
    a2 = (char **)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)(a2[2] + 1), 1, a2);
    *a4 = a2;
  }
  unint64_t v24 = (unint64_t)a2[2];
  unint64_t v25 = (unint64_t)a2[3];
  id v26 = (char *)(v24 + 1);
  if (v24 >= v25 >> 1)
  {
    uint64_t v29 = a2;
    uint64_t v30 = a2[2];
    id v31 = (char **)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v24 + 1, 1, v29);
    unint64_t v24 = (unint64_t)v30;
    a2 = v31;
    *a4 = v31;
  }
  uint64_t result = 0;
  a2[2] = v26;
  id v28 = &a2[2 * v24];
  unsigned char v28[4] = v11;
  v28[5] = (char *)&protocol witness table for UIKitFocusableFillerItem;
  return result;
}

id specialized closure #4 in HostingScrollView.PlatformGroupContainer.addFillerItems(in:bounds:axis:metrics:)(uint64_t a1, char a2, void **a3)
{
  char v4 = a2 & 1;
  double v5 = (objc_class *)type metadata accessor for UIKitFocusableFillerItem();
  double v6 = objc_allocWithZone(v5);
  swift_unknownObjectWeakInit();
  double v7 = &v6[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame];
  *double v7 = 0u;
  v7[1] = 0u;
  double v8 = &v6[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_focusableFrame];
  *(_OWORD *)double v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  v8[32] = 1;
  swift_unknownObjectWeakAssign();
  v6[OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_axis] = v4;
  v17.receiver = v6;
  v17.super_class = v5;
  id v9 = objc_msgSendSuper2(&v17, sel_init);
  swift_beginAccess();
  id v10 = *a3;
  id v11 = v9;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    *a3 = v10;
  }
  unint64_t v14 = v10[2];
  unint64_t v13 = v10[3];
  if (v14 >= v13 >> 1)
  {
    id v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v10);
    *a3 = v10;
  }
  uint64_t v10[2] = v14 + 1;
  uint64_t v15 = &v10[2 * v14];
  v15[4] = v11;
  v15[5] = &protocol witness table for UIKitFocusableFillerItem;
  return v11;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FocusableBorder(CGRect *a1, CGRect *a2)
{
  uint64_t result = CGRectEqualToRect(*a1, *a2);
  if (result)
  {
    return static EdgeInsets.== infix(_:_:)();
  }
  return result;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance FocusableBounds.Key(uint64_t a1, void (*a2)(uint64_t *__return_ptr), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance FocusableBounds.Key(a1, a2, a3, a4, a5, specialized Array.append<A>(contentsOf:));
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance FocusableFillerBounds.Key(uint64_t a1, void (*a2)(uint64_t *__return_ptr), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance FocusableBounds.Key(a1, a2, a3, a4, a5, specialized Array.append<A>(contentsOf:));
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance FocusableBounds.Key(uint64_t a1, void (*a2)(uint64_t *__return_ptr), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  a2(&v8);
  return a6(v8);
}

uint64_t type metadata accessor for UIKitFocusableFillerItem()
{
  return self;
}

uint64_t getEnumTagSinglePayload for FocusableBorder(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for FocusableBorder(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 64) = v3;
  return result;
}

ValueMetadata *type metadata accessor for FocusableBorder()
{
  return &type metadata for FocusableBorder;
}

uint64_t getEnumTagSinglePayload for FocusableFillerBounds(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 105)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for FocusableFillerBounds(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 104) = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 105) = v3;
  return result;
}

uint64_t FocusableBoundsTransform.value.getter(uint64_t a1, uint64_t a2)
{
  char v2 = BYTE4(a2);
  uint64_t Value = AGGraphGetValue();
  uint64_t v17 = *(void *)Value;
  long long v18 = *(_OWORD *)(Value + 8);
  long long v19 = *(_OWORD *)(Value + 24);
  v14[0] = *(_OWORD *)AGGraphGetValue();
  uint64_t v4 = swift_retain();
  *(double *)&unint64_t v5 = MEMORY[0x18C10C240](v4);
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v6, v5));
  double v7 = (_OWORD *)AGGraphGetValue();
  long long v8 = v7[1];
  v14[0] = *v7;
  v14[1] = v8;
  long long v15 = 0uLL;
  *(void *)&long long v16 = MEMORY[0x18C114450]();
  *((void *)&v16 + 1) = v9;
  static CoordinateSpace.scrollViewContent.getter();
  CGRect.convert(to:transform:)();
  outlined destroy of CoordinateSpace((uint64_t)v14);
  type metadata accessor for _ContiguousArrayStorage<FocusableBounds>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<FocusableBounds>, (uint64_t)&type metadata for FocusableBounds, MEMORY[0x1E4FBBE00]);
  uint64_t v10 = swift_allocObject();
  long long v11 = v15;
  long long v12 = v16;
  *(_OWORD *)(v10 + 16) = xmmword_18834BB80;
  *(_OWORD *)(v10 + 32) = v11;
  *(_OWORD *)(v10 + 48) = v12;
  *(unsigned char *)(v10 + 64) = v2 & 1;
  swift_release();
  return v10;
}

uint64_t protocol witness for Rule.value.getter in conformance FocusableBoundsTransform@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = 0x100000000;
  if (!*(unsigned char *)(v1 + 12)) {
    uint64_t v3 = 0;
  }
  uint64_t result = FocusableBoundsTransform.value.getter(*(void *)v1, v3 | *(unsigned int *)(v1 + 8));
  *a1 = result;
  return result;
}

uint64_t implicit closure #1 in CGRect.range(in:)()
{
  _StringGuts.grow(_:)(37);
  v0._object = (void *)0x8000000188332070;
  v0._countAndFlagsBits = 0xD000000000000023;
  String.append(_:)(v0);
  CGRect.loggable.getter();
  v1._countAndFlagsBits = LoggableRect.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return 0;
}

void ranges #1 (_:) in FocusableFillerBounds.fillerFrames(in:)(char a1, CGFloat *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint64_t v11 = a1 & 1;
  CGRect.range(in:)(v11, *a2, a2[1], a2[2], a2[3]);
  double v13 = v12;
  double v15 = v14;
  CGRect.range(in:)(v11, a3, a4, a5, a6);
  if (v13 > v16) {
    double v18 = v13;
  }
  else {
    double v18 = v16;
  }
  if (v17 >= v15) {
    double v19 = v15;
  }
  else {
    double v19 = v17;
  }
  double v20 = v19 - v18;
  if (v19 - v18 > 0.0)
  {
    uint64_t v21 = 13;
    if (!v11) {
      uint64_t v21 = 8;
    }
    double v22 = 0.0;
    double v23 = 0.0;
    double v24 = v20;
    if ((LOBYTE(a2[v21]) & 1) == 0)
    {
      uint64_t v25 = 10;
      if (!v11) {
        uint64_t v25 = 5;
      }
      uint64_t v26 = 9;
      if (!v11) {
        uint64_t v26 = 4;
      }
      double v23 = a2[v25];
      double v24 = a2[v26];
    }
    double v27 = floor((v20 + v23) / (v23 + v24));
    if (v27 > 1.0) {
      double v22 = (v20 - v24 * v27) / (v27 + -1.0);
    }
    if ((~*(void *)&v27 & 0x7FF0000000000000) == 0)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    if (v27 <= -9.22337204e18)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    if (v27 >= 9.22337204e18)
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    uint64_t v28 = (uint64_t)v27;
    if ((uint64_t)v27 < 0)
    {
LABEL_34:
      __break(1u);
      return;
    }
    if (v28)
    {
      double v29 = v24 + v22;
      uint64_t v36 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, (uint64_t)v27, 0);
      uint64_t v30 = 0;
      uint64_t v31 = v36;
      while (1)
      {
        double v32 = v18 + v29 * (double)v30;
        if (v32 > v24 + v32) {
          break;
        }
        uint64_t v37 = v31;
        unint64_t v34 = *(void *)(v31 + 16);
        unint64_t v33 = *(void *)(v31 + 24);
        if (v34 >= v33 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1);
          uint64_t v31 = v37;
        }
        ++v30;
        *(void *)(v31 + 16) = v34 + 1;
        uint64_t v35 = v31 + 16 * v34;
        *(double *)(v35 + 32) = v32;
        *(double *)(v35 + 40) = v24 + v32;
        if (v28 == v30) {
          return;
        }
      }
      __break(1u);
      goto LABEL_31;
    }
  }
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(double *a1, double *a2, unint64_t a3, double *a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  long long v11 = *(_OWORD *)(a5 + 48);
  *(_OWORD *)(v10 + 48) = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(v10 + 64) = v11;
  *(unsigned char *)(v10 + 80) = *(unsigned char *)(a5 + 64);
  long long v12 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(v10 + 16) = *(_OWORD *)a5;
  *(_OWORD *)(v10 + 32) = v12;
  uint64_t v13 = (char *)a2 - (char *)a1;
  uint64_t v14 = ((char *)a2 - (char *)a1) / 40;
  uint64_t v15 = a3 - (void)a2;
  uint64_t v16 = (uint64_t)(a3 - (void)a2) / 40;
  double v51 = a1;
  double v50 = a4;
  if (v14 >= v16)
  {
    if (v15 < -39) {
      goto LABEL_54;
    }
    if (a4 != a2 || &a2[5 * v16] <= a4) {
      memmove(a4, a2, 40 * v16);
    }
    uint64_t v31 = &a4[5 * v16];
    id v49 = (char *)v31;
    double v51 = a2;
    if (v15 < 40 || a1 >= a2)
    {
LABEL_53:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v51, (const void **)&v50, &v49);
      swift_release();
      return 1;
    }
    double v32 = *(double *)(a5 + 56);
    char v33 = *(unsigned char *)(a5 + 64);
    unint64_t v34 = a3 - 40;
    while (1)
    {
      uint64_t v35 = (double *)(v34 + 40);
      double v36 = vabdd_f64((*(v31 - 2) + *(v31 - 1)) * 0.5, v32);
      double v37 = vabdd_f64((*(a2 - 2) + *(a2 - 1)) * 0.5, v32);
      if (v33) {
        break;
      }
      double v43 = *(v31 - 3);
      double v44 = *(a2 - 3);
      if (v43 == v44) {
        goto LABEL_43;
      }
      if (v44 < v43)
      {
LABEL_37:
        uint64_t v40 = a2 - 5;
        if (v35 != a2 || v34 >= (unint64_t)a2)
        {
          long long v41 = *(_OWORD *)v40;
          long long v42 = *(_OWORD *)(a2 - 3);
          *(double *)(v34 + 32) = *(a2 - 1);
          *(_OWORD *)unint64_t v34 = v41;
          *(_OWORD *)(v34 + 16) = v42;
        }
        double v51 = a2 - 5;
        if (v31 <= a4) {
          goto LABEL_53;
        }
        goto LABEL_49;
      }
LABEL_44:
      uint64_t v45 = v31 - 5;
      id v49 = (char *)(v31 - 5);
      if (v35 < v31 || v34 >= (unint64_t)v31 || v35 != v31)
      {
        long long v46 = *(_OWORD *)v45;
        long long v47 = *(_OWORD *)(v31 - 3);
        *(double *)(v34 + 32) = *(v31 - 1);
        *(_OWORD *)unint64_t v34 = v46;
        *(_OWORD *)(v34 + 16) = v47;
      }
      uint64_t v40 = a2;
      v31 -= 5;
      if (v45 <= a4) {
        goto LABEL_53;
      }
LABEL_49:
      v34 -= 40;
      a2 = v40;
      if (v40 <= a1) {
        goto LABEL_53;
      }
    }
    double v38 = *(v31 - 4);
    double v39 = *(a2 - 4);
    if (v38 != v39)
    {
      if (v38 < v39) {
        goto LABEL_37;
      }
      goto LABEL_44;
    }
LABEL_43:
    if (v36 < v37) {
      goto LABEL_37;
    }
    goto LABEL_44;
  }
  if (v13 >= -39)
  {
    if (a4 != a1 || &a1[5 * v14] <= a4) {
      memmove(a4, a1, 40 * v14);
    }
    double v17 = &a4[5 * v14];
    id v49 = (char *)v17;
    if (v13 >= 40 && (unint64_t)a2 < a3)
    {
      double v18 = *(double *)(a5 + 56);
      char v19 = *(unsigned char *)(a5 + 64);
      double v20 = a4;
      while (1)
      {
        double v21 = vabdd_f64((a2[3] + a2[4]) * 0.5, v18);
        double v22 = vabdd_f64((v20[3] + v20[4]) * 0.5, v18);
        if (v19) {
          break;
        }
        double v27 = a2[2];
        double v28 = v20[2];
        if (v27 == v28) {
          goto LABEL_16;
        }
        if (v28 < v27)
        {
LABEL_12:
          uint64_t v25 = a2 + 5;
          uint64_t v26 = a2;
          if (a1 == a2 && a1 < v25) {
            goto LABEL_24;
          }
          goto LABEL_23;
        }
LABEL_17:
        a4 = v20 + 5;
        uint64_t v26 = v20;
        uint64_t v25 = a2;
        if (a1 == v20)
        {
          v20 += 5;
          if (a1 < a4) {
            goto LABEL_24;
          }
        }
        else
        {
          v20 += 5;
        }
LABEL_23:
        long long v29 = *(_OWORD *)v26;
        long long v30 = *((_OWORD *)v26 + 1);
        a1[4] = v26[4];
        *(_OWORD *)a1 = v29;
        *((_OWORD *)a1 + 1) = v30;
LABEL_24:
        a1 += 5;
        if (v20 < v17)
        {
          a2 = v25;
          if ((unint64_t)v25 < a3) {
            continue;
          }
        }
        double v50 = a4;
        double v51 = a1;
        goto LABEL_53;
      }
      double v23 = a2[1];
      double v24 = v20[1];
      if (v23 != v24)
      {
        if (v23 < v24) {
          goto LABEL_12;
        }
        goto LABEL_17;
      }
LABEL_16:
      if (v21 < v22) {
        goto LABEL_12;
      }
      goto LABEL_17;
    }
    goto LABEL_53;
  }
LABEL_54:
  swift_release();
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst, char a5)
{
  unint64_t v5 = __dst;
  double v7 = a2;
  long long v8 = __src;
  int64_t v10 = a2 - __src;
  int64_t v11 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v11 = a2 - __src;
  }
  uint64_t v12 = v11 >> 4;
  uint64_t v13 = a3 - (void)a2;
  uint64_t v14 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v14 = a3 - (void)a2;
  }
  uint64_t v15 = v14 >> 4;
  double v38 = __src;
  double v37 = __dst;
  if (v12 >= v14 >> 4)
  {
    if (v13 >= -15)
    {
      if (__dst != a2 || &a2[16 * v15] <= __dst) {
        memmove(__dst, a2, 16 * v15);
      }
      double v24 = &v5[16 * v15];
      double v36 = v24;
      double v38 = v7;
      if (v8 < v7 && v13 >= 16)
      {
        uint64_t v25 = OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame;
        uint64_t v26 = (char *)(a3 - 16);
        double v27 = v7;
        while (1)
        {
          double v28 = v26 + 16;
          uint64_t v30 = *((void *)v27 - 2);
          v27 -= 16;
          uint64_t v29 = v30;
          uint64_t v31 = (double *)(*((void *)v24 - 2) + v25);
          if (a5) {
            ++v31;
          }
          double v32 = *v31;
          char v33 = (double *)(v29 + v25);
          uint64_t v34 = v29 + v25 + 8;
          if (a5) {
            char v33 = (double *)v34;
          }
          if (v32 >= *v33)
          {
            double v36 = v24 - 16;
            if (v28 < v24 || v26 >= v24 || v28 != v24) {
              *(_OWORD *)uint64_t v26 = *((_OWORD *)v24 - 1);
            }
            double v27 = v7;
            v24 -= 16;
            if (v7 <= v8) {
              goto LABEL_51;
            }
          }
          else
          {
            if (v28 != v7 || v26 >= v7) {
              *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
            }
            double v38 = v27;
            if (v27 <= v8) {
              goto LABEL_51;
            }
          }
          v26 -= 16;
          double v7 = v27;
          if (v24 <= v5) {
            goto LABEL_51;
          }
        }
      }
      goto LABEL_51;
    }
  }
  else if (v10 >= -15)
  {
    if (__dst != __src || &__src[16 * v12] <= __dst) {
      memmove(__dst, __src, 16 * v12);
    }
    uint64_t v16 = &v5[16 * v12];
    double v36 = v16;
    if ((unint64_t)v7 < a3 && v10 >= 16)
    {
      uint64_t v17 = OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame;
      do
      {
        uint64_t v18 = *(void *)v5;
        char v19 = (double *)(*(void *)v7 + v17);
        if (a5) {
          ++v19;
        }
        double v20 = *v19;
        double v21 = (double *)(v18 + v17);
        uint64_t v22 = v18 + v17 + 8;
        if (a5) {
          double v21 = (double *)v22;
        }
        if (v20 >= *v21)
        {
          if (v8 != v5) {
            *(_OWORD *)long long v8 = *(_OWORD *)v5;
          }
          v5 += 16;
          double v37 = v5;
          double v23 = v7;
        }
        else
        {
          double v23 = v7 + 16;
          if (v8 < v7 || v8 >= v23 || v8 != v7) {
            *(_OWORD *)long long v8 = *(_OWORD *)v7;
          }
        }
        v8 += 16;
        if (v5 >= v16) {
          break;
        }
        double v7 = v23;
      }
      while ((unint64_t)v23 < a3);
      double v38 = v8;
    }
LABEL_51:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v38, &v37, &v36);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in HostingScrollView.PlatformGroupContainer.updateFocusScrollBoundaryMetrics(_:for:)()
{
  return closure #1 in HostingScrollView.PlatformGroupContainer.updateFocusScrollBoundaryMetrics(_:for:)(*(CGFloat *)(v0 + 24), *(CGFloat *)(v0 + 32), *(CGFloat *)(v0 + 40), *(CGFloat *)(v0 + 48), *(void *)(v0 + 16), *(BOOL **)(v0 + 56), *(BOOL **)(v0 + 64), *(BOOL **)(v0 + 72), *(BOOL **)(v0 + 80));
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, void *a2, void **a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9)
  {
    unint64_t v16 = 0;
    uint64_t v17 = MEMORY[0x1E4FBC860];
    while (1)
    {
      if (v16 >= *(void *)(a1 + 16))
      {
        __break(1u);
        JUMPOUT(0x187B0B688);
      }
      long long v23 = *(_OWORD *)(a1 + 16 * v16 + 32);
      long long v24 = v23;
      swift_unknownObjectRetain();
      char v18 = closure #1 in HostingScrollView.PlatformGroupContainer.pruneFillerItems()((uint64_t *)&v24, a2, a3, a4, a5, a6, a7);
      if (v7) {
        break;
      }
      if (v18)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v25 = v17;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v17 + 16) + 1, 1);
          uint64_t v17 = v25;
        }
        unint64_t v21 = *(void *)(v17 + 16);
        unint64_t v20 = *(void *)(v17 + 24);
        if (v21 >= v20 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1);
          uint64_t v17 = v25;
        }
        *(void *)(v17 + 16) = v21 + 1;
        *(_OWORD *)(v17 + 16 * v21 + 32) = v23;
      }
      else
      {
        swift_unknownObjectRelease();
      }
      if (v9 == ++v16) {
        goto LABEL_14;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v17 = MEMORY[0x1E4FBC860];
LABEL_14:
    swift_bridgeObjectRelease();
  }
  return v17;
}

uint64_t dynamic_cast_existential_1_superclass_conditional(uint64_t a1)
{
  uint64_t result = swift_dynamicCastMetatype();
  if (result)
  {
    if (swift_conformsToProtocol2()) {
      return a1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_187B0B708()
{
  return swift_deallocObject();
}

uint64_t sub_187B0B718()
{
  return swift_deallocObject();
}

uint64_t sub_187B0B728()
{
  return swift_deallocObject();
}

uint64_t sub_187B0B738()
{
  return swift_deallocObject();
}

void specialized HostingScrollView.PlatformGroupContainer.didUpdateFocus(in:with:)(void *a1)
{
  Swift::String v2 = v1;
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v4 - 8);
  unint64_t v6 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = MEMORY[0x1F4188790](v7);
  int64_t v10 = (char *)v36 - v9;
  uint64_t v11 = OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_requestedFocusItem;
  if (*(void *)&v2[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_requestedFocusItem]
    || (id v20 = objc_msgSend(a1, sel_previouslyFocusedItem, v8)) != 0
    && ((id v21 = v20, swift_getObjectType(), swift_unknownObjectRelease(), swift_conformsToProtocol2())
      ? (id v22 = v21)
      : (id v22 = 0),
        v22))
  {
    static Log.focus.getter();
    uint64_t v12 = type metadata accessor for Logger();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    if (v14(v6, 1, v12) == 1)
    {
      outlined destroy of Logger?((uint64_t)v6);
LABEL_25:
      *(void *)&v2[v11] = 0;
      swift_unknownObjectRelease();
      HostingScrollView.PlatformGroupContainer.pruneFillerItems()();
      return;
    }
    id v15 = objc_msgSend(a1, sel_nextFocusedItem);
    id v16 = *(id *)&v2[v11];
    if (v15)
    {
      id v17 = v15;
      swift_unknownObjectRelease();
      if (v16) {
        BOOL v18 = v17 == v16;
      }
      else {
        BOOL v18 = 0;
      }
      if (!v18) {
        goto LABEL_18;
      }
    }
    else if (v16)
    {
LABEL_18:
      uint64_t v19 = 1;
LABEL_19:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v10, v19, 1, v12);
      long long v23 = *(void (**)(char *, uint64_t))(v13 + 8);
      v23(v6, v12);
      if (v14(v10, 1, v12) == 1)
      {
        outlined destroy of Logger?((uint64_t)v10);
      }
      else
      {
        long long v24 = v2;
        uint64_t v25 = Logger.logObject.getter();
        os_log_type_t v26 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v25, v26))
        {
          uint64_t v40 = v23;
          double v27 = (uint8_t *)swift_slowAlloc();
          uint64_t v39 = swift_slowAlloc();
          uint64_t v42 = v39;
          double v37 = v27;
          os_log_t v38 = v25;
          *(_DWORD *)double v27 = 136315138;
          v36[1] = v27 + 4;
          double v28 = v24;
          uint64_t v29 = specialized UIKitFocusItemDescription.init(_:)();
          unint64_t v31 = v30;

          uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, &v42);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          long long v23 = v40;
          swift_bridgeObjectRelease();
          os_log_t v32 = v38;
          os_log_type_t v33 = v26;
          uint64_t v34 = v37;
          _os_log_impl(&dword_1872C6000, v38, v33, "filler substituted in: %s", v37, 0xCu);
          uint64_t v35 = v39;
          swift_arrayDestroy();
          MEMORY[0x18C119C60](v35, -1, -1);
          MEMORY[0x18C119C60](v34, -1, -1);
        }
        else
        {
        }
        v23(v10, v12);
      }
      goto LABEL_25;
    }
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v6, v12);
    uint64_t v19 = 0;
    goto LABEL_19;
  }
}

void partial apply for closure #1 in HostingScrollView.PlatformGroupContainer.focusItems(in:)(void *a1@<X8>)
{
  closure #1 in HostingScrollView.PlatformGroupContainer.focusItems(in:)(*(void **)(v1 + 16), a1, *(CGFloat *)(v1 + 24), *(CGFloat *)(v1 + 32), *(CGFloat *)(v1 + 40), *(CGFloat *)(v1 + 48));
}

uint64_t partial apply for closure #1 in HostingScrollView.PlatformGroupContainer.fillerFocusItems(in:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in HostingScrollView.PlatformGroupContainer.fillerFocusItems(in:)((unint64_t *)&lazy cache variable for type metadata for [FocusableFillerBounds], (uint64_t)&type metadata for FocusableFillerBounds, a1);
}

uint64_t partial apply for closure #1 in HostingScrollView.PlatformGroupContainer.addFillerItems(in:bounds:axis:metrics:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in HostingScrollView.PlatformGroupContainer.fillerFocusItems(in:)(&lazy cache variable for type metadata for [FocusableBounds], (uint64_t)&type metadata for FocusableBounds, a1);
}

unint64_t type metadata accessor for UIKitProxyFocusItem()
{
  unint64_t result = lazy cache variable for type metadata for UIKitProxyFocusItem;
  if (!lazy cache variable for type metadata for UIKitProxyFocusItem)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIKitProxyFocusItem);
  }
  return result;
}

uint64_t initializeWithCopy for HostingScrollView.PlatformGroupContainer.SubstitutionCandidate(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for HostingScrollView.PlatformGroupContainer.SubstitutionCandidate(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

ValueMetadata *type metadata accessor for HostingScrollView.PlatformGroupContainer.SubstitutionCandidate()
{
  return &type metadata for HostingScrollView.PlatformGroupContainer.SubstitutionCandidate;
}

ValueMetadata *type metadata accessor for FocusableBoundsTransform()
{
  return &type metadata for FocusableBoundsTransform;
}

ValueMetadata *type metadata accessor for FocusableBounds.Key()
{
  return &type metadata for FocusableBounds.Key;
}

ValueMetadata *type metadata accessor for FocusableFillerBounds.Key()
{
  return &type metadata for FocusableFillerBounds.Key;
}

ValueMetadata *type metadata accessor for FocusableFillerBounds.Metrics()
{
  return &type metadata for FocusableFillerBounds.Metrics;
}

uint64_t getEnumTagSinglePayload for HostingScrollView.PlatformGroupContainer.SubstitutionStrategy(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[65]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for HostingScrollView.PlatformGroupContainer.SubstitutionStrategy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 65) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for HostingScrollView.PlatformGroupContainer.SubstitutionStrategy()
{
  return &unk_1ED422998;
}

unsigned char *storeEnumTagSinglePayload for HostingScrollView.PlatformGroupContainer.SubstitutionStrategy.SortOrder(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187B0BE7CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for HostingScrollView.PlatformGroupContainer.SubstitutionStrategy.SortOrder()
{
  return &unk_1ED422908;
}

unint64_t lazy protocol witness table accessor for type HostingScrollView.PlatformGroupContainer.SubstitutionStrategy.SortOrder and conformance HostingScrollView.PlatformGroupContainer.SubstitutionStrategy.SortOrder()
{
  unint64_t result = lazy protocol witness table cache variable for type HostingScrollView.PlatformGroupContainer.SubstitutionStrategy.SortOrder and conformance HostingScrollView.PlatformGroupContainer.SubstitutionStrategy.SortOrder;
  if (!lazy protocol witness table cache variable for type HostingScrollView.PlatformGroupContainer.SubstitutionStrategy.SortOrder and conformance HostingScrollView.PlatformGroupContainer.SubstitutionStrategy.SortOrder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HostingScrollView.PlatformGroupContainer.SubstitutionStrategy.SortOrder and conformance HostingScrollView.PlatformGroupContainer.SubstitutionStrategy.SortOrder);
  }
  return result;
}

void CustomHoverEffect.hoverEffect<A>(in:isEnabled:body:)()
{
}

uint64_t sub_187B0BF24(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void static ScenePadding.minimum.getter(void *a1@<X8>)
{
  *a1 = 0;
}

void static ScenePadding.navigationBar.getter()
{
}

BOOL static ScenePadding.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t View.scenePadding(_:)()
{
  return View.scenePadding(_:edges:)();
}

uint64_t View.scenePadding(_:edges:)()
{
  EdgeInsets.init(_all:)();
  EdgeInsets.in(_:)();

  return View.padding(_:)();
}

const char *PepperUICoreFeatureFlag.domain.getter()
{
  return "PepperUICore";
}

const char *PepperUICoreFeatureFlag.feature.getter()
{
  return "new_system_margins";
}

uint64_t static PepperUICoreFeatureFlag.== infix(_:_:)()
{
  return 1;
}

void PepperUICoreFeatureFlag.hash(into:)()
{
}

Swift::Int PepperUICoreFeatureFlag.hashValue.getter()
{
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type PepperUICoreFeatureFlag and conformance PepperUICoreFeatureFlag()
{
  unint64_t result = lazy protocol witness table cache variable for type PepperUICoreFeatureFlag and conformance PepperUICoreFeatureFlag;
  if (!lazy protocol witness table cache variable for type PepperUICoreFeatureFlag and conformance PepperUICoreFeatureFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PepperUICoreFeatureFlag and conformance PepperUICoreFeatureFlag);
  }
  return result;
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance PepperUICoreFeatureFlag()
{
  return "PepperUICore";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance PepperUICoreFeatureFlag()
{
  return "new_system_margins";
}

ValueMetadata *type metadata accessor for ScenePadding()
{
  return &type metadata for ScenePadding;
}

ValueMetadata *type metadata accessor for ScenePaddingAlignment()
{
  return &type metadata for ScenePaddingAlignment;
}

unsigned char *storeEnumTagSinglePayload for PepperUICoreFeatureFlag(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x187B0C1B0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PepperUICoreFeatureFlag()
{
  return &type metadata for PepperUICoreFeatureFlag;
}

uint64_t sub_187B0C1E8()
{
  return swift_getWitnessTable();
}

void static ScenePaddingAlignment.statusBarMargin.getter()
{
}

void CustomHoverEffect.overlay<A, B>(alignment:content:effect:)()
{
  protocol witness for static Equatable.== infix(_:_:) in conformance CapsuleSlider<A>.ScrollState.Orientation();
}

void CustomHoverEffect.background<A>(alignment:content:)()
{
}

void CustomHoverEffect.background<A, B>(alignment:content:effect:)()
{
  protocol witness for static Equatable.== infix(_:_:) in conformance CapsuleSlider<A>.ScrollState.Orientation();
}

uint64_t sub_187B0C2C0(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_187B0C2C8(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

void CustomHoverEffect.overlay<A>(alignment:content:)()
{
}

void static OpenImmersiveSpaceAction.Result.== infix(_:_:)()
{
}

void OpenImmersiveSpaceAction.Result.hash(into:)()
{
}

void OpenImmersiveSpaceAction.Result.hashValue.getter()
{
}

uint64_t OpenImmersiveSpaceAction.callAsFunction(id:)()
{
  type metadata accessor for MainActor();
  static MainActor.shared.getter();
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](OpenWindowAction.callAsFunction<A>(value:sharingBehavior:), v1, v0);
}

uint64_t OpenImmersiveSpaceAction.callAsFunction<A>(value:)()
{
  type metadata accessor for MainActor();
  static MainActor.shared.getter();
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](OpenWindowAction.callAsFunction<A>(value:sharingBehavior:), v1, v0);
}

uint64_t OpenImmersiveSpaceAction.callAsFunction<A>(id:value:)()
{
  type metadata accessor for MainActor();
  static MainActor.shared.getter();
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](OpenWindowAction.callAsFunction<A>(value:sharingBehavior:), v1, v0);
}

void EnvironmentValues.openImmersiveSpace.getter()
{
}

unint64_t lazy protocol witness table accessor for type OpenImmersiveSpaceAction.Result and conformance OpenImmersiveSpaceAction.Result()
{
  unint64_t result = lazy protocol witness table cache variable for type OpenImmersiveSpaceAction.Result and conformance OpenImmersiveSpaceAction.Result;
  if (!lazy protocol witness table cache variable for type OpenImmersiveSpaceAction.Result and conformance OpenImmersiveSpaceAction.Result)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenImmersiveSpaceAction.Result and conformance OpenImmersiveSpaceAction.Result);
  }
  return result;
}

void sub_187B0C538()
{
}

void sub_187B0C560()
{
}

ValueMetadata *type metadata accessor for OpenImmersiveSpaceAction()
{
  return &type metadata for OpenImmersiveSpaceAction;
}

unsigned char *storeEnumTagSinglePayload for OpenImmersiveSpaceAction.Result(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187B0C650);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OpenImmersiveSpaceAction.Result()
{
  return &type metadata for OpenImmersiveSpaceAction.Result;
}

uint64_t View.accessibilityRespondsToUserInteraction(_:isEnabled:)@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v15 - v12;
  if (a2)
  {
    if (a1)
    {
      unsigned __int8 v16 = 21;
      View.accessibilityAddTraits(_:)(&v16, a3, a4);
    }
    else
    {
      unsigned __int8 v17 = 21;
      View.accessibilityRemoveTraits(_:)(&v17, a3, a4);
    }
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a5, v13, v10);
  }
  else
  {
    return View.accessibility()(a3, a4);
  }
}

uint64_t ModifiedContent<>.accessibilityRespondsToUserInteraction(_:isEnabled:)@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v6 = 0uLL;
  if (a2)
  {
    if (a1) {
      AccessibilityNullableOptionSet<>.init(adding:)();
    }
    else {
      AccessibilityNullableOptionSet<>.init(removing:)();
    }
    long long v6 = v8;
  }
  long long v8 = v6;
  return ModifiedContent<>.accessibilityTraits(_:)(&v8, a3, a4);
}

void TupleWidget.init()()
{
}

uint64_t TupleWidget.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t TupleWidget.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for TupleWidgetConfiguration();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t type metadata accessor for TupleWidgetConfiguration()
{
  return __swift_instantiateGenericMetadata();
}

void protocol witness for Widget.init() in conformance TupleWidget<A>()
{
}

void TupleWidgetConfiguration.body.getter()
{
}

uint64_t static TupleWidgetConfiguration._makeWidgetConfiguration(widget:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  int v4 = *a1;
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  int v10 = *((_DWORD *)a2 + 14);
  lazy protocol witness table accessor for type WidgetDescriptor and conformance WidgetDescriptor();
  static TupleDescriptor.tupleDescription(_:)();
  uint64_t v11 = v41[0];
  LODWORD(v41[0]) = v4;
  v41[1] = v5;
  int v42 = v6;
  uint64_t v43 = v7;
  long long v44 = *(_OWORD *)(a2 + 3);
  uint64_t v45 = v8;
  uint64_t v46 = v9;
  int v47 = v10;
  uint64_t v12 = v11;
  uint64_t v48 = 0;
  uint64_t v49 = MEMORY[0x1E4FBC860];
  uint64_t v13 = *(void *)(v11 + 16);
  if (v13)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v14 = (long long *)(v12 + 40);
    do
    {
      long long v15 = *v14;
      uint64_t v14 = (long long *)((char *)v14 + 24);
      uint64_t v48 = AGTupleElementOffset();
      long long v40 = v15;
      uint64_t List = type metadata accessor for TupleWidgetConfiguration.MakeList();
      TypeConformance<>.visitType<A>(visitor:)((uint64_t)v41, List, (uint64_t)&protocol witness table for TupleWidgetConfiguration<A>.MakeList);
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    uint64_t v17 = v49;
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v17 = MEMORY[0x1E4FBC860];
  }
  int64_t v18 = *(void *)(v17 + 16);
  if (v18)
  {
    *(void *)&long long v40 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18, 0);
    uint64_t v19 = v40;
    id v20 = (_DWORD *)(v17 + 40);
    do
    {
      uint64_t v21 = *((void *)v20 - 1);
      int v22 = *v20;
      *(void *)&long long v40 = v19;
      unint64_t v24 = *(void *)(v19 + 16);
      unint64_t v23 = *(void *)(v19 + 24);
      swift_bridgeObjectRetain();
      if (v24 >= v23 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v24 + 1, 1);
        uint64_t v19 = v40;
      }
      *(void *)(v19 + 16) = v24 + 1;
      uint64_t v25 = v19 + 16 * v24;
      *(void *)(v25 + 32) = v21;
      *(_DWORD *)(v25 + 40) = v22;
      v20 += 4;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease();
  }
  PreferencesOutputs.init()();
  uint64_t v38 = v40;
  int v39 = DWORD2(v40);
  uint64_t v36 = v9;
  uint64_t v37 = 0;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    uint64_t v26 = MEMORY[0x1E4F411B8];
    uint64_t v27 = MEMORY[0x1E4F411C0];
    do
    {
      double v28 = (void (*)(long long *, void))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      uint64_t v30 = *v29;
      uint64_t v31 = v29[1];
      v28(&v40, 0);
      uint64_t v32 = v37;
      *(void *)&long long v40 = v36;
      swift_bridgeObjectRetain();
      uint64_t v33 = PreferenceKeys.endIndex.getter();
      if (v37 < 0 || v37 >= v33) {
        __break(1u);
      }
      ++v37;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 8))(v30, v30, v31, v27, v26);
    }
    while (v32 + 1 != PreferenceKeys.endIndex.getter());
  }
  swift_bridgeObjectRelease();
  *(void *)a3 = v38;
  *(_DWORD *)(a3 + 8) = v39;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t TupleWidgetConfiguration.MakeList.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  LODWORD(v34) = *(_DWORD *)v4;
  type metadata accessor for TupleWidgetConfiguration();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  int v8 = *(_DWORD *)(v4 + 16);
  uint64_t v9 = *(void *)(v4 + 24);
  uint64_t v10 = *(void *)(v4 + 48);
  uint64_t v11 = *(void *)(v4 + 56);
  int v12 = *(_DWORD *)(v4 + 64);
  uint64_t v34 = *(void *)(v4 + 8);
  int v35 = v8;
  uint64_t v36 = v9;
  long long v37 = *(_OWORD *)(v4 + 32);
  uint64_t v38 = v10;
  uint64_t v39 = v11;
  int v40 = v12;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static DynamicPropertyCache.fields(of:)();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a3, a4, v13, v14);
  _GraphValue.init(_:)();
  type metadata accessor for WidgetBodyAccessor();
  swift_getWitnessTable();
  BodyAccessor.makeBody(container:inputs:fields:)();
  outlined consume of DynamicPropertyCache.Fields.Layout();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v24 = v34;
  LODWORD(v25) = v35;
  uint64_t v26 = v9;
  long long v27 = v37;
  uint64_t v28 = v10;
  uint64_t v29 = v11;
  int v30 = v40;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *__return_ptr, unsigned char *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(&v32, v31, &v24, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v17 = v32;
  int v18 = v33;
  uint64_t v19 = *(char **)(v4 + 80);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v19 + 2) + 1, 1, v19);
  }
  unint64_t v21 = *((void *)v19 + 2);
  unint64_t v20 = *((void *)v19 + 3);
  if (v21 >= v20 >> 1) {
    uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1, v19);
  }
  *((void *)v19 + 2) = v21 + 1;
  int v22 = &v19[16 * v21];
  *((void *)v22 + 4) = v17;
  *((_DWORD *)v22 + 10) = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  *(void *)(v5 + 80) = v19;
  return result;
}

uint64_t protocol witness for WidgetTypeVisitor.visit<A>(type:) in conformance TupleWidgetConfiguration<A>.MakeList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return TupleWidgetConfiguration.MakeList.visit<A>(type:)(a1, a4, a2, a3);
}

void protocol witness for WidgetConfiguration.body.getter in conformance TupleWidgetConfiguration<A>()
{
}

uint64_t protocol witness for static WidgetConfiguration._makeWidgetConfiguration(widget:inputs:) in conformance TupleWidgetConfiguration<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static TupleWidgetConfiguration._makeWidgetConfiguration(widget:inputs:)(a1, a2, a3);
}

void specialized TupleWidgetConfiguration.body.getter()
{
}

unint64_t lazy protocol witness table accessor for type WidgetDescriptor and conformance WidgetDescriptor()
{
  unint64_t result = lazy protocol witness table cache variable for type WidgetDescriptor and conformance WidgetDescriptor;
  if (!lazy protocol witness table cache variable for type WidgetDescriptor and conformance WidgetDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetDescriptor and conformance WidgetDescriptor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetDescriptor and conformance WidgetDescriptor;
  if (!lazy protocol witness table cache variable for type WidgetDescriptor and conformance WidgetDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetDescriptor and conformance WidgetDescriptor);
  }
  return result;
}

uint64_t type metadata accessor for TupleWidgetConfiguration.MakeList()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t associated type witness table accessor for Widget.Body : WidgetConfiguration in TupleWidget<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for TupleWidget()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for TupleWidget(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for TupleWidget(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187B0D4BCLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unsigned __int8 v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

_UNKNOWN **sub_187B0D4E4()
{
  return &protocol witness table for TupleWidgetConfiguration<A>;
}

uint64_t destroy for TupleWidgetConfiguration.MakeList()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TupleWidgetConfiguration.MakeList(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v3;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  uint64_t v4 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TupleWidgetConfiguration.MakeList(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TupleWidgetConfiguration.MakeList(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  uint64_t v4 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TupleWidgetConfiguration.MakeList(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TupleWidgetConfiguration.MakeList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t MapKitGraphInputs.environment.getter()
{
  _GraphInputs.environment.getter();

  return _GraphValue.init(_:)();
}

uint64_t key path getter for MapKitGraphInputs.environment : MapKitGraphInputs@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v4 = *a1;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _GraphInputs.environment.getter();
  _GraphValue.init(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  *a2 = v4;
  return result;
}

uint64_t key path setter for MapKitGraphInputs.environment : MapKitGraphInputs()
{
  return _GraphInputs.environment.setter();
}

uint64_t MapKitGraphInputs.environment.setter()
{
  type metadata accessor for _GraphValue<EnvironmentValues>();
  _GraphValue.value.getter();

  return _GraphInputs.environment.setter();
}

void type metadata accessor for _GraphValue<EnvironmentValues>()
{
  if (!lazy cache variable for type metadata for _GraphValue<EnvironmentValues>)
  {
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<EnvironmentValues>);
    }
  }
}

uint64_t (*MapKitGraphInputs.environment.modify(void *a1))()
{
  *a1 = v1;
  _GraphInputs.environment.getter();
  _GraphValue.init(_:)();
  return MapKitGraphInputs.environment.modify;
}

uint64_t MapKitGraphInputs.environment.modify()
{
  return _GraphInputs.environment.setter();
}

uint64_t destroy for MapKitGraphInputs()
{
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MapKitGraphInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MapKitGraphInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MapKitGraphInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MapKitGraphInputs()
{
  return &type metadata for MapKitGraphInputs;
}

unint64_t lazy protocol witness table accessor for type VStackLayout and conformance VStackLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type VStackLayout and conformance VStackLayout;
  if (!lazy protocol witness table cache variable for type VStackLayout and conformance VStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VStackLayout and conformance VStackLayout);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AdaptiveStack(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 8) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
      }
      uint64_t v15 = *(void *)a1;
      if (*(void *)a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for AdaptiveStack(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 8) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x187B0E114);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v19 = (unint64_t)&a1[v9 + 8] & ~v9;
          unint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(v19);
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v18 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v18 = a2 - 1;
          }
          *(void *)a1 = v18;
        }
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for View in AdaptiveStack<A>()
{
  return &protocol witness table for AdaptiveStack<A>;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance AdaptiveStack<A>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance AdaptiveStack<A>()
{
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance AdaptiveStack<A>()
{
}

SwiftUI::TableColumnCustomizationBehavior __swiftcall TableColumnCustomizationBehavior.init()()
{
  *unint64_t v0 = 0;
  return result;
}

void static TableColumnCustomizationBehavior.all.getter(uint64_t *a1@<X8>)
{
  uint64_t v1 = unk_1ED45D810;
  if ((unk_1ED45D810 & ~qword_1ED45D808) == 0) {
    uint64_t v1 = 0;
  }
  uint64_t v2 = qword_1ED45D818;
  if ((qword_1ED45D818 & ~(v1 | qword_1ED45D808)) == 0) {
    uint64_t v2 = 0;
  }
  *a1 = v2 | v1 | qword_1ED45D808;
}

void static TableColumnCustomizationBehavior.reorder.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static TableColumnCustomizationBehavior.resize.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static TableColumnCustomizationBehavior.visibility.getter(void *a1@<X8>)
{
  *a1 = 4;
}

Swift::Bool __swiftcall TableColumnCustomizationBehavior.contains(_:)(SwiftUI::TableColumnCustomizationBehavior a1)
{
  return (*(void *)a1.guts.rawValue & ~*v1) == 0;
}

SwiftUI::TableColumnCustomizationBehavior __swiftcall TableColumnCustomizationBehavior.union(_:)(SwiftUI::TableColumnCustomizationBehavior result)
{
  *uint64_t v1 = *v2 | *(void *)result.guts.rawValue;
  return result;
}

SwiftUI::TableColumnCustomizationBehavior __swiftcall TableColumnCustomizationBehavior.intersection(_:)(SwiftUI::TableColumnCustomizationBehavior result)
{
  *uint64_t v1 = *v2 & *(void *)result.guts.rawValue;
  return result;
}

SwiftUI::TableColumnCustomizationBehavior __swiftcall TableColumnCustomizationBehavior.symmetricDifference(_:)(SwiftUI::TableColumnCustomizationBehavior result)
{
  *uint64_t v1 = *v2 ^ *(void *)result.guts.rawValue;
  return result;
}

Swift::tuple_inserted_Bool_memberAfterInsert_SwiftUI_TableColumnCustomizationBehavior __swiftcall TableColumnCustomizationBehavior.insert(_:)(SwiftUI::TableColumnCustomizationBehavior a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *v2 & *v1;
  if (v4 != *v1) {
    *v2 |= v3;
  }
  *(void *)a1.guts.rawuint64_t Value = v3;
  Swift::Bool v5 = v4 != v3;
  result.memberAfterInsert.guts.rawuint64_t Value = (Swift::Int)v1;
  result.inserted = v5;
  return result;
}

SwiftUI::TableColumnCustomizationBehavior_optional __swiftcall TableColumnCustomizationBehavior.remove(_:)(SwiftUI::TableColumnCustomizationBehavior a1)
{
  uint64_t v3 = *v2 & *(void *)a1.guts.rawValue;
  if (v3) {
    *v2 &= ~*(void *)a1.guts.rawValue;
  }
  *(void *)uint64_t v1 = v3;
  *(unsigned char *)(v1 + 8) = v3 == 0;
  result.value = a1;
  return result;
}

SwiftUI::TableColumnCustomizationBehavior_optional __swiftcall TableColumnCustomizationBehavior.update(with:)(SwiftUI::TableColumnCustomizationBehavior with)
{
  uint64_t v3 = *(void *)with.guts.rawValue;
  uint64_t v4 = *v2;
  *v2 |= *(void *)with.guts.rawValue;
  uint64_t v5 = v4 & v3;
  *(void *)uint64_t v1 = v5;
  *(unsigned char *)(v1 + 8) = v5 == 0;
  result.value = with;
  return result;
}

Swift::Void __swiftcall TableColumnCustomizationBehavior.formUnion(_:)(SwiftUI::TableColumnCustomizationBehavior a1)
{
  *v1 |= *(void *)a1.guts.rawValue;
}

Swift::Void __swiftcall TableColumnCustomizationBehavior.formIntersection(_:)(SwiftUI::TableColumnCustomizationBehavior a1)
{
  *v1 &= *(void *)a1.guts.rawValue;
}

Swift::Void __swiftcall TableColumnCustomizationBehavior.formSymmetricDifference(_:)(SwiftUI::TableColumnCustomizationBehavior a1)
{
  *v1 ^= *(void *)a1.guts.rawValue;
}

BOOL static TableColumnCustomizationBehavior.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t TableColumnContent.defaultVisibility(_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = a1;
  return TableColumnContent.environment<A>(key:value:)((uint64_t)&type metadata for TableColumnDefaultVisibilityKey, (uint64_t)&v4, a2, a3);
}

uint64_t TableColumnContent.customizationID(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v5[0] = a1;
  v5[1] = a2;
  v5[2] = 0;
  v5[3] = 0;
  char v6 = 0;
  return TableColumnContent.environment<A>(key:value:)((uint64_t)&type metadata for TableColumnCustomizationIDKey, (uint64_t)v5, a3, a4);
}

uint64_t TableColumnContent.disabledCustomizationBehavior(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  return TableColumnContent.environment<A>(key:value:)((uint64_t)&type metadata for TableColumnDisabledCustomizationBehaviorKey, (uint64_t)&v4, a2, a3);
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationBehavior and conformance TableColumnCustomizationBehavior()
{
  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationBehavior and conformance TableColumnCustomizationBehavior;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationBehavior and conformance TableColumnCustomizationBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationBehavior and conformance TableColumnCustomizationBehavior);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationBehavior and conformance TableColumnCustomizationBehavior;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationBehavior and conformance TableColumnCustomizationBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationBehavior and conformance TableColumnCustomizationBehavior);
  }
  return result;
}

ValueMetadata *type metadata accessor for TableColumnCustomizationBehavior()
{
  return &type metadata for TableColumnCustomizationBehavior;
}

uint64_t sub_187B0E570()
{
  return get_witness_table_7SwiftUI18TableColumnContentRzlAA018EnvironmentWritingcdE033_D18AEB50FB5BD1FE65061C37D76F709BLLVyAA0cD20DefaultVisibilityKey33_AD0B7B82D3360F70EB1ED1A484B203ACLLVxGAaBHPyHCTm();
}

uint64_t sub_187B0E584()
{
  return get_witness_table_7SwiftUI18TableColumnContentRzlAA018EnvironmentWritingcdE033_D18AEB50FB5BD1FE65061C37D76F709BLLVyAA0cD20DefaultVisibilityKey33_AD0B7B82D3360F70EB1ED1A484B203ACLLVxGAaBHPyHCTm();
}

uint64_t sub_187B0E598()
{
  return get_witness_table_7SwiftUI18TableColumnContentRzlAA018EnvironmentWritingcdE033_D18AEB50FB5BD1FE65061C37D76F709BLLVyAA0cD20DefaultVisibilityKey33_AD0B7B82D3360F70EB1ED1A484B203ACLLVxGAaBHPyHCTm();
}

uint64_t get_witness_table_7SwiftUI18TableColumnContentRzlAA018EnvironmentWritingcdE033_D18AEB50FB5BD1FE65061C37D76F709BLLVyAA0cD20DefaultVisibilityKey33_AD0B7B82D3360F70EB1ED1A484B203ACLLVxGAaBHPyHCTm()
{
  return swift_getWitnessTable();
}

void *type metadata accessor for TableColumnCustomizationBehavior.Guts()
{
  return &unk_1ED45D830;
}

ValueMetadata *type metadata accessor for TableColumnDisabledCustomizationBehaviorKey()
{
  return &type metadata for TableColumnDisabledCustomizationBehaviorKey;
}

ValueMetadata *type metadata accessor for TableColumnCustomizationIDKey()
{
  return &type metadata for TableColumnCustomizationIDKey;
}

ValueMetadata *type metadata accessor for TableColumnDefaultVisibilityKey()
{
  return &type metadata for TableColumnDefaultVisibilityKey;
}

unint64_t lazy protocol witness table accessor for type TableColumnCustomizationBehavior.Guts and conformance TableColumnCustomizationBehavior.Guts()
{
  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationBehavior.Guts and conformance TableColumnCustomizationBehavior.Guts;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationBehavior.Guts and conformance TableColumnCustomizationBehavior.Guts)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationBehavior.Guts and conformance TableColumnCustomizationBehavior.Guts);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationBehavior.Guts and conformance TableColumnCustomizationBehavior.Guts;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationBehavior.Guts and conformance TableColumnCustomizationBehavior.Guts)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationBehavior.Guts and conformance TableColumnCustomizationBehavior.Guts);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationBehavior.Guts and conformance TableColumnCustomizationBehavior.Guts;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationBehavior.Guts and conformance TableColumnCustomizationBehavior.Guts)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationBehavior.Guts and conformance TableColumnCustomizationBehavior.Guts);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCustomizationBehavior.Guts and conformance TableColumnCustomizationBehavior.Guts;
  if (!lazy protocol witness table cache variable for type TableColumnCustomizationBehavior.Guts and conformance TableColumnCustomizationBehavior.Guts)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCustomizationBehavior.Guts and conformance TableColumnCustomizationBehavior.Guts);
  }
  return result;
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance TableColumnCustomizationIDKey@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = -1;
  return result;
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance TableColumnCustomizationIDKey(uint64_t a1, uint64_t a2)
{
  outlined init with take of TableColumnCustomizationID?(a1, (uint64_t)v4);
  outlined init with take of TableColumnCustomizationID?(a2, (uint64_t)v5);
  return specialized static EnvironmentKey<>._valuesEqual(_:_:)((uint64_t)v4, (uint64_t)v5);
}

uint64_t outlined init with take of TableColumnCustomizationID?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TableColumnCustomizationID?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for TableColumnCustomizationID?()
{
  if (!lazy cache variable for type metadata for TableColumnCustomizationID?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TableColumnCustomizationID?);
    }
  }
}

void FallbackDelegateBox.__ivar_destroyer()
{
  outlined consume of FallbackDelegateBox<A>.DelegateStorage<A>(*(id *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t FallbackDelegateBox.__deallocating_deinit()
{
  outlined consume of FallbackDelegateBox<A>.DelegateStorage<A>(*(id *)(v0 + 16), *(unsigned char *)(v0 + 24));

  return swift_deallocClassInstance();
}

uint64_t ObservableObjectFallbackDelegateBox.addDelegate(to:)()
{
  static ObservableObject.environmentStore.getter();
  id v1 = *(id *)(v0 + 16);
  swift_setAtWritableKeyPath();
  return swift_release();
}

uint64_t type metadata accessor for ObservableObjectFallbackDelegateBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t UnsafeObservableObjectFallbackDelegateBox.addDelegate(to:)()
{
  return swift_release();
}

uint64_t type metadata accessor for UnsafeObservableObjectFallbackDelegateBox()
{
  return __swift_instantiateGenericMetadata();
}

void ObservableFallbackDelegateBox.__ivar_destroyer()
{
}

uint64_t ObjectFallbackDelegateBox.__ivar_destroyer()
{
  return swift_unknownObjectRelease();
}

uint64_t UnsafeObservableObjectFallbackDelegateBox.__deallocating_deinit()
{
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t initializeBufferWithCopyOfBuffer for FallbackDelegateBox.DelegateStorage(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of FallbackDelegateBox<A>.DelegateStorage<A>(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

id outlined copy of FallbackDelegateBox<A>.DelegateStorage<A>(id result, char a2)
{
  if (a2) {
    return result;
  }
  return result;
}

void destroy for FallbackDelegateBox.DelegateStorage(uint64_t a1)
{
}

uint64_t assignWithCopy for FallbackDelegateBox.DelegateStorage(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of FallbackDelegateBox<A>.DelegateStorage<A>(*(id *)a2, v4);
  uint64_t v5 = *(void **)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of FallbackDelegateBox<A>.DelegateStorage<A>(v5, v6);
  return a1;
}

uint64_t assignWithTake for FallbackDelegateBox.DelegateStorage(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t v5 = *(void **)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of FallbackDelegateBox<A>.DelegateStorage<A>(v5, v6);
  return a1;
}

uint64_t getEnumTag for FallbackDelegateBox.DelegateStorage(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t destructiveInjectEnumTag for FallbackDelegateBox.DelegateStorage(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

uint64_t type metadata accessor for FallbackDelegateBox.DelegateStorage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t MakeObservableObjectDelegateBox.visit<A>(type:)()
{
  type metadata accessor for UnsafeObservableObjectFallbackDelegateBox();
  outlined init with copy of Any(v0, (uint64_t)v4);
  swift_dynamicCast();
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = v3;
  uint64_t result = swift_release();
  *(void *)(v0 + 32) = v1;
  return result;
}

uint64_t destroy for MakeObservableObjectDelegateBox(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

  return swift_release();
}

uint64_t initializeWithCopy for MakeObservableObjectDelegateBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for MakeObservableObjectDelegateBox(uint64_t *a1, uint64_t *a2)
{
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for MakeObservableObjectDelegateBox(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for MakeObservableObjectDelegateBox()
{
  return &type metadata for MakeObservableObjectDelegateBox;
}

ValueMetadata *type metadata accessor for ObservableObjectDescriptor()
{
  return &type metadata for ObservableObjectDescriptor;
}

uint64_t static UIApplicationDelegateAdaptor._makeProperty<A>(in:container:fieldOffset:inputs:)()
{
  type metadata accessor for GraphHost();
  MEMORY[0x18C114840]();
  type metadata accessor for AppGraph();
  uint64_t v0 = swift_dynamicCastClass();
  uint64_t result = swift_release();
  if (!v0)
  {
    JUMPOUT(0x18C112B90);
  }
  return result;
}

void UIApplicationDelegateAdaptor<>.projectedValue.getter()
{
  if (!static AppGraph.delegateBox)
  {
    static os_log_type_t.fault.getter();
    uint64_t v0 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }

  specialized UIApplicationDelegateAdaptor.wrappedValue.getter();
}

uint64_t initializeBufferWithCopyOfBuffer for MenuSliderStyle(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unsigned __int8 v4 = *((unsigned char *)a2 + 8);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(*a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t *assignWithCopy for MenuSliderStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unsigned __int8 v4 = *((unsigned char *)a2 + 8);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(*a2, v4);
  uint64_t v5 = *a1;
  uint64_t v6 = *((unsigned __int8 *)a1 + 8);
  *a1 = v3;
  *((unsigned char *)a1 + 8) = v4;
  outlined consume of Environment<Bool?>.Content(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for MenuSliderStyle()
{
  return &type metadata for MenuSliderStyle;
}

uint64_t associated type witness table accessor for SliderStyle.Body : View in MenuSliderStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t MenuSliderStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v7 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v9 = a1[7];
  uint64_t v16 = a1[6];
  char v15 = *((unsigned char *)a1 + 64);
  size_t v10 = (void *)a1[9];
  BOOL v11 = (void *)a1[10];
  unsigned int v12 = (void *)a1[11];
  int v13 = (void *)a1[12];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of AccessibilitySliderValue?(v10, v11, v12, v13);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of AccessibilitySliderValue?(v10, v11, v12, v13);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of AccessibilitySliderValue?(v10, v11, v12, v13);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of AccessibilitySliderValue?(v10, v11, v12, v13);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of AccessibilitySliderValue?(v10, v11, v12, v13);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of AccessibilitySliderValue?(v10, v11, v12, v13);
  uint64_t result = swift_getKeyPath();
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v7;
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 40) = v8;
  *(void *)(a2 + 48) = v16;
  *(void *)(a2 + 56) = v9;
  *(unsigned char *)(a2 + 64) = v15;
  *(void *)(a2 + 72) = v10;
  *(void *)(a2 + 80) = v11;
  *(void *)(a2 + 88) = v12;
  *(void *)(a2 + 96) = v13;
  *(unsigned char *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = v3;
  *(void *)(a2 + 120) = v4;
  *(void *)(a2 + 128) = v5;
  *(void *)(a2 + 136) = v7;
  *(void *)(a2 + 144) = v6;
  *(void *)(a2 + 152) = v8;
  *(void *)(a2 + 160) = v16;
  *(void *)(a2 + 168) = v9;
  *(unsigned char *)(a2 + 176) = v15;
  *(void *)(a2 + 184) = v10;
  *(void *)(a2 + 192) = v11;
  *(void *)(a2 + 200) = v12;
  *(void *)(a2 + 208) = v13;
  *(_WORD *)(a2 + 216) = 257;
  *(void *)(a2 + 224) = result;
  *(void *)(a2 + 232) = closure #4 in PaletteControlGroupStyle.makeBody(configuration:);
  *(void *)(a2 + 240) = 0;
  return result;
}

uint64_t protocol witness for SliderStyle.makeBody(configuration:) in conformance MenuSliderStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return MenuSliderStyle.makeBody(configuration:)(a1, a2);
}

void destroy for MenuSliderStepButton(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {

    uint64_t v3 = *(void **)(a1 + 96);
  }
}

uint64_t initializeWithCopy for MenuSliderStepButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v8 = (_OWORD *)(a2 + 72);
  uint64_t v7 = *(void **)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    uint64_t v9 = *(void **)(a2 + 80);
    size_t v10 = *(void **)(a2 + 88);
    *(void *)(a1 + 72) = v7;
    *(void *)(a1 + 80) = v9;
    BOOL v11 = *(void **)(a2 + 96);
    *(void *)(a1 + 88) = v10;
    *(void *)(a1 + 96) = v11;
    id v12 = v7;
    id v13 = v9;
    id v14 = v10;
    id v15 = v11;
  }
  else
  {
    long long v16 = v8[1];
    *(_OWORD *)(a1 + 72) = *v8;
    *(_OWORD *)(a1 + 88) = v16;
  }
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  return a1;
}

uint64_t assignWithCopy for MenuSliderStepButton(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = (_OWORD *)(a1 + 72);
  uint64_t v6 = *(void **)(a1 + 72);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v8 = (_OWORD *)(a2 + 72);
  uint64_t v7 = *(void **)(a2 + 72);
  if (v6)
  {
    if (v7)
    {
      *(void *)(a1 + 72) = v7;
      id v9 = v7;

      size_t v10 = *(void **)(a1 + 80);
      BOOL v11 = *(void **)(a2 + 80);
      *(void *)(a1 + 80) = v11;
      id v12 = v11;

      id v13 = *(void **)(a1 + 88);
      id v14 = *(void **)(a2 + 88);
      *(void *)(a1 + 88) = v14;
      id v15 = v14;

      long long v16 = *(void **)(a1 + 96);
      int v17 = *(void **)(a2 + 96);
      *(void *)(a1 + 96) = v17;
      id v18 = v17;
    }
    else
    {
      outlined destroy of AccessibilityBoundedNumber(a1 + 72);
      long long v26 = *(_OWORD *)(a2 + 88);
      *uint64_t v5 = *v8;
      *(_OWORD *)(a1 + 88) = v26;
    }
  }
  else if (v7)
  {
    *(void *)(a1 + 72) = v7;
    unint64_t v19 = *(void **)(a2 + 80);
    *(void *)(a1 + 80) = v19;
    unint64_t v20 = *(void **)(a2 + 88);
    *(void *)(a1 + 88) = v20;
    unint64_t v21 = *(void **)(a2 + 96);
    *(void *)(a1 + 96) = v21;
    id v22 = v7;
    id v23 = v19;
    id v24 = v20;
    id v25 = v21;
  }
  else
  {
    long long v27 = *(_OWORD *)(a2 + 88);
    *uint64_t v5 = *v8;
    *(_OWORD *)(a1 + 88) = v27;
  }
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  return a1;
}

uint64_t outlined destroy of AccessibilityBoundedNumber(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for MenuSliderStepButton(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 72);
  uint64_t v6 = *(void **)(a1 + 72);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  if (!v6) {
    goto LABEL_5;
  }
  if (!v5)
  {
    outlined destroy of AccessibilityBoundedNumber(a1 + 72);
LABEL_5:
    long long v10 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v10;
    goto LABEL_6;
  }
  *(void *)(a1 + 72) = v5;

  uint64_t v7 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);

  uint64_t v8 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);

  id v9 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);

LABEL_6:
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  return a1;
}

void *type metadata accessor for MenuSliderStepButton()
{
  return &unk_1ED431678;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>>();
    lazy protocol witness table accessor for type ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<MenuActionDismissBehavior> and conformance _EnvironmentKeyTransformModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>>)
  {
    type metadata accessor for ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>();
    type metadata accessor for _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>, (uint64_t)&type metadata for MenuActionDismissBehavior, MEMORY[0x1E4F41280]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>)
  {
    type metadata accessor for ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>();
    type metadata accessor for ControlGroupStyleModifier<CompactMenuControlGroupStyle>(255, &lazy cache variable for type metadata for ControlGroupStyleModifier<CompactMenuControlGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CompactMenuControlGroupStyle and conformance CompactMenuControlGroupStyle, (uint64_t)&type metadata for CompactMenuControlGroupStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ControlGroupStyleModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>);
    }
  }
}

void type metadata accessor for ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>()
{
  if (!lazy cache variable for type metadata for ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>)
  {
    type metadata accessor for LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>();
    lazy protocol witness table accessor for type TupleView<(MenuSliderStepButton, MenuSliderStepButton)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label> and conformance LabeledControlGroupContent<A, B>, (void (*)(uint64_t))type metadata accessor for LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>);
    unint64_t v0 = type metadata accessor for ControlGroup();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>);
    }
  }
}

void type metadata accessor for LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>()
{
  if (!lazy cache variable for type metadata for LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>)
  {
    type metadata accessor for TupleView<(MenuSliderStepButton, MenuSliderStepButton)>();
    lazy protocol witness table accessor for type TupleView<(MenuSliderStepButton, MenuSliderStepButton)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(MenuSliderStepButton, MenuSliderStepButton)> and conformance TupleView<A>, (void (*)(uint64_t))type metadata accessor for TupleView<(MenuSliderStepButton, MenuSliderStepButton)>);
    unint64_t v0 = type metadata accessor for LabeledControlGroupContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>);
    }
  }
}

void type metadata accessor for TupleView<(MenuSliderStepButton, MenuSliderStepButton)>()
{
  if (!lazy cache variable for type metadata for TupleView<(MenuSliderStepButton, MenuSliderStepButton)>)
  {
    type metadata accessor for (MenuSliderStepButton, MenuSliderStepButton)();
    unint64_t v0 = type metadata accessor for TupleView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TupleView<(MenuSliderStepButton, MenuSliderStepButton)>);
    }
  }
}

void type metadata accessor for (MenuSliderStepButton, MenuSliderStepButton)()
{
  if (!lazy cache variable for type metadata for (MenuSliderStepButton, MenuSliderStepButton))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (MenuSliderStepButton, MenuSliderStepButton));
    }
  }
}

uint64_t lazy protocol witness table accessor for type TupleView<(MenuSliderStepButton, MenuSliderStepButton)> and conformance TupleView<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CompactMenuControlGroupStyle and conformance CompactMenuControlGroupStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type CompactMenuControlGroupStyle and conformance CompactMenuControlGroupStyle;
  if (!lazy protocol witness table cache variable for type CompactMenuControlGroupStyle and conformance CompactMenuControlGroupStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompactMenuControlGroupStyle and conformance CompactMenuControlGroupStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>();
    lazy protocol witness table accessor for type TupleView<(MenuSliderStepButton, MenuSliderStepButton)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>> and conformance ControlGroup<A>, (void (*)(uint64_t))type metadata accessor for ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(MenuSliderStepButton, MenuSliderStepButton)>, SliderStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in MenuSliderStepButton()
{
  return swift_getOpaqueTypeConformance2();
}

void MenuSliderStepButton.resolvedLabel.getter(uint64_t a1@<X8>)
{
  char v3 = *(unsigned char *)(v1 + 64);
  int v4 = *(unsigned __int8 *)(v1 + 104);
  if (v4 == 1)
  {
    if ((*(unsigned char *)(v1 + 64) & 1) == 0)
    {
      LocalizedStringKey.init(stringLiteral:)();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v6 = Text.init(_:tableName:bundle:comment:)();
      uint64_t v8 = v7;
      uint64_t v10 = v9;
      unint64_t v11 = 0xE400000000000000;
      uint64_t v12 = 1937075312;
LABEL_7:
      uint64_t v13 = v5 & 1;
      type metadata accessor for ControlGroupStyleModifier<CompactMenuControlGroupStyle>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E4F41508], MEMORY[0x1E4F3FCE0]);
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = v12;
      *(void *)(v14 + 24) = v11;
      *(_DWORD *)(v14 + 32) = 0;
      *(unsigned char *)(v14 + 36) = 1;
      *(_OWORD *)(v14 + 40) = xmmword_18834C6B0;
      *(void *)(v14 + 56) = v12;
      *(void *)(v14 + 64) = v11;
      *(_OWORD *)(v14 + 72) = xmmword_18834C6D0;
      *(unsigned char *)(v14 + 88) = 0;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
  }
  else if ((*(unsigned char *)(v1 + 64) & 1) == 0)
  {
    LocalizedStringKey.init(stringLiteral:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v6 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v8 = v15;
    uint64_t v10 = v16;
    unint64_t v11 = 0xE500000000000000;
    uint64_t v12 = 0x73756E696DLL;
    goto LABEL_7;
  }
  uint64_t v6 = 0;
  uint64_t v8 = 0;
  uint64_t v13 = 0;
  uint64_t v10 = 0;
  uint64_t v14 = 0;
LABEL_8:
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v13;
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v14;
  *(unsigned char *)(a1 + 40) = v3 ^ 1;
  *(unsigned char *)(a1 + 41) = v4 ^ 1;
}

void *closure #1 in MenuSliderStepButton.body.getter(void *a1)
{
  outlined retain of SliderStyleConfiguration(a1);
  type metadata accessor for _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Double>, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v3);
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  return outlined release of SliderStyleConfiguration(a1);
}

void *closure #2 in MenuSliderStepButton.body.getter(void *a1)
{
  outlined retain of SliderStyleConfiguration(a1);
  type metadata accessor for _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Double>, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v3);
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  return outlined release of SliderStyleConfiguration(a1);
}

uint64_t closure #3 in MenuSliderStepButton.body.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  type metadata accessor for Button<MappedViewElement.Placeholder>();
  uint64_t v9 = v8 - 8;
  MEMORY[0x1F4188790](v8);
  unint64_t v11 = (_WORD *)((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ModifiedContent<Button<MappedViewElement.Placeholder>, IgnoreViewRespondersModifier>(0);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<Button<MappedViewElement.Placeholder>, IgnoreViewRespondersModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<MappedViewElement.Placeholder>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>, type metadata accessor for ModifiedContent<Button<MappedViewElement.Placeholder>, IgnoreViewRespondersModifier>);
  MEMORY[0x1F4188790](v15 - 8);
  int v17 = (char *)&v24 - v16;
  uint64_t v18 = swift_allocObject();
  long long v19 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v18 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v18 + 96) = v19;
  *(_OWORD *)(v18 + 105) = *(_OWORD *)(a1 + 89);
  long long v20 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v18 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v18 + 32) = v20;
  long long v21 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v18 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v18 + 64) = v21;
  *(void *)(v18 + 128) = a2;
  *(void *)(v18 + 136) = a3;
  *unint64_t v11 = 256;
  id v22 = (uint64_t (**)())((char *)v11 + *(int *)(v9 + 44));
  *id v22 = partial apply for closure #1 in closure #3 in MenuSliderStepButton.body.getter;
  v22[1] = (uint64_t (*)())v18;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  outlined init with copy of Button<MappedViewElement.Placeholder>((uint64_t)v11, (uint64_t)v14);
  outlined retain of SliderStyleConfiguration((void *)a1);
  swift_retain();
  outlined destroy of Button<MappedViewElement.Placeholder>((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Button<MappedViewElement.Placeholder>);
  specialized View.accessibility<A>(_:_:isEnabled:)(qword_1ED431660, qword_1ED431660, 1, (uint64_t)v17);
  outlined destroy of Button<MappedViewElement.Placeholder>((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<MappedViewElement.Placeholder>, IgnoreViewRespondersModifier>);
  return outlined init with take of ModifiedContent<ModifiedContent<Button<MappedViewElement.Placeholder>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>((uint64_t)v17, a4);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance MenuSliderStepButton(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  int v2 = *(_DWORD *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 8) | 0x800;
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v5 = specialized static _ConditionalContent<>._viewListCount(inputs:)(v1, v4, v2, v3);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return v5;
}

void *protocol witness for View.body.getter in conformance MenuSliderStepButton@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)&v30[9] = *(long long *)((char *)v1 + 89);
  long long v3 = v1[5];
  long long v29 = v1[4];
  *(_OWORD *)int v30 = v3;
  long long v4 = v1[1];
  long long v25 = *v1;
  long long v26 = v4;
  long long v5 = v1[3];
  long long v27 = v1[2];
  long long v28 = v5;
  if (v30[24]) {
    uint64_t v6 = partial apply for closure #1 in MenuSliderStepButton.body.getter;
  }
  else {
    uint64_t v6 = partial apply for closure #2 in MenuSliderStepButton.body.getter;
  }
  uint64_t v7 = (_OWORD *)swift_allocObject();
  long long v8 = v1[5];
  v7[5] = v1[4];
  v7[6] = v8;
  *(_OWORD *)((char *)v7 + 105) = *(long long *)((char *)v1 + 89);
  long long v9 = v1[1];
  v7[1] = *v1;
  uint64_t v7[2] = v9;
  long long v10 = v1[3];
  v7[3] = v1[2];
  v7[4] = v10;
  outlined retain of SliderStyleConfiguration(&v25);
  MenuSliderStepButton.resolvedLabel.getter((uint64_t)v21);
  long long v19 = v21[1];
  long long v20 = v21[0];
  uint64_t v11 = v22;
  char v12 = v23;
  char v13 = v24;
  uint64_t v14 = swift_allocObject();
  long long v15 = *(_OWORD *)v30;
  *(_OWORD *)(v14 + 80) = v29;
  *(_OWORD *)(v14 + 96) = v15;
  *(_OWORD *)(v14 + 105) = *(_OWORD *)&v30[9];
  long long v16 = v26;
  *(_OWORD *)(v14 + 16) = v25;
  *(_OWORD *)(v14 + 32) = v16;
  long long v17 = v28;
  *(_OWORD *)(v14 + 48) = v27;
  *(_OWORD *)(v14 + 64) = v17;
  *(void *)(v14 + 128) = v6;
  *(void *)(v14 + 136) = v7;
  *(_OWORD *)a1 = v20;
  *(_OWORD *)(a1 + 16) = v19;
  *(void *)(a1 + 32) = v11;
  *(unsigned char *)(a1 + 40) = v12;
  *(unsigned char *)(a1 + 41) = v13;
  *(void *)(a1 + 48) = partial apply for closure #3 in MenuSliderStepButton.body.getter;
  *(void *)(a1 + 56) = v14;
  return outlined retain of SliderStyleConfiguration(&v25);
}

void *partial apply for closure #2 in MenuSliderStepButton.body.getter()
{
  return closure #2 in MenuSliderStepButton.body.getter((void *)(v0 + 16));
}

uint64_t partial apply for closure #3 in MenuSliderStepButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #3 in MenuSliderStepButton.body.getter(v1 + 16, *(void *)(v1 + 128), *(void *)(v1 + 136), a1);
}

void *partial apply for closure #1 in MenuSliderStepButton.body.getter()
{
  return closure #1 in MenuSliderStepButton.body.getter((void *)(v0 + 16));
}

void type metadata accessor for Button<MappedViewElement.Placeholder>()
{
  if (!lazy cache variable for type metadata for Button<MappedViewElement.Placeholder>)
  {
    unint64_t v0 = type metadata accessor for Button();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Button<MappedViewElement.Placeholder>);
    }
  }
}

void type metadata accessor for ModifiedContent<Button<MappedViewElement.Placeholder>, IgnoreViewRespondersModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<Button<MappedViewElement.Placeholder>, IgnoreViewRespondersModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t objectdestroy_3Tm_2()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void **)(v0 + 88);
  if (v1)
  {
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #3 in MenuSliderStepButton.body.getter()
{
  uint64_t v1 = *(void (**)(uint64_t))(v0 + 128);
  int v2 = *(uint64_t (**)(uint64_t))(v0 + 40);
  uint64_t v3 = v2(1);
  v1(v3);
  return v2(0);
}

uint64_t outlined init with copy of Button<MappedViewElement.Placeholder>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Button<MappedViewElement.Placeholder>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Button<MappedViewElement.Placeholder>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of ModifiedContent<ModifiedContent<Button<MappedViewElement.Placeholder>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ModifiedContent<Button<MappedViewElement.Placeholder>, IgnoreViewRespondersModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<MappedViewElement.Placeholder>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>, type metadata accessor for ModifiedContent<Button<MappedViewElement.Placeholder>, IgnoreViewRespondersModifier>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ControlGroupStyleModifier<CompactMenuControlGroupStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t specialized static _ConditionalContent<>._viewListCount(inputs:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = specialized static ViewAlias._viewListCount(inputs:)(a1, a2, a3, a4);
  if (v9) {
    return v8;
  }
  type metadata accessor for ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>>();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  uint64_t v10 = static ModifiedContent<>._viewListCount(inputs:)();
  uint64_t result = 0;
  if ((v12 & 1) == 0 && v8 == v10)
  {
    uint64_t v13 = specialized static ViewAlias._viewListCount(inputs:)(a1, a2, a3, a4);
    if ((v14 & 1) == 0)
    {
      uint64_t v15 = v13;
      uint64_t v16 = static ModifiedContent<>._viewListCount(inputs:)();
      if ((v17 & 1) == 0 && v15 == v16 && v8 == v15) {
        return v8;
      }
    }
    return 0;
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>>)
  {
    type metadata accessor for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>(255, &lazy cache variable for type metadata for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, (void (*)(uint64_t))type metadata accessor for StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>);
    type metadata accessor for StaticSourceWriter<LabelStyleConfiguration.Title, Text>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>>);
    }
  }
}

void type metadata accessor for StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>()
{
  if (!lazy cache variable for type metadata for StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>)
  {
    type metadata accessor for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>(255, &lazy cache variable for type metadata for ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>);
    lazy protocol witness table accessor for type LabelStyleConfiguration.Icon and conformance LabelStyleConfiguration.Icon();
    lazy protocol witness table accessor for type ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for StaticSourceWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>(255, &lazy cache variable for type metadata for ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>);
    lazy protocol witness table accessor for type StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for StaticSourceWriter<LabelStyleConfiguration.Title, Text>()
{
  if (!lazy cache variable for type metadata for StaticSourceWriter<LabelStyleConfiguration.Title, Text>)
  {
    lazy protocol witness table accessor for type LabelStyleConfiguration.Title and conformance LabelStyleConfiguration.Title();
    unint64_t v0 = type metadata accessor for StaticSourceWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticSourceWriter<LabelStyleConfiguration.Title, Text>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>>();
    lazy protocol witness table accessor for type ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>(255, &lazy cache variable for type metadata for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, (void (*)(uint64_t))type metadata accessor for StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>);
    lazy protocol witness table accessor for type ResolvedLabelStyle and conformance ResolvedLabelStyle();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

_UNKNOWN **sub_187B10C34()
{
  return &protocol witness table for MappedViews<A, B>;
}

void Scene.windowInsets(_:)()
{
}

void Scene.windowInsets(_:_:)()
{
}

double SpatialLongPressGesture.Value.location.getter()
{
  return *(double *)v0;
}

void SpatialLongPressGesture.Value.location.setter(double a1, double a2)
{
  *int v2 = a1;
  v2[1] = a2;
}

uint64_t (*SpatialLongPressGesture.Value.location.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t SpatialLongPressGesture.Value.isPressed.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t SpatialLongPressGesture.Value.isPressed.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 16) = result;
  return result;
}

uint64_t (*SpatialLongPressGesture.Value.isPressed.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static SpatialLongPressGesture.Value.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2 && *(double *)(a1 + 8) == *(double *)(a2 + 8)) {
    return (*(unsigned __int8 *)(a2 + 16) ^ *(unsigned __int8 *)(a1 + 16) ^ 1) & 1;
  }
  else {
    return 0;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SpatialLongPressGesture.Value(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2 && *(double *)(a1 + 8) == *(double *)(a2 + 8)) {
    return (*(unsigned __int8 *)(a2 + 16) ^ *(unsigned __int8 *)(a1 + 16) ^ 1) & 1;
  }
  else {
    return 0;
  }
}

double SpatialLongPressGesture.minimumDuration.getter()
{
  return *(double *)v0;
}

void SpatialLongPressGesture.minimumDuration.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*SpatialLongPressGesture.minimumDuration.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double SpatialLongPressGesture.maximumDistance.getter()
{
  return *(double *)(v0 + 8);
}

void SpatialLongPressGesture.maximumDistance.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*SpatialLongPressGesture.maximumDistance.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t SpatialLongPressGesture.coordinateSpace.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of CoordinateSpace(v1 + 16, a1);
}

uint64_t SpatialLongPressGesture.coordinateSpace.setter(uint64_t a1)
{
  return outlined assign with take of CoordinateSpace(a1, v1 + 16);
}

uint64_t (*SpatialLongPressGesture.coordinateSpace.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t SpatialLongPressGesture.init<A>(minimumDuration:maximumDistance:coordinateSpace:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  *a4 = a5;
  a4[1] = a6;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a3 + 8))(v10, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  return outlined init with take of CoordinateSpace((uint64_t)v10, (uint64_t)(a4 + 2));
}

uint64_t SpatialLongPressGesture.internalBody.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  outlined init with copy of CoordinateSpace((uint64_t)(v1 + 2), (uint64_t)v6);
  outlined init with copy of CoordinateSpaceGesture<SpatialLongPressGesture.Value>((uint64_t)v6, (uint64_t)&v12);
  v7[0] = 0;
  uint64_t v8 = closure #1 in SpatialLongPressGesture.internalBody.getter;
  uint64_t v9 = 0;
  uint64_t v10 = v3;
  uint64_t v11 = v4;
  outlined destroy of CoordinateSpaceGesture<SpatialLongPressGesture.Value>((uint64_t)v6);
  outlined init with copy of ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>>((uint64_t)v7, a1);
  *(void *)(a1 + 88) = 16;
  *(unsigned char *)(a1 + 96) = 1;
  return outlined destroy of ModifierGesture<CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>, SpatialLongPressGesture>((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>>);
}

uint64_t closure #1 in SpatialLongPressGesture.internalBody.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  switch(*(unsigned char *)(result + 64))
  {
    case 1:
      unint64_t result = TappableSpatialEvent.location.getter();
      *(void *)a2 = v6;
      *(void *)(a2 + 8) = v7;
      __int16 v3 = 513;
      goto LABEL_7;
    case 2:
      unint64_t result = TappableSpatialEvent.location.getter();
      *(void *)a2 = v4;
      *(void *)(a2 + 8) = v5;
      __int16 v3 = 512;
      goto LABEL_7;
    case 3:
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      __int16 v3 = 768;
      goto LABEL_7;
    default:
      if (*(void *)(result + 16) == 1)
      {
        *(void *)a2 = 0;
        *(void *)(a2 + 8) = 0;
        __int16 v3 = 2;
LABEL_7:
        *(_WORD *)(a2 + 16) = v3;
      }
      else
      {
        unint64_t result = TappableSpatialEvent.location.getter();
        *(void *)a2 = v8;
        *(void *)(a2 + 8) = v9;
        *(_WORD *)(a2 + 16) = 0;
      }
      return result;
  }
}

uint64_t outlined init with copy of CoordinateSpaceGesture<SpatialLongPressGesture.Value>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CoordinateSpaceGesture<SpatialLongPressGesture.Value>(0, &lazy cache variable for type metadata for CoordinateSpaceGesture<SpatialLongPressGesture.Value>, MEMORY[0x1E4F40910]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CoordinateSpaceGesture<SpatialLongPressGesture.Value>(uint64_t a1)
{
  type metadata accessor for CoordinateSpaceGesture<SpatialLongPressGesture.Value>(0, &lazy cache variable for type metadata for CoordinateSpaceGesture<SpatialLongPressGesture.Value>, MEMORY[0x1E4F40910]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>>)
  {
    uint64_t v0 = (uint64_t (*)(void, ValueMetadata *))MEMORY[0x1E4F40910];
    type metadata accessor for CoordinateSpaceGesture<SpatialLongPressGesture.Value>(255, &lazy cache variable for type metadata for CoordinateSpaceGesture<SpatialLongPressGesture.Value>, MEMORY[0x1E4F40910]);
    type metadata accessor for SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>();
    lazy protocol witness table accessor for type CategoryGesture<SpatialLongPressGesture.Value> and conformance CategoryGesture<A>(&lazy protocol witness table cache variable for type CoordinateSpaceGesture<SpatialLongPressGesture.Value> and conformance CoordinateSpaceGesture<A>, &lazy cache variable for type metadata for CoordinateSpaceGesture<SpatialLongPressGesture.Value>, v0);
    lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>> and conformance SingleLongPressGesture<A, B>, (void (*)(uint64_t))type metadata accessor for SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>);
    unint64_t v1 = type metadata accessor for ModifierGesture();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>>);
    }
  }
}

void type metadata accessor for SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>()
{
  if (!lazy cache variable for type metadata for SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>)
  {
    type metadata accessor for ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>();
    lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>);
    unint64_t v0 = type metadata accessor for SingleLongPressGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>);
    }
  }
}

void type metadata accessor for ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>)
  {
    type metadata accessor for MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>(255, &lazy cache variable for type metadata for MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, (uint64_t)&type metadata for SpatialLongPressGesture.Value, MEMORY[0x1E4F3F370]);
    type metadata accessor for MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>(255, &lazy cache variable for type metadata for EventListener<TappableSpatialEvent>, MEMORY[0x1E4F40698], MEMORY[0x1E4F3F758]);
    lazy protocol witness table accessor for type MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value> and conformance MapGesture<A, B>();
    lazy protocol witness table accessor for type EventListener<TappableSpatialEvent> and conformance EventListener<A>();
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>);
    }
  }
}

void type metadata accessor for MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, void))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, MEMORY[0x1E4F406A8]);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value> and conformance MapGesture<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value> and conformance MapGesture<A, B>;
  if (!lazy protocol witness table cache variable for type MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value> and conformance MapGesture<A, B>)
  {
    type metadata accessor for MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>(255, &lazy cache variable for type metadata for MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, (uint64_t)&type metadata for SpatialLongPressGesture.Value, MEMORY[0x1E4F3F370]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value> and conformance MapGesture<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EventListener<TappableSpatialEvent> and conformance EventListener<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EventListener<TappableSpatialEvent> and conformance EventListener<A>;
  if (!lazy protocol witness table cache variable for type EventListener<TappableSpatialEvent> and conformance EventListener<A>)
  {
    type metadata accessor for MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>(255, &lazy cache variable for type metadata for EventListener<TappableSpatialEvent>, MEMORY[0x1E4F40698], MEMORY[0x1E4F3F758]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventListener<TappableSpatialEvent> and conformance EventListener<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CategoryGesture<SpatialLongPressGesture.Value> and conformance CategoryGesture<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void, ValueMetadata *))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CoordinateSpaceGesture<SpatialLongPressGesture.Value>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of ModifierGesture<CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>, SpatialLongPressGesture>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t protocol witness for PubliclyPrimitiveGesture.internalBody.getter in conformance SpatialLongPressGesture@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  outlined init with copy of CoordinateSpace((uint64_t)(v1 + 2), (uint64_t)v6);
  outlined init with copy of CoordinateSpaceGesture<SpatialLongPressGesture.Value>((uint64_t)v6, (uint64_t)&v12);
  v7[0] = 0;
  uint64_t v8 = closure #1 in SpatialLongPressGesture.internalBody.getter;
  uint64_t v9 = 0;
  uint64_t v10 = v3;
  uint64_t v11 = v4;
  outlined destroy of CoordinateSpaceGesture<SpatialLongPressGesture.Value>((uint64_t)v6);
  outlined init with copy of ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>>((uint64_t)v7, a1);
  *(void *)(a1 + 88) = 16;
  *(unsigned char *)(a1 + 96) = 1;
  return outlined destroy of ModifierGesture<CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>, SpatialLongPressGesture>((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>>);
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance SpatialLongPressGesture()
{
  return static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)();
}

void protocol witness for Gesture.body.getter in conformance SpatialLongPressGesture()
{
}

uint64_t View.onLongPressGesture<A>(minimumDuration:maximumDistance:coordinateSpace:perform:onPressingChanged:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, uint64_t a12)
{
  uint64_t v38 = a8;
  uint64_t v37 = a6;
  uint64_t v34 = a2;
  uint64_t v36 = a9;
  uint64_t v19 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  long long v21 = (char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for <<opaque return type of Gesture.truePreference<A>(_:)>>.0();
  uint64_t v35 = v22;
  uint64_t v23 = *(void *)(v22 - 8);
  double v24 = MEMORY[0x1F4188790](v22);
  long long v26 = (char *)&v33 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))(v21, a1, a7, v24);
  *(double *)&long long v40 = a10;
  *((double *)&v40 + 1) = a11;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a12 + 8))(v39, a7, a12);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, a7);
  outlined init with take of CoordinateSpace((uint64_t)v39, (uint64_t)&v41);
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = v34;
  *(void *)(v27 + 24) = a3;
  outlined init with copy of SpatialLongPressGesture(&v40, (uint64_t)v39);
  v39[8] = a4;
  v39[9] = a5;
  v39[10] = partial apply for closure #1 in View.onLongPressGesture<A>(minimumDuration:maximumDistance:coordinateSpace:perform:onPressingChanged:);
  v39[11] = v27;
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a4, a5);
  type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>, SpatialLongPressGesture>();
  uint64_t v29 = v28;
  uint64_t v30 = lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>, SpatialLongPressGesture> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>, SpatialLongPressGesture>);
  swift_retain();
  Gesture.cancellable()();
  outlined destroy of ModifierGesture<CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>, SpatialLongPressGesture>((uint64_t)v39, (uint64_t (*)(void))type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>, SpatialLongPressGesture>);
  swift_release();
  outlined destroy of SpatialLongPressGesture((uint64_t)&v40);
  v39[0] = v29;
  v39[1] = MEMORY[0x1E4F40C78];
  v39[2] = v30;
  v39[3] = MEMORY[0x1E4F40C70];
  swift_getOpaqueTypeConformance2();
  uint64_t v31 = v35;
  View.gesture<A>(_:including:)();
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v26, v31);
}

void type metadata accessor for <<opaque return type of Gesture.truePreference<A>(_:)>>.0()
{
  if (!lazy cache variable for type metadata for <<opaque return type of Gesture.truePreference<A>(_:)>>.0)
  {
    type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>, SpatialLongPressGesture>();
    lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>, SpatialLongPressGesture> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>, SpatialLongPressGesture>);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.truePreference<A>(_:)>>.0);
    }
  }
}

{
  unint64_t OpaqueTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for <<opaque return type of Gesture.truePreference<A>(_:)>>.0)
  {
    type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, LongRemoteTouchGesture>();
    lazy protocol witness table accessor for type ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, LongRemoteTouchGesture> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, LongRemoteTouchGesture>);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.truePreference<A>(_:)>>.0);
    }
  }
}

{
  unint64_t OpaqueTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for <<opaque return type of Gesture.truePreference<A>(_:)>>.0)
  {
    type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, TextSelectionGesture>();
    lazy protocol witness table accessor for type ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, TextSelectionGesture> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, TextSelectionGesture>);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.truePreference<A>(_:)>>.0);
    }
  }
}

{
  unint64_t OpaqueTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for <<opaque return type of Gesture.truePreference<A>(_:)>>.0)
  {
    type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>, LegacyButtonGesture>();
    lazy protocol witness table accessor for type ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>, LegacyButtonGesture> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>, LegacyButtonGesture>);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.truePreference<A>(_:)>>.0);
    }
  }
}

void type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>, SpatialLongPressGesture>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>, SpatialLongPressGesture>)
  {
    type metadata accessor for CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>();
    lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>> and conformance CallbacksGesture<A>, (void (*)(uint64_t))type metadata accessor for CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>);
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>, SpatialLongPressGesture>);
    }
  }
}

void type metadata accessor for CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>()
{
  if (!lazy cache variable for type metadata for CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>)
  {
    type metadata accessor for PressableGestureCallbacks<SpatialLongPressGesture.Value>();
    lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type PressableGestureCallbacks<SpatialLongPressGesture.Value> and conformance PressableGestureCallbacks<A>, (void (*)(uint64_t))type metadata accessor for PressableGestureCallbacks<SpatialLongPressGesture.Value>);
    unint64_t v0 = type metadata accessor for CallbacksGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>);
    }
  }
}

void type metadata accessor for PressableGestureCallbacks<SpatialLongPressGesture.Value>()
{
  if (!lazy cache variable for type metadata for PressableGestureCallbacks<SpatialLongPressGesture.Value>)
  {
    lazy protocol witness table accessor for type SpatialLongPressGesture.Value and conformance SpatialLongPressGesture.Value();
    unint64_t v0 = type metadata accessor for PressableGestureCallbacks();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PressableGestureCallbacks<SpatialLongPressGesture.Value>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SpatialLongPressGesture.Value and conformance SpatialLongPressGesture.Value()
{
  unint64_t result = lazy protocol witness table cache variable for type SpatialLongPressGesture.Value and conformance SpatialLongPressGesture.Value;
  if (!lazy protocol witness table cache variable for type SpatialLongPressGesture.Value and conformance SpatialLongPressGesture.Value)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialLongPressGesture.Value and conformance SpatialLongPressGesture.Value);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SpatialLongPressGesture.Value and conformance SpatialLongPressGesture.Value;
  if (!lazy protocol witness table cache variable for type SpatialLongPressGesture.Value and conformance SpatialLongPressGesture.Value)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialLongPressGesture.Value and conformance SpatialLongPressGesture.Value);
  }
  return result;
}

uint64_t sub_187B11D9C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.onLongPressGesture<A>(minimumDuration:maximumDistance:coordinateSpace:perform:onPressingChanged:)(unint64_t a1, unint64_t a2, char a3, __n128 a4, __n128 a5)
{
  a4.n128_u64[0] = a1;
  a5.n128_u64[0] = a2;
  if (a3)
  {
    a5.n128_f64[0] = 0.0;
    a4.n128_f64[0] = 0.0;
  }
  return (*(uint64_t (**)(__n128, __n128))(v5 + 16))(a4, a5);
}

uint64_t outlined init with copy of SpatialLongPressGesture(long long *a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of SpatialLongPressGesture(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 56)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  }
  return a1;
}

unint64_t lazy protocol witness table accessor for type SpatialLongPressGesture and conformance SpatialLongPressGesture()
{
  unint64_t result = lazy protocol witness table cache variable for type SpatialLongPressGesture and conformance SpatialLongPressGesture;
  if (!lazy protocol witness table cache variable for type SpatialLongPressGesture and conformance SpatialLongPressGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialLongPressGesture and conformance SpatialLongPressGesture);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SpatialLongPressGesture and conformance SpatialLongPressGesture;
  if (!lazy protocol witness table cache variable for type SpatialLongPressGesture and conformance SpatialLongPressGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialLongPressGesture and conformance SpatialLongPressGesture);
  }
  return result;
}

uint64_t associated type witness table accessor for PubliclyPrimitiveGesture.InternalBody : Gesture in SpatialLongPressGesture()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **base witness table accessor for Gesture in SpatialLongPressGesture()
{
  return &protocol witness table for SpatialLongPressGesture;
}

uint64_t destroy for SpatialLongPressGesture(uint64_t result)
{
  if (!*(unsigned char *)(result + 56)) {
    return __swift_destroy_boxed_opaque_existential_1(result + 16);
  }
  return result;
}

uint64_t initializeWithCopy for SpatialLongPressGesture(uint64_t a1, long long *a2)
{
  long long v5 = *a2;
  uint64_t v4 = a2 + 1;
  *(_OWORD *)a1 = v5;
  uint64_t v6 = (_OWORD *)(a1 + 16);
  if (*((unsigned char *)a2 + 56))
  {
    long long v7 = v4[1];
    *uint64_t v6 = *v4;
    v6[1] = v7;
    *(_OWORD *)((char *)v6 + 25) = *(_OWORD *)((char *)v4 + 25);
  }
  else
  {
    long long v8 = *(long long *)((char *)a2 + 40);
    *(_OWORD *)(a1 + 40) = v8;
    (**(void (***)(_OWORD *, _OWORD *))(v8 - 8))(v6, v4);
    *(unsigned char *)(a1 + 56) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for SpatialLongPressGesture(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  if (a1 != a2)
  {
    uint64_t v4 = (_OWORD *)(a1 + 16);
    long long v5 = (long long *)(a2 + 16);
    outlined destroy of CoordinateSpace(a1 + 16);
    if (*(unsigned char *)(a2 + 56))
    {
      long long v6 = *v5;
      long long v7 = v5[1];
      *(_OWORD *)(a1 + 41) = *(long long *)((char *)v5 + 25);
      *uint64_t v4 = v6;
      *(_OWORD *)(a1 + 32) = v7;
    }
    else
    {
      uint64_t v8 = *(void *)(a2 + 40);
      *(void *)(a1 + 40) = v8;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      (**(void (***)(uint64_t, long long *))(v8 - 8))(a1 + 16, v5);
      *(unsigned char *)(a1 + 56) = 0;
    }
  }
  return a1;
}

_OWORD *assignWithTake for SpatialLongPressGesture(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  if (a1 != a2)
  {
    outlined destroy of CoordinateSpace((uint64_t)(a1 + 1));
    long long v4 = a2[2];
    a1[1] = a2[1];
    a1[2] = v4;
    *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
  }
  return a1;
}

ValueMetadata *type metadata accessor for SpatialLongPressGesture()
{
  return &type metadata for SpatialLongPressGesture;
}

uint64_t getEnumTagSinglePayload for SpatialLongPressGesture.Value(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SpatialLongPressGesture.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SpatialLongPressGesture.Value()
{
  return &type metadata for SpatialLongPressGesture.Value;
}

uint64_t sub_187B12158()
{
  return lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type ModifierGesture<CategoryGesture<SpatialLongPressGesture.Value>, ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CategoryGesture<SpatialLongPressGesture.Value>, ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>>>);
}

void type metadata accessor for ModifierGesture<CategoryGesture<SpatialLongPressGesture.Value>, ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<CategoryGesture<SpatialLongPressGesture.Value>, ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>>>)
  {
    unint64_t v0 = (uint64_t (*)(void, ValueMetadata *))MEMORY[0x1E4F3FAC8];
    type metadata accessor for CoordinateSpaceGesture<SpatialLongPressGesture.Value>(255, &lazy cache variable for type metadata for CategoryGesture<SpatialLongPressGesture.Value>, MEMORY[0x1E4F3FAC8]);
    type metadata accessor for ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>>();
    lazy protocol witness table accessor for type CategoryGesture<SpatialLongPressGesture.Value> and conformance CategoryGesture<A>(&lazy protocol witness table cache variable for type CategoryGesture<SpatialLongPressGesture.Value> and conformance CategoryGesture<A>, &lazy cache variable for type metadata for CategoryGesture<SpatialLongPressGesture.Value>, v0);
    lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>>);
    unint64_t v1 = type metadata accessor for ModifierGesture();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CategoryGesture<SpatialLongPressGesture.Value>, ModifierGesture<CoordinateSpaceGesture<SpatialLongPressGesture.Value>, SingleLongPressGesture<SpatialLongPressGesture.Value, ModifierGesture<MapGesture<TappableSpatialEvent, SpatialLongPressGesture.Value>, EventListener<TappableSpatialEvent>>>>>);
    }
  }
}

void type metadata accessor for CoordinateSpaceGesture<SpatialLongPressGesture.Value>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, ValueMetadata *))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, &type metadata for SpatialLongPressGesture.Value);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_187B12344()
{
  type metadata accessor for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>, (void (*)(uint64_t))type metadata accessor for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>);
  return swift_getWitnessTable();
}

uint64_t TableRowContent.contextMenu<A>(menuItems:)(void (*a1)(double), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = a5;
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for _ContextMenuTableRowModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v17 - v14;
  a1(v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a4);
  swift_getWitnessTable();
  TableRowContent.modifier<A>(_:)((uint64_t)v15, a3, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t type metadata accessor for _ContextMenuTableRowModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t TableRowContent.contextMenu<A, B>(menuItems:preview:)@<X0>(uint64_t (*a1)(double)@<X0>, void (*a2)(uint64_t)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v32 = a7;
  uint64_t v30 = a8;
  uint64_t v31 = a4;
  uint64_t v28 = a3;
  uint64_t v29 = a2;
  uint64_t v27 = a1;
  MEMORY[0x1F4188790](a1);
  double v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = v17;
  uint64_t v34 = v18;
  uint64_t v35 = a9;
  uint64_t v36 = a10;
  uint64_t v19 = type metadata accessor for _ContextMenuPreviewTableRowModifier();
  uint64_t v20 = *(void *)(v19 - 8);
  double v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v26 - v22;
  uint64_t v24 = v27(v21);
  v29(v24);
  _ContextMenuPreviewTableRowModifier.init(menuItems:preview:)((uint64_t)v16, (uint64_t)v13, a5, a6, (uint64_t)v23);
  swift_getWitnessTable();
  TableRowContent.modifier<A>(_:)((uint64_t)v23, v31, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, v19);
}

uint64_t type metadata accessor for _ContextMenuPreviewTableRowModifier()
{
  return swift_getGenericMetadata();
}

uint64_t _ContextMenuPreviewTableRowModifier.init(menuItems:preview:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for _ContextMenuPreviewTableRowModifier();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t _ContextMenuTableRowModifier.body.getter@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  uint64_t v2 = type metadata accessor for ModifiedContent();
  MEMORY[0x1F4188790](v2);
  View.styleContext<A>(_:)();
  lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  swift_getWitnessTable();
  uint64_t result = AnyView.init<A>(_:)();
  *a1 = result;
  a1[1] = 0;
  return result;
}

uint64_t _ContextMenuPreviewTableRowModifier.body.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  uint64_t v9 = type metadata accessor for ModifiedContent();
  MEMORY[0x1F4188790](v9);
  uint64_t v10 = *(void *)(a1 + 32);
  View.styleContext<A>(_:)();
  unint64_t v11 = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  v14[0] = v10;
  v14[1] = v11;
  swift_getWitnessTable();
  uint64_t v12 = AnyView.init<A>(_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2 + *(int *)(a1 + 52), v5);
  uint64_t result = AnyView.init<A>(_:)();
  *a2 = v12;
  a2[1] = result;
  return result;
}

uint64_t associated type witness table accessor for _TableRowContentModifier.Body : _TableRowContentModifier in _ContextMenuTableRowModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for _TableRowContentModifier.Body : _TableRowContentModifier in _ContextMenuPreviewTableRowModifier<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for _ContextMenuTableRowModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for _ContextMenuTableRowModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187B1306CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t getEnumTagSinglePayload for _ContextMenuPreviewTableRowModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for _ContextMenuPreviewTableRowModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187B13558);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

_UNKNOWN **sub_187B13580()
{
  return &protocol witness table for _TraitWritingTableRowModifier<A>;
}

_UNKNOWN **sub_187B1358C()
{
  return &protocol witness table for _TraitWritingTableRowModifier<A>;
}

ValueMetadata *type metadata accessor for TableRowContextMenuTraitKey()
{
  return &type metadata for TableRowContextMenuTraitKey;
}

ValueMetadata *type metadata accessor for TableRowContextMenuTraitKey.Storage()
{
  return &type metadata for TableRowContextMenuTraitKey.Storage;
}

uint64_t static AccessibilityRotorContent._makeEntries(content:inputs:)()
{
  return static AccessibilityRotorContent._makeEntries(content:inputs:)();
}

{
  type metadata accessor for MainActor();
  static Semantics.v6.getter();
  return static MainActor.assumeIsolatedIfLinkedOnOrAfter<A>(_:context:_:file:line:)();
}

uint64_t static AccessibilityRotorContent._entryCount(inputs:)(uint64_t *a1)
{
  return static AccessibilityRotorContent._entryCount(inputs:)(a1);
}

{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  int v10;
  uint64_t v11;
  long long v12;
  long long v13;
  int v14;

  uint64_t v2 = *a1;
  unsigned int v3 = *((_DWORD *)a1 + 2);
  uint64_t v4 = a1[2];
  uint64_t v5 = *((_DWORD *)a1 + 14);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = v2;
  unsigned int v10 = v3;
  uint64_t v11 = v4;
  unsigned int v12 = *(_OWORD *)(a1 + 3);
  uint64_t v13 = *(_OWORD *)(a1 + 5);
  size_t v14 = v5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(&v9, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t specialized closure #1 in static AccessibilityRotorContent._makeEntries(content:inputs:)()
{
  uint64_t v0 = MEMORY[0x1E4FBC248];
  type metadata accessor for Attribute<AccessibilityRotorEntryList>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<Never>, MEMORY[0x1E4FBC248], MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  swift_getKeyPath();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for Focus<Never, Never>(0, (unint64_t *)&lazy cache variable for type metadata for Focus<Never, Never>, v0, v0, MEMORY[0x1E4F4E760]);
  lazy protocol witness table accessor for type Focus<Never, Never> and conformance Focus<A, B>();
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  _GraphValue.init(_:)();
  type metadata accessor for MainActor();
  static Semantics.v6.getter();
  return static MainActor.assumeIsolatedIfLinkedOnOrAfter<A>(_:context:_:file:line:)();
}

uint64_t closure #1 in static AccessibilityRotorContent._makeEntries(content:inputs:)(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for _GraphValue();
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  LODWORD(v20[0]) = _GraphValue.value.getter();
  *((void *)&v20[0] + 1) = swift_getKeyPath();
  uint64_t v15 = AssociatedTypeWitness;
  uint64_t v16 = type metadata accessor for Focus();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for Attribute();
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v20, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)v14, v16, MEMORY[0x1E4FBC248], v8, MEMORY[0x1E4FBC278], v9);
  swift_release();
  swift_release();
  _GraphValue.init(_:)();
  long long v10 = a2[1];
  v20[0] = *a2;
  v20[1] = v10;
  v21[0] = a2[2];
  *(_OWORD *)((char *)v21 + 12) = *(_OWORD *)((char *)a2 + 44);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(int *, _OWORD *, uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(&v13, v20, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t partial apply for closure #1 in static AccessibilityRotorContent._makeEntries(content:inputs:)()
{
  return closure #1 in static AccessibilityRotorContent._makeEntries(content:inputs:)(*(unsigned int *)(v0 + 32), *(_OWORD **)(v0 + 40), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t protocol witness for static AccessibilityRotorContent._makeEntries(content:inputs:) in conformance Never()
{
  return static MainActor.assumeIsolatedIfLinkedOnOrAfter<A>(_:context:_:file:line:)();
}

uint64_t protocol witness for static AccessibilityRotorContent._entryCount(inputs:) in conformance Never(uint64_t *a1)
{
  int v1 = *((_DWORD *)a1 + 2);
  uint64_t v2 = a1[2];
  int v3 = *((_DWORD *)a1 + 14);
  uint64_t v5 = *a1;
  int v6 = v1;
  uint64_t v7 = v2;
  long long v8 = *(_OWORD *)(a1 + 3);
  long long v9 = *(_OWORD *)(a1 + 5);
  int v10 = v3;
  return protocol witness for static AccessibilityRotorContent._entryCount(inputs:) in conformance Never(&v5);
}

void protocol witness for AccessibilityRotorContent.body.getter in conformance Never()
{
}

uint64_t AccessibilityOptionalRotorContent.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, 1, 1, a2);
  uint64_t v5 = type metadata accessor for Optional();
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(a3, a1, v5);
}

uint64_t AccessibilityTupleRotorContent.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t AccessibilityTupleRotorContent.value.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*AccessibilityTupleRotorContent.value.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AccessibilityTupleRotorContent.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

void AccessibilityTupleRotorContent.body.getter()
{
}

uint64_t static AccessibilityTupleRotorContent.visitTypes(_:)(void (*a1)(uint64_t, long long *))
{
  lazy protocol witness table accessor for type AccessibilityRotorContentDescriptor and conformance AccessibilityRotorContentDescriptor();
  static TupleDescriptor.tupleDescription(_:)();
  uint64_t v2 = *(void *)(v7 + 16);
  if (v2)
  {
    int v3 = (long long *)(v7 + 40);
    do
    {
      long long v4 = *v3;
      int v3 = (long long *)((char *)v3 + 24);
      uint64_t v5 = AGTupleElementOffset();
      long long v7 = v4;
      a1(v5, &v7);
      --v2;
    }
    while (v2);
  }

  return swift_bridgeObjectRelease();
}

uint64_t static AccessibilityTupleRotorContent._entryCount(inputs:)()
{
  return 0;
}

void partial apply for closure #1 in static AccessibilityTupleRotorContent._entryCount(inputs:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = type metadata accessor for AccessibilityTupleRotorContent.CountEntries();
  AccessibilityTupleRotorContent.CountEntries.visit<A>(type:)(v2, v4, v2, v3);
}

void AccessibilityTupleRotorContent.CountEntries.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (v4[9]) {
    goto LABEL_5;
  }
  uint64_t v5 = v4[8];
  int v6 = *((_DWORD *)v4 + 2);
  uint64_t v7 = v4[2];
  int v8 = *((_DWORD *)v4 + 14);
  uint64_t v13 = *v4;
  int v14 = v6;
  uint64_t v15 = v7;
  long long v16 = *(_OWORD *)(v4 + 3);
  long long v17 = *(_OWORD *)(v4 + 5);
  int v18 = v8;
  uint64_t v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a4 + 32))(&v13, a3, a4);
  if (v10)
  {
LABEL_5:
    uint64_t v11 = 0;
    char v12 = 1;
    goto LABEL_6;
  }
  uint64_t v11 = v5 + v9;
  if (!__OFADD__(v5, v9))
  {
    char v12 = 0;
LABEL_6:
    v4[8] = v11;
    *((unsigned char *)v4 + 72) = v12;
    return;
  }
  __break(1u);
}

void protocol witness for AccessibilityRotorContentTypeVisitor.visit<A>(type:) in conformance AccessibilityTupleRotorContent<A>.CountEntries(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t static AccessibilityTupleRotorContent._makeEntries(content:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  int v5 = *a1;
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  int v11 = *((_DWORD *)a2 + 14);
  int v28 = v5;
  uint64_t v29 = v6;
  int v30 = v7;
  uint64_t v31 = v8;
  long long v32 = *(_OWORD *)(a2 + 3);
  uint64_t v33 = v9;
  uint64_t v34 = v10;
  uint64_t v12 = MEMORY[0x1E4FBC860];
  int v35 = v11;
  uint64_t v36 = MEMORY[0x1E4FBC860];
  uint64_t v37 = 0;
  v27[3] = a3;
  v27[4] = &v28;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v13 = static AccessibilityTupleRotorContent.visitTypes(_:)((void (*)(uint64_t, long long *))partial apply for closure #1 in static AccessibilityTupleRotorContent._makeEntries(content:inputs:));
  uint64_t v14 = v36;
  int64_t v15 = *(void *)(v36 + 16);
  if (v15)
  {
    v27[0] = v12;
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15, 0);
    uint64_t v16 = 0;
    unint64_t v17 = *(void *)(v12 + 16);
    do
    {
      int v18 = *(_DWORD *)(v14 + 4 * v16 + 32);
      v27[0] = v12;
      unint64_t v19 = *(void *)(v12 + 24);
      if (v17 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v17 + 1, 1);
        uint64_t v12 = v27[0];
      }
      ++v16;
      *(void *)(v12 + 16) = v17 + 1;
      *(_DWORD *)(v12 + 4 * v17++ + 32) = v18;
    }
    while (v15 != v16);
    uint64_t v13 = swift_bridgeObjectRelease();
  }
  v27[0] = v12;
  MEMORY[0x1F4188790](v13);
  uint64_t v24 = type metadata accessor for AccessibilityTupleRotorContent.MergeLists();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<AccessibilityRotorEntryList>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<AccessibilityRotorEntryList>, (uint64_t)&type metadata for AccessibilityRotorEntryList, MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v27, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_16, (uint64_t)&v23, v24, MEMORY[0x1E4FBC248], v20, MEMORY[0x1E4FBC278], v21);
  swift_bridgeObjectRelease();
  *a4 = v26;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t partial apply for closure #1 in static AccessibilityTupleRotorContent._makeEntries(content:inputs:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *(void *)(*(void *)(v2 + 24) + 80) = a1;
  uint64_t Lists = type metadata accessor for AccessibilityTupleRotorContent.MakeLists();
  return AccessibilityTupleRotorContent.MakeLists.visit<A>(type:)(v3, Lists, v3, v4);
}

uint64_t AccessibilityTupleRotorContent.MakeLists.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  LODWORD(v17) = *(_DWORD *)v4;
  type metadata accessor for AccessibilityTupleRotorContent();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  _GraphValue.init(_:)();
  int v8 = *(_DWORD *)(v4 + 16);
  uint64_t v9 = *(void *)(v4 + 24);
  int v10 = *(_DWORD *)(v4 + 64);
  uint64_t v17 = *(void *)(v4 + 8);
  int v18 = v8;
  uint64_t v19 = v9;
  long long v11 = *(_OWORD *)(v4 + 48);
  long long v20 = *(_OWORD *)(v4 + 32);
  long long v21 = v11;
  int v22 = v10;
  (*(void (**)(uint64_t *__return_ptr, unsigned char *, uint64_t *, uint64_t, uint64_t))(a4 + 24))(&v24, v23, &v17, a3, a4);
  int v12 = v24;
  uint64_t v13 = *(void *)(v4 + 72);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v13 + 16) + 1, 1, (char *)v13);
    uint64_t v13 = result;
  }
  unint64_t v16 = *(void *)(v13 + 16);
  unint64_t v15 = *(void *)(v13 + 24);
  if (v16 >= v15 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, (char *)v13);
    uint64_t v13 = result;
  }
  *(void *)(v13 + 16) = v16 + 1;
  *(_DWORD *)(v13 + 4 * v16 + 32) = v12;
  *(void *)(v5 + 72) = v13;
  return result;
}

uint64_t protocol witness for AccessibilityRotorContentTypeVisitor.visit<A>(type:) in conformance AccessibilityTupleRotorContent<A>.MakeLists(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AccessibilityTupleRotorContent.MakeLists.visit<A>(type:)(a1, a4, a2, a3);
}

uint64_t AccessibilityTupleRotorContent.MergeLists.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  if (v3)
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v5 = 0;
    uint64_t v4 = v13;
    do
    {
      uint64_t Value = AGGraphGetValue();
      outlined init with copy of DropInfo(Value, (uint64_t)&v14);
      unint64_t v8 = *(void *)(v13 + 16);
      unint64_t v7 = *(void *)(v13 + 24);
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
      }
      ++v5;
      *(void *)(v13 + 16) = v8 + 1;
      uint64_t v9 = v13 + 40 * v8;
      long long v10 = v14;
      long long v11 = v15;
      *(void *)(v9 + 64) = v16;
      *(_OWORD *)(v9 + 32) = v10;
      *(_OWORD *)(v9 + 48) = v11;
    }
    while (v3 != v5);
    swift_bridgeObjectRelease();
  }
  *((void *)&v15 + 1) = &unk_1ED41D2A8;
  unint64_t v16 = &protocol witness table for CombineGenerator;
  *(void *)&long long v14 = v4;
  return outlined init with take of OptionalBinaryInteger(&v14, a2);
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityTupleRotorContent<A>.MergeLists@<X0>(uint64_t a1@<X8>)
{
  return AccessibilityTupleRotorContent.MergeLists.value.getter(*v1, a1);
}

uint64_t protocol witness for static AccessibilityRotorContent._makeEntries(content:inputs:) in conformance AccessibilityTupleRotorContent<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  return static AccessibilityTupleRotorContent._makeEntries(content:inputs:)(a1, a2, *(void *)(a3 + 16), a4);
}

uint64_t protocol witness for static AccessibilityRotorContent._entryCount(inputs:) in conformance AccessibilityTupleRotorContent<A>()
{
  return static AccessibilityTupleRotorContent._entryCount(inputs:)();
}

void protocol witness for AccessibilityRotorContent.body.getter in conformance AccessibilityTupleRotorContent<A>()
{
}

uint64_t protocol witness for static TupleDescriptor.typeCache.getter in conformance AccessibilityRotorContentDescriptor()
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static TupleDescriptor.typeCache.setter in conformance AccessibilityRotorContentDescriptor(uint64_t a1)
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  static AccessibilityRotorContentDescriptor.typeCache = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for static TupleDescriptor.typeCache.modify in conformance AccessibilityRotorContentDescriptor())()
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t static ForEach<>._entryCount(inputs:)()
{
  return 0;
}

uint64_t static ForEach<>._makeEntries(content:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _DWORD *a9@<X8>)
{
  uint64_t v35 = a8;
  uint64_t v36 = a9;
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  int v12 = *a1;
  uint64_t v13 = *a2;
  int v14 = *((_DWORD *)a2 + 2);
  uint64_t v15 = a2[2];
  uint64_t v16 = a2[3];
  uint64_t v17 = a2[4];
  uint64_t v19 = a2[5];
  uint64_t v18 = a2[6];
  int v32 = *((_DWORD *)a2 + 14);
  LODWORD(v37) = v12;
  uint64_t v43 = a3;
  uint64_t v44 = a4;
  uint64_t v45 = a5;
  uint64_t v46 = a6;
  uint64_t v33 = a6;
  uint64_t v34 = a7;
  uint64_t v47 = a7;
  type metadata accessor for ForEach();
  type metadata accessor for _GraphValue();
  int v20 = _GraphValue.value.getter();
  id v21 = (id)AGSubgraphGetCurrent();
  if (!v21) {
    __break(1u);
  }
  int v22 = v21;
  LODWORD(v43) = v20;
  uint64_t v44 = v13;
  LODWORD(v45) = v14;
  uint64_t v46 = v15;
  uint64_t v47 = v16;
  uint64_t v48 = v17;
  uint64_t v49 = v19;
  uint64_t v50 = v18;
  int v51 = v32;
  id v52 = v21;
  MEMORY[0x1F4188790](v21);
  uint64_t v37 = a3;
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  uint64_t v40 = v33;
  uint64_t v41 = v34;
  uint64_t v42 = v35;
  uint64_t List = type metadata accessor for ForEach<>.MakeList();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<AccessibilityRotorEntryList>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<AccessibilityRotorEntryList>, (uint64_t)&type metadata for AccessibilityRotorEntryList, MEMORY[0x1E4F4E740]);
  uint64_t v24 = v23;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  id v25 = v22;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v43, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v29, List, MEMORY[0x1E4FBC248], v24, MEMORY[0x1E4FBC278], v26);
  uint64_t v27 = v52;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  *uint64_t v36 = v37;
  return result;
}

id ForEach<>.MakeList.value.getter@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v33 = a2;
  uint64_t v4 = a1[2];
  uint64_t v31 = a1[3];
  uint64_t v32 = v4;
  unint64_t v5 = a1[5];
  unint64_t v30 = a1[4];
  unint64_t v29 = v5;
  unint64_t v28 = a1[6];
  uint64_t v41 = v4;
  uint64_t v42 = v31;
  unint64_t v43 = v30;
  unint64_t v44 = v5;
  unint64_t v45 = v28;
  uint64_t v6 = type metadata accessor for ForEach();
  MEMORY[0x1F4188790](v6 - 8);
  id v25 = &v22[-v7];
  int v27 = *(_DWORD *)v2;
  uint64_t v8 = *(void *)(v2 + 8);
  int v24 = *(_DWORD *)(v2 + 16);
  unint64_t v9 = *(void *)(v2 + 24);
  unsigned int v10 = *(_DWORD *)(v2 + 36);
  unsigned int v23 = *(_DWORD *)(v2 + 32);
  unsigned int v11 = *(_DWORD *)(v2 + 40);
  unsigned int v12 = *(_DWORD *)(v2 + 44);
  unint64_t v13 = *(void *)(v2 + 48);
  unint64_t v14 = *(void *)(v2 + 56);
  int v15 = *(_DWORD *)(v2 + 64);
  uint64_t v34 = *(void **)(v2 + 72);
  LODWORD(v41) = v27;
  uint64_t v42 = v8;
  uint64_t v26 = v8;
  LODWORD(v43) = v24;
  unint64_t v44 = v9;
  unint64_t v45 = __PAIR64__(v10, v23);
  unint64_t v46 = __PAIR64__(v12, v11);
  unint64_t v47 = v13;
  unint64_t v48 = v14;
  int v49 = v15;
  uint64_t v50 = (uint64_t)v34;
  ForEach<>.PreferenceTransform.forEach.getter((uint64_t)&v22[-v7]);
  uint64_t v41 = v8;
  LODWORD(v42) = v24;
  unint64_t v43 = v9;
  unint64_t v44 = __PAIR64__(v10, v23);
  unint64_t v45 = __PAIR64__(v12, v11);
  unint64_t v46 = v13;
  unint64_t v47 = v14;
  LODWORD(v48) = v15;
  uint64_t v16 = a1[7];
  uint64_t v35 = v32;
  uint64_t v36 = v31;
  unint64_t v37 = v30;
  unint64_t v38 = v29;
  unint64_t v39 = v28;
  uint64_t v40 = v16;
  uint64_t v17 = type metadata accessor for ForEach<>.Generator();
  uint64_t v18 = v33;
  v33[3] = v17;
  v18[4] = (uint64_t)&protocol witness table for ForEach<A, B, C><>.Generator;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v18);
  ForEach<>.Generator.init(forEach:inputs:attribute:parentSubgraph:)((uint64_t)v25, &v41, v27, (uint64_t)v34, (uint64_t)boxed_opaque_existential_1);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v20 = v34;

  return v20;
}

__n128 ForEach<>.Generator.init(forEach:inputs:attribute:parentSubgraph:)@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = *a2;
  uint64_t v16 = a2[2];
  int v17 = *((_DWORD *)a2 + 2);
  int v18 = *((_DWORD *)a2 + 14);
  uint64_t v9 = type metadata accessor for ForEach();
  __n128 v15 = *(__n128 *)(a2 + 5);
  uint64_t v10 = a2[3];
  uint64_t v11 = a2[4];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(a5, a1, v9);
  unsigned int v12 = (int *)type metadata accessor for ForEach<>.Generator();
  uint64_t v13 = a5 + v12[17];
  *(void *)uint64_t v13 = v8;
  *(_DWORD *)(v13 + 8) = v17;
  *(void *)(v13 + 16) = v16;
  *(void *)(v13 + 24) = v10;
  *(void *)(v13 + 32) = v11;
  __n128 result = v15;
  *(__n128 *)(v13 + 40) = v15;
  *(_DWORD *)(v13 + 56) = v18;
  *(_DWORD *)(a5 + v12[18]) = a3;
  *(void *)(a5 + v12[19]) = a4;
  return result;
}

void ForEach<>.Generator.forEachContentList(_:)(uint64_t (*a1)(void *), uint64_t a2, void *a3)
{
  uint64_t v35 = a1;
  uint64_t v36 = a2;
  uint64_t v42 = a3[5];
  uint64_t v5 = a3[2];
  uint64_t v40 = *(void *)(*(void *)(*(void *)(v42 + 8) + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v28 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v27 - v7;
  uint64_t v9 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v27 - v10;
  MEMORY[0x1F4188790](v12);
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v29 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  __n128 v15 = (char *)&v27 - v14;
  id v16 = (id)AGSubgraphGetGraph();
  id v41 = (id)AGSubgraphCreate2();

  uint64_t v17 = a3[3];
  uint64_t v18 = a3[4];
  unint64_t v37 = a3;
  uint64_t v19 = a3[6];
  v43[0] = v5;
  v43[1] = v17;
  uint64_t v32 = v18;
  uint64_t v33 = v17;
  v43[2] = v18;
  v43[3] = v42;
  uint64_t v31 = v19;
  v43[4] = v19;
  type metadata accessor for ForEach();
  uint64_t v38 = v3;
  ForEach.data.getter();
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v34 = v5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unint64_t v39 = v15;
  uint64_t v40 = v13;
  uint64_t v30 = AssociatedConformanceWitness;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v21 = v28;
  int v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
  if (v22(v11, 1, AssociatedTypeWitness) != 1)
  {
    unsigned int v23 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    int v24 = (void (**)(char *, uint64_t))(v21 + 8);
    do
    {
      v23(v8, v11, AssociatedTypeWitness);
      AGGraphClearUpdate();
      id v25 = (id)AGSubgraphGetCurrent();
      AGSubgraphSetCurrent();
      closure #1 in ForEach<>.Generator.forEachContentList(_:)(v38, (uint64_t)v8, v34, v33, v32, v42, v31, v37[7], (uint64_t)v43);
      AGSubgraphSetCurrent();

      AGGraphSetUpdate();
      (*v24)(v8, AssociatedTypeWitness);
      char v26 = v35(v43);
      outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v43);
      if ((v26 & 1) == 0) {
        break;
      }
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v22(v11, 1, AssociatedTypeWitness) != 1);
  }
  (*(void (**)(char *, uint64_t))(v29 + 8))(v39, v40);
}

uint64_t closure #1 in ForEach<>.Generator.forEachContentList(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  *(void *)&long long v38 = a6;
  *((void *)&v38 + 1) = a7;
  uint64_t v39 = a1;
  uint64_t v40 = a9;
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  int v20 = (char *)&v37 - v19;
  uint64_t v43 = v21;
  uint64_t v44 = v22;
  uint64_t v45 = v23;
  *(void *)&long long v46 = v24;
  *((void *)&v46 + 1) = v25;
  char v26 = *(void (**)(uint64_t))(a1 + *(int *)(type metadata accessor for ForEach() + 60));
  swift_retain();
  v26(a2);
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v17, v20, a5);
  *(void *)&v42[5] = a5;
  uint64_t v27 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v17, (uint64_t)partial apply for closure #1 in Attribute.init(value:), (uint64_t)&v42[1], a5, MEMORY[0x1E4FBC248], v27, MEMORY[0x1E4FBC278], v28);
  uint64_t v29 = *(void (**)(char *, uint64_t))(v15 + 8);
  v29(v17, a5);
  _GraphValue.init(_:)();
  uint64_t v43 = a3;
  uint64_t v44 = a4;
  uint64_t v45 = a5;
  long long v46 = v38;
  *(void *)&long long v47 = a8;
  uint64_t v30 = (uint64_t *)(v39 + *(int *)(type metadata accessor for ForEach<>.Generator() + 68));
  int v31 = *((_DWORD *)v30 + 2);
  uint64_t v32 = v30[2];
  int v33 = *((_DWORD *)v30 + 14);
  uint64_t v43 = *v30;
  LODWORD(v44) = v31;
  uint64_t v45 = v32;
  long long v34 = *(_OWORD *)(v30 + 5);
  long long v46 = *(_OWORD *)(v30 + 3);
  long long v47 = v34;
  int v48 = v33;
  (*(void (**)(_DWORD *__return_ptr, char *, uint64_t *, uint64_t, uint64_t))(a8 + 24))(v42, v41, &v43, a5, a8);
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of DropInfo(Value, v40);
  return ((uint64_t (*)(char *, uint64_t))v29)(v20, a5);
}

uint64_t ForEach<>.Generator.visitEntries<A>(applying:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v17 = 1;
  uint64_t v16 = 0;
  v6[1] = *(_OWORD *)(a3 + 16);
  uint64_t v7 = *(void *)(a3 + 32);
  uint64_t v8 = a4;
  long long v9 = *(_OWORD *)(a3 + 40);
  uint64_t v10 = *(void *)(a3 + 56);
  uint64_t v11 = a5;
  uint64_t v12 = a2;
  uint64_t v13 = &v16;
  uint64_t v14 = a1;
  uint64_t v15 = &v17;
  ForEach<>.Generator.forEachContentList(_:)(partial apply for closure #1 in ForEach<>.Generator.visitEntries<A>(applying:from:), (uint64_t)v6, (void *)a3);
  return v17;
}

uint64_t closure #1 in ForEach<>.Generator.visitEntries<A>(applying:from:)(void *a1, uint64_t *a2, void *a3, uint64_t a4, unsigned char *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v18 = a1[3];
  uint64_t v19 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v18);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 16))(v18, v19);
  uint64_t v21 = *a3;
  uint64_t v22 = *a3 + result;
  BOOL v23 = __OFADD__(*a3, result);
  if (__OFADD__(*a3, result))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v24 = *a2;
  if (*a2 >= v22)
  {
LABEL_11:
    if (!v23)
    {
      *a3 = v22;
      return 1;
    }
    goto LABEL_16;
  }
  if (__OFSUB__(v24, v21))
  {
LABEL_17:
    __break(1u);
    return result;
  }
  uint64_t v25 = result;
  uint64_t v28 = (v24 - v21) & ~((v24 - v21) >> 63);
  uint64_t v26 = a1[3];
  uint64_t v27 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v26);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 8))(a4, &v28, a9, a13, v26, v27);
  if (result)
  {
    uint64_t v22 = *a3 + v25;
    BOOL v23 = __OFADD__(*a3, v25);
    goto LABEL_11;
  }
  uint64_t result = 0;
  *a5 = 0;
  return result;
}

uint64_t ForEach<>.Generator.count.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v8 + 32);
  uint64_t v10 = (uint64_t *)(v2 + *(int *)(v8 + 68));
  int v11 = *((_DWORD *)v10 + 2);
  uint64_t v12 = v10[2];
  int v13 = *((_DWORD *)v10 + 14);
  uint64_t v20 = *v10;
  LODWORD(v21) = v11;
  uint64_t v22 = v12;
  long long v23 = *(_OWORD *)(v10 + 3);
  long long v24 = *(_OWORD *)(v10 + 5);
  int v25 = v13;
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(*(void *)(v8 + 56) + 32))(&v20, v9);
  if ((v15 & 1) == 0)
  {
    uint64_t v16 = result;
    uint64_t v17 = *(void *)(a1 + 24);
    uint64_t v20 = v4;
    uint64_t v21 = v17;
    uint64_t v22 = v9;
    long long v19 = *(_OWORD *)(a1 + 40);
    long long v23 = v19;
    type metadata accessor for ForEach();
    ForEach.data.getter();
    uint64_t v18 = dispatch thunk of Collection.count.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t result = v18 * v16;
    if ((unsigned __int128)(v18 * (__int128)v16) >> 64 == (v18 * v16) >> 63) {
      return result;
    }
    __break(1u);
  }
  uint64_t v20 = 0;
  MEMORY[0x1F4188790](result);
  *((void *)&v19 - 2) = &v20;
  ForEach<>.Generator.forEachContentList(_:)(partial apply for closure #1 in ForEach<>.Generator.count.getter, (uint64_t)(&v19 - 2), (void *)a1);
  return v20;
}

{
  return TableRowForEachState.count()(a1);
}

uint64_t closure #1 in ForEach<>.Generator.count.getter(void *a1, void *a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  if (__OFADD__(*a2, result))
  {
    __break(1u);
  }
  else
  {
    *a2 += result;
    return 1;
  }
  return result;
}

uint64_t protocol witness for AccessibilityRotorEntryGenerator.visitEntries<A>(applying:from:) in conformance ForEach<A, B, C><>.Generator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return ForEach<>.Generator.visitEntries<A>(applying:from:)(a1, a2, a5, a3, a4);
}

uint64_t protocol witness for static AccessibilityRotorContent._makeEntries(content:inputs:) in conformance <> ForEach<A, B, C>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X8>)
{
  return static ForEach<>._makeEntries(content:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], *(void *)(a4 - 8), a5);
}

void protocol witness for AccessibilityRotorContent.body.getter in conformance <> ForEach<A, B, C>()
{
}

uint64_t ForEach<>.init(_:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v20[0] = a2;
  v20[1] = a3;
  uint64_t v15 = *(void *)(a4 - 8);
  double v16 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))((char *)v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v18, v16);
  _OWORD v20[2] = a4;
  v20[3] = a5;
  v20[4] = a6;
  v20[5] = a7;
  v20[6] = a8;
  v20[7] = a9;
  v20[9] = swift_getKeyPath();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  ForEach.init(_:idGenerator:content:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(a1, a4);
}

void AccessibilityRotorEntry.body.getter()
{
}

uint64_t static AccessibilityRotorEntry._makeEntries(content:inputs:)@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  int v5 = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 40);
  v17[0] = *a1;
  type metadata accessor for AccessibilityRotorEntry();
  type metadata accessor for _GraphValue();
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  v17[2] = v5;
  uint64_t v18 = v6;
  uint64_t v19 = v8;
  uint64_t v20 = v9;
  uint64_t v21 = v7;
  v17[0] = _GraphValue.value.getter();
  v17[1] = _GraphInputs.environment.getter();
  uint64_t List = type metadata accessor for AccessibilityRotorEntry.MakeList();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<AccessibilityRotorEntryList>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<AccessibilityRotorEntryList>, (uint64_t)&type metadata for AccessibilityRotorEntryList, MEMORY[0x1E4F4E740]);
  uint64_t result = _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v17, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v14, List, MEMORY[0x1E4FBC248], v10, MEMORY[0x1E4FBC278], v11);
  *a3 = v13;
  return result;
}

uint64_t static AccessibilityRotorEntry._entryCount(inputs:)()
{
  return 1;
}

uint64_t AccessibilityRotorEntry.MakeList.entry.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for AccessibilityRotorEntry();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

double AccessibilityRotorEntry.MakeList.value.getter@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for AccessibilityRotorEntry();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  int v5 = (char *)&v11 - v4;
  AccessibilityRotorEntry.MakeList.entry.getter((uint64_t)&v11 - v4);
  _DiscreteSymbolEffectModifier.EffectEnvironment.environment.getter(&v13);
  long long v12 = v13;
  AccessibilityRotorEntry.resolveForList(in:)(&v12, v2, (uint64_t)v14);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  a1[3] = type metadata accessor for AccessibilityRotorEntry.Generator();
  a1[4] = (uint64_t)&protocol witness table for AccessibilityRotorEntry<A>.Generator;
  uint64_t v6 = swift_allocObject();
  *a1 = v6;
  long long v7 = v18;
  *(_OWORD *)(v6 + 80) = v17;
  *(_OWORD *)(v6 + 96) = v7;
  *(_OWORD *)(v6 + 112) = v19;
  *(unsigned char *)(v6 + 128) = v20;
  long long v8 = v14[1];
  *(_OWORD *)(v6 + 16) = v14[0];
  *(_OWORD *)(v6 + 32) = v8;
  double result = *(double *)&v15;
  long long v10 = v16;
  *(_OWORD *)(v6 + 48) = v15;
  *(_OWORD *)(v6 + 64) = v10;
  return result;
}

double protocol witness for Rule.value.getter in conformance AccessibilityRotorEntry<A>.MakeList@<D0>(uint64_t *a1@<X8>)
{
  return AccessibilityRotorEntry.MakeList.value.getter(a1);
}

uint64_t AccessibilityRotorEntry.Generator.visitEntries<A>(applying:from:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 8))(v5, a4, a5);
  if (__OFADD__(*a2, 1))
  {
    __break(1u);
  }
  else
  {
    ++*a2;
    return result & 1;
  }
  return result;
}

uint64_t protocol witness for AccessibilityRotorEntryGenerator.visitEntries<A>(applying:from:) in conformance AccessibilityRotorEntry<A>.Generator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return AccessibilityRotorEntry.Generator.visitEntries<A>(applying:from:)(a1, a2, a5, a3, a4);
}

uint64_t protocol witness for static AccessibilityRotorContent._makeEntries(content:inputs:) in conformance AccessibilityRotorEntry<A>@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  return static AccessibilityRotorEntry._makeEntries(content:inputs:)(a1, a2, a3);
}

void protocol witness for AccessibilityRotorContent.body.getter in conformance AccessibilityRotorEntry<A>()
{
}

uint64_t AccessibilityOptionalRotorContent.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t AccessibilityOptionalRotorContent.content.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*AccessibilityOptionalRotorContent.content.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void AccessibilityOptionalRotorContent.body.getter()
{
}

uint64_t static AccessibilityOptionalRotorContent._makeEntries(content:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  int v5 = *((_DWORD *)a2 + 2);
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v10 = a2[5];
  uint64_t v9 = a2[6];
  int v11 = *((_DWORD *)a2 + 14);
  int v22 = *a1;
  type metadata accessor for AccessibilityOptionalRotorContent();
  type metadata accessor for _GraphValue();
  int v12 = _GraphValue.value.getter();
  id v13 = (id)AGSubgraphGetCurrent();
  if (!v13) {
    __break(1u);
  }
  int v22 = v12;
  uint64_t v23 = v4;
  int v24 = v5;
  uint64_t v25 = v6;
  uint64_t v26 = v7;
  uint64_t v27 = v8;
  uint64_t v28 = v10;
  uint64_t v29 = v9;
  int v30 = v11;
  id v31 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t List = type metadata accessor for AccessibilityOptionalRotorContent.MakeList();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<AccessibilityRotorEntryList>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<AccessibilityRotorEntryList>, (uint64_t)&type metadata for AccessibilityRotorEntryList, MEMORY[0x1E4F4E740]);
  uint64_t v15 = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v22, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v18, List, MEMORY[0x1E4FBC248], v15, MEMORY[0x1E4FBC278], v16);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  *a3 = v21;
  return result;
}

uint64_t AccessibilityOptionalRotorContent.MakeList.optionalContent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for AccessibilityOptionalRotorContent();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

id AccessibilityOptionalRotorContent.MakeList.value.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v27 = *(void *)(a1 + 16);
  uint64_t v28 = a2;
  uint64_t v25 = a1;
  uint64_t v26 = v3;
  uint64_t v4 = type metadata accessor for AccessibilityOptionalRotorContent();
  MEMORY[0x1F4188790](v4 - 8);
  int v24 = *(_DWORD *)v2;
  uint64_t v5 = *(void *)(v2 + 8);
  int v21 = *(_DWORD *)(v2 + 16);
  unint64_t v6 = *(void *)(v2 + 24);
  unsigned int v7 = *(_DWORD *)(v2 + 32);
  unsigned int v8 = *(_DWORD *)(v2 + 36);
  unsigned int v9 = *(_DWORD *)(v2 + 40);
  unsigned int v10 = *(_DWORD *)(v2 + 44);
  unint64_t v12 = *(void *)(v2 + 48);
  unint64_t v11 = *(void *)(v2 + 56);
  int v13 = *(_DWORD *)(v2 + 64);
  uint64_t v29 = *(void **)(v2 + 72);
  LODWORD(v30) = v24;
  uint64_t v31 = v5;
  int v22 = &v20[-v14];
  uint64_t v23 = v5;
  LODWORD(v32) = v21;
  unint64_t v33 = v6;
  unsigned int v34 = v7;
  unsigned int v35 = v8;
  unint64_t v36 = __PAIR64__(v10, v9);
  unint64_t v37 = v12;
  unint64_t v38 = v11;
  int v39 = v13;
  uint64_t v40 = (uint64_t)v29;
  AccessibilityOptionalRotorContent.MakeList.optionalContent.getter((uint64_t)&v20[-v14]);
  uint64_t v30 = v5;
  LODWORD(v31) = v21;
  unint64_t v32 = v6;
  unint64_t v33 = __PAIR64__(v8, v7);
  unsigned int v34 = v9;
  unsigned int v35 = v10;
  unint64_t v36 = v12;
  unint64_t v37 = v11;
  LODWORD(v38) = v13;
  uint64_t v15 = type metadata accessor for AccessibilityOptionalRotorContent.Generator();
  uint64_t v16 = v28;
  v28[3] = v15;
  v16[4] = (uint64_t)&protocol witness table for AccessibilityOptionalRotorContent<A>.Generator;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  AccessibilityOptionalRotorContent.Generator.init(optionalContent:inputs:attribute:parentSubgraph:)((uint64_t)v22, &v30, v24, (uint64_t)v29, (uint64_t)boxed_opaque_existential_1);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v18 = v29;

  return v18;
}

__n128 AccessibilityOptionalRotorContent.Generator.init(optionalContent:inputs:attribute:parentSubgraph:)@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *a2;
  int v10 = *((_DWORD *)a2 + 2);
  uint64_t v11 = a2[2];
  int v12 = *((_DWORD *)a2 + 14);
  uint64_t v13 = type metadata accessor for AccessibilityOptionalRotorContent();
  __n128 v19 = *(__n128 *)(a2 + 5);
  uint64_t v14 = a2[3];
  uint64_t v15 = a2[4];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(a5, a1, v13);
  uint64_t v16 = (int *)type metadata accessor for AccessibilityOptionalRotorContent.Generator();
  uint64_t v17 = a5 + v16[9];
  *(void *)uint64_t v17 = v9;
  *(_DWORD *)(v17 + 8) = v10;
  *(void *)(v17 + 16) = v11;
  *(void *)(v17 + 24) = v14;
  *(void *)(v17 + 32) = v15;
  __n128 result = v19;
  *(__n128 *)(v17 + 40) = v19;
  *(_DWORD *)(v17 + 56) = v12;
  *(_DWORD *)(a5 + v16[10]) = a3;
  *(void *)(a5 + v16[11]) = a4;
  return result;
}

uint64_t AccessibilityOptionalRotorContent.Generator.someContentList.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v26 = a2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v25 - v8;
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = type metadata accessor for AccessibilityOptionalRotorContent();
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v25 - v12;
  uint64_t v14 = *(void *)(v5 - 8);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v19 + 16))(v13, v3, v16);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v13, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v9, 1, v5) == 1)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    int v21 = (_OWORD *)v26;
    *(void *)(v26 + 32) = 0;
    *int v21 = 0u;
    v21[1] = 0u;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v9, v5);
    id v22 = (id)AGSubgraphGetGraph();
    uint64_t v23 = (void *)AGSubgraphCreate2();

    AGGraphClearUpdate();
    id v24 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #1 in AccessibilityOptionalRotorContent.Generator.someContentList.getter((uint64_t)v18, v3, v5, v10, v26);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, v5);
  }
  return result;
}

uint64_t closure #1 in AccessibilityOptionalRotorContent.Generator.someContentList.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(a3 - 8);
  double v10 = MEMORY[0x1F4188790](a1);
  uint64_t v12 = &v23[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 4];
  (*(void (**)(char *, double))(v9 + 16))(v12, v10);
  *(void *)&v24[5] = a3;
  uint64_t v13 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v12, (uint64_t)closure #1 in Attribute.init(value:)partial apply, (uint64_t)&v24[1], a3, MEMORY[0x1E4FBC248], v13, MEMORY[0x1E4FBC278], v14);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, a3);
  _GraphValue.init(_:)();
  uint64_t v15 = (uint64_t *)(a2 + *(int *)(type metadata accessor for AccessibilityOptionalRotorContent.Generator() + 36));
  int v16 = *((_DWORD *)v15 + 2);
  uint64_t v17 = v15[2];
  int v18 = *((_DWORD *)v15 + 14);
  uint64_t v25 = *v15;
  int v26 = v16;
  uint64_t v27 = v17;
  long long v19 = *(_OWORD *)(v15 + 5);
  long long v28 = *(_OWORD *)(v15 + 3);
  long long v29 = v19;
  int v30 = v18;
  (*(void (**)(_DWORD *__return_ptr, unsigned char *, uint64_t *, uint64_t, uint64_t))(a4 + 24))(v24, v23, &v25, a3, a4);
  uint64_t Value = AGGraphGetValue();
  return outlined init with copy of DropInfo(Value, a5);
}

uint64_t AccessibilityOptionalRotorContent.Generator.count.getter(uint64_t a1)
{
  AccessibilityOptionalRotorContent.Generator.someContentList.getter(a1, (uint64_t)v8);
  if (v9)
  {
    outlined init with copy of TableColumnList((uint64_t)v8, (uint64_t)v5);
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v8);
    uint64_t v1 = v6;
    uint64_t v2 = v7;
    __swift_project_boxed_opaque_existential_1(v5, v6);
    uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  else
  {
    outlined destroy of AccessibilityRotorEntryList?((uint64_t)v8);
    return 0;
  }
  return v3;
}

uint64_t AccessibilityOptionalRotorContent.Generator.visitEntries<A>(applying:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  AccessibilityOptionalRotorContent.Generator.someContentList.getter(a3, (uint64_t)v16);
  if (v17)
  {
    outlined init with copy of TableColumnList((uint64_t)v16, (uint64_t)v13);
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v16);
    uint64_t v9 = v14;
    uint64_t v10 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    char v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 8))(a1, a2, a4, a5, v9, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    outlined destroy of AccessibilityRotorEntryList?((uint64_t)v16);
    char v11 = 1;
  }
  return v11 & 1;
}

uint64_t protocol witness for AccessibilityRotorEntryGenerator.visitEntries<A>(applying:from:) in conformance AccessibilityOptionalRotorContent<A>.Generator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return AccessibilityOptionalRotorContent.Generator.visitEntries<A>(applying:from:)(a1, a2, a5, a3, a4);
}

uint64_t protocol witness for static AccessibilityRotorContent._makeEntries(content:inputs:) in conformance AccessibilityOptionalRotorContent<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X8>)
{
  return static AccessibilityOptionalRotorContent._makeEntries(content:inputs:)(a1, a2, a3);
}

void protocol witness for AccessibilityRotorContent.body.getter in conformance AccessibilityOptionalRotorContent<A>()
{
}

uint64_t Group<A>.init(content:)(uint64_t a1)
{
  double v1 = MEMORY[0x1F4188790](a1);
  v2(v1);
  return Group.init(_content:)();
}

{
  double v1;
  void (*v2)(double);

  double v1 = MEMORY[0x1F4188790](a1);
  v2(v1);
  return Group.init(_content:)();
}

{
  double v1;
  void (*v2)(double);

  double v1 = MEMORY[0x1F4188790](a1);
  v2(v1);
  return Group.init(_content:)();
}

{
  double v1;
  void (*v2)(double);

  double v1 = MEMORY[0x1F4188790](a1);
  v2(v1);
  return Group.init(_content:)();
}

{
  double v1;
  void (*v2)(double);

  double v1 = MEMORY[0x1F4188790](a1);
  v2(v1);
  return Group.init(_content:)();
}

uint64_t static Group<A>._makeEntries(content:inputs:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2[2];
  int v10 = *((_DWORD *)a2 + 14);
  LODWORD(v15) = *a1;
  type metadata accessor for Group();
  type metadata accessor for _GraphValue();
  long long v14 = *(_OWORD *)(a2 + 5);
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[4];
  _GraphValue.subscript.getter();
  uint64_t v15 = v7;
  int v16 = v8;
  uint64_t v17 = v9;
  uint64_t v18 = v11;
  uint64_t v19 = v12;
  long long v20 = v14;
  int v21 = v10;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t))(a4 + 24))(v22, &v15, a3, a4);
}

uint64_t closure #1 in static Group<A>._makeEntries(content:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v7[2] = type metadata accessor for Group();
  v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t protocol witness for static AccessibilityRotorContent._makeEntries(content:inputs:) in conformance <A> Group<A>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static Group<A>._makeEntries(content:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

void protocol witness for AccessibilityRotorContent.body.getter in conformance <A> Group<A>()
{
}

uint64_t CombineGenerator.count.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = a1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
    while (1)
    {
      outlined init with copy of DropInfo(v2, (uint64_t)v8);
      uint64_t v4 = v9;
      uint64_t v5 = v10;
      __swift_project_boxed_opaque_existential_1(v8, v9);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
      BOOL v7 = __OFADD__(v3, result);
      v3 += result;
      if (v7) {
        break;
      }
      outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v8);
      v2 += 40;
      if (!--v1)
      {
        swift_bridgeObjectRelease();
        return v3;
      }
    }
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t CombineGenerator.visitEntries<A>(applying:from:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a3 + 16);
  if (!v5) {
    return 1;
  }
  uint64_t v9 = a3 + 32;
  swift_bridgeObjectRetain();
  uint64_t v10 = 0;
  while (1)
  {
    outlined init with copy of DropInfo(v9, (uint64_t)v22);
    uint64_t v11 = v23;
    uint64_t v12 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 16))(v11, v12);
    uint64_t v14 = v10 + result;
    if (__OFADD__(v10, result)) {
      break;
    }
    uint64_t v15 = *a2;
    if (*a2 < v14)
    {
      BOOL v16 = __OFSUB__(v15, v10);
      uint64_t v17 = v15 - v10;
      if (v16) {
        goto LABEL_13;
      }
      uint64_t v21 = v17 & ~(v17 >> 63);
      uint64_t v18 = v23;
      uint64_t v19 = v24;
      __swift_project_boxed_opaque_existential_1(v22, v23);
      if (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 8))(a1, &v21, a4, a5, v18, v19) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v22);
        return 0;
      }
    }
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v22);
    v9 += 40;
    uint64_t v10 = v14;
    if (!--v5)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t protocol witness for AccessibilityRotorEntryGenerator.visitEntries<A>(applying:from:) in conformance CombineGenerator(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return CombineGenerator.visitEntries<A>(applying:from:)(a1, a2, *v4, a3, a4);
}

uint64_t protocol witness for AccessibilityRotorEntryGenerator.count.getter in conformance CombineGenerator()
{
  return CombineGenerator.count.getter(*v0);
}

uint64_t type metadata accessor for AccessibilityTupleRotorContent.MergeLists()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ForEach<>.MakeList()
{
  return swift_getGenericMetadata();
}

{
  return swift_getGenericMetadata();
}

uint64_t sub_187B175B0()
{
  return 48;
}

__n128 sub_187B175BC(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t type metadata accessor for AccessibilityRotorEntry.MakeList()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AccessibilityOptionalRotorContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AccessibilityOptionalRotorContent.MakeList()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in static Group<A>._makeEntries(content:inputs:)(uint64_t a1)
{
  return closure #1 in static Group<A>._makeEntries(content:inputs:)(a1, *(void *)(v1 + 16));
}

_UNKNOWN **associated type witness table accessor for AccessibilityRotorContent.Body : AccessibilityRotorContent in Never()
{
  return &protocol witness table for Never;
}

uint64_t dispatch thunk of static AccessibilityRotorContent._makeEntries(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of static AccessibilityRotorContent._entryCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of AccessibilityRotorContent.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

ValueMetadata *type metadata accessor for _AccessibilityRotorEntryInputs()
{
  return &type metadata for _AccessibilityRotorEntryInputs;
}

ValueMetadata *type metadata accessor for _AccessibilityRotorEntryOutputs()
{
  return &type metadata for _AccessibilityRotorEntryOutputs;
}

ValueMetadata *type metadata accessor for AccessibilityRotorContentBuilder()
{
  return &type metadata for AccessibilityRotorContentBuilder;
}

uint64_t getEnumTagSinglePayload for AccessibilityTupleRotorContent(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for AccessibilityTupleRotorContent(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187B17A30);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        BOOL v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for AccessibilityTupleRotorContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for AccessibilityOptionalRotorContent()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityOptionalRotorContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v7 > 0x18)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v8 + 16) & ~v8));
    swift_retain();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t destroy for AccessibilityOptionalRotorContent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v5(a1, v3);
  }
  return result;
}

void *initializeWithCopy for AccessibilityOptionalRotorContent(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithCopy for AccessibilityOptionalRotorContent(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    int v13 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v12 = v6 + 8;
    v13(a1, v5);
    int v10 = *(_DWORD *)(v12 + 76);
    size_t v11 = *(void *)(v12 + 56);
  }
  if (v10) {
    size_t v14 = v11;
  }
  else {
    size_t v14 = v11 + 1;
  }
  memcpy(a1, a2, v14);
  return a1;
}

void *initializeWithTake for AccessibilityOptionalRotorContent(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithTake for AccessibilityOptionalRotorContent(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    int v13 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v12 = v6 + 8;
    v13(a1, v5);
    int v10 = *(_DWORD *)(v12 + 76);
    size_t v11 = *(void *)(v12 + 56);
  }
  if (v10) {
    size_t v14 = v11;
  }
  else {
    size_t v14 = v11 + 1;
  }
  memcpy(a1, a2, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityOptionalRotorContent(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v6;
  if (a2 > v6)
  {
    char v9 = 8 * v7;
    if (v7 > 3) {
      goto LABEL_8;
    }
    unsigned int v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v7);
      if (v10) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_25;
        }
LABEL_8:
        int v10 = *((unsigned __int8 *)a1 + v7);
        if (!*((unsigned char *)a1 + v7)) {
          goto LABEL_25;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if (v7 > 3) {
          int v12 = 0;
        }
        if (v7)
        {
          if (v7 <= 3) {
            int v13 = v7;
          }
          else {
            int v13 = 4;
          }
          switch(v13)
          {
            case 2:
              int v14 = *a1;
              break;
            case 3:
              int v14 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v14 = *(_DWORD *)a1;
              break;
            default:
              int v14 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v14 = 0;
        }
        return v6 + (v14 | v12) + 1;
      }
      int v10 = *(unsigned __int16 *)((char *)a1 + v7);
      if (*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_15;
      }
    }
  }
LABEL_25:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v16 >= 2) {
    return v16 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for AccessibilityOptionalRotorContent(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (v8)
  {
    size_t v10 = *(void *)(v7 + 64);
  }
  else
  {
    unsigned int v9 = 0;
    size_t v10 = *(void *)(v7 + 64) + 1;
  }
  BOOL v11 = a3 >= v9;
  unsigned int v12 = a3 - v9;
  if (v12 == 0 || !v11)
  {
LABEL_13:
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  if (v10 > 3)
  {
    int v6 = 1;
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  unsigned int v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
  if (!HIWORD(v13))
  {
    if (v13 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v13 > 1;
    }
    goto LABEL_13;
  }
  int v6 = 4;
  if (v9 < a2)
  {
LABEL_14:
    unsigned int v14 = ~v9 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v16 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
LABEL_21:
  switch(v6)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x187B185A4);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v8 >= 2)
        {
          uint64_t v17 = *(void (**)(void))(v7 + 56);
          v17();
        }
      }
      return;
  }
}

void destroy for AccessibilityOptionalRotorContent.MakeList(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 72);
}

uint64_t initializeWithCopy for AccessibilityOptionalRotorContent.MakeList(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v3;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  uint64_t v4 = *(void **)(a2 + 72);
  *(void *)(a1 + 72) = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v5 = v4;
  return a1;
}

uint64_t assignWithCopy for AccessibilityOptionalRotorContent.MakeList(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  uint64_t v4 = *(void **)(a2 + 72);
  id v5 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for AccessibilityOptionalRotorContent.MakeList(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  uint64_t v4 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);

  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityOptionalRotorContent.MakeList(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityOptionalRotorContent.MakeList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityRotorEntryList()
{
  return &type metadata for AccessibilityRotorEntryList;
}

uint64_t base witness table accessor for _AttributeBody in AccessibilityOptionalRotorContent<A>.MakeList()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in AccessibilityRotorEntry<A>.MakeList()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in ForEach<A, B, C><>.MakeList()
{
  return swift_getWitnessTable();
}

{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in AccessibilityTupleRotorContent<A>.MergeLists()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for ForEach<>.Generator()
{
  return swift_getGenericMetadata();
}

{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for AccessibilityRotorEntry.Generator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187B18984()
{
  if (*(unsigned __int8 *)(v0 + 64) <= 1u) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }

  int v1 = *(unsigned __int8 *)(v0 + 96);
  if (v1 != 255) {
    outlined consume of AccessibilityRotorEntryRange(*(id *)(v0 + 80), *(void *)(v0 + 88), v1);
  }
  swift_release();

  return swift_deallocObject();
}

void outlined consume of AccessibilityRotorEntryRange(id a1, uint64_t a2, char a3)
{
  if (a3 == 2) {
}
  }

uint64_t type metadata accessor for AccessibilityOptionalRotorContent.Generator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for specialized closure #1 in static AccessibilityRotorContent._makeEntries(content:inputs:)()
{
  return specialized closure #1 in static AccessibilityRotorContent._makeEntries(content:inputs:)();
}

uint64_t sub_187B18A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 + a2 - 8) + 40))(*(void *)(a3 + a2 - 16));
}

uint64_t sub_187B18A78()
{
  return 16;
}

__n128 sub_187B18A84(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

unint64_t lazy protocol witness table accessor for type Focus<Never, Never> and conformance Focus<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type Focus<Never, Never> and conformance Focus<A, B>;
  if (!lazy protocol witness table cache variable for type Focus<Never, Never> and conformance Focus<A, B>)
  {
    type metadata accessor for Focus<Never, Never>(255, (unint64_t *)&lazy cache variable for type metadata for Focus<Never, Never>, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC248], MEMORY[0x1E4F4E760]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Focus<Never, Never> and conformance Focus<A, B>);
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityTupleRotorContent.MakeLists()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type AccessibilityRotorContentDescriptor and conformance AccessibilityRotorContentDescriptor()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityRotorContentDescriptor and conformance AccessibilityRotorContentDescriptor;
  if (!lazy protocol witness table cache variable for type AccessibilityRotorContentDescriptor and conformance AccessibilityRotorContentDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityRotorContentDescriptor and conformance AccessibilityRotorContentDescriptor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityRotorContentDescriptor and conformance AccessibilityRotorContentDescriptor;
  if (!lazy protocol witness table cache variable for type AccessibilityRotorContentDescriptor and conformance AccessibilityRotorContentDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityRotorContentDescriptor and conformance AccessibilityRotorContentDescriptor);
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityTupleRotorContent.CountEntries()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeWithCopy for AccessibilityTupleRotorContent.CountEntries(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityTupleRotorContent.CountEntries(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v4;
  return a1;
}

uint64_t assignWithTake for AccessibilityTupleRotorContent.CountEntries(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityTupleRotorContent.CountEntries(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 73)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityTupleRotorContent.CountEntries(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 73) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityRotorContentDescriptor()
{
  return &type metadata for AccessibilityRotorContentDescriptor;
}

uint64_t destroy for AccessibilityTupleRotorContent.MakeLists()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AccessibilityTupleRotorContent.MakeLists(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v3;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  uint64_t v4 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityTupleRotorContent.MakeLists(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

uint64_t assignWithTake for AccessibilityTupleRotorContent.MakeLists(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

ValueMetadata *type metadata accessor for EmptyGenerator()
{
  return &type metadata for EmptyGenerator;
}

uint64_t type metadata completion function for AccessibilityOptionalRotorContent.Generator()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityOptionalRotorContent.Generator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  int v8 = *(_DWORD *)(v6 + 80);
  if ((v8 & 0x1000F8) != 0
    || ((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((unsigned __int16)((v8 & 0xF8) + 23) & (unsigned __int16)~(v8 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      memcpy(a1, a2, v7);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
    unint64_t v11 = ((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v12 = ((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v11 = *(void *)v12;
    *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 + 8);
    *(void *)(v11 + 16) = *(void *)(v12 + 16);
    *(_DWORD *)(v11 + 24) = *(_DWORD *)(v12 + 24);
    *(_DWORD *)(v11 + 28) = *(_DWORD *)(v12 + 28);
    *(_DWORD *)(v11 + 32) = *(_DWORD *)(v12 + 32);
    *(_DWORD *)(v11 + 36) = *(_DWORD *)(v12 + 36);
    *(void *)(v11 + 40) = *(void *)(v12 + 40);
    *(void *)(v11 + 48) = *(void *)(v12 + 48);
    *(_DWORD *)(v11 + 56) = *(_DWORD *)(v12 + 56);
    unsigned int v13 = (_DWORD *)((v11 + 63) & 0xFFFFFFFFFFFFFFFCLL);
    unsigned int v14 = (_DWORD *)((v12 + 63) & 0xFFFFFFFFFFFFFFFCLL);
    _DWORD *v13 = *v14;
    int v15 = (void **)(((unint64_t)v14 + 11) & 0xFFFFFFFFFFFFFFF8);
    int v16 = *v15;
    *(void *)(((unint64_t)v13 + 11) & 0xFFFFFFFFFFFFFFF8) = *v15;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v17 = v16;
  }
  return a1;
}

void destroy for AccessibilityOptionalRotorContent.Generator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  uint64_t v5 = a1 + *(void *)(v4 + 64);
  if (!*(_DWORD *)(v4 + 84)) {
    ++v5;
  }
  unint64_t v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  size_t v7 = *(void **)((((v6 + 63) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8);
}

void *initializeWithCopy for AccessibilityOptionalRotorContent.Generator(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    int v7 = *(_DWORD *)(v6 + 84);
    size_t v8 = *(void *)(v6 + 64);
    if (v7) {
      size_t v9 = v8;
    }
    else {
      size_t v9 = v8 + 1;
    }
    memcpy(a1, a2, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    unint64_t v11 = *(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56);
    uint64_t v10 = v6 + 56;
    v11(a1, 0, 1, v5);
    int v7 = *(_DWORD *)(v10 + 28);
    size_t v8 = *(void *)(v10 + 8);
  }
  if (v7) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v8 + 1;
  }
  size_t v13 = v12 + 7;
  unint64_t v14 = ((unint64_t)a1 + v13) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = ((unint64_t)a2 + v13) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v14 = *(void *)v15;
  *(_DWORD *)(v14 + 8) = *(_DWORD *)(v15 + 8);
  *(void *)(v14 + 16) = *(void *)(v15 + 16);
  *(_DWORD *)(v14 + 24) = *(_DWORD *)(v15 + 24);
  *(_DWORD *)(v14 + 28) = *(_DWORD *)(v15 + 28);
  *(_DWORD *)(v14 + 32) = *(_DWORD *)(v15 + 32);
  *(_DWORD *)(v14 + 36) = *(_DWORD *)(v15 + 36);
  *(void *)(v14 + 40) = *(void *)(v15 + 40);
  *(void *)(v14 + 48) = *(void *)(v15 + 48);
  *(_DWORD *)(v14 + 56) = *(_DWORD *)(v15 + 56);
  int v16 = (_DWORD *)((v14 + 63) & 0xFFFFFFFFFFFFFFFCLL);
  id v17 = (_DWORD *)((v15 + 63) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v16 = *v17;
  uint64_t v18 = (void **)(((unint64_t)v17 + 11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = *v18;
  *(void *)(((unint64_t)v16 + 11) & 0xFFFFFFFFFFFFFFF8) = *v18;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v20 = v19;
  return a1;
}

void *assignWithCopy for AccessibilityOptionalRotorContent.Generator(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_12;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  if (v10) {
    size_t v12 = v11;
  }
  else {
    size_t v12 = v11 + 1;
  }
  memcpy(a1, a2, v12);
LABEL_12:
  if (*(_DWORD *)(v6 + 84)) {
    uint64_t v13 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v13 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v14 = v13 + 7;
  unint64_t v15 = ((unint64_t)a1 + v14) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = ((unint64_t)a2 + v14) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v15 = *(void *)v16;
  swift_retain();
  swift_release();
  *(_DWORD *)(v15 + 8) = *(_DWORD *)(v16 + 8);
  *(void *)(v15 + 16) = *(void *)(v16 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(v15 + 24) = *(_DWORD *)(v16 + 24);
  *(_DWORD *)(v15 + 28) = *(_DWORD *)(v16 + 28);
  *(_DWORD *)(v15 + 32) = *(_DWORD *)(v16 + 32);
  *(_DWORD *)(v15 + 36) = *(_DWORD *)(v16 + 36);
  *(void *)(v15 + 40) = *(void *)(v16 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v15 + 48) = *(void *)(v16 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v15 + 56) = *(_DWORD *)(v16 + 56);
  id v17 = (_DWORD *)((v15 + 63) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v18 = (_DWORD *)((v16 + 63) & 0xFFFFFFFFFFFFFFFCLL);
  *id v17 = *v18;
  uint64_t v19 = (void **)(((unint64_t)v17 + 11) & 0xFFFFFFFFFFFFFFF8);
  id v20 = *(void **)(((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = *v19;
  *uint64_t v19 = v20;
  id v22 = v20;

  return a1;
}

void *initializeWithTake for AccessibilityOptionalRotorContent.Generator(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    int v7 = *(_DWORD *)(v6 + 84);
    size_t v8 = *(void *)(v6 + 64);
    if (v7) {
      size_t v9 = v8;
    }
    else {
      size_t v9 = v8 + 1;
    }
    memcpy(a1, a2, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    size_t v11 = *(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56);
    uint64_t v10 = v6 + 56;
    v11(a1, 0, 1, v5);
    int v7 = *(_DWORD *)(v10 + 28);
    size_t v8 = *(void *)(v10 + 8);
  }
  if (v7) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v8 + 1;
  }
  size_t v13 = v12 + 7;
  uint64_t v14 = (_OWORD *)(((unint64_t)a1 + v13) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v15 = (long long *)(((unint64_t)a2 + v13) & 0xFFFFFFFFFFFFFFF8);
  long long v16 = *v15;
  long long v17 = v15[1];
  long long v18 = v15[2];
  *(_OWORD *)((char *)v14 + 44) = *(long long *)((char *)v15 + 44);
  v14[1] = v17;
  _OWORD v14[2] = v18;
  *uint64_t v14 = v16;
  uint64_t v19 = (_DWORD *)(((unint64_t)v14 + 63) & 0xFFFFFFFFFFFFFFFCLL);
  id v20 = (_DWORD *)(((unint64_t)v15 + 63) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v19 = *v20;
  *(void *)(((unint64_t)v19 + 11) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v20 + 11) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithTake for AccessibilityOptionalRotorContent.Generator(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_12;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  if (v10) {
    size_t v12 = v11;
  }
  else {
    size_t v12 = v11 + 1;
  }
  memcpy(a1, a2, v12);
LABEL_12:
  if (*(_DWORD *)(v6 + 84)) {
    uint64_t v13 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v13 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v14 = v13 + 7;
  unint64_t v15 = ((unint64_t)a1 + v14) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = ((unint64_t)a2 + v14) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v15 = *(void *)v16;
  swift_release();
  *(_DWORD *)(v15 + 8) = *(_DWORD *)(v16 + 8);
  *(void *)(v15 + 16) = *(void *)(v16 + 16);
  swift_release();
  *(_DWORD *)(v15 + 24) = *(_DWORD *)(v16 + 24);
  *(_DWORD *)(v15 + 28) = *(_DWORD *)(v16 + 28);
  *(_DWORD *)(v15 + 32) = *(_DWORD *)(v16 + 32);
  *(_DWORD *)(v15 + 36) = *(_DWORD *)(v16 + 36);
  *(void *)(v15 + 40) = *(void *)(v16 + 40);
  swift_bridgeObjectRelease();
  *(void *)(v15 + 48) = *(void *)(v16 + 48);
  swift_bridgeObjectRelease();
  *(_DWORD *)(v15 + 56) = *(_DWORD *)(v16 + 56);
  long long v17 = (_DWORD *)((v15 + 63) & 0xFFFFFFFFFFFFFFFCLL);
  long long v18 = (_DWORD *)((v16 + 63) & 0xFFFFFFFFFFFFFFFCLL);
  *long long v17 = *v18;
  uint64_t v19 = (void **)(((unint64_t)v17 + 11) & 0xFFFFFFFFFFFFFFF8);
  id v20 = *v19;
  *uint64_t v19 = *(void **)(((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFFFF8);

  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityOptionalRotorContent.Generator(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = v6;
  }
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v8;
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v9 = ((((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v10 = a2 - v7;
    uint64_t v11 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v12 = 2;
    }
    else {
      unsigned int v12 = v10 + 1;
    }
    if (v12 >= 0x10000) {
      unsigned int v13 = 4;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v12 < 0x100) {
      unsigned int v13 = 1;
    }
    if (v12 >= 2) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    switch(v14)
    {
      case 1:
        int v15 = *((unsigned __int8 *)a1 + v9);
        if (!v15) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v15 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v15) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187B19DACLL);
      case 4:
        int v15 = *(_DWORD *)((char *)a1 + v9);
        if (!v15) {
          break;
        }
LABEL_27:
        int v17 = v15 - 1;
        if (v11)
        {
          int v17 = 0;
          LODWORD(v11) = *a1;
        }
        return v7 + (v11 | v17) + 1;
      default:
        break;
    }
  }
  if (v6 < 0x7FFFFFFF)
  {
    unint64_t v19 = *(void *)((((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    if (v19 >= 0xFFFFFFFF) {
      LODWORD(v19) = -1;
    }
    return (v19 + 1);
  }
  else
  {
    unsigned int v18 = (*(uint64_t (**)(void))(v4 + 48))();
    if (v18 >= 2) {
      return v18 - 1;
    }
    else {
      return 0;
    }
  }
}

void storeEnumTagSinglePayload for AccessibilityOptionalRotorContent.Generator(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v9;
  }
  size_t v11 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v11;
  }
  size_t v12 = ((((((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v10 < a3)
  {
    unsigned int v13 = a3 - v10;
    if (((((((v11 + 7) & 0xFFFFFFF8) + 63) & 0xFFFFFFFC) + 11) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v14 = v13 + 1;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v14 >= 0x10000) {
      int v15 = 4;
    }
    else {
      int v15 = 2;
    }
    if (v14 < 0x100) {
      int v15 = 1;
    }
    if (v14 >= 2) {
      int v6 = v15;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v10)
  {
    if (((((((v11 + 7) & 0xFFFFFFF8) + 63) & 0xFFFFFFFC) + 11) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v16 = a2 - v10;
    }
    else {
      int v16 = 1;
    }
    if (((((((v11 + 7) & 0xFFFFFFF8) + 63) & 0xFFFFFFFC) + 11) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      int v17 = ~v10 + a2;
      bzero(a1, v12);
      *(_DWORD *)a1 = v17;
    }
    switch(v6)
    {
      case 1:
        a1[v12] = v16;
        return;
      case 2:
        *(_WORD *)&a1[v12] = v16;
        return;
      case 3:
        goto LABEL_58;
      case 4:
        *(_DWORD *)&a1[v12] = v16;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)&a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 3:
LABEL_58:
      __break(1u);
      JUMPOUT(0x187B1A06CLL);
    case 4:
      *(_DWORD *)&a1[v12] = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (a2)
      {
LABEL_35:
        if (v9 < 0x7FFFFFFF)
        {
          unint64_t v21 = (unint64_t)&a1[v11 + 7] & 0xFFFFFFFFFFFFFFF8;
          if ((a2 & 0x80000000) != 0)
          {
            *(_OWORD *)(v21 + 40) = 0u;
            *(_OWORD *)(v21 + 24) = 0u;
            *(_OWORD *)(v21 + 8) = 0u;
            *(_DWORD *)(v21 + 56) = 0;
            *(void *)unint64_t v21 = a2 ^ 0x80000000;
          }
          else
          {
            *(void *)(v21 + 16) = a2 - 1;
          }
        }
        else if (v9 >= a2)
        {
          id v22 = *(void (**)(void))(v7 + 56);
          v22();
        }
        else
        {
          if (v11 <= 3) {
            int v18 = ~(-1 << (8 * v11));
          }
          else {
            int v18 = -1;
          }
          if (v11)
          {
            int v19 = v18 & (~v9 + a2);
            if (v11 <= 3) {
              int v20 = v11;
            }
            else {
              int v20 = 4;
            }
            bzero(a1, v11);
            switch(v20)
            {
              case 2:
                *(_WORD *)a1 = v19;
                break;
              case 3:
                *(_WORD *)a1 = v19;
                a1[2] = BYTE2(v19);
                break;
              case 4:
                *(_DWORD *)a1 = v19;
                break;
              default:
                *a1 = v19;
                break;
            }
          }
        }
      }
      return;
  }
}

id outlined copy of AccessibilityRotorEntryRange(id result, uint64_t a2, char a3)
{
  if (a3 == 2) {
    return result;
  }
  return result;
}

uint64_t destroy for AccessibilityRotorEntry.Generator(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 48) <= 1u) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }

  int v2 = *(unsigned __int8 *)(a1 + 80);
  if (v2 != 255) {
    outlined consume of AccessibilityRotorEntryRange(*(id *)(a1 + 64), *(void *)(a1 + 72), v2);
  }

  return swift_release();
}

uint64_t initializeWithCopy for AccessibilityRotorEntry.Generator(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 48) == 1)
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    char v6 = 1;
  }
  else
  {
    if (!*(unsigned char *)(a2 + 48))
    {
      long long v4 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
      *(unsigned char *)(a1 + 48) = 0;
      goto LABEL_7;
    }
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    char v6 = *(unsigned char *)(a2 + 48);
  }
  *(unsigned char *)(a1 + 48) = v6;
LABEL_7:
  int v8 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v8;
  int v9 = *(unsigned __int8 *)(a2 + 80);
  id v10 = v8;
  if (v9 == 255)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  }
  else
  {
    size_t v11 = *(void **)(a2 + 64);
    uint64_t v12 = *(void *)(a2 + 72);
    outlined copy of AccessibilityRotorEntryRange(v11, v12, v9);
    *(void *)(a1 + 64) = v11;
    *(void *)(a1 + 72) = v12;
    *(unsigned char *)(a1 + 80) = v9;
  }
  uint64_t v13 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v13;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityRotorEntry.Generator(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(a1);
    if (*((unsigned char *)a2 + 48) == 1)
    {
      uint64_t v5 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v5;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v5 - 8))(a1, a2);
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      *(unsigned char *)(a1 + 48) = 1;
    }
    else if (*((unsigned char *)a2 + 48))
    {
      long long v6 = *a2;
      long long v7 = a2[1];
      long long v8 = a2[2];
      *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
      *(_OWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 32) = v8;
      *(_OWORD *)a1 = v6;
    }
    else
    {
      uint64_t v4 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
      *(unsigned char *)(a1 + 48) = 0;
    }
  }
  int v9 = *(void **)(a1 + 56);
  id v10 = (void *)*((void *)a2 + 7);
  *(void *)(a1 + 56) = v10;
  id v11 = v10;

  uint64_t v12 = (long long *)(a1 + 64);
  uint64_t v13 = a2 + 4;
  int v14 = *((unsigned __int8 *)a2 + 80);
  if (*(unsigned __int8 *)(a1 + 80) == 255)
  {
    if (v14 == 255)
    {
      long long v23 = *v13;
      *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
      *uint64_t v12 = v23;
    }
    else
    {
      int v20 = (void *)*((void *)a2 + 8);
      uint64_t v21 = *((void *)a2 + 9);
      outlined copy of AccessibilityRotorEntryRange(v20, v21, *((unsigned char *)a2 + 80));
      *(void *)(a1 + 64) = v20;
      *(void *)(a1 + 72) = v21;
      *(unsigned char *)(a1 + 80) = v14;
    }
  }
  else if (v14 == 255)
  {
    outlined destroy of AccessibilityRotorEntryRange(a1 + 64);
    char v22 = *((unsigned char *)a2 + 80);
    *uint64_t v12 = *v13;
    *(unsigned char *)(a1 + 80) = v22;
  }
  else
  {
    int v15 = (void *)*((void *)a2 + 8);
    uint64_t v16 = *((void *)a2 + 9);
    outlined copy of AccessibilityRotorEntryRange(v15, v16, *((unsigned char *)a2 + 80));
    int v17 = *(void **)(a1 + 64);
    uint64_t v18 = *(void *)(a1 + 72);
    *(void *)(a1 + 64) = v15;
    *(void *)(a1 + 72) = v16;
    char v19 = *(unsigned char *)(a1 + 80);
    *(unsigned char *)(a1 + 80) = v14;
    outlined consume of AccessibilityRotorEntryRange(v17, v18, v19);
  }
  uint64_t v24 = *((void *)a2 + 12);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *(void *)(a1 + 96) = v24;
  swift_retain();
  swift_release();
  uint64_t v25 = *((void *)a2 + 13);
  *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
  *(void *)(a1 + 104) = v25;
  return a1;
}

uint64_t outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(uint64_t a1)
{
  type metadata accessor for Focus<Never, Never>(0, &lazy cache variable for type metadata for AccessibilityRotorEntryElementSpecifier<AnyHashable>, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB968], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityRotorEntryElementSpecifier);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for Focus<Never, Never>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t outlined destroy of AccessibilityRotorEntryRange(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy113_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for AccessibilityRotorEntry.Generator(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(a1);
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  }
  uint64_t v5 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);

  long long v6 = (_OWORD *)(a2 + 64);
  int v7 = *(unsigned __int8 *)(a1 + 80);
  if (v7 == 255) {
    goto LABEL_7;
  }
  int v8 = *(unsigned __int8 *)(a2 + 80);
  if (v8 == 255)
  {
    outlined destroy of AccessibilityRotorEntryRange(a1 + 64);
LABEL_7:
    *(_OWORD *)(a1 + 64) = *v6;
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
    goto LABEL_8;
  }
  int v9 = *(void **)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *v6;
  *(unsigned char *)(a1 + 80) = v8;
  outlined consume of AccessibilityRotorEntryRange(v9, v10, v7);
LABEL_8:
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityRotorEntry.Generator(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 113)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 88);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityRotorEntry.Generator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 112) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 113) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 88) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 113) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata completion function for ForEach<>.Generator()
{
  uint64_t result = type metadata accessor for ForEach();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ForEach<>.Generator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  long long v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || (unint64_t v8 = (((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8,
        ((((((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18))
  {
    uint64_t v24 = *a2;
    *long long v4 = *a2;
    long long v4 = (uint64_t *)(v24 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    unint64_t v9 = v8 + 8;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    id v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
    int v14 = (void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
    void *v13 = *v14;
    int v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v16 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
    *int v15 = *v16;
    *(void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v17 = ((unint64_t)v4 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v18 = ((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v17 = *(void *)v18;
    *(_DWORD *)(v17 + 8) = *(_DWORD *)(v18 + 8);
    *(void *)(v17 + 16) = *(void *)(v18 + 16);
    *(_DWORD *)(v17 + 24) = *(_DWORD *)(v18 + 24);
    *(_DWORD *)(v17 + 28) = *(_DWORD *)(v18 + 28);
    *(_DWORD *)(v17 + 32) = *(_DWORD *)(v18 + 32);
    *(_DWORD *)(v17 + 36) = *(_DWORD *)(v18 + 36);
    *(void *)(v17 + 40) = *(void *)(v18 + 40);
    *(void *)(v17 + 48) = *(void *)(v18 + 48);
    *(_DWORD *)(v17 + 56) = *(_DWORD *)(v18 + 56);
    char v19 = (_DWORD *)((v17 + 63) & 0xFFFFFFFFFFFFFFFCLL);
    int v20 = (_DWORD *)((v18 + 63) & 0xFFFFFFFFFFFFFFFCLL);
    *char v19 = *v20;
    uint64_t v21 = (void **)(((unint64_t)v20 + 11) & 0xFFFFFFFFFFFFFFF8);
    char v22 = *v21;
    *(void *)(((unint64_t)v19 + 11) & 0xFFFFFFFFFFFFFFF8) = *v21;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v23 = v22;
  }
  return v4;
}

void destroy for ForEach<>.Generator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  uint64_t v4 = *(void *)(v3 + 56) + 7;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)((((((a1
                     + (((((((v4 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 15) & 0xFFFFFFFFFFFFFFF8)
                   + 63) & 0xFFFFFFFFFFFFFFFCLL)
                 + 11) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t initializeWithCopy for ForEach<>.Generator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  uint64_t v10 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  id v11 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v10 = *v11;
  uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = (((((((v6 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  unint64_t v15 = (a1 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (a2 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v15 = *(void *)v16;
  *(_DWORD *)(v15 + 8) = *(_DWORD *)(v16 + 8);
  *(void *)(v15 + 16) = *(void *)(v16 + 16);
  *(_DWORD *)(v15 + 24) = *(_DWORD *)(v16 + 24);
  *(_DWORD *)(v15 + 28) = *(_DWORD *)(v16 + 28);
  *(_DWORD *)(v15 + 32) = *(_DWORD *)(v16 + 32);
  *(_DWORD *)(v15 + 36) = *(_DWORD *)(v16 + 36);
  *(void *)(v15 + 40) = *(void *)(v16 + 40);
  *(void *)(v15 + 48) = *(void *)(v16 + 48);
  *(_DWORD *)(v15 + 56) = *(_DWORD *)(v16 + 56);
  unint64_t v17 = (_DWORD *)((v15 + 63) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v18 = (_DWORD *)((v16 + 63) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v17 = *v18;
  char v19 = (void **)(((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFFFF8);
  int v20 = *v19;
  *(void *)(((unint64_t)v17 + 11) & 0xFFFFFFFFFFFFFFF8) = *v19;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v21 = v20;
  return a1;
}

uint64_t assignWithCopy for ForEach<>.Generator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  uint64_t v10 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  id v11 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v10 = *v11;
  swift_retain();
  swift_release();
  uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  swift_retain();
  swift_release();
  *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = (((((((v6 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  unint64_t v15 = (a1 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (a2 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v15 = *(void *)v16;
  swift_retain();
  swift_release();
  *(_DWORD *)(v15 + 8) = *(_DWORD *)(v16 + 8);
  *(void *)(v15 + 16) = *(void *)(v16 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(v15 + 24) = *(_DWORD *)(v16 + 24);
  *(_DWORD *)(v15 + 28) = *(_DWORD *)(v16 + 28);
  *(_DWORD *)(v15 + 32) = *(_DWORD *)(v16 + 32);
  *(_DWORD *)(v15 + 36) = *(_DWORD *)(v16 + 36);
  *(void *)(v15 + 40) = *(void *)(v16 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v15 + 48) = *(void *)(v16 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v15 + 56) = *(_DWORD *)(v16 + 56);
  unint64_t v17 = (_DWORD *)((v15 + 63) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v18 = (_DWORD *)((v16 + 63) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v17 = *v18;
  char v19 = (void **)(((unint64_t)v17 + 11) & 0xFFFFFFFFFFFFFFF8);
  int v20 = *(void **)(((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFFFF8);
  id v21 = *v19;
  *char v19 = v20;
  id v22 = v20;

  return a1;
}

uint64_t initializeWithTake for ForEach<>.Generator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  uint64_t v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  void *v9 = *v10;
  id v11 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  *id v11 = *v12;
  *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = (((((((v6 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  unint64_t v14 = (_OWORD *)((a1 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v15 = (_OWORD *)((a2 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  long long v16 = *(_OWORD *)((char *)v15 + 44);
  long long v18 = v15[1];
  long long v17 = v15[2];
  *unint64_t v14 = *v15;
  v14[1] = v18;
  _OWORD v14[2] = v17;
  *(_OWORD *)((char *)v14 + 44) = v16;
  char v19 = (_DWORD *)(((unint64_t)v14 + 63) & 0xFFFFFFFFFFFFFFFCLL);
  int v20 = (_DWORD *)(((unint64_t)v15 + 63) & 0xFFFFFFFFFFFFFFFCLL);
  *char v19 = *v20;
  *(void *)(((unint64_t)v19 + 11) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v20 + 11) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for ForEach<>.Generator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  swift_release();
  uint64_t v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  void *v9 = *v10;
  swift_release();
  id v11 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  *id v11 = *v12;
  swift_release();
  *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = (((((((v6 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  unint64_t v14 = (a1 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (a2 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v14 = *(void *)v15;
  swift_release();
  *(_DWORD *)(v14 + 8) = *(_DWORD *)(v15 + 8);
  *(void *)(v14 + 16) = *(void *)(v15 + 16);
  swift_release();
  *(_DWORD *)(v14 + 24) = *(_DWORD *)(v15 + 24);
  *(_DWORD *)(v14 + 28) = *(_DWORD *)(v15 + 28);
  *(_DWORD *)(v14 + 32) = *(_DWORD *)(v15 + 32);
  *(_DWORD *)(v14 + 36) = *(_DWORD *)(v15 + 36);
  *(void *)(v14 + 40) = *(void *)(v15 + 40);
  swift_bridgeObjectRelease();
  *(void *)(v14 + 48) = *(void *)(v15 + 48);
  swift_bridgeObjectRelease();
  *(_DWORD *)(v14 + 56) = *(_DWORD *)(v15 + 56);
  long long v16 = (_DWORD *)((v14 + 63) & 0xFFFFFFFFFFFFFFFCLL);
  long long v17 = (_DWORD *)((v15 + 63) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v16 = *v17;
  long long v18 = (void **)(((unint64_t)v16 + 11) & 0xFFFFFFFFFFFFFFF8);
  char v19 = *v18;
  *long long v18 = *(void **)(((unint64_t)v17 + 11) & 0xFFFFFFFFFFFFFFF8);

  return a1;
}

uint64_t getEnumTagSinglePayload for ForEach<>.Generator(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((((((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 63) & 0xFFFFFFFFFFFFFFFCLL)
         + 11) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187B1B300);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for ForEach<>.Generator(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((((((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFFCLL)
        + 11) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              char v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v20 = a2 ^ 0x80000000;
                v19[1] = 0;
              }
              else
              {
                uint64_t v20 = a2 - 1;
              }
              *char v19 = v20;
            }
            else
            {
              long long v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((((((((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)
           + 63) & 0xFFFFFFFC)
         + 11) & 0xFFFFFFF8) == 0xFFFFFFF8)
      unsigned int v12 = v11 + 1;
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((((((((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)
         + 63) & 0xFFFFFFFC)
       + 11) & 0xFFFFFFF8) == 0xFFFFFFF8)
    int v16 = v15;
  else {
    int v16 = 1;
  }
  if (((((((((((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)
         + 63) & 0xFFFFFFFC)
       + 11) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((((((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 63) & 0xFFFFFFFFFFFFFFFCLL)+ 11) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x187B1B530);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

void *type metadata accessor for CombineGenerator()
{
  return &unk_1ED41D2A8;
}

uint64_t partial apply for closure #1 in ForEach<>.Generator.count.getter(void *a1)
{
  return closure #1 in ForEach<>.Generator.count.getter(a1, *(void **)(v1 + 16));
}

uint64_t specialized ForEach.content.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 60));
}

uint64_t partial apply for closure #1 in ForEach<>.Generator.visitEntries<A>(applying:from:)(void *a1)
{
  return closure #1 in ForEach<>.Generator.visitEntries<A>(applying:from:)(a1, *(uint64_t **)(v1 + 80), *(void **)(v1 + 88), *(void *)(v1 + 96), *(unsigned char **)(v1 + 104), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72)) & 1;
}

uint64_t outlined destroy of AccessibilityRotorEntryList?(uint64_t a1)
{
  type metadata accessor for Attribute<AccessibilityRotorEntryList>(0, &lazy cache variable for type metadata for AccessibilityRotorEntryList?, (uint64_t)&type metadata for AccessibilityRotorEntryList, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for Attribute<AccessibilityRotorEntryList>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t closure #1 in Attribute.init(value:)partial apply(uint64_t a1)
{
  return partial apply for closure #1 in Attribute.init(value:)(a1);
}

uint64_t closure #1 in static AccessibilityRotorContent._makeEntries(content:inputs:)specialized partial apply()
{
  return partial apply for specialized closure #1 in static AccessibilityRotorContent._makeEntries(content:inputs:)();
}

uint64_t DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  *(unsigned char *)a8 = 1;
  *(void *)(a8 + 8) = a10;
  *(void *)(a8 + 16) = a14;
  outlined init with copy of TableColumnList(a2, a8 + 24);
  int v17 = (void *)swift_allocObject();
  v17[2] = a9;
  v17[3] = a10;
  _DWORD v17[4] = a11;
  v17[5] = a12;
  v17[6] = a13;
  v17[7] = a14;
  v17[8] = a15;
  v17[9] = a3;
  v17[10] = a4;
  v17[11] = a5;
  type metadata accessor for DocumentGroupConfiguration.LazyViewerManagedDocumentContainer();
  type metadata accessor for StyleContextWriter<DocumentStyleContext>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>, (void (*)(uint64_t))type metadata accessor for StyleContextWriter<DocumentStyleContext>);
  swift_getWitnessTable();
  swift_getWitnessTable();
  ObservableDocumentBoxInputView.init(modelType:content:)(a10, (uint64_t)partial apply for closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:));
  swift_retain();
  type metadata accessor for ObservableDocumentBoxInputView();
  *(void *)(a8 + 64) = AnyView.init<A>(_:)();
  *(void *)(a8 + 72) = a6;
  *(void *)(a8 + 80) = a7;
  _s10Foundation3URLVSgMaTm_2(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBBE00]);
  uint64_t v18 = type metadata accessor for UTType();
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_18834BB80;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v19 + 16))(v21 + v20, a1, v18);
  *(void *)(a8 + 88) = v21;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a2);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(a1, v18);
  *(void *)(a8 + 96) = MEMORY[0x1E4FBC860];
  return result;
}

uint64_t DocumentGroupConfiguration.LazyViewerManagedDocumentContainer.body.getter@<X0>(uint64_t a1@<X0>, void (*a2)(unsigned char *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v47 = a7;
  uint64_t v54 = a6;
  uint64_t v44 = a3;
  uint64_t v43 = a2;
  uint64_t v42 = a1;
  uint64_t v55 = a8;
  type metadata accessor for DocumentConfiguration?(0);
  MEMORY[0x1F4188790](v11 - 8);
  int v48 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for URLDocumentConfiguration();
  MEMORY[0x1F4188790](v40);
  int v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v15);
  id v41 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>(255);
  uint64_t v45 = a4;
  uint64_t v17 = type metadata accessor for ModifiedContent();
  uint64_t v50 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v49 = (char *)&v40 - v21;
  uint64_t v22 = type metadata accessor for _ConditionalContent();
  uint64_t v52 = *(void *)(v22 - 8);
  uint64_t v53 = v22;
  MEMORY[0x1F4188790](v22);
  int v51 = (char *)&v40 - v23;
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t))(a9 + 24);
  swift_unknownObjectRetain();
  LOBYTE(a4) = v24(a5, a9);
  swift_unknownObjectRelease();
  uint64_t v25 = MEMORY[0x1E4F414D8];
  if (a4)
  {
    int v26 = *(void (**)(uint64_t, uint64_t))(a9 + 56);
    swift_unknownObjectRetain();
    v26(a5, a9);
    uint64_t v25 = MEMORY[0x1E4F414D8];
    swift_unknownObjectRelease();
    *int v14 = 0;
    uint64_t v27 = v41;
    v43(v14);
    outlined destroy of DocumentConfiguration?((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for URLDocumentConfiguration);
    swift_getKeyPath();
    long long v28 = v48;
    uint64_t v29 = v45;
    uint64_t v30 = v54;
    DocumentGroupConfiguration.LazyViewerManagedDocumentContainer.configuration.getter(a5, v48, a9, (void (*)(void))type metadata accessor for DocumentConfiguration);
    uint64_t v31 = type metadata accessor for DocumentConfiguration();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v28, 0, 1, v31);
    View.environment<A>(_:_:)();
    swift_release();
    outlined destroy of DocumentConfiguration?((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for DocumentConfiguration?);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v27, v29);
    uint64_t v32 = lazy protocol witness table accessor for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DocumentConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>);
    uint64_t v56 = v30;
    uint64_t v57 = v32;
    swift_getWitnessTable();
    unint64_t v33 = v49;
    static ViewBuilder.buildExpression<A>(_:)(v19);
    unsigned int v34 = *(void (**)(char *, uint64_t))(v50 + 8);
    v34(v19, v17);
    static ViewBuilder.buildExpression<A>(_:)(v33);
    unsigned int v35 = v51;
    static ViewBuilder.buildEither<A, B>(first:)((uint64_t)v19, v17);
    v34(v19, v17);
    v34(v33, v17);
  }
  else
  {
    uint64_t v64 = static Color.clear.getter();
    uint64_t v36 = lazy protocol witness table accessor for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DocumentConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>);
    uint64_t v30 = v54;
    uint64_t v62 = v54;
    uint64_t v63 = v36;
    swift_getWitnessTable();
    unsigned int v35 = v51;
    static ViewBuilder.buildEither<A, B>(second:)((uint64_t)&v64, v17, MEMORY[0x1E4F414E0]);
    swift_release();
  }
  uint64_t v37 = lazy protocol witness table accessor for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DocumentConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>);
  uint64_t v60 = v30;
  uint64_t v61 = v37;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v59 = v25;
  uint64_t v38 = v53;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v35);
  return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v35, v38);
}

uint64_t protocol witness for View.body.getter in conformance DocumentGroupConfiguration.LazyViewerManagedDocumentContainer<A, B>(void *a1, uint64_t a2)
{
  return protocol witness for View.body.getter in conformance DocumentGroupConfiguration.LazyViewerManagedDocumentContainer<A, B>(a1, a2, (uint64_t (*)(void, void, void, void, void, void, void, void, void))DocumentGroupConfiguration.LazyViewerManagedDocumentContainer.body.getter);
}

uint64_t DocumentGroupConfiguration.EagerViewerManagedDocumentContainer.configuration.getter@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 48);
  unint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 56);
  type metadata accessor for DocumentConfiguration();
  uint64_t v6 = *(void *)(a1 + 24);
  swift_unknownObjectRetain();
  v5(v6, v4);
  uint64_t result = swift_unknownObjectRelease();
  *a2 = 0;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance DocumentGroupConfiguration.EagerViewerManagedDocumentContainer<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DocumentGroupConfiguration.EagerViewerManagedDocumentContainer.body.getter(a1, (void (*)(uint64_t))DocumentGroupConfiguration.EagerViewerManagedDocumentContainer.configuration.getter, a2);
}

uint64_t DocumentGroupConfiguration.init<A, B, C>(contentType:editor:contentViewType:documentBoxType:contentModifierType:newDocumentProvider:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  *(unsigned char *)a8 = 0;
  *(void *)(a8 + 8) = a10;
  *(void *)(a8 + 16) = a14;
  outlined init with copy of TableColumnList(a7, a8 + 24);
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = a9;
  v17[3] = a10;
  _DWORD v17[4] = a11;
  v17[5] = a12;
  v17[6] = a13;
  v17[7] = a14;
  v17[8] = a15;
  v17[9] = a2;
  v17[10] = a3;
  v17[11] = a6;
  type metadata accessor for DocumentGroupConfiguration.LazyEditorManagedDocumentContainer();
  type metadata accessor for StyleContextWriter<DocumentStyleContext>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>, (void (*)(uint64_t))type metadata accessor for StyleContextWriter<DocumentStyleContext>);
  swift_getWitnessTable();
  swift_getWitnessTable();
  ObservableDocumentBoxInputView.init(modelType:content:)(a10, (uint64_t)partial apply for closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:editor:contentViewType:documentBoxType:contentModifierType:newDocumentProvider:));
  swift_retain();
  type metadata accessor for ObservableDocumentBoxInputView();
  uint64_t v31 = a8;
  *(void *)(a8 + 64) = AnyView.init<A>(_:)();
  *(void *)(a8 + 72) = a4;
  *(void *)(a8 + 80) = a5;
  _s10Foundation3URLVSgMaTm_2(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBBE00]);
  uint64_t v18 = type metadata accessor for UTType();
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_18834BB80;
  uint64_t v22 = *(void (**)(unint64_t, uint64_t, uint64_t))(v19 + 16);
  v22(v21 + v20, a1, v18);
  *(void *)(v31 + 88) = v21;
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_18834BB80;
  v22(v23 + v20, a1, v18);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a7);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(a1, v18);
  *(void *)(v31 + 96) = v23;
  return result;
}

uint64_t closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(void, uint64_t *), uint64_t a14)
{
  uint64_t v34 = a7;
  uint64_t v35 = a4;
  uint64_t v37 = a9;
  uint64_t v31 = a8;
  uint64_t v32 = a14;
  uint64_t v33 = a12;
  uint64_t v36 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectRetain();
  swift_retain();
  uint64_t v44 = ObservedObject.init(wrappedValue:)();
  *(void *)&long long v45 = v20;
  *((void *)&v45 + 1) = a2;
  uint64_t v46 = a3;
  uint64_t v40 = a5;
  *(void *)&long long v41 = a6;
  *((void *)&v41 + 1) = v31;
  uint64_t v42 = a10;
  uint64_t v43 = a11;
  a13(0, &v40);
  uint64_t WitnessTable = swift_getWitnessTable();
  View.styleContext<A>(_:)();
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v44 = v40;
  long long v45 = v41;
  uint64_t v46 = v42;
  uint64_t v22 = v33;
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 16);
  uint64_t v24 = swift_unknownObjectRetain();
  uint64_t v25 = v34;
  v23(v24, a11, v34, v22);
  type metadata accessor for StyleContextWriter<DocumentStyleContext>();
  uint64_t v26 = type metadata accessor for ModifiedContent();
  uint64_t v27 = lazy protocol witness table accessor for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>, (void (*)(uint64_t))type metadata accessor for StyleContextWriter<DocumentStyleContext>);
  uint64_t v38 = WitnessTable;
  uint64_t v39 = v27;
  uint64_t v28 = swift_getWitnessTable();
  MEMORY[0x18C113660](v19, v26, v25, v28);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v19, v25);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t DocumentGroupConfiguration.LazyEditorManagedDocumentContainer.body.getter@<X0>(uint64_t a1@<X0>, void (*a2)(unsigned char *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v53 = a7;
  uint64_t v60 = a6;
  uint64_t v49 = a3;
  int v48 = a2;
  uint64_t v47 = a1;
  uint64_t v61 = a8;
  type metadata accessor for DocumentConfiguration?(0);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v50 = (char *)v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URLDocumentConfiguration();
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v56 = (char *)v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>(255);
  uint64_t v51 = a4;
  uint64_t v18 = type metadata accessor for ModifiedContent();
  uint64_t v55 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v54 = (char *)v45 - v22;
  uint64_t v23 = type metadata accessor for _ConditionalContent();
  uint64_t v58 = *(void *)(v23 - 8);
  uint64_t v59 = v23;
  MEMORY[0x1F4188790](v23);
  uint64_t v57 = (char *)v45 - v24;
  uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t))(a9 + 24);
  swift_unknownObjectRetain();
  uint64_t v26 = a5;
  char v27 = v25(a5, a9);
  swift_unknownObjectRelease();
  if (v27)
  {
    uint64_t v46 = v20;
    uint64_t v28 = v48;
    uint64_t v29 = v51;
    v45[0] = a9;
    uint64_t v30 = v60;
    DocumentGroupConfiguration.LazyViewerManagedDocumentContainer.configuration.getter(v26, v15, a9, (void (*)(void))type metadata accessor for URLDocumentConfiguration);
    v28(v15);
    outlined destroy of DocumentConfiguration?((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for URLDocumentConfiguration);
    v45[1] = swift_getKeyPath();
    uint64_t v31 = v50;
    DocumentGroupConfiguration.LazyViewerManagedDocumentContainer.configuration.getter(v26, v50, v45[0], (void (*)(void))type metadata accessor for DocumentConfiguration);
    uint64_t v32 = type metadata accessor for DocumentConfiguration();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v31, 0, 1, v32);
    uint64_t v33 = (uint64_t)v46;
    uint64_t v34 = v56;
    View.environment<A>(_:_:)();
    swift_release();
    outlined destroy of DocumentConfiguration?((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for DocumentConfiguration?);
    uint64_t v35 = v29;
    uint64_t v36 = v30;
    (*(void (**)(char *, uint64_t))(v52 + 8))(v34, v35);
    uint64_t v37 = lazy protocol witness table accessor for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DocumentConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>);
    uint64_t v62 = v30;
    uint64_t v63 = v37;
    swift_getWitnessTable();
    uint64_t v38 = v54;
    static ViewBuilder.buildExpression<A>(_:)(v33);
    uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
    v39(v33, v18);
    static ViewBuilder.buildExpression<A>(_:)(v38);
    uint64_t v40 = v57;
    static ViewBuilder.buildEither<A, B>(first:)(v33, v18);
    v39(v33, v18);
    v39((uint64_t)v38, v18);
  }
  else
  {
    uint64_t v70 = static Color.clear.getter();
    uint64_t v41 = lazy protocol witness table accessor for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DocumentConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>);
    uint64_t v36 = v60;
    uint64_t v68 = v60;
    uint64_t v69 = v41;
    swift_getWitnessTable();
    uint64_t v40 = v57;
    static ViewBuilder.buildEither<A, B>(second:)((uint64_t)&v70, v18, MEMORY[0x1E4F414E0]);
    swift_release();
  }
  uint64_t v42 = lazy protocol witness table accessor for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DocumentConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>);
  uint64_t v66 = v36;
  uint64_t v67 = v42;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v65 = MEMORY[0x1E4F414D8];
  uint64_t v43 = v59;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v40);
  return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v40, v43);
}

uint64_t DocumentGroupConfiguration.LazyViewerManagedDocumentContainer.configuration.getter@<X0>(uint64_t a1@<X5>, unsigned char *a2@<X8>, uint64_t a3, void (*a4)(void))
{
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 80);
  swift_unknownObjectRetain();
  char v7 = v6(a1, a3);
  swift_unknownObjectRelease();
  unsigned int v8 = *(void (**)(uint64_t, uint64_t))(a3 + 56);
  a4(0);
  swift_unknownObjectRetain();
  v8(a1, a3);
  uint64_t result = swift_unknownObjectRelease();
  *a2 = v7 & 1;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance DocumentGroupConfiguration.LazyEditorManagedDocumentContainer<A, B>(void *a1, uint64_t a2)
{
  return protocol witness for View.body.getter in conformance DocumentGroupConfiguration.LazyViewerManagedDocumentContainer<A, B>(a1, a2, (uint64_t (*)(void, void, void, void, void, void, void, void, void))DocumentGroupConfiguration.LazyEditorManagedDocumentContainer.body.getter);
}

uint64_t protocol witness for View.body.getter in conformance DocumentGroupConfiguration.LazyViewerManagedDocumentContainer<A, B>(void *a1, uint64_t a2, uint64_t (*a3)(void, void, void, void, void, void, void, void, void))
{
  return a3(*v3, v3[1], v3[2], v3[3], a1[2], a1[3], a1[4], a1[5], a1[6]);
}

uint64_t DocumentGroupConfiguration.EagerViewerManagedDocumentContainer.body.getter@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v36 = a2;
  uint64_t v44 = a3;
  type metadata accessor for DocumentConfiguration?(0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v35 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v38 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v37 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>(255);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v40 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v39 = (char *)&v35 - v14;
  uint64_t v15 = type metadata accessor for _ConditionalContent();
  uint64_t v42 = *(void *)(v15 - 8);
  uint64_t v43 = v15;
  MEMORY[0x1F4188790](v15);
  uint64_t v41 = (char *)&v35 - v16;
  uint64_t v17 = v3;
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 24);
  uint64_t v20 = *(void *)(a1 + 24);
  swift_unknownObjectRetain();
  LOBYTE(v20) = v19(v20, v18);
  swift_unknownObjectRelease();
  uint64_t v21 = MEMORY[0x1E4F414D8];
  if (v20)
  {
    uint64_t v23 = v37;
    uint64_t v22 = v38;
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v37, v17 + *(int *)(a1 + 60), v7);
    swift_getKeyPath();
    uint64_t v24 = (uint64_t)v35;
    v36(a1);
    uint64_t v25 = type metadata accessor for DocumentConfiguration();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 0, 1, v25);
    uint64_t v26 = *(void *)(a1 + 32);
    View.environment<A>(_:_:)();
    swift_release();
    outlined destroy of DocumentConfiguration?(v24, (uint64_t (*)(void))type metadata accessor for DocumentConfiguration?);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v23, v7);
    uint64_t v27 = lazy protocol witness table accessor for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DocumentConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>);
    uint64_t v45 = v26;
    uint64_t v46 = v27;
    swift_getWitnessTable();
    uint64_t v28 = v39;
    static ViewBuilder.buildExpression<A>(_:)(v12);
    uint64_t v29 = *(void (**)(char *, uint64_t))(v40 + 8);
    v29(v12, v10);
    static ViewBuilder.buildExpression<A>(_:)(v28);
    uint64_t v30 = v41;
    static ViewBuilder.buildEither<A, B>(first:)((uint64_t)v12, v10);
    v29(v12, v10);
    v29(v28, v10);
    uint64_t v21 = MEMORY[0x1E4F414D8];
  }
  else
  {
    uint64_t v53 = static Color.clear.getter();
    uint64_t v26 = *(void *)(a1 + 32);
    uint64_t v31 = lazy protocol witness table accessor for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DocumentConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>);
    uint64_t v51 = v26;
    uint64_t v52 = v31;
    swift_getWitnessTable();
    uint64_t v30 = v41;
    static ViewBuilder.buildEither<A, B>(second:)((uint64_t)&v53, v10, MEMORY[0x1E4F414E0]);
    swift_release();
  }
  uint64_t v32 = lazy protocol witness table accessor for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DocumentConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>);
  uint64_t v49 = v26;
  uint64_t v50 = v32;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v48 = v21;
  uint64_t v33 = v43;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v30);
  return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v30, v33);
}

uint64_t DocumentGroupConfiguration.EagerEditorManagedDocumentContainer.configuration.getter@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 80);
  uint64_t v5 = *(void *)(a1 + 24);
  swift_unknownObjectRetain();
  char v6 = v4(v5, v3);
  swift_unknownObjectRelease();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v3 + 56);
  type metadata accessor for DocumentConfiguration();
  swift_unknownObjectRetain();
  v7(v5, v3);
  uint64_t result = swift_unknownObjectRelease();
  *a2 = v6 & 1;
  return result;
}

uint64_t DocumentGroupConfiguration.EagerViewerManagedDocumentContainer.init(modelBox:viewer:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t (*a7)(void, void *)@<X7>, uint64_t *a8@<X8>)
{
  *a8 = ObservedObject.init(wrappedValue:)();
  a8[1] = v16;
  v19[0] = a2;
  v19[1] = a3;
  v19[2] = a4;
  v19[3] = a5;
  void v19[4] = a6;
  uint64_t v17 = a7(0, v19);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))((char *)a8 + *(int *)(v17 + 60), a1, a2);
}

uint64_t protocol witness for View.body.getter in conformance DocumentGroupConfiguration.EagerEditorManagedDocumentContainer<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DocumentGroupConfiguration.EagerViewerManagedDocumentContainer.body.getter(a1, (void (*)(uint64_t))DocumentGroupConfiguration.EagerEditorManagedDocumentContainer.configuration.getter, a2);
}

uint64_t URLDocumentConfiguration.isEditable.getter()
{
  return *v0;
}

uint64_t URLDocumentConfiguration.isEditable.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*URLDocumentConfiguration.isEditable.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t URLDocumentConfiguration.documentURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for URLDocumentConfiguration() + 20);

  return outlined init with copy of URL?(v3, a1);
}

uint64_t type metadata accessor for URLDocumentConfiguration()
{
  uint64_t result = type metadata singleton initialization cache for URLDocumentConfiguration;
  if (!type metadata singleton initialization cache for URLDocumentConfiguration) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t URLDocumentConfiguration.documentURL.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for URLDocumentConfiguration() + 20);

  return outlined assign with take of URL?(a1, v3);
}

uint64_t (*URLDocumentConfiguration.documentURL.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double DocumentGroup.init<A, B>(editing:newDocumentProvider:documentBoxType:contentModifierType:editor:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, long long a9, long long a10, uint64_t a11)
{
  *(void *)&double result = DocumentGroup.init<A, B>(editing:newDocumentProvider:documentBoxType:contentModifierType:editor:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11).n128_u64[0];
  return result;
}

double DocumentGroup.init<A, B>(viewing:newDocumentProvider:documentBoxType:contentModifierType:viewer:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>, long long a8, long long a9, uint64_t a10, uint64_t a11)
{
  *(void *)&double result = DocumentGroup.init<A, B>(viewing:newDocumentProvider:documentBoxType:contentModifierType:viewer:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11).n128_u64[0];
  return result;
}

double DocumentGroup.init<A, B>(editing:newDocument:documentBoxType:contentModifierType:editor:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, long long a9, long long a10, uint64_t a11)
{
  *(void *)&double result = DocumentGroup.init<A, B>(editing:newDocumentProvider:documentBoxType:contentModifierType:editor:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11).n128_u64[0];
  return result;
}

__n128 DocumentGroup.init<A, B>(editing:newDocumentProvider:documentBoxType:contentModifierType:editor:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, long long a9, long long a10, uint64_t a11)
{
  uint64_t v30 = a4;
  uint64_t v31 = a5;
  uint64_t v32 = a3;
  long long v29 = a9;
  long long v28 = a10;
  uint64_t v27 = a11;
  uint64_t v15 = type metadata accessor for UTType();
  uint64_t v16 = *(void *)(v15 - 8);
  double v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v19, a1, v15, v17);
  uint64_t v20 = _typeName(_:qualified:)();
  uint64_t v22 = v21;
  outlined init with copy of TableColumnList(a2, (uint64_t)v33);
  DocumentGroupConfiguration.init<A, B, C>(contentType:editor:contentViewType:documentBoxType:contentModifierType:newDocumentProvider:)((uint64_t)v19, v30, v31, v20, v22, v32, (uint64_t)v33, (uint64_t)v34, a6, a8, v29, *((uint64_t *)&v29 + 1), v28, *((uint64_t *)&v28 + 1), v27);
  __swift_destroy_boxed_opaque_existential_1(a2);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a1, v15);
  long long v23 = v34[5];
  *(_OWORD *)(a7 + 64) = v34[4];
  *(_OWORD *)(a7 + 80) = v23;
  *(void *)(a7 + 96) = v35;
  long long v24 = v34[1];
  *(_OWORD *)a7 = v34[0];
  *(_OWORD *)(a7 + 16) = v24;
  __n128 result = (__n128)v34[3];
  *(_OWORD *)(a7 + 32) = v34[2];
  *(__n128 *)(a7 + 48) = result;
  return result;
}

double DocumentGroup.init<A, B>(viewing:newDocument:documentBoxType:contentModifierType:viewer:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>, long long a8, long long a9, uint64_t a10, uint64_t a11)
{
  *(void *)&double result = DocumentGroup.init<A, B>(viewing:newDocumentProvider:documentBoxType:contentModifierType:viewer:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11).n128_u64[0];
  return result;
}

__n128 DocumentGroup.init<A, B>(viewing:newDocumentProvider:documentBoxType:contentModifierType:viewer:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>, long long a8, long long a9, uint64_t a10, uint64_t a11)
{
  uint64_t v28 = a3;
  uint64_t v29 = a5;
  uint64_t v27 = a4;
  long long v26 = a8;
  long long v25 = a9;
  uint64_t v15 = type metadata accessor for UTType();
  uint64_t v16 = *(void *)(v15 - 8);
  double v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v19, a1, v15, v17);
  outlined init with copy of TableColumnList(a2, (uint64_t)v30);
  uint64_t v20 = _typeName(_:qualified:)();
  DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:)((uint64_t)v19, (uint64_t)v30, v27, v29, v28, v20, v21, (uint64_t)v31, a6, v26, *((uint64_t *)&v26 + 1), v25, *((uint64_t *)&v25 + 1), a10, a11);
  __swift_destroy_boxed_opaque_existential_1(a2);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a1, v15);
  long long v22 = v31[5];
  *(_OWORD *)(a7 + 64) = v31[4];
  *(_OWORD *)(a7 + 80) = v22;
  *(void *)(a7 + 96) = v32;
  long long v23 = v31[1];
  *(_OWORD *)a7 = v31[0];
  *(_OWORD *)(a7 + 16) = v23;
  __n128 result = (__n128)v31[3];
  *(_OWORD *)(a7 + 32) = v31[2];
  *(__n128 *)(a7 + 48) = result;
  return result;
}

__n128 DocumentGroup.init<A, B>(editing:newDocument:documentBoxType:contentModifierType:editor:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, long long a8, long long a9, uint64_t a10)
{
  uint64_t v36 = a6;
  uint64_t v29 = a4;
  uint64_t v35 = a3;
  uint64_t v32 = a2;
  uint64_t v30 = a1;
  long long v34 = a8;
  long long v33 = a9;
  uint64_t v14 = *(void *)(a5 - 8);
  uint64_t v31 = a10;
  MEMORY[0x1F4188790](a1);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for UTType();
  uint64_t v18 = *(void *)(v17 - 8);
  double v19 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v21, a1, v17, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a4, a5);
  uint64_t v22 = _typeName(_:qualified:)();
  uint64_t v24 = v23;
  uint64_t v25 = v32;
  outlined init with copy of TableColumnList(v32, (uint64_t)v37);
  DocumentGroupConfiguration.init<A, B, C>(contentType:editor:contentViewType:documentBoxType:contentModifierType:newDocumentProvider:)((uint64_t)v21, (uint64_t)v16, v22, v24, v36, v35, (uint64_t)v37, a5, v36, v34, *((uint64_t *)&v34 + 1), v33, *((uint64_t *)&v33 + 1), v31);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v29, a5);
  __swift_destroy_boxed_opaque_existential_1(v25);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v30, v17);
  long long v26 = v43;
  *(_OWORD *)(a7 + 64) = v42;
  *(_OWORD *)(a7 + 80) = v26;
  *(void *)(a7 + 96) = v44;
  long long v27 = v39;
  *(_OWORD *)a7 = v38;
  *(_OWORD *)(a7 + 16) = v27;
  __n128 result = v41;
  *(_OWORD *)(a7 + 32) = v40;
  *(__n128 *)(a7 + 48) = result;
  return result;
}

uint64_t DocumentGroupConfiguration.init<A, B, C>(contentType:editor:contentViewType:documentBoxType:contentModifierType:newDocumentProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v57 = a7;
  uint64_t v51 = a6;
  uint64_t v53 = a3;
  *(void *)&long long v54 = a4;
  uint64_t v56 = a2;
  uint64_t v58 = a1;
  uint64_t v49 = a12;
  uint64_t v50 = a14;
  uint64_t v16 = *(void *)(a8 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  uint64_t v48 = a10;
  MEMORY[0x1F4188790](a1);
  uint64_t v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = v19;
  *(unsigned char *)double v19 = 0;
  v19[1] = a9;
  v19[2] = a13;
  outlined init with copy of TableColumnList(v20, (uint64_t)(v19 + 3));
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a2, a8);
  uint64_t v21 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v55 = v16;
  uint64_t v22 = (v21 + 72) & ~v21;
  unint64_t v23 = (v17 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = (char *)swift_allocObject();
  uint64_t v25 = a8;
  *((void *)v24 + 2) = a8;
  *((void *)v24 + 3) = a9;
  *((void *)v24 + 4) = a10;
  *((void *)v24 + 5) = a11;
  uint64_t v26 = v49;
  *((void *)v24 + 6) = v49;
  *((void *)v24 + 7) = a13;
  uint64_t v27 = v50;
  *((void *)v24 + 8) = v50;
  uint64_t v28 = *(void (**)(char *, char *))(v16 + 32);
  uint64_t v29 = v25;
  uint64_t v52 = v25;
  v28(&v24[v22], v18);
  *(void *)&v24[v23] = v51;
  uint64_t v66 = v29;
  uint64_t v67 = a9;
  uint64_t v68 = a11;
  uint64_t v69 = v26;
  uint64_t v70 = a13;
  type metadata accessor for DocumentGroupConfiguration.EagerEditorManagedDocumentContainer();
  type metadata accessor for StyleContextWriter<DocumentStyleContext>();
  type metadata accessor for ModifiedContent();
  uint64_t v30 = type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v32 = lazy protocol witness table accessor for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>, (void (*)(uint64_t))type metadata accessor for StyleContextWriter<DocumentStyleContext>);
  uint64_t v64 = WitnessTable;
  uint64_t v65 = v32;
  uint64_t v33 = swift_getWitnessTable();
  uint64_t v34 = *(void *)(v27 + 8);
  uint64_t v62 = v33;
  uint64_t v63 = v34;
  uint64_t v35 = swift_getWitnessTable();
  uint64_t v60 = ObservableDocumentBoxInputView.init(modelType:content:)(a9, (uint64_t)partial apply for closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:editor:contentViewType:documentBoxType:contentModifierType:newDocumentProvider:));
  uint64_t v61 = v36;
  uint64_t v66 = a9;
  uint64_t v67 = v30;
  uint64_t v68 = v26;
  uint64_t v69 = a13;
  uint64_t v70 = v35;
  type metadata accessor for ObservableDocumentBoxInputView();
  uint64_t v37 = AnyView.init<A>(_:)();
  long long v38 = v59;
  uint64_t v39 = v53;
  v59[8] = v37;
  v38[9] = v39;
  v38[10] = v54;
  _s10Foundation3URLVSgMaTm_2(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBBE00]);
  uint64_t v40 = type metadata accessor for UTType();
  uint64_t v41 = *(void *)(v40 - 8);
  unint64_t v42 = (*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
  uint64_t v43 = swift_allocObject();
  long long v54 = xmmword_18834BB80;
  *(_OWORD *)(v43 + 16) = xmmword_18834BB80;
  uint64_t v44 = *(void (**)(unint64_t, uint64_t, uint64_t))(v41 + 16);
  uint64_t v45 = v58;
  v44(v43 + v42, v58, v40);
  v59[11] = v43;
  uint64_t v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = v54;
  v44(v46 + v42, v45, v40);
  __swift_destroy_boxed_opaque_existential_1(v57);
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v56, v52);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8))(v45, v40);
  v59[12] = v46;
  return result;
}

__n128 DocumentGroup.init<A, B>(viewing:newDocument:documentBoxType:contentModifierType:viewer:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, long long a9, long long a10, uint64_t a11)
{
  uint64_t v34 = a4;
  uint64_t v35 = a7;
  uint64_t v33 = a3;
  long long v32 = a9;
  long long v31 = a10;
  uint64_t v16 = *(void *)(a6 - 8);
  uint64_t v30 = a11;
  MEMORY[0x1F4188790](a1);
  uint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for UTType();
  uint64_t v20 = *(void *)(v19 - 8);
  double v21 = MEMORY[0x1F4188790](v19);
  unint64_t v23 = (char *)&v29 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v23, a1, v19, v21);
  outlined init with copy of TableColumnList(a2, (uint64_t)v36);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a5, a6);
  uint64_t v24 = _typeName(_:qualified:)();
  DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:)((uint64_t)v23, (uint64_t)v36, (uint64_t)v18, v34, v24, v25, a6, (uint64_t)v37, v35, v32, *((uint64_t *)&v32 + 1), v31, *((uint64_t *)&v31 + 1), v30);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a5, a6);
  __swift_destroy_boxed_opaque_existential_1(a2);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(a1, v19);
  long long v26 = v37[5];
  *(_OWORD *)(a8 + 64) = v37[4];
  *(_OWORD *)(a8 + 80) = v26;
  *(void *)(a8 + 96) = v38;
  long long v27 = v37[1];
  *(_OWORD *)a8 = v37[0];
  *(_OWORD *)(a8 + 16) = v27;
  __n128 result = (__n128)v37[3];
  *(_OWORD *)(a8 + 32) = v37[2];
  *(__n128 *)(a8 + 48) = result;
  return result;
}

uint64_t DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v51 = a5;
  uint64_t v52 = a6;
  uint64_t v53 = a3;
  uint64_t v54 = a2;
  uint64_t v48 = a12;
  uint64_t v49 = a4;
  uint64_t v47 = a11;
  uint64_t v55 = a1;
  uint64_t v56 = a14;
  uint64_t v17 = *(void *)(a7 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  v46[1] = a10;
  MEMORY[0x1F4188790](a1);
  uint64_t v19 = (char *)v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(unsigned char *)a8 = 1;
  *(void *)(a8 + 8) = a9;
  *(void *)(a8 + 16) = a13;
  outlined init with copy of TableColumnList(v20, a8 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a3, a7);
  uint64_t v21 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v50 = v17;
  uint64_t v22 = (v21 + 72) & ~v21;
  unint64_t v23 = (v18 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = (char *)swift_allocObject();
  uint64_t v25 = a7;
  *((void *)v24 + 2) = a7;
  *((void *)v24 + 3) = a9;
  uint64_t v26 = v47;
  *((void *)v24 + 4) = a10;
  *((void *)v24 + 5) = v26;
  uint64_t v27 = v48;
  *((void *)v24 + 6) = v48;
  *((void *)v24 + 7) = a13;
  *((void *)v24 + 8) = v56;
  uint64_t v28 = *(void (**)(char *, char *))(v17 + 32);
  uint64_t v29 = v25;
  v28(&v24[v22], v19);
  *(void *)&v24[v23] = v49;
  uint64_t v63 = v29;
  uint64_t v64 = a9;
  uint64_t v65 = v26;
  uint64_t v66 = v27;
  uint64_t v67 = a13;
  type metadata accessor for DocumentGroupConfiguration.EagerViewerManagedDocumentContainer();
  type metadata accessor for StyleContextWriter<DocumentStyleContext>();
  type metadata accessor for ModifiedContent();
  uint64_t v30 = type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v32 = lazy protocol witness table accessor for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>, (void (*)(uint64_t))type metadata accessor for StyleContextWriter<DocumentStyleContext>);
  uint64_t v61 = WitnessTable;
  uint64_t v62 = v32;
  uint64_t v33 = swift_getWitnessTable();
  uint64_t v34 = *(void *)(v56 + 8);
  uint64_t v59 = v33;
  uint64_t v60 = v34;
  uint64_t v35 = swift_getWitnessTable();
  uint64_t v57 = ObservableDocumentBoxInputView.init(modelType:content:)(a9, (uint64_t)partial apply for closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:));
  uint64_t v58 = v36;
  uint64_t v63 = a9;
  uint64_t v64 = v30;
  uint64_t v65 = v27;
  uint64_t v66 = a13;
  uint64_t v67 = v35;
  type metadata accessor for ObservableDocumentBoxInputView();
  uint64_t v37 = AnyView.init<A>(_:)();
  uint64_t v38 = v51;
  *(void *)(a8 + 64) = v37;
  *(void *)(a8 + 72) = v38;
  *(void *)(a8 + 80) = v52;
  _s10Foundation3URLVSgMaTm_2(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBBE00]);
  uint64_t v39 = type metadata accessor for UTType();
  uint64_t v40 = *(void *)(v39 - 8);
  unint64_t v41 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
  uint64_t v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_18834BB80;
  unint64_t v43 = v42 + v41;
  uint64_t v44 = v55;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v40 + 16))(v43, v55, v39);
  *(void *)(a8 + 88) = v42;
  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v53, v29);
  __swift_destroy_boxed_opaque_existential_1(v54);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 8))(v44, v39);
  *(void *)(a8 + 96) = MEMORY[0x1E4FBC860];
  return result;
}

uint64_t dispatch thunk of DocumentBoxViewModifier.init(box:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t *initializeBufferWithCopyOfBuffer for URLDocumentConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v5 = *(int *)(a3 + 20);
    char v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(void *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    {
      _s10Foundation3URLVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
      memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
    }
  }
  return v3;
}

uint64_t destroy for URLDocumentConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v5(v2, v3);
  }
  return result;
}

unsigned char *initializeWithCopy for URLDocumentConfiguration(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    _s10Foundation3URLVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 16))(v5, v6, v7);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

unsigned char *assignWithCopy for URLDocumentConfiguration(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48);
  int v10 = v9(v5, 1, v7);
  int v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 24))(v5, v6, v7);
      return a1;
    }
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v5, v7);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    _s10Foundation3URLVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    memcpy(v5, v6, *(void *)(*(void *)(v12 - 8) + 64));
    return a1;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 16))(v5, v6, v7);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

unsigned char *initializeWithTake for URLDocumentConfiguration(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    _s10Foundation3URLVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

unsigned char *assignWithTake for URLDocumentConfiguration(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48);
  int v10 = v9(v5, 1, v7);
  int v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 40))(v5, v6, v7);
      return a1;
    }
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v5, v7);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    _s10Foundation3URLVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    memcpy(v5, v6, *(void *)(*(void *)(v12 - 8) + 64));
    return a1;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 32))(v5, v6, v7);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for URLDocumentConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187B1F2AC);
}

uint64_t sub_187B1F2AC(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *a1;
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    _s10Foundation3URLVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    int v11 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = &a1[*(int *)(a3 + 20)];
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for URLDocumentConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187B1F3A0);
}

unsigned char *sub_187B1F3A0(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 254)
  {
    *uint64_t result = a2 + 1;
  }
  else
  {
    _s10Foundation3URLVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = &v5[*(int *)(a4 + 20)];
    return (unsigned char *)v8(v10, a2, a2, v9);
  }
  return result;
}

void type metadata completion function for URLDocumentConfiguration()
{
  _s10Foundation3URLVSgMaTm_2(319, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t partial apply for closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:)(a1, (uint64_t (*)(void, void *))type metadata accessor for DocumentGroupConfiguration.EagerViewerManagedDocumentContainer, (uint64_t)&protocol conformance descriptor for DocumentGroupConfiguration.EagerViewerManagedDocumentContainer<A, B>, a2);
}

{
  return partial apply for closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:)(a1, (void (*)(void, uint64_t *))type metadata accessor for DocumentGroupConfiguration.LazyViewerManagedDocumentContainer, (uint64_t)&protocol conformance descriptor for DocumentGroupConfiguration.LazyViewerManagedDocumentContainer<A, B>, a2);
}

uint64_t type metadata accessor for DocumentGroupConfiguration.EagerViewerManagedDocumentContainer()
{
  return swift_getGenericMetadata();
}

uint64_t closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t (*a13)(void, void *), uint64_t a14)
{
  uint64_t v50 = a7;
  uint64_t v51 = a8;
  uint64_t v57 = a6;
  uint64_t v58 = a3;
  uint64_t v49 = a5;
  uint64_t v60 = a9;
  uint64_t v53 = a13;
  uint64_t v54 = a14;
  uint64_t v59 = *(void *)(a6 - 8);
  uint64_t v56 = a11;
  uint64_t v48 = a10;
  MEMORY[0x1F4188790](a1);
  uint64_t v55 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(v17 - 8);
  double v20 = MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63[0] = v23;
  v63[1] = v24;
  v63[2] = v25;
  v63[3] = v26;
  v63[4] = v27;
  uint64_t v29 = v28(0, v63, v20);
  uint64_t v30 = *(void *)(v29 - 8);
  MEMORY[0x1F4188790](v29);
  uint64_t v32 = (uint64_t *)((char *)&v47 - v31);
  type metadata accessor for StyleContextWriter<DocumentStyleContext>();
  uint64_t v33 = type metadata accessor for ModifiedContent();
  uint64_t v52 = *(void *)(v33 - 8);
  double v34 = MEMORY[0x1F4188790](v33);
  uint64_t v36 = (char *)&v47 - v35;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v22, a2, a4, v34);
  swift_unknownObjectRetain();
  uint64_t v37 = v48;
  DocumentGroupConfiguration.EagerViewerManagedDocumentContainer.init(modelBox:viewer:)((uint64_t)v22, a4, v49, v50, v51, v48, v53, v32);
  uint64_t WitnessTable = swift_getWitnessTable();
  View.styleContext<A>(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v30 + 8))(v32, v29);
  uint64_t v39 = v56;
  uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 16);
  uint64_t v41 = swift_unknownObjectRetain();
  uint64_t v42 = v55;
  uint64_t v43 = v57;
  v40(v41, v37, v57, v39);
  uint64_t v44 = lazy protocol witness table accessor for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>, (void (*)(uint64_t))type metadata accessor for StyleContextWriter<DocumentStyleContext>);
  uint64_t v61 = WitnessTable;
  uint64_t v62 = v44;
  uint64_t v45 = swift_getWitnessTable();
  MEMORY[0x18C113660](v42, v33, v43, v45);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v42, v43);
  return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v36, v33);
}

uint64_t partial apply for closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:editor:contentViewType:documentBoxType:contentModifierType:newDocumentProvider:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:)(a1, (uint64_t (*)(void, void *))type metadata accessor for DocumentGroupConfiguration.EagerEditorManagedDocumentContainer, (uint64_t)&protocol conformance descriptor for DocumentGroupConfiguration.EagerEditorManagedDocumentContainer<A, B>, a2);
}

{
  return partial apply for closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:)(a1, (void (*)(void, uint64_t *))type metadata accessor for DocumentGroupConfiguration.LazyEditorManagedDocumentContainer, (uint64_t)&protocol conformance descriptor for DocumentGroupConfiguration.LazyEditorManagedDocumentContainer<A, B>, a2);
}

uint64_t partial apply for closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void, void *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5 = (*(unsigned __int8 *)(*(void *)(v4[2] - 8) + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4[2] - 8) + 80);
  return closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:)(a1, (uint64_t)v4 + v5, *(uint64_t *)((char *)v4 + ((*(void *)(*(void *)(v4[2] - 8) + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8)), v4[2], v4[3], v4[4], v4[5], v4[6], a4, v4[7], v4[8], (uint64_t)a2, a2, a3);
}

uint64_t type metadata accessor for DocumentGroupConfiguration.EagerEditorManagedDocumentContainer()
{
  return swift_getGenericMetadata();
}

uint64_t sub_187B1FA44()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t type metadata accessor for DocumentGroupConfiguration.LazyViewerManagedDocumentContainer()
{
  return swift_getGenericMetadata();
}

uint64_t partial apply for closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:)@<X0>(uint64_t a1@<X0>, void (*a2)(void, uint64_t *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return closure #1 in DocumentGroupConfiguration.init<A, B, C>(contentType:newDocumentProvider:viewer:documentBoxType:contentModifierType:contentViewType:)(a1, v4[9], v4[10], v4[11], v4[2], v4[3], v4[4], v4[5], a4, v4[6], v4[7], v4[8], a2, a3);
}

uint64_t type metadata accessor for DocumentGroupConfiguration.LazyEditorManagedDocumentContainer()
{
  return swift_getGenericMetadata();
}

uint64_t destroy for DocumentGroupConfiguration.LazyEditorManagedDocumentContainer()
{
  swift_unknownObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for DocumentGroupConfiguration.LazyEditorManagedDocumentContainer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v3;
  swift_unknownObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for DocumentGroupConfiguration.LazyEditorManagedDocumentContainer(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DocumentGroupConfiguration.LazyEditorManagedDocumentContainer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v4;
  swift_release();
  return a1;
}

uint64_t type metadata completion function for DocumentGroupConfiguration.EagerEditorManagedDocumentContainer()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DocumentGroupConfiguration.EagerEditorManagedDocumentContainer(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 16) & (unint64_t)~v6) + *(void *)(v5 + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    uint64_t v11 = ((unint64_t)a1 + v6 + 16) & ~v6;
    uint64_t v12 = ((unint64_t)a2 + v6 + 16) & ~v6;
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_unknownObjectRetain();
    v13(v11, v12, v4);
  }
  return a1;
}

uint64_t destroy for DocumentGroupConfiguration.EagerEditorManagedDocumentContainer(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

void *initializeWithCopy for DocumentGroupConfiguration.EagerEditorManagedDocumentContainer(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a3 + 16);
  unint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  swift_unknownObjectRetain();
  v6(v8, v9, v5);
  return a1;
}

void *assignWithCopy for DocumentGroupConfiguration.EagerEditorManagedDocumentContainer(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

void *assignWithTake for DocumentGroupConfiguration.EagerEditorManagedDocumentContainer(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_unknownObjectRelease();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentGroupConfiguration.EagerEditorManagedDocumentContainer(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 16) & ~v6);
      }
      unint64_t v15 = *((void *)a1 + 1);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for DocumentGroupConfiguration.EagerEditorManagedDocumentContainer(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 16) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187B20484);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 16] & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(void *)a1 = a2 ^ 0x80000000;
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *((void *)a1 + 1) = a2 - 1;
        }
      }
      return;
  }
}

uint64_t associated type witness table accessor for View.Body : View in DocumentGroupConfiguration.LazyEditorManagedDocumentContainer<A, B>()
{
  return associated type witness table accessor for View.Body : View in DocumentGroupConfiguration.LazyEditorManagedDocumentContainer<A, B>();
}

{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in DocumentGroupConfiguration.LazyViewerManagedDocumentContainer<A, B>()
{
  return associated type witness table accessor for View.Body : View in DocumentGroupConfiguration.LazyEditorManagedDocumentContainer<A, B>();
}

uint64_t associated type witness table accessor for View.Body : View in DocumentGroupConfiguration.EagerEditorManagedDocumentContainer<A, B>()
{
  return associated type witness table accessor for View.Body : View in DocumentGroupConfiguration.LazyEditorManagedDocumentContainer<A, B>();
}

uint64_t associated type witness table accessor for View.Body : View in DocumentGroupConfiguration.EagerViewerManagedDocumentContainer<A, B>()
{
  return associated type witness table accessor for View.Body : View in DocumentGroupConfiguration.LazyEditorManagedDocumentContainer<A, B>();
}

uint64_t outlined destroy of DocumentConfiguration?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_187B205B0()
{
  return swift_getWitnessTable();
}

Swift::Void __swiftcall PresentationMode.dismiss()()
{
  *unint64_t v0 = 0;
}

uint64_t EnvironmentValues.presentationMode.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<PresentationModeKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<PresentationModeKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<PresentationModeKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<PresentationModeKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t PresentationMode.isPresented.getter()
{
  return *v0;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance PresentationModeKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v2 = unk_1E9023800;
  char v3 = byte_1E9023808;
  *(void *)a1 = static PresentationModeKey.defaultValue;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  swift_retain();

  return swift_retain();
}

unsigned char *protocol witness for Projection.get(base:) in conformance PresentationMode.FromIsPresented@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

unsigned char *protocol witness for Projection.set(base:newValue:) in conformance PresentationMode.FromIsPresented(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t PresentationMode.FromItem.get(base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 48))(a1, 1, a2);
  *a3 = result != 1;
  return result;
}

uint64_t protocol witness for Projection.get(base:) in conformance PresentationMode.FromItem<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  return PresentationMode.FromItem.get(base:)(a1, *(void *)(a2 + 16), a3);
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance PresentationMode.FromItem<A>(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  return specialized PresentationMode.FromItem.set(base:newValue:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t View.presentationMode(isPresented:)()
{
  return swift_release();
}

uint64_t View.presentationMode<A>(item:)()
{
  return swift_release();
}

uint64_t type metadata accessor for PresentationMode.FromItem()
{
  return __swift_instantiateGenericMetadata();
}

unsigned char *storeEnumTagSinglePayload for PresentationMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187B20BF4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_187B20C1C()
{
  return swift_getWitnessTable();
}

uint64_t sub_187B20CB8()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for PresentationMode.FromIsPresented()
{
  return &type metadata for PresentationMode.FromIsPresented;
}

ValueMetadata *type metadata accessor for PresentationModeKey()
{
  return &type metadata for PresentationModeKey;
}

uint64_t base witness table accessor for Equatable in PresentationMode.FromItem<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Hashable in PresentationMode.FromItem<A>()
{
  return swift_getWitnessTable();
}

uint64_t specialized PresentationMode.FromItem.set(base:newValue:)(uint64_t result, unsigned char *a2, uint64_t a3)
{
  if ((*a2 & 1) == 0)
  {
    uint64_t v4 = result;
    uint64_t v5 = type metadata accessor for Optional();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
    unsigned int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56);
    return v6(v4, 1, 1, a3);
  }
  return result;
}

Swift::Void __swiftcall PrimitiveButtonStyleConfiguration.trigger()()
{
}

void *specialized closure #1 in AccessibilityButtonModifier.body(content:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>();
  uint64_t v6 = v5 - 8;
  MEMORY[0x1F4188790](v5);
  unsigned int v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  BOOL v11 = (char *)&v26 - v10;
  MEMORY[0x1F4188790](v12);
  unsigned int v14 = (char *)&v26 - v13;
  type metadata accessor for ButtonStyleModifier<DefaultButtonStyle>(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine, (uint64_t)&type metadata for AccessibilityChildBehavior.Combine, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityChildBehaviorBox);
  uint64_t v15 = swift_allocObject();
  *(unsigned char *)(v15 + 16) = 12;
  outlined retain of AccessibilityButtonModifier<A>(a2);
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  swift_retain();
  uint64_t v28 = Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  uint64_t v17 = v30;
  uint64_t v16 = v31;
  _s7SwiftUI28StyleContextAcceptsPredicateVyAA026AccessibilityRepresentablecD0VGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v17;
  *(void *)(v18 + 24) = v16;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_2(a1, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>);
  swift_release();
  uint64_t v19 = (uint64_t *)&v8[*(int *)(v6 + 44)];
  *uint64_t v19 = v18;
  v19[1] = v15;
  AccessibilityTraitSet.init(traits:)();
  uint64_t v20 = v32;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v18 + 16, 0, v20);
  swift_endAccess();
  swift_release();
  swift_release();
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>((uint64_t)v8, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>);
  uint64_t v21 = dword_1ED476658;
  uint64_t v22 = *(void *)&v11[*(int *)(v6 + 44)] + 16;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v22, v21 | (v21 << 32));
  swift_endAccess();
  swift_release();
  swift_release();
  uint64_t v30 = 1;
  AccessibilityNullableOptionSet<>.init(adding:)();
  uint64_t v23 = v28;
  uint64_t v24 = v29;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v22, v23, v24);
  swift_endAccess();
  swift_release();
  swift_release();
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_2((uint64_t)v11, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>);
  _s7SwiftUI12ButtonActionOWOhTm_0((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>((uint64_t)v14, v27, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>);
  return outlined release of AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>(v26);
}

uint64_t specialized closure #2 in AccessibilityButtonModifier.body(content:)()
{
  uint64_t v0 = MEMORY[0x1E4F41310];
  _s7SwiftUI28StyleContextAcceptsPredicateVyAA026AccessibilityRepresentablecD0VGMaTm_0(0, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, MEMORY[0x1E4F41310], MEMORY[0x1E4F410E8]);
  type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>();
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, (void (*)(uint64_t))type metadata accessor for AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type StyleContextAcceptsPredicate<TextInputSuggestionsContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, v0);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>);
  return View.staticIf<A, B, C>(_:trueModifier:falseModifier:)();
}

void *specialized closure #1 in closure #2 in AccessibilityButtonModifier.body(content:)@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *((void *)a2 + 6);
  uint64_t v6 = *((void *)a2 + 7);
  long long v11 = a2[1];
  long long v12 = a2[2];
  long long v10 = *a2;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_2(a1, a3, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, (void (*)(uint64_t))type metadata accessor for AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable);
  uint64_t v8 = a3 + *(int *)(v7 + 36);
  *(_OWORD *)uint64_t v8 = v10;
  *(_OWORD *)(v8 + 16) = v11;
  *(_OWORD *)(v8 + 32) = v12;
  *(void *)(v8 + 48) = v5;
  *(void *)(v8 + 56) = v6;
  return outlined retain of AccessibilityButtonModifier<A>(a2);
}

void *specialized closure #2 in closure #2 in AccessibilityButtonModifier.body(content:)@<X0>(void (*a1)()@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v35 = a1;
  uint64_t v37 = a3;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>();
  uint64_t v5 = v4 - 8;
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  long long v10 = (char *)&v34 - v9;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v34 - v12;
  MEMORY[0x1F4188790](v14);
  uint64_t v36 = (uint64_t)&v34 - v15;
  long long v16 = a2[1];
  long long v43 = *a2;
  long long v44 = v16;
  long long v17 = a2[3];
  long long v45 = a2[2];
  long long v46 = v17;
  char v47 = 1;
  type metadata accessor for ButtonStyleModifier<DefaultButtonStyle>(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine, (uint64_t)&type metadata for AccessibilityChildBehavior.Combine, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityChildBehaviorBox);
  uint64_t v18 = swift_allocObject();
  *(unsigned char *)(v18 + 16) = 12;
  outlined retain of AccessibilityButtonModifier<A>(a2);
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  swift_retain();
  uint64_t v38 = Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  uint64_t v20 = v40;
  uint64_t v19 = v41;
  _s7SwiftUI28StyleContextAcceptsPredicateVyAA026AccessibilityRepresentablecD0VGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v20;
  *(void *)(v21 + 24) = v19;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_2((uint64_t)v35, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>);
  swift_release();
  uint64_t v22 = (uint64_t *)&v7[*(int *)(v5 + 44)];
  *uint64_t v22 = v21;
  v22[1] = v18;
  AccessibilityTraitSet.init(traits:)();
  uint64_t v23 = v42;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v21 + 16, 0, v23);
  swift_endAccess();
  swift_release();
  swift_release();
  uint64_t v35 = type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>((uint64_t)v7, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>);
  uint64_t v24 = dword_1ED476658;
  uint64_t v25 = *(void *)&v10[*(int *)(v5 + 44)] + 16;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v25, v24 | (v24 << 32));
  swift_endAccess();
  swift_release();
  swift_release();
  uint64_t v40 = 1;
  AccessibilityNullableOptionSet<>.init(adding:)();
  uint64_t v26 = v38;
  uint64_t v27 = v39;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v25, v26, v27);
  swift_endAccess();
  swift_release();
  swift_release();
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_2((uint64_t)v10, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>);
  _s7SwiftUI12ButtonActionOWOhTm_0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>);
  specialized AccessibilityButtonModifier.Attachment.accessibilityActions.getter();
  uint64_t v28 = (uint64_t *)(*(void *)&v13[*(int *)(v5 + 44)] + 16);
  swift_beginAccess();
  uint64_t v29 = *v28;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  specialized AccessibilityProperties.subscript.getter(v29);
  swift_bridgeObjectRelease();
  uint64_t v30 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.setter(v30);
  uint64_t v38 = specialized AccessibilityProperties.subscript.getter(*v28);
  uint64_t v31 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v31);
  specialized AccessibilityProperties.subscript.setter(v38);
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_release();
  swift_release();
  uint64_t v32 = v36;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_2((uint64_t)v13, v36, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>);
  swift_bridgeObjectRelease();
  _s7SwiftUI12ButtonActionOWOhTm_0((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>(v32, v37, (uint64_t (*)(void))v35);
  return outlined release of AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>(a2);
}

uint64_t specialized AccessibilityButtonModifier.Attachment.accessibilityActions.getter()
{
  if ((*(unsigned char *)(v0 + 64) & 1) == 0) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v2 = *(void **)(v0 + 40);
  if (v2)
  {
    uint64_t v4 = *(void *)(v0 + 48);
    uint64_t v3 = *(void *)(v0 + 56);
    uint64_t v6 = *(void *)(v0 + 16);
    uint64_t v5 = *(void *)(v0 + 24);
    int v7 = *(_DWORD *)(v0 + 32) & 1;
    _s7SwiftUI28StyleContextAcceptsPredicateVyAA026AccessibilityRepresentablecD0VGMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction, MEMORY[0x1E4FBBE00]);
    uint64_t v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = xmmword_18834BB80;
    type metadata accessor for ButtonStyleModifier<DefaultButtonStyle>(0, &lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler, (uint64_t)&type metadata for AccessibilityAppIntentHandler, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyAccessibilityAction.ConcreteBase);
    *(void *)(v1 + 56) = v8;
    *(void *)(v1 + 64) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
    uint64_t v9 = swift_allocObject();
    *(void *)(v1 + 32) = v9;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_OWORD *)(v9 + 32) = 0u;
    *(void *)(v9 + 48) = v6;
    *(void *)(v9 + 56) = v5;
    *(unsigned char *)(v9 + 64) = v7;
    *(void *)(v9 + 72) = v2;
    *(void *)(v9 + 80) = v4;
    *(void *)(v9 + 88) = v3;
    *(void *)(v9 + 96) = 0;
    *(void *)(v9 + 104) = 0;
    *(void *)(v9 + 112) = 0;
    *(void *)(v9 + 120) = 2;
    *(_OWORD *)(v9 + 128) = 0u;
    *(_OWORD *)(v9 + 144) = 0u;
    *(_OWORD *)(v9 + 153) = 0u;
    *(unsigned char *)(v1 + 72) = 1;
    outlined copy of Environment<AppIntentExecutor?>.Content(v6, v5, v7);
    id v10 = v2;
    swift_retain();
  }
  else
  {
    _s7SwiftUI28StyleContextAcceptsPredicateVyAA026AccessibilityRepresentablecD0VGMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction, MEMORY[0x1E4FBBE00]);
    uint64_t v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = xmmword_18834BB80;
    uint64_t v11 = swift_allocObject();
    long long v12 = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v11 + 48) = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v11 + 64) = v12;
    *(unsigned char *)(v11 + 80) = *(unsigned char *)(v0 + 64);
    long long v13 = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v11 + 16) = *(_OWORD *)v0;
    *(_OWORD *)(v11 + 32) = v13;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = partial apply for specialized closure #1 in AccessibilityButtonModifier.Attachment.accessibilityActions.getter;
    *(void *)(v14 + 24) = v11;
    LODWORD(v11) = AccessibilityActionHandlerSeed++;
    type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityVoidAction>>();
    *(void *)(v1 + 56) = v15;
    *(void *)(v1 + 64) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
    uint64_t v16 = swift_allocObject();
    *(void *)(v1 + 32) = v16;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)(v16 + 48) = 0u;
    *(void *)(v16 + 64) = 0;
    *(void *)(v16 + 72) = 2;
    *(_OWORD *)(v16 + 80) = 0u;
    *(_OWORD *)(v16 + 96) = 0u;
    *(void *)(v16 + 112) = 0;
    *(void *)(v16 + 120) = partial apply for thunk for @escaping @callee_guaranteed () -> (@out AccessibilityActionResult);
    *(void *)(v16 + 128) = v14;
    *(_DWORD *)(v16 + 136) = v11;
    *(unsigned char *)(v1 + 72) = 0;
    outlined retain of AccessibilityButtonModifier<A>((void *)v0);
  }
  return v1;
}

void PrimitiveButtonStyleConfiguration.role.getter(unsigned char *a1@<X8>)
{
  char v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedButtonStyle()
{
  return static StyleableView._viewListCount(inputs:)();
}

uint64_t dispatch thunk of PrimitiveButtonStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t *initializeBufferWithCopyOfBuffer for PrimitiveButtonStyleConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v26 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v26 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    uint64_t v5 = *(int *)(a3 + 24);
    uint64_t v6 = (char *)a1 + v5;
    int v7 = (char *)a2 + v5;
    type metadata accessor for ButtonAction();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v27 = *(void *)v7;
      uint64_t v28 = *((void *)v7 + 1);
      char v29 = v7[16];
      outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v7, v28, v29);
      *(void *)uint64_t v6 = v27;
      *((void *)v6 + 1) = v28;
      v6[16] = v29;
      uint64_t v30 = *((void *)v7 + 5);
      long long v31 = *(_OWORD *)(v7 + 24);
      *(_OWORD *)(v6 + 24) = v31;
      *((void *)v6 + 5) = v30;
      id v32 = (id)v31;
      swift_retain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v9 = *(void *)v7;
      uint64_t v10 = *((void *)v7 + 1);
      uint64_t v11 = *((void *)v7 + 2);
      uint64_t v12 = *((void *)v7 + 3);
      char v13 = v7[34];
      __int16 v14 = *((_WORD *)v7 + 16);
      outlined copy of Environment<OpenURLAction>.Content(*(void *)v7, v10, v11, v12, v14, v13);
      *(void *)uint64_t v6 = v9;
      *((void *)v6 + 1) = v10;
      *((void *)v6 + 2) = v11;
      *((void *)v6 + 3) = v12;
      *((_WORD *)v6 + 16) = v14;
      v6[34] = v13;
      uint64_t v15 = *((void *)v7 + 5);
      uint64_t v16 = *((void *)v7 + 6);
      uint64_t v17 = *((void *)v7 + 7);
      uint64_t v18 = *((void *)v7 + 8);
      char v19 = v7[74];
      __int16 v20 = *((_WORD *)v7 + 36);
      outlined copy of Environment<OpenURLAction>.Content(v15, v16, v17, v18, v20, v19);
      *((void *)v6 + 5) = v15;
      *((void *)v6 + 6) = v16;
      *((void *)v6 + 7) = v17;
      *((void *)v6 + 8) = v18;
      *((_WORD *)v6 + 36) = v20;
      v6[74] = v19;
      uint64_t v21 = *(int *)(type metadata accessor for LinkDestination() + 24);
      uint64_t v22 = &v6[v21];
      uint64_t v23 = &v7[v21];
      uint64_t v24 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16))(v22, v23, v24);
      uint64_t v25 = type metadata accessor for LinkDestination.Configuration();
      v22[*(int *)(v25 + 20)] = v23[*(int *)(v25 + 20)];
    }
    else
    {
      uint64_t v33 = *((void *)v7 + 1);
      *(void *)uint64_t v6 = *(void *)v7;
      *((void *)v6 + 1) = v33;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v3;
}

_WORD *assignWithCopy for PrimitiveButtonStyleConfiguration(_WORD *a1, _WORD *a2, uint64_t a3)
{
  *a1 = *a2;
  if (a1 != a2)
  {
    uint64_t v4 = *(int *)(a3 + 24);
    uint64_t v5 = (char *)a1 + v4;
    uint64_t v6 = (char *)a2 + v4;
    _s7SwiftUI12ButtonActionOWOhTm_0((uint64_t)a1 + v4, (uint64_t (*)(void))type metadata accessor for ButtonAction);
    type metadata accessor for ButtonAction();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v24 = *(void *)v6;
      uint64_t v25 = *((void *)v6 + 1);
      char v26 = v6[16];
      outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v6, v25, v26);
      *(void *)uint64_t v5 = v24;
      *((void *)v5 + 1) = v25;
      v5[16] = v26;
      uint64_t v27 = (void *)*((void *)v6 + 3);
      *((void *)v5 + 3) = v27;
      uint64_t v28 = *((void *)v6 + 5);
      *((void *)v5 + 4) = *((void *)v6 + 4);
      *((void *)v5 + 5) = v28;
      id v29 = v27;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v8 = *(void *)v6;
        uint64_t v9 = *((void *)v6 + 1);
        uint64_t v10 = *((void *)v6 + 2);
        uint64_t v11 = *((void *)v6 + 3);
        char v12 = v6[34];
        __int16 v13 = *((_WORD *)v6 + 16);
        outlined copy of Environment<OpenURLAction>.Content(*(void *)v6, v9, v10, v11, v13, v12);
        *(void *)uint64_t v5 = v8;
        *((void *)v5 + 1) = v9;
        *((void *)v5 + 2) = v10;
        *((void *)v5 + 3) = v11;
        *((_WORD *)v5 + 16) = v13;
        v5[34] = v12;
        uint64_t v14 = *((void *)v6 + 5);
        uint64_t v15 = *((void *)v6 + 6);
        uint64_t v16 = *((void *)v6 + 7);
        uint64_t v17 = *((void *)v6 + 8);
        LOBYTE(v11) = v6[74];
        __int16 v18 = *((_WORD *)v6 + 36);
        outlined copy of Environment<OpenURLAction>.Content(v14, v15, v16, v17, v18, v11);
        *((void *)v5 + 5) = v14;
        *((void *)v5 + 6) = v15;
        *((void *)v5 + 7) = v16;
        *((void *)v5 + 8) = v17;
        *((_WORD *)v5 + 36) = v18;
        v5[74] = v11;
        uint64_t v19 = *(int *)(type metadata accessor for LinkDestination() + 24);
        __int16 v20 = &v5[v19];
        uint64_t v21 = &v6[v19];
        uint64_t v22 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
        uint64_t v23 = type metadata accessor for LinkDestination.Configuration();
        v20[*(int *)(v23 + 20)] = v21[*(int *)(v23 + 20)];
LABEL_8:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      uint64_t v30 = *((void *)v6 + 1);
      *(void *)uint64_t v5 = *(void *)v6;
      *((void *)v5 + 1) = v30;
    }
    swift_retain();
    goto LABEL_8;
  }
  return a1;
}

_WORD *initializeWithTake for PrimitiveButtonStyleConfiguration(_WORD *a1, _WORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for ButtonAction();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    long long v8 = *((_OWORD *)v6 + 1);
    *(_OWORD *)uint64_t v5 = *(_OWORD *)v6;
    *((_OWORD *)v5 + 1) = v8;
    *(_DWORD *)(v5 + 31) = *(_DWORD *)(v6 + 31);
    *(_OWORD *)(v5 + 40) = *(_OWORD *)(v6 + 40);
    *(_OWORD *)(v5 + 56) = *(_OWORD *)(v6 + 56);
    *(_DWORD *)(v5 + 71) = *(_DWORD *)(v6 + 71);
    uint64_t v9 = *(int *)(type metadata accessor for LinkDestination() + 24);
    uint64_t v10 = &v5[v9];
    uint64_t v11 = &v6[v9];
    uint64_t v12 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
    uint64_t v13 = type metadata accessor for LinkDestination.Configuration();
    v10[*(int *)(v13 + 20)] = v11[*(int *)(v13 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
  }
  return a1;
}

_WORD *assignWithTake for PrimitiveButtonStyleConfiguration(_WORD *a1, _WORD *a2, uint64_t a3)
{
  *a1 = *a2;
  if (a1 != a2)
  {
    uint64_t v4 = *(int *)(a3 + 24);
    uint64_t v5 = (char *)a1 + v4;
    uint64_t v6 = (char *)a2 + v4;
    _s7SwiftUI12ButtonActionOWOhTm_0((uint64_t)a1 + v4, (uint64_t (*)(void))type metadata accessor for ButtonAction);
    uint64_t v7 = type metadata accessor for ButtonAction();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      long long v8 = *((_OWORD *)v6 + 1);
      *(_OWORD *)uint64_t v5 = *(_OWORD *)v6;
      *((_OWORD *)v5 + 1) = v8;
      *(_DWORD *)(v5 + 31) = *(_DWORD *)(v6 + 31);
      *(_OWORD *)(v5 + 40) = *(_OWORD *)(v6 + 40);
      *(_OWORD *)(v5 + 56) = *(_OWORD *)(v6 + 56);
      *(_DWORD *)(v5 + 71) = *(_DWORD *)(v6 + 71);
      uint64_t v9 = *(int *)(type metadata accessor for LinkDestination() + 24);
      uint64_t v10 = &v5[v9];
      uint64_t v11 = &v6[v9];
      uint64_t v12 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
      uint64_t v13 = type metadata accessor for LinkDestination.Configuration();
      v10[*(int *)(v13 + 20)] = v11[*(int *)(v13 + 20)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for PrimitiveButtonStyleConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187B2236C);
}

uint64_t sub_187B2236C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 24);
  uint64_t v5 = type metadata accessor for ButtonAction();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for PrimitiveButtonStyleConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187B223F0);
}

uint64_t sub_187B223F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 24);
  uint64_t v6 = type metadata accessor for ButtonAction();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t sub_187B22464()
{
  return swift_getWitnessTable();
}

uint64_t *initializeBufferWithCopyOfBuffer for ResolvedButtonStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v27 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    uint64_t v6 = *(int *)(v4 + 24);
    uint64_t v7 = (char *)a1 + v6;
    long long v8 = (char *)a2 + v6;
    type metadata accessor for ButtonAction();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v28 = *(void *)v8;
      uint64_t v29 = *((void *)v8 + 1);
      char v30 = v8[16];
      outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v8, v29, v30);
      *(void *)uint64_t v7 = v28;
      *((void *)v7 + 1) = v29;
      v7[16] = v30;
      uint64_t v31 = *((void *)v8 + 5);
      long long v32 = *(_OWORD *)(v8 + 24);
      *(_OWORD *)(v7 + 24) = v32;
      *((void *)v7 + 5) = v31;
      id v33 = (id)v32;
      swift_retain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = *(void *)v8;
      uint64_t v11 = *((void *)v8 + 1);
      uint64_t v12 = *((void *)v8 + 2);
      uint64_t v13 = *((void *)v8 + 3);
      char v14 = v8[34];
      __int16 v15 = *((_WORD *)v8 + 16);
      outlined copy of Environment<OpenURLAction>.Content(*(void *)v8, v11, v12, v13, v15, v14);
      *(void *)uint64_t v7 = v10;
      *((void *)v7 + 1) = v11;
      *((void *)v7 + 2) = v12;
      *((void *)v7 + 3) = v13;
      *((_WORD *)v7 + 16) = v15;
      v7[34] = v14;
      uint64_t v16 = *((void *)v8 + 5);
      uint64_t v17 = *((void *)v8 + 6);
      uint64_t v18 = *((void *)v8 + 7);
      uint64_t v19 = *((void *)v8 + 8);
      char v20 = v8[74];
      __int16 v21 = *((_WORD *)v8 + 36);
      outlined copy of Environment<OpenURLAction>.Content(v16, v17, v18, v19, v21, v20);
      *((void *)v7 + 5) = v16;
      *((void *)v7 + 6) = v17;
      *((void *)v7 + 7) = v18;
      *((void *)v7 + 8) = v19;
      *((_WORD *)v7 + 36) = v21;
      v7[74] = v20;
      uint64_t v22 = *(int *)(type metadata accessor for LinkDestination() + 24);
      uint64_t v23 = &v7[v22];
      uint64_t v24 = &v8[v22];
      uint64_t v25 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
      uint64_t v26 = type metadata accessor for LinkDestination.Configuration();
      v23[*(int *)(v26 + 20)] = v24[*(int *)(v26 + 20)];
    }
    else
    {
      uint64_t v34 = *((void *)v8 + 1);
      *(void *)uint64_t v7 = *(void *)v8;
      *((void *)v7 + 1) = v34;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_WORD *initializeWithTake for ResolvedButtonStyle(_WORD *a1, _WORD *a2)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  int v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for ButtonAction();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    long long v8 = *((_OWORD *)v6 + 1);
    *(_OWORD *)int v5 = *(_OWORD *)v6;
    *((_OWORD *)v5 + 1) = v8;
    *(_DWORD *)(v5 + 31) = *(_DWORD *)(v6 + 31);
    *(_OWORD *)(v5 + 40) = *(_OWORD *)(v6 + 40);
    *(_OWORD *)(v5 + 56) = *(_OWORD *)(v6 + 56);
    *(_DWORD *)(v5 + 71) = *(_DWORD *)(v6 + 71);
    uint64_t v9 = *(int *)(type metadata accessor for LinkDestination() + 24);
    uint64_t v10 = &v5[v9];
    uint64_t v11 = &v6[v9];
    uint64_t v12 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
    uint64_t v13 = type metadata accessor for LinkDestination.Configuration();
    v10[*(int *)(v13 + 20)] = v11[*(int *)(v13 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
  }
  return a1;
}

_WORD *assignWithTake for ResolvedButtonStyle(_WORD *a1, _WORD *a2)
{
  *a1 = *a2;
  uint64_t v4 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  if (a1 != a2)
  {
    uint64_t v5 = *(int *)(v4 + 24);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    _s7SwiftUI12ButtonActionOWOhTm_0((uint64_t)a1 + v5, (uint64_t (*)(void))type metadata accessor for ButtonAction);
    uint64_t v8 = type metadata accessor for ButtonAction();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      long long v9 = *((_OWORD *)v7 + 1);
      *(_OWORD *)uint64_t v6 = *(_OWORD *)v7;
      *((_OWORD *)v6 + 1) = v9;
      *(_DWORD *)(v6 + 31) = *(_DWORD *)(v7 + 31);
      *(_OWORD *)(v6 + 40) = *(_OWORD *)(v7 + 40);
      *(_OWORD *)(v6 + 56) = *(_OWORD *)(v7 + 56);
      *(_DWORD *)(v6 + 71) = *(_DWORD *)(v7 + 71);
      uint64_t v10 = *(int *)(type metadata accessor for LinkDestination() + 24);
      uint64_t v11 = &v6[v10];
      uint64_t v12 = &v7[v10];
      uint64_t v13 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
      uint64_t v14 = type metadata accessor for LinkDestination.Configuration();
      v11[*(int *)(v14 + 20)] = v12[*(int *)(v14 + 20)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v6, v7, *(void *)(*(void *)(v8 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187B229CC);
}

uint64_t sub_187B229CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ResolvedButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187B22A4C);
}

uint64_t sub_187B22A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ButtonStylePredicate()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for ButtonStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for ButtonStyleModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187B22E50);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

BOOL static ButtonStylePredicate.evaluate(inputs:)(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type ButtonStyleInput and conformance ButtonStyleInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v4 == a2;
}

BOOL protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ButtonStylePredicate<A>(uint64_t a1, uint64_t a2)
{
  return static ButtonStylePredicate.evaluate(inputs:)(a1, *(void *)(a2 + 16));
}

double protocol witness for static PropertyKey.defaultValue.getter in conformance ButtonStyleInput@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = protocol witness for static PropertyKey.defaultValue.getter in conformance ButtonStyleInput(&one-time initialization token for defaultValue, (__n128 *)&static ButtonStyleInput.defaultValue, a1).n128_u64[0];
  return result;
}

double protocol witness for static PropertyKey.defaultValue.getter in conformance EffectiveButtonStyleInput@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = protocol witness for static PropertyKey.defaultValue.getter in conformance ButtonStyleInput(&one-time initialization token for defaultValue, (__n128 *)&static EffectiveButtonStyleInput.defaultValue, a1).n128_u64[0];
  return result;
}

__n128 protocol witness for static PropertyKey.defaultValue.getter in conformance ButtonStyleInput@<Q0>(void *a1@<X2>, __n128 *a2@<X3>, __n128 *a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  __n128 result = *a2;
  *a3 = *a2;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnyButtonStyleType()
{
  return String.init<A>(describing:)();
}

void type metadata accessor for StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransfor ()
{
  if (!lazy cache variable for type metadata for StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformI)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>();
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>>();
    lazy protocol witness table accessor for type NavigationButtonInput and conformance NavigationButtonInput();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformI);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>>)
  {
    uint64_t v0 = MEMORY[0x1E4F41310];
    _s7SwiftUI28StyleContextAcceptsPredicateVyAA026AccessibilityRepresentablecD0VGMaTm_0(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, MEMORY[0x1E4F41310], MEMORY[0x1E4F410E8]);
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, (void (*)(uint64_t))type metadata accessor for AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable);
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>();
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<TextInputSuggestionsContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, v0);
    unint64_t v1 = type metadata accessor for StaticIf();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>>);
    }
  }
}

void type metadata accessor for AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable()
{
  if (!lazy cache variable for type metadata for AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for AccessibilityButtonModifier.Representable();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable);
    }
  }
}

void type metadata accessor for ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, Platform()
{
  if (!lazy cache variable for type metadata for ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModi)
  {
    type metadata accessor for StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransfor ();
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_1(255, &lazy cache variable for type metadata for AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityLargeContentViewModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModi);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorMod(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclo(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigatio()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>,)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclo(255);
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_1(255, &lazy cache variable for type metadata for ViewInputFlagModifier<TextSelectionForbidden>, MEMORY[0x1E4F409D0], MEMORY[0x1E4F409C8], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>,);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>(uint64_t a1)
{
}

void type metadata accessor for StaticIf<VisualizeViewsEnabled, ButtonStyleDebugOverlayModifier, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<VisualizeViewsEnabled, ButtonStyleDebugOverlayModifier, EmptyModifier>)
  {
    lazy protocol witness table accessor for type VisualizeViewsEnabled and conformance VisualizeViewsEnabled();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<VisualizeViewsEnabled, ButtonStyleDebugOverlayModifier, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type VisualizeViewsEnabled and conformance VisualizeViewsEnabled()
{
  unint64_t result = lazy protocol witness table cache variable for type VisualizeViewsEnabled and conformance VisualizeViewsEnabled;
  if (!lazy protocol witness table cache variable for type VisualizeViewsEnabled and conformance VisualizeViewsEnabled)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VisualizeViewsEnabled and conformance VisualizeViewsEnabled);
  }
  return result;
}

uint64_t sub_187B235A0()
{
  return swift_deallocObject();
}

void partial apply for implicit closure #2 in implicit closure #1 in AccessibilityButtonModifier.init(_:)()
{
  type metadata accessor for PrimitiveButtonStyleConfiguration(0);

  implicit closure #2 in implicit closure #1 in AccessibilityButtonModifier.init(_:)();
}

void *partial apply for specialized closure #1 in AccessibilityButtonModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized closure #1 in AccessibilityButtonModifier.body(content:)(a1, *(void **)(v2 + 16), a2);
}

uint64_t partial apply for specialized closure #2 in AccessibilityButtonModifier.body(content:)()
{
  return specialized closure #2 in AccessibilityButtonModifier.body(content:)();
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, (void (*)(uint64_t))type metadata accessor for AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type ResolvedButtonStyle and conformance ResolvedButtonStyle(&lazy protocol witness table cache variable for type AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable and conformance AccessibilityButtonModifier<A>.Representable, (void (*)(uint64_t))type metadata accessor for AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void *partial apply for specialized closure #1 in closure #2 in AccessibilityButtonModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized closure #1 in closure #2 in AccessibilityButtonModifier.body(content:)(a1, *(long long **)(v2 + 16), a2);
}

void *partial apply for specialized closure #2 in closure #2 in AccessibilityButtonModifier.body(content:)@<X0>(void (*a1)()@<X0>, uint64_t a2@<X8>)
{
  return specialized closure #2 in closure #2 in AccessibilityButtonModifier.body(content:)(a1, *(long long **)(v2 + 16), a2);
}

uint64_t sub_187B23828()
{
  swift_release();
  if (*(void *)(v0 + 56))
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

    swift_release();
  }

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in AccessibilityButtonModifier.Attachment.accessibilityActions.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = 2;
  return result;
}

uint64_t sub_187B238B8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187B238F0()
{
  if (*(void *)(v0 + 40) >= 5uLL)
  {
    outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 72) >= 3uLL)
  {
    outlined consume of Text.Storage(*(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 104))
  {
    outlined consume of Text.Storage(*(void *)(v0 + 80), *(void *)(v0 + 88), *(unsigned char *)(v0 + 96));
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187B2398C()
{
  if (*(void *)(v0 + 40) >= 5uLL)
  {
    outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64));

  swift_release();
  if (*(void *)(v0 + 120) >= 3uLL)
  {
    outlined consume of Text.Storage(*(void *)(v0 + 96), *(void *)(v0 + 104), *(unsigned char *)(v0 + 112));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 152))
  {
    outlined consume of Text.Storage(*(void *)(v0 + 128), *(void *)(v0 + 136), *(unsigned char *)(v0 + 144));
    swift_bridgeObjectRelease();
  }
  swift_release();

  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for ButtonStyleInput()
{
  return &type metadata for ButtonStyleInput;
}

uint64_t sub_187B23A4C()
{
  swift_getAssociatedTypeWitness();

  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_187B23AC0()
{
  return swift_getWitnessTable();
}

uint64_t sub_187B23C54()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleC()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButton;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButton)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfigurati, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigatio, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNaviga);
    lazy protocol witness table accessor for type StaticIf<VisualizeViewsEnabled, ButtonStyleDebugOverlayModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<VisualizeViewsEnabled, ButtonStyleDebugOverlayModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<VisualizeViewsEnabled, ButtonStyleDebugOverlayModifier, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type ButtonStyleDebugOverlayModifier and conformance ButtonStyleDebugOverlayModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButton);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNaviga()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, Shows;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, Shows)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclo(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDis();
    lazy protocol witness table accessor for type StaticIf<VisualizeViewsEnabled, ButtonStyleDebugOverlayModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, DefinesSearchCompletionModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, DefinesSearchCompletionModifier, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type DefinesSearchCompletionModifier and conformance DefinesSearchCompletionModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, Shows);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDis()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndica;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndica)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorMod(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureInd, (void (*)(uint64_t))type metadata accessor for ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, Platform, (void (*)(void))lazy protocol witness table accessor for type StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, Platf);
    lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, KeyboardShortcutBindingBehavior<PrimitiveButtonStyleConfiguration.Label>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndica);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, Platf()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>,;
  if (!lazy protocol witness table cache variable for type StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>,)
  {
    type metadata accessor for StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransfor ();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>,);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StaticIf<VisualizeViewsEnabled, ButtonStyleDebugOverlayModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonStyleDebugOverlayModifier and conformance ButtonStyleDebugOverlayModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonStyleDebugOverlayModifier and conformance ButtonStyleDebugOverlayModifier;
  if (!lazy protocol witness table cache variable for type ButtonStyleDebugOverlayModifier and conformance ButtonStyleDebugOverlayModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStyleDebugOverlayModifier and conformance ButtonStyleDebugOverlayModifier);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in ButtonStyleWriter<A>()
{
  return &protocol witness table for ButtonStyleWriter<A>;
}

unint64_t type metadata accessor for PrimitiveButtonStyle.Type()
{
  unint64_t result = lazy cache variable for type metadata for PrimitiveButtonStyle.Type;
  if (!lazy cache variable for type metadata for PrimitiveButtonStyle.Type)
  {
    type metadata accessor for CVarArg(255, &lazy cache variable for type metadata for PrimitiveButtonStyle);
    unint64_t result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for PrimitiveButtonStyle.Type);
  }
  return result;
}

ValueMetadata *type metadata accessor for EffectiveButtonStyleInput()
{
  return &type metadata for EffectiveButtonStyleInput;
}

uint64_t withBridgedAnimation<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return withBridgedAnimation<A>(_:_:completion:)(a1, a2, a3, (uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, a4, a5);
}

uint64_t withBridgedAnimation<A>(_:_:completion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v19 = static Transaction.current.getter();
  swift_retain();
  Transaction.animation.setter();
  uint64_t v14 = static SemanticFeature.isEnabled.getter();
  if (v14)
  {
    v18[1] = v18;
    MEMORY[0x1F4188790](v14);
    v17[2] = a6;
    v17[3] = &v19;
    _DWORD v17[4] = a2;
    v17[5] = a3;
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = a4;
    *(void *)(v15 + 24) = a5;
    swift_retain();
    static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)(a1, partial apply for closure #1 in withBridgedAnimation<A>(_:_:completion:), (uint64_t)v17, (uint64_t)partial apply for closure #2 in withBridgedAnimation<A>(_:_:completion:), v15, a6, a7);
    swift_release();
  }
  else
  {
    swift_retain();
    withTransaction<A>(_:_:)();
    swift_release();
  }
  return swift_release();
}

uint64_t closure #1 in withBridgedAnimation<A>(_:_:completion:)()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in withBridgedAnimation<A>(_:_:completion:)()
{
  return closure #1 in withBridgedAnimation<A>(_:_:completion:)();
}

uint64_t sub_187B245D4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in withBridgedAnimation<A>(_:_:completion:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void destroy for AnyShareConfiguration(uint64_t a1)
{
  outlined consume of AnyShareConfiguration.Storage(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
  if (*(void *)(a1 + 64))
  {
    outlined consume of Text.Storage(*(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 96))
  {
    outlined consume of Text.Storage(*(void *)(a1 + 72), *(void *)(a1 + 80), *(unsigned char *)(a1 + 88));
    swift_bridgeObjectRelease();
  }
}

uint64_t initializeWithCopy for AnyShareConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  char v8 = *(unsigned char *)(a2 + 32);
  outlined copy of AnyShareConfiguration.Storage(*(void *)a2, v5, v6, v7, v8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
  uint64_t v9 = *(void *)(a2 + 64);
  if (!v9)
  {
    long long v17 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v17;
    uint64_t v13 = *(void *)(a2 + 96);
    if (v13) {
      goto LABEL_3;
    }
LABEL_5:
    long long v18 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v18;
    return a1;
  }
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a2 + 48);
  char v12 = *(unsigned char *)(a2 + 56);
  outlined copy of Text.Storage(v10, v11, v12);
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v11;
  *(unsigned char *)(a1 + 56) = v12;
  *(void *)(a1 + 64) = v9;
  swift_bridgeObjectRetain();
  uint64_t v13 = *(void *)(a2 + 96);
  if (!v13) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v14 = *(void *)(a2 + 72);
  uint64_t v15 = *(void *)(a2 + 80);
  char v16 = *(unsigned char *)(a2 + 88);
  outlined copy of Text.Storage(v14, v15, v16);
  *(void *)(a1 + 72) = v14;
  *(void *)(a1 + 80) = v15;
  *(unsigned char *)(a1 + 88) = v16;
  *(void *)(a1 + 96) = v13;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AnyShareConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  char v8 = *(unsigned char *)(a2 + 32);
  outlined copy of AnyShareConfiguration.Storage(*(void *)a2, v5, v6, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  char v13 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v8;
  outlined consume of AnyShareConfiguration.Storage(v9, v10, v11, v12, v13);
  uint64_t v14 = (_OWORD *)(a1 + 40);
  uint64_t v15 = (_OWORD *)(a2 + 40);
  uint64_t v16 = *(void *)(a2 + 64);
  if (*(void *)(a1 + 64))
  {
    if (v16)
    {
      uint64_t v17 = *(void *)(a2 + 40);
      uint64_t v18 = *(void *)(a2 + 48);
      char v19 = *(unsigned char *)(a2 + 56);
      outlined copy of Text.Storage(v17, v18, v19);
      uint64_t v20 = *(void *)(a1 + 40);
      uint64_t v21 = *(void *)(a1 + 48);
      char v22 = *(unsigned char *)(a1 + 56);
      *(void *)(a1 + 40) = v17;
      *(void *)(a1 + 48) = v18;
      *(unsigned char *)(a1 + 56) = v19;
      outlined consume of Text.Storage(v20, v21, v22);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 40);
      long long v26 = *(_OWORD *)(a2 + 56);
      *uint64_t v14 = *v15;
      *(_OWORD *)(a1 + 56) = v26;
    }
  }
  else if (v16)
  {
    uint64_t v23 = *(void *)(a2 + 40);
    uint64_t v24 = *(void *)(a2 + 48);
    char v25 = *(unsigned char *)(a2 + 56);
    outlined copy of Text.Storage(v23, v24, v25);
    *(void *)(a1 + 40) = v23;
    *(void *)(a1 + 48) = v24;
    *(unsigned char *)(a1 + 56) = v25;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v27 = *(_OWORD *)(a2 + 56);
    *uint64_t v14 = *v15;
    *(_OWORD *)(a1 + 56) = v27;
  }
  uint64_t v28 = (_OWORD *)(a1 + 72);
  uint64_t v29 = (_OWORD *)(a2 + 72);
  uint64_t v30 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96))
  {
    if (v30)
    {
      uint64_t v31 = *(void *)(a2 + 72);
      uint64_t v32 = *(void *)(a2 + 80);
      char v33 = *(unsigned char *)(a2 + 88);
      outlined copy of Text.Storage(v31, v32, v33);
      uint64_t v34 = *(void *)(a1 + 72);
      uint64_t v35 = *(void *)(a1 + 80);
      char v36 = *(unsigned char *)(a1 + 88);
      *(void *)(a1 + 72) = v31;
      *(void *)(a1 + 80) = v32;
      *(unsigned char *)(a1 + 88) = v33;
      outlined consume of Text.Storage(v34, v35, v36);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 72);
      long long v40 = *(_OWORD *)(a2 + 88);
      *uint64_t v28 = *v29;
      *(_OWORD *)(a1 + 88) = v40;
    }
  }
  else if (v30)
  {
    uint64_t v37 = *(void *)(a2 + 72);
    uint64_t v38 = *(void *)(a2 + 80);
    char v39 = *(unsigned char *)(a2 + 88);
    outlined copy of Text.Storage(v37, v38, v39);
    *(void *)(a1 + 72) = v37;
    *(void *)(a1 + 80) = v38;
    *(unsigned char *)(a1 + 88) = v39;
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v41 = *(_OWORD *)(a2 + 88);
    *uint64_t v28 = *v29;
    *(_OWORD *)(a1 + 88) = v41;
  }
  return a1;
}

uint64_t assignWithTake for AnyShareConfiguration(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  char v10 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v4;
  outlined consume of AnyShareConfiguration.Storage(v5, v6, v7, v8, v10);
  if (*(void *)(a1 + 64))
  {
    uint64_t v11 = *(void *)(a2 + 64);
    if (v11)
    {
      char v12 = *(unsigned char *)(a2 + 56);
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(a1 + 48);
      char v15 = *(unsigned char *)(a1 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(unsigned char *)(a1 + 56) = v12;
      outlined consume of Text.Storage(v13, v14, v15);
      *(void *)(a1 + 64) = v11;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 40);
  }
  long long v16 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v16;
LABEL_6:
  if (!*(void *)(a1 + 96))
  {
LABEL_10:
    long long v22 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v22;
    return a1;
  }
  uint64_t v17 = *(void *)(a2 + 96);
  if (!v17)
  {
    outlined destroy of Text(a1 + 72);
    goto LABEL_10;
  }
  char v18 = *(unsigned char *)(a2 + 88);
  uint64_t v19 = *(void *)(a1 + 72);
  uint64_t v20 = *(void *)(a1 + 80);
  char v21 = *(unsigned char *)(a1 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = v18;
  outlined consume of Text.Storage(v19, v20, v21);
  *(void *)(a1 + 96) = v17;
  swift_bridgeObjectRelease();
  return a1;
}

void destroy for AnyIdentifiableShareConfiguration(uint64_t a1)
{
  outlined consume of AnyShareConfiguration.Storage(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  if (*(void *)(a1 + 72))
  {
    outlined consume of Text.Storage(*(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 104))
  {
    outlined consume of Text.Storage(*(void *)(a1 + 80), *(void *)(a1 + 88), *(unsigned char *)(a1 + 96));
    swift_bridgeObjectRelease();
  }
}

uint64_t initializeWithCopy for AnyIdentifiableShareConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  outlined copy of AnyShareConfiguration.Storage(v4, v5, v6, v7, v8);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  uint64_t v9 = *(void *)(a2 + 72);
  if (!v9)
  {
    long long v17 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v17;
    uint64_t v13 = *(void *)(a2 + 104);
    if (v13) {
      goto LABEL_3;
    }
LABEL_5:
    long long v18 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v18;
    return a1;
  }
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  char v12 = *(unsigned char *)(a2 + 64);
  outlined copy of Text.Storage(v10, v11, v12);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(unsigned char *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v9;
  swift_bridgeObjectRetain();
  uint64_t v13 = *(void *)(a2 + 104);
  if (!v13) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  char v16 = *(unsigned char *)(a2 + 96);
  outlined copy of Text.Storage(v14, v15, v16);
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  *(unsigned char *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v13;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AnyIdentifiableShareConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  outlined copy of AnyShareConfiguration.Storage(v4, v5, v6, v7, v8);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 32);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  char v13 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v8;
  outlined consume of AnyShareConfiguration.Storage(v9, v10, v11, v12, v13);
  uint64_t v14 = (_OWORD *)(a1 + 48);
  uint64_t v15 = (_OWORD *)(a2 + 48);
  uint64_t v16 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72))
  {
    if (v16)
    {
      uint64_t v17 = *(void *)(a2 + 48);
      uint64_t v18 = *(void *)(a2 + 56);
      char v19 = *(unsigned char *)(a2 + 64);
      outlined copy of Text.Storage(v17, v18, v19);
      uint64_t v20 = *(void *)(a1 + 48);
      uint64_t v21 = *(void *)(a1 + 56);
      char v22 = *(unsigned char *)(a1 + 64);
      *(void *)(a1 + 48) = v17;
      *(void *)(a1 + 56) = v18;
      *(unsigned char *)(a1 + 64) = v19;
      outlined consume of Text.Storage(v20, v21, v22);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 48);
      long long v26 = *(_OWORD *)(a2 + 64);
      *uint64_t v14 = *v15;
      *(_OWORD *)(a1 + 64) = v26;
    }
  }
  else if (v16)
  {
    uint64_t v23 = *(void *)(a2 + 48);
    uint64_t v24 = *(void *)(a2 + 56);
    char v25 = *(unsigned char *)(a2 + 64);
    outlined copy of Text.Storage(v23, v24, v25);
    *(void *)(a1 + 48) = v23;
    *(void *)(a1 + 56) = v24;
    *(unsigned char *)(a1 + 64) = v25;
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v27 = *(_OWORD *)(a2 + 64);
    *uint64_t v14 = *v15;
    *(_OWORD *)(a1 + 64) = v27;
  }
  uint64_t v28 = (_OWORD *)(a1 + 80);
  uint64_t v29 = (_OWORD *)(a2 + 80);
  uint64_t v30 = *(void *)(a2 + 104);
  if (*(void *)(a1 + 104))
  {
    if (v30)
    {
      uint64_t v31 = *(void *)(a2 + 80);
      uint64_t v32 = *(void *)(a2 + 88);
      char v33 = *(unsigned char *)(a2 + 96);
      outlined copy of Text.Storage(v31, v32, v33);
      uint64_t v34 = *(void *)(a1 + 80);
      uint64_t v35 = *(void *)(a1 + 88);
      char v36 = *(unsigned char *)(a1 + 96);
      *(void *)(a1 + 80) = v31;
      *(void *)(a1 + 88) = v32;
      *(unsigned char *)(a1 + 96) = v33;
      outlined consume of Text.Storage(v34, v35, v36);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 80);
      long long v40 = *(_OWORD *)(a2 + 96);
      *uint64_t v28 = *v29;
      *(_OWORD *)(a1 + 96) = v40;
    }
  }
  else if (v30)
  {
    uint64_t v37 = *(void *)(a2 + 80);
    uint64_t v38 = *(void *)(a2 + 88);
    char v39 = *(unsigned char *)(a2 + 96);
    outlined copy of Text.Storage(v37, v38, v39);
    *(void *)(a1 + 80) = v37;
    *(void *)(a1 + 88) = v38;
    *(unsigned char *)(a1 + 96) = v39;
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v41 = *(_OWORD *)(a2 + 96);
    *uint64_t v28 = *v29;
    *(_OWORD *)(a1 + 96) = v41;
  }
  return a1;
}

uint64_t assignWithTake for AnyIdentifiableShareConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  char v5 = *(unsigned char *)(a2 + 40);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(void *)(a1 + 32) = v4;
  char v11 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v5;
  outlined consume of AnyShareConfiguration.Storage(v6, v7, v8, v9, v11);
  if (*(void *)(a1 + 72))
  {
    uint64_t v12 = *(void *)(a2 + 72);
    if (v12)
    {
      char v13 = *(unsigned char *)(a2 + 64);
      uint64_t v14 = *(void *)(a1 + 48);
      uint64_t v15 = *(void *)(a1 + 56);
      char v16 = *(unsigned char *)(a1 + 64);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(unsigned char *)(a1 + 64) = v13;
      outlined consume of Text.Storage(v14, v15, v16);
      *(void *)(a1 + 72) = v12;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 48);
  }
  long long v17 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v17;
LABEL_6:
  if (!*(void *)(a1 + 104))
  {
LABEL_10:
    long long v23 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v23;
    return a1;
  }
  uint64_t v18 = *(void *)(a2 + 104);
  if (!v18)
  {
    outlined destroy of Text(a1 + 80);
    goto LABEL_10;
  }
  char v19 = *(unsigned char *)(a2 + 96);
  uint64_t v20 = *(void *)(a1 + 80);
  uint64_t v21 = *(void *)(a1 + 88);
  char v22 = *(unsigned char *)(a1 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 96) = v19;
  outlined consume of Text.Storage(v20, v21, v22);
  *(void *)(a1 + 104) = v18;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t storeEnumTagSinglePayload for AnyIdentifiableShareConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 112) = 0;
    }
    if (a2) {
      *(void *)(result + 72) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyShareConfiguration.Key()
{
  return &type metadata for AnyShareConfiguration.Key;
}

uint64_t AnyShareConfiguration.init<A, B, C>(item:subject:message:preview:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v18 = *(void *)(a12 - 8);
  unint64_t v19 = (*(unsigned __int8 *)(v18 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  uint64_t v20 = (char *)swift_allocObject();
  *((void *)v20 + 2) = a12;
  *((void *)v20 + 3) = a13;
  *((void *)v20 + 4) = a14;
  *((void *)v20 + 5) = a15;
  *((void *)v20 + 6) = a16;
  *((void *)v20 + 7) = a17;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(&v20[v19], a1, a12);
  uint64_t v21 = type metadata accessor for SharePreview();
  uint64_t v22 = *(void *)(v21 - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  uint64_t v24 = (char *)swift_allocObject();
  *((void *)v24 + 2) = a12;
  *((void *)v24 + 3) = a13;
  *((void *)v24 + 4) = a14;
  *((void *)v24 + 5) = a15;
  *((void *)v24 + 6) = a16;
  *((void *)v24 + 7) = a17;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 32))(&v24[v23], a11, v21);
  *(void *)a9 = partial apply for closure #1 in AnyShareConfiguration.init<A, B, C>(item:subject:message:preview:);
  *(void *)(a9 + 8) = v20;
  *(void *)(a9 + 16) = partial apply for closure #2 in AnyShareConfiguration.init<A, B, C>(item:subject:message:preview:);
  *(void *)(a9 + 24) = v24;
  *(unsigned char *)(a9 + 32) = 1;
  *(void *)(a9 + 40) = a2;
  *(void *)(a9 + 48) = a3;
  *(void *)(a9 + 56) = a4;
  *(void *)(a9 + 64) = a5;
  *(void *)(a9 + 72) = a6;
  *(void *)(a9 + 80) = a7;
  *(void *)(a9 + 88) = a8;
  *(void *)(a9 + 96) = a10;
  return result;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance AnyShareConfiguration.Key(uint64_t *a1, void (*a2)(void *__return_ptr))
{
  a2(v29);
  uint64_t v3 = v30;
  uint64_t result = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5];
  uint64_t v10 = a1[6];
  uint64_t v11 = a1[7];
  uint64_t v12 = a1[8];
  uint64_t v13 = a1[9];
  uint64_t v14 = a1[10];
  uint64_t v15 = a1[11];
  uint64_t v16 = a1[12];
  if (v30 != 1)
  {
    uint64_t v27 = v29[1];
    uint64_t v28 = v29[0];
    uint64_t v17 = v29[4];
    uint64_t v25 = v29[3];
    uint64_t v26 = v29[2];
    uint64_t v18 = v29[5];
    uint64_t v19 = v29[6];
    uint64_t v20 = v29[7];
    uint64_t v21 = v31;
    uint64_t v22 = v32;
    uint64_t v23 = v33;
    uint64_t v24 = v34;
    outlined consume of AnyShareConfiguration?(result, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16);
    uint64_t v5 = v27;
    uint64_t result = v28;
    uint64_t v7 = v25;
    uint64_t v6 = v26;
    uint64_t v8 = v17;
    uint64_t v9 = v18;
    uint64_t v10 = v19;
    uint64_t v11 = v20;
    uint64_t v12 = v3;
    uint64_t v13 = v21;
    uint64_t v14 = v22;
    uint64_t v15 = v23;
    uint64_t v16 = v24;
  }
  *a1 = result;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  a1[7] = v11;
  a1[8] = v12;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  return result;
}

uint64_t AnySharePreview.init<A, B>(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  uint64_t v38 = a2;
  v41[0] = a2;
  v41[1] = a3;
  void v41[2] = a4;
  v41[3] = a5;
  uint64_t v35 = a5;
  uint64_t v9 = type metadata accessor for SharePreview();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v27 - v12;
  *(void *)(a6 + 32) = protocol witness for CollectionViewListDataSourceBase.section(forSectionLabelIndex:) in conformance TableDataSourceAdaptor;
  *(void *)(a6 + 40) = 0;
  *(void *)(a6 + 48) = protocol witness for CollectionViewListDataSourceBase.section(forSectionLabelIndex:) in conformance TableDataSourceAdaptor;
  uint64_t v37 = a6 + 64;
  *(_OWORD *)(a6 + 56) = 0u;
  *(_OWORD *)(a6 + 72) = 0u;
  *(void *)(a6 + 88) = 0;
  uint64_t v14 = a1[4];
  uint64_t v30 = a1[5];
  uint64_t v15 = v30;
  uint64_t v31 = v14;
  uint64_t v16 = a1[6];
  uint64_t v28 = a1[7];
  uint64_t v17 = v28;
  uint64_t v29 = v16;
  *(void *)a6 = v14;
  *(void *)(a6 + 8) = v15;
  *(void *)(a6 + 16) = v16;
  *(void *)(a6 + 24) = v17;
  char v36 = *(void (**)(char *, void *, uint64_t))(v10 + 16);
  v36(v13, a1, v9);
  uint64_t v18 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v19 = (v18 + 48) & ~v18;
  uint64_t v33 = v18 | 7;
  uint64_t v34 = v19 + v11;
  uint64_t v20 = (char *)swift_allocObject();
  uint64_t v21 = v39;
  *((void *)v20 + 2) = v38;
  *((void *)v20 + 3) = v21;
  *((void *)v20 + 4) = v40;
  *((void *)v20 + 5) = a5;
  uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v32(&v20[v19], v13, v9);
  outlined copy of Text?(v31, v30, v29, v28);
  swift_release();
  *(void *)(a6 + 48) = partial apply for closure #1 in AnySharePreview.init<A, B>(_:);
  *(void *)(a6 + 56) = v20;
  uint64_t v22 = v9;
  v36(v13, a1, v9);
  uint64_t v23 = (char *)swift_allocObject();
  uint64_t v24 = v39;
  *((void *)v23 + 2) = v38;
  *((void *)v23 + 3) = v24;
  uint64_t v25 = v35;
  *((void *)v23 + 4) = v40;
  *((void *)v23 + 5) = v25;
  v32(&v23[v19], v13, v22);
  swift_release();
  *(void *)(a6 + 32) = partial apply for closure #2 in AnySharePreview.init<A, B>(_:);
  *(void *)(a6 + 40) = v23;
  outlined init with copy of Any?((uint64_t)a1, (uint64_t)v41);
  (*(void (**)(void *, uint64_t))(v10 + 8))(a1, v22);
  return outlined assign with take of Any?((uint64_t)v41, v37);
}

uint64_t closure #1 in AnySharePreview.init<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = &v18[-v12];
  v23[0] = a2;
  v23[1] = a3;
  v23[2] = a4;
  v23[3] = a5;
  uint64_t v14 = type metadata accessor for SharePreview();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16))(v13, a1 + *(int *)(v14 + 60), v10);
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  unint64_t v15 = type metadata accessor for NSItemProvider();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in closure #1 in AnySharePreview.init<A, B>(_:), (uint64_t)v18, MEMORY[0x1E4FBC248], v15, v16, (uint64_t)v23);
  (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v13, v10);
  return v23[0];
}

uint64_t partial apply for closure #1 in AnySharePreview.init<A, B>(_:)()
{
  return partial apply for closure #1 in AnySharePreview.init<A, B>(_:)((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in AnySharePreview.init<A, B>(_:));
}

uint64_t closure #1 in closure #1 in AnySharePreview.init<A, B>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v15 = a4;
  uint64_t v16 = a6;
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x1F4188790](a1);
  type metadata accessor for NSItemProvider();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a3);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (char *)swift_allocObject();
  *((void *)v13 + 2) = a2;
  *((void *)v13 + 3) = a3;
  *((void *)v13 + 4) = v15;
  *((void *)v13 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v13[v12], (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
  uint64_t result = NSItemProvider.init<A>(transferable:)();
  uint64_t *v16 = result;
  return result;
}

uint64_t closure #2 in AnySharePreview.init<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = &v18[-v12];
  v23[0] = a2;
  v23[1] = a3;
  v23[2] = a4;
  v23[3] = a5;
  uint64_t v14 = type metadata accessor for SharePreview();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16))(v13, a1 + *(int *)(v14 + 56), v10);
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  unint64_t v15 = type metadata accessor for NSItemProvider();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in closure #2 in AnySharePreview.init<A, B>(_:), (uint64_t)v18, MEMORY[0x1E4FBC248], v15, v16, (uint64_t)v23);
  (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v13, v10);
  return v23[0];
}

uint64_t partial apply for closure #2 in AnySharePreview.init<A, B>(_:)()
{
  return partial apply for closure #1 in AnySharePreview.init<A, B>(_:)((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in AnySharePreview.init<A, B>(_:));
}

uint64_t partial apply for closure #1 in AnySharePreview.init<A, B>(_:)(uint64_t (*a1)(char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = *(void *)(type metadata accessor for SharePreview() - 8);
  uint64_t v7 = (char *)v1 + ((*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return a1(v7, v2, v3, v4, v5);
}

uint64_t outlined assign with take of Any?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Any?(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t closure #1 in closure #2 in AnySharePreview.init<A, B>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v16 = a5;
  uint64_t v17 = a6;
  uint64_t v10 = *(void *)(a2 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x1F4188790](a1);
  type metadata accessor for NSItemProvider();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (char *)swift_allocObject();
  *((void *)v13 + 2) = a2;
  *((void *)v13 + 3) = a3;
  uint64_t v14 = v16;
  *((void *)v13 + 4) = a4;
  *((void *)v13 + 5) = v14;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v13[v12], (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  uint64_t result = NSItemProvider.init<A>(transferable:)();
  *uint64_t v17 = result;
  return result;
}

uint64_t partial apply for closure #1 in closure #2 in AnySharePreview.init<A, B>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in closure #2 in AnySharePreview.init<A, B>(_:)(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t sub_187B25CB8()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in closure #1 in closure #2 in AnySharePreview.init<A, B>(_:)@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)(*(void *)(v1 + 16) - 8) + 16))(a1, v1+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80)));
}

uint64_t partial apply for closure #1 in closure #1 in AnySharePreview.init<A, B>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in closure #1 in AnySharePreview.init<A, B>(_:)(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t sub_187B25DA4()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80)));

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in closure #1 in closure #1 in AnySharePreview.init<A, B>(_:)@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)(*(void *)(v1 + 24) - 8) + 16))(a1, v1+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 24) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 24) - 8) + 80)));
}

uint64_t outlined consume of AnyShareConfiguration?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  if (a9 != 1)
  {
    outlined consume of AnyShareConfiguration.Storage(result, a2, a3, a4, a5);
    outlined consume of Text?(a6, a7, a8, a9);
    return outlined consume of Text?(a10, a11, a12, a13);
  }
  return result;
}

uint64_t (*makeItemProviders #1 <A, B, C, D>(from:) in AnyShareConfiguration.init<A, B, C, D>(_:optimizeForSharingPicker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10))()
{
  uint64_t v24 = a7;
  uint64_t v25 = a8;
  uint64_t v23 = a6;
  uint64_t v14 = *(void *)(a2 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  double v16 = MEMORY[0x1F4188790](a1);
  uint64_t v17 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v14 + 16))(v17, v16);
  unint64_t v18 = (*(unsigned __int8 *)(v14 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v19 = (char *)swift_allocObject();
  *((void *)v19 + 2) = a2;
  *((void *)v19 + 3) = a3;
  *((void *)v19 + 4) = a4;
  *((void *)v19 + 5) = a5;
  uint64_t v20 = v24;
  *((void *)v19 + 6) = v23;
  *((void *)v19 + 7) = v20;
  *((void *)v19 + 8) = v25;
  *((void *)v19 + 9) = a9;
  *((void *)v19 + 10) = a10;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v19[v18], v17, a2);
  return partial apply for closure #1 in makeItemProviders #1 <A, B, C, D>(from:) in AnyShareConfiguration.init<A, B, C, D>(_:optimizeForSharingPicker:);
}

uint64_t closure #1 in makeItemProviders #1 <A, B, C, D>(from:) in AnyShareConfiguration.init<A, B, C, D>(_:optimizeForSharingPicker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v54 = a7;
  uint64_t v55 = a8;
  uint64_t v51 = a4;
  uint64_t v52 = a5;
  uint64_t v50 = a3;
  uint64_t v53 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v58 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v47 = (char *)v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = v13;
  MEMORY[0x1F4188790](v14);
  double v16 = (char *)v41 - v15;
  uint64_t v17 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)v41 - v18;
  uint64_t v20 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = swift_getAssociatedTypeWitness();
  v41[0] = *(void *)(v24 - 8);
  double v25 = MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)v41 - v26;
  uint64_t v59 = MEMORY[0x1E4FBC860];
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v23, a1, a2, v25);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v49 = a2;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v56 = v27;
  uint64_t v57 = v24;
  uint64_t v46 = AssociatedConformanceWitness;
  dispatch thunk of IteratorProtocol.next()();
  long long v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48);
  uint64_t v45 = v58 + 48;
  if (v44(v19, 1, AssociatedTypeWitness) != 1)
  {
    uint64_t v42 = a9;
    uint64_t v43 = a10;
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
    v41[1] = v58 + 8;
    void v41[2] = v58 + 16;
    uint64_t v31 = v47;
    do
    {
      v30(v16, v19, AssociatedTypeWitness);
      id v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28D78]), sel_init);
      MEMORY[0x18C115B40]();
      uint64_t v33 = v16;
      if (*(void *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v34 = v58;
      (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v31, v33, AssociatedTypeWitness);
      unint64_t v35 = (*(unsigned __int8 *)(v34 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
      char v36 = (char *)swift_allocObject();
      uint64_t v37 = v50;
      *((void *)v36 + 2) = v49;
      *((void *)v36 + 3) = v37;
      uint64_t v38 = v52;
      *((void *)v36 + 4) = v51;
      *((void *)v36 + 5) = v38;
      uint64_t v39 = v54;
      *((void *)v36 + 6) = v53;
      *((void *)v36 + 7) = v39;
      uint64_t v40 = v42;
      *((void *)v36 + 8) = v55;
      *((void *)v36 + 9) = v40;
      *((void *)v36 + 10) = v43;
      v30(&v36[v35], v31, AssociatedTypeWitness);
      NSItemProvider.register<A>(_:)();

      swift_release();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v33, AssociatedTypeWitness);
      dispatch thunk of IteratorProtocol.next()();
      double v16 = v33;
    }
    while (v44(v19, 1, AssociatedTypeWitness) != 1);
  }
  (*(void (**)(char *, uint64_t))(v41[0] + 8))(v56, v57);
  return v59;
}

uint64_t closure #1 in AnyShareConfiguration.init<A, B, C, D>(_:optimizeForSharingPicker:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v27 = a3;
  uint64_t v28 = a2;
  uint64_t v29 = a6;
  v30[0] = a4;
  uint64_t v24 = a9;
  uint64_t v22 = a1;
  uint64_t v23 = a8;
  v30[1] = a5;
  v30[2] = a8;
  v30[3] = a9;
  uint64_t v9 = type metadata accessor for SharePreview();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (uint64_t *)((char *)&v22 - v10);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v22 - v14;
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v22 - v18;
  Collection.index(atOffset:)();
  uint64_t v20 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
  (*(void (**)(char *))(v17 + 16))(v19);
  v20(v30, 0);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
  v28(v19);
  AnySharePreview.init<A, B>(_:)(v11, v25, v26, v23, v24, v29);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
}

uint64_t closure #1 in AnyShareConfiguration.init<A, B, C>(item:subject:message:preview:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = *(void *)(a2 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x1F4188790](a1);
  id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28D78]), sel_init);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  unint64_t v15 = (*(unsigned __int8 *)(v12 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = a2;
  *((void *)v16 + 3) = a3;
  *((void *)v16 + 4) = a4;
  *((void *)v16 + 5) = a5;
  uint64_t v17 = v22;
  *((void *)v16 + 6) = v21;
  *((void *)v16 + 7) = v17;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v16[v15], (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  NSItemProvider.register<A>(_:)();
  swift_release();
  type metadata accessor for Any?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_188351940;
  *(void *)(v18 + 32) = v14;
  uint64_t v23 = v18;
  specialized Array._endMutation()();
  return v23;
}

uint64_t closure #2 in AnyShareConfiguration.init<A, B, C>(item:subject:message:preview:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  v18[0] = a2;
  v18[1] = a3;
  void v18[2] = a4;
  v18[3] = a5;
  uint64_t v12 = type metadata accessor for SharePreview();
  double v13 = MEMORY[0x1F4188790](v12);
  unint64_t v15 = (void *)((char *)v18 - v14);
  (*(void (**)(char *, uint64_t, double))(v16 + 16))((char *)v18 - v14, a1, v13);
  return AnySharePreview.init<A, B>(_:)(v15, a2, a3, a4, a5, a6);
}

uint64_t specialized AnyShareConfiguration.init<A, B, C, D>(_:optimizeForSharingPicker:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  LODWORD(v54) = a2;
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v52 - v11;
  uint64_t v68 = v13;
  uint64_t v69 = v14;
  uint64_t v59 = v14;
  uint64_t v60 = v15;
  uint64_t v65 = v16;
  uint64_t v66 = v17;
  uint64_t v70 = v16;
  uint64_t v71 = v18;
  uint64_t v56 = v18;
  uint64_t v57 = v19;
  uint64_t v72 = v17;
  double v73 = v15;
  uint64_t v64 = v20;
  uint64_t v74 = v20;
  uint64_t v75 = v19;
  uint64_t v58 = v21;
  uint64_t v76 = v21;
  uint64_t v22 = type metadata accessor for ShareLink();
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v23(v12, a1 + *(int *)(v22 + 92), a3);
  uint64_t v62 = v22;
  uint64_t v63 = a1;
  uint64_t v24 = (uint64_t *)(a1 + *(int *)(v22 + 104));
  uint64_t v25 = v24[1];
  uint64_t v67 = *v24;
  uint64_t v61 = v25;
  if (v67)
  {
    uint64_t v53 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    v23(v9, (uint64_t)v12, a3);
    uint64_t v55 = v7;
    unint64_t v26 = (*(unsigned __int8 *)(v7 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    unint64_t v54 = (v8 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v27 = (char *)swift_allocObject();
    uint64_t v29 = v59;
    uint64_t v28 = v60;
    *((void *)v27 + 2) = a3;
    *((void *)v27 + 3) = v29;
    uint64_t v31 = v56;
    uint64_t v30 = v57;
    *((void *)v27 + 4) = v65;
    *((void *)v27 + 5) = v31;
    *((void *)v27 + 6) = v66;
    *((void *)v27 + 7) = v28;
    *((void *)v27 + 8) = v64;
    *((void *)v27 + 9) = v30;
    uint64_t v32 = v58;
    *((void *)v27 + 10) = v58;
    (*(void (**)(char *, char *, uint64_t))(v55 + 32))(&v27[v26], v53, a3);
    uint64_t v33 = &v27[v54];
    uint64_t v34 = v61;
    *(void *)uint64_t v33 = v67;
    *((void *)v33 + 1) = v34;
    unint64_t v35 = makeItemProviders #1 <A, B, C, D>(from:) in AnyShareConfiguration.init<A, B, C, D>(_:optimizeForSharingPicker:)((uint64_t)v12, a3, v29, v65, v31, v66, (uint64_t)v28, v64, v30, v32);
    uint64_t v65 = v36;
    uint64_t v66 = (uint64_t)v35;
    LODWORD(v64) = 1;
    uint64_t v60 = partial apply for closure #1 in AnyShareConfiguration.init<A, B, C, D>(_:optimizeForSharingPicker:);
    uint64_t v37 = v55;
  }
  else
  {
    uint64_t v37 = v7;
    if (v54)
    {
      ((void (*)(char *, char *, uint64_t, uint64_t, uint64_t))v23)(v9, v12, a3, v65, v56);
      swift_getAssociatedTypeWitness();
      Array.init<A>(_:)();
      uint64_t v66 = _arrayForceCast<A, B>(_:)();
      swift_bridgeObjectRelease();
      uint64_t v65 = 0;
      uint64_t v60 = 0;
      uint64_t v27 = 0;
      LODWORD(v64) = 0;
    }
    else
    {
      uint64_t v38 = makeItemProviders #1 <A, B, C, D>(from:) in AnyShareConfiguration.init<A, B, C, D>(_:optimizeForSharingPicker:)((uint64_t)v12, a3, v59, v65, v56, v66, (uint64_t)v60, v64, v57, v58);
      uint64_t v65 = v39;
      uint64_t v66 = (uint64_t)v38;
      uint64_t v60 = 0;
      uint64_t v27 = 0;
      LODWORD(v64) = 1;
    }
  }
  outlined copy of AppIntentExecutor?(v67);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v12, a3);
  uint64_t v40 = (uint64_t *)(v63 + *(int *)(v62 + 96));
  uint64_t v41 = *v40;
  uint64_t v42 = v40[1];
  uint64_t v43 = v40[2];
  uint64_t v44 = v40[3];
  uint64_t v45 = (uint64_t *)(v63 + *(int *)(v62 + 100));
  uint64_t v47 = *v45;
  uint64_t v46 = v45[1];
  uint64_t v48 = v45[2];
  uint64_t v49 = v45[3];
  outlined copy of Text?(v41, v42, v43, v44);
  uint64_t result = outlined copy of Text?(v47, v46, v48, v49);
  uint64_t v51 = v65;
  *(void *)a4 = v66;
  *(void *)(a4 + 8) = v51;
  *(void *)(a4 + 16) = v60;
  *(void *)(a4 + 24) = v27;
  *(unsigned char *)(a4 + 32) = v64;
  *(void *)(a4 + 40) = v41;
  *(void *)(a4 + 48) = v42;
  *(void *)(a4 + 56) = v43;
  *(void *)(a4 + 64) = v44;
  *(void *)(a4 + 72) = v47;
  *(void *)(a4 + 80) = v46;
  *(void *)(a4 + 88) = v48;
  *(void *)(a4 + 96) = v49;
  return result;
}

uint64_t sub_187B26ED8()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AnyShareConfiguration.init<A, B, C, D>(_:optimizeForSharingPicker:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (char *)v2
     + ((*(void *)(*(void *)(v2[2] - 8) + 64)
       + ((*(unsigned __int8 *)(*(void *)(v2[2] - 8) + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2[2] - 8) + 80))
       + 7) & 0xFFFFFFFFFFFFFFF8);
  return closure #1 in AnyShareConfiguration.init<A, B, C, D>(_:optimizeForSharingPicker:)(a1, *(void (**)(char *))v3, *((void *)v3 + 1), v2[3], v2[4], a2, v2[6], v2[7], v2[8]);
}

uint64_t sub_187B27014()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in makeItemProviders #1 <A, B, C, D>(from:) in AnyShareConfiguration.init<A, B, C, D>(_:optimizeForSharingPicker:)()
{
  return closure #1 in makeItemProviders #1 <A, B, C, D>(from:) in AnyShareConfiguration.init<A, B, C, D>(_:optimizeForSharingPicker:)((uint64_t)v0+ ((*(unsigned __int8 *)(*(void *)(v0[2] - 8) + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v0[2] - 8) + 80)), v0[2], v0[3], v0[4], v0[5], v0[6], v0[7], v0[8], v0[9], v0[10]);
}

uint64_t sub_187B2710C()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(AssociatedTypeWitness - 8) + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(AssociatedTypeWitness - 8) + 80)), AssociatedTypeWitness);

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in closure #1 in makeItemProviders #1 <A, B, C, D>(from:) in AnyShareConfiguration.init<A, B, C, D>(_:optimizeForSharingPicker:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return v5(a1, v6, AssociatedTypeWitness);
}

__n128 specialized AnyIdentifiableShareConfiguration.init<A, B, C, D>(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, long long a10)
{
  v21.n128_u64[0] = a2;
  v21.n128_u64[1] = a3;
  *(void *)&long long v22 = a4;
  *((void *)&v22 + 1) = a5;
  uint64_t v23 = a6;
  *(void *)&long long v24 = a7;
  *((void *)&v24 + 1) = a8;
  long long v25 = a10;
  type metadata accessor for ShareLink();
  uint64_t v20 = ShareLink.namespace.getter();
  specialized AnyShareConfiguration.init<A, B, C, D>(_:optimizeForSharingPicker:)(a1, 1, a2, (uint64_t)&v21);
  char v13 = v23;
  __n128 result = v21;
  long long v15 = v22;
  long long v16 = v24;
  long long v17 = v25;
  long long v18 = v26;
  long long v19 = v27;
  *(void *)a9 = v20;
  *(__n128 *)(a9 + 8) = result;
  *(_OWORD *)(a9 + 24) = v15;
  *(unsigned char *)(a9 + 40) = v13;
  *(_OWORD *)(a9 + 48) = v16;
  *(_OWORD *)(a9 + 64) = v17;
  *(_OWORD *)(a9 + 80) = v18;
  *(_OWORD *)(a9 + 96) = v19;
  return result;
}

uint64_t partial apply for closure #1 in AnyShareConfiguration.init<A, B, C>(item:subject:message:preview:)()
{
  return closure #1 in AnyShareConfiguration.init<A, B, C>(item:subject:message:preview:)((uint64_t)v0+ ((*(unsigned __int8 *)(*(void *)(v0[2] - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v0[2] - 8) + 80)), v0[2], v0[3], v0[4], v0[5], v0[6], v0[7]);
}

uint64_t sub_187B2739C()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v3 = type metadata accessor for SharePreview();
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80);
  uint64_t v5 = v0 + v4;
  if (*(void *)(v0 + v4 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + v4);
  }
  if (*(void *)(v5 + 56))
  {
    outlined consume of Text.Storage(*(void *)(v5 + 32), *(void *)(v5 + 40), *(unsigned char *)(v5 + 48));
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = v5 + *(int *)(v3 + 56);
  uint64_t v7 = *(void *)(v2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v6, 1, v2)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v2);
  }
  uint64_t v8 = v5 + *(int *)(v3 + 60);
  uint64_t v9 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v8, 1, v1)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v1);
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in AnyShareConfiguration.init<A, B, C>(item:subject:message:preview:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[6];
  uint64_t v6 = v1[7];
  uint64_t v7 = *(void *)(type metadata accessor for SharePreview() - 8);
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v7 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return closure #2 in AnyShareConfiguration.init<A, B, C>(item:subject:message:preview:)(v8, v3, v4, v5, v6, a1);
}

uint64_t objectdestroy_20Tm()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in closure #1 in AnyShareConfiguration.init<A, B, C>(item:subject:message:preview:)@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)(*(void *)(v1 + 16) - 8) + 16))(a1, v1+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80)));
}

uint64_t destroy for AnySharePreview(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  swift_release();
  uint64_t result = swift_release();
  if (*(void *)(a1 + 88))
  {
    return __swift_destroy_boxed_opaque_existential_1(a1 + 64);
  }
  return result;
}

uint64_t initializeWithCopy for AnySharePreview(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)a2;
    uint64_t v6 = *(void *)(a2 + 8);
    char v7 = *(unsigned char *)(a2 + 16);
    outlined copy of Text.Storage(*(void *)a2, v6, v7);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v6;
    *(unsigned char *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = v9;
  uint64_t v10 = (_OWORD *)(a2 + 64);
  uint64_t v11 = *(void *)(a2 + 88);
  swift_retain();
  swift_retain();
  if (v11)
  {
    *(void *)(a1 + 88) = v11;
    (**(void (***)(uint64_t, _OWORD *, uint64_t))(v11 - 8))(a1 + 64, v10, v11);
  }
  else
  {
    long long v12 = v10[1];
    *(_OWORD *)(a1 + 64) = *v10;
    *(_OWORD *)(a1 + 80) = v12;
  }
  return a1;
}

uint64_t assignWithCopy for AnySharePreview(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24))
  {
    if (v4)
    {
      uint64_t v5 = *(void *)a2;
      uint64_t v6 = *(void *)(a2 + 8);
      char v7 = *(unsigned char *)(a2 + 16);
      outlined copy of Text.Storage(*(void *)a2, v6, v7);
      uint64_t v8 = *(void *)a1;
      uint64_t v9 = *(void *)(a1 + 8);
      char v10 = *(unsigned char *)(a1 + 16);
      *(void *)a1 = v5;
      *(void *)(a1 + 8) = v6;
      *(unsigned char *)(a1 + 16) = v7;
      outlined consume of Text.Storage(v8, v9, v10);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1);
      long long v14 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v14;
    }
  }
  else if (v4)
  {
    uint64_t v11 = *(void *)a2;
    uint64_t v12 = *(void *)(a2 + 8);
    char v13 = *(unsigned char *)(a2 + 16);
    outlined copy of Text.Storage(*(void *)a2, v12, v13);
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v12;
    *(unsigned char *)(a1 + 16) = v13;
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
  }
  uint64_t v16 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v16;
  swift_retain();
  swift_release();
  uint64_t v17 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v17;
  swift_retain();
  swift_release();
  uint64_t v18 = *(void *)(a2 + 88);
  if (!*(void *)(a1 + 88))
  {
    if (v18)
    {
      *(void *)(a1 + 88) = v18;
      (**(void (***)(uint64_t, uint64_t))(v18 - 8))(a1 + 64, a2 + 64);
      return a1;
    }
LABEL_14:
    long long v19 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v19;
    return a1;
  }
  if (!v18)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 64);
    goto LABEL_14;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 64), (uint64_t *)(a2 + 64));
  return a1;
}

uint64_t assignWithTake for AnySharePreview(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v4 = *(void *)(a2 + 24);
    if (v4)
    {
      char v5 = *(unsigned char *)(a2 + 16);
      uint64_t v6 = *(void *)a1;
      uint64_t v7 = *(void *)(a1 + 8);
      char v8 = *(unsigned char *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16) = v5;
      outlined consume of Text.Storage(v6, v7, v8);
      *(void *)(a1 + 24) = v4;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1);
  }
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
LABEL_6:
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  if (*(void *)(a1 + 88)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 64);
  }
  long long v10 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v10;
  return a1;
}

uint64_t getEnumTagSinglePayload for AnySharePreview(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnySharePreview(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void destroy for AnyShareConfiguration.Storage(uint64_t a1)
{
}

uint64_t initializeWithCopy for AnyShareConfiguration.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  outlined copy of AnyShareConfiguration.Storage(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for AnyShareConfiguration.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  outlined copy of AnyShareConfiguration.Storage(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  char v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  outlined consume of AnyShareConfiguration.Storage(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for AnyShareConfiguration.Storage(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  char v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  outlined consume of AnyShareConfiguration.Storage(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t destructiveInjectEnumTag for AnyShareConfiguration.Storage(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2;
  return result;
}

void AutomaticControlGroupStyle.makeBody(configuration:)(_WORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t associated type witness table accessor for ControlGroupStyle.Body : View in AutomaticControlGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

void protocol witness for ControlGroupStyle.makeBody(configuration:) in conformance AutomaticControlGroupStyle(_WORD *a1@<X8>)
{
}

ValueMetadata *type metadata accessor for AutomaticControlGroupStyle()
{
  return &type metadata for AutomaticControlGroupStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>>, ControlGroupStyleModifier<InternalControlGroupStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>>, ControlGroupStyleModifier<InternalControlGroupStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>>, ControlGroupStyleModifier<InternalControlGroupStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>>, ControlGroupStyleModifier<InternalControlGroupStyle>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>>, ControlGroupStyleModifier<InternalControlGroupStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>>, ControlGroupStyleModifier<InternalControlGroupStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>>, ControlGroupStyleModifier<InternalControlGroupStyle>>)
  {
    type metadata accessor for ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>);
    type metadata accessor for ControlGroupStyleModifier<MenuControlGroupStyle>(255, &lazy cache variable for type metadata for ControlGroupStyleModifier<InternalControlGroupStyle>, (void (*)(void))lazy protocol witness table accessor for type InternalControlGroupStyle and conformance InternalControlGroupStyle);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>>, ControlGroupStyleModifier<InternalControlGroupStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>();
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>, (uint64_t)&type metadata for GroupedFormStyleContext, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ControlGroup<ControlGroupStyleConfiguration.Content>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>);
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>, (uint64_t)&type metadata for AnyListStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>);
    }
  }
}

void type metadata accessor for ControlGroup<ControlGroupStyleConfiguration.Content>()
{
  if (!lazy cache variable for type metadata for ControlGroup<ControlGroupStyleConfiguration.Content>)
  {
    unint64_t v0 = type metadata accessor for ControlGroup();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ControlGroup<ControlGroupStyleConfiguration.Content>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>);
    type metadata accessor for ControlGroupStyleModifier<MenuControlGroupStyle>(255, &lazy cache variable for type metadata for ControlGroupStyleModifier<MenuControlGroupStyle>, (void (*)(void))lazy protocol witness table accessor for type MenuControlGroupStyle and conformance MenuControlGroupStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type MenuControlGroupStyle and conformance MenuControlGroupStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type MenuControlGroupStyle and conformance MenuControlGroupStyle;
  if (!lazy protocol witness table cache variable for type MenuControlGroupStyle and conformance MenuControlGroupStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuControlGroupStyle and conformance MenuControlGroupStyle);
  }
  return result;
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  if (!*a2)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, a3);
    type metadata accessor for ControlGroupStyleModifier<MenuControlGroupStyle>(255, &lazy cache variable for type metadata for ControlGroupStyleModifier<ListControlGroupStyle>, (void (*)(void))lazy protocol witness table accessor for type ListControlGroupStyle and conformance ListControlGroupStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(a5, a3);
    unint64_t v8 = type metadata accessor for StaticIf();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ListControlGroupStyle and conformance ListControlGroupStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ListControlGroupStyle and conformance ListControlGroupStyle;
  if (!lazy protocol witness table cache variable for type ListControlGroupStyle and conformance ListControlGroupStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListControlGroupStyle and conformance ListControlGroupStyle);
  }
  return result;
}

void type metadata accessor for StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>)
  {
    type metadata accessor for ControlGroupStyleModifier<MenuControlGroupStyle>(255, &lazy cache variable for type metadata for ControlGroupStyleModifier<ToolbarControlGroupStyle>, (void (*)(void))lazy protocol witness table accessor for type ToolbarControlGroupStyle and conformance ToolbarControlGroupStyle);
    lazy protocol witness table accessor for type UseToolbarStyle and conformance UseToolbarStyle();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ToolbarControlGroupStyle and conformance ToolbarControlGroupStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarControlGroupStyle and conformance ToolbarControlGroupStyle;
  if (!lazy protocol witness table cache variable for type ToolbarControlGroupStyle and conformance ToolbarControlGroupStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarControlGroupStyle and conformance ToolbarControlGroupStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UseToolbarStyle and conformance UseToolbarStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type UseToolbarStyle and conformance UseToolbarStyle;
  if (!lazy protocol witness table cache variable for type UseToolbarStyle and conformance UseToolbarStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseToolbarStyle and conformance UseToolbarStyle);
  }
  return result;
}

void type metadata accessor for ControlGroupStyleModifier<MenuControlGroupStyle>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for ControlGroupStyleModifier();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type InternalControlGroupStyle and conformance InternalControlGroupStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type InternalControlGroupStyle and conformance InternalControlGroupStyle;
  if (!lazy protocol witness table cache variable for type InternalControlGroupStyle and conformance InternalControlGroupStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InternalControlGroupStyle and conformance InternalControlGroupStyle);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ControlGroup<ControlGroupStyleConfiguration.Content>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>);
    lazy protocol witness table accessor for type ControlGroup<ControlGroupStyleConfiguration.Content> and conformance ControlGroup<A>();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ControlGroup<ControlGroupStyleConfiguration.Content> and conformance ControlGroup<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ControlGroup<ControlGroupStyleConfiguration.Content> and conformance ControlGroup<A>;
  if (!lazy protocol witness table cache variable for type ControlGroup<ControlGroupStyleConfiguration.Content> and conformance ControlGroup<A>)
  {
    type metadata accessor for ControlGroup<ControlGroupStyleConfiguration.Content>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ControlGroup<ControlGroupStyleConfiguration.Content> and conformance ControlGroup<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>, (uint64_t)&type metadata for AnyListStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>, (uint64_t)&type metadata for GroupedFormStyleContext, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *type metadata accessor for UseToolbarStyle()
{
  return &unk_1ED41C7A0;
}

uint64_t specialized static UseToolbarStyle.evaluate(inputs:)()
{
  static Semantics.v4.getter();
  if (isLinkedOnOrAfter(_:)()) {
    char v0 = static StyleContextAcceptsPredicate.evaluate(inputs:)();
  }
  else {
    char v0 = 0;
  }
  return v0 & 1;
}

uint64_t EnvironmentValues.searchTextClearAction.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_searchTextClearAction>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchTextClearAction?> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_searchTextClearAction> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_searchTextClearAction>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_searchTextClearAction>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchTextClearAction?> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_searchTextClearAction> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_searchTextClearAction>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t View.onSearchTextClear(_:)()
{
  return swift_release();
}

uint64_t sub_187B28A0C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.searchTextClearAction.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.searchTextClearAction : EnvironmentValues(uint64_t *a1)
{
  uint64_t v1 = *a1;
  outlined copy of AppIntentExecutor?(*a1);
  specialized EnvironmentValues.subscript.setter(v1);

  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
}

uint64_t sub_187B28AA8()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<SearchTextClearAction?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SearchTextClearAction?>)
  {
    type metadata accessor for SearchTextClearAction?();
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SearchTextClearAction?>);
    }
  }
}

void type metadata accessor for SearchTextClearAction?()
{
  if (!lazy cache variable for type metadata for SearchTextClearAction?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SearchTextClearAction?);
    }
  }
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_searchTextClearAction>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchTextClearAction>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchTextClearAction>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchTextClearAction?> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.__Key_searchTextClearAction()
{
  return &type metadata for EnvironmentValues.__Key_searchTextClearAction;
}

uint64_t TabItem.resolvedSidebarCustomizationBehavior.getter@<X0>(char *a1@<X8>)
{
  uint64_t v2 = v1;
  char v4 = TabItem.needsCustomizationIDForEnablement.getter();
  outlined init with copy of TabItem(v2, (uint64_t)v12);
  if (v4)
  {
    uint64_t v5 = one-time initialization token for defaultValue;
    swift_bridgeObjectRetain();
    if (v5 != -1) {
      swift_once();
    }
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    outlined copy of TabCustomizationID?(v9, v10, v11);
    outlined consume of TabCustomizationID?(v9, v10, v11);
    swift_bridgeObjectRelease();
    if (v11 == 255)
    {
      uint64_t result = outlined destroy of TabItem((uint64_t)v12);
      char v7 = 2;
      goto LABEL_9;
    }
    outlined consume of TabCustomizationID?(v9, v10, v11);
  }
  outlined destroy of TabItem((uint64_t)v12);
  uint64_t v6 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v6 != -1) {
    swift_once();
  }
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  char v7 = v16;
  outlined consume of TabCustomizationID?(v13, v14, v15);
  uint64_t result = swift_bridgeObjectRelease();
LABEL_9:
  *a1 = v7;
  return result;
}

BOOL TabItem.pinned.getter()
{
  uint64_t v0 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v0 != -1) {
    swift_once();
  }
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  outlined consume of TabCustomizationID?(v3, v4, v5);
  swift_bridgeObjectRelease();
  if (v7 == 1 && (v6 & 1) != 0) {
    return v2 == 1;
  }
  else {
    return v2 < 2u;
  }
}

BOOL TabItem.sidebarOnly.getter()
{
  uint64_t v0 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v0 != -1) {
    swift_once();
  }
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  outlined consume of TabCustomizationID?(v3, v4, v5);
  swift_bridgeObjectRelease();
  return v2 == 2;
}

uint64_t TabItem.isGroupChild.getter()
{
  uint64_t v1 = v0;
  uint64_t v7 = *(void *)(v0 + 88);
  uint64_t v6 = MEMORY[0x1E4FBC860];
  ViewTraitCollection.value<A>(for:defaultValue:)();
  uint64_t v2 = *(void *)(v5[0] + 16);
  swift_bridgeObjectRelease();
  outlined init with copy of TabItem(v1, (uint64_t)v5);
  if (v2)
  {
    uint64_t v7 = v5[11];
    ViewTraitCollection.value<A>(for:defaultValue:)();
    char v3 = v6 ^ 1;
  }
  else
  {
    char v3 = 0;
  }
  outlined destroy of TabItem((uint64_t)v5);
  return v3 & 1;
}

uint64_t TabItem.resolvedCustomizationID.getter()
{
  if ((TabItem.needsCustomizationIDForEnablement.getter() & 1) == 0) {
    return TabItem.platformIdentifier.getter();
  }
  uint64_t v0 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v0 != -1) {
    swift_once();
  }
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  uint64_t v1 = v3;
  outlined copy of TabCustomizationID?(v3, v4, v5);
  outlined consume of TabCustomizationID?(v3, v4, v5);
  swift_bridgeObjectRelease();
  if (v5 == 255) {
    return TabItem.platformIdentifier.getter();
  }
  return v1;
}

uint64_t TabItem.needsCustomizationIDForEnablement.getter()
{
  uint64_t v1 = v0;
  uint64_t v14 = *(void *)(v0 + 88);
  uint64_t v2 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v2 != -1) {
    swift_once();
  }
  __int16 v7 = static TabOptions.TraitKey.defaultValue;
  char v8 = byte_1E90FC582;
  long long v9 = *(_OWORD *)&qword_1E90FC588;
  __int16 v10 = word_1E90FC598;
  char v11 = byte_1E90FC59A;
  uint64_t v12 = qword_1E90FC5A0;
  __int16 v13 = word_1E90FC5A8;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  int v3 = v25;
  outlined consume of TabCustomizationID?(v22, v23, v24);
  swift_bridgeObjectRelease();
  outlined init with copy of TabItem(v1, (uint64_t)v21);
  if (!v3)
  {
    outlined destroy of TabItem((uint64_t)v21);
    outlined init with copy of TabItem(v1, (uint64_t)&v7);
    goto LABEL_7;
  }
  uint64_t v20 = v26;
  LOWORD(v14) = static TabOptions.TraitKey.defaultValue;
  BYTE2(v14) = byte_1E90FC582;
  long long v15 = *(_OWORD *)&qword_1E90FC588;
  __int16 v16 = word_1E90FC598;
  char v17 = byte_1E90FC59A;
  uint64_t v18 = qword_1E90FC5A0;
  __int16 v19 = word_1E90FC5A8;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  int v4 = HIBYTE(v10);
  outlined consume of TabCustomizationID?(v9, *((uint64_t *)&v9 + 1), v10);
  swift_bridgeObjectRelease();
  outlined destroy of TabItem((uint64_t)v21);
  outlined init with copy of TabItem(v1, (uint64_t)&v7);
  if (!v4)
  {
LABEL_7:
    char v5 = 1;
    goto LABEL_8;
  }
  char v5 = TabItem.alwaysRequiresCustomizationID.getter();
LABEL_8:
  outlined destroy of TabItem((uint64_t)&v7);
  return v5 & 1;
}

uint64_t TabItem.canBridgeClientProvidedCustomization.getter()
{
  char v1 = TabItem.needsCustomizationIDForEnablement.getter();
  outlined init with copy of TabItem(v0, (uint64_t)v8);
  if (v1)
  {
    uint64_t v2 = one-time initialization token for defaultValue;
    swift_bridgeObjectRetain();
    if (v2 != -1) {
      swift_once();
    }
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    outlined copy of TabCustomizationID?(v5, v6, v7);
    outlined consume of TabCustomizationID?(v5, v6, v7);
    swift_bridgeObjectRelease();
    if (v7 == 255)
    {
      uint64_t v3 = 0;
      goto LABEL_7;
    }
    outlined consume of TabCustomizationID?(v5, v6, v7);
  }
  uint64_t v3 = 1;
LABEL_7:
  outlined destroy of TabItem((uint64_t)v8);
  return v3;
}

uint64_t TabItem.alwaysRequiresCustomizationID.getter()
{
  uint64_t v1 = v0;
  BOOL v2 = TabItem.sidebarOnly.getter();
  outlined init with copy of TabItem(v1, (uint64_t)v14);
  if (v2)
  {
    outlined destroy of TabItem((uint64_t)v14);
    outlined init with copy of TabItem(v1, (uint64_t)v13);
LABEL_4:
    BOOL v4 = 0;
    goto LABEL_8;
  }
  BOOL v3 = TabItem.pinned.getter();
  outlined destroy of TabItem((uint64_t)v14);
  outlined init with copy of TabItem(v1, (uint64_t)v13);
  if (v3) {
    goto LABEL_4;
  }
  uint64_t v5 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v5 != -1) {
    swift_once();
  }
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  outlined consume of TabCustomizationID?(v8, v9, v10);
  swift_bridgeObjectRelease();
  BOOL v4 = v12 == 1;
LABEL_8:
  outlined destroy of TabItem((uint64_t)v13);
  uint64_t v6 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v6 != -1) {
    swift_once();
  }
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  outlined consume of TabCustomizationID?(v8, v9, v10);
  swift_bridgeObjectRelease();
  return v11 == 1 || v4;
}

SwiftUI::TabCustomizationBehavior __swiftcall TabItem.resolvedUIKitTopBarCustomizationBehavior(customizationEnabled:)(Swift::Bool customizationEnabled)
{
  BOOL v4 = v1;
  if (TabItem.canBridgeClientProvidedCustomization.getter())
  {
    uint64_t v5 = one-time initialization token for defaultValue;
    swift_bridgeObjectRetain();
    if (v5 != -1) {
      swift_once();
    }
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    outlined consume of TabCustomizationID?(v9, v10, v11);
    result.role = swift_bridgeObjectRelease();
    *BOOL v4 = v12;
  }
  else
  {
    outlined init with copy of TabItem(v2, (uint64_t)v8);
    if (customizationEnabled)
    {
      char v7 = TabItem.isGroupChild.getter();
      result.role = outlined destroy of TabItem((uint64_t)v8);
      if (v7) {
        *BOOL v4 = 0;
      }
      else {
        *BOOL v4 = 2;
      }
    }
    else
    {
      result.role = outlined destroy of TabItem((uint64_t)v8);
      *BOOL v4 = 0;
    }
  }
  return result;
}

SwiftUI::SpringLoadingBehavior __swiftcall TabItem.resolvedSpringLoadingBehavior(environmentBehavior:)(SwiftUI::SpringLoadingBehavior environmentBehavior)
{
  uint64_t v2 = v1;
  char v3 = *(unsigned char *)environmentBehavior.guts;
  result.guts = ViewTraitCollection.value<A>(for:defaultValue:)();
  if (v5)
  {
    result.guts = ViewTraitCollection.value<A>(for:defaultValue:)();
    char v3 = v5;
  }
  *uint64_t v2 = v3;
  return result;
}

uint64_t TabItem.clientDefaultVisibility(for:)(unsigned __int8 *a1)
{
  uint64_t v2 = v1;
  unsigned __int8 v3 = *a1;
  uint64_t v4 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v4 != -1) {
    swift_once();
  }
  __int16 v19 = static TabOptions.TraitKey.defaultValue;
  char v20 = byte_1E90FC582;
  long long v21 = *(_OWORD *)&qword_1E90FC588;
  __int16 v22 = word_1E90FC598;
  char v23 = byte_1E90FC59A;
  uint64_t v24 = qword_1E90FC5A0;
  __int16 v25 = word_1E90FC5A8;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined consume of TabCustomizationID?(v15, v16, v17);
  swift_bridgeObjectRelease();
  if (*(void *)(v18 + 16) && (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v3), (v6 & 1) != 0))
  {
    uint64_t v7 = *(unsigned __int8 *)(*(void *)(v18 + 56) + v5);
    swift_bridgeObjectRelease();
    outlined init with copy of TabItem(v2, (uint64_t)v14);
    if (v7 != 3) {
      goto LABEL_13;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    outlined init with copy of TabItem(v2, (uint64_t)v14);
  }
  ViewTraitCollection.value<A>(for:defaultValue:)();
  long long v8 = v21;
  uint64_t v9 = v24;
  unsigned __int8 v10 = v22;
  swift_bridgeObjectRetain();
  outlined consume of TabCustomizationID?(v8, *((uint64_t *)&v8 + 1), v10);
  swift_bridgeObjectRelease();
  if (*(void *)(v9 + 16) && (unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(2u), (v12 & 1) != 0)) {
    uint64_t v7 = *(unsigned __int8 *)(*(void *)(v9 + 56) + v11);
  }
  else {
    uint64_t v7 = 0;
  }
  swift_bridgeObjectRelease();
LABEL_13:
  outlined destroy of TabItem((uint64_t)v14);
  return v7;
}

Swift::Bool_optional __swiftcall TabSidebarConfiguration.sidebarVisible()()
{
  int v1 = *v0;
  if (*((void *)v0 + 2)
    && (type metadata accessor for Binding<Visibility>(0, &lazy cache variable for type metadata for Binding<Visibility>, MEMORY[0x1E4F3F3F0], MEMORY[0x1E4F41638]), uint64_t v3 = v2, swift_retain(), swift_retain(), MEMORY[0x18C113DA0](&v5, v3), swift_release(), swift_release(), (_BYTE)v5))
  {
    LOBYTE(v1) = v5 == 1;
  }
  else if (v1 != 1 && v1 != 2)
  {
    LOBYTE(v1) = 0;
  }
  return (Swift::Bool_optional)v1;
}

Swift::Int_optional __swiftcall TabItem.sectionID(at:)(Swift::Int at)
{
  ViewTraitCollection.value<A>(for:defaultValue:)();
  if (at < 0 || *(void *)(v5 + 16) <= (unint64_t)at)
  {
    swift_bridgeObjectRelease();
    Swift::Int v2 = 0;
    Swift::Bool v3 = 1;
  }
  else
  {
    Swift::Int v2 = *(void *)(v5 + 8 * at + 32);
    swift_bridgeObjectRelease();
    Swift::Bool v3 = 0;
  }
  Swift::Int v4 = v2;
  result.value = v4;
  result.is_nil = v3;
  return result;
}

char *static AdaptableTabView.makeTabGroups(_:depth:maxDepth:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v70 = (uint64_t *)a3;
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1E4FBC860];
  v83[0] = (char *)MEMORY[0x1E4FBC860];
  unint64_t v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v81 = v8;
  unint64_t v82 = v9;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = a1 + 32;
    uint64_t v68 = v7;
    uint64_t v69 = (uint8_t *)&v78;
    uint64_t v67 = a1;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of TabItem(v11, (uint64_t)v72);
      *(void *)double v73 = *(void *)&v72[88];
      v71[0] = v8;
      ViewTraitCollection.value<A>(for:defaultValue:)();
      uint64_t v18 = *(void *)(*(void *)&v75[0] + 16);
      swift_bridgeObjectRelease();
      outlined init with copy of TabItem((uint64_t)v72, (uint64_t)v75);
      if (v18)
      {
        outlined destroy of TabItem((uint64_t)v75);
      }
      else
      {
        *(void *)double v73 = *((void *)&v76 + 1);
        uint64_t v19 = ViewTraitCollection.isAuxiliaryContent.getter();
        outlined destroy of TabItem((uint64_t)v75);
        if ((v19 & 1) == 0)
        {
          static AdaptableTabView.makeGroup(from:depth:maxDepth:result:cache:)(&v81, a2, (uint64_t)v70, v83, &v82);
          outlined init with copy of TabItem((uint64_t)v72, (uint64_t)v75);
          *uint64_t v69 = 0;
          outlined init with copy of TabEntry((uint64_t)v75, (uint64_t)v73);
          char v23 = v83[0];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            char v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v23 + 2) + 1, 1, v23);
          }
          unint64_t v25 = *((void *)v23 + 2);
          unint64_t v24 = *((void *)v23 + 3);
          if (v25 >= v24 >> 1) {
            char v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25 + 1, 1, v23);
          }
          *((void *)v23 + 2) = v25 + 1;
          outlined init with take of TabEntry((uint64_t)v73, (uint64_t)&v23[272 * v25 + 32]);
          v83[0] = v23;
          uint64_t v26 = TabItem.platformIdentifier.getter();
          uint64_t v28 = v27;
          outlined init with copy of TabEntry((uint64_t)v75, (uint64_t)v73);
          unint64_t v29 = v82;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v71[0] = v29;
          unint64_t v82 = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v73, v26, v28, isUniquelyReferenced_nonNull_native);
          unint64_t v82 = v71[0];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined destroy of TabEntry((uint64_t)v75);
          goto LABEL_4;
        }
      }
      v71[0] = *(void *)&v72[88];
      uint64_t v80 = v8;
      ViewTraitCollection.value<A>(for:defaultValue:)();
      if ((a2 & 0x8000000000000000) != 0 || *(void *)(*(void *)v73 + 16) <= a2)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v20 = *(void *)(*(void *)v73 + 8 * a2 + 32);
        swift_bridgeObjectRelease();
        uint64_t v21 = *(void *)(v81 + 16);
        if (v21)
        {
          outlined init with copy of TabItem(v81 + 104 * v21 - 72, (uint64_t)v73);
          uint64_t v79 = v8;
          uint64_t v80 = *(void *)&v73[88];
          ViewTraitCollection.value<A>(for:defaultValue:)();
          if (*(void *)(v71[0] + 16) <= a2)
          {
            swift_bridgeObjectRelease();
            outlined destroy of TabItem((uint64_t)v73);
          }
          else
          {
            uint64_t v22 = *(void *)(v71[0] + 8 * a2 + 32);
            swift_bridgeObjectRelease();
            outlined destroy of TabItem((uint64_t)v73);
            if (v22 == v20) {
              goto LABEL_22;
            }
          }
        }
        static AdaptableTabView.makeGroup(from:depth:maxDepth:result:cache:)(&v81, a2, (uint64_t)v70, v83, &v82);
      }
LABEL_22:
      outlined init with copy of TabItem((uint64_t)v72, (uint64_t)v75);
      uint64_t v31 = (char *)v81;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v31 + 2) + 1, 1, v31);
      }
      unint64_t v33 = *((void *)v31 + 2);
      unint64_t v32 = *((void *)v31 + 3);
      if (v33 >= v32 >> 1) {
        uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v32 > 1), v33 + 1, 1, v31);
      }
      *((void *)v31 + 2) = v33 + 1;
      char v12 = &v31[104 * v33];
      long long v13 = v75[0];
      long long v14 = v75[2];
      *((_OWORD *)v12 + 3) = v75[1];
      *((_OWORD *)v12 + 4) = v14;
      *((_OWORD *)v12 + 2) = v13;
      long long v15 = v75[3];
      long long v16 = v75[4];
      long long v17 = v76;
      *((void *)v12 + 16) = v77;
      *((_OWORD *)v12 + 6) = v16;
      *((_OWORD *)v12 + 7) = v17;
      *((_OWORD *)v12 + 5) = v15;
      uint64_t v81 = (uint64_t)v31;
LABEL_4:
      outlined destroy of TabItem((uint64_t)v72);
      v11 += 104;
      if (!--v10)
      {
        swift_bridgeObjectRelease();
        uint64_t v7 = v68;
        break;
      }
    }
  }
  static AdaptableTabView.makeGroup(from:depth:maxDepth:result:cache:)(&v81, a2, (uint64_t)v70, v83, &v82);
  swift_bridgeObjectRelease();
  static Log.tabView.getter();
  uint64_t v34 = type metadata accessor for Logger();
  uint64_t v35 = *(void *)(v34 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v7, 1, v34) == 1)
  {
    outlined destroy of (header: TabItem?, children: [TabEntry], actions: [TabItem], compactItem: TabItem?)((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Logger?);
  }
  else
  {
    uint64_t v36 = v83[0];
    swift_bridgeObjectRetain_n();
    uint64_t v37 = Logger.logObject.getter();
    int v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, (os_log_type_t)v38))
    {
      LODWORD(v67) = v38;
      uint64_t v68 = v7;
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      uint64_t v80 = v66;
      uint64_t v69 = v39;
      *(_DWORD *)uint64_t v39 = 136315138;
      int64_t v40 = *((void *)v36 + 2);
      uint64_t v41 = MEMORY[0x1E4FBC860];
      if (v40)
      {
        uint64_t v63 = v37;
        uint64_t v64 = v35;
        uint64_t v65 = v34;
        uint64_t v79 = MEMORY[0x1E4FBC860];
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40, 0);
        v62[1] = v36;
        uint64_t v42 = (uint64_t)(v36 + 32);
        uint64_t v70 = &v74;
        do
        {
          outlined init with copy of TabEntry(v42, (uint64_t)v75);
          outlined init with copy of TabEntry((uint64_t)v75, (uint64_t)v73);
          if (*(unsigned char *)v70)
          {
            memcpy(v72, v73, sizeof(v72));
            strcpy((char *)v71, "TabItemGroup ");
            HIWORD(v71[1]) = -4864;
            v43._countAndFlagsBits = TabItemGroup.description.getter();
            String.append(_:)(v43);
            swift_bridgeObjectRelease();
            uint64_t v45 = v71[0];
            uint64_t v44 = v71[1];
            outlined destroy of TabItemGroup((uint64_t)v72);
          }
          else
          {
            *(_OWORD *)&v72[64] = *(_OWORD *)&v73[64];
            *(_OWORD *)&v72[80] = *(_OWORD *)&v73[80];
            *(void *)&v72[96] = *(void *)&v73[96];
            *(_OWORD *)uint64_t v72 = *(_OWORD *)v73;
            *(_OWORD *)&v72[16] = *(_OWORD *)&v73[16];
            *(_OWORD *)&v72[32] = *(_OWORD *)&v73[32];
            *(_OWORD *)&v72[48] = *(_OWORD *)&v73[48];
            v71[0] = 0;
            v71[1] = 0xE000000000000000;
            _StringGuts.grow(_:)(20);
            swift_bridgeObjectRelease();
            strcpy((char *)v71, "TabItem ");
            BYTE1(v71[1]) = 0;
            WORD1(v71[1]) = 0;
            HIDWORD(v71[1]) = -402653184;
            v46._countAndFlagsBits = TabItem.platformIdentifier.getter();
            String.append(_:)(v46);
            swift_bridgeObjectRelease();
            v47._countAndFlagsBits = 0x3D6E656464696820;
            v47._object = (void *)0xE800000000000000;
            String.append(_:)(v47);
            char v48 = TabEntry.hidden.getter();
            BOOL v49 = (v48 & 1) == 0;
            if (v48) {
              uint64_t v50 = 1702195828;
            }
            else {
              uint64_t v50 = 0x65736C6166;
            }
            if (v49) {
              unint64_t v51 = 0xE500000000000000;
            }
            else {
              unint64_t v51 = 0xE400000000000000;
            }
            unint64_t v52 = v51;
            String.append(_:)(*(Swift::String *)&v50);
            swift_bridgeObjectRelease();
            uint64_t v45 = v71[0];
            uint64_t v44 = v71[1];
            outlined destroy of TabItem((uint64_t)v72);
          }
          outlined destroy of TabEntry((uint64_t)v75);
          uint64_t v41 = v79;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v41 + 16) + 1, 1);
            uint64_t v41 = v79;
          }
          unint64_t v54 = *(void *)(v41 + 16);
          unint64_t v53 = *(void *)(v41 + 24);
          if (v54 >= v53 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v53 > 1), v54 + 1, 1);
            uint64_t v41 = v79;
          }
          *(void *)(v41 + 16) = v54 + 1;
          unint64_t v55 = v41 + 16 * v54;
          *(void *)(v55 + 32) = v45;
          *(void *)(v55 + 40) = v44;
          v42 += 272;
          --v40;
        }
        while (v40);
        swift_bridgeObjectRelease();
        uint64_t v35 = v64;
        uint64_t v34 = v65;
        uint64_t v37 = v63;
      }
      uint64_t v56 = v69;
      *(void *)&v75[0] = v41;
      type metadata accessor for Binding<Visibility>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v57 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v59 = v58;
      swift_bridgeObjectRelease();
      *(void *)&v75[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v59, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1872C6000, v37, (os_log_type_t)v67, "Made groups:\n%s", v56, 0xCu);
      uint64_t v60 = v66;
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v60, -1, -1);
      MEMORY[0x18C119C60](v56, -1, -1);

      uint64_t v7 = v68;
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v34);
  }
  swift_beginAccess();
  return v83[0];
}

uint64_t static AdaptableTabView.makeGroup(from:depth:maxDepth:result:cache:)(uint64_t *a1, uint64_t a2, uint64_t a3, char **a4, void *a5)
{
  uint64_t v7 = *a1;
  uint64_t v8 = static AdaptableTabView.parseItems(from:depth:maxDepth:)((uint64_t)v30, (uint64_t)v33, *a1, a2, a3);
  uint64_t v10 = v9;
  uint64_t v31 = v8;
  uint64_t v32 = v9;
  outlined init with copy of TabItem?((uint64_t)v30, (uint64_t)v24, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
  outlined init with copy of TabItem?((uint64_t)v33, (uint64_t)v25, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
  uint64_t v11 = MEMORY[0x1E4FBB718];
  outlined init with take of TabItem?((uint64_t)v24, (uint64_t)v29, (uint64_t)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<Visibility>);
  outlined init with take of TabItem?((uint64_t)v25, (uint64_t)v28, (uint64_t)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, v11, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<Visibility>);
  if (*(void *)(v8 + 16) && *(void *)(v7 + 16))
  {
    outlined init with copy of TabItem(v7 + 32, (uint64_t)v24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Swift::Int_optional v34 = TabItem.sectionID(at:)(a2);
    Swift::Int value = v34.value;
    Swift::Bool is_nil = v34.is_nil;
    outlined destroy of TabItem((uint64_t)v24);
    if (is_nil)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v24[0] = value;
      uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v16 = v15;
      outlined init with copy of TabItem?((uint64_t)v29, (uint64_t)v24, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
      outlined init with copy of TabItem?((uint64_t)v28, (uint64_t)v26, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
      TabItemGroup.init(childEntries:actions:transientIdentifier:header:compactRepresentation:)(v8, v10, v14, v16, (uint64_t)v24, (uint64_t)v26, (int64_t)v27);
      static AdaptableTabView.updateEntryCache(_:adding:)(a5, v27);
      outlined init with copy of TabItemGroup((uint64_t)v27, (uint64_t)v24);
      v25[144] = 1;
      long long v17 = *a4;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v17 + 2) + 1, 1, v17);
      }
      unint64_t v19 = *((void *)v17 + 2);
      unint64_t v18 = *((void *)v17 + 3);
      if (v19 >= v18 >> 1) {
        long long v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v19 + 1, 1, v17);
      }
      *((void *)v17 + 2) = v19 + 1;
      outlined init with take of TabEntry((uint64_t)v24, (uint64_t)&v17[272 * v19 + 32]);
      *a4 = v17;
      outlined destroy of TabItemGroup((uint64_t)v27);
    }
  }
  uint64_t v20 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  outlined destroy of Binding<Visibility>((uint64_t)v28, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, MEMORY[0x1E4FBB718]);
  outlined destroy of Binding<Visibility>((uint64_t)v29, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, v20);
  outlined destroy of (header: TabItem?, children: [TabEntry], actions: [TabItem], compactItem: TabItem?)((uint64_t)v30, (uint64_t (*)(void))type metadata accessor for (header: TabItem?, children: [TabEntry], actions: [TabItem], compactItem: TabItem?));
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = MEMORY[0x1E4FBC860];
  return result;
}

uint64_t static AdaptableTabView.parseItems(from:depth:maxDepth:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = result;
  uint64_t v68 = 0;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  uint64_t v7 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v61 = (char *)MEMORY[0x1E4FBC860];
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(void *)(a2 + 96) = 0;
  uint64_t v8 = *(void *)(a3 + 16);
  if (!v8)
  {
LABEL_44:
    outlined init with take of TabItem?((uint64_t)&v62, v6, (uint64_t)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<Visibility>);
    return (uint64_t)v7;
  }
  uint64_t v9 = a4 + 1;
  if (__OFADD__(a4, 1)) {
    goto LABEL_48;
  }
  uint64_t v11 = a3 + 32;
  uint64_t v41 = result;
  swift_bridgeObjectRetain();
  char v12 = v7;
  long long v13 = v7;
  uint64_t v42 = a5;
  uint64_t v43 = v9;
  while (1)
  {
    outlined init with copy of TabItem(v11, (uint64_t)&v54);
    if (v9 >= a5) {
      goto LABEL_19;
    }
    char v20 = BYTE8(v59);
    *(void *)&long long v46 = *((void *)&v59 + 1);
    if (ViewTraitCollection.isAuxiliaryContent.getter()) {
      break;
    }
    char v45 = v20;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    uint64_t v23 = *(void *)(v46 + 16);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v22 = v23 - a4;
    if (__OFSUB__(v23, a4)) {
      goto LABEL_45;
    }
LABEL_13:
    if (v22 >= 2)
    {
      outlined init with copy of TabItem((uint64_t)&v54, (uint64_t)&v46);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v13 + 2) + 1, 1, v13);
      }
      unint64_t v25 = *((void *)v13 + 2);
      unint64_t v24 = *((void *)v13 + 3);
      if (v25 >= v24 >> 1) {
        long long v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25 + 1, 1, v13);
      }
      *((void *)v13 + 2) = v25 + 1;
      uint64_t v14 = &v13[104 * v25];
      goto LABEL_5;
    }
LABEL_19:
    if (*((void *)v13 + 2))
    {
      uint64_t v26 = static AdaptableTabView.makeTabGroups(_:depth:maxDepth:)(v13, v9, a5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      specialized Array.append<A>(contentsOf:)(v26);
      long long v13 = v7;
    }
    uint64_t v27 = *((void *)&v59 + 1);
    *(void *)&long long v46 = *((void *)&v59 + 1);
    ViewTraitCollection.value<A>(for:defaultValue:)();
    if (v45 == 1)
    {
      *(void *)&long long v46 = v27;
      if (ViewTraitCollection.isAuxiliaryContent.getter())
      {
        char v45 = v27;
        ViewTraitCollection.value<A>(for:defaultValue:)();
        uint64_t v28 = *(void *)(v46 + 16);
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v29 = v28 + 1 - a4;
        if (__OFSUB__(v28 + 1, a4)) {
          goto LABEL_46;
        }
      }
      else
      {
        char v45 = v27;
        ViewTraitCollection.value<A>(for:defaultValue:)();
        uint64_t v30 = *(void *)(v46 + 16);
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v29 = v30 - a4;
        if (__OFSUB__(v30, a4)) {
          goto LABEL_47;
        }
      }
      if (v29 <= 1)
      {
        outlined init with copy of TabItem?((uint64_t)&v62, (uint64_t)&v46, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
        uint64_t v31 = *((void *)&v47 + 1);
        uint64_t v9 = v43;
        outlined destroy of Binding<Visibility>((uint64_t)&v46, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, MEMORY[0x1E4FBB718]);
        if (!v31)
        {
          outlined destroy of Binding<Visibility>((uint64_t)&v62, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, MEMORY[0x1E4FBB718]);
          long long v66 = v58;
          long long v67 = v59;
          uint64_t v68 = v60;
          long long v62 = v54;
          long long v63 = v55;
          long long v64 = v56;
          long long v65 = v57;
          goto LABEL_6;
        }
      }
    }
    *(void *)&long long v46 = *((void *)&v59 + 1);
    ViewTraitCollection.value<A>(for:defaultValue:)();
    if (v45 == 1)
    {
      outlined init with copy of TabItem?(a2, (uint64_t)&v46, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
      uint64_t v32 = *((void *)&v47 + 1);
      uint64_t v9 = v43;
      outlined destroy of Binding<Visibility>((uint64_t)&v46, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, MEMORY[0x1E4FBB718]);
      if (!v32)
      {
        outlined destroy of Binding<Visibility>(a2, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, MEMORY[0x1E4FBB718]);
        long long v38 = v59;
        *(_OWORD *)(a2 + 64) = v58;
        *(_OWORD *)(a2 + 80) = v38;
        *(void *)(a2 + 96) = v60;
        long long v39 = v55;
        *(_OWORD *)a2 = v54;
        *(_OWORD *)(a2 + 16) = v39;
        long long v40 = v57;
        *(_OWORD *)(a2 + 32) = v56;
        *(_OWORD *)(a2 + 48) = v40;
        goto LABEL_6;
      }
    }
    *(void *)&long long v46 = *((void *)&v59 + 1);
    if ((ViewTraitCollection.isAuxiliaryContent.getter() & 1) == 0)
    {
      outlined init with copy of TabItem((uint64_t)&v54, (uint64_t)&v46);
      char v53 = 0;
      uint64_t v35 = v61;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v35 + 2) + 1, 1, v35);
      }
      unint64_t v37 = *((void *)v35 + 2);
      unint64_t v36 = *((void *)v35 + 3);
      if (v37 >= v36 >> 1) {
        uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v37 + 1, 1, v35);
      }
      *((void *)v35 + 2) = v37 + 1;
      outlined init with take of TabEntry((uint64_t)&v46, (uint64_t)&v35[272 * v37 + 32]);
      uint64_t v61 = v35;
      outlined destroy of TabItem((uint64_t)&v54);
      a5 = v42;
      goto LABEL_6;
    }
    outlined init with copy of TabItem((uint64_t)&v54, (uint64_t)&v46);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      char v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v34 = *((void *)v12 + 2);
    unint64_t v33 = *((void *)v12 + 3);
    if (v34 >= v33 >> 1) {
      char v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1, v12);
    }
    *((void *)v12 + 2) = v34 + 1;
    uint64_t v14 = &v12[104 * v34];
LABEL_5:
    long long v15 = v46;
    long long v16 = v48;
    *((_OWORD *)v14 + 3) = v47;
    *((_OWORD *)v14 + 4) = v16;
    *((_OWORD *)v14 + 2) = v15;
    long long v17 = v49;
    long long v18 = v50;
    long long v19 = v51;
    *((void *)v14 + 16) = v52;
    *((_OWORD *)v14 + 6) = v18;
    *((_OWORD *)v14 + 7) = v19;
    *((_OWORD *)v14 + 5) = v17;
    outlined destroy of TabItem((uint64_t)&v54);
LABEL_6:
    v11 += 104;
    if (!--v8)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v7 = v61;
      uint64_t v6 = v41;
      goto LABEL_44;
    }
  }
  char v45 = v20;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  uint64_t v21 = *(void *)(v46 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v22 = v21 + 1 - a4;
  if (!__OFSUB__(v21 + 1, a4)) {
    goto LABEL_13;
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t IndexUniqueIDProjection.hash(into:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of TabItem(v3, (uint64_t)v6);
      _ViewList_View.viewID.getter();
      AnyHashable.hash(into:)();
      outlined destroy of AnyHashable((uint64_t)&v5);
      outlined destroy of TabItem((uint64_t)v6);
      v3 += 104;
      --v2;
    }
    while (v2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Int __swiftcall IndexUniqueIDProjection.get(base:)(Swift::Int base)
{
  uint64_t v2 = *(void *)(v1 + 16);
  Swift::Int v3 = *(void *)(v2 + 16);
  if (v3 <= base)
  {
    if (v3) {
      return *(void *)(v2 + 128);
    }
    else {
      return 0;
    }
  }
  else if (base < 0)
  {
    __break(1u);
  }
  else
  {
    return *(void *)(v2 + 104 * base + 128);
  }
  return base;
}

Swift::Void __swiftcall IndexUniqueIDProjection.set(base:newValue:)(Swift::Int *base, Swift::Int newValue)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v5 + 16);
  swift_bridgeObjectRetain();
  if (v6)
  {
    unint64_t v7 = 0;
    uint64_t v8 = v5 + 32;
    while (v7 < *(void *)(v5 + 16))
    {
      outlined init with copy of TabItem(v8, (uint64_t)v12 + 8);
      *(_OWORD *)&v11[72] = *(_OWORD *)((char *)&v12[4] + 8);
      *(_OWORD *)&v11[88] = *(_OWORD *)((char *)&v12[5] + 8);
      *(void *)&v11[104] = *((void *)&v12[6] + 1);
      *(_OWORD *)&v11[8] = *(_OWORD *)((char *)v12 + 8);
      *(_OWORD *)&v11[24] = *(_OWORD *)((char *)&v12[1] + 8);
      *(_OWORD *)&v11[40] = *(_OWORD *)((char *)&v12[2] + 8);
      *(_OWORD *)&v11[56] = *(_OWORD *)((char *)&v12[3] + 8);
      *(void *)uint64_t v11 = v7;
      *(void *)&v12[0] = v7;
      outlined init with copy of TabItem((uint64_t)&v11[8], (uint64_t)v12 + 8);
      uint64_t v9 = *((void *)&v12[6] + 1);
      outlined destroy of TabItem((uint64_t)v12 + 8);
      if (v9 == newValue)
      {
        v12[4] = *(_OWORD *)&v11[64];
        v12[5] = *(_OWORD *)&v11[80];
        v12[6] = *(_OWORD *)&v11[96];
        v12[0] = *(_OWORD *)v11;
        v12[1] = *(_OWORD *)&v11[16];
        v12[2] = *(_OWORD *)&v11[32];
        v12[3] = *(_OWORD *)&v11[48];
        goto LABEL_8;
      }
      ++v7;
      outlined destroy of (offset: Int, element: TabItem)((uint64_t)v11);
      v8 += 104;
      if (v6 == v7) {
        goto LABEL_6;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_6:
    memset(v12, 0, sizeof(v12));
LABEL_8:
    swift_bridgeObjectRelease();
    outlined init with take of TabItem?((uint64_t)v12, (uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for (offset: Int, element: TabItem)?, (uint64_t)&lazy cache variable for type metadata for (offset: Int, element: TabItem), (uint64_t)&type metadata for TabItem, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for (offset: Int, element: TabItem)?);
    if (*(void *)&v11[32])
    {
      Swift::Int v10 = *(void *)v11;
      outlined destroy of TabItem((uint64_t)&v11[8]);
    }
    else
    {
      outlined destroy of (offset: Int, element: TabItem)?((uint64_t)v11);
      Swift::Int v10 = 0;
    }
    *base = v10;
  }
}

uint64_t type metadata accessor for IndexUniqueIDProjection()
{
  return self;
}

Swift::Int protocol witness for Projection.get(base:) in conformance IndexUniqueIDProjection@<X0>(Swift::Int *a1@<X0>, Swift::Int *a2@<X8>)
{
  Swift::Int result = IndexUniqueIDProjection.get(base:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for Projection.set(base:newValue:) in conformance IndexUniqueIDProjection(Swift::Int *a1, Swift::Int *a2)
{
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance IndexUniqueIDProjection()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance IndexUniqueIDProjection()
{
  return IndexUniqueIDProjection.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IndexUniqueIDProjection()
{
  return Hasher._finalize()();
}

Swift::Void __swiftcall ItemIndexTabsOnlyIndexProjection.set(base:newValue:)(Swift::Int *base, Swift::Int newValue)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 32);
  if (*(void *)(v5 + 16) && (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(newValue), (v7 & 1) != 0))
  {
    Swift::Int v8 = *(void *)(*(void *)(v5 + 56) + 8 * v6);
    swift_endAccess();
    *base = v8;
  }
  else
  {
    swift_endAccess();
  }
}

uint64_t type metadata accessor for ItemIndexTabsOnlyIndexProjection()
{
  return self;
}

uint64_t destroy for TabSidebarConfiguration(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    swift_release();
    swift_release();
  }
  uint64_t result = *(void *)(a1 + 32);
  if (result != 1)
  {
    swift_release();
    swift_release();
    uint64_t result = swift_release();
  }
  int v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 != 255)
  {
    uint64_t v4 = *(void *)(a1 + 56);
    return outlined consume of PlatformItemCollection.Storage(v4, v3 & 1);
  }
  return result;
}

uint64_t initializeWithCopy for TabSidebarConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = v4;
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  }
  uint64_t v5 = *(void *)(a2 + 32);
  if (v5 == 1)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 40);
    uint64_t v7 = *(void *)(a2 + 48);
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v6;
    *(void *)(a1 + 48) = v7;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  Swift::Int v8 = (uint64_t *)(a2 + 56);
  int v9 = *(unsigned __int8 *)(a2 + 64);
  if (v9 == 255)
  {
    *(void *)(a1 + 56) = *v8;
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  }
  else
  {
    char v10 = v9 & 1;
    uint64_t v11 = *v8;
    outlined copy of PlatformItemCollection.Storage(*v8, v9 & 1);
    *(void *)(a1 + 56) = v11;
    *(unsigned char *)(a1 + 64) = v10;
  }
  *(_WORD *)(a1 + 65) = *(_WORD *)(a2 + 65);
  return a1;
}

uint64_t assignWithCopy for TabSidebarConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = a1 + 8;
  uint64_t v5 = (long long *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 16))
  {
    if (v6)
    {
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      swift_retain();
      swift_release();
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_retain();
      swift_release();
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    }
    else
    {
      outlined destroy of Binding<Visibility>(a1 + 8, &lazy cache variable for type metadata for Binding<Visibility>, MEMORY[0x1E4F3F3F0], MEMORY[0x1E4F41638]);
      char v7 = *((unsigned char *)v5 + 16);
      *(_OWORD *)uint64_t v4 = *v5;
      *(unsigned char *)(v4 + 16) = v7;
    }
  }
  else if (v6)
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v8 = *v5;
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    *(_OWORD *)uint64_t v4 = v8;
  }
  int v9 = (long long *)(a1 + 32);
  uint64_t v11 = (long long *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) == 1)
  {
    if (v10 == 1)
    {
      long long v12 = *v11;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      long long *v9 = v12;
    }
    else
    {
      *(void *)(a1 + 32) = v10;
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      swift_retain();
      swift_retain();
      swift_retain();
    }
  }
  else if (v10 == 1)
  {
    outlined destroy of TabSidebarAccessoryViewConfiguration(a1 + 32);
    uint64_t v13 = *(void *)(a2 + 48);
    long long *v9 = *v11;
    *(void *)(a1 + 48) = v13;
  }
  else
  {
    *(void *)(a1 + 32) = v10;
    swift_retain();
    swift_release();
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    swift_retain();
    swift_release();
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    swift_retain();
    swift_release();
  }
  uint64_t v14 = (uint64_t *)(a1 + 56);
  long long v15 = (uint64_t *)(a2 + 56);
  int v16 = *(unsigned __int8 *)(a2 + 64);
  if (*(unsigned __int8 *)(a1 + 64) == 255)
  {
    if (v16 == 255)
    {
      uint64_t v18 = *v15;
      *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
      *uint64_t v14 = v18;
    }
    else
    {
      char v23 = v16 & 1;
      uint64_t v24 = *v15;
      outlined copy of PlatformItemCollection.Storage(v24, v16 & 1);
      *(void *)(a1 + 56) = v24;
      *(unsigned char *)(a1 + 64) = v23;
    }
  }
  else if (v16 == 255)
  {
    outlined destroy of PlatformItemCollection(a1 + 56);
    char v17 = *(unsigned char *)(a2 + 64);
    *uint64_t v14 = *v15;
    *(unsigned char *)(a1 + 64) = v17;
  }
  else
  {
    char v19 = v16 & 1;
    uint64_t v20 = *v15;
    outlined copy of PlatformItemCollection.Storage(v20, v16 & 1);
    uint64_t v21 = *(void *)(a1 + 56);
    char v22 = *(unsigned char *)(a1 + 64);
    *(void *)(a1 + 56) = v20;
    *(unsigned char *)(a1 + 64) = v19;
    outlined consume of PlatformItemCollection.Storage(v21, v22);
  }
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  *(unsigned char *)(a1 + 66) = *(unsigned char *)(a2 + 66);
  return a1;
}

uint64_t outlined destroy of TabSidebarAccessoryViewConfiguration(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for TabSidebarConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = a1 + 8;
  uint64_t v5 = a2 + 8;
  if (*(void *)(a1 + 16))
  {
    uint64_t v6 = *(void *)(a2 + 16);
    if (v6)
    {
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      swift_release();
      *(void *)(a1 + 16) = v6;
      swift_release();
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      goto LABEL_6;
    }
    outlined destroy of Binding<Visibility>(a1 + 8, &lazy cache variable for type metadata for Binding<Visibility>, MEMORY[0x1E4F3F3F0], MEMORY[0x1E4F41638]);
  }
  *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
  *(unsigned char *)(v4 + 16) = *(unsigned char *)(v5 + 16);
LABEL_6:
  uint64_t v7 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) == 1)
  {
LABEL_9:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    goto LABEL_11;
  }
  if (v7 == 1)
  {
    outlined destroy of TabSidebarAccessoryViewConfiguration(a1 + 32);
    goto LABEL_9;
  }
  *(void *)(a1 + 32) = v7;
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
LABEL_11:
  long long v8 = (void *)(a2 + 56);
  int v9 = *(unsigned __int8 *)(a1 + 64);
  if (v9 != 255)
  {
    int v10 = *(unsigned __int8 *)(a2 + 64);
    if (v10 != 255)
    {
      uint64_t v11 = *(void *)(a1 + 56);
      *(void *)(a1 + 56) = *v8;
      *(unsigned char *)(a1 + 64) = v10 & 1;
      outlined consume of PlatformItemCollection.Storage(v11, v9 & 1);
      goto LABEL_16;
    }
    outlined destroy of PlatformItemCollection(a1 + 56);
  }
  *(void *)(a1 + 56) = *v8;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
LABEL_16:
  *(_WORD *)(a1 + 65) = *(_WORD *)(a2 + 65);
  return a1;
}

uint64_t getEnumTagSinglePayload for TabSidebarConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 67)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TabSidebarConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 66) = 0;
    *(_WORD *)(result + 64) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 67) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 67) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TabSidebarConfiguration()
{
  return &type metadata for TabSidebarConfiguration;
}

ValueMetadata *type metadata accessor for IsInAdaptableTabViewContextInput()
{
  return &type metadata for IsInAdaptableTabViewContextInput;
}

Swift::Int ItemIndexTabsOnlyIndexProjection.hashValue.getter()
{
  Hasher.init(_seed:)();
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of TabItem(v3, (uint64_t)v6);
      _ViewList_View.viewID.getter();
      AnyHashable.hash(into:)();
      outlined destroy of AnyHashable((uint64_t)v5);
      outlined destroy of TabItem((uint64_t)v6);
      v3 += 104;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for Projection.get(base:) in conformance ItemIndexTabsOnlyIndexProjection@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *v2;
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 24);
  if (*(void *)(v6 + 16) && (unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(v4), (v8 & 1) != 0)) {
    uint64_t v9 = *(void *)(*(void *)(v6 + 56) + 8 * v7);
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t result = swift_endAccess();
  *a2 = v9;
  return result;
}

void protocol witness for Projection.set(base:newValue:) in conformance ItemIndexTabsOnlyIndexProjection(Swift::Int *a1, Swift::Int *a2)
{
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ItemIndexTabsOnlyIndexProjection()
{
  return ItemIndexTabsOnlyIndexProjection.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ItemIndexTabsOnlyIndexProjection()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      _ViewList_View.viewID.getter();
      AnyHashable.hash(into:)();
      outlined destroy of AnyHashable((uint64_t)v5);
      v3 += 104;
      --v2;
    }
    while (v2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ItemIndexTabsOnlyIndexProjection()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = v2 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of TabItem(v4, (uint64_t)v7);
      _ViewList_View.viewID.getter();
      AnyHashable.hash(into:)();
      outlined destroy of AnyHashable((uint64_t)v6);
      outlined destroy of TabItem((uint64_t)v7);
      v4 += 104;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsInAdaptableTabViewContextInput()
{
  lazy protocol witness table accessor for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsInAdaptableTabViewContextInput()
{
  return PropertyList.subscript.setter();
}

uint64_t base witness table accessor for Equatable in ItemIndexTabsOnlyIndexProjection(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type ItemIndexTabsOnlyIndexProjection and conformance ItemIndexTabsOnlyIndexProjection(&lazy protocol witness table cache variable for type ItemIndexTabsOnlyIndexProjection and conformance ItemIndexTabsOnlyIndexProjection, a2, (void (*)(uint64_t))type metadata accessor for ItemIndexTabsOnlyIndexProjection);
}

uint64_t base witness table accessor for Hashable in ItemIndexTabsOnlyIndexProjection(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type ItemIndexTabsOnlyIndexProjection and conformance ItemIndexTabsOnlyIndexProjection(&lazy protocol witness table cache variable for type ItemIndexTabsOnlyIndexProjection and conformance ItemIndexTabsOnlyIndexProjection, a2, (void (*)(uint64_t))type metadata accessor for ItemIndexTabsOnlyIndexProjection);
}

uint64_t lazy protocol witness table accessor for type ItemIndexTabsOnlyIndexProjection and conformance ItemIndexTabsOnlyIndexProjection(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in IndexUniqueIDProjection(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type ItemIndexTabsOnlyIndexProjection and conformance ItemIndexTabsOnlyIndexProjection(&lazy protocol witness table cache variable for type IndexUniqueIDProjection and conformance IndexUniqueIDProjection, a2, (void (*)(uint64_t))type metadata accessor for IndexUniqueIDProjection);
}

uint64_t base witness table accessor for Hashable in IndexUniqueIDProjection(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type ItemIndexTabsOnlyIndexProjection and conformance ItemIndexTabsOnlyIndexProjection(&lazy protocol witness table cache variable for type IndexUniqueIDProjection and conformance IndexUniqueIDProjection, a2, (void (*)(uint64_t))type metadata accessor for IndexUniqueIDProjection);
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in IsInAdaptableTabViewContextInput()
{
  return &protocol witness table for IsInAdaptableTabViewContextInput;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance InAdaptableTabViewContext()
{
  lazy protocol witness table accessor for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v1;
}

uint64_t static AdaptableTabView.makeSelectionCache(items:selectionValueOnlyIncludesTabs:processedTabs:)(uint64_t a1, char a2, uint64_t a3)
{
  v40[0] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v24 = a3 + 32;
  uint64_t v25 = specialized static AdaptableTabView.makeIDToSelectionCache(items:selectionValueOnlyIncludesTabs:)(a1, a2);
  unint64_t v6 = *(void *)(a3 + 16);
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  BOOL v10 = v6 == 0;
  if (v6) {
    goto LABEL_3;
  }
LABEL_2:
  memset(v36, 0, sizeof(v36));
  unint64_t v9 = v6;
  char v37 = -1;
  while (1)
  {
    outlined init with take of TabItem?((uint64_t)v36, (uint64_t)&v38, (uint64_t)&lazy cache variable for type metadata for (offset: Int, element: TabEntry)?, (uint64_t)&lazy cache variable for type metadata for (offset: Int, element: TabEntry), (uint64_t)&type metadata for TabEntry, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for (offset: Int, element: TabItem)?);
    if (v39[264] == 255) {
      break;
    }
    uint64_t v11 = v38;
    outlined init with take of TabEntry((uint64_t)v39, (uint64_t)v36);
    static AdaptableTabView.updateSelectionCache(_:adding:idToSelectionCache:hostIndex:)(v40, (uint64_t)v36, v25, v8, v11);
    outlined init with copy of TabEntry((uint64_t)v36, (uint64_t)__src);
    if ((v35 & 1) == 0)
    {
      *(_OWORD *)&__dst[64] = *(_OWORD *)&__src[64];
      *(_OWORD *)&__dst[80] = *(_OWORD *)&__src[80];
      *(void *)&__dst[96] = *(void *)&__src[96];
      *(_OWORD *)__dst = *(_OWORD *)__src;
      *(_OWORD *)&__dst[16] = *(_OWORD *)&__src[16];
      *(_OWORD *)&__dst[32] = *(_OWORD *)&__src[32];
      *(_OWORD *)&__dst[48] = *(_OWORD *)&__src[48];
      uint64_t v15 = one-time initialization token for defaultValue;
      swift_bridgeObjectRetain();
      if (v15 != -1) {
        swift_once();
      }
      unsigned __int8 v26 = HIBYTE(static TabOptions.TraitKey.defaultValue);
      long long v27 = *(_OWORD *)&qword_1E90FC588;
      unsigned __int8 v28 = word_1E90FC598;
      ViewTraitCollection.value<A>(for:defaultValue:)();
      swift_bridgeObjectRelease();
      int v13 = v29[1];
      outlined consume of TabCustomizationID?(v30, v31, v32);
      swift_bridgeObjectRelease();
      uint64_t v14 = __dst;
      goto LABEL_14;
    }
    memcpy(__dst, __src, sizeof(__dst));
    outlined init with copy of TabItem?((uint64_t)&__dst[48], (uint64_t)v29, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
    if (v32)
    {
      uint64_t v12 = one-time initialization token for defaultValue;
      swift_bridgeObjectRetain();
      if (v12 != -1) {
        swift_once();
      }
      ViewTraitCollection.value<A>(for:defaultValue:)();
      swift_bridgeObjectRelease();
      int v13 = v26;
      outlined consume of TabCustomizationID?(v27, *((uint64_t *)&v27 + 1), v28);
      swift_bridgeObjectRelease();
      outlined destroy of TabItemGroup((uint64_t)__dst);
      uint64_t v14 = v29;
LABEL_14:
      outlined destroy of TabItem((uint64_t)v14);
      goto LABEL_15;
    }
    outlined destroy of TabItemGroup((uint64_t)__dst);
    outlined destroy of Binding<Visibility>((uint64_t)v29, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, MEMORY[0x1E4FBB718]);
    int v13 = 0;
LABEL_15:
    uint64_t result = outlined destroy of TabEntry((uint64_t)v36);
    uint64_t v16 = v13 ^ 1u;
    BOOL v17 = __OFADD__(v8, v16);
    v8 += v16;
    if (v17)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      return result;
    }
    BOOL v10 = v9 >= v6;
    if (v9 == v6) {
      goto LABEL_2;
    }
LABEL_3:
    if (v10) {
      goto LABEL_25;
    }
    outlined init with copy of TabEntry(v24 + 272 * v9, (uint64_t)&__src[8]);
    *(void *)&v36[0] = v9;
    outlined init with take of TabEntry((uint64_t)&__src[8], (uint64_t)v36 + 8);
    ++v9;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v18 = v40[0];
  if (!*(void *)(v40[0] + 16) || (specialized __RawDictionaryStorage.find<A>(_:)(0), (v19 & 1) == 0))
  {
    if (v6)
    {
      uint64_t v20 = TabEntry.platformIdentifier.getter();
      uint64_t v22 = v21;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v38 = v18;
      v40[0] = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0, 0, v20, v22, 0, isUniquelyReferenced_nonNull_native);
      unint64_t v18 = v38;
      swift_bridgeObjectRelease();
    }
  }
  return v18;
}

uint64_t static AdaptableTabView.updateSelectionCache(_:adding:idToSelectionCache:hostIndex:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  outlined init with copy of TabEntry(a2, (uint64_t)__src);
  if (v24)
  {
    memcpy(__dst, __src, sizeof(__dst));
    uint64_t v9 = *(void *)(__dst[1] + 16);
    if (v9)
    {
      uint64_t v10 = __dst[1] + 32;
      swift_bridgeObjectRetain();
      do
      {
        outlined init with copy of TabEntry(v10, (uint64_t)v20);
        static AdaptableTabView.updateSelectionCache(_:adding:idToSelectionCache:hostIndex:)(a1, v20, a3, a4, a5);
        outlined destroy of TabEntry((uint64_t)v20);
        v10 += 272;
        --v9;
      }
      while (v9);
      swift_bridgeObjectRelease();
    }
    return outlined destroy of TabItemGroup((uint64_t)__dst);
  }
  else
  {
    v20[4] = *(_OWORD *)&__src[64];
    v20[5] = *(_OWORD *)&__src[80];
    uint64_t v21 = *(void *)&__src[96];
    v20[0] = *(_OWORD *)__src;
    v20[1] = *(_OWORD *)&__src[16];
    _OWORD v20[2] = *(_OWORD *)&__src[32];
    v20[3] = *(_OWORD *)&__src[48];
    uint64_t v12 = TabItem.platformIdentifier.getter();
    uint64_t v14 = v13;
    if (*(void *)(a3 + 16))
    {
      uint64_t v15 = v12;
      swift_bridgeObjectRetain();
      unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v14);
      if (v17)
      {
        uint64_t v18 = *(void *)(*(void *)(a3 + 56) + 8 * v16);
        swift_bridgeObjectRelease();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        __dst[0] = *a1;
        *a1 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a4, a5, v15, v14, v18, isUniquelyReferenced_nonNull_native);
        *a1 = __dst[0];
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
    return outlined destroy of TabItem((uint64_t)v20);
  }
}

uint64_t TabItemGroup.updateChildSelection(in:selectedID:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!result) {
    return result;
  }
  uint64_t v5 = (void *)result;
  self;
  uint64_t result = swift_dynamicCastObjCClass();
  if (!result) {
    return result;
  }
  unint64_t v6 = (void *)result;
  uint64_t v7 = v5;
  id v8 = objc_msgSend(v6, sel__children);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for _UITab);
  unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v9 >> 62)
  {
LABEL_26:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10) {
      goto LABEL_5;
    }
LABEL_27:

LABEL_28:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v10) {
    goto LABEL_27;
  }
LABEL_5:
  id v25 = v6;
  unsigned __int8 v26 = (void *)v7;
  uint64_t v11 = 4;
  while (1)
  {
    if ((v9 & 0xC000000000000001) != 0) {
      id v12 = (id)MEMORY[0x18C117680](v11 - 4, v9);
    }
    else {
      id v12 = *(id *)(v9 + 8 * v11);
    }
    uint64_t v13 = v12;
    unint64_t v6 = (void *)(v11 - 3);
    if (__OFADD__(v11 - 4, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    uint64_t v7 = (uint64_t)objc_msgSend(v12, sel__identifier);
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;

    if (v14 == a2 && v16 == a3)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v7 & 1) == 0) {
        goto LABEL_18;
      }
    }
    self;
    uint64_t v18 = swift_dynamicCastObjCClass();
    if (v18)
    {
      uint64_t v23 = v18;
      id v24 = v13;
      swift_bridgeObjectRelease();
      objc_msgSend(v25, sel__setSelectedElement_, v23);

      return 1;
    }
LABEL_18:
    self;
    uint64_t v19 = swift_dynamicCastObjCClass();
    if (v19) {
      break;
    }

    ++v11;
    if (v6 == (void *)v10)
    {

      goto LABEL_28;
    }
  }
  uint64_t v20 = v19;
  id v21 = v13;
  swift_bridgeObjectRelease();
  id v22 = v21;
  LOBYTE(v21) = TabItemGroup.updateChildSelection(in:selectedID:)(v20, a2, a3);

  if (v21)
  {
    objc_msgSend(v25, sel__setSelectedElement_, v20);

    return 1;
  }

  return 0;
}

void one-time initialization function for searchPlatformIdentifier()
{
  id v0 = objc_msgSend(self, sel__searchElement);
  id v1 = objc_msgSend(v0, sel__identifier);

  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  static TabItem.searchPlatformIdentifier = v2;
  unk_1E90FC510 = v4;
}

id TabItem.swipeActionsConfiguration(for:)(char a1)
{
  if (a1)
  {
    *(void *)&long long v23 = *(void *)(v1 + 88);
    uint64_t v17 = one-time initialization token for defaultValue;
    swift_bridgeObjectRetain();
    if (v17 != -1) {
      swift_once();
    }
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    static SwipeActions.TraitKey.resolvedValue(attributeValues:)(v37, (uint64_t)&v23);
    swift_bridgeObjectRelease();
    long long v47 = v33;
    long long v48 = v34;
    long long v49 = v35;
    long long v50 = v36;
    long long v43 = v29;
    long long v44 = v30;
    long long v45 = v31;
    long long v46 = v32;
    long long v39 = v25;
    long long v40 = v26;
    long long v41 = v27;
    long long v42 = v28;
    long long v37 = v23;
    long long v38 = v24;
    uint64_t v3 = *((void *)&v30 + 1);
    uint64_t v4 = v30;
    uint64_t v6 = *((void *)&v31 + 1);
    uint64_t v5 = v31;
    uint64_t v8 = *((void *)&v32 + 1);
    uint64_t v7 = v32;
    uint64_t v10 = *((void *)&v33 + 1);
    uint64_t v9 = v33;
    uint64_t v12 = *((void *)&v34 + 1);
    uint64_t v11 = v34;
    uint64_t v14 = *((void *)&v35 + 1);
    uint64_t v13 = v35;
    uint64_t v16 = *((void *)&v36 + 1);
    uint64_t v15 = v36;
  }
  else
  {
    *(void *)&long long v23 = *(void *)(v1 + 88);
    uint64_t v2 = one-time initialization token for defaultValue;
    swift_bridgeObjectRetain();
    if (v2 != -1) {
      swift_once();
    }
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    static SwipeActions.TraitKey.resolvedValue(attributeValues:)(v37, (uint64_t)&v23);
    swift_bridgeObjectRelease();
    long long v47 = v33;
    long long v48 = v34;
    long long v49 = v35;
    long long v50 = v36;
    long long v43 = v29;
    long long v44 = v30;
    long long v45 = v31;
    long long v46 = v32;
    long long v39 = v25;
    long long v40 = v26;
    long long v41 = v27;
    long long v42 = v28;
    long long v37 = v23;
    long long v38 = v24;
    uint64_t v3 = *((void *)&v23 + 1);
    uint64_t v4 = v23;
    uint64_t v6 = *((void *)&v24 + 1);
    uint64_t v5 = v24;
    uint64_t v8 = *((void *)&v25 + 1);
    uint64_t v7 = v25;
    uint64_t v10 = *((void *)&v26 + 1);
    uint64_t v9 = v26;
    uint64_t v12 = *((void *)&v27 + 1);
    uint64_t v11 = v27;
    uint64_t v14 = *((void *)&v28 + 1);
    uint64_t v13 = v28;
    uint64_t v16 = *((void *)&v29 + 1);
    uint64_t v15 = v29;
  }
  uint64_t v21 = v7;
  uint64_t v22 = v3;
  char v19 = v9;
  uint64_t v20 = v8;
  outlined copy of SwipeActions.Configuration?(v4, v3, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  outlined release of SwipeActions.Value((uint64_t)&v37);
  if (!v6) {
    return 0;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UISwipeActionsConfiguration);
  LOWORD(v37) = v4 & 0x101;
  *((void *)&v37 + 1) = v22;
  LOWORD(v38) = v5 & 0x1FF;
  *((void *)&v38 + 1) = v6;
  *(void *)&long long v39 = v21;
  *((void *)&v39 + 1) = v20;
  LOBYTE(v40) = v19;
  *((void *)&v40 + 1) = v10;
  *(void *)&long long v41 = v11;
  *((void *)&v41 + 1) = v12;
  *(void *)&long long v42 = v13;
  *((void *)&v42 + 1) = v14;
  *(void *)&long long v43 = v15;
  *((void *)&v43 + 1) = v16;
  return UISwipeActionsConfiguration.init(configuration:performDestructiveAction:)((unsigned __int8 *)&v37, (uint64_t)closure #1 in closure #1 in TabItem.swipeActionsConfiguration(for:), 0);
}

uint64_t closure #1 in closure #1 in TabItem.swipeActionsConfiguration(for:)(uint64_t (*a1)(uint64_t))
{
  return a1(1);
}

UIContextMenuConfiguration_optional __swiftcall TabItem.menuConfiguration()()
{
  uint64_t v1 = type metadata accessor for TabContextMenuKey.Storage.Guts(0);
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TabContextMenuKey.Storage?(0);
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PlatformItemList.Item?(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for PlatformItemList.Item();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)aBlock - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[0] = *(void *)(v0 + 88);
  uint64_t v15 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v15 != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v5, (uint64_t)static TabContextMenuKey.defaultValue);
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  uint64_t v16 = type metadata accessor for TabContextMenuKey.Storage(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v7, 1, v16) == 1)
  {
    outlined destroy of (header: TabItem?, children: [TabEntry], actions: [TabItem], compactItem: TabItem?)((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for TabContextMenuKey.Storage?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
LABEL_9:
    outlined destroy of (header: TabItem?, children: [TabEntry], actions: [TabItem], compactItem: TabItem?)((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item?);
    id v18 = 0;
    goto LABEL_13;
  }
  outlined init with copy of TabContextMenuKey.Storage.Guts((uint64_t)v7, (uint64_t)v3, type metadata accessor for TabContextMenuKey.Storage.Guts);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of (header: TabItem?, children: [TabEntry], actions: [TabItem], compactItem: TabItem?)((uint64_t)v3, type metadata accessor for TabContextMenuKey.Storage.Guts);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
  }
  else
  {
    outlined init with take of PlatformItemList.Item((uint64_t)v3, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item?);
  }
  outlined destroy of (header: TabItem?, children: [TabEntry], actions: [TabItem], compactItem: TabItem?)((uint64_t)v7, type metadata accessor for TabContextMenuKey.Storage);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1) {
    goto LABEL_9;
  }
  outlined init with take of PlatformItemList.Item((uint64_t)v10, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  id v18 = (id)*((void *)v14 + 77);
  if (v18)
  {
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v18;
    uint64_t v20 = self;
    aBlock[4] = partial apply for closure #1 in TabItem.menuConfiguration();
    aBlock[5] = v19;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned UIMenu?);
    aBlock[3] = &block_descriptor_24;
    uint64_t v21 = _Block_copy(aBlock);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_release();
    id v18 = objc_msgSend(v20, sel_configurationWithIdentifier_previewProvider_actionProvider_, 0, 0, v21);
    swift_release();
    _Block_release(v21);
    objc_msgSend(v18, sel_setPreferredMenuElementOrder_, qword_18837EF40[v14[*(int *)(v11 + 128)]]);
  }
  outlined destroy of (header: TabItem?, children: [TabEntry], actions: [TabItem], compactItem: TabItem?)((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
LABEL_13:
  uint64_t v22 = (objc_class *)v18;
  result.value.super.Class isa = v22;
  result.Swift::Bool is_nil = v17;
  return result;
}

void closure #1 in TabItem.menuConfiguration()(uint64_t a1, uint64_t a2)
{
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
  UIMenuElementSize preferredElementSize = MEMORY[0x1E4FBC860];
  uint64_t v10 = MEMORY[0x1E4FBC860];
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  type metadata accessor for Logger?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, MEMORY[0x1E4FBBE00]);
  uint64_t v4 = type metadata accessor for MenuVisitor.MenuStackGroup();
  unint64_t v5 = (*(unsigned __int8 *)(*(void *)(v4 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_18834BB80;
  if (one-time initialization token for empty != -1) {
    swift_once();
  }
  uint64_t v7 = __swift_project_value_buffer(v4, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
  outlined init with copy of TabContextMenuKey.Storage.Guts(v7, v6 + v5, (uint64_t (*)(void))type metadata accessor for MenuVisitor.MenuStackGroup);
  MenuVisitor.visit(_:uniqueNames:)(a2, &v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v11.value.super.Class isa = 0;
  v11.Swift::Bool is_nil = 0;
  UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v9, v8, (Swift::String_optional)0, v11, 0, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, 0);
}

BOOL TabItem.visibleInSidebar(customization:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TabViewCustomization();
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = &v24[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Binding<TabViewCustomization>?(0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = &v24[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Binding<TabViewCustomization>(0);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = &v24[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of TabContextMenuKey.Storage.Guts(a1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9) != 1)
  {
    outlined init with take of PlatformItemList.Item((uint64_t)v7, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>);
    uint64_t v14 = TabItem.resolvedCustomizationID.getter();
    uint64_t v16 = v15;
    char v18 = v17 & 1;
    MEMORY[0x18C113DA0](v9);
    uint64_t v19 = *(void *)&v4[*(int *)(v2 + 20)];
    if (*(void *)(v19 + 16))
    {
      outlined copy of TabCustomizationID.Base();
      unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v16, v18);
      if (v21)
      {
        int v22 = *(unsigned __int8 *)(*(void *)(v19 + 56) + 2 * v20);
        outlined consume of TabCustomizationID.Base();
        outlined consume of TabCustomizationID.Base();
        if (v22)
        {
          outlined destroy of (header: TabItem?, children: [TabEntry], actions: [TabItem], compactItem: TabItem?)((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for TabViewCustomization);
          outlined destroy of (header: TabItem?, children: [TabEntry], actions: [TabItem], compactItem: TabItem?)((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>);
          return v22 == 1;
        }
LABEL_9:
        outlined destroy of (header: TabItem?, children: [TabEntry], actions: [TabItem], compactItem: TabItem?)((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for TabViewCustomization);
        unsigned __int8 v25 = 1;
        BOOL v13 = TabItem.clientDefaultVisibility(for:)(&v25) < 2u;
        outlined destroy of (header: TabItem?, children: [TabEntry], actions: [TabItem], compactItem: TabItem?)((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>);
        return v13;
      }
      outlined consume of TabCustomizationID.Base();
    }
    outlined consume of TabCustomizationID.Base();
    goto LABEL_9;
  }
  outlined destroy of (header: TabItem?, children: [TabEntry], actions: [TabItem], compactItem: TabItem?)((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
  unsigned __int8 v26 = 1;
  return TabItem.clientDefaultVisibility(for:)(&v26) < 2u;
}

uint64_t TabItem.tabPlacement(customization:)(uint64_t a1)
{
  BOOL v2 = TabItem.sidebarOnly.getter();
  unsigned __int8 v11 = 0;
  int v3 = TabItem.clientDefaultVisibility(for:)(&v11);
  type metadata accessor for Binding<TabViewCustomization>(0);
  Swift::Bool v5 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4) != 1;
  TabItem.resolvedUIKitTopBarCustomizationBehavior(customizationEnabled:)(v5);
  uint64_t v6 = qword_18837EF58[v10];
  BOOL v7 = TabItem.pinned.getter();
  uint64_t v8 = 5;
  if (v3 != 2) {
    uint64_t v8 = v6;
  }
  if (v7) {
    uint64_t v8 = 1;
  }
  if (v2) {
    return 4;
  }
  else {
    return v8;
  }
}

void UITabBarController.updateSidebarToConfiguration(coordinator:customization:transaction:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v141 = a2;
  uint64_t v6 = type metadata accessor for UIHostingConfigurationStorage(0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)v126 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v9 - 8);
  long long v138 = (char *)v126 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TabViewCustomization();
  MEMORY[0x1F4188790](v11 - 8);
  BOOL v13 = (char *)v126 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<TabViewCustomization>?(0);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)v126 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = a1 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_sidebarConfiguration;
  uint64_t v18 = *(void *)(a1 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_sidebarConfiguration + 16);
  if (v18 == 1) {
    return;
  }
  v128 = v13;
  uint64_t v137 = v6;
  v126[2] = a3;
  uint64_t v19 = *(void *)(v17 + 8);
  uint64_t v20 = *(void *)(v17 + 24);
  uint64_t v21 = *(void *)(v17 + 32);
  int v22 = v3;
  uint64_t v24 = *(void *)(v17 + 40);
  uint64_t v23 = *(void *)(v17 + 48);
  uint64_t v25 = *(void *)(v17 + 56);
  unsigned int v26 = *(unsigned __int16 *)(v17 + 64) | (*(unsigned __int8 *)(v17 + 66) << 16);
  unsigned int v27 = v26 >> 8;
  uint64_t v129 = *(void *)v17;
  LOBYTE(aBlock) = v129;
  *((void *)&aBlock + 1) = v19;
  *(void *)&long long v145 = v18;
  BYTE8(v145) = v20;
  uint64_t v146 = v21;
  uint64_t v147 = v24;
  uint64_t v148 = v23;
  uint64_t v149 = v25;
  __int16 v150 = v26;
  char v151 = BYTE2(v26);
  uint64_t v130 = v19;
  uint64_t v132 = v18;
  uint64_t v131 = v20;
  outlined copy of Binding<NavigationSplitViewColumn>?(v19, v18);
  uint64_t v135 = v24;
  uint64_t v136 = v21;
  uint64_t v134 = v23;
  outlined copy of TabSidebarAccessoryViewConfiguration?(v21);
  uint64_t v140 = v25;
  unsigned int v139 = v26;
  outlined copy of PlatformItemCollection?(v25, v26);
  v28.Swift::Bool value = TabSidebarConfiguration.sidebarVisible()().value;
  long long v29 = &selRef_setObscuresBackgroundDuringPresentation_;
  if (v28.value != 2)
  {
    Swift::Bool value = v28.value;
    int v31 = v28.value;
    id v32 = objc_msgSend(v22, sel__uip_sidebar);
    unsigned int v33 = objc_msgSend(v32, (SEL)&selRef_setFont_ + 2);

    long long v29 = &selRef_setObscuresBackgroundDuringPresentation_;
    if (v31 != v33)
    {
      id v34 = objc_msgSend(v22, sel__uip_sidebar);
      objc_msgSend(v34, sel__setVisible_, value);
    }
  }
  id v35 = objc_msgSend(v22, sel__uip_preferredSidebarMode);
  id v36 = [v22 v29[134]];
  unsigned int v37 = objc_msgSend(v36, sel__isVisible);

  if (v35 == (id)2) {
    unsigned int v38 = v37;
  }
  else {
    unsigned int v38 = 0;
  }
  unsigned int v127 = v38;
  *(unsigned char *)(a1 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_isUIKitSidebarVisible) = v38;
  id v39 = (id)qword_18837EF70[(char)v27];
  id v40 = [v22 v29[134]];
  id v41 = objc_msgSend(v40, sel__preferredLayout);

  if (v39 != v41)
  {
    id v42 = [v22 v29[134]];
    objc_msgSend(v42, sel__setPreferredLayout_, v39);
  }
  type metadata accessor for Binding<TabViewCustomization>(0);
  uint64_t v44 = v43;
  double v133 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 48);
  unsigned int v45 = v133(v141, 1, v43);
  long long v46 = v29[134];
  id v142 = v22;
  id v47 = [v22 v46];
  unsigned int v48 = objc_msgSend(v47, sel__isEditable);

  long long v49 = v29;
  if ((v45 != 1) != v48)
  {
    id v50 = [v142 (SEL)v29 + 3887];
    objc_msgSend(v50, sel__setEditable_, v45 != 1);
  }
  char v51 = v139;
  uint64_t v52 = v140;
  if ((_BYTE)v139 == 0xFF)
  {
    id v61 = [v142 (SEL)v29 + 3887];
    id v62 = objc_msgSend(v61, sel_navigationOverflowItems);

    uint64_t v59 = v135;
    uint64_t v60 = (unsigned int (*)(char *, uint64_t, uint64_t))v133;
    if (v62)
    {
      id v63 = [v142 (SEL)v49 + 3887];
      objc_msgSend(v63, sel_setNavigationOverflowItems_, 0);
    }
  }
  else
  {
    uint64_t v53 = swift_allocObject();
    *(void *)(v53 + 16) = v52;
    char v54 = v51 & 1;
    *(unsigned char *)(v53 + 24) = v54;
    uint64_t v146 = (uint64_t)partial apply for closure #1 in UITabBarController.updateSidebarToConfiguration(coordinator:customization:transaction:);
    uint64_t v147 = v53;
    *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v145 = thunk for @escaping @callee_guaranteed (@guaranteed @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> ()) -> ();
    *((void *)&v145 + 1) = &block_descriptor_20;
    long long v55 = _Block_copy(&aBlock);
    long long v56 = self;
    outlined copy of PlatformItemCollection.Storage(v52, v54);
    id v57 = objc_msgSend(v56, sel_elementWithProvider_, v55);
    _Block_release(v55);
    swift_release();
    id v58 = [v142 (SEL)v29 + 3887];
    objc_msgSend(v58, sel_setNavigationOverflowItems_, v57);

    uint64_t v59 = v135;
    uint64_t v60 = (unsigned int (*)(char *, uint64_t, uint64_t))v133;
  }
  outlined init with copy of TabContextMenuKey.Storage.Guts(v141, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
  if (v60(v16, 1, v44) == 1)
  {
    outlined destroy of (header: TabItem?, children: [TabEntry], actions: [TabItem], compactItem: TabItem?)((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
    uint64_t v141 = 0;
    uint64_t v64 = 0;
  }
  else
  {
    uint64_t v65 = (uint64_t)v128;
    MEMORY[0x18C113DA0](v44);
    outlined destroy of (header: TabItem?, children: [TabEntry], actions: [TabItem], compactItem: TabItem?)((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>);
    uint64_t v141 = UUID.uuidString.getter();
    uint64_t v64 = v66;
    outlined destroy of (header: TabItem?, children: [TabEntry], actions: [TabItem], compactItem: TabItem?)(v65, (uint64_t (*)(void))type metadata accessor for TabViewCustomization);
  }
  uint64_t v67 = v136;
  id v68 = v142;
  id v69 = [v142 (SEL)v49 + 3887];
  id v70 = objc_msgSend(v69, sel__customizationIdentifier);

  if (!v70)
  {
    if (!v64) {
      goto LABEL_31;
    }
    goto LABEL_26;
  }
  uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v73 = v72;

  if (!v64)
  {
    long long v49 = &selRef_setObscuresBackgroundDuringPresentation_;
    if (!v73) {
      goto LABEL_31;
    }
    swift_bridgeObjectRelease();
    int v74 = 1;
    goto LABEL_33;
  }
  if (!v73)
  {
LABEL_26:
    int v74 = 0;
    goto LABEL_33;
  }
  if (v141 != v71 || v64 != v73)
  {
    char v75 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    int v74 = 0;
    if (v75) {
      goto LABEL_30;
    }
LABEL_33:
    uint64_t v77 = (uint64_t)v138;
    static Log.tabView.getter();
    uint64_t v78 = type metadata accessor for Logger();
    uint64_t v79 = *(void *)(v78 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78) == 1)
    {
      outlined destroy of (header: TabItem?, children: [TabEntry], actions: [TabItem], compactItem: TabItem?)(v77, (uint64_t (*)(void))type metadata accessor for Logger?);
    }
    else
    {
      LODWORD(v133) = v74;
      swift_bridgeObjectRetain_n();
      uint64_t v80 = Logger.logObject.getter();
      os_log_type_t v81 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v80, v81))
      {
        unint64_t v82 = (uint8_t *)swift_slowAlloc();
        uint64_t v83 = swift_slowAlloc();
        v128 = (char *)v83;
        *(_DWORD *)unint64_t v82 = 136315138;
        v126[1] = v82 + 4;
        uint64_t v143 = v83;
        *(void *)&long long aBlock = v141;
        *((void *)&aBlock + 1) = v64;
        type metadata accessor for Binding<Visibility>(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
        swift_bridgeObjectRetain();
        uint64_t v84 = String.init<A>(describing:)();
        *(void *)&long long aBlock = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v85, &v143);
        id v68 = v142;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        uint64_t v67 = v136;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1872C6000, v80, v81, "Updating sidebar customization id to\n%s", v82, 0xCu);
        uint64_t v86 = v128;
        swift_arrayDestroy();
        MEMORY[0x18C119C60](v86, -1, -1);
        uint64_t v87 = v82;
        uint64_t v59 = v135;
        MEMORY[0x18C119C60](v87, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      LOBYTE(v74) = (_BYTE)v133;
      (*(void (**)(char *, uint64_t))(v79 + 8))(v138, v78);
    }
    long long v49 = &selRef_setObscuresBackgroundDuringPresentation_;
    id v88 = objc_msgSend(v68, sel__uip_sidebar);
    if (v74)
    {
      double v89 = 0;
    }
    else
    {
      double v89 = (void *)MEMORY[0x18C115780](v141, v64);
      swift_bridgeObjectRelease();
    }
    objc_msgSend(v88, sel__setCustomizationIdentifier_, v89);

    if (v67 == 1) {
      goto LABEL_32;
    }
    goto LABEL_43;
  }
  swift_bridgeObjectRelease();
LABEL_30:
  swift_bridgeObjectRelease();
  long long v49 = &selRef_setObscuresBackgroundDuringPresentation_;
LABEL_31:
  if (v67 == 1)
  {
LABEL_32:
    uint64_t v76 = 0;
    goto LABEL_44;
  }
LABEL_43:
  swift_retain();
  uint64_t v76 = v67;
LABEL_44:
  id v90 = [v68 v49[134]];
  if (v76)
  {
    type metadata accessor for UIHostingConfiguration<AnyView, EmptyView>();
    uint64_t v92 = v91;
    *((void *)&v145 + 1) = v91;
    uint64_t v146 = lazy protocol witness table accessor for type ItemIndexTabsOnlyIndexProjection and conformance ItemIndexTabsOnlyIndexProjection(&lazy protocol witness table cache variable for type UIHostingConfiguration<AnyView, EmptyView> and conformance UIHostingConfiguration<A, B>, 255, (void (*)(uint64_t))type metadata accessor for UIHostingConfiguration<AnyView, EmptyView>);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&aBlock);
    CGRect v94 = (char *)boxed_opaque_existential_1 + *(int *)(v92 + 56);
    *uint64_t v8 = 1;
    OptionalEdgeInsets.init()();
    *((void *)v8 + 9) = 0;
    v8[80] = 1;
    *((void *)v8 + 11) = 0;
    v8[96] = 1;
    *(_WORD *)(v8 + 97) = 1;
    uint64_t v95 = v137;
    CGRect v96 = &v8[*(int *)(v137 + 36)];
    uint64_t v97 = type metadata accessor for UICellConfigurationState();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v97 - 8) + 56))(v96, 1, 1, v97);
    v8[*(int *)(v95 + 40)] = 0;
    *(void *)&v8[*(int *)(v95 + 44) + 8] = 0;
    swift_unknownObjectWeakInit();
    outlined init with take of PlatformItemList.Item((uint64_t)v8, (uint64_t)v94, type metadata accessor for UIHostingConfigurationStorage);
    uint64_t *boxed_opaque_existential_1 = v76;
    *CGRect v94 = 0;
  }
  else
  {
    uint64_t v146 = 0;
    long long aBlock = 0u;
    long long v145 = 0u;
  }
  swift_retain();
  _UITabBarControllerSidebar._headerContentConfiguration.setter();

  if (v67 == 1)
  {
    uint64_t v98 = 0;
  }
  else
  {
    uint64_t v98 = v59;
    swift_retain();
  }
  id v99 = objc_msgSend(v68, sel__uip_sidebar);
  if (v98)
  {
    type metadata accessor for UIHostingConfiguration<AnyView, EmptyView>();
    uint64_t v101 = v100;
    *((void *)&v145 + 1) = v100;
    uint64_t v146 = lazy protocol witness table accessor for type ItemIndexTabsOnlyIndexProjection and conformance ItemIndexTabsOnlyIndexProjection(&lazy protocol witness table cache variable for type UIHostingConfiguration<AnyView, EmptyView> and conformance UIHostingConfiguration<A, B>, 255, (void (*)(uint64_t))type metadata accessor for UIHostingConfiguration<AnyView, EmptyView>);
    uint64_t v102 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&aBlock);
    v103 = (char *)v102 + *(int *)(v101 + 56);
    *uint64_t v8 = 1;
    OptionalEdgeInsets.init()();
    *((void *)v8 + 9) = 0;
    v8[80] = 1;
    *((void *)v8 + 11) = 0;
    v8[96] = 1;
    *(_WORD *)(v8 + 97) = 1;
    uint64_t v104 = v137;
    uint64_t v105 = &v8[*(int *)(v137 + 36)];
    uint64_t v106 = type metadata accessor for UICellConfigurationState();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v106 - 8) + 56))(v105, 1, 1, v106);
    v8[*(int *)(v104 + 40)] = 0;
    *(void *)&v8[*(int *)(v104 + 44) + 8] = 0;
    swift_unknownObjectWeakInit();
    outlined init with take of PlatformItemList.Item((uint64_t)v8, (uint64_t)v103, type metadata accessor for UIHostingConfigurationStorage);
    *uint64_t v102 = v98;
    unsigned char *v103 = 0;
  }
  else
  {
    uint64_t v146 = 0;
    long long aBlock = 0u;
    long long v145 = 0u;
  }
  uint64_t v107 = v134;
  uint64_t v108 = v140;
  swift_retain();
  _UITabBarControllerSidebar._footerContentConfiguration.setter();

  if (v67 == 1)
  {
    swift_release();
    swift_release();
    outlined consume of TabSidebarConfiguration?(v129, v130, v132, v131, 1, v59, v107, v108, v139);
    return;
  }
  outlined copy of TabSidebarAccessoryViewConfiguration?(v67);
  swift_release();
  swift_release();
  if (v107)
  {
    type metadata accessor for UIKitTabBarController();
    id v109 = v142;
    uint64_t v110 = swift_dynamicCastClass();
    if (v110)
    {
      if (v127)
      {
        uint64_t v111 = (char *)v110;
        uint64_t v112 = OBJC_IVAR____TtC7SwiftUI21UIKitTabBarController_sidebarBottomBarHost;
        v113 = *(void **)(v110 + OBJC_IVAR____TtC7SwiftUI21UIKitTabBarController_sidebarBottomBarHost);
        if (v113)
        {
          unint64_t v114 = (void *)((char *)v113 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v113) + 0x60));
          swift_beginAccess();
          *unint64_t v114 = v107;
          swift_retain();
          id v115 = v109;
          uint64_t v116 = v107;
          uint64_t v117 = v113;
          swift_release();
          swift_allocObject();
          swift_unknownObjectWeakInit();
          swift_retain();
          swift_retain();
          default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
          GraphHost.asyncTransaction(_:id:_:)();

          swift_release();
          swift_release();
          swift_release();
          swift_release_n();
          outlined consume of TabSidebarConfiguration?(v129, v130, v132, v131, v136, v135, v116, v108, v139);
          swift_release();
          return;
        }
        type metadata accessor for EnvironmentPropertyKey<TabBarPlacementKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
        id v120 = objc_allocWithZone(v119);
        swift_retain();
        uint64_t v121 = v107;
        id v122 = v109;
        uint64_t v123 = (void *)specialized _UIHostingView.init(rootView:)(v121);
        swift_release();
        v124 = *(void **)&v111[v112];
        *(void *)&v111[v112] = v123;
        id v118 = v123;

        id v125 = objc_msgSend(v111, sel__uip_sidebar);
        objc_msgSend(v125, sel__setBottomBarView_, *(void *)&v111[v112]);

        swift_release();
        swift_release();
        swift_release();

        outlined consume of TabSidebarConfiguration?(v129, v130, v132, v131, v136, v59, v121, v108, v139);
      }
      else
      {
        id v118 = v109;
        swift_release();
        swift_release();
        outlined consume of TabSidebarConfiguration?(v129, v130, v132, v131, v67, v59, v107, v108, v139);
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      outlined consume of TabSidebarConfiguration?(v129, v130, v132, v131, v67, v59, v107, v108, v139);
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    outlined consume of TabSidebarConfiguration?(v129, v130, v132, v131, v67, v59, 0, v108, v139);
  }
}

uint64_t closure #1 in UITabBarController.updateSidebarToConfiguration(coordinator:customization:transaction:)(void (*a1)(uint64_t))
{
  static Update.ensure<A>(_:)();
  uint64_t v2 = swift_bridgeObjectRetain();
  a1(v2);
  return swift_bridgeObjectRelease_n();
}

uint64_t closure #1 in closure #1 in UITabBarController.updateSidebarToConfiguration(coordinator:customization:transaction:)(void *a1, uint64_t a2, char a3)
{
  if (a3) {
    goto LABEL_4;
  }
  Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
  if (WeakValue)
  {
    a2 = *WeakValue;
LABEL_4:
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }
  a2 = MEMORY[0x1E4FBC860];
LABEL_5:
  uint64_t v6 = MEMORY[0x1E4FBC860];
  uint64_t v12 = MEMORY[0x1E4FBC860];
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  type metadata accessor for Logger?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, MEMORY[0x1E4FBBE00]);
  uint64_t v7 = type metadata accessor for MenuVisitor.MenuStackGroup();
  unint64_t v8 = (*(unsigned __int8 *)(*(void *)(v7 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v7 - 8) + 80);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_18834BB80;
  if (one-time initialization token for empty != -1) {
    swift_once();
  }
  uint64_t v10 = __swift_project_value_buffer(v7, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
  outlined init with copy of TabContextMenuKey.Storage.Guts(v10, v9 + v8, (uint64_t (*)(void))type metadata accessor for MenuVisitor.MenuStackGroup);
  MenuVisitor.visit(_:uniqueNames:)(a2, &v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *a1 = v6;
  return swift_bridgeObjectRelease();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> ()) -> ()(uint64_t a1, void *aBlock)
{
  uint64_t v2 = *(void (**)(void (*)(uint64_t), uint64_t))(a1 + 32);
  int v3 = _Block_copy(aBlock);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  swift_retain();
  v2(partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray) -> (), v4);
  swift_release();

  return swift_release();
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray) -> ()(uint64_t a1, uint64_t a2)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, objc_class *))(a2 + 16))(a2, isa);
}

uint64_t UITabBarController.updateColorScheme(selectedHostVC:environment:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UITraitOverrides();
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = *(void **)(a1 + direct field offset for UIHostingController.host);
  type metadata accessor for UIHostingController<TabItem.RootView>(0, &lazy cache variable for type metadata for _UIHostingView<TabItem.RootView>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>();
  id v10 = v9;
  ViewRendererHost.preferenceValue<A>(_:)();

  if (v15 == 2)
  {
    v14[1] = v7;
    _OWORD v14[2] = v8;
    uint64_t v11 = EnvironmentValues.systemColorScheme.getter();
  }
  MEMORY[0x18C1167E0](v11);
  UIMutableTraits.userInterfaceStyle.setter();
  uint64_t v12 = MEMORY[0x18C1167F0](v6);
  MEMORY[0x18C1167E0](v12);
  UIMutableTraits.userInterfaceStyle.setter();
  return MEMORY[0x18C1167F0](v6);
}

uint64_t implicit closure #6 in UIHostingController.updateChildrenCreatingIfNeeded(of:using:customization:environment:coordinator:)(uint64_t a1)
{
  return a1;
}

uint64_t implicit closure #10 in UIHostingController.updateChildrenCreatingIfNeeded(of:using:customization:environment:coordinator:)(uint64_t a1)
{
  outlined init with copy of TabEntry(a1, (uint64_t)__src);
  if (v5)
  {
    memcpy(v3, __src, 0x108uLL);
    uint64_t v1 = *((void *)&v3[1] + 1);
    outlined copy of TabCustomizationID.Base();
    outlined destroy of TabItemGroup((uint64_t)v3);
  }
  else
  {
    v3[4] = *(_OWORD *)&__src[64];
    v3[5] = *(_OWORD *)&__src[80];
    *(void *)&v3[6] = *(void *)&__src[96];
    v3[0] = *(_OWORD *)__src;
    v3[1] = *(_OWORD *)&__src[16];
    v3[2] = *(_OWORD *)&__src[32];
    v3[3] = *(_OWORD *)&__src[48];
    uint64_t v1 = TabItem.platformIdentifier.getter();
    outlined destroy of TabItem((uint64_t)v3);
  }
  return v1;
}

uint64_t closure #6 in UIHostingController.updateChildrenCreatingIfNeeded(of:using:customization:environment:coordinator:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  outlined copy of TabCustomizationID.Base();
  return v1;
}

uint64_t implicit closure #13 in UIHostingController.updateChildrenCreatingIfNeeded(of:using:customization:environment:coordinator:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t implicit closure #14 in UIHostingController.updateChildrenCreatingIfNeeded(of:using:customization:environment:coordinator:)(uint64_t a1)
{
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI18TabCustomizationIDVG_SSs5NeverOTg503_s7d4UI28f7SectionG93EntryV11clientOrderSaySSGSgvgSSAA0cE2IDVcfu0_32e1885d3bbc99997a9c2787f67e5aae26AHSSTf3nnnpk_nTf1cn_nTm(a1);
  type metadata accessor for Binding<Visibility>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v1 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t closure #1 in UIHostingController.createBridgedTab(using:)(uint64_t a1)
{
  outlined init with copy of TabItem?(a1, (uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.SelectionContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent);
  if (v4 == 1) {
    return outlined destroy of Binding<Visibility>((uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.SelectionContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent, MEMORY[0x1E4FBB718]);
  }
  uint64_t v2 = AGGraphClearUpdate();
  MEMORY[0x1F4188790](v2);
  type metadata accessor for Binding<Visibility>(0, (unint64_t *)&lazy cache variable for type metadata for ()?, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBB718]);
  static Update.ensure<A>(_:)();
  AGGraphSetUpdate();
  return outlined destroy of PlatformItem.SelectionContent((uint64_t)v3);
}

uint64_t closure #1 in UIHostingController.createTabAction(identifier:select:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void UIHostingController<>.updateTabEnvironment(environment:coordinator:)(uint64_t *a1, uint64_t a2)
{
  int v3 = v2;
  type metadata accessor for Logger?();
  double v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v43 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  id v11 = objc_msgSend(v3, sel_traitCollection, v7);
  id v12 = objc_msgSend(v11, sel_userInterfaceIdiom);

  uint64_t v48 = v9;
  uint64_t v49 = v10;
  EnvironmentValues.horizontalSizeClass.getter();
  int v13 = 0;
  char v14 = *(unsigned char *)(a2 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_isUIKitSidebarVisible);
  int v45 = 3;
  int v15 = 1;
  switch((unint64_t)v12)
  {
    case 0uLL:
      goto LABEL_2;
    case 1uLL:
      if (v47 == 2) {
        goto LABEL_4;
      }
      if (v47)
      {
LABEL_6:
        if (v14)
        {
          LOBYTE(v13) = 0;
          int v45 = 1;
          int v16 = 1;
          goto LABEL_10;
        }
        int v13 = 0;
        int v15 = 0;
        int v45 = 0;
      }
      else
      {
LABEL_2:
        int v13 = 0;
        int v15 = 0;
        int v45 = 2;
      }
LABEL_9:
      int v16 = v15 & (v13 ^ 1);
LABEL_10:
      uint64_t v17 = *(void *)(*(void *)&v3[direct field offset for UIHostingController.host]
                      + *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)&v3[direct field offset for UIHostingController.host])
                                  + 0x68));
      uint64_t v18 = *(void *)(v17 + 152);
      uint64_t v19 = *(void *)(v17 + 160);
      uint64_t v42 = direct field offset for UIHostingController.host;
      if (v18 == 1)
      {
        EnvironmentValues.init()();
        uint64_t v20 = v49;
      }
      else
      {
        uint64_t v48 = v18;
        uint64_t v49 = v19;
        uint64_t v20 = v19;
      }
      int v44 = v16;
      type metadata accessor for EnvironmentPropertyKey<TabBarPlacementKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabBarPlacementKey>, (uint64_t)&type metadata for TabBarPlacementKey, (uint64_t)&protocol witness table for TabBarPlacementKey, MEMORY[0x1E4F40930]);
      outlined copy of EnvironmentValues?(v18);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<IsTabBarShowingSectionsKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabBarPlacementKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabBarPlacementKey>, (uint64_t)&type metadata for TabBarPlacementKey, (uint64_t)&protocol witness table for TabBarPlacementKey);
      swift_retain_n();
      if (v20)
      {
        swift_retain_n();
        PropertyList.Tracker.value<A>(_:for:)();
        swift_release_n();
      }
      else
      {
        PropertyList.subscript.getter();
      }
      swift_release_n();
      if (v47 == 5)
      {
        if ((v13 & 1) == 0) {
          goto LABEL_23;
        }
      }
      else if ((v13 & 1) != 0 || v47 != v45)
      {
LABEL_23:
        LOBYTE(v47) = v45;
        type metadata accessor for EnvironmentPropertyKey<TabBarPlacementKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabBarPlacementKey>, (uint64_t)&type metadata for TabBarPlacementKey, (uint64_t)&protocol witness table for TabBarPlacementKey, MEMORY[0x1E4F40930]);
        lazy protocol witness table accessor for type EnvironmentPropertyKey<IsTabBarShowingSectionsKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabBarPlacementKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabBarPlacementKey>, (uint64_t)&type metadata for TabBarPlacementKey, (uint64_t)&protocol witness table for TabBarPlacementKey);
        swift_retain();
        PropertyList.subscript.setter();
        int v22 = v3;
        int v23 = v44;
        if (v20)
        {
          swift_retain();
          swift_retain();
          PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
          swift_release();
          swift_release();
        }
        swift_release();
        char v21 = 1;
        uint64_t v24 = v49;
        if (v49) {
          goto LABEL_26;
        }
LABEL_22:
        type metadata accessor for EnvironmentPropertyKey<TabBarPlacementKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<IsTabBarShowingSectionsKey>, (uint64_t)&type metadata for IsTabBarShowingSectionsKey, (uint64_t)&protocol witness table for IsTabBarShowingSectionsKey, MEMORY[0x1E4F40930]);
        lazy protocol witness table accessor for type EnvironmentPropertyKey<IsTabBarShowingSectionsKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<IsTabBarShowingSectionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<IsTabBarShowingSectionsKey>, (uint64_t)&type metadata for IsTabBarShowingSectionsKey, (uint64_t)&protocol witness table for IsTabBarShowingSectionsKey);
        swift_retain_n();
        PropertyList.subscript.getter();
        goto LABEL_27;
      }
      char v21 = 0;
      int v22 = v3;
      int v23 = v44;
      uint64_t v24 = v49;
      if (!v49) {
        goto LABEL_22;
      }
LABEL_26:
      type metadata accessor for EnvironmentPropertyKey<TabBarPlacementKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<IsTabBarShowingSectionsKey>, (uint64_t)&type metadata for IsTabBarShowingSectionsKey, (uint64_t)&protocol witness table for IsTabBarShowingSectionsKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<IsTabBarShowingSectionsKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<IsTabBarShowingSectionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<IsTabBarShowingSectionsKey>, (uint64_t)&type metadata for IsTabBarShowingSectionsKey, (uint64_t)&protocol witness table for IsTabBarShowingSectionsKey);
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
LABEL_27:
      swift_release_n();
      if (v23 == v47)
      {
        if ((v21 & 1) == 0)
        {
          swift_release();
          swift_release();
          return;
        }
      }
      else
      {
        LOBYTE(v47) = v23;
        type metadata accessor for EnvironmentPropertyKey<TabBarPlacementKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<IsTabBarShowingSectionsKey>, (uint64_t)&type metadata for IsTabBarShowingSectionsKey, (uint64_t)&protocol witness table for IsTabBarShowingSectionsKey, MEMORY[0x1E4F40930]);
        lazy protocol witness table accessor for type EnvironmentPropertyKey<IsTabBarShowingSectionsKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<IsTabBarShowingSectionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<IsTabBarShowingSectionsKey>, (uint64_t)&type metadata for IsTabBarShowingSectionsKey, (uint64_t)&protocol witness table for IsTabBarShowingSectionsKey);
        swift_retain();
        PropertyList.subscript.setter();
        if (v24)
        {
          swift_retain();
          swift_retain();
          PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
          swift_release();
          swift_release();
        }
        swift_release();
      }
      uint64_t v25 = (uint64_t)v43;
      static Log.tabView.getter();
      uint64_t v26 = type metadata accessor for Logger();
      uint64_t v27 = *(void *)(v26 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) == 1)
      {
        outlined destroy of (header: TabItem?, children: [TabEntry], actions: [TabItem], compactItem: TabItem?)(v25, (uint64_t (*)(void))type metadata accessor for Logger?);
        Swift::Bool_optional v28 = (void *)MEMORY[0x1E4FBC8C8];
        uint64_t v29 = v42;
      }
      else
      {
        long long v30 = Logger.logObject.getter();
        os_log_type_t v31 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v30, v31))
        {
          uint64_t v32 = swift_slowAlloc();
          uint64_t v33 = swift_slowAlloc();
          uint64_t v47 = v33;
          *(_DWORD *)uint64_t v32 = 136315394;
          LOBYTE(v46) = v45;
          type metadata accessor for Binding<Visibility>(0, &lazy cache variable for type metadata for TabBarPlacement.Placement?, (uint64_t)&type metadata for TabBarPlacement.Placement, MEMORY[0x1E4FBB718]);
          uint64_t v34 = String.init<A>(describing:)();
          uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v47);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v32 + 12) = 1024;
          LODWORD(v46) = v23;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_1872C6000, v30, v31, "Updated tab environment to tabBarPlacement: %s showingSections\n%{BOOL}d", (uint8_t *)v32, 0x12u);
          swift_arrayDestroy();
          MEMORY[0x18C119C60](v33, -1, -1);
          uint64_t v25 = (uint64_t)v43;
          MEMORY[0x18C119C60](v32, -1, -1);
        }

        Swift::Bool_optional v28 = (void *)MEMORY[0x1E4FBC8C8];
        uint64_t v29 = v42;
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
      }
      id v36 = *(void **)&v22[v29];
      uint64_t v37 = v49;
      uint64_t v38 = *(void *)((char *)v36 + *(void *)((*v28 & *v36) + 0x68));
      uint64_t v39 = *(void *)(v38 + 152);
      *(void *)(v38 + 152) = v48;
      *(void *)(v38 + 160) = v37;
      swift_retain();
      id v40 = v36;
      swift_retain();
      outlined consume of EnvironmentValues?(v39);
      if (MEMORY[0x18C119DF0](v38 + 24))
      {
        swift_getObjectType();
        LOWORD(v47) = 2;
        ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
        swift_release();
        swift_release();

        swift_unknownObjectRelease();
      }
      else
      {
        swift_release();
        swift_release();
      }
      return;
    case 5uLL:
      goto LABEL_6;
    case 6uLL:
      goto LABEL_9;
    default:
LABEL_4:
      int v15 = 0;
      int v45 = 5;
      int v13 = 1;
      goto LABEL_9;
  }
}

void UIHostingController<>.setChildRootViewCreatingHostIfNeeded(_:childID:transaction:coordinator:)(uint64_t a1, id a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v12 - 8);
  char v14 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v67 - v17;
  id v19 = objc_msgSend(v6, sel__uip_tabElement, v16);
  if (!v19) {
    goto LABEL_11;
  }
  uint64_t v20 = v19;
  self;
  char v21 = (void *)swift_dynamicCastObjCClass();
  if (!v21)
  {

LABEL_11:
    id v80 = *(id *)&v6[direct field offset for UIHostingController.host];
    specialized _UIHostingView.setRootView(_:transaction:)(a1);
    id v43 = v80;

    return;
  }
  id v80 = a2;
  uint64_t v77 = a4;
  id v22 = objc_msgSend(v21, sel__identifier);
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;

  uint64_t v78 = a5;
  uint64_t v26 = (uint64_t *)(a5 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_groupHostCache);
  swift_beginAccess();
  uint64_t v27 = *v26;
  swift_bridgeObjectRetain();
  uint64_t v79 = v23;
  specialized Dictionary.subscript.getter(v23, (uint64_t)v25, v27);
  uint64_t v29 = v28;
  os_log_type_t v31 = v30;
  uint64_t v33 = v32;
  swift_bridgeObjectRelease();
  if (!v31)
  {
    swift_endAccess();
LABEL_18:
    static Log.tabView.getter();
    uint64_t v44 = type metadata accessor for Logger();
    uint64_t v45 = *(void *)(v44 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v14, 1, v44) == 1)
    {
      outlined destroy of (header: TabItem?, children: [TabEntry], actions: [TabItem], compactItem: TabItem?)((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Logger?);
    }
    else
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.default.getter();
      LODWORD(v76) = v47;
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v48 = swift_slowAlloc();
        uint64_t v74 = v45;
        uint64_t v49 = v48;
        uint64_t v73 = swift_slowAlloc();
        v82[0] = v73;
        *(_DWORD *)uint64_t v49 = 136315394;
        swift_bridgeObjectRetain();
        uint64_t v81 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v80, (unint64_t)a3, v82);
        char v75 = a3;
        id v50 = v46;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v49 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v81 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, (unint64_t)v25, v82);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1872C6000, v46, (os_log_type_t)v76, "Making new VC for child '%s' in group '%s'", (uint8_t *)v49, 0x16u);
        uint64_t v51 = v73;
        swift_arrayDestroy();
        MEMORY[0x18C119C60](v51, -1, -1);
        uint64_t v52 = v49;
        uint64_t v45 = v74;
        MEMORY[0x18C119C60](v52, -1, -1);

        a3 = v75;
      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v45 + 8))(v14, v44);
    }
    outlined init with copy of TabItem.RootView(a1, (uint64_t)v82);
    type metadata accessor for UIHostingController<TabItem.RootView>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<TabItem.RootView>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for UIHostingController);
    id v54 = objc_allocWithZone(v53);
    uint64_t v39 = (UIViewController *)specialized UIHostingController.init(rootView:)((uint64_t)v82);
    v56._countAndFlagsBits = v79;
    v55._countAndFlagsBits = (uint64_t)v80;
    v55._object = a3;
    v56._object = v25;
    TabViewCoordinator_Phone.cacheChild(_:childID:for:)(v39, v55, v56);

    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  swift_endAccess();
  swift_bridgeObjectRetain();
  unint64_t v34 = specialized OrderedSet._find(_:)((uint64_t)v80, (uint64_t)a3, v29, v31);
  if (v35)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
LABEL_17:
    swift_release();
    goto LABEL_18;
  }
  if ((v34 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    char v75 = (void *)v29;
    uint64_t v76 = v31;
    if (v34 < *(void *)(v33 + 16))
    {
      uint64_t v36 = v33;
      id v37 = *(id *)(v33 + 8 * v34 + 32);
      swift_bridgeObjectRelease();
      type metadata accessor for UIHostingController<TabItem.RootView>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<TabItem.RootView>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for UIHostingController);
      uint64_t v38 = swift_dynamicCastClass();
      if (v38)
      {
        uint64_t v39 = (UIViewController *)v38;
        uint64_t v74 = v36;
        uint64_t v73 = (uint64_t)v37;
        static Log.tabView.getter();
        uint64_t v40 = type metadata accessor for Logger();
        uint64_t v41 = *(void *)(v40 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v18, 1, v40) == 1)
        {
          outlined destroy of (header: TabItem?, children: [TabEntry], actions: [TabItem], compactItem: TabItem?)((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for Logger?);
          uint64_t v42 = (void *)v73;
        }
        else
        {
          uint64_t v72 = v41;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          uint64_t v60 = Logger.logObject.getter();
          os_log_type_t v61 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v60, v61))
          {
            uint64_t v62 = swift_slowAlloc();
            os_log_t v70 = v60;
            uint64_t v63 = v62;
            uint64_t v71 = swift_slowAlloc();
            v82[0] = v71;
            *(_DWORD *)uint64_t v63 = 136315394;
            uint64_t v68 = v63 + 4;
            swift_bridgeObjectRetain();
            uint64_t v81 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v80, (unint64_t)a3, v82);
            id v69 = v82;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v63 + 12) = 2080;
            uint64_t v68 = v63 + 14;
            swift_bridgeObjectRetain();
            uint64_t v81 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, (unint64_t)v25, v82);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            os_log_t v64 = v70;
            _os_log_impl(&dword_1872C6000, v70, v61, "Using cached VC for child '%s' in group '%s'", (uint8_t *)v63, 0x16u);
            uint64_t v65 = v71;
            swift_arrayDestroy();
            MEMORY[0x18C119C60](v65, -1, -1);
            MEMORY[0x18C119C60](v63, -1, -1);
          }
          else
          {
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }
          uint64_t v42 = (void *)v73;
          (*(void (**)(char *, uint64_t))(v72 + 8))(v18, v40);
        }
        id v66 = v42;
        specialized TabViewCoordinator_Phone.didUseChild(_:childID:for:)((uint64_t)v80, (uint64_t)a3, v79, (uint64_t)v25);
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_release();
LABEL_25:
        v82[0] = (uint64_t)v39;
        __int16 v83 = 1;
        id v57 = *(void **)&v6[direct field offset for UIHostingController.host];
        id v58 = v39;
        id v59 = v57;
        specialized _UIHostingView.setRootView(_:transaction:)((uint64_t)v82);

        outlined destroy of TabItem.RootView((uint64_t)v82);
        return;
      }

      swift_release();
      swift_release();
      goto LABEL_17;
    }
  }
  __break(1u);
}

uint64_t outlined destroy of (offset: Int, element: TabItem)(uint64_t a1)
{
  type metadata accessor for (offset: Int, element: TabItem)(0, &lazy cache variable for type metadata for (offset: Int, element: TabItem));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of (offset: Int, element: TabItem)?(uint64_t a1)
{
  type metadata accessor for (offset: Int, element: TabItem)?(0, &lazy cache variable for type metadata for (offset: Int, element: TabItem)?, &lazy cache variable for type metadata for (offset: Int, element: TabItem));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for TabContextMenuKey.Storage?(uint64_t a1)
{
}

uint64_t outlined destroy of (header: TabItem?, children: [TabEntry], actions: [TabItem], compactItem: TabItem?)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_187B3090C()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void partial apply for closure #1 in TabItem.menuConfiguration()(uint64_t a1)
{
  closure #1 in TabItem.menuConfiguration()(a1, *(void *)(v1 + 16));
}

uint64_t outlined init with copy of TabContextMenuKey.Storage.Guts(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined release of SwipeActions.Value(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 120);
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 128);
  uint64_t v4 = *(void *)(a1 + 136);
  uint64_t v5 = *(void *)(a1 + 144);
  uint64_t v6 = *(void *)(a1 + 152);
  uint64_t v7 = *(void *)(a1 + 160);
  uint64_t v8 = *(void *)(a1 + 168);
  long long v11 = *(_OWORD *)(a1 + 192);
  long long v12 = *(_OWORD *)(a1 + 176);
  uint64_t v9 = *(void *)(a1 + 208);
  outlined consume of SwipeActions.Configuration?(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96));
  outlined consume of SwipeActions.Configuration?(v13, v2, v3, v4, v5, v6, v7, v8, v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v9);
  return a1;
}

ValueMetadata *type metadata accessor for InAdaptableTabViewContext()
{
  return &type metadata for InAdaptableTabViewContext;
}

unsigned char *storeEnumTagSinglePayload for TabViewAdaptationMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *UIContextMenuConfiguration_optional result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187B30B5CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *UIContextMenuConfiguration_optional result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TabViewAdaptationMode()
{
  return &type metadata for TabViewAdaptationMode;
}

unint64_t lazy protocol witness table accessor for type TabViewAdaptationMode and conformance TabViewAdaptationMode()
{
  unint64_t result = lazy protocol witness table cache variable for type TabViewAdaptationMode and conformance TabViewAdaptationMode;
  if (!lazy protocol witness table cache variable for type TabViewAdaptationMode and conformance TabViewAdaptationMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabViewAdaptationMode and conformance TabViewAdaptationMode);
  }
  return result;
}

uint64_t outlined init with copy of TabItem?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for Binding<Visibility>(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t outlined destroy of Binding<Visibility>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  type metadata accessor for Binding<Visibility>(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t specialized OrderedSet._find(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = a4[2];
  if (a3)
  {
    uint64_t v8 = (void *)(a3 + 16);
    swift_retain();
    Swift::Int v9 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(a1, a2, (uint64_t)(a4 + 4), v7, v8);
    swift_release();
  }
  else
  {
    if (!v7) {
      return 0;
    }
    BOOL v10 = a4[4] == a1 && a4[5] == a2;
    if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 0;
    }
    if (v7 == 1) {
      return 0;
    }
    if (a4[6] == a1 && a4[7] == a2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    if (v7 == 2) {
      return 0;
    }
    if (a4[8] == a1 && a4[9] == a2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 2;
    }
    if (v7 == 3) {
      return 0;
    }
    if (a4[10] == a1 && a4[11] == a2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      return 3;
    }
    else
    {
      long long v12 = a4 + 13;
      uint64_t v13 = 3;
      uint64_t v14 = 4;
      while (1)
      {
        if (v7 == v14) {
          return 0;
        }
        ++v13;
        if (*(v12 - 1) == a1 && *v12 == a2) {
          break;
        }
        Swift::Int v9 = v14++;
        v12 += 2;
        if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
          return v9;
        }
      }
      return v13;
    }
  }
  return v9;
}

Swift::Int specialized _HashTable.UnsafeHandle._find<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int result = Hasher._finalize()();
  if (__OFSUB__(1 << *a5, 1))
  {
    __break(1u);
  }
  else
  {
    _HashTable.UnsafeHandle._startIterator(bucket:)();
    uint64_t v10 = _HashTable.BucketIterator.currentValue.getter();
    uint64_t v11 = v10;
    if ((v12 & 1) == 0)
    {
      uint64_t v13 = (void *)(a3 + 16 * v10);
      if (*v13 != a1 || v13[1] != a2)
      {
        do
        {
          if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
            break;
          }
          _HashTable.BucketIterator.advance()();
          uint64_t v14 = _HashTable.BucketIterator.currentValue.getter();
          uint64_t v11 = v14;
          if (v15) {
            break;
          }
          double v16 = (void *)(a3 + 16 * v14);
        }
        while (*v16 != a1 || v16[1] != a2);
      }
    }
    return v11;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<IsTabBarShowingSectionsKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<TabBarPlacementKey>(255, a2, a3, a4, MEMORY[0x1E4F40930]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for UIHostingController<TabItem.RootView>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView();
    unint64_t v7 = a3(a1, &type metadata for TabItem.RootView, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void type metadata accessor for EnvironmentPropertyKey<TabBarPlacementKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t sub_187B31170()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

void type metadata accessor for UIHostingConfiguration<AnyView, EmptyView>()
{
  if (!lazy cache variable for type metadata for UIHostingConfiguration<AnyView, EmptyView>)
  {
    unint64_t v0 = type metadata accessor for UIHostingConfiguration();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIHostingConfiguration<AnyView, EmptyView>);
    }
  }
}

uint64_t sub_187B31220()
{
  outlined consume of PlatformItemCollection.Storage(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UITabBarController.updateSidebarToConfiguration(coordinator:customization:transaction:)(void (*a1)(uint64_t))
{
  return closure #1 in UITabBarController.updateSidebarToConfiguration(coordinator:customization:transaction:)(a1);
}

uint64_t sub_187B31268()
{
  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray) -> ()(uint64_t a1)
{
  thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray) -> ()(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in UITabBarController.updateSidebarToConfiguration(coordinator:customization:transaction:)()
{
  return closure #1 in closure #1 in UITabBarController.updateSidebarToConfiguration(coordinator:customization:transaction:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
}

uint64_t specialized static AdaptableTabView.extractTabs(_:)(uint64_t a1)
{
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v2 - 8);
  id v66 = (char *)v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = (char *)MEMORY[0x1E4FBC860];
  unsigned int v4 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_26:
    uint64_t v29 = (uint64_t)v66;
    static Log.tabView.getter();
    uint64_t v30 = type metadata accessor for Logger();
    uint64_t v31 = *(void *)(v30 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) == 1)
    {
      outlined destroy of (header: TabItem?, children: [TabEntry], actions: [TabItem], compactItem: TabItem?)(v29, (uint64_t (*)(void))type metadata accessor for Logger?);
    }
    else
    {
      uint64_t v32 = v76;
      swift_bridgeObjectRetain_n();
      uint64_t v33 = Logger.logObject.getter();
      int v34 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v33, (os_log_type_t)v34))
      {
        int v62 = v34;
        os_log_t v64 = v33;
        uint64_t v65 = v31;
        char v35 = (uint8_t *)swift_slowAlloc();
        uint64_t v61 = swift_slowAlloc();
        uint64_t v75 = v61;
        uint64_t v63 = v35;
        *(_DWORD *)char v35 = 136315138;
        int64_t v36 = *((void *)v32 + 2);
        uint64_t v37 = MEMORY[0x1E4FBC860];
        if (v36)
        {
          uint64_t v60 = v30;
          uint64_t v74 = MEMORY[0x1E4FBC860];
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36, 0);
          v59[1] = v32;
          uint64_t v38 = (uint64_t)(v32 + 32);
          uint64_t v67 = &v71;
          do
          {
            outlined init with copy of TabEntry(v38, (uint64_t)v72);
            outlined init with copy of TabEntry((uint64_t)v72, (uint64_t)v70);
            if (*(unsigned char *)v67)
            {
              memcpy(v69, v70, sizeof(v69));
              strcpy((char *)v68, "TabItemGroup ");
              HIWORD(v68[1]) = -4864;
              v39._countAndFlagsBits = TabItemGroup.description.getter();
              String.append(_:)(v39);
              swift_bridgeObjectRelease();
              uint64_t v40 = v68[0];
              uint64_t v41 = v68[1];
              outlined destroy of TabItemGroup((uint64_t)v69);
            }
            else
            {
              *(_OWORD *)&v69[64] = *(_OWORD *)&v70[64];
              *(_OWORD *)&v69[80] = *(_OWORD *)&v70[80];
              *(void *)&v69[96] = *(void *)&v70[96];
              *(_OWORD *)id v69 = *(_OWORD *)v70;
              *(_OWORD *)&v69[16] = *(_OWORD *)&v70[16];
              *(_OWORD *)&v69[32] = *(_OWORD *)&v70[32];
              *(_OWORD *)&v69[48] = *(_OWORD *)&v70[48];
              v68[0] = 0;
              v68[1] = 0xE000000000000000;
              _StringGuts.grow(_:)(20);
              swift_bridgeObjectRelease();
              strcpy((char *)v68, "TabItem ");
              BYTE1(v68[1]) = 0;
              WORD1(v68[1]) = 0;
              HIDWORD(v68[1]) = -402653184;
              v42._countAndFlagsBits = TabItem.platformIdentifier.getter();
              String.append(_:)(v42);
              swift_bridgeObjectRelease();
              v43._countAndFlagsBits = 0x3D6E656464696820;
              v43._object = (void *)0xE800000000000000;
              String.append(_:)(v43);
              char v44 = TabEntry.hidden.getter();
              BOOL v45 = (v44 & 1) == 0;
              if (v44) {
                uint64_t v46 = 1702195828;
              }
              else {
                uint64_t v46 = 0x65736C6166;
              }
              if (v45) {
                unint64_t v47 = 0xE500000000000000;
              }
              else {
                unint64_t v47 = 0xE400000000000000;
              }
              unint64_t v48 = v47;
              String.append(_:)(*(Swift::String *)&v46);
              swift_bridgeObjectRelease();
              uint64_t v40 = v68[0];
              uint64_t v41 = v68[1];
              outlined destroy of TabItem((uint64_t)v69);
            }
            outlined destroy of TabEntry((uint64_t)v72);
            uint64_t v37 = v74;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v37 + 16) + 1, 1);
              uint64_t v37 = v74;
            }
            unint64_t v50 = *(void *)(v37 + 16);
            unint64_t v49 = *(void *)(v37 + 24);
            if (v50 >= v49 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v49 > 1), v50 + 1, 1);
              uint64_t v37 = v74;
            }
            *(void *)(v37 + 16) = v50 + 1;
            uint64_t v51 = v37 + 16 * v50;
            *(void *)(v51 + 32) = v40;
            *(void *)(v51 + 40) = v41;
            v38 += 272;
            --v36;
          }
          while (v36);
          swift_bridgeObjectRelease();
          uint64_t v29 = (uint64_t)v66;
          uint64_t v30 = v60;
        }
        uint64_t v52 = v63;
        v72[0] = v37;
        type metadata accessor for Binding<Visibility>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
        lazy protocol witness table accessor for type [String] and conformance [A]();
        uint64_t v53 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v55 = v54;
        swift_bridgeObjectRelease();
        v72[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v55, &v75);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        os_log_t v56 = v64;
        _os_log_impl(&dword_1872C6000, v64, (os_log_type_t)v62, "Extracted tabs:\n%s", v52, 0xCu);
        uint64_t v57 = v61;
        swift_arrayDestroy();
        MEMORY[0x18C119C60](v57, -1, -1);
        MEMORY[0x18C119C60](v52, -1, -1);

        uint64_t v31 = v65;
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v29, v30);
    }
    swift_beginAccess();
    return (uint64_t)v76;
  }
  uint64_t v6 = a1 + 32;
  uint64_t v67 = &v73;
  uint64_t v65 = a1;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of TabItem(v6, (uint64_t)v69);
    v72[0] = *(void *)&v69[88];
    char v7 = ViewTraitCollection.isAuxiliaryContent.getter();
    outlined init with copy of TabItem((uint64_t)v69, (uint64_t)v72);
    if (v7)
    {
      outlined destroy of TabItem((uint64_t)v72);
      outlined init with copy of TabItem((uint64_t)v69, (uint64_t)v70);
LABEL_4:
      outlined destroy of TabItem((uint64_t)v70);
LABEL_5:
      outlined destroy of TabItem((uint64_t)v69);
      goto LABEL_6;
    }
    *(void *)os_log_t v70 = v72[11];
    LOBYTE(v75) = 0;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    char v8 = v68[0];
    outlined destroy of TabItem((uint64_t)v72);
    outlined init with copy of TabItem((uint64_t)v69, (uint64_t)v70);
    if (v8) {
      goto LABEL_4;
    }
    v68[0] = *(void *)&v70[88];
    LOBYTE(v74) = 0;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    char v9 = v75;
    outlined destroy of TabItem((uint64_t)v70);
    if (v9) {
      goto LABEL_5;
    }
    outlined init with copy of TabItem((uint64_t)v69, (uint64_t)v72);
    *(unsigned char *)uint64_t v67 = 0;
    outlined init with copy of TabEntry((uint64_t)v72, (uint64_t)v70);
    uint64_t v10 = v76;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v10 + 2) + 1, 1, v10);
    }
    unint64_t v12 = *((void *)v10 + 2);
    unint64_t v11 = *((void *)v10 + 3);
    if (v12 >= v11 >> 1) {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, v10);
    }
    *((void *)v10 + 2) = v12 + 1;
    outlined init with take of TabEntry((uint64_t)v70, (uint64_t)&v10[272 * v12 + 32]);
    uint64_t v76 = v10;
    uint64_t v13 = TabItem.platformIdentifier.getter();
    uint64_t v15 = v14;
    outlined init with copy of TabEntry((uint64_t)v72, (uint64_t)v70);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v68[0] = v4;
    unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v15);
    uint64_t v19 = v4[2];
    BOOL v20 = (v17 & 1) == 0;
    uint64_t v21 = v19 + v20;
    if (__OFADD__(v19, v20)) {
      break;
    }
    char v22 = v17;
    if (v4[3] >= v21)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, isUniquelyReferenced_nonNull_native);
      unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v15);
      if ((v22 & 1) != (v24 & 1)) {
        goto LABEL_52;
      }
      unint64_t v18 = v23;
    }
    unsigned int v4 = (void *)v68[0];
    if (v22)
    {
      outlined assign with take of TabEntry((uint64_t)v70, *(void *)(v68[0] + 56) + 272 * v18);
    }
    else
    {
      *(void *)(v68[0] + 8 * (v18 >> 6) + 64) |= 1 << v18;
      uint64_t v25 = (uint64_t *)(v4[6] + 16 * v18);
      *uint64_t v25 = v13;
      v25[1] = v15;
      outlined init with take of TabEntry((uint64_t)v70, v4[7] + 272 * v18);
      uint64_t v26 = v4[2];
      BOOL v27 = __OFADD__(v26, 1);
      uint64_t v28 = v26 + 1;
      if (v27) {
        goto LABEL_51;
      }
      v4[2] = v28;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of TabEntry((uint64_t)v72);
    outlined destroy of TabItem((uint64_t)v69);
LABEL_6:
    v6 += 104;
    if (!--v5)
    {
      swift_bridgeObjectRelease();
      goto LABEL_26;
    }
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized ItemIndexTabsOnlyIndexProjection.init(_:)(uint64_t a1)
{
  uint64_t v3 = MEMORY[0x1E4FBC860];
  v1[3] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v46 = v1 + 3;
  unint64_t v47 = v1;
  v1[4] = specialized Dictionary.init(dictionaryLiteral:)(v3);
  BOOL v45 = v1 + 4;
  v1[2] = a1;
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v48 = a1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  while (1)
  {
    if (v6 == v4)
    {
      unint64_t v6 = v4;
      memset(v57, 0, sizeof(v57));
      goto LABEL_9;
    }
    if (v6 >= v4) {
      break;
    }
    outlined init with copy of TabItem(v48 + 104 * v6, (uint64_t)v54);
    *(void *)&v57[0] = v6;
    *(_OWORD *)((char *)&v57[4] + 8) = v54[4];
    *(_OWORD *)((char *)&v57[5] + 8) = v55;
    *((void *)&v57[6] + 1) = v56;
    *(_OWORD *)((char *)v57 + 8) = v54[0];
    *(_OWORD *)((char *)&v57[1] + 8) = v54[1];
    ++v6;
    *(_OWORD *)((char *)&v57[2] + 8) = v54[2];
    *(_OWORD *)((char *)&v57[3] + 8) = v54[3];
LABEL_9:
    outlined init with take of TabItem?((uint64_t)v57, (uint64_t)&v58, (uint64_t)&lazy cache variable for type metadata for (offset: Int, element: TabItem)?, (uint64_t)&lazy cache variable for type metadata for (offset: Int, element: TabItem), (uint64_t)&type metadata for TabItem, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for (offset: Int, element: TabItem)?);
    if (!*((void *)&v60 + 1)) {
      return (uint64_t)v47;
    }
    uint64_t v7 = v58;
    v57[4] = v63;
    v57[5] = v64;
    *(void *)&v57[6] = v65;
    v57[0] = v59;
    v57[1] = v60;
    v57[2] = v61;
    v57[3] = v62;
    uint64_t v53 = *((void *)&v64 + 1);
    char v8 = ViewTraitCollection.isAuxiliaryContent.getter();
    outlined init with copy of TabItem((uint64_t)v57, (uint64_t)&v53);
    if (v8)
    {
      outlined destroy of TabItem((uint64_t)&v53);
      outlined init with copy of TabItem((uint64_t)v57, (uint64_t)v50);
LABEL_3:
      outlined destroy of TabItem((uint64_t)v50);
      goto LABEL_4;
    }
    v50[0] = v55;
    char v52 = 0;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    outlined destroy of TabItem((uint64_t)&v53);
    outlined init with copy of TabItem((uint64_t)v57, (uint64_t)v50);
    if (v49) {
      goto LABEL_3;
    }
    char v49 = v51;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    char v9 = v52;
    outlined destroy of TabItem((uint64_t)v50);
    if (v9)
    {
LABEL_4:
      outlined destroy of TabItem((uint64_t)v57);
    }
    else
    {
      swift_beginAccess();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v50[0] = *v46;
      uint64_t v10 = v50[0];
      *uint64_t v46 = 0x8000000000000000;
      unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
      uint64_t v13 = *(void *)(v10 + 16);
      BOOL v14 = (v11 & 1) == 0;
      uint64_t v15 = v13 + v14;
      if (__OFADD__(v13, v14)) {
        goto LABEL_39;
      }
      if (*(void *)(v10 + 24) >= v15)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          unint64_t v43 = v12;
          char v39 = v11;
          specialized _NativeDictionary.copy()();
          char v11 = v39;
          unint64_t v12 = v43;
        }
      }
      else
      {
        char v37 = v11;
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
        unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
        int v18 = v17 & 1;
        char v11 = v37;
        if ((v37 & 1) != v18) {
          goto LABEL_43;
        }
        unint64_t v12 = v16;
      }
      uint64_t v19 = (void *)v50[0];
      if (v11)
      {
        *(void *)(*(void *)(v50[0] + 56) + 8 * v12) = v5;
      }
      else
      {
        *(void *)(v50[0] + 8 * (v12 >> 6) + 64) |= 1 << v12;
        uint64_t v20 = 8 * v12;
        *(void *)(v19[6] + v20) = v7;
        *(void *)(v19[7] + v20) = v5;
        uint64_t v21 = v19[2];
        BOOL v22 = __OFADD__(v21, 1);
        uint64_t v23 = v21 + 1;
        if (v22) {
          goto LABEL_41;
        }
        v19[2] = v23;
      }
      *uint64_t v46 = v19;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_beginAccess();
      char v42 = swift_isUniquelyReferenced_nonNull_native();
      v50[0] = *v45;
      uint64_t v24 = v50[0];
      *BOOL v45 = 0x8000000000000000;
      unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      uint64_t v27 = *(void *)(v24 + 16);
      BOOL v28 = (v25 & 1) == 0;
      uint64_t v29 = v27 + v28;
      if (__OFADD__(v27, v28)) {
        goto LABEL_40;
      }
      if (*(void *)(v24 + 24) >= v29)
      {
        if (v42)
        {
          uint64_t v32 = (void *)v50[0];
          if (v25) {
            goto LABEL_30;
          }
        }
        else
        {
          char v40 = v25;
          unint64_t v44 = v26;
          specialized _NativeDictionary.copy()();
          unint64_t v26 = v44;
          uint64_t v32 = (void *)v50[0];
          if (v40) {
            goto LABEL_30;
          }
        }
      }
      else
      {
        char v38 = v25;
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v29, v42);
        unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
        if ((v38 & 1) != (v31 & 1)) {
          goto LABEL_43;
        }
        unint64_t v26 = v30;
        uint64_t v32 = (void *)v50[0];
        if (v38)
        {
LABEL_30:
          *(void *)(v32[7] + 8 * v26) = v7;
          goto LABEL_34;
        }
      }
      v32[(v26 >> 6) + 8] |= 1 << v26;
      uint64_t v33 = 8 * v26;
      *(void *)(v32[6] + v33) = v5;
      *(void *)(v32[7] + v33) = v7;
      uint64_t v34 = v32[2];
      BOOL v22 = __OFADD__(v34, 1);
      uint64_t v35 = v34 + 1;
      if (v22) {
        goto LABEL_42;
      }
      v32[2] = v35;
LABEL_34:
      *BOOL v45 = v32;
      swift_bridgeObjectRelease();
      swift_endAccess();
      outlined destroy of TabItem((uint64_t)v57);
      BOOL v22 = __OFADD__(v5++, 1);
      if (v22)
      {
        __break(1u);
        return (uint64_t)v47;
      }
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized static AdaptableTabView.makeIDToSelectionCache(items:selectionValueOnlyIncludesTabs:)(uint64_t a1, char a2)
{
  uint64_t v3 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return (uint64_t)v3;
  }
  uint64_t v5 = a1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v6 = 0;
  while (1)
  {
    outlined init with copy of TabItem(v5, (uint64_t)v52);
    outlined init with copy of TabItem((uint64_t)v52, (uint64_t)&v46);
    if (a2)
    {
      uint64_t v39 = v51;
      char v8 = ViewTraitCollection.isAuxiliaryContent.getter();
      outlined init with copy of TabItem((uint64_t)&v46, (uint64_t)&v39);
      if (v8)
      {
        outlined destroy of TabItem((uint64_t)&v39);
        outlined init with copy of TabItem((uint64_t)&v46, (uint64_t)v36);
LABEL_21:
        outlined destroy of TabItem((uint64_t)v36);
        outlined destroy of TabItem((uint64_t)&v46);
LABEL_22:
        outlined destroy of TabItem((uint64_t)v52);
        goto LABEL_5;
      }
      v36[0] = v45;
      char v38 = 0;
      ViewTraitCollection.value<A>(for:defaultValue:)();
      outlined destroy of TabItem((uint64_t)&v39);
      outlined init with copy of TabItem((uint64_t)&v46, (uint64_t)v36);
      if (v35) {
        goto LABEL_21;
      }
      char v35 = v37;
      ViewTraitCollection.value<A>(for:defaultValue:)();
      char v31 = v38;
      outlined destroy of TabItem((uint64_t)v36);
      outlined destroy of TabItem((uint64_t)&v46);
      if (v31) {
        goto LABEL_22;
      }
    }
    else
    {
      outlined destroy of TabItem((uint64_t)&v46);
    }
    uint64_t v46 = v54;
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v11 = v10;
    unint64_t v12 = v53;
    v36[0] = v53;
    uint64_t v13 = one-time initialization token for defaultValue;
    swift_bridgeObjectRetain();
    if (v13 != -1) {
      swift_once();
    }
    LOWORD(v39) = static TabOptions.TraitKey.defaultValue;
    BYTE2(v39) = byte_1E90FC582;
    long long v40 = *(_OWORD *)&qword_1E90FC588;
    __int16 v41 = word_1E90FC598;
    char v42 = byte_1E90FC59A;
    uint64_t v43 = qword_1E90FC5A0;
    __int16 v44 = word_1E90FC5A8;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    char v14 = v50;
    outlined consume of TabCustomizationID?(v47, v48, v49);
    swift_bridgeObjectRelease();
    if (v14)
    {
      uint64_t v46 = v12;
      if ((ViewTraitCollection.isAuxiliaryContent.getter() & 1) == 0
        && (TabItem.needsCustomizationIDForEnablement.getter() & 1) != 0)
      {
        uint64_t v33 = v9;
        v36[0] = v12;
        LOWORD(v39) = static TabOptions.TraitKey.defaultValue;
        BYTE2(v39) = byte_1E90FC582;
        long long v40 = *(_OWORD *)&qword_1E90FC588;
        __int16 v41 = word_1E90FC598;
        char v42 = byte_1E90FC59A;
        uint64_t v43 = qword_1E90FC5A0;
        __int16 v44 = word_1E90FC5A8;
        ViewTraitCollection.value<A>(for:defaultValue:)();
        uint64_t v15 = v47;
        uint64_t v16 = v48;
        int v17 = v49;
        outlined copy of TabCustomizationID?(v47, v48, v49);
        outlined consume of TabCustomizationID?(v15, v16, v17);
        swift_bridgeObjectRelease();
        if (v17 == 255)
        {
          uint64_t v9 = v33;
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v9 = v15;
          uint64_t v11 = v16;
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      if (one-time initialization token for searchPlatformIdentifier != -1) {
        swift_once();
      }
      uint64_t v9 = static TabItem.searchPlatformIdentifier;
      uint64_t v11 = unk_1E90FC510;
      swift_bridgeObjectRetain();
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v46 = v3;
    uint64_t v19 = v9;
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v11);
    uint64_t v22 = v3[2];
    BOOL v23 = (v20 & 1) == 0;
    uint64_t v24 = v22 + v23;
    if (__OFADD__(v22, v23)) {
      break;
    }
    char v25 = v20;
    if (v3[3] >= v24)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
      uint64_t v3 = v46;
      if (v25) {
        goto LABEL_3;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native);
      unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v11);
      if ((v25 & 1) != (v27 & 1)) {
        goto LABEL_41;
      }
      unint64_t v21 = v26;
      uint64_t v3 = v46;
      if (v25)
      {
LABEL_3:
        *(void *)(v3[7] + 8 * v21) = v6;
        goto LABEL_4;
      }
    }
    v3[(v21 >> 6) + 8] |= 1 << v21;
    BOOL v28 = (uint64_t *)(v3[6] + 16 * v21);
    *BOOL v28 = v19;
    v28[1] = v11;
    *(void *)(v3[7] + 8 * v21) = v6;
    uint64_t v29 = v3[2];
    BOOL v7 = __OFADD__(v29, 1);
    uint64_t v30 = v29 + 1;
    if (v7) {
      goto LABEL_40;
    }
    v3[2] = v30;
    swift_bridgeObjectRetain();
LABEL_4:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of TabItem((uint64_t)v52);
    BOOL v7 = __OFADD__(v6++, 1);
    if (v7) {
      goto LABEL_39;
    }
LABEL_5:
    v5 += 104;
    if (!--v4)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v3;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t outlined init with take of TabItem?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

void type metadata accessor for (offset: Int, element: TabItem)?(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    type metadata accessor for (offset: Int, element: TabItem)(255, a3);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for (offset: Int, element: TabItem)(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void type metadata accessor for (header: TabItem?, children: [TabEntry], actions: [TabItem], compactItem: TabItem?)()
{
  if (!lazy cache variable for type metadata for (header: TabItem?, children: [TabEntry], actions: [TabItem], compactItem: TabItem?))
  {
    MEMORY[0x1F4188790](0);
    type metadata accessor for Binding<Visibility>(255, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, MEMORY[0x1E4FBB718]);
    uint64_t v0 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB320];
    type metadata accessor for Binding<Visibility>(255, &lazy cache variable for type metadata for [TabEntry], (uint64_t)&type metadata for TabEntry, MEMORY[0x1E4FBB320]);
    type metadata accessor for Binding<Visibility>(255, &lazy cache variable for type metadata for [TabItem], (uint64_t)&type metadata for TabItem, v0);
    unint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v2) {
      atomic_store(TupleTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for (header: TabItem?, children: [TabEntry], actions: [TabItem], compactItem: TabItem?));
    }
  }
}

void type metadata accessor for Binding<Visibility>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined init with copy of TabItemGroup(uint64_t a1, uint64_t a2)
{
  return a2;
}

Swift::Bool __swiftcall DragReorderableDelegate.isReorderingAllowed(at:)(Swift::Int at)
{
  return 1;
}

Swift::Bool __swiftcall DragReorderableDelegate.hasDragSourceProxy(at:)(Swift::Int at)
{
  return 0;
}

Swift::Int __swiftcall DragReorderableDelegate.targetDropDestinationIndex(from:destinationIndex:)(Swift::Int_optional from, Swift::Int destinationIndex)
{
  return destinationIndex;
}

{
  return destinationIndex;
}

uint64_t dispatch thunk of DragReorderableDelegate.onDropTargeted(itemProviders:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of DragReorderableDelegate.onItemInserted(at:itemProviders:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of DragReorderableDelegate.onDropEnded()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of DragReorderableDelegate.isReorderingAllowed(at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of DragReorderableDelegate.hasDragSourceProxy(at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of DragReorderableDelegate.itemProvider(at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of DragReorderableDelegate.onDragBegan(at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of DragReorderableDelegate.targetDropDestinationIndex(from:destinationIndex:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, void))(a5 + 64))(a1, a2 & 1);
}

uint64_t dispatch thunk of DragReorderableDelegate.onDropUpdated(location:sourceIndex:destinationIndex:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, void))(a5 + 72))(a1, a2 & 1);
}

uint64_t dispatch thunk of DragReorderableDelegate.onItemMoved(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t dispatch thunk of DragReorderableDelegate.onDragEnded()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t type metadata accessor for DragReorderableChildResponder()
{
  uint64_t result = type metadata singleton initialization cache for DragReorderableChildResponder;
  if (!type metadata singleton initialization cache for DragReorderableChildResponder) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for DragReorderableChildResponder()
{
  return swift_initClassMetadata2();
}

uint64_t DragReorderableLayoutAdaptor.init(root:content:padding:contentTypes:spacing:delegate:containerID:placeholderID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, long long *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, uint64_t a14, uint64_t a15)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a14 - 8) + 32))(a9, a1, a14);
  char v25 = (int *)type metadata accessor for DragReorderableLayoutAdaptor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a15 - 8) + 32))(a9 + v25[17], a2, a15);
  unint64_t v26 = (double *)(a9 + v25[18]);
  *unint64_t v26 = a10;
  v26[1] = a11;
  v26[2] = a12;
  v26[3] = a13;
  *(void *)(a9 + v25[19]) = a3;
  uint64_t v27 = a9 + v25[20];
  *(void *)uint64_t v27 = a4;
  *(unsigned char *)(v27 + 8) = a5 & 1;
  uint64_t result = outlined init with take of OptionalBinaryInteger(a6, a9 + v25[21]);
  *(void *)(a9 + v25[22]) = a7;
  *(void *)(a9 + v25[23]) = a8;
  return result;
}

uint64_t static DragReorderableLayoutView._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  int v32 = *a1;
  unsigned int v23 = *(_DWORD *)(a2 + 24);
  int v24 = *(_DWORD *)(a2 + 8);
  unsigned int v21 = *(_DWORD *)(a2 + 32);
  unsigned int v22 = *(_DWORD *)(a2 + 28);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 48);
  unsigned int v7 = *(_DWORD *)(a2 + 56);
  unsigned int v8 = *(_DWORD *)(a2 + 60);
  unsigned int v9 = *(_DWORD *)(a2 + 64);
  unsigned int v27 = *(_DWORD *)(a2 + 68);
  unsigned int v28 = *(_DWORD *)(a2 + 36);
  unsigned int v10 = *(_DWORD *)(a2 + 72);
  int v25 = *(_DWORD *)(a2 + 80);
  unsigned int v26 = *(_DWORD *)(a2 + 76);
  uint64_t v29 = *(void *)(a2 + 16);
  unint64_t v53 = *(void *)a2;
  uint64_t v55 = v29;
  int v54 = v24;
  *(void *)&long long v56 = __PAIR64__(v22, v23);
  *(void *)&long long v57 = v6;
  *((void *)&v57 + 1) = v5;
  *((void *)&v56 + 1) = __PAIR64__(v28, v21);
  *(void *)&long long v58 = __PAIR64__(v8, v7);
  *((void *)&v58 + 1) = __PAIR64__(v27, v9);
  unint64_t v59 = __PAIR64__(v26, v10);
  int v60 = v25;
  LODWORD(v45) = _ViewInputs.transform.getter();
  uint64_t v43 = type metadata accessor for DragReorderableLayoutView.ChildTransform();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Binding<_DragReorderableView_DragState>(0, &lazy cache variable for type metadata for Attribute<ViewTransform>, MEMORY[0x1E4F3F808], MEMORY[0x1E4F4E740]);
  uint64_t v12 = v11;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v13 = MEMORY[0x1E4FBC248];
  uint64_t v14 = MEMORY[0x1E4FBC278];
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v45, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_17, (uint64_t)v42, v43, MEMORY[0x1E4FBC248], v12, MEMORY[0x1E4FBC278], v15);
  _ViewInputs.transform.setter();
  uint64_t v40 = a3;
  uint64_t v41 = a4;
  LODWORD(v45) = v32;
  type metadata accessor for DragReorderableLayoutView();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue();
  LODWORD(v12) = _GraphValue.value.getter();
  unint64_t v45 = v53;
  uint64_t v47 = v55;
  long long v48 = v56;
  long long v49 = v57;
  long long v50 = v58;
  unint64_t v51 = v59;
  int v46 = v54;
  int v52 = v60;
  unsigned int v16 = _ViewInputs.transform.getter();
  int v17 = *MEMORY[0x1E4F4E7A0];
  unint64_t v45 = __PAIR64__(v16, v12);
  int v46 = v17;
  uint64_t Coordinator = type metadata accessor for DragReorderableLayoutView.MakeCoordinator();
  uint64_t v39 = swift_getWitnessTable();
  _sSay7SwiftUI13ViewResponderCGMaTm_3(0, &lazy cache variable for type metadata for Attribute<DragReorderableLayoutCoordinator>, (uint64_t (*)(uint64_t))type metadata accessor for DragReorderableLayoutCoordinator, MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v45, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_17, (uint64_t)v37, Coordinator, v13, v18, v14, v19);
  type metadata accessor for DragReorderableLayoutCore();
  unint64_t v45 = __PAIR64__(v34, v12);
  type metadata accessor for DragReorderableLayoutView.MakeCore();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  unint64_t v45 = v53;
  uint64_t v47 = v55;
  long long v48 = v56;
  long long v49 = v57;
  long long v50 = v58;
  unint64_t v51 = v59;
  int v46 = v54;
  int v52 = v60;
  swift_getWitnessTable();
  static View.makeDebuggableView(view:inputs:)();
  AGGraphMutateAttribute();
  *(void *)a5 = v34;
  *(_DWORD *)(a5 + 8) = v35;
  *(_DWORD *)(a5 + 12) = v36;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #2 in static DragReorderableLayoutView._makeView(view:inputs:)(uint64_t a1)
{
  int v2 = _ViewOutputs.viewResponders()();
  uint64_t result = type metadata accessor for DragReorderableLayoutView.MakeCoordinator();
  *(_DWORD *)(a1 + 8) = v2;
  return result;
}

char **DragReorderableLayoutView.MakeCoordinator.updateValue()(uint64_t a1)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)&long long v91 = swift_getAssociatedTypeWitness();
  *((void *)&v91 + 1) = swift_getAssociatedTypeWitness();
  *(void *)uint64_t v92 = swift_getAssociatedTypeWitness();
  *(void *)&v92[8] = swift_getAssociatedConformanceWitness();
  *(void *)&v92[16] = swift_getAssociatedConformanceWitness();
  *(void *)&v92[24] = swift_getAssociatedConformanceWitness();
  uint64_t v3 = (int *)type metadata accessor for DragReorderableLayoutAdaptor();
  uint64_t v88 = *((void *)v3 - 1);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  __int16 v83 = (void (*)(char *, int *))((char *)&v70 - v7);
  MEMORY[0x1F4188790](v8);
  unsigned int v10 = (char *)&v70 - v9;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v70 - v12;
  uint64_t v14 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v84 = (void (*)(char *, uint64_t, uint64_t))((char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v17);
  unint64_t v82 = (void (*)(char *, uint64_t))((char *)&v70 - v18);
  MEMORY[0x1F4188790](v19);
  uint64_t v81 = (char *)&v70 - v20;
  MEMORY[0x1F4188790](v21);
  unsigned int v23 = (char *)&v70 - v22;
  MEMORY[0x1F4188790](v24);
  unsigned int v26 = (char *)&v70 - v25;
  uint64_t v87 = type metadata accessor for DragReorderableLayoutCoordinator();
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue) {
    goto LABEL_13;
  }
  uint64_t v28 = *OutputValue;
  uint64_t Value = AGGraphGetValue();
  uint64_t v30 = v14;
  char v31 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v14 += 16;
  uint64_t v84 = v31;
  v31(v26, Value, v1);
  unsigned int v23 = (char *)(v2 + 64);
  int v32 = *(void (**)(uint64_t, uint64_t))(v2 + 64);
  swift_retain();
  unint64_t v85 = v32;
  v32(v1, v2);
  uint64_t v33 = *(void (**)(char *, uint64_t))(v30 + 8);
  uint64_t v86 = v30 + 8;
  unint64_t v82 = v33;
  v33(v26, v1);
  uint64_t v34 = *(void *)&v13[v3[22]];
  uint64_t v35 = v88 + 8;
  __int16 v83 = *(void (**)(char *, int *))(v88 + 8);
  v83(v13, v3);
  *(void *)(v28 + 16) = v34;
  swift_release();
  uint64_t result = (char **)AGGraphGetOutputValue();
  if (!result)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v37 = *result;
  uint64_t v38 = AGGraphGetValue();
  v84(v26, v38, v1);
  swift_retain();
  v85(v1, v2);
  v82(v26, v1);
  uint64_t v39 = *(void *)&v13[v3[19]];
  swift_bridgeObjectRetain();
  uint64_t v88 = v35;
  v83(v13, v3);
  *((void *)v37 + 3) = v39;
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t result = (char **)AGGraphGetOutputValue();
  if (!result)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v40 = *result;
  uint64_t v41 = AGGraphGetValue();
  v84(v26, v41, v1);
  swift_retain();
  v85(v1, v2);
  v82(v26, v1);
  char v42 = &v13[v3[20]];
  unsigned int v10 = *(char **)v42;
  char v43 = v42[8];
  v83(v13, v3);
  *((void *)v40 + 4) = v10;
  v40[40] = v43;
  swift_release();
  uint64_t result = (char **)AGGraphGetOutputValue();
  if (!result)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  __int16 v44 = *result;
  uint64_t v45 = AGGraphGetValue();
  v84(v26, v45, v1);
  swift_retain();
  v85(v1, v2);
  v82(v26, v1);
  outlined init with copy of TableColumnList((uint64_t)&v13[v3[21]], (uint64_t)&v91);
  v83(v13, v3);
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v44 + 48));
  outlined init with take of OptionalBinaryInteger(&v91, (uint64_t)(v44 + 48));
  swift_endAccess();
  swift_release();
  uint64_t result = (char **)AGGraphGetOutputValue();
  if (!result)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  unsigned int v26 = *result;
  uint64_t v5 = (char *)*(unsigned int *)(v89 + 4);
  unsigned int v46 = *(_DWORD *)(v89 + 8);
  BOOL v47 = *MEMORY[0x1E4F4E7A0] == v46;
  if (*MEMORY[0x1E4F4E7A0] == v46) {
    unsigned int v46 = 0;
  }
  if (v47) {
    uint64_t v1 = *MEMORY[0x1E4F4E7A0];
  }
  else {
    uint64_t v1 = v46;
  }
  swift_retain();
  *((void *)v26 + 11) = AGCreateWeakAttribute();
  swift_release();
  uint64_t result = (char **)AGGraphGetOutputValue();
  if (result) {
    goto LABEL_14;
  }
  __break(1u);
LABEL_13:
  uint64_t v48 = AGGraphGetValue();
  uint64_t v73 = v10;
  uint64_t v71 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v49 = v14 + 16;
  v71(v26, v48, v1);
  uint64_t v74 = v5;
  uint64_t v77 = *(void (**)(uint64_t, uint64_t))(v2 + 64);
  uint64_t v80 = v2 + 64;
  v77(v1, v2);
  long long v50 = *(void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v86 = v14 + 8;
  uint64_t v79 = v50;
  v50(v26, v1);
  uint64_t v76 = *(void *)&v13[v3[22]];
  unint64_t v85 = *(void (**)(uint64_t, uint64_t))(v88 + 8);
  v88 += 8;
  v85((uint64_t)v13, (uint64_t)v3);
  uint64_t v51 = AGGraphGetValue();
  int v52 = v71;
  v71(v23, v51, v1);
  unint64_t v53 = v73;
  int v54 = v77;
  v77(v1, v2);
  uint64_t v55 = v81;
  uint64_t v78 = v2;
  v79(v23, v1);
  uint64_t v75 = *(void *)&v53[v3[19]];
  swift_bridgeObjectRetain();
  v85((uint64_t)v53, (uint64_t)v3);
  uint64_t v56 = AGGraphGetValue();
  v52(v55, v56, v1);
  uint64_t v72 = v49;
  long long v57 = v83;
  v54(v1, v78);
  long long v58 = v79;
  v79(v55, v1);
  unint64_t v59 = (char *)v57 + v3[20];
  uint64_t v73 = *(char **)v59;
  LODWORD(v81) = v59[8];
  v85((uint64_t)v57, (uint64_t)v3);
  uint64_t v60 = AGGraphGetValue();
  uint64_t v61 = (char *)v82;
  v52((char *)v82, v60, v1);
  long long v62 = v74;
  uint64_t v63 = v78;
  v77(v1, v78);
  v58(v61, v1);
  outlined init with copy of TableColumnList((uint64_t)&v62[v3[21]], (uint64_t)v90);
  v85((uint64_t)v62, (uint64_t)v3);
  uint64_t v64 = AGGraphGetValue();
  uint64_t v65 = (char *)v84;
  v52((char *)v84, v64, v1);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v63 + 72))(&v91, v1, v63);
  v58(v65, v1);
  uint64_t v66 = swift_allocObject();
  *(void *)(v66 + 32) = 0;
  *(unsigned char *)(v66 + 40) = 1;
  *(void *)(v66 + 152) = 0;
  *(unsigned char *)(v66 + 160) = 1;
  *(_OWORD *)(v66 + 168) = 0u;
  *(_OWORD *)(v66 + 184) = 0u;
  *(_OWORD *)(v66 + 200) = 0u;
  *(unsigned char *)(v66 + 216) = 1;
  *(void *)(v66 + 224) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(_DWORD *)(v66 + 232) = 0;
  uint64_t v67 = v75;
  *(void *)(v66 + 16) = v76;
  *(void *)(v66 + 24) = v67;
  *(void *)(v66 + 32) = v73;
  *(unsigned char *)(v66 + 40) = (_BYTE)v81;
  outlined init with copy of TableColumnList((uint64_t)v90, v66 + 48);
  long long v68 = *(_OWORD *)v92;
  *(_OWORD *)(v66 + 104) = v91;
  *(_OWORD *)(v66 + 120) = v68;
  *(_OWORD *)(v66 + 129) = *(_OWORD *)&v92[9];
  *(void *)(v66 + 88) = 0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
  *(void *)(v66 + 96) = 0;
  v90[0] = v66;
  AGGraphSetOutputValue();
  swift_release();
  uint64_t result = (char **)AGGraphGetOutputValue();
  if (result)
  {
LABEL_14:
    id v69 = *result;
    swift_retain();
    *((void *)v69 + 12) = AGCreateWeakAttribute();
    return (char **)swift_release();
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t DragReorderableLayoutView.ChildTransform.transform.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  *(void *)a1 = *(void *)Value;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(Value + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(Value + 24);

  return swift_retain();
}

uint64_t DragReorderableLayoutView.ChildTransform.value.getter@<X0>(uint64_t a1@<X8>)
{
  DragReorderableLayoutView.ChildTransform.transform.getter(a1);
  lazy protocol witness table accessor for type ReorderableLayoutCoordinateSpace and conformance ReorderableLayoutCoordinateSpace();
  AnyHashable.init<A>(_:)();
  ViewTransform.appendCoordinateSpace(name:)();
  return outlined destroy of AnyHashable((uint64_t)v2);
}

uint64_t protocol witness for Rule.value.getter in conformance DragReorderableLayoutView<A>.ChildTransform@<X0>(uint64_t a1@<X8>)
{
  return DragReorderableLayoutView.ChildTransform.value.getter(a1);
}

uint64_t DragReorderableLayoutView.MakeCore.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v35 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v34 = (char *)&v32 - v7;
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = swift_getAssociatedConformanceWitness();
  uint64_t v12 = swift_getAssociatedConformanceWitness();
  *(void *)&long long v36 = v8;
  *((void *)&v36 + 1) = v9;
  uint64_t v37 = AssociatedTypeWitness;
  uint64_t v38 = AssociatedConformanceWitness;
  uint64_t v39 = v11;
  uint64_t v40 = v12;
  uint64_t v13 = type metadata accessor for DragReorderableLayoutAdaptor();
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v33 = (uint64_t)&v32 - v14;
  uint64_t v15 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v32 - v20;
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v32 - v23;
  uint64_t Value = AGGraphGetValue();
  unsigned int v26 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v26(v24, Value, a1);
  (*(void (**)(uint64_t, uint64_t))(a2 + 64))(a1, a2);
  unsigned int v27 = *(void (**)(char *, uint64_t))(v15 + 8);
  v27(v24, a1);
  AGGraphClearUpdate();
  closure #1 in DragReorderableLayoutView.MakeCore.value.getter(&v36);
  AGGraphSetUpdate();
  uint64_t v32 = v36;
  uint64_t v28 = AGGraphGetValue();
  v26(v21, v28, a1);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(a2 + 72))(&v36, a1, a2);
  v27(v21, a1);
  uint64_t v29 = AGGraphGetValue();
  v26(v18, v29, a1);
  uint64_t v30 = (uint64_t)v34;
  (*(void (**)(uint64_t, uint64_t))(a2 + 80))(a1, a2);
  v27(v18, a1);
  return DragReorderableLayoutCore.init(adaptor:coordinator:state:placeholder:)(v33, v32, &v36, v30, v35);
}

uint64_t closure #1 in DragReorderableLayoutView.MakeCore.value.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for DragReorderableLayoutCoordinator();
  *a1 = *(void *)AGGraphGetValue();

  return swift_retain();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance DragReorderableLayoutView<A>.MakeCore@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for DragReorderableLayoutCore();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance DragReorderableLayoutView<A>.MakeCore@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DragReorderableLayoutView.MakeCore.value.getter(*(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance DragReorderableLayoutView<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static DragReorderableLayoutView._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance DragReorderableLayoutView<A>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance DragReorderableLayoutView<A>()
{
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance DragReorderableLayoutView<A>()
{
}

uint64_t DragReorderableLayoutCore.children.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v64 = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v52 = a1;
  uint64_t v5 = v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v65 = AssociatedTypeWitness;
  uint64_t v66 = MEMORY[0x1E4FBB550];
  uint64_t v67 = AssociatedConformanceWitness;
  unint64_t v68 = MEMORY[0x1E4FBB560];
  type metadata accessor for IDView();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v63 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v62 = (uint64_t)&v46 - v7;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v75 = &protocol witness table for HiddenModifierAllowingViewResponders;
  uint64_t v72 = swift_getWitnessTable();
  uint64_t v73 = &protocol witness table for DragReorderableChildModifier;
  uint64_t v71 = swift_getWitnessTable();
  uint64_t v59 = v6;
  swift_getWitnessTable();
  uint64_t v58 = type metadata accessor for DropPlaceholderListModifier();
  uint64_t v61 = *(void *)(v58 - 8);
  MEMORY[0x1F4188790](v58);
  uint64_t v55 = (char *)&v46 - v8;
  uint64_t v9 = *(void *)(a1 - 8);
  uint64_t v51 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = v5;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v47 = *(void *)(v14 - 8);
  uint64_t v15 = v47;
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v46 - v16;
  unsigned int v46 = (char *)&v46 - v16;
  type metadata accessor for _ConditionalContent<ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, MappedViewElement.Placeholder>(255, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, MappedViewElement.Placeholder>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, (uint64_t)&type metadata for MappedViewElement.Placeholder, MEMORY[0x1E4F40578]);
  uint64_t v19 = v18;
  uint64_t v50 = v18;
  uint64_t v20 = swift_getAssociatedConformanceWitness();
  unint64_t v49 = lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, MappedViewElement.Placeholder> and conformance <> _ConditionalContent<A, B>();
  uint64_t v65 = v14;
  uint64_t v66 = v19;
  uint64_t v67 = v20;
  unint64_t v68 = v49;
  uint64_t v53 = type metadata accessor for MappedViews();
  uint64_t v54 = *(void *)(v53 - 8);
  MEMORY[0x1F4188790](v53);
  uint64_t v48 = (uint64_t)&v46 - v21;
  uint64_t v22 = swift_getAssociatedTypeWitness();
  uint64_t v23 = swift_getAssociatedConformanceWitness();
  uint64_t v65 = v22;
  uint64_t v66 = v14;
  uint64_t v67 = AssociatedTypeWitness;
  unint64_t v68 = v23;
  uint64_t v69 = v20;
  uint64_t v70 = AssociatedConformanceWitness;
  uint64_t v24 = type metadata accessor for DragReorderableLayoutAdaptor();
  uint64_t v25 = v60;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v60 + *(int *)(v24 + 68), v14);
  unsigned int v26 = v12;
  uint64_t v27 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v25, v52);
  unint64_t v28 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = v3;
  *(void *)(v29 + 24) = v13;
  unint64_t v30 = v29 + v28;
  uint64_t v31 = v27;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v30, v26, v27);
  uint64_t v32 = v48;
  uint64_t v33 = v46;
  View.map<A>(_:)((uint64_t)partial apply for closure #1 in DragReorderableLayoutCore.children.getter, v29, v14, v50, v20, v49, v48);
  swift_release();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v33, v14);
  uint64_t v34 = v62;
  DragReorderableLayoutCore.insertionPlaceholder.getter(v31, v62);
  uint64_t v35 = DragReorderableLayoutCore.state.getter();
  uint64_t v37 = v36;
  LOBYTE(v9) = v38 & 1;
  LOBYTE(v65) = v39 & 1;
  LOBYTE(v29) = v39 & 1;
  uint64_t v40 = v55;
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 32))(v55, v34, v59);
  uint64_t v41 = v58;
  char v42 = &v40[*(int *)(v58 + 36)];
  *(void *)char v42 = v35;
  v42[8] = v9;
  *((void *)v42 + 2) = v37;
  v42[24] = v29 & 1;
  uint64_t v43 = v53;
  uint64_t v44 = v41;
  MEMORY[0x18C113660](v40, v53);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v40, v44);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 8))(v32, v43);
}

uint64_t closure #1 in DragReorderableLayoutCore.children.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v7 = 0;
  char v8 = 1;
  uint64_t result = ViewTraitCollection.value<A>(for:defaultValue:)();
  if (v6 == 1)
  {
    *(unsigned char *)(a2 + 154) = 1;
  }
  else
  {
    uint64_t v4 = type metadata accessor for DragReorderableLayoutCore();
    DragReorderableLayoutCore.draggableView<A>(_:offset:)(v4, v5, v4, (uint64_t)&type metadata for MappedViewElement.Placeholder, (uint64_t)&protocol witness table for MappedViewElement.Placeholder, (uint64_t)&v5);
    outlined init with copy of ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>((uint64_t)&v5, a2, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>);
    *(unsigned char *)(a2 + 154) = 0;
    return outlined destroy of ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier>((uint64_t)&v5, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>);
  }
  return result;
}

uint64_t DragReorderableLayoutCore.draggableView<A>(_:offset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v86 = a4;
  uint64_t v87 = a5;
  uint64_t v77 = a1;
  uint64_t v80 = a6;
  type metadata accessor for Binding<_DragReorderableView_DragState>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F411E8]);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v78 = v10;
  uint64_t v79 = v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v76 = (char *)v65 - v12;
  uint64_t v88 = *(void **)(a3 - 8);
  uint64_t v13 = v88[8];
  MEMORY[0x1F4188790](v14);
  uint64_t v75 = (char *)v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v69 = (char *)v65 - v16;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)v65 - v18;
  uint64_t v20 = *(void *)(v6 + *(int *)(a3 + 36)) + 48;
  swift_beginAccess();
  outlined init with copy of TableColumnList(v20, (uint64_t)&v91);
  uint64_t v21 = v93;
  uint64_t v22 = v94;
  __swift_project_boxed_opaque_existential_1(&v91, (uint64_t)v93);
  uint64_t v23 = *(uint64_t (**)(uint64_t, void *, uint64_t))(v22 + 32);
  uint64_t v85 = a2;
  int v73 = v23(a2, v21, v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v91);
  swift_beginAccess();
  outlined init with copy of TableColumnList(v20, (uint64_t)&v91);
  uint64_t v24 = v93;
  uint64_t v25 = v94;
  __swift_project_boxed_opaque_existential_1(&v91, (uint64_t)v93);
  int v74 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(v25 + 40))(a2, v24, v25);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v91);
  unsigned int v26 = v88;
  uint64_t v27 = (void (*)(char *, uint64_t, uint64_t))v88[2];
  __int16 v83 = v88 + 2;
  uint64_t v84 = v27;
  uint64_t v28 = v7;
  uint64_t v68 = v7;
  v27(v19, v7, a3);
  uint64_t v29 = *((unsigned __int8 *)v26 + 80);
  uint64_t v30 = (v29 + 48) & ~v29;
  v65[1] = v30 + v13;
  uint64_t v81 = v29 | 7;
  uint64_t v82 = v30;
  unint64_t v31 = (v30 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v70 = v31;
  unint64_t v71 = v31 + 8;
  uint64_t v32 = (void *)swift_allocObject();
  uint64_t v33 = *(void *)(a3 + 16);
  uint64_t v34 = *(void *)(a3 + 24);
  uint64_t v35 = a3;
  uint64_t v37 = v86;
  uint64_t v36 = v87;
  v32[2] = v33;
  v32[3] = v37;
  v32[4] = v34;
  v32[5] = v36;
  char v38 = (char *)v32 + v30;
  uint64_t v72 = v32;
  char v39 = (void (*)(char *, char *))v88[4];
  v88 += 4;
  uint64_t v40 = v19;
  uint64_t v41 = v35;
  v39(v38, v40);
  uint64_t v66 = (void (*)(char *, char *, uint64_t))v39;
  uint64_t v67 = v41;
  *(void *)((char *)v32 + v31) = v85;
  char v42 = v69;
  uint64_t v43 = v28;
  uint64_t v44 = v41;
  v84(v69, v43, v41);
  uint64_t v45 = (void *)swift_allocObject();
  uint64_t v45[2] = v33;
  v45[3] = v37;
  v45[4] = v34;
  v45[5] = v36;
  ((void (*)(char *, char *, uint64_t))v39)((char *)v45 + v82, v42, v44);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v47 = swift_getAssociatedTypeWitness();
  uint64_t v48 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = (void *)swift_getAssociatedConformanceWitness();
  uint64_t v50 = swift_getAssociatedConformanceWitness();
  uint64_t v51 = swift_getAssociatedConformanceWitness();
  uint64_t v91 = AssociatedTypeWitness;
  v92[0] = v47;
  v92[1] = v48;
  uint64_t v93 = AssociatedConformanceWitness;
  uint64_t v94 = v50;
  uint64_t v95 = v51;
  uint64_t v52 = type metadata accessor for DragReorderableLayoutAdaptor();
  uint64_t v53 = v67;
  uint64_t v54 = *(void *)(v68 + *(int *)(v52 + 88));
  uint64_t v93 = &unk_1ED439158;
  uint64_t v55 = v85;
  uint64_t v91 = v54;
  v92[0] = v85;
  uint64_t v56 = v75;
  ((void (*)(char *))v84)(v75);
  long long v57 = (char *)swift_allocObject();
  uint64_t v58 = v86;
  *((void *)v57 + 2) = v33;
  *((void *)v57 + 3) = v58;
  *((void *)v57 + 4) = v34;
  uint64_t v59 = v87;
  *((void *)v57 + 5) = v87;
  v66(&v57[v82], v56, v53);
  *(void *)&v57[v70] = v55;
  v98[0] = v73 & 1;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  uint64_t v101 = partial apply for closure #1 in DragReorderableLayoutCore.draggableView<A>(_:offset:);
  uint64_t v102 = v72;
  v103 = partial apply for closure #2 in DragReorderableLayoutCore.draggableView<A>(_:offset:);
  uint64_t v104 = v45;
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  outlined init with take of Path?((uint64_t)&v91, (uint64_t)v107, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
  v107[4] = partial apply for closure #3 in DragReorderableLayoutCore.draggableView<A>(_:offset:);
  v107[5] = v57;
  swift_getKeyPath();
  LOBYTE(v91) = 1;
  uint64_t v60 = v76;
  View.environment<A>(_:_:)();
  swift_release();
  outlined init with copy of _DraggingModifier((uint64_t)v98, (uint64_t)v92);
  LOBYTE(v91) = v74 & 1;
  uint64_t v96 = v55;
  __int16 v97 = 0;
  unint64_t v61 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
  uint64_t v89 = v59;
  unint64_t v90 = v61;
  uint64_t v62 = v78;
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x18C113660](&v91, v62, &type metadata for DragReorderableChildModifier, WitnessTable);
  outlined destroy of DragReorderableChildModifier((uint64_t)&v91);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v60, v62);
  return outlined destroy of _DraggingModifier((uint64_t)v98);
}

uint64_t DragReorderableLayoutCore.insertionPlaceholder.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v55 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v57 = AssociatedTypeWitness;
  uint64_t v58 = MEMORY[0x1E4FBB550];
  uint64_t v41 = AssociatedConformanceWitness;
  uint64_t v59 = AssociatedConformanceWitness;
  uint64_t v60 = MEMORY[0x1E4FBB560];
  uint64_t v5 = type metadata accessor for IDView();
  uint64_t v42 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  v40[1] = (char *)v40 - v6;
  uint64_t v54 = v7;
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v46 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v43 = (char *)v40 - v9;
  uint64_t v53 = v10;
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v50 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v44 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v45 = (char *)v40 - v14;
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)v40 - v17;
  uint64_t v19 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v47 = (char *)v40 - v24;
  uint64_t v52 = type metadata accessor for Optional();
  uint64_t v49 = *(void *)(v52 - 8);
  MEMORY[0x1F4188790](v52);
  uint64_t v48 = (char *)v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v27 = MEMORY[0x1F4188790](v26);
  uint64_t v51 = (uint64_t)v40 - v28;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v18, v56 + *(int *)(a1 + 44), v15, v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1, AssociatedTypeWitness) != 1)
  {
    uint64_t v33 = v47;
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v47, v18, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v22, v33, AssociatedTypeWitness);
    uint64_t v34 = swift_getAssociatedTypeWitness();
    uint64_t v35 = swift_getAssociatedTypeWitness();
    uint64_t v36 = swift_getAssociatedConformanceWitness();
    uint64_t v37 = swift_getAssociatedConformanceWitness();
    uint64_t v57 = v34;
    uint64_t v58 = v35;
    uint64_t v59 = AssociatedTypeWitness;
    uint64_t v60 = v36;
    uint64_t v61 = v37;
    uint64_t v62 = v41;
    uint64_t v57 = *(void *)(v56 + *(int *)(type metadata accessor for DragReorderableLayoutAdaptor() + 92));
    IDView.init(_:id:)();
    swift_getWitnessTable();
    View.hiddenAllowingViewResponders()();
  }
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  uint64_t v29 = (uint64_t)v48;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56))(v48, 1, 1, v11);
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v71 = &protocol witness table for HiddenModifierAllowingViewResponders;
  uint64_t v68 = swift_getWitnessTable();
  uint64_t v69 = &protocol witness table for DragReorderableChildModifier;
  swift_getWitnessTable();
  uint64_t v30 = v51;
  static ToolbarContentBuilder.buildIf<A>(_:)(v29, v51);
  unint64_t v31 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
  uint64_t v32 = v29;
  uint64_t v38 = v52;
  v31(v32, v52);
  uint64_t v66 = swift_getWitnessTable();
  uint64_t v67 = &protocol witness table for HiddenModifierAllowingViewResponders;
  uint64_t v64 = swift_getWitnessTable();
  uint64_t v65 = &protocol witness table for DragReorderableChildModifier;
  uint64_t v63 = swift_getWitnessTable();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v30);
  return ((uint64_t (*)(uint64_t, uint64_t))v31)(v30, v38);
}

uint64_t DragReorderableLayoutCoordinator.dragBegan(at:)(uint64_t a1)
{
  type metadata accessor for Binding<_DragReorderableView_DragState>(0, &lazy cache variable for type metadata for Binding<_DragReorderableView_DragState>, (uint64_t)&type metadata for _DragReorderableView_DragState, MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v5);
  if ((v6 & 1) != 0 || v5 != a1)
  {
    *(_OWORD *)(v1 + 200) = 0u;
    *(_OWORD *)(v1 + 184) = 0u;
    *(_OWORD *)(v1 + 168) = 0u;
    *(unsigned char *)(v1 + 216) = 1;
  }
  static Transaction.current.getter();
  uint64_t v3 = Transaction.disablesAnimations.setter();
  MEMORY[0x1F4188790](v3);
  swift_retain();
  withTransaction<A>(_:_:)();
  swift_release();
  return swift_release();
}

uint64_t DragReorderableLayoutCoordinator.dragEnded()()
{
  uint64_t v1 = *(void *)(v0 + 136);
  char v2 = *(unsigned char *)(v0 + 144);
  uint64_t v11 = *(void *)(v0 + 112);
  uint64_t v14 = v1;
  char v15 = v2;
  type metadata accessor for Binding<_DragReorderableView_DragState>(0, &lazy cache variable for type metadata for Binding<_DragReorderableView_DragState>, (uint64_t)&type metadata for _DragReorderableView_DragState, MEMORY[0x1E4F41638]);
  uint64_t v4 = v3;
  swift_retain();
  swift_retain();
  MEMORY[0x18C113DA0](&v16, v4);
  uint64_t v10 = 0;
  LOBYTE(v11) = 1;
  uint64_t v12 = v18;
  LOBYTE(v13) = v19;
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  uint64_t v5 = *(void *)(v0 + 136);
  char v6 = *(unsigned char *)(v0 + 144);
  uint64_t v11 = *(void *)(v0 + 112);
  uint64_t v14 = v5;
  char v15 = v6;
  swift_retain();
  swift_retain();
  MEMORY[0x18C113DA0](&v16, v4);
  uint64_t v10 = v16;
  LOBYTE(v11) = v17;
  uint64_t v12 = 0;
  LOBYTE(v13) = 1;
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  *(void *)(v0 + 152) = 0;
  *(unsigned char *)(v0 + 160) = 1;
  *(_OWORD *)(v0 + 168) = 0u;
  *(_OWORD *)(v0 + 184) = 0u;
  *(_OWORD *)(v0 + 200) = 0u;
  *(unsigned char *)(v0 + 216) = 1;
  swift_beginAccess();
  outlined init with copy of TableColumnList(v0 + 48, (uint64_t)&v10);
  uint64_t v7 = v13;
  uint64_t v8 = v14;
  __swift_project_boxed_opaque_existential_1(&v10, v13);
  (*(void (**)(uint64_t, uint64_t))(v8 + 88))(v7, v8);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
}

uint64_t closure #3 in DragReorderableLayoutCore.draggableView<A>(_:offset:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Binding<_DragReorderableView_DragState>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<DraggingItem>, (uint64_t)&type metadata for DraggingItem, MEMORY[0x1E4FBBE00]);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18834BB80;
  uint64_t v5 = *(void *)(a1 + *(int *)(type metadata accessor for DragReorderableLayoutCore() + 36)) + 48;
  swift_beginAccess();
  outlined init with copy of TableColumnList(v5, (uint64_t)v10);
  uint64_t v6 = v11;
  uint64_t v7 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a2, v6, v7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  *(void *)(v4 + 32) = v8;
  v10[0] = v4;
  specialized Array._endMutation()();
  return v10[0];
}

uint64_t ConditionalDraggingModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  outlined init with copy of _DraggingModifier?(v1, (uint64_t)v4);
  if (*((void *)&v5 + 1))
  {
    v7[5] = v4[5];
    void v7[6] = v5;
    v7[0] = v4[0];
    v7[1] = v4[1];
    uint64_t v7[2] = v4[2];
    uint64_t v8 = v6;
    v7[3] = v4[3];
    v7[4] = v4[4];
    outlined init with copy of _DraggingModifier((uint64_t)v7, (uint64_t)v4);
    outlined init with copy of ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>((uint64_t)v4, a1, (uint64_t (*)(void))type metadata accessor for ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier>);
    *(unsigned char *)(a1 + 120) = 0;
    outlined destroy of ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier>((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier>);
    return outlined destroy of _DraggingModifier((uint64_t)v7);
  }
  else
  {
    uint64_t result = _sypSgWOhTm_5((uint64_t)v4, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier);
    *(unsigned char *)(a1 + 120) = 1;
  }
  return result;
}

uint64_t static DragSourceProxyModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  lazy protocol witness table accessor for type DragSourceProxyInput and conformance DragSourceProxyInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v5 == *MEMORY[0x1E4F4E7A0]) {
    return a3();
  }
  _GraphValue.init(_:)();
  lazy protocol witness table accessor for type ConditionalDraggingModifier and conformance ConditionalDraggingModifier();
  return static ViewModifier.makeDebuggableView(modifier:inputs:body:)();
}

void protocol witness for ViewModifier.body(content:) in conformance DragSourceProxyModifier()
{
}

uint64_t protocol witness for UnaryLayout.spacing(in:child:) in conformance ReorderableLayout()
{
  return LayoutProxy.spacing()();
}

uint64_t protocol witness for UnaryLayout.placement(of:in:) in conformance ReorderableLayout()
{
  return _Placement.init(proposedSize:at:)();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ReorderableLayout(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *a2;
  int v9 = *((_DWORD *)a2 + 2);
  uint64_t v10 = a2[2];
  int v11 = *((_DWORD *)a2 + 20);
  int v23 = *a1;
  uint64_t v15 = v8;
  int v16 = v9;
  uint64_t v17 = v10;
  long long v12 = *(_OWORD *)(a2 + 5);
  long long v18 = *(_OWORD *)(a2 + 3);
  long long v19 = v12;
  long long v20 = *(_OWORD *)(a2 + 7);
  uint64_t v21 = a2[9];
  int v22 = v11;
  unint64_t v13 = lazy protocol witness table accessor for type ReorderableLayout and conformance ReorderableLayout();
  return (*(uint64_t (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t))(v13 + 80))(&v23, &v15, a3, a4, a5, v13);
}

void protocol witness for ViewModifier.body(content:) in conformance ReorderableLayout()
{
}

double static DragReorderableChildModifier._makeView(modifier:inputs:body:)@<D0>(double *a1@<X8>)
{
  type metadata accessor for Binding<_DragReorderableView_DragState>(0, &lazy cache variable for type metadata for _GraphValue<DragReorderableChildModifier>, (uint64_t)&type metadata for DragReorderableChildModifier, MEMORY[0x1E4F3F590]);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphValue.value.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type DragReorderableChildModifier.MakeDragSourceProxy and conformance DragReorderableChildModifier.MakeDragSourceProxy();
  Attribute.init<A>(body:value:flags:update:)();
  lazy protocol witness table accessor for type DragSourceProxyInput and conformance DragSourceProxyInput();
  PropertyList.subscript.setter();
  _ViewInputs.transform.getter();
  _ViewInputs.animatedPosition()();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type DragReorderableChildModifier.ChildCoordinateSpace and conformance DragReorderableChildModifier.ChildCoordinateSpace();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.transform.setter();
  _GraphValue.value.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type DragReorderableChildModifier.MakeDragSource and conformance DragReorderableChildModifier.MakeDragSource();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  lazy protocol witness table accessor for type ConditionalDraggingModifier and conformance ConditionalDraggingModifier();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static ViewModifier.makeDebuggableView(modifier:inputs:body:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    _GraphValue.value.getter();
    _ViewInputs.animatedPosition()();
    _ViewOutputs.viewResponders()();
    type metadata accessor for DragReorderableChildResponder();
    uint64_t v1 = swift_allocObject();
    *(void *)(v1 + 216) = 0;
    *(unsigned char *)(v1 + 224) = 1;
    *(void *)(v1 + 232) = 0;
    *(void *)(v1 + 240) = 0;
    *(unsigned char *)(v1 + 248) = 0;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    DefaultLayoutViewResponder.init(inputs:)();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    _sSay7SwiftUI13ViewResponderCGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type DragReorderableChildModifier.ResponderFilter and conformance DragReorderableChildModifier.ResponderFilter();
    Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    _ViewOutputs.subscript.setter();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)a1 = v4;
  double result = v5;
  a1[1] = v5;
  return result;
}

uint64_t DragReorderableChildResponder.__allocating_init(inputs:)()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 216) = 0;
  *(unsigned char *)(v0 + 224) = 1;
  *(void *)(v0 + 232) = 0;
  *(void *)(v0 + 240) = 0;
  *(unsigned char *)(v0 + 248) = 0;
  return DefaultLayoutViewResponder.init(inputs:)();
}

uint64_t protocol witness for Rule.value.getter in conformance DragReorderableChildModifier.MakeDragSource@<X0>(uint64_t a1@<X8>)
{
  if (*(unsigned char *)AGGraphGetValue())
  {
    uint64_t v7 = 0;
    memset(v6, 0, sizeof(v6));
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    outlined init with copy of DragReorderableChildModifier(Value, (uint64_t)&v4);
    outlined init with take of Path?((uint64_t)&v5, (uint64_t)v6, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier);
  }
  return outlined init with take of Path?((uint64_t)v6, a1, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier);
}

double protocol witness for static Rule.initialValue.getter in conformance DragReorderableChildModifier.MakeDragSourceProxy@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)&double result = 1;
  *(_OWORD *)(a1 + 104) = xmmword_18834FC50;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance DragReorderableChildModifier.MakeDragSourceProxy@<X0>(uint64_t a1@<X8>)
{
  if (*(unsigned char *)AGGraphGetValue() == 1)
  {
    uint64_t Value = AGGraphGetValue();
    outlined init with copy of DragReorderableChildModifier(Value, (uint64_t)&v4);
    outlined init with take of Path?((uint64_t)&v5, (uint64_t)v6, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier);
  }
  else
  {
    uint64_t v7 = 0;
    memset(v6, 0, sizeof(v6));
  }
  return outlined init with take of Path?((uint64_t)v6, a1, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier);
}

uint64_t DragReorderableChildModifier.ResponderFilter.updateValue()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t Value = AGGraphGetValue();
  char v3 = *(unsigned char *)(Value + 136);
  *(void *)(v1 + 216) = *(void *)(Value + 128);
  *(unsigned char *)(v1 + 224) = v3;
  uint64_t v4 = AGGraphGetValue();
  *(double *)(v1 + 232) = MEMORY[0x18C10C240](v4, v5);
  *(void *)(v1 + 240) = v6;
  *(unsigned char *)(v1 + 248) = *(unsigned char *)(AGGraphGetValue() + 137);
  _sSay7SwiftUI13ViewResponderCGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  AGGraphGetValue();
  if (v7)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for Binding<_DragReorderableView_DragState>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_188351940;
    *(void *)(v9 + 32) = v1;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t DragReorderableChildModifier.ChildCoordinateSpace.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  *(void *)a1 = *(void *)Value;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(Value + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(Value + 24);
  v7[0] = *(_OWORD *)AGGraphGetValue();
  uint64_t v3 = swift_retain();
  *(double *)&unint64_t v4 = MEMORY[0x18C10C240](v3);
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v5, v4));
  lazy protocol witness table accessor for type ReorderableChildCoordinateSpace and conformance ReorderableChildCoordinateSpace();
  AnyHashable.init<A>(_:)();
  ViewTransform.appendCoordinateSpace(name:)();
  return outlined destroy of AnyHashable((uint64_t)v7);
}

uint64_t protocol witness for Rule.value.getter in conformance DragReorderableChildModifier.ChildCoordinateSpace@<X0>(uint64_t a1@<X8>)
{
  return DragReorderableChildModifier.ChildCoordinateSpace.value.getter(a1);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance DragReorderableChildModifier.ChildCoordinateSpace(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DragReorderableChildModifier.ChildCoordinateSpace and conformance DragReorderableChildModifier.ChildCoordinateSpace();

  return MEMORY[0x1F40FE388](a1, v2);
}

void protocol witness for ViewModifier.body(content:) in conformance DragReorderableChildModifier()
{
}

uint64_t DragReorderableChildResponder.__allocating_init(inputs:viewSubgraph:)()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 216) = 0;
  *(unsigned char *)(v0 + 224) = 1;
  *(void *)(v0 + 232) = 0;
  *(void *)(v0 + 240) = 0;
  *(unsigned char *)(v0 + 248) = 0;
  return DefaultLayoutViewResponder.init(inputs:viewSubgraph:)();
}

uint64_t DragReorderableChildResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for DragReorderableChildResponder()
{
  return type metadata accessor for DragReorderableChildResponder();
}

uint64_t type metadata completion function for DropPlaceholderListModifier.PlaceholderViews()
{
  return swift_initClassMetadata2();
}

uint64_t static DropPlaceholderListModifier._makeViewList(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  v58[9] = *MEMORY[0x1E4F143B8];
  int v33 = *a1;
  uint64_t v6 = *(void *)(a2 + 16);
  int v7 = *(_DWORD *)(a2 + 28);
  int v26 = *(_DWORD *)(a2 + 8);
  int v27 = *(_DWORD *)(a2 + 24);
  int v8 = *(_DWORD *)(a2 + 36);
  int v28 = *(_DWORD *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  int v12 = *(_DWORD *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  char v14 = *(unsigned char *)(a2 + 80);
  unint64_t v45 = *(void *)a2;
  int v46 = v26;
  uint64_t v47 = v6;
  unint64_t v29 = v45;
  int v48 = v27;
  int v49 = v7;
  int v15 = v7;
  int v30 = v7;
  int v50 = v28;
  int v51 = v8;
  int v16 = v8;
  int v32 = v8;
  uint64_t v52 = v10;
  uint64_t v53 = v9;
  uint64_t v17 = v10;
  uint64_t v31 = v10;
  uint64_t v18 = v9;
  uint64_t v54 = v11;
  int v55 = v12;
  uint64_t v56 = v13;
  char v57 = v14;
  a3(v58);
  unint64_t v45 = v29;
  int v46 = v26;
  uint64_t v47 = v6;
  int v48 = v27;
  int v49 = v15;
  int v50 = v28;
  int v51 = v16;
  uint64_t v52 = v17;
  uint64_t v53 = v18;
  uint64_t v54 = v11;
  int v55 = v12;
  uint64_t v56 = v13;
  char v57 = v14;
  unsigned int v24 = _ViewListOutputs.makeAttribute(inputs:)();
  uint64_t v42 = a4;
  uint64_t v43 = a5;
  LODWORD(v45) = v33;
  type metadata accessor for DropPlaceholderListModifier();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  unint64_t v45 = v29;
  int v46 = v26;
  uint64_t v47 = v6;
  int v48 = v27;
  int v49 = v30;
  int v50 = v28;
  int v51 = v32;
  uint64_t v52 = v31;
  uint64_t v53 = v18;
  uint64_t v54 = v11;
  int v55 = v12;
  uint64_t v56 = v13;
  char v57 = v14;
  static View.makeDebuggableViewList(view:inputs:)();
  unint64_t v45 = v29;
  int v46 = v26;
  uint64_t v47 = v6;
  int v48 = v27;
  int v49 = v30;
  int v50 = v28;
  int v51 = v32;
  uint64_t v52 = v31;
  uint64_t v53 = v18;
  uint64_t v54 = v11;
  int v55 = v12;
  uint64_t v56 = v13;
  char v57 = v14;
  unsigned int v19 = _ViewListOutputs.makeAttribute(inputs:)();
  uint64_t v40 = a4;
  uint64_t v41 = a5;
  LODWORD(v45) = v33;
  _GraphValue.subscript.getter();
  type metadata accessor for Binding<_DragReorderableView_DragState>(0, &lazy cache variable for type metadata for _GraphValue<_DragReorderableView_DragState>, (uint64_t)&type metadata for _DragReorderableView_DragState, MEMORY[0x1E4F3F590]);
  int v20 = _GraphValue.value.getter();
  unint64_t v45 = __PAIR64__(v19, v24);
  int v46 = v20;
  uint64_t List = type metadata accessor for DropPlaceholderListModifier.MakeList();
  uint64_t WitnessTable = swift_getWitnessTable();
  _sSay7SwiftUI13ViewResponderCGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewList>, (uint64_t (*)(uint64_t))type metadata accessor for ViewList, MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v45, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v37, List, MEMORY[0x1E4FBC248], v21, MEMORY[0x1E4FBC278], v22);
  *(_DWORD *)a6 = v36;
  *(void *)(a6 + 8) = 0;
  *(unsigned char *)(a6 + 40) = 1;
  *(void *)(a6 + 48) = v58[6];
  *(void *)(a6 + 56) = 0;
  *(unsigned char *)(a6 + 64) = 1;
  outlined destroy of _ViewListOutputs((uint64_t)v44);
  return outlined destroy of _ViewListOutputs((uint64_t)v58);
}

uint64_t closure #1 in static DragReorderableLayoutView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5)
{
  v11[2] = a4(0);
  v11[3] = a2;
  uint64_t v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a5, (uint64_t)v11, a2, MEMORY[0x1E4FBC248], v8, MEMORY[0x1E4FBC278], v9);
  return v11[5];
}

uint64_t closure #2 in static DropPlaceholderListModifier._makeViewList(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DropPlaceholderListModifier();
  uint64_t v3 = a1 + *(int *)(v2 + 36);
  uint64_t v7[2] = v2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, (uint64_t)&type metadata for _DragReorderableView_DragState, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t DropPlaceholderListModifier.MakeList.value.getter@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for ViewList();
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of TableColumnList(Value, (uint64_t)v12);
  uint64_t v3 = AGGraphGetValue();
  outlined init with copy of TableColumnList(v3, (uint64_t)v11);
  uint64_t v4 = AGGraphGetValue();
  uint64_t v5 = *(void *)v4;
  char v6 = *(unsigned char *)(v4 + 8);
  uint64_t v7 = *(void *)(v4 + 16);
  char v13 = *(unsigned char *)(v4 + 24);
  char v8 = v13;
  a1[3] = type metadata accessor for DropPlaceholderListModifier.DropPlaceholderList();
  a1[4] = swift_getWitnessTable();
  uint64_t v9 = swift_allocObject();
  *a1 = v9;
  char v13 = v8 & 1;
  outlined init with take of OptionalBinaryInteger(v12, v9 + 16);
  uint64_t result = outlined init with take of OptionalBinaryInteger(v11, v9 + 56);
  *(void *)(v9 + 96) = v5;
  *(unsigned char *)(v9 + 104) = v6;
  *(void *)(v9 + 112) = v7;
  *(unsigned char *)(v9 + 120) = v8 & 1;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance DropPlaceholderListModifier<A>.MakeList@<X0>(uint64_t *a1@<X8>)
{
  return DropPlaceholderListModifier.MakeList.value.getter(a1);
}

uint64_t DropPlaceholderListModifier.DropPlaceholderList.viewIDs.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 72);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 40), v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  if (v4)
  {
    uint64_t v5 = v4;
  }
  else
  {
    type metadata accessor for _ViewList_ID._Views<EmptyCollection<_ViewList_ID>>();
    uint64_t v5 = swift_allocObject();
    *(unsigned char *)(v5 + 16) = 0;
  }
  uint64_t v6 = *(void *)(v0 + 24);
  uint64_t v7 = *(void *)(v0 + 32);
  __swift_project_boxed_opaque_existential_1((void *)v0, v6);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
  if (v8 && (*(unsigned char *)(v0 + 104) & 1) == 0)
  {
    uint64_t v9 = *(void *)(v0 + 96);
    char v10 = *(unsigned char *)(v1 + 88);
    uint64_t v11 = *(void *)(v1 + 80);
    type metadata accessor for DropPlaceholderListModifier.PlaceholderViews();
    uint64_t v12 = specialized DropPlaceholderListModifier.PlaceholderViews.__allocating_init(base:placeholder:sourceIndex:destinationIndex:)(v8, v5, v11, v10, v9);
    swift_release();
    swift_release();
    return v12;
  }
  else
  {
    swift_release();
  }
  return v8;
}

uint64_t DropPlaceholderListModifier.DropPlaceholderList.count(style:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  __swift_project_boxed_opaque_existential_1((void *)v1, v3);
  uint64_t v10 = v2;
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 8))(&v10, v3, v4);
  uint64_t v6 = result;
  if ((*(unsigned char *)(v1 + 104) & 1) == 0
    && (uint64_t v7 = *(void *)(v1 + 64),
        uint64_t v8 = *(void *)(v1 + 72),
        __swift_project_boxed_opaque_existential_1((void *)(v1 + 40), v7),
        uint64_t v10 = v2,
        uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v8 + 8))(&v10, v7, v8),
        BOOL v9 = __OFADD__(v6, result),
        v6 += result,
        v9))
  {
    __break(1u);
  }
  else
  {
    if (*(unsigned char *)(v1 + 88)) {
      return v6;
    }
    BOOL v9 = __OFSUB__(v6--, 1);
    if (!v9) {
      return v6;
    }
  }
  __break(1u);
  return result;
}

uint64_t DropPlaceholderListModifier.DropPlaceholderList.estimatedCount(style:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  __swift_project_boxed_opaque_existential_1((void *)v1, v3);
  uint64_t v10 = v2;
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 16))(&v10, v3, v4);
  uint64_t v6 = result;
  if ((*(unsigned char *)(v1 + 104) & 1) == 0
    && (uint64_t v7 = *(void *)(v1 + 64),
        uint64_t v8 = *(void *)(v1 + 72),
        __swift_project_boxed_opaque_existential_1((void *)(v1 + 40), v7),
        uint64_t v10 = v2,
        uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v8 + 16))(&v10, v7, v8),
        BOOL v9 = __OFADD__(v6, result),
        v6 += result,
        v9))
  {
    __break(1u);
  }
  else
  {
    if (*(unsigned char *)(v1 + 88)) {
      return v6;
    }
    BOOL v9 = __OFSUB__(v6--, 1);
    if (!v9) {
      return v6;
    }
  }
  __break(1u);
  return result;
}

uint64_t DropPlaceholderListModifier.DropPlaceholderList.applyNodes(from:style:list:transform:to:)(uint64_t *a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *a2;
  uint64_t v10 = DropPlaceholderListModifier.DropPlaceholderList.indexRanges(from:)(*a1);
  uint64_t v11 = type metadata accessor for DropPlaceholderListModifier.DropPlaceholderList.IndexRange();
  if (MEMORY[0x18C115CB0](v10, v11))
  {
    uint64_t v12 = 0;
    char v13 = (char *)(v10 + 49);
    uint64_t v21 = HIDWORD(a3) & 1;
    uint64_t v22 = a3;
    unint64_t v20 = a3 | (unint64_t)(v21 << 32);
    while (1)
    {
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      uint64_t result = Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (!IsNativeType) {
        break;
      }
      uint64_t v16 = v12 + 1;
      if (__OFADD__(v12, 1)) {
        goto LABEL_13;
      }
      uint64_t v17 = *(void *)(v13 - 9);
      char v18 = *(v13 - 1);
      char v19 = *v13;
      *a1 = *(void *)(v13 - 17);
      if (v19)
      {
        uint64_t v25 = v9;
        if ((DropPlaceholderListModifier.DropPlaceholderList.applyToPlaceholder(start:style:list:transform:body:)((uint64_t)a1, &v25, v20, a4, a5, a6) & 1) == 0)
        {
LABEL_9:
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      else
      {
        uint64_t v25 = v9;
        if ((DropPlaceholderListModifier.DropPlaceholderList.applyToBase(start:end:style:list:transform:body:)(a1, v17, v18, &v25, v22 | (v21 << 32), a4) & 1) == 0)goto LABEL_9; {
      }
        }
      ++v12;
      v13 += 24;
      if (v16 == MEMORY[0x18C115CB0](v10, v11)) {
        goto LABEL_10;
      }
    }
    uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
    __break(1u);
LABEL_13:
    __break(1u);
  }
  else
  {
LABEL_10:
    swift_bridgeObjectRelease();
    return 1;
  }
  return result;
}

uint64_t DropPlaceholderListModifier.DropPlaceholderList.indexRanges(from:)(uint64_t result)
{
  uint64_t v2 = result;
  char v3 = *(unsigned char *)(v1 + 104);
  if (v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *(void *)(v1 + 96);
  }
  if (*(unsigned char *)(v1 + 88))
  {
LABEL_5:
    if (v4 < result) {
      char v3 = 1;
    }
    if (v3) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }
  uint64_t v6 = *(void *)(v1 + 80);
  if (v6 == v4) {
    int v7 = 1;
  }
  else {
    int v7 = *(unsigned __int8 *)(v1 + 104);
  }
  if (v7 == 1)
  {
    if (v6 >= result)
    {
      type metadata accessor for DropPlaceholderListModifier.DropPlaceholderList.IndexRange();
      type metadata accessor for _ContiguousArrayStorage();
      swift_allocObject();
      uint64_t result = static Array._adoptStorage(_:count:)();
      if (v6 == 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v12 = 0;
      }
      else {
        uint64_t v12 = v6;
      }
      *(void *)uint64_t v11 = v2;
      *(void *)(v11 + 8) = v12;
      *(unsigned char *)(v11 + 16) = v6 == 0x7FFFFFFFFFFFFFFFLL;
      *(unsigned char *)(v11 + 17) = 0;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0;
      *(_WORD *)(v11 + 40) = 257;
      if (!__OFADD__(v6, 1))
      {
        *(void *)(v11 + 48) = v6 + 1;
        *(void *)(v11 + 56) = 0;
LABEL_38:
        *(_WORD *)(v11 + 64) = 1;
        goto LABEL_39;
      }
      __break(1u);
      goto LABEL_58;
    }
    if (*(unsigned char *)(v1 + 104)) {
      goto LABEL_8;
    }
  }
  if (v6 < v4)
  {
    if (v6 >= result)
    {
      type metadata accessor for DropPlaceholderListModifier.DropPlaceholderList.IndexRange();
      type metadata accessor for _ContiguousArrayStorage();
      swift_allocObject();
      uint64_t result = static Array._adoptStorage(_:count:)();
      *(void *)uint64_t v14 = v2;
      *(void *)(v14 + 8) = v6;
      *(_WORD *)(v14 + 16) = 0;
      uint64_t v15 = v4 + 1;
      if (!__OFADD__(v4, 1))
      {
        if (v15 > v6)
        {
          if (v4 == 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v16 = 0;
          }
          else {
            uint64_t v16 = v4 + 1;
          }
          *(void *)(v14 + 24) = v6 + 1;
          *(void *)(v14 + 32) = v16;
          *(unsigned char *)(v14 + 40) = v4 == 0x7FFFFFFFFFFFFFFELL;
          *(unsigned char *)(v14 + 41) = 0;
          *(void *)(v14 + 48) = 0;
          *(void *)(v14 + 56) = 0;
          *(_WORD *)(v14 + 64) = 257;
          *(void *)(v14 + 72) = v15;
          *(void *)(v14 + 80) = 0;
          *(_WORD *)(v14 + 88) = 1;
          goto LABEL_39;
        }
        goto LABEL_60;
      }
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    uint64_t v8 = v4 + 1;
    if (!__OFADD__(v4, 1))
    {
      if (v8 >= result)
      {
        type metadata accessor for DropPlaceholderListModifier.DropPlaceholderList.IndexRange();
        type metadata accessor for _ContiguousArrayStorage();
        swift_allocObject();
        uint64_t result = static Array._adoptStorage(_:count:)();
        if (v4 == 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v19 = 0;
        }
        else {
          uint64_t v19 = v4 + 1;
        }
        *(void *)uint64_t v11 = v2;
        *(void *)(v11 + 8) = v19;
        *(unsigned char *)(v11 + 16) = v4 == 0x7FFFFFFFFFFFFFFELL;
        *(unsigned char *)(v11 + 17) = 0;
        *(void *)(v11 + 24) = 0;
        *(void *)(v11 + 32) = 0;
        *(_WORD *)(v11 + 40) = 257;
        *(void *)(v11 + 48) = v8;
        goto LABEL_37;
      }
      goto LABEL_19;
    }
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
LABEL_19:
  if (v4 < v6)
  {
    if (v4 < result)
    {
      if (v6 < result) {
        goto LABEL_5;
      }
      type metadata accessor for DropPlaceholderListModifier.DropPlaceholderList.IndexRange();
      type metadata accessor for _ContiguousArrayStorage();
      swift_allocObject();
      uint64_t result = static Array._adoptStorage(_:count:)();
      if (v6 == 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v10 = 0;
      }
      else {
        uint64_t v10 = v6;
      }
      *(void *)uint64_t v9 = v2;
      *(void *)(v9 + 8) = v10;
      *(unsigned char *)(v9 + 16) = v6 == 0x7FFFFFFFFFFFFFFFLL;
      *(unsigned char *)(v9 + 17) = 0;
      if (!__OFADD__(v6, 1))
      {
        *(void *)(v9 + 24) = v6 + 1;
        *(void *)(v9 + 32) = 0;
        *(_WORD *)(v9 + 40) = 1;
        goto LABEL_39;
      }
LABEL_62:
      __break(1u);
      return result;
    }
    type metadata accessor for DropPlaceholderListModifier.DropPlaceholderList.IndexRange();
    type metadata accessor for _ContiguousArrayStorage();
    swift_allocObject();
    uint64_t result = static Array._adoptStorage(_:count:)();
    *(void *)uint64_t v17 = v2;
    *(void *)(v17 + 8) = v4;
    *(_WORD *)(v17 + 16) = 0;
    *(void *)(v17 + 24) = 0;
    *(void *)(v17 + 32) = 0;
    *(_WORD *)(v17 + 40) = 257;
    if (v6 == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = v6;
    }
    *(void *)(v17 + 48) = v4;
    *(void *)(v17 + 56) = v18;
    *(unsigned char *)(v17 + 64) = v6 == 0x7FFFFFFFFFFFFFFFLL;
    *(unsigned char *)(v17 + 65) = 0;
    if (!__OFADD__(v6, 1))
    {
      *(void *)(v17 + 72) = v6 + 1;
      *(void *)(v17 + 80) = 0;
      *(_WORD *)(v17 + 88) = 1;
      goto LABEL_39;
    }
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  if (v4 >= result)
  {
LABEL_33:
    type metadata accessor for DropPlaceholderListModifier.DropPlaceholderList.IndexRange();
    type metadata accessor for _ContiguousArrayStorage();
    swift_allocObject();
    uint64_t result = static Array._adoptStorage(_:count:)();
    if (v4 == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = v4;
    }
    *(void *)uint64_t v11 = v2;
    *(void *)(v11 + 8) = v13;
    *(unsigned char *)(v11 + 16) = v4 == 0x7FFFFFFFFFFFFFFFLL;
    *(unsigned char *)(v11 + 17) = 0;
    *(void *)(v11 + 24) = 0;
    *(void *)(v11 + 32) = 0;
    *(_WORD *)(v11 + 40) = 257;
    *(void *)(v11 + 48) = v4;
LABEL_37:
    *(void *)(v11 + 56) = 0;
    goto LABEL_38;
  }
LABEL_8:
  type metadata accessor for DropPlaceholderListModifier.DropPlaceholderList.IndexRange();
  type metadata accessor for _ContiguousArrayStorage();
  swift_allocObject();
  uint64_t result = static Array._adoptStorage(_:count:)();
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = 0;
  *(_WORD *)(v5 + 16) = 1;
LABEL_39:

  _finalizeUninitializedArray<A>(_:)();
  return result;
}

uint64_t DropPlaceholderListModifier.DropPlaceholderList.applyToPlaceholder(start:style:list:transform:body:)(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *a2;
  uint64_t v13 = v6[8];
  uint64_t v14 = v6[9];
  __swift_project_boxed_opaque_existential_1(v6 + 5, v13);
  uint64_t v16 = v12;
  return (*(uint64_t (**)(uint64_t, uint64_t *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 48))(a1, &v16, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5, a6, v13, v14) & 1;
}

uint64_t DropPlaceholderListModifier.DropPlaceholderList.applyToBase(start:end:style:list:transform:body:)(uint64_t *a1, uint64_t a2, char a3, uint64_t *a4, unint64_t a5, uint64_t a6)
{
  uint64_t v9 = *a1;
  uint64_t result = 1;
  if ((a3 & 1) != 0 || v9 < a2)
  {
    uint64_t v11 = *a4;
    uint64_t v20 = v9;
    unsigned __int8 v19 = 1;
    uint64_t v16 = a6;
    outlined init with copy of TableColumnList(v6, (uint64_t)v18);
    uint64_t v12 = v18[4];
    uint64_t v13 = __swift_project_boxed_opaque_existential_1(v18, v18[3]);
    v15[1] = v15;
    uint64_t v17 = v11;
    double v14 = MEMORY[0x1F4188790](v13);
    (*(void (**)(uint64_t *, uint64_t *, unint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t), double))(v12 + 48))(a1, &v17, a5 | ((HIDWORD(a5) & 1) << 32), v16, partial apply for closure #1 in DropPlaceholderListModifier.DropPlaceholderList.applyToBase(start:end:style:list:transform:body:), v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    return v19;
  }
  return result;
}

uint64_t DropPlaceholderListModifier.DropPlaceholderList.edit(forID:since:)(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = *a2;
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v6);
  v10[0] = *a1;
  v10[1] = v4;
  uint64_t v9 = v5;
  return (*(uint64_t (**)(void *, uint64_t *, uint64_t, uint64_t))(v7 + 56))(v10, &v9, v6, v7);
}

void *DropPlaceholderListModifier.DropPlaceholderList.firstOffset<A>(forID:style:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v41 = a3;
  uint64_t v10 = *a2;
  uint64_t v11 = *(void *)(v5 + 24);
  uint64_t v12 = *(void *)(v5 + 32);
  __swift_project_boxed_opaque_existential_1((void *)v5, v11);
  uint64_t v42 = v10;
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 64))(a1, &v42, a4, a5, v11, v12);
  char v15 = v14 & 1;
  uint64_t v16 = *(void *)(v5 + 64);
  uint64_t v17 = *(void *)(v5 + 72);
  __swift_project_boxed_opaque_existential_1((void *)(v6 + 40), *(void *)(v6 + 64));
  uint64_t v42 = v10;
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 64))(a1, &v42, a4, a5, v16, v17);
  if (*(unsigned char *)(v5 + 104)) {
    return (void *)v13;
  }
  uint64_t v20 = result;
  char v21 = v19;
  uint64_t v22 = *(void *)(v6 + 96);
  if (*(unsigned char *)(v6 + 88))
  {
    MEMORY[0x1F4188790](result);
    uint64_t v23 = *(void *)(v41 + 24);
    uint64_t v33 = *(void *)(v41 + 16);
    uint64_t v34 = a4;
    uint64_t v35 = v23;
    uint64_t v36 = a5;
    uint64_t v37 = v22;
    uint64_t v38 = v6;
    uint64_t v39 = v10;
    char v24 = v15;
    char v15 = 0;
    uint64_t result = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFSi_s5NeverOSiSgTg5((void *(*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #3 in DropPlaceholderListModifier.DropPlaceholderList.firstOffset<A>(forID:style:), (uint64_t)v32, v13, v24);
    if ((v25 & 0x100) == 0) {
      return result;
    }
    if (v21) {
      return v20;
    }
    BOOL v26 = __OFADD__(v20, v22);
    uint64_t v20 = (void *)((char *)v20 + v22);
    if (!v26) {
      return v20;
    }
    __break(1u);
  }
  MEMORY[0x1F4188790](result);
  uint64_t v27 = *(void *)(v41 + 24);
  uint64_t v33 = *(void *)(v41 + 16);
  uint64_t v34 = a4;
  uint64_t v35 = v27;
  uint64_t v36 = a5;
  uint64_t v29 = v28;
  uint64_t v37 = v28;
  uint64_t v38 = v22;
  uint64_t v39 = v6;
  uint64_t v40 = v10;
  uint64_t result = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFSi_s5NeverOSiSgTg5((void *(*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #1 in DropPlaceholderListModifier.DropPlaceholderList.firstOffset<A>(forID:style:), (uint64_t)v32, v13, v15);
  if ((v30 & 0x100) == 0) {
    return result;
  }
  if (v21) {
    return v20;
  }
  uint64_t v31 = v22 - (v29 < v22);
  BOOL v26 = __OFADD__(v20, v31);
  uint64_t v20 = (void *)((char *)v20 + v31);
  if (!v26) {
    return v20;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in DropPlaceholderListModifier.DropPlaceholderList.firstOffset<A>(forID:style:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = *(void *)result;
  if (*(void *)result <= a2) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = -1;
  }
  if (v7 <= a3
    || (uint64_t v10 = a4[8],
        uint64_t v11 = a4[9],
        __swift_project_boxed_opaque_existential_1(a4 + 5, v10),
        uint64_t v13 = a5,
        uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v11 + 8))(&v13, v10, v11),
        BOOL v12 = __OFADD__(v8, result),
        v8 += result,
        !v12))
  {
    if (!__OFADD__(v7, v8))
    {
      *(void *)a6 = v7 + v8;
      *(unsigned char *)(a6 + 8) = 0;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t closure #3 in DropPlaceholderListModifier.DropPlaceholderList.firstOffset<A>(forID:style:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = *a1;
  if (*a1 >= a2)
  {
    uint64_t result = 0;
  }
  else
  {
    uint64_t v8 = a3[8];
    uint64_t v9 = a3[9];
    __swift_project_boxed_opaque_existential_1(a3 + 5, v8);
    uint64_t v11 = a4;
    uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v9 + 8))(&v11, v8, v9);
  }
  if (__OFADD__(v6, result))
  {
    __break(1u);
  }
  else
  {
    *(void *)a5 = v6 + result;
    *(unsigned char *)(a5 + 8) = 0;
  }
  return result;
}

uint64_t closure #1 in DropPlaceholderListModifier.DropPlaceholderList.applyToBase(start:end:style:list:transform:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t *a10)
{
  uint64_t result = _ViewList_Node.applyNodes(from:style:transform:to:)();
  *a5 = result & 1;
  if (result & 1) == 0 || (a9) {
    return result & 1;
  }
  uint64_t v13 = *a10 + 1;
  if (!__OFADD__(*a10, 1))
  {
    *a10 = v13;
    LOBYTE(result) = v13 < a8;
    return result & 1;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for ViewList.applyNodes(from:style:list:transform:to:) in conformance DropPlaceholderListModifier<A>.DropPlaceholderList(uint64_t *a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return DropPlaceholderListModifier.DropPlaceholderList.applyNodes(from:style:list:transform:to:)(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5, a6);
}

void *protocol witness for ViewList.firstOffset<A>(forID:style:) in conformance DropPlaceholderListModifier<A>.DropPlaceholderList(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return DropPlaceholderListModifier.DropPlaceholderList.firstOffset<A>(forID:style:)(a1, a2, a5, a3, a4);
}

uint64_t DropPlaceholderListModifier.PlaceholderViews.endIndex.getter()
{
  return *(void *)(v0 + 72);
}

uint64_t DropPlaceholderListModifier.PlaceholderViews.subscript.getter(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 64);
  if (v2 > result) {
    return dispatch thunk of _ViewList_ID_Views.subscript.getter();
  }
  uint64_t v3 = *(void *)(v1 + 40);
  BOOL v4 = __OFADD__(v2, v3);
  uint64_t v5 = v2 + v3;
  if (v4)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v5 < result)
  {
    BOOL v4 = __OFSUB__(result, v3);
    result -= v3;
    if (!v4) {
      return dispatch thunk of _ViewList_ID_Views.subscript.getter();
    }
    goto LABEL_10;
  }
  BOOL v4 = __OFSUB__(result, v3);
  uint64_t v6 = result - v3;
  if (v4)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t result = v6 - 1;
  if (!__OFSUB__(v6, 1)) {
    return dispatch thunk of _ViewList_ID_Views.subscript.getter();
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t DropPlaceholderListModifier.PlaceholderViews.isEqual(to:)()
{
  uint64_t v1 = swift_dynamicCastClass();
  if (!v1 || *(void *)(v0 + 72) != *(void *)(v1 + 72)) {
    goto LABEL_12;
  }
  char v2 = *(unsigned char *)(v1 + 56);
  if (*(unsigned char *)(v0 + 56))
  {
    if (!*(unsigned char *)(v1 + 56)) {
      goto LABEL_12;
    }
  }
  else
  {
    if (*(void *)(v0 + 48) != *(void *)(v1 + 48)) {
      char v2 = 1;
    }
    if (v2) {
      goto LABEL_12;
    }
  }
  if (*(void *)(v0 + 64) != *(void *)(v1 + 64))
  {
LABEL_12:
    char v4 = 0;
    return v4 & 1;
  }
  swift_retain();
  swift_retain();
  char v3 = dispatch thunk of _ViewList_ID_Views.isEqual(to:)();
  swift_release();
  if (v3)
  {
    swift_retain();
    char v4 = dispatch thunk of _ViewList_ID_Views.isEqual(to:)();
    swift_release();
  }
  else
  {
    char v4 = 0;
  }
  swift_release();
  return v4 & 1;
}

void DropPlaceholderListModifier.PlaceholderViews.__allocating_init(isDataDependent:)()
{
}

uint64_t DropPlaceholderListModifier.PlaceholderViews.__ivar_destroyer()
{
  swift_release();

  return swift_release();
}

uint64_t DropPlaceholderListModifier.PlaceholderViews.__deallocating_deinit()
{
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DropPlaceholderListModifier.PlaceholderViews()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance DropPlaceholderListModifier<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static DropPlaceholderListModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), *(void *)(a4 + 24), a5);
}

uint64_t one-time initialization function for coordinateSpace()
{
  lazy protocol witness table accessor for type ReorderableLayoutCoordinateSpace and conformance ReorderableLayoutCoordinateSpace();
  uint64_t result = AnyHashable.init<A>(_:)();
  byte_1E9023A18 = 0;
  return result;
}

uint64_t closure #1 in DragReorderableLayoutCoordinator.dragBegan(at:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 136);
  char v5 = *(unsigned char *)(a1 + 144);
  uint64_t v14 = *(void *)(a1 + 112);
  uint64_t v17 = v4;
  char v18 = v5;
  type metadata accessor for Binding<_DragReorderableView_DragState>(0, &lazy cache variable for type metadata for Binding<_DragReorderableView_DragState>, (uint64_t)&type metadata for _DragReorderableView_DragState, MEMORY[0x1E4F41638]);
  uint64_t v7 = v6;
  swift_retain();
  swift_retain();
  MEMORY[0x18C113DA0](&v19, v7);
  uint64_t v13 = a2;
  LOBYTE(v14) = 0;
  uint64_t v15 = v21;
  LOBYTE(v16) = v22;
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  uint64_t v8 = *(void *)(a1 + 136);
  char v9 = *(unsigned char *)(a1 + 144);
  uint64_t v14 = *(void *)(a1 + 112);
  uint64_t v17 = v8;
  char v18 = v9;
  swift_retain();
  swift_retain();
  MEMORY[0x18C113DA0](&v19, v7);
  uint64_t v13 = v19;
  LOBYTE(v14) = v20;
  uint64_t v15 = a2;
  LOBYTE(v16) = 0;
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  outlined init with copy of TableColumnList(a1 + 48, (uint64_t)&v13);
  uint64_t v10 = v16;
  uint64_t v11 = v17;
  __swift_project_boxed_opaque_existential_1(&v13, v16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 56))(a2, v10, v11);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
}

uint64_t DragReorderableLayoutCoordinator.validateDrop(info:)(void *a1)
{
  DragReorderableLayoutCoordinator.sourceIndexForDrop(_:)(a1);
  if (v3)
  {
    char v5 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    if (MEMORY[0x18C119DF0](v5))
    {
      swift_getObjectType();
      uint64_t v6 = swift_bridgeObjectRetain();
      uint64_t v7 = UIDropSession.itemProviders(for:)(v6);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v7 = MEMORY[0x1E4FBC860];
    }
    swift_beginAccess();
    outlined init with copy of TableColumnList(v1 + 48, (uint64_t)v11);
    uint64_t v8 = v12;
    uint64_t v9 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    char v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 8))(v7, v8, v9);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    char v4 = 1;
  }
  return v4 & 1;
}

uint64_t DragReorderableLayoutCoordinator.sourceIndexForDrop(_:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v2 = DropInfoAdaptor.localDragContexts.getter();
  if (!*(void *)(v2 + 16))
  {
    long long v8 = 0u;
    long long v9 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  outlined init with copy of Any(v2 + 32, (uint64_t)&v8);
  swift_bridgeObjectRelease();
  if (!*((void *)&v9 + 1))
  {
LABEL_7:
    _sypSgWOhTm_5((uint64_t)&v8, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
    goto LABEL_8;
  }
  if ((swift_dynamicCast() & 1) != 0 && v12[0] == *(void *)(v1 + 16)) {
    return v12[1];
  }
LABEL_8:
  uint64_t v4 = *(void *)(v1 + 120);
  char v5 = *(unsigned char *)(v1 + 128);
  uint64_t v6 = *(void *)(v1 + 136);
  char v7 = *(unsigned char *)(v1 + 144);
  long long v8 = *(_OWORD *)(v1 + 104);
  *(void *)&long long v9 = v4;
  BYTE8(v9) = v5;
  uint64_t v10 = v6;
  char v11 = v7;
  type metadata accessor for Binding<_DragReorderableView_DragState>(0, &lazy cache variable for type metadata for Binding<_DragReorderableView_DragState>, (uint64_t)&type metadata for _DragReorderableView_DragState, MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](v12);
  return v12[0];
}

uint64_t DragReorderableLayoutCoordinator.dropEntered(info:)(void *a1)
{
  uint64_t v3 = DragReorderableLayoutCoordinator.sourceIndexForDrop(_:)(a1);
  char v5 = v4;
  DragReorderableLayoutCoordinator.destination(at:sourceIndex:)(a1, v3, v4 & 1);
  type metadata accessor for Binding<_DragReorderableView_DragState>(0, &lazy cache variable for type metadata for Binding<_DragReorderableView_DragState>, (uint64_t)&type metadata for _DragReorderableView_DragState, MEMORY[0x1E4F41638]);
  uint64_t v6 = MEMORY[0x18C113DA0](&v9);
  char v7 = v10;
  if (v5)
  {
    if (v10) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (v3 != v9) {
    char v7 = 1;
  }
  if (v7)
  {
LABEL_7:
    *(_OWORD *)(v1 + 200) = 0u;
    *(_OWORD *)(v1 + 184) = 0u;
    *(_OWORD *)(v1 + 168) = 0u;
    *(unsigned char *)(v1 + 216) = 1;
  }
LABEL_8:
  MEMORY[0x1F4188790](v6);
  return DragReorderableLayoutCoordinator.withStateAnimation(_:)();
}

uint64_t DragReorderableLayoutCoordinator.destination(at:sourceIndex:)(void *a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  swift_bridgeObjectRelease();
  if (*(_DWORD *)(v3 + 232))
  {
    swift_beginAccess();
    uint64_t v7 = *(void *)(v3 + 224);
    uint64_t v8 = *(void *)(v3 + 120);
    char v9 = *(unsigned char *)(v3 + 128);
    uint64_t v10 = *(void *)(v3 + 136);
    char v11 = *(unsigned char *)(v3 + 144);
    *(_OWORD *)uint64_t v59 = *(_OWORD *)(v3 + 104);
    *(void *)&v59[16] = v8;
    LOBYTE(v60) = v9;
    *((void *)&v60 + 1) = v10;
    LOBYTE(v61) = v11;
    type metadata accessor for Binding<_DragReorderableView_DragState>(0, &lazy cache variable for type metadata for Binding<_DragReorderableView_DragState>, (uint64_t)&type metadata for _DragReorderableView_DragState, MEMORY[0x1E4F41638]);
    uint64_t v13 = v12;
    swift_bridgeObjectRetain();
    MEMORY[0x18C113DA0](v65, v13);
    if (v65[8])
    {
      uint64_t v14 = *(void *)(v3 + 168);
      uint64_t v55 = *(void *)(v3 + 176);
      long long v57 = *(_OWORD *)(v3 + 200);
      long long v58 = *(_OWORD *)(v3 + 184);
      char v15 = 1;
      double v16 = 0.0;
      char v17 = *(unsigned char *)(v3 + 216);
    }
    else
    {
      double v16 = 0.0;
      if (*(void *)(v7 + 16)
        && (unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(*(uint64_t *)v65), (v20 & 1) != 0))
      {
        char v17 = 0;
        uint64_t v21 = *(void *)(v7 + 56) + 48 * v19;
        uint64_t v14 = *(void *)v21;
        uint64_t v55 = *(void *)(v21 + 8);
        long long v57 = *(_OWORD *)(v21 + 32);
        long long v58 = *(_OWORD *)(v21 + 16);
      }
      else
      {
        uint64_t v55 = 0;
        uint64_t v14 = 0;
        long long v57 = 0u;
        long long v58 = 0u;
        char v17 = 1;
      }
      char v15 = 1;
    }
  }
  else
  {
    DragReorderableLayoutCoordinator.childFrames()((uint64_t)v59);
    double v16 = *(double *)&v59[8];
    uint64_t v18 = *(void *)v59;
    char v15 = v59[16];
    uint64_t v55 = *((void *)&v60 + 1);
    uint64_t v14 = v60;
    long long v57 = v62;
    long long v58 = v61;
    char v17 = v63;
    swift_beginAccess();
    *(void *)(v3 + 224) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  static Update.ensure<A>(_:)();
  *(void *)uint64_t v65 = *(void *)v59;
  *(_OWORD *)&v65[8] = *(_OWORD *)&v59[8];
  *(_OWORD *)&v65[24] = v60;
  if (one-time initialization token for coordinateSpace != -1) {
    swift_once();
  }
  outlined init with copy of CoordinateSpace((uint64_t)&static DragReorderableLayoutCoordinator.coordinateSpace, (uint64_t)v59);
  char v64 = 2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  ViewTransform.convert(_:point:)();
  double v23 = v22;
  outlined destroy of ViewTransform.Conversion((uint64_t)v59);
  if (*(unsigned char *)(v3 + 40))
  {
    defaultSpacingValue.getter();
    double v25 = v24;
    if ((*(unsigned char *)(v3 + 160) & 1) == 0)
    {
LABEL_14:
      double v16 = *(double *)(v3 + 152);
      goto LABEL_18;
    }
  }
  else
  {
    double v25 = *(double *)(v3 + 32);
    if ((*(unsigned char *)(v3 + 160) & 1) == 0) {
      goto LABEL_14;
    }
  }
  if (v15)
  {
    char v26 = 1;
    double v27 = 0.0;
    goto LABEL_19;
  }
LABEL_18:
  char v26 = 0;
  double v27 = v16;
LABEL_19:
  uint64_t v28 = swift_bridgeObjectRetain();
  uint64_t v29 = specialized _copyCollectionToContiguousArray<A>(_:)(v28);
  swift_bridgeObjectRelease();
  *(void *)uint64_t v59 = v29;
  specialized MutableCollection<>.sort(by:)((char **)v59);
  swift_bridgeObjectRelease();
  uint64_t v30 = *(void *)(*(void *)v59 + 16);
  if (v30)
  {
    uint64_t v31 = (double *)(*(void *)v59 + 80);
    uint64_t v32 = *(void *)(*(void *)v59 + 16);
    do
    {
      double v27 = v27 + v25 + *v31;
      if (v23 < v27)
      {
        uint64_t v34 = *((void *)v31 - 6);
        goto LABEL_28;
      }
      v31 += 7;
      --v32;
    }
    while (v32);
    uint64_t v33 = *(void *)(*(void *)v59 + 32 + 56 * v30 - 56);
    swift_release();
    uint64_t v34 = v33 + 1;
    if (!__OFADD__(v33, 1)) {
      goto LABEL_29;
    }
    __break(1u);
  }
  uint64_t v34 = 0;
LABEL_28:
  swift_release();
LABEL_29:
  *(double *)(v4 + 152) = v16;
  *(unsigned char *)(v4 + 160) = v26;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  DropInfoAdaptor.originContentPath.getter((uint64_t)v66);
  outlined init with take of Path?((uint64_t)v66, (uint64_t)v67, &lazy cache variable for type metadata for Path?, MEMORY[0x1E4F413B0]);
  uint64_t v35 = v57;
  uint64_t v37 = *((void *)&v58 + 1);
  uint64_t v36 = v58;
  uint64_t v38 = *((void *)&v57 + 1);
  if (v68 == 255)
  {
    char v47 = a3;
    uint64_t v48 = v55;
  }
  else
  {
    *(_OWORD *)uint64_t v65 = v67[0];
    *(_OWORD *)&v65[16] = v67[1];
    v65[32] = v68;
    Path.boundingRect.getter();
    uint64_t v40 = v39;
    uint64_t v42 = v41;
    uint64_t v44 = v43;
    uint64_t v46 = v45;
    outlined release of Path?((uint64_t)v66, (void (*)(void, void, void, void, void))outlined consume of Path?);
    uint64_t v37 = *((void *)&v58 + 1);
    uint64_t v38 = *((void *)&v57 + 1);
    uint64_t v35 = v57;
    uint64_t v36 = v58;
    char v47 = a3;
    uint64_t v48 = v55;
    if ((v17 & 1) == 0)
    {
      uint64_t v38 = v46;
      uint64_t v35 = v44;
      uint64_t v37 = v42;
      uint64_t v36 = v40;
    }
  }
  *(void *)(v4 + 168) = v14;
  *(void *)(v4 + 176) = v48;
  *(void *)(v4 + 184) = v36;
  *(void *)(v4 + 192) = v37;
  *(void *)(v4 + 200) = v35;
  *(void *)(v4 + 208) = v38;
  uint64_t v49 = v47 & 1;
  if (v47) {
    uint64_t v50 = 0;
  }
  else {
    uint64_t v50 = a2;
  }
  if (v30) {
    uint64_t v51 = v34;
  }
  else {
    uint64_t v51 = v50;
  }
  *(unsigned char *)(v4 + 216) = v17;
  swift_beginAccess();
  outlined init with copy of TableColumnList(v4 + 48, (uint64_t)v59);
  long long v52 = v60;
  __swift_project_boxed_opaque_existential_1(v59, v60);
  uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void))(*((void *)&v52 + 1) + 64))(a2, v49, v51, v52, *((void *)&v52 + 1));
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
  return v53;
}

uint64_t DragReorderableLayoutCoordinator.withStateAnimation(_:)()
{
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  Transaction.addAnimationListener(allFinished:)();
  swift_release_n();
  static Animation.default.getter();
  Transaction.animation.setter();
  ++*(_DWORD *)(v0 + 232);
  swift_retain();
  withTransaction<A>(_:_:)();
  return swift_release_n();
}

uint64_t DragReorderableLayoutCoordinator.dropUpdated(info:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = DragReorderableLayoutCoordinator.sourceIndexForDrop(_:)(a1);
  uint64_t v7 = v6 & 1;
  uint64_t v12 = DragReorderableLayoutCoordinator.destination(at:sourceIndex:)(a1, v5, v6 & 1);
  DragReorderableLayoutCoordinator.withStateAnimation(_:)();
  swift_beginAccess();
  outlined init with copy of TableColumnList(v2 + 48, (uint64_t)v13);
  uint64_t v8 = v14;
  uint64_t v9 = v15;
  __swift_project_boxed_opaque_existential_1(v13, v14);
  uint64_t v10 = (double *)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double))(v9 + 72))(v5, v7, v12, v8, v9, v10[2], v10[3]);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  *a2 = v7 ^ 3;
  return result;
}

uint64_t closure #1 in DragReorderableLayoutCoordinator.dropEntered(info:)()
{
  type metadata accessor for Binding<_DragReorderableView_DragState>(0, &lazy cache variable for type metadata for Binding<_DragReorderableView_DragState>, (uint64_t)&type metadata for _DragReorderableView_DragState, MEMORY[0x1E4F41638]);
  uint64_t v1 = v0;
  swift_retain();
  swift_retain();
  MEMORY[0x18C113DA0](&v3, v1);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  swift_retain();
  swift_retain();
  MEMORY[0x18C113DA0](&v3, v1);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in DragReorderableLayoutCoordinator.dropExited(info:)()
{
  type metadata accessor for Binding<_DragReorderableView_DragState>(0, &lazy cache variable for type metadata for Binding<_DragReorderableView_DragState>, (uint64_t)&type metadata for _DragReorderableView_DragState, MEMORY[0x1E4F41638]);
  uint64_t v1 = v0;
  swift_retain();
  swift_retain();
  MEMORY[0x18C113DA0](&v3, v1);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  return swift_release();
}

uint64_t DragReorderableLayoutCoordinator.performDrop(info:)(void *a1)
{
  uint64_t v2 = v1;
  int v4 = *(_DWORD *)(v1 + 232);
  *(_DWORD *)(v1 + 232) = 0;
  uint64_t v5 = DragReorderableLayoutCoordinator.sourceIndexForDrop(_:)(a1);
  uint64_t v7 = DragReorderableLayoutCoordinator.destination(at:sourceIndex:)(a1, v5, v6 & 1);
  *(_DWORD *)(v1 + 232) = v4;
  if (v4)
  {
    uint64_t v8 = *(void *)(v1 + 120);
    char v9 = *(unsigned char *)(v1 + 128);
    uint64_t v10 = *(void *)(v1 + 136);
    char v11 = *(unsigned char *)(v1 + 144);
    long long v53 = *(_OWORD *)(v1 + 104);
    uint64_t v54 = v8;
    LOBYTE(v55) = v9;
    uint64_t v56 = v10;
    char v57 = v11;
    type metadata accessor for Binding<_DragReorderableView_DragState>(0, &lazy cache variable for type metadata for Binding<_DragReorderableView_DragState>, (uint64_t)&type metadata for _DragReorderableView_DragState, MEMORY[0x1E4F41638]);
    uint64_t v13 = v12;
    MEMORY[0x18C113DA0](&v58);
    uint64_t v14 = v60;
    if (v61) {
      uint64_t v14 = 0;
    }
    if ((v61 & 1) != 0 || v7 != v14)
    {
      uint64_t v15 = *(void *)(v1 + 120);
      char v16 = *(unsigned char *)(v1 + 128);
      uint64_t v17 = *(void *)(v1 + 136);
      char v18 = *(unsigned char *)(v1 + 144);
      long long v53 = *(_OWORD *)(v1 + 104);
      uint64_t v54 = v15;
      LOBYTE(v55) = v16;
      uint64_t v56 = v17;
      char v57 = v18;
      MEMORY[0x18C113DA0](&v58, v13);
      if ((v61 & 1) == 0)
      {
        uint64_t v19 = v60;
        swift_beginAccess();
        uint64_t v20 = *(void *)(v1 + 224);
        if (*(void *)(v20 + 16) && (unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v19), (v22 & 1) != 0))
        {
          char v23 = 0;
          uint64_t v24 = *(void *)(v20 + 56) + 48 * v21;
          uint64_t v25 = *(void *)v24;
          uint64_t v26 = *(void *)(v24 + 8);
          uint64_t v27 = *(void *)(v24 + 16);
          long long v52 = *(_OWORD *)(v24 + 24);
          uint64_t v28 = *(void *)(v24 + 40);
        }
        else
        {
          uint64_t v25 = 0;
          uint64_t v26 = 0;
          uint64_t v27 = 0;
          uint64_t v28 = 0;
          char v23 = 1;
          long long v52 = 0u;
        }
        swift_endAccess();
        *(void *)(v2 + 168) = v25;
        *(void *)(v2 + 176) = v26;
        *(void *)(v2 + 184) = v27;
        *(_OWORD *)(v2 + 192) = v52;
        *(void *)(v2 + 208) = v28;
        *(unsigned char *)(v2 + 216) = v23;
      }
    }
  }
  uint64_t v29 = DragReorderableLayoutCoordinator.sourceIndexForDrop(_:)(a1);
  if (v30)
  {
    uint64_t v37 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    if (MEMORY[0x18C119DF0](v37))
    {
      swift_getObjectType();
      uint64_t v38 = swift_bridgeObjectRetain();
      uint64_t v39 = UIDropSession.itemProviders(for:)(v38);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v39 = MEMORY[0x1E4FBC860];
    }
    swift_beginAccess();
    outlined init with copy of TableColumnList(v2 + 48, (uint64_t)&v53);
    uint64_t v42 = v55;
    uint64_t v43 = v56;
    __swift_project_boxed_opaque_existential_1(&v53, v55);
    char v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 16))(v7, v39, v42, v43);
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  uint64_t v31 = v29;
  if (v29 != v7)
  {
    swift_beginAccess();
    outlined init with copy of TableColumnList(v2 + 48, (uint64_t)&v53);
    uint64_t v40 = v55;
    uint64_t v41 = v56;
    __swift_project_boxed_opaque_existential_1(&v53, v55);
    char v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 80))(v31, v7, v40, v41);
LABEL_20:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v53);
    uint64_t v44 = *(void *)(v2 + 112);
    uint64_t v45 = *(void *)(v2 + 120);
    char v46 = *(unsigned char *)(v2 + 128);
    uint64_t v47 = *(void *)(v2 + 136);
    char v48 = *(unsigned char *)(v2 + 144);
    *(void *)&long long v53 = *(void *)(v2 + 104);
    *((void *)&v53 + 1) = v44;
    uint64_t v54 = v45;
    LOBYTE(v55) = v46;
    uint64_t v56 = v47;
    char v57 = v48;
    type metadata accessor for Binding<_DragReorderableView_DragState>(0, &lazy cache variable for type metadata for Binding<_DragReorderableView_DragState>, (uint64_t)&type metadata for _DragReorderableView_DragState, MEMORY[0x1E4F41638]);
    uint64_t v50 = v49;
    swift_retain();
    swift_retain();
    MEMORY[0x18C113DA0](&v58, v50);
    *(void *)&long long v53 = v58;
    BYTE8(v53) = v59;
    uint64_t v54 = 0;
    LOBYTE(v55) = 1;
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    swift_release();
    return v36 & 1;
  }
  uint64_t v32 = *(void *)(v2 + 136);
  char v33 = *(unsigned char *)(v2 + 144);
  *((void *)&v53 + 1) = *(void *)(v2 + 112);
  uint64_t v56 = v32;
  char v57 = v33;
  type metadata accessor for Binding<_DragReorderableView_DragState>(0, &lazy cache variable for type metadata for Binding<_DragReorderableView_DragState>, (uint64_t)&type metadata for _DragReorderableView_DragState, MEMORY[0x1E4F41638]);
  uint64_t v35 = v34;
  swift_retain();
  swift_retain();
  MEMORY[0x18C113DA0](&v58, v35);
  *(void *)&long long v53 = v58;
  BYTE8(v53) = v59;
  uint64_t v54 = 0;
  LOBYTE(v55) = 1;
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  char v36 = 0;
  return v36 & 1;
}

uint64_t closure #1 in DragReorderableLayoutCoordinator.withStateAnimation(_:)()
{
  swift_retain();
  static Update.enqueueAction(_:)();

  return swift_release();
}

uint64_t closure #1 in closure #1 in DragReorderableLayoutCoordinator.withStateAnimation(_:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    --*(_DWORD *)(result + 232);
    return swift_release();
  }
  return result;
}

uint64_t DragReorderableLayoutCoordinator.childFrames()@<X0>(uint64_t a1@<X8>)
{
  unint64_t v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  _sSay7SwiftUI13ViewResponderCGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  uint64_t result = static Update.ensure<A>(_:)();
  if (!(v6 >> 62))
  {
    uint64_t v2 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 16) = 1;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(unsigned char *)(a1 + 72) = 1;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v2) {
    goto LABEL_10;
  }
LABEL_3:
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    do
    {
      if ((v6 & 0xC000000000000001) != 0) {
        uint64_t v4 = MEMORY[0x18C117680](v3);
      }
      else {
        uint64_t v4 = swift_retain();
      }
      ++v3;
      MEMORY[0x1F4188790](v4);
      dispatch thunk of ResponderNode.visit(applying:)();
      swift_release();
    }
    while (v2 != v3);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in DragReorderableLayoutCoordinator.childFrames()@<X0>(uint64_t *a1@<X8>)
{
  _sSay7SwiftUI13ViewResponderCGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  if (AGGraphGetWeakValue()) {
    uint64_t result = swift_bridgeObjectRetain();
  }
  else {
    uint64_t result = MEMORY[0x1E4FBC860];
  }
  *a1 = result;
  return result;
}

uint64_t closure #1 in DragReorderableLayoutCoordinator.destination(at:sourceIndex:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = AGGraphGetWeakValue();
  if (result)
  {
    *(void *)a1 = *(void *)result;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(result + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(result + 24);
    return swift_retain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t DragReorderableLayoutCoordinator.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 48);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DragReorderableLayoutCoordinator()
{
  return self;
}

ValueMetadata *type metadata accessor for DragReorderableLayoutCoordinator.ChildFrame()
{
  return &type metadata for DragReorderableLayoutCoordinator.ChildFrame;
}

ValueMetadata *type metadata accessor for _DragReorderableView_DragState()
{
  return &type metadata for _DragReorderableView_DragState;
}

uint64_t getEnumTagSinglePayload for DragReorderableLayoutView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for DragReorderableLayoutView(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187B3A618);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        char v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for DragReorderableLayoutView()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for DragSourceProxyModifier()
{
  return &type metadata for DragSourceProxyModifier;
}

uint64_t type metadata completion function for DragReorderableLayoutAdaptor()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DragReorderableLayoutAdaptor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = *(void *)(v8 + 64) + 7;
  unint64_t v12 = ((((((((((v11 + ((v6 + v9) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
          + 47) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  unsigned int v13 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (v13 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v12 > 0x18)
  {
    uint64_t v16 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v16 + (((v13 | 7) + 16) & ~(unint64_t)(v13 | 7)));
    swift_retain();
  }
  else
  {
    uint64_t v17 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v18 = ((unint64_t)a2 + v10) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v17, v18, v7);
    uint64_t v19 = (_OWORD *)((v11 + (((unint64_t)v4 + v10) & v17)) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v20 = (_OWORD *)((v11 + v18) & 0xFFFFFFFFFFFFFFF8);
    long long v21 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v21;
    char v22 = (void *)(((unint64_t)v19 + 39) & 0xFFFFFFFFFFFFFFF8);
    char v23 = (void *)(((unint64_t)v20 + 39) & 0xFFFFFFFFFFFFFFF8);
    *char v22 = *v23;
    unint64_t v24 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v25 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v26 = *(void *)v25;
    *(unsigned char *)(v24 + 8) = *(unsigned char *)(v25 + 8);
    *(void *)unint64_t v24 = v26;
    unint64_t v27 = ((unint64_t)v22 + 31) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v28 = ((unint64_t)v23 + 31) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v29 = *(void *)(v28 + 24);
    *(void *)(v27 + 24) = v29;
    *(void *)(v27 + 32) = *(void *)(v28 + 32);
    char v30 = **(void (***)(unint64_t, unint64_t, uint64_t))(v29 - 8);
    swift_bridgeObjectRetain();
    v30(v27, v28, v29);
    uint64_t v31 = (void *)((v27 + 47) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v32 = (void *)((v28 + 47) & 0xFFFFFFFFFFFFFFF8);
    void *v31 = *v32;
    *(void *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t destroy for DragReorderableLayoutAdaptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56) + a1;
  uint64_t v6 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v8);
  unint64_t v9 = ((((*(void *)(v7 + 56) + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31;
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1(v9 & 0xFFFFFFFFFFFFFFF8);
}

uint64_t initializeWithCopy for DragReorderableLayoutAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 48) + 7;
  int v15 = (_OWORD *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (_OWORD *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  long long v17 = v16[1];
  *int v15 = *v16;
  v15[1] = v17;
  unint64_t v18 = (void *)(((unint64_t)v15 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (void *)(((unint64_t)v16 + 39) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v18 = *v19;
  unint64_t v20 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  char v22 = *(unsigned char *)(v21 + 8);
  *(void *)unint64_t v20 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = v22;
  unint64_t v23 = ((unint64_t)v18 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = ((unint64_t)v19 + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v25 = *(void *)(v24 + 24);
  *(void *)(v23 + 24) = v25;
  *(void *)(v23 + 32) = *(void *)(v24 + 32);
  uint64_t v26 = **(void (***)(unint64_t, unint64_t, uint64_t))(v25 - 8);
  swift_bridgeObjectRetain();
  v26(v23, v24, v25);
  unint64_t v27 = (void *)((v23 + 47) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v28 = (void *)((v24 + 47) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v27 = *v28;
  *(void *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for DragReorderableLayoutAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 40) + 7;
  unint64_t v15 = (v14 + v12) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = (void *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  *(void *)unint64_t v15 = *v16;
  *(void *)(v15 + 8) = v16[1];
  *(void *)(v15 + 16) = v16[2];
  *(void *)(v15 + 24) = v16[3];
  v15 += 39;
  long long v17 = (void *)(((unint64_t)v16 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(void *)(v15 & 0xFFFFFFFFFFFFFFF8) = *v17;
  unint64_t v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v20 = v18 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = *(unsigned char *)(v21 + 8);
  *(void *)unint64_t v20 = v22;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(v19 & 0xFFFFFFFFFFFFFFF8), (uint64_t *)(((unint64_t)v17 + 31) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v23 = (void *)(((v19 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v24 = (void *)(((((unint64_t)v17 + 31) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8);
  void *v23 = *v24;
  *(void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for DragReorderableLayoutAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 32) + 7;
  unint64_t v15 = (_OWORD *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (_OWORD *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  long long v17 = v16[1];
  *unint64_t v15 = *v16;
  v15[1] = v17;
  unint64_t v18 = (void *)(((unint64_t)v15 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v19 = (void *)(((unint64_t)v16 + 39) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v18 = *v19;
  unint64_t v20 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  char v22 = *(unsigned char *)(v21 + 8);
  *(void *)unint64_t v20 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = v22;
  unint64_t v23 = ((unint64_t)v18 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = ((unint64_t)v19 + 31) & 0xFFFFFFFFFFFFFFF8;
  long long v26 = *(_OWORD *)v24;
  long long v25 = *(_OWORD *)(v24 + 16);
  *(void *)(v23 + 32) = *(void *)(v24 + 32);
  *(_OWORD *)unint64_t v23 = v26;
  *(_OWORD *)(v23 + 16) = v25;
  unint64_t v27 = (void *)((v23 + 47) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v28 = (void *)((v24 + 47) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v27 = *v28;
  *(void *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for DragReorderableLayoutAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 24) + 7;
  unint64_t v15 = (v14 + v12) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = (void *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  *(void *)unint64_t v15 = *v16;
  *(void *)(v15 + 8) = v16[1];
  *(void *)(v15 + 16) = v16[2];
  *(void *)(v15 + 24) = v16[3];
  v15 += 39;
  long long v17 = (void *)(((unint64_t)v16 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v18 = v17;
  unint64_t v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(void *)(v15 & 0xFFFFFFFFFFFFFFF8) = *v17;
  unint64_t v20 = (v15 & 0xFFFFFFFFFFFFFFF8) + 31;
  swift_bridgeObjectRelease();
  unint64_t v21 = v19 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = *(void *)v22;
  *(unsigned char *)(v21 + 8) = *(unsigned char *)(v22 + 8);
  *(void *)unint64_t v21 = v23;
  unint64_t v24 = v20 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = ((unint64_t)v18 + 31) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v20 & 0xFFFFFFFFFFFFFFF8);
  long long v26 = *(_OWORD *)v25;
  long long v27 = *(_OWORD *)(v25 + 16);
  *(void *)(v24 + 32) = *(void *)(v25 + 32);
  *(_OWORD *)unint64_t v24 = v26;
  *(_OWORD *)(v24 + 16) = v27;
  unint64_t v28 = (void *)(((v20 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v29 = (void *)((v25 + 47) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v28 = *v29;
  *(void *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DragReorderableLayoutAdaptor(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(v4 - 8) + 64) + v9;
  uint64_t v12 = *(void *)(v7 + 64) + 7;
  if (v10 < a2)
  {
    unint64_t v13 = ((((((((((v12 + (v11 & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
            + 47) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    unsigned int v14 = a2 - v10;
    uint64_t v15 = v13 & 0xFFFFFFF8;
    if ((v13 & 0xFFFFFFF8) != 0) {
      unsigned int v16 = 2;
    }
    else {
      unsigned int v16 = v14 + 1;
    }
    if (v16 >= 0x10000) {
      unsigned int v17 = 4;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v16 < 0x100) {
      unsigned int v17 = 1;
    }
    if (v16 >= 2) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    switch(v18)
    {
      case 1:
        int v19 = *((unsigned __int8 *)a1 + v13);
        if (!v19) {
          break;
        }
        goto LABEL_24;
      case 2:
        int v19 = *(unsigned __int16 *)((char *)a1 + v13);
        if (v19) {
          goto LABEL_24;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187B3B28CLL);
      case 4:
        int v19 = *(int *)((char *)a1 + v13);
        if (!v19) {
          break;
        }
LABEL_24:
        int v21 = v19 - 1;
        if (v15)
        {
          int v21 = 0;
          int v22 = *a1;
        }
        else
        {
          int v22 = 0;
        }
        return v10 + (v22 | v21) + 1;
      default:
        break;
    }
  }
  if (v6 == v10) {
    return (*(uint64_t (**)(int *, uint64_t, uint64_t))(v5 + 48))(a1, v6, v4);
  }
  unint64_t v23 = ((unint64_t)a1 + v11) & ~v9;
  if (v8 == v10) {
    return (*(uint64_t (**)(unint64_t))(v7 + 48))(v23);
  }
  unint64_t v24 = *(void *)((((v12 + v23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8);
  if (v24 >= 0xFFFFFFFF) {
    LODWORD(v24) = -1;
  }
  return (v24 + 1);
}

void storeEnumTagSinglePayload for DragReorderableLayoutAdaptor(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v7 = *(void *)(a4 + 24);
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  uint64_t v9 = *(void *)(v7 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v8) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  uint64_t v14 = *(void *)(*(void *)(v7 - 8) + 64) + 7;
  unint64_t v15 = ((((((((((v14 + (v13 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
          + 47) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v12 >= a3)
  {
    int v19 = 0;
    int v20 = a2 - v12;
    if (a2 <= v12)
    {
LABEL_19:
      switch(v19)
      {
        case 1:
          a1[v15] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 2:
          *(_WORD *)&a1[v15] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 3:
          goto LABEL_49;
        case 4:
          *(_DWORD *)&a1[v15] = 0;
          goto LABEL_31;
        default:
LABEL_31:
          if (a2)
          {
LABEL_32:
            if (v8 == v12)
            {
              unint64_t v23 = *(void (**)(void))(v6 + 56);
              v23();
            }
            else
            {
              unint64_t v24 = (unint64_t)&a1[v13] & ~v11;
              if (v10 == v12)
              {
                unint64_t v25 = *(void (**)(unint64_t))(v9 + 56);
                v25(v24);
              }
              else
              {
                if ((a2 & 0x80000000) != 0) {
                  uint64_t v26 = a2 ^ 0x80000000;
                }
                else {
                  uint64_t v26 = a2 - 1;
                }
                *(void *)((((v14 + v24) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) = v26;
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v16 = a3 - v12;
    if (((((((((((v14 + (v13 & ~v11)) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 31) & 0xFFFFFFF8)
           + 47) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      unsigned int v17 = v16 + 1;
    else {
      unsigned int v17 = 2;
    }
    if (v17 >= 0x10000) {
      int v18 = 4;
    }
    else {
      int v18 = 2;
    }
    if (v17 < 0x100) {
      int v18 = 1;
    }
    if (v17 >= 2) {
      int v19 = v18;
    }
    else {
      int v19 = 0;
    }
    int v20 = a2 - v12;
    if (a2 <= v12) {
      goto LABEL_19;
    }
  }
  if (((((((((((v14 + (v13 & ~v11)) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 31) & 0xFFFFFFF8)
         + 47) & 0xFFFFFFF8)
       + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
    int v21 = v20;
  else {
    int v21 = 1;
  }
  if (((((((((((v14 + (v13 & ~v11)) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 31) & 0xFFFFFFF8)
         + 47) & 0xFFFFFFF8)
       + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v22 = ~v12 + a2;
    bzero(a1, ((((((((((v14 + (v13 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)+ 47) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *(_DWORD *)a1 = v22;
  }
  switch(v19)
  {
    case 1:
      a1[v15] = v21;
      break;
    case 2:
      *(_WORD *)&a1[v15] = v21;
      break;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x187B3B55CLL);
    case 4:
      *(_DWORD *)&a1[v15] = v21;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for DragReorderableLayoutAdaptor()
{
  return swift_getGenericMetadata();
}

_UNKNOWN **base witness table accessor for ViewModifier in DragSourceProxyModifier()
{
  return &protocol witness table for DragSourceProxyModifier;
}

_UNKNOWN **base witness table accessor for View in DragReorderableLayoutView<A>()
{
  return &protocol witness table for DragReorderableLayoutView<A>;
}

uint64_t protocol witness for DropDelegate.validateDrop(info:) in conformance DragReorderableLayoutCoordinator(void *a1)
{
  return DragReorderableLayoutCoordinator.validateDrop(info:)(a1) & 1;
}

uint64_t protocol witness for DropDelegate.performDrop(info:) in conformance DragReorderableLayoutCoordinator(void *a1)
{
  return DragReorderableLayoutCoordinator.performDrop(info:)(a1) & 1;
}

uint64_t protocol witness for DropDelegate.dropEntered(info:) in conformance DragReorderableLayoutCoordinator(void *a1)
{
  return DragReorderableLayoutCoordinator.dropEntered(info:)(a1);
}

uint64_t protocol witness for DropDelegate.dropUpdated(info:) in conformance DragReorderableLayoutCoordinator@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return DragReorderableLayoutCoordinator.dropUpdated(info:)(a1, a2);
}

uint64_t protocol witness for DropDelegate.dropExited(info:) in conformance DragReorderableLayoutCoordinator()
{
  uint64_t v1 = *v0;
  DragReorderableLayoutCoordinator.withStateAnimation(_:)();
  *(void *)(v1 + 152) = 0;
  *(unsigned char *)(v1 + 160) = 1;
  swift_beginAccess();
  outlined init with copy of TableColumnList(v1 + 48, (uint64_t)v5);
  uint64_t v2 = v6;
  uint64_t v3 = v7;
  __swift_project_boxed_opaque_existential_1(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 24))(v2, v3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

uint64_t partial apply for closure #1 in DragReorderableLayoutCoordinator.dropExited(info:)()
{
  return closure #1 in DragReorderableLayoutCoordinator.dropExited(info:)();
}

uint64_t sub_187B3B708()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DragReorderableLayoutCoordinator.withStateAnimation(_:)()
{
  return closure #1 in DragReorderableLayoutCoordinator.withStateAnimation(_:)();
}

uint64_t partial apply for thunk for @callee_guaranteed () -> (@error @owned Error)()
{
  return thunk for @callee_guaranteed () -> (@error @owned Error)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in DragReorderableLayoutCoordinator.withStateAnimation(_:)()
{
  return closure #1 in closure #1 in DragReorderableLayoutCoordinator.withStateAnimation(_:)();
}

uint64_t specialized DropPlaceholderListModifier.PlaceholderViews.init(base:placeholder:sourceIndex:destinationIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  *(void *)(a6 + 24) = a1;
  *(void *)(a6 + 32) = a2;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v10 = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
  uint64_t result = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t result = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
  if (v10 < 0 || result < v10) {
    goto LABEL_11;
  }
  *(void *)(a6 + 40) = v10;
  *(void *)(a6 + 48) = a3;
  *(unsigned char *)(a6 + 56) = a4 & 1;
  *(void *)(a6 + 64) = a5;
  swift_retain();
  uint64_t v12 = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
  uint64_t result = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
  if (result < 0)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v13 = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
  uint64_t result = swift_release();
  if (v12 < 0 || v13 < v12) {
    goto LABEL_13;
  }
  uint64_t v14 = *(void *)(a6 + 40);
  BOOL v15 = __OFADD__(v12, v14);
  uint64_t v16 = v12 + v14;
  if (v15)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  BOOL v17 = (a4 & 1) == 0;
  BOOL v15 = __OFSUB__(v16, v17);
  uint64_t v18 = v16 - v17;
  if (!v15)
  {
    *(void *)(a6 + 72) = v18;
    *(unsigned char *)(a6 + 16) = 0;
    return a6;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t specialized DropPlaceholderListModifier.PlaceholderViews.__allocating_init(base:placeholder:sourceIndex:destinationIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  char v9 = a4 & 1;
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = specialized DropPlaceholderListModifier.PlaceholderViews.init(base:placeholder:sourceIndex:destinationIndex:)(a1, a2, a3, v9, a5, v10);
  swift_release();
  return v11;
}

uint64_t partial apply for closure #1 in DragReorderableLayoutCoordinator.destination(at:sourceIndex:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in DragReorderableLayoutCoordinator.destination(at:sourceIndex:)(a1);
}

void type metadata accessor for (key: Int, value: DragReorderableLayoutCoordinator.ChildFrame)()
{
  if (!lazy cache variable for type metadata for (key: Int, value: DragReorderableLayoutCoordinator.ChildFrame))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: Int, value: DragReorderableLayoutCoordinator.ChildFrame));
    }
  }
}

unint64_t lazy protocol witness table accessor for type ReorderableLayoutCoordinateSpace and conformance ReorderableLayoutCoordinateSpace()
{
  unint64_t result = lazy protocol witness table cache variable for type ReorderableLayoutCoordinateSpace and conformance ReorderableLayoutCoordinateSpace;
  if (!lazy protocol witness table cache variable for type ReorderableLayoutCoordinateSpace and conformance ReorderableLayoutCoordinateSpace)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReorderableLayoutCoordinateSpace and conformance ReorderableLayoutCoordinateSpace);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReorderableLayoutCoordinateSpace and conformance ReorderableLayoutCoordinateSpace;
  if (!lazy protocol witness table cache variable for type ReorderableLayoutCoordinateSpace and conformance ReorderableLayoutCoordinateSpace)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReorderableLayoutCoordinateSpace and conformance ReorderableLayoutCoordinateSpace);
  }
  return result;
}

uint64_t partial apply for closure #1 in DragReorderableLayoutCoordinator.childFrames()@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in DragReorderableLayoutCoordinator.childFrames()(a1);
}

uint64_t partial apply for closure #2 in DragReorderableLayoutCoordinator.childFrames()@<X0>(unsigned char *a1@<X8>)
{
  return closure #2 in DragReorderableLayoutCoordinator.childFrames()(*(void *)(v1 + 16), *(void *)(v1 + 24), *(uint64_t **)(v1 + 40), a1);
}

uint64_t partial apply for closure #1 in DragReorderableLayoutCoordinator.dropUpdated(info:)()
{
  return closure #1 in DragReorderableLayoutCoordinator.dropEntered(info:)();
}

uint64_t type metadata accessor for DragReorderableLayoutView.ChildTransform()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in static DragReorderableLayoutView._makeView(view:inputs:)(uint64_t a1)
{
  return closure #1 in static DragReorderableLayoutView._makeView(view:inputs:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t (*)(void))type metadata accessor for DragReorderableLayoutView, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t type metadata accessor for DragReorderableLayoutView.MakeCoordinator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for DragReorderableLayoutCore()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for DragReorderableLayoutView.MakeCore()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #2 in static DragReorderableLayoutView._makeView(view:inputs:)(uint64_t a1)
{
  return closure #2 in static DragReorderableLayoutView._makeView(view:inputs:)(a1);
}

unint64_t lazy protocol witness table accessor for type DragSourceProxyInput and conformance DragSourceProxyInput()
{
  unint64_t result = lazy protocol witness table cache variable for type DragSourceProxyInput and conformance DragSourceProxyInput;
  if (!lazy protocol witness table cache variable for type DragSourceProxyInput and conformance DragSourceProxyInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragSourceProxyInput and conformance DragSourceProxyInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DragSourceProxyInput and conformance DragSourceProxyInput;
  if (!lazy protocol witness table cache variable for type DragSourceProxyInput and conformance DragSourceProxyInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragSourceProxyInput and conformance DragSourceProxyInput);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ConditionalDraggingModifier and conformance ConditionalDraggingModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ConditionalDraggingModifier and conformance ConditionalDraggingModifier;
  if (!lazy protocol witness table cache variable for type ConditionalDraggingModifier and conformance ConditionalDraggingModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConditionalDraggingModifier and conformance ConditionalDraggingModifier);
  }
  return result;
}

double specialized ReorderableLayout.sizeThatFits(in:context:child:)()
{
  LayoutProxy.size(in:)();
  double v1 = v0;
  double v3 = COERCE_DOUBLE(_ProposedSize.width.getter());
  if (v1 >= v3) {
    double v3 = v1;
  }
  if ((v2 & 1) == 0) {
    double v1 = v3;
  }
  _ProposedSize.height.getter();
  return v1;
}

uint64_t destroy for ConditionalDraggingModifier(uint64_t result)
{
  if (*(void *)(result + 104))
  {
    double v1 = (void *)result;
    if (*(void *)(result + 8)) {
      swift_release();
    }
    if (v1[3]) {
      swift_release();
    }
    if (v1[5]) {
      swift_release();
    }
    if (v1[7]) {
      swift_release();
    }
    if (v1[12]) {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v1 + 9));
    }
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for ConditionalDraggingModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 104);
  if (v4)
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v5 = *(void *)(a2 + 8);
    if (v5)
    {
      uint64_t v6 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v6;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    }
    uint64_t v10 = *(void *)(a2 + 24);
    if (v10)
    {
      uint64_t v11 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v10;
      *(void *)(a1 + 32) = v11;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    }
    uint64_t v12 = *(void *)(a2 + 40);
    if (v12)
    {
      uint64_t v13 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = v12;
      *(void *)(a1 + 48) = v13;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    }
    uint64_t v14 = *(void *)(a2 + 56);
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = v14;
      *(void *)(a1 + 64) = v15;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    }
    uint64_t v16 = (_OWORD *)(a1 + 72);
    BOOL v17 = (_OWORD *)(a2 + 72);
    uint64_t v18 = *(void *)(a2 + 96);
    if (v18)
    {
      *(void *)(a1 + 96) = v18;
      (**(void (***)(_OWORD *, _OWORD *))(v18 - 8))(v16, v17);
      uint64_t v4 = *(void *)(a2 + 104);
    }
    else
    {
      long long v19 = *(_OWORD *)(a2 + 88);
      _OWORD *v16 = *v17;
      *(_OWORD *)(a1 + 88) = v19;
    }
    uint64_t v20 = *(void *)(a2 + 112);
    *(void *)(a1 + 104) = v4;
    *(void *)(a1 + 112) = v20;
    swift_retain();
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v7;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    long long v9 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v9;
  }
  return a1;
}

uint64_t assignWithCopy for ConditionalDraggingModifier(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 13);
  if (*(void *)(a1 + 104))
  {
    if (v4)
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v6 = (long long *)((char *)a2 + 8);
      uint64_t v5 = *((void *)a2 + 1);
      if (*(void *)(a1 + 8))
      {
        if (v5)
        {
          uint64_t v7 = *((void *)a2 + 2);
          *(void *)(a1 + 8) = v5;
          *(void *)(a1 + 16) = v7;
          swift_retain();
          swift_release();
          goto LABEL_15;
        }
        swift_release();
      }
      else if (v5)
      {
        uint64_t v16 = *((void *)a2 + 2);
        *(void *)(a1 + 8) = v5;
        *(void *)(a1 + 16) = v16;
        swift_retain();
        goto LABEL_15;
      }
      *(_OWORD *)(a1 + 8) = *v6;
LABEL_15:
      uint64_t v23 = *((void *)a2 + 3);
      if (*(void *)(a1 + 24))
      {
        if (v23)
        {
          uint64_t v24 = *((void *)a2 + 4);
          *(void *)(a1 + 24) = v23;
          *(void *)(a1 + 32) = v24;
          swift_retain();
          swift_release();
          goto LABEL_25;
        }
        swift_release();
      }
      else if (v23)
      {
        uint64_t v25 = *((void *)a2 + 4);
        *(void *)(a1 + 24) = v23;
        *(void *)(a1 + 32) = v25;
        swift_retain();
        goto LABEL_25;
      }
      *(_OWORD *)(a1 + 24) = *(long long *)((char *)a2 + 24);
LABEL_25:
      uint64_t v28 = *((void *)a2 + 5);
      if (*(void *)(a1 + 40))
      {
        if (v28)
        {
          uint64_t v29 = *((void *)a2 + 6);
          *(void *)(a1 + 40) = v28;
          *(void *)(a1 + 48) = v29;
          swift_retain();
          swift_release();
          goto LABEL_35;
        }
        swift_release();
      }
      else if (v28)
      {
        uint64_t v30 = *((void *)a2 + 6);
        *(void *)(a1 + 40) = v28;
        *(void *)(a1 + 48) = v30;
        swift_retain();
        goto LABEL_35;
      }
      *(_OWORD *)(a1 + 40) = *(long long *)((char *)a2 + 40);
LABEL_35:
      uint64_t v33 = *((void *)a2 + 7);
      if (*(void *)(a1 + 56))
      {
        if (v33)
        {
          uint64_t v34 = *((void *)a2 + 8);
          *(void *)(a1 + 56) = v33;
          *(void *)(a1 + 64) = v34;
          swift_retain();
          swift_release();
          goto LABEL_45;
        }
        swift_release();
      }
      else if (v33)
      {
        uint64_t v35 = *((void *)a2 + 8);
        *(void *)(a1 + 56) = v33;
        *(void *)(a1 + 64) = v35;
        swift_retain();
        goto LABEL_45;
      }
      *(_OWORD *)(a1 + 56) = *(long long *)((char *)a2 + 56);
LABEL_45:
      uint64_t v38 = *((void *)a2 + 12);
      if (*(void *)(a1 + 96))
      {
        if (v38)
        {
          __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 72), (uint64_t *)a2 + 9);
LABEL_55:
          uint64_t v43 = *((void *)a2 + 14);
          *(void *)(a1 + 104) = *((void *)a2 + 13);
          *(void *)(a1 + 112) = v43;
          swift_retain();
          swift_release();
          return a1;
        }
        __swift_destroy_boxed_opaque_existential_1(a1 + 72);
      }
      else if (v38)
      {
        *(void *)(a1 + 96) = v38;
        (**(void (***)(uint64_t, uint64_t))(v38 - 8))(a1 + 72, (uint64_t)a2 + 72);
        goto LABEL_55;
      }
      long long v42 = *(long long *)((char *)a2 + 88);
      *(_OWORD *)(a1 + 72) = *(long long *)((char *)a2 + 72);
      *(_OWORD *)(a1 + 88) = v42;
      goto LABEL_55;
    }
    outlined destroy of _DraggingModifier(a1);
    long long v10 = a2[3];
    long long v12 = *a2;
    long long v11 = a2[1];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + 48) = v10;
    *(_OWORD *)a1 = v12;
    *(_OWORD *)(a1 + 16) = v11;
    long long v14 = a2[5];
    long long v13 = a2[6];
    long long v15 = a2[4];
    *(void *)(a1 + 112) = *((void *)a2 + 14);
    *(_OWORD *)(a1 + 80) = v14;
    *(_OWORD *)(a1 + 96) = v13;
    *(_OWORD *)(a1 + 64) = v15;
  }
  else if (v4)
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    if (v8)
    {
      uint64_t v9 = *((void *)a2 + 2);
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v9;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 8) = *(long long *)((char *)a2 + 8);
    }
    uint64_t v26 = *((void *)a2 + 3);
    if (v26)
    {
      uint64_t v27 = *((void *)a2 + 4);
      *(void *)(a1 + 24) = v26;
      *(void *)(a1 + 32) = v27;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 24) = *(long long *)((char *)a2 + 24);
    }
    uint64_t v31 = *((void *)a2 + 5);
    if (v31)
    {
      uint64_t v32 = *((void *)a2 + 6);
      *(void *)(a1 + 40) = v31;
      *(void *)(a1 + 48) = v32;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 40) = *(long long *)((char *)a2 + 40);
    }
    uint64_t v36 = *((void *)a2 + 7);
    if (v36)
    {
      uint64_t v37 = *((void *)a2 + 8);
      *(void *)(a1 + 56) = v36;
      *(void *)(a1 + 64) = v37;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 56) = *(long long *)((char *)a2 + 56);
    }
    uint64_t v39 = (_OWORD *)(a1 + 72);
    uint64_t v40 = (long long *)((char *)a2 + 72);
    uint64_t v41 = *((void *)a2 + 12);
    if (v41)
    {
      *(void *)(a1 + 96) = v41;
      (**(void (***)(_OWORD *, _OWORD *))(v41 - 8))(v39, v40);
    }
    else
    {
      long long v44 = *(long long *)((char *)a2 + 88);
      *uint64_t v39 = *v40;
      *(_OWORD *)(a1 + 88) = v44;
    }
    uint64_t v45 = *((void *)a2 + 14);
    *(void *)(a1 + 104) = *((void *)a2 + 13);
    *(void *)(a1 + 112) = v45;
    swift_retain();
  }
  else
  {
    long long v17 = *a2;
    long long v18 = a2[1];
    long long v19 = a2[3];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + 48) = v19;
    *(_OWORD *)a1 = v17;
    *(_OWORD *)(a1 + 16) = v18;
    long long v20 = a2[4];
    long long v21 = a2[5];
    long long v22 = a2[6];
    *(void *)(a1 + 112) = *((void *)a2 + 14);
    *(_OWORD *)(a1 + 80) = v21;
    *(_OWORD *)(a1 + 96) = v22;
    *(_OWORD *)(a1 + 64) = v20;
  }
  return a1;
}

uint64_t assignWithTake for ConditionalDraggingModifier(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 104)) {
    goto LABEL_7;
  }
  uint64_t v4 = *(void *)(a2 + 104);
  if (!v4)
  {
    outlined destroy of _DraggingModifier(a1);
LABEL_7:
    long long v8 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v8;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    long long v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    long long v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v10;
    return a1;
  }
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = (_OWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8))
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v7;
      swift_release();
      goto LABEL_12;
    }
    swift_release();
  }
  else if (v5)
  {
    uint64_t v11 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v11;
    goto LABEL_12;
  }
  *(_OWORD *)(a1 + 8) = *v6;
LABEL_12:
  uint64_t v12 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24))
  {
    if (v12)
    {
      uint64_t v13 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v12;
      *(void *)(a1 + 32) = v13;
      swift_release();
      goto LABEL_19;
    }
    swift_release();
  }
  else if (v12)
  {
    uint64_t v14 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v12;
    *(void *)(a1 + 32) = v14;
    goto LABEL_19;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
LABEL_19:
  uint64_t v15 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v15)
    {
      uint64_t v16 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = v15;
      *(void *)(a1 + 48) = v16;
      swift_release();
      goto LABEL_26;
    }
    swift_release();
  }
  else if (v15)
  {
    uint64_t v17 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = v15;
    *(void *)(a1 + 48) = v17;
    goto LABEL_26;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
LABEL_26:
  uint64_t v18 = *(void *)(a2 + 56);
  if (!*(void *)(a1 + 56))
  {
    if (v18)
    {
      uint64_t v20 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = v18;
      *(void *)(a1 + 64) = v20;
      goto LABEL_33;
    }
LABEL_32:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    goto LABEL_33;
  }
  if (!v18)
  {
    swift_release();
    goto LABEL_32;
  }
  uint64_t v19 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = v18;
  *(void *)(a1 + 64) = v19;
  swift_release();
LABEL_33:
  if (*(void *)(a1 + 96)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 72);
  }
  long long v21 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = v21;
  uint64_t v22 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = v4;
  *(void *)(a1 + 112) = v22;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ConditionalDraggingModifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 120)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 104);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ConditionalDraggingModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 120) = 0;
    }
    if (a2) {
      *(void *)(result + 104) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConditionalDraggingModifier()
{
  return &type metadata for ConditionalDraggingModifier;
}

void *type metadata accessor for DragSourceProxyInput()
{
  return &unk_1ED430720;
}

uint64_t type metadata completion function for DragReorderableLayoutCore()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t result = type metadata accessor for DragReorderableLayoutAdaptor();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for DragReorderableLayoutCore(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v51 = *(void *)(v3 + 64);
  uint64_t v4 = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v50 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v50 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  if (*(_DWORD *)(v9 + 84)) {
    uint64_t v11 = *(void *)(v9 + 64);
  }
  else {
    uint64_t v11 = *(void *)(v9 + 64) + 1;
  }
  unsigned int v12 = v10 | *(_DWORD *)(v3 + 80) & 0xF8 | v6;
  BOOL v13 = v12 <= 7 && ((*(_DWORD *)(v9 + 80) | v6 | *(_DWORD *)(v3 + 80)) & 0x100000) == 0;
  if (v13
    && (uint64_t v14 = v51 + v6,
        uint64_t v15 = v8 + 7,
        unint64_t v16 = ((((((((((v8 + 7 + (v14 & ~(unint64_t)v6)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)
                  + 31) & 0xFFFFFFFFFFFFFFF8)
                + 47) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15,
        ((v10 + 41 + (((v16 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v10) + v11 <= 0x18))
  {
    uint64_t v17 = ~v7;
    uint64_t v52 = ~v10;
    uint64_t v18 = a2;
    uint64_t v19 = a1;
    uint64_t v20 = AssociatedTypeWitness;
    size_t __n = v11;
    uint64_t v49 = v10 + 41;
    (*(void (**)(void *, void *, uint64_t))(v3 + 16))(a1, v18, v20);
    unint64_t v21 = ((unint64_t)a1 + v14) & v17;
    unint64_t v22 = ((unint64_t)v18 + v14) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(v21, v22, v4);
    uint64_t v23 = (_OWORD *)((v15 + v21) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v24 = (_OWORD *)((v15 + v22) & 0xFFFFFFFFFFFFFFF8);
    long long v25 = v24[1];
    _OWORD *v23 = *v24;
    v23[1] = v25;
    uint64_t v26 = (void *)(((unint64_t)v23 + 39) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v27 = (void *)(((unint64_t)v24 + 39) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v26 = *v27;
    unint64_t v28 = ((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v29 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v30 = *(void *)v29;
    *(unsigned char *)(v28 + 8) = *(unsigned char *)(v29 + 8);
    *(void *)unint64_t v28 = v30;
    unint64_t v31 = ((unint64_t)v26 + 31) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v32 = ((unint64_t)v27 + 31) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v33 = *(void *)(v32 + 24);
    *(void *)(v31 + 24) = v33;
    *(void *)(v31 + 32) = *(void *)(v32 + 32);
    uint64_t v34 = **(void (***)(unint64_t, unint64_t, uint64_t))(v33 - 8);
    swift_bridgeObjectRetain();
    v34(v31, v32, v33);
    uint64_t v35 = (void *)((v31 + 47) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v36 = (void *)((v32 + 47) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v35 = *v36;
    *(void *)(((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v37 = (void *)(((unint64_t)a1 + v16) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v38 = (void *)(((unint64_t)v18 + v16) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v37 = *v38;
    unint64_t v39 = ((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v40 = ((unint64_t)v38 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v39 = *(void *)v40;
    *(void *)(v39 + 8) = *(void *)(v40 + 8);
    long long v41 = *(_OWORD *)(v40 + 16);
    *(_OWORD *)(v39 + 25) = *(_OWORD *)(v40 + 25);
    *(_OWORD *)(v39 + 16) = v41;
    long long v42 = (void *)((v49 + v39) & v52);
    uint64_t v43 = (const void *)((v49 + v40) & v52);
    long long v44 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
    swift_retain();
    swift_retain();
    swift_retain();
    if (v44(v43, 1, v50))
    {
      memcpy(v42, v43, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v42, v43, v50);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v42, 0, 1, v50);
    }
  }
  else
  {
    uint64_t v45 = *a2;
    *a1 = *a2;
    uint64_t v19 = (void *)(v45 + (((v12 | 7) + 16) & ~(unint64_t)(v12 | 7)));
    swift_retain();
  }
  return v19;
}

uint64_t destroy for DragReorderableLayoutCore(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v3)(a1, AssociatedTypeWitness);
  uint64_t v4 = *(void *)(v3 + 56);
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6 + 8;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = v4 + v8;
  uint64_t v10 = (v4 + v8 + a1) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v5);
  uint64_t v11 = *(void *)(v7 + 56) + 7;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((((((v11 + v10) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v12 - 8);
  unint64_t v14 = (((((a1
           + ((((((((((v11 + (v9 & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
               + 47) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + *(unsigned __int8 *)(v13 + 80)
       + 41) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v17 = v13;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))(v14, 1, v12);
  if (!result)
  {
    unint64_t v16 = *(uint64_t (**)(unint64_t, uint64_t))(v17 + 8);
    return v16(v14, v12);
  }
  return result;
}

uint64_t initializeWithCopy for DragReorderableLayoutCore(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v6 + v10;
  uint64_t v12 = (v6 + v10 + a1) & ~v10;
  uint64_t v13 = (v6 + v10 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v12, v13, v7);
  uint64_t v14 = *(void *)(v9 + 48) + 7;
  uint64_t v15 = (_OWORD *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = (_OWORD *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  long long v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  uint64_t v18 = (void *)(((unint64_t)v15 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (void *)(((unint64_t)v16 + 39) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v18 = *v19;
  unint64_t v20 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  char v22 = *(unsigned char *)(v21 + 8);
  *(void *)unint64_t v20 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = v22;
  unint64_t v23 = ((unint64_t)v18 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = ((unint64_t)v19 + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v25 = *(void *)(v24 + 24);
  *(void *)(v23 + 24) = v25;
  *(void *)(v23 + 32) = *(void *)(v24 + 32);
  uint64_t v26 = **(void (***)(unint64_t, unint64_t, uint64_t))(v25 - 8);
  swift_bridgeObjectRetain();
  v26(v23, v24, v25);
  uint64_t v27 = (void *)((v23 + 47) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v28 = (void *)((v24 + 47) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v27 = *v28;
  *(void *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v29 = v11 & ~v10;
  uint64_t v30 = a1;
  unint64_t v31 = ((((((((((v14 + v29) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 15;
  unint64_t v32 = (void *)((v31 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v33 = (void *)((v31 + a2) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v32 = *v33;
  unint64_t v34 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v35 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v34 = *(void *)v35;
  *(void *)(v34 + 8) = *(void *)(v35 + 8);
  long long v36 = *(_OWORD *)(v35 + 16);
  *(_OWORD *)(v34 + 25) = *(_OWORD *)(v35 + 25);
  *(_OWORD *)(v34 + 16) = v36;
  uint64_t v37 = swift_getAssociatedTypeWitness();
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = *(unsigned __int8 *)(v38 + 80);
  unint64_t v40 = (void *)((v39 + 41 + v34) & ~v39);
  long long v41 = (const void *)((v39 + 41 + v35) & ~v39);
  long long v42 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v38 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  if (v42(v41, 1, v37))
  {
    if (*(_DWORD *)(v38 + 84)) {
      size_t v43 = *(void *)(v38 + 64);
    }
    else {
      size_t v43 = *(void *)(v38 + 64) + 1;
    }
    memcpy(v40, v41, v43);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v38 + 16))(v40, v41, v37);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v40, 0, 1, v37);
  }
  return v30;
}

uint64_t assignWithCopy for DragReorderableLayoutCore(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v6 + v10;
  uint64_t v12 = (v6 + v10 + a1) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v12, (v11 + a2) & ~v10, v7);
  uint64_t v13 = *(void *)(v9 + 40) + 7;
  unint64_t v14 = (v13 + v12) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = (void *)((v13 + ((v11 + a2) & ~v10)) & 0xFFFFFFFFFFFFFFF8);
  *(void *)unint64_t v14 = *v15;
  *(void *)(v14 + 8) = v15[1];
  *(void *)(v14 + 16) = v15[2];
  *(void *)(v14 + 24) = v15[3];
  v14 += 39;
  unint64_t v16 = (void *)(((unint64_t)v15 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(void *)(v14 & 0xFFFFFFFFFFFFFFF8) = *v16;
  unint64_t v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v19 = v17 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  *(void *)unint64_t v19 = v21;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(v18 & 0xFFFFFFFFFFFFFFF8), (uint64_t *)(((unint64_t)v16 + 31) & 0xFFFFFFFFFFFFFFF8));
  char v22 = (void *)(((v18 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v23 = (void *)(((((unint64_t)v16 + 31) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8);
  *char v22 = *v23;
  *(void *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v24 = v11 & ~v10;
  uint64_t v25 = a1;
  unint64_t v26 = ((((((((((v13 + v24) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 15;
  uint64_t v27 = (void *)((v26 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v28 = v26 + a2;
  unint64_t v29 = (v28 & 0xFFFFFFFFFFFFFFF8) + 15;
  *uint64_t v27 = *(void *)(v28 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  unint64_t v30 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v31 = v29 & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v30 = *(void *)(v29 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  *(void *)(v30 + 8) = *(void *)((v29 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_retain();
  swift_release();
  uint64_t v32 = *(void *)((v29 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(unsigned char *)(v30 + 24) = *(unsigned char *)((v29 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(void *)(v30 + 16) = v32;
  uint64_t v33 = *(void *)((v29 & 0xFFFFFFFFFFFFFFF8) + 32);
  *(unsigned char *)(v30 + 40) = *(unsigned char *)((v29 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(void *)(v30 + 32) = v33;
  uint64_t v34 = swift_getAssociatedTypeWitness();
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = *(unsigned __int8 *)(v35 + 80);
  uint64_t v37 = (void *)((v36 + 41 + v30) & ~v36);
  uint64_t v38 = (void *)((v36 + 41 + v31) & ~v36);
  uint64_t v39 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v35 + 48);
  LODWORD(a2) = v39(v37, 1, v34);
  int v40 = v39(v38, 1, v34);
  if (a2)
  {
    if (!v40)
    {
      (*(void (**)(void *, void *, uint64_t))(v35 + 16))(v37, v38, v34);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(v37, 0, 1, v34);
      return v25;
    }
    int v41 = *(_DWORD *)(v35 + 84);
    size_t v42 = *(void *)(v35 + 64);
  }
  else
  {
    if (!v40)
    {
      (*(void (**)(void *, void *, uint64_t))(v35 + 24))(v37, v38, v34);
      return v25;
    }
    long long v44 = *(void (**)(void *, uint64_t))(v35 + 8);
    uint64_t v43 = v35 + 8;
    v44(v37, v34);
    int v41 = *(_DWORD *)(v43 + 76);
    size_t v42 = *(void *)(v43 + 56);
  }
  if (v41) {
    size_t v45 = v42;
  }
  else {
    size_t v45 = v42 + 1;
  }
  memcpy(v37, v38, v45);
  return v25;
}

uint64_t initializeWithTake for DragReorderableLayoutCore(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v6 + v10;
  uint64_t v12 = (v6 + v10 + a1) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v12, (v11 + a2) & ~v10, v7);
  uint64_t v13 = *(void *)(v9 + 32) + 7;
  unint64_t v14 = (_OWORD *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (_OWORD *)((v13 + ((v11 + a2) & ~v10)) & 0xFFFFFFFFFFFFFFF8);
  long long v16 = v15[1];
  *unint64_t v14 = *v15;
  v14[1] = v16;
  unint64_t v17 = (void *)(((unint64_t)v14 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v18 = (void *)(((unint64_t)v15 + 39) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v17 = *v18;
  unint64_t v19 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  char v21 = *(unsigned char *)(v20 + 8);
  *(void *)unint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = v21;
  unint64_t v22 = ((unint64_t)v17 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = ((unint64_t)v18 + 31) & 0xFFFFFFFFFFFFFFF8;
  long long v25 = *(_OWORD *)v23;
  long long v24 = *(_OWORD *)(v23 + 16);
  *(void *)(v22 + 32) = *(void *)(v23 + 32);
  *(_OWORD *)unint64_t v22 = v25;
  *(_OWORD *)(v22 + 16) = v24;
  unint64_t v26 = (void *)((v22 + 47) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v27 = (void *)((v23 + 47) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v26 = *v27;
  *(void *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v28 = ((((((((((v13 + (v11 & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
          + 47) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 15;
  unint64_t v29 = (void *)((v28 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v30 = (void *)((v28 + a2) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v29 = *v30;
  unint64_t v31 = (_OWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v32 = (long long *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v34 = *v32;
  long long v33 = v32[1];
  *(_OWORD *)((char *)v31 + 25) = *(long long *)((char *)v32 + 25);
  _OWORD *v31 = v34;
  v31[1] = v33;
  uint64_t v35 = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(unsigned __int8 *)(v36 + 80);
  uint64_t v38 = (void *)(((unint64_t)v31 + v37 + 41) & ~v37);
  uint64_t v39 = (const void *)(((unint64_t)v32 + v37 + 41) & ~v37);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v36 + 48))(v39, 1, v35))
  {
    if (*(_DWORD *)(v36 + 84)) {
      size_t v40 = *(void *)(v36 + 64);
    }
    else {
      size_t v40 = *(void *)(v36 + 64) + 1;
    }
    memcpy(v38, v39, v40);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v36 + 32))(v38, v39, v35);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v38, 0, 1, v35);
  }
  return a1;
}

uint64_t assignWithTake for DragReorderableLayoutCore(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v6 + v10;
  uint64_t v12 = (v6 + v10 + a1) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v12, (v11 + a2) & ~v10, v7);
  uint64_t v13 = *(void *)(v9 + 24) + 7;
  unint64_t v14 = (v13 + v12) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = (void *)((v13 + ((v11 + a2) & ~v10)) & 0xFFFFFFFFFFFFFFF8);
  *(void *)unint64_t v14 = *v15;
  *(void *)(v14 + 8) = v15[1];
  *(void *)(v14 + 16) = v15[2];
  *(void *)(v14 + 24) = v15[3];
  v14 += 39;
  long long v16 = (void *)(((unint64_t)v15 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v17 = v16;
  unint64_t v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(void *)(v14 & 0xFFFFFFFFFFFFFFF8) = *v16;
  unint64_t v19 = (v14 & 0xFFFFFFFFFFFFFFF8) + 31;
  swift_bridgeObjectRelease();
  unint64_t v20 = v18 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = *(unsigned char *)(v21 + 8);
  *(void *)unint64_t v20 = v22;
  unint64_t v23 = v19 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = ((unint64_t)v17 + 31) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v19 & 0xFFFFFFFFFFFFFFF8);
  long long v25 = *(_OWORD *)v24;
  long long v26 = *(_OWORD *)(v24 + 16);
  *(void *)(v23 + 32) = *(void *)(v24 + 32);
  *(_OWORD *)unint64_t v23 = v25;
  *(_OWORD *)(v23 + 16) = v26;
  uint64_t v27 = (void *)(((v19 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v28 = (void *)((v24 + 47) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v27 = *v28;
  *(void *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v29 = v11 & ~v10;
  uint64_t v30 = a1;
  unint64_t v31 = ((((((((((v13 + v29) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 15;
  uint64_t v32 = (void *)((v31 + a1) & 0xFFFFFFFFFFFFFFF8);
  long long v33 = (void *)((v31 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v32 = *v33;
  swift_release();
  unint64_t v34 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v35 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v34 = *(void *)v35;
  swift_release();
  *(void *)(v34 + 8) = *(void *)(v35 + 8);
  swift_release();
  uint64_t v36 = *(void *)(v35 + 16);
  *(unsigned char *)(v34 + 24) = *(unsigned char *)(v35 + 24);
  *(void *)(v34 + 16) = v36;
  uint64_t v37 = *(void *)(v35 + 32);
  *(unsigned char *)(v34 + 40) = *(unsigned char *)(v35 + 40);
  *(void *)(v34 + 32) = v37;
  uint64_t v38 = swift_getAssociatedTypeWitness();
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v40 = *(unsigned __int8 *)(v39 + 80);
  int v41 = (void *)((v40 + 41 + v34) & ~v40);
  size_t v42 = (void *)((v40 + 41 + v35) & ~v40);
  uint64_t v43 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v39 + 48);
  LODWORD(a2) = v43(v41, 1, v38);
  int v44 = v43(v42, 1, v38);
  if (a2)
  {
    if (!v44)
    {
      (*(void (**)(void *, void *, uint64_t))(v39 + 32))(v41, v42, v38);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v39 + 56))(v41, 0, 1, v38);
      return v30;
    }
    int v45 = *(_DWORD *)(v39 + 84);
    size_t v46 = *(void *)(v39 + 64);
  }
  else
  {
    if (!v44)
    {
      (*(void (**)(void *, void *, uint64_t))(v39 + 40))(v41, v42, v38);
      return v30;
    }
    char v48 = *(void (**)(void *, uint64_t))(v39 + 8);
    uint64_t v47 = v39 + 8;
    v48(v41, v38);
    int v45 = *(_DWORD *)(v47 + 76);
    size_t v46 = *(void *)(v47 + 56);
  }
  if (v45) {
    size_t v49 = v46;
  }
  else {
    size_t v49 = v46 + 1;
  }
  memcpy(v41, v42, v49);
  return v30;
}

uint64_t getEnumTagSinglePayload for DragReorderableLayoutCore(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v38 = AssociatedTypeWitness;
  uint64_t v5 = *(unsigned int *)(v4 + 84);
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  unsigned int v37 = v7;
  if (v7 <= v5) {
    unsigned int v7 = v5;
  }
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v10 = v9;
  int v11 = *(_DWORD *)(v9 + 84);
  if (v11) {
    unsigned int v12 = v11 - 1;
  }
  else {
    unsigned int v12 = 0;
  }
  if (v12 <= v8) {
    unsigned int v13 = v8;
  }
  else {
    unsigned int v13 = v12;
  }
  uint64_t v14 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v15 = *(void *)(v6 + 64);
  uint64_t v16 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = *(void *)(v9 + 64);
  if (v11) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = v17 + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v19 = *(void *)(v4 + 64) + v14;
  uint64_t v20 = v15 + 7;
  unint64_t v21 = (((((((((v15 + 7 + (v19 & ~v14)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
         + 47) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = v16 + 41;
  if (a2 <= v13) {
    goto LABEL_36;
  }
  uint64_t v23 = v18 + ((v22 + ((((v21 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v16);
  char v24 = 8 * v23;
  if (v23 > 3) {
    goto LABEL_18;
  }
  unsigned int v27 = ((a2 - v13 + ~(-1 << v24)) >> v24) + 1;
  if (HIWORD(v27))
  {
    int v25 = *(_DWORD *)((char *)a1 + v23);
    if (v25) {
      goto LABEL_26;
    }
  }
  else
  {
    if (v27 <= 0xFF)
    {
      if (v27 < 2) {
        goto LABEL_36;
      }
LABEL_18:
      int v25 = *((unsigned __int8 *)a1 + v23);
      if (!*((unsigned char *)a1 + v23)) {
        goto LABEL_36;
      }
LABEL_26:
      int v28 = (v25 - 1) << v24;
      if (v23 > 3) {
        int v28 = 0;
      }
      if (v23)
      {
        if (v23 <= 3) {
          int v29 = v23;
        }
        else {
          int v29 = 4;
        }
        switch(v29)
        {
          case 2:
            int v30 = *a1;
            break;
          case 3:
            int v30 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v30 = *(_DWORD *)a1;
            break;
          default:
            int v30 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v30 = 0;
      }
      return v13 + (v30 | v28) + 1;
    }
    int v25 = *(unsigned __int16 *)((char *)a1 + v23);
    if (*(unsigned __int16 *)((char *)a1 + v23)) {
      goto LABEL_26;
    }
  }
LABEL_36:
  if (v8 < v12)
  {
    unint64_t v31 = (unint64_t *)(((unint64_t)a1 + v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    if (v13 != 0x7FFFFFFF)
    {
      unsigned int v32 = (*(uint64_t (**)(unint64_t))(v10 + 48))((v22
                                                                    + (((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v16);
      if (v32 >= 2) {
        return v32 - 1;
      }
      else {
        return 0;
      }
    }
    goto LABEL_50;
  }
  if (v5 == v8)
  {
    long long v33 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v4 + 48);
    return v33(a1, v5, v38);
  }
  else
  {
    unint64_t v34 = ((unint64_t)a1 + v19) & ~v14;
    if (v37 != v8)
    {
      unint64_t v31 = (unint64_t *)((((v20 + v34) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8);
LABEL_50:
      unint64_t v36 = *v31;
      if (v36 >= 0xFFFFFFFF) {
        LODWORD(v36) = -1;
      }
      return (v36 + 1);
    }
    unint64_t v35 = *(uint64_t (**)(unint64_t))(v6 + 48);
    return v35(v34);
  }
}

void storeEnumTagSinglePayload for DragReorderableLayoutCore(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v46 = AssociatedTypeWitness;
  uint64_t v5 = *(unsigned int *)(v4 + 84);
  uint64_t v45 = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(v45 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= v5) {
    unsigned int v8 = v5;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = v8;
  }
  int v10 = 0;
  uint64_t v11 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v12 = v11;
  int v13 = *(_DWORD *)(v11 + 84);
  unsigned int v14 = v13 - 1;
  if (!v13) {
    unsigned int v14 = 0;
  }
  if (v14 <= v9) {
    unsigned int v15 = v9;
  }
  else {
    unsigned int v15 = v14;
  }
  uint64_t v16 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v17 = *(void *)(v4 + 64) + v16;
  uint64_t v18 = *(void *)(v6 + 64) + 7;
  unint64_t v19 = (((((((((v18 + (v17 & ~v16)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
         + 47) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v21 = v20 + 41;
  size_t v22 = *(void *)(v11 + 64);
  if (v13) {
    size_t v23 = v22;
  }
  else {
    size_t v23 = v22 + 1;
  }
  size_t v24 = ((v20 + 41 + ((((v19 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v20) + v23;
  if (a3 > v15)
  {
    if (v24 <= 3)
    {
      unsigned int v25 = ((a3 - v15 + ~(-1 << (8 * v24))) >> (8 * v24)) + 1;
      if (HIWORD(v25))
      {
        int v10 = 4;
      }
      else if (v25 >= 0x100)
      {
        int v10 = 2;
      }
      else
      {
        int v10 = v25 > 1;
      }
    }
    else
    {
      int v10 = 1;
    }
  }
  if (v15 < a2)
  {
    unsigned int v26 = ~v15 + a2;
    if (v24 < 4)
    {
      int v27 = (v26 >> (8 * v24)) + 1;
      if (v24)
      {
        int v31 = v26 & ~(-1 << (8 * v24));
        bzero(a1, v24);
        if (v24 == 3)
        {
          *(_WORD *)a1 = v31;
          a1[2] = BYTE2(v31);
        }
        else if (v24 == 2)
        {
          *(_WORD *)a1 = v31;
        }
        else
        {
          *a1 = v31;
        }
      }
    }
    else
    {
      bzero(a1, v24);
      *(_DWORD *)a1 = v26;
      int v27 = 1;
    }
    switch(v10)
    {
      case 1:
        a1[v24] = v27;
        return;
      case 2:
        *(_WORD *)&a1[v24] = v27;
        return;
      case 3:
        goto LABEL_77;
      case 4:
        *(_DWORD *)&a1[v24] = v27;
        return;
      default:
        return;
    }
  }
  size_t v28 = v19 + 8;
  uint64_t v29 = ~v16;
  uint64_t v30 = ~v20;
  switch(v10)
  {
    case 1:
      a1[v24] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)&a1[v24] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 3:
LABEL_77:
      __break(1u);
      JUMPOUT(0x187B3EF30);
    case 4:
      *(_DWORD *)&a1[v24] = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (!a2) {
        return;
      }
LABEL_35:
      if (v9 >= v14)
      {
        if (v9 >= a2)
        {
          if (v5 == v9)
          {
            uint64_t v39 = v46;
            uint64_t v40 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
            int v41 = a1;
            uint64_t v42 = a2;
            uint64_t v43 = v5;
          }
          else
          {
            int v41 = (unsigned char *)((unint64_t)&a1[v17] & v29);
            if (v7 != v9)
            {
              unsigned int v32 = (void *)((((unint64_t)&v41[v18] & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) == 0) {
                goto LABEL_38;
              }
              goto LABEL_71;
            }
            uint64_t v40 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
            uint64_t v42 = a2;
            uint64_t v43 = v7;
            uint64_t v39 = v45;
          }
          v40(v41, v42, v43, v39);
        }
        else if (v19 != -8)
        {
          bzero(a1, v28);
          *(_DWORD *)a1 = ~v9 + a2;
        }
      }
      else
      {
        unsigned int v32 = (void *)((unint64_t)&a1[v28 + 7] & 0xFFFFFFFFFFFFFFF8);
        if (v15 == 0x7FFFFFFF)
        {
          if ((a2 & 0x80000000) == 0)
          {
LABEL_38:
            uint64_t v33 = a2 - 1;
LABEL_72:
            *unsigned int v32 = v33;
            return;
          }
LABEL_71:
          uint64_t v33 = a2 ^ 0x80000000;
          goto LABEL_72;
        }
        uint64_t v34 = v21 + (((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v35 = (unsigned char *)(v34 & v30);
        if (v14 >= a2)
        {
          int v44 = *(void (**)(uint64_t, void))(v12 + 56);
          v44(v34 & v30, a2 + 1);
        }
        else
        {
          if (v23 <= 3) {
            int v36 = ~(-1 << (8 * v23));
          }
          else {
            int v36 = -1;
          }
          if (v23)
          {
            int v37 = v36 & (~v14 + a2);
            if (v23 <= 3) {
              int v38 = v23;
            }
            else {
              int v38 = 4;
            }
            bzero(v35, v23);
            switch(v38)
            {
              case 2:
                *(_WORD *)unint64_t v35 = v37;
                break;
              case 3:
                *(_WORD *)unint64_t v35 = v37;
                v35[2] = BYTE2(v37);
                break;
              case 4:
                *(_DWORD *)unint64_t v35 = v37;
                break;
              default:
                *unint64_t v35 = v37;
                break;
            }
          }
        }
      }
      return;
  }
}

void *type metadata accessor for DragReorderableContext()
{
  return &unk_1ED439158;
}

ValueMetadata *type metadata accessor for ReorderableChildCoordinateSpace()
{
  return &type metadata for ReorderableChildCoordinateSpace;
}

void *type metadata accessor for ReorderableLayoutCoordinateSpace()
{
  return &unk_1ED45D5B8;
}

ValueMetadata *type metadata accessor for _DragReorderableView_DropDestination()
{
  return &type metadata for _DragReorderableView_DropDestination;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ConditionalDraggingModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in DragReorderableLayoutCore<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in DragReorderableLayoutView<A>.MakeCore()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in DragReorderableLayoutView<A>.MakeCoordinator()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in DragReorderableLayoutView<A>.ChildTransform()
{
  return swift_getWitnessTable();
}

void type metadata accessor for ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>(uint64_t a1)
{
}

void type metadata accessor for _ConditionalContent<ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, MappedViewElement.Placeholder>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    unint64_t v10 = a5(a1, v9, a4);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>)
  {
    type metadata accessor for Binding<_DragReorderableView_DragState>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, MappedViewElement.Placeholder> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, MappedViewElement.Placeholder> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, MappedViewElement.Placeholder> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, MappedViewElement.Placeholder>(255, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, MappedViewElement.Placeholder>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, (uint64_t)&type metadata for MappedViewElement.Placeholder, MEMORY[0x1E4F40578]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, MappedViewElement.Placeholder> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t type metadata accessor for DropPlaceholderListModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187B3F40C()
{
  uint64_t v1 = (int *)(type metadata accessor for DragReorderableLayoutCore() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v2, AssociatedTypeWitness);
  uint64_t v4 = swift_getAssociatedTypeWitness();
  uint64_t v5 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = type metadata accessor for DragReorderableLayoutAdaptor();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v2 + *(int *)(v6 + 68), v4);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v2 + *(int *)(v6 + 84));
  swift_release();
  swift_release();
  swift_release();
  uint64_t v7 = v2 + v1[13];
  uint64_t v8 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v7, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v5);
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DragReorderableLayoutCore.children.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for DragReorderableLayoutCore();

  return closure #1 in DragReorderableLayoutCore.children.getter(a1, a2);
}

uint64_t outlined destroy of DragReorderableChildModifier(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t partial apply for closure #1 in DragReorderableLayoutCore.draggableView<A>(_:offset:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for DragReorderableLayoutCore() - 8);
  return DragReorderableLayoutCoordinator.dragBegan(at:)(*(void *)(v0
                                                                   + ((*(void *)(v1 + 64)
                                                                     + ((*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
                                                                     + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_187B3F894()
{
  uint64_t v1 = (int *)(type metadata accessor for DragReorderableLayoutCore() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v2, AssociatedTypeWitness);
  uint64_t v4 = swift_getAssociatedTypeWitness();
  uint64_t v5 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = type metadata accessor for DragReorderableLayoutAdaptor();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v2 + *(int *)(v6 + 68), v4);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v2 + *(int *)(v6 + 84));
  swift_release();
  swift_release();
  swift_release();
  uint64_t v7 = v2 + v1[13];
  uint64_t v8 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v7, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v5);
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in DragReorderableLayoutCore.draggableView<A>(_:offset:)()
{
  return DragReorderableLayoutCoordinator.dragEnded()();
}

uint64_t objectdestroy_36Tm()
{
  uint64_t v1 = (int *)(type metadata accessor for DragReorderableLayoutCore() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v2, AssociatedTypeWitness);
  uint64_t v4 = swift_getAssociatedTypeWitness();
  uint64_t v5 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = type metadata accessor for DragReorderableLayoutAdaptor();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v2 + *(int *)(v6 + 68), v4);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v2 + *(int *)(v6 + 84));
  swift_release();
  swift_release();
  swift_release();
  uint64_t v7 = v2 + v1[13];
  uint64_t v8 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v7, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v5);
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in DragReorderableLayoutCore.draggableView<A>(_:offset:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for DragReorderableLayoutCore() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return closure #3 in DragReorderableLayoutCore.draggableView<A>(_:offset:)(v0 + v2, v3);
}

uint64_t outlined init with copy of _DraggingModifier(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t partial apply for closure #1 in DragReorderableLayoutCoordinator.dragBegan(at:)()
{
  return closure #1 in DragReorderableLayoutCoordinator.dragBegan(at:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t outlined init with copy of _DraggingModifier?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Binding<_DragReorderableView_DragState>(0, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier>)
  {
    type metadata accessor for _ContentShapeKindModifier<Rectangle>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ConditionalDraggingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ConditionalDraggingModifier and conformance ConditionalDraggingModifier, (uint64_t)&type metadata for ConditionalDraggingModifier, MEMORY[0x1E4F408E0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier>);
    }
  }
}

void type metadata accessor for _ContentShapeKindModifier<Rectangle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void *type metadata accessor for ReorderableLayout()
{
  return &unk_1ED4248A8;
}

uint64_t type metadata completion function for DropPlaceholderListModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DropPlaceholderListModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) == 0 && ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFFFFFFFE7)
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = (_OWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    long long v11 = *(_OWORD *)((char *)v10 + 9);
    uint64_t v12 = (_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v12 = *v10;
    *(_OWORD *)((char *)v12 + 9) = v11;
  }
  else
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  return v4;
}

uint64_t initializeWithCopy for DropPlaceholderListModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  long long v9 = *(_OWORD *)((char *)v8 + 9);
  *int v7 = *v8;
  *(_OWORD *)((char *)v7 + 9) = v9;
  return a1;
}

uint64_t assignWithCopy for DropPlaceholderListModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  *(unsigned char *)(v7 + 8) = *(unsigned char *)(v8 + 8);
  *(void *)unint64_t v7 = v9;
  uint64_t v10 = *(void *)(v8 + 16);
  *(unsigned char *)(v7 + 24) = *(unsigned char *)(v8 + 24);
  *(void *)(v7 + 16) = v10;
  return a1;
}

uint64_t initializeWithTake for DropPlaceholderListModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  long long v9 = *(_OWORD *)((char *)v8 + 9);
  *unint64_t v7 = *v8;
  *(_OWORD *)((char *)v7 + 9) = v9;
  return a1;
}

uint64_t assignWithTake for DropPlaceholderListModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  *(unsigned char *)(v7 + 8) = *(unsigned char *)(v8 + 8);
  *(void *)unint64_t v7 = v9;
  uint64_t v10 = *(void *)(v8 + 16);
  *(unsigned char *)(v7 + 24) = *(unsigned char *)(v8 + 24);
  *(void *)(v7 + 16) = v10;
  return a1;
}

uint64_t getEnumTagSinglePayload for DropPlaceholderListModifier(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 25;
    unsigned int v7 = (a2 - v5 + 255) >> (8 * v6);
    if (v6 < 4) {
      unsigned int v8 = v7 + 1;
    }
    else {
      unsigned int v8 = 2;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    switch(v10)
    {
      case 1:
        int v11 = a1[v6];
        if (!a1[v6]) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v11 = *(unsigned __int16 *)&a1[v6];
        if (*(_WORD *)&a1[v6]) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187B406C8);
      case 4:
        int v11 = *(_DWORD *)&a1[v6];
        if (!v11) {
          break;
        }
LABEL_18:
        int v12 = (v11 - 1) << (8 * v6);
        if (v6 >= 4) {
          int v12 = 0;
        }
        if (((*(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFE8) {
          int v13 = *a1;
        }
        else {
          int v13 = *(_DWORD *)a1;
        }
        return v5 + (v13 | v12) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for DropPlaceholderListModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 25;
  char v9 = 8 * v8;
  if (v7 >= a3)
  {
    int v13 = 0;
    if (v7 >= a2)
    {
LABEL_14:
      switch(v13)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 3:
          goto LABEL_38;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_30;
        default:
LABEL_30:
          if (a2)
          {
LABEL_31:
            uint64_t v17 = *(void (**)(void))(v6 + 56);
            v17();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v10 = (a3 - v7 + 255) >> v9;
    if (v8 <= 3) {
      unsigned int v11 = v10 + 1;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v11 >= 0x10000) {
      int v12 = 4;
    }
    else {
      int v12 = 2;
    }
    if (v11 < 0x100) {
      int v12 = 1;
    }
    if (v11 >= 2) {
      int v13 = v12;
    }
    else {
      int v13 = 0;
    }
    if (v7 >= a2) {
      goto LABEL_14;
    }
  }
  unsigned int v14 = (~v7 + a2) >> v9;
  if (v8 < 4) {
    int v15 = v14 + 1;
  }
  else {
    int v15 = 1;
  }
  if (v8 >= 4) {
    unsigned int v16 = ~v7 + a2;
  }
  else {
    unsigned int v16 = (~(_BYTE)v7 + a2);
  }
  bzero(a1, v8);
  if (v8 == 1) {
    *a1 = v16;
  }
  else {
    *(_DWORD *)a1 = v16;
  }
  switch(v13)
  {
    case 1:
      a1[v8] = v15;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v15;
      break;
    case 3:
LABEL_38:
      __break(1u);
      JUMPOUT(0x187B408B0);
    case 4:
      *(_DWORD *)&a1[v8] = v15;
      break;
    default:
      return;
  }
}

uint64_t destroy for DragReorderableChildModifier(uint64_t result)
{
  if (*(void *)(result + 112))
  {
    unint64_t v1 = (void *)result;
    if (*(void *)(result + 16)) {
      swift_release();
    }
    if (v1[4]) {
      swift_release();
    }
    if (v1[6]) {
      swift_release();
    }
    if (v1[8]) {
      swift_release();
    }
    if (v1[13]) {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v1 + 10));
    }
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for DragReorderableChildModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 112);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    if (v5)
    {
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = v5;
      *(void *)(a1 + 24) = v6;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    }
    uint64_t v10 = *(void *)(a2 + 32);
    if (v10)
    {
      uint64_t v11 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v10;
      *(void *)(a1 + 40) = v11;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    }
    uint64_t v12 = *(void *)(a2 + 48);
    if (v12)
    {
      uint64_t v13 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = v12;
      *(void *)(a1 + 56) = v13;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    }
    uint64_t v14 = *(void *)(a2 + 64);
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = v14;
      *(void *)(a1 + 72) = v15;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    }
    unsigned int v16 = (_OWORD *)(a1 + 80);
    uint64_t v17 = (_OWORD *)(a2 + 80);
    uint64_t v18 = *(void *)(a2 + 104);
    if (v18)
    {
      *(void *)(a1 + 104) = v18;
      (**(void (***)(_OWORD *, _OWORD *))(v18 - 8))(v16, v17);
      uint64_t v4 = *(void *)(a2 + 112);
    }
    else
    {
      long long v19 = *(_OWORD *)(a2 + 96);
      _OWORD *v16 = *v17;
      *(_OWORD *)(a1 + 96) = v19;
    }
    uint64_t v20 = *(void *)(a2 + 120);
    *(void *)(a1 + 112) = v4;
    *(void *)(a1 + 120) = v20;
    swift_retain();
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v7;
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    long long v8 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v8;
    long long v9 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v9;
  }
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  return a1;
}

uint64_t assignWithCopy for DragReorderableChildModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = a1 + 8;
  uint64_t v5 = (long long *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 112);
  if (*(void *)(a1 + 112))
  {
    if (v6)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      long long v9 = (_OWORD *)(a2 + 16);
      uint64_t v8 = *(void *)(a2 + 16);
      if (v7)
      {
        if (v8)
        {
          uint64_t v10 = *(void *)(a2 + 24);
          *(void *)(a1 + 16) = v8;
          *(void *)(a1 + 24) = v10;
          swift_retain();
          swift_release();
          goto LABEL_15;
        }
        swift_release();
      }
      else if (v8)
      {
        uint64_t v19 = *(void *)(a2 + 24);
        *(void *)(a1 + 16) = v8;
        *(void *)(a1 + 24) = v19;
        swift_retain();
        goto LABEL_15;
      }
      *(_OWORD *)(a1 + 16) = *v9;
LABEL_15:
      uint64_t v26 = *(void *)(a2 + 32);
      if (*(void *)(a1 + 32))
      {
        if (v26)
        {
          uint64_t v27 = *(void *)(a2 + 40);
          *(void *)(a1 + 32) = v26;
          *(void *)(a1 + 40) = v27;
          swift_retain();
          swift_release();
          goto LABEL_25;
        }
        swift_release();
      }
      else if (v26)
      {
        uint64_t v28 = *(void *)(a2 + 40);
        *(void *)(a1 + 32) = v26;
        *(void *)(a1 + 40) = v28;
        swift_retain();
        goto LABEL_25;
      }
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
LABEL_25:
      uint64_t v31 = *(void *)(a2 + 48);
      if (*(void *)(a1 + 48))
      {
        if (v31)
        {
          uint64_t v32 = *(void *)(a2 + 56);
          *(void *)(a1 + 48) = v31;
          *(void *)(a1 + 56) = v32;
          swift_retain();
          swift_release();
          goto LABEL_35;
        }
        swift_release();
      }
      else if (v31)
      {
        uint64_t v33 = *(void *)(a2 + 56);
        *(void *)(a1 + 48) = v31;
        *(void *)(a1 + 56) = v33;
        swift_retain();
        goto LABEL_35;
      }
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
LABEL_35:
      uint64_t v36 = *(void *)(a2 + 64);
      if (*(void *)(a1 + 64))
      {
        if (v36)
        {
          uint64_t v37 = *(void *)(a2 + 72);
          *(void *)(a1 + 64) = v36;
          *(void *)(a1 + 72) = v37;
          swift_retain();
          swift_release();
          goto LABEL_45;
        }
        swift_release();
      }
      else if (v36)
      {
        uint64_t v38 = *(void *)(a2 + 72);
        *(void *)(a1 + 64) = v36;
        *(void *)(a1 + 72) = v38;
        swift_retain();
        goto LABEL_45;
      }
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
LABEL_45:
      uint64_t v41 = *(void *)(a2 + 104);
      if (*(void *)(a1 + 104))
      {
        if (v41)
        {
          __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 80), (uint64_t *)(a2 + 80));
LABEL_55:
          uint64_t v46 = *(void *)(a2 + 120);
          *(void *)(a1 + 112) = *(void *)(a2 + 112);
          *(void *)(a1 + 120) = v46;
          swift_retain();
          swift_release();
          goto LABEL_58;
        }
        __swift_destroy_boxed_opaque_existential_1(a1 + 80);
      }
      else if (v41)
      {
        *(void *)(a1 + 104) = v41;
        (**(void (***)(uint64_t, uint64_t))(v41 - 8))(a1 + 80, a2 + 80);
        goto LABEL_55;
      }
      long long v45 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v45;
      goto LABEL_55;
    }
    outlined destroy of _DraggingModifier(a1 + 8);
    long long v13 = v5[3];
    long long v15 = *v5;
    long long v14 = v5[1];
    *(_OWORD *)(v4 + 32) = v5[2];
    *(_OWORD *)(v4 + 48) = v13;
    *(_OWORD *)uint64_t v4 = v15;
    *(_OWORD *)(v4 + 16) = v14;
    long long v17 = v5[5];
    long long v16 = v5[6];
    long long v18 = v5[4];
    *(void *)(v4 + 112) = *((void *)v5 + 14);
    *(_OWORD *)(v4 + 80) = v17;
    *(_OWORD *)(v4 + 96) = v16;
    *(_OWORD *)(v4 + 64) = v18;
  }
  else if (v6)
  {
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    uint64_t v11 = *(void *)(a2 + 16);
    if (v11)
    {
      uint64_t v12 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = v11;
      *(void *)(a1 + 24) = v12;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    }
    uint64_t v29 = *(void *)(a2 + 32);
    if (v29)
    {
      uint64_t v30 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v29;
      *(void *)(a1 + 40) = v30;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    }
    uint64_t v34 = *(void *)(a2 + 48);
    if (v34)
    {
      uint64_t v35 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = v34;
      *(void *)(a1 + 56) = v35;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    }
    uint64_t v39 = *(void *)(a2 + 64);
    if (v39)
    {
      uint64_t v40 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = v39;
      *(void *)(a1 + 72) = v40;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    }
    uint64_t v42 = (_OWORD *)(a1 + 80);
    uint64_t v43 = (_OWORD *)(a2 + 80);
    uint64_t v44 = *(void *)(a2 + 104);
    if (v44)
    {
      *(void *)(a1 + 104) = v44;
      (**(void (***)(_OWORD *, _OWORD *))(v44 - 8))(v42, v43);
    }
    else
    {
      long long v47 = *(_OWORD *)(a2 + 96);
      *uint64_t v42 = *v43;
      *(_OWORD *)(a1 + 96) = v47;
    }
    uint64_t v48 = *(void *)(a2 + 120);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = v48;
    swift_retain();
  }
  else
  {
    long long v20 = *v5;
    long long v21 = *(_OWORD *)(a2 + 24);
    long long v22 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v22;
    *(_OWORD *)uint64_t v4 = v20;
    *(_OWORD *)(a1 + 24) = v21;
    long long v23 = *(_OWORD *)(a2 + 72);
    long long v24 = *(_OWORD *)(a2 + 88);
    long long v25 = *(_OWORD *)(a2 + 104);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(_OWORD *)(a1 + 88) = v24;
    *(_OWORD *)(a1 + 104) = v25;
    *(_OWORD *)(a1 + 72) = v23;
  }
LABEL_58:
  uint64_t v49 = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128) = v49;
  *(unsigned char *)(a1 + 137) = *(unsigned char *)(a2 + 137);
  return a1;
}

__n128 __swift_memcpy138_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 122) = *(_OWORD *)(a2 + 122);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for DragReorderableChildModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = a1 + 8;
  uint64_t v5 = a2 + 8;
  if (!*(void *)(a1 + 112)) {
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(a2 + 112);
  if (!v6)
  {
    outlined destroy of _DraggingModifier(a1 + 8);
LABEL_7:
    long long v11 = *(_OWORD *)(v5 + 80);
    *(_OWORD *)(v4 + 64) = *(_OWORD *)(v5 + 64);
    *(_OWORD *)(v4 + 80) = v11;
    *(_OWORD *)(v4 + 96) = *(_OWORD *)(v5 + 96);
    *(void *)(v4 + 112) = *(void *)(v5 + 112);
    long long v12 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
    *(_OWORD *)(v4 + 16) = v12;
    long long v13 = *(_OWORD *)(v5 + 48);
    *(_OWORD *)(v4 + 32) = *(_OWORD *)(v5 + 32);
    *(_OWORD *)(v4 + 48) = v13;
    goto LABEL_36;
  }
  uint64_t v8 = (_OWORD *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a1 + 16);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  if (v9)
  {
    if (v7)
    {
      uint64_t v10 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = v7;
      *(void *)(a1 + 24) = v10;
      swift_release();
      goto LABEL_12;
    }
    swift_release();
  }
  else if (v7)
  {
    uint64_t v14 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v14;
    goto LABEL_12;
  }
  *(_OWORD *)(a1 + 16) = *v8;
LABEL_12:
  uint64_t v15 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32))
  {
    if (v15)
    {
      uint64_t v16 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v15;
      *(void *)(a1 + 40) = v16;
      swift_release();
      goto LABEL_19;
    }
    swift_release();
  }
  else if (v15)
  {
    uint64_t v17 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v15;
    *(void *)(a1 + 40) = v17;
    goto LABEL_19;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
LABEL_19:
  uint64_t v18 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48))
  {
    if (v18)
    {
      uint64_t v19 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = v18;
      *(void *)(a1 + 56) = v19;
      swift_release();
      goto LABEL_26;
    }
    swift_release();
  }
  else if (v18)
  {
    uint64_t v20 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v18;
    *(void *)(a1 + 56) = v20;
    goto LABEL_26;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
LABEL_26:
  uint64_t v21 = *(void *)(a2 + 64);
  if (!*(void *)(a1 + 64))
  {
    if (v21)
    {
      uint64_t v23 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = v21;
      *(void *)(a1 + 72) = v23;
      goto LABEL_33;
    }
LABEL_32:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    goto LABEL_33;
  }
  if (!v21)
  {
    swift_release();
    goto LABEL_32;
  }
  uint64_t v22 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v21;
  *(void *)(a1 + 72) = v22;
  swift_release();
LABEL_33:
  if (*(void *)(a1 + 104)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  }
  long long v24 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v24;
  uint64_t v25 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = v6;
  *(void *)(a1 + 120) = v25;
  swift_release();
LABEL_36:
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(unsigned char *)(a1 + 137) = *(unsigned char *)(a2 + 137);
  return a1;
}

uint64_t getEnumTagSinglePayload for DragReorderableChildModifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 138)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 112);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DragReorderableChildModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 136) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 138) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 138) = 0;
    }
    if (a2) {
      *(void *)(result + 112) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DragReorderableChildModifier()
{
  return &type metadata for DragReorderableChildModifier;
}

uint64_t sub_187B411D8()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier>, _ViewModifier_Content<ConditionalDraggingModifier>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier>, _ViewModifier_Content<ConditionalDraggingModifier>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier>, _ViewModifier_Content<ConditionalDraggingModifier>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier>, _ViewModifier_Content<ConditionalDraggingModifier>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier>, (void (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<ConditionalDraggingModifier> and conformance _ViewModifier_Content<A>);
    lazy protocol witness table accessor for type _ViewModifier_Content<ConditionalDraggingModifier> and conformance _ViewModifier_Content<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier>, _ViewModifier_Content<ConditionalDraggingModifier>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier>, _ViewModifier_Content<ConditionalDraggingModifier>>()
{
  if (!lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier>, _ViewModifier_Content<ConditionalDraggingModifier>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier>();
    type metadata accessor for _ContentShapeKindModifier<Rectangle>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ConditionalDraggingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ConditionalDraggingModifier and conformance ConditionalDraggingModifier, (uint64_t)&type metadata for ConditionalDraggingModifier, MEMORY[0x1E4F408E0]);
    unint64_t v0 = type metadata accessor for _ConditionalContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<_ViewModifier_Content<ConditionalDraggingModifier>, _DraggingModifier>, _ViewModifier_Content<ConditionalDraggingModifier>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<ConditionalDraggingModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<ConditionalDraggingModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<ConditionalDraggingModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ContentShapeKindModifier<Rectangle>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ConditionalDraggingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ConditionalDraggingModifier and conformance ConditionalDraggingModifier, (uint64_t)&type metadata for ConditionalDraggingModifier, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<ConditionalDraggingModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in DragReorderableChildModifier()
{
  return &protocol witness table for DragReorderableChildModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in DropPlaceholderListModifier<A>()
{
  return &protocol witness table for DropPlaceholderListModifier<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in ReorderableLayout()
{
  return &protocol witness table for ReorderableLayout;
}

unint64_t lazy protocol witness table accessor for type ReorderableLayout and conformance ReorderableLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type ReorderableLayout and conformance ReorderableLayout;
  if (!lazy protocol witness table cache variable for type ReorderableLayout and conformance ReorderableLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReorderableLayout and conformance ReorderableLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReorderableLayout and conformance ReorderableLayout;
  if (!lazy protocol witness table cache variable for type ReorderableLayout and conformance ReorderableLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReorderableLayout and conformance ReorderableLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReorderableLayout and conformance ReorderableLayout;
  if (!lazy protocol witness table cache variable for type ReorderableLayout and conformance ReorderableLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReorderableLayout and conformance ReorderableLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReorderableLayout and conformance ReorderableLayout;
  if (!lazy protocol witness table cache variable for type ReorderableLayout and conformance ReorderableLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReorderableLayout and conformance ReorderableLayout);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DragReorderableChildModifier.MakeDragSourceProxy and conformance DragReorderableChildModifier.MakeDragSourceProxy()
{
  unint64_t result = lazy protocol witness table cache variable for type DragReorderableChildModifier.MakeDragSourceProxy and conformance DragReorderableChildModifier.MakeDragSourceProxy;
  if (!lazy protocol witness table cache variable for type DragReorderableChildModifier.MakeDragSourceProxy and conformance DragReorderableChildModifier.MakeDragSourceProxy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragReorderableChildModifier.MakeDragSourceProxy and conformance DragReorderableChildModifier.MakeDragSourceProxy);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DragReorderableChildModifier.ChildCoordinateSpace and conformance DragReorderableChildModifier.ChildCoordinateSpace()
{
  unint64_t result = lazy protocol witness table cache variable for type DragReorderableChildModifier.ChildCoordinateSpace and conformance DragReorderableChildModifier.ChildCoordinateSpace;
  if (!lazy protocol witness table cache variable for type DragReorderableChildModifier.ChildCoordinateSpace and conformance DragReorderableChildModifier.ChildCoordinateSpace)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragReorderableChildModifier.ChildCoordinateSpace and conformance DragReorderableChildModifier.ChildCoordinateSpace);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DragReorderableChildModifier.ChildCoordinateSpace and conformance DragReorderableChildModifier.ChildCoordinateSpace;
  if (!lazy protocol witness table cache variable for type DragReorderableChildModifier.ChildCoordinateSpace and conformance DragReorderableChildModifier.ChildCoordinateSpace)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragReorderableChildModifier.ChildCoordinateSpace and conformance DragReorderableChildModifier.ChildCoordinateSpace);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DragReorderableChildModifier.MakeDragSource and conformance DragReorderableChildModifier.MakeDragSource()
{
  unint64_t result = lazy protocol witness table cache variable for type DragReorderableChildModifier.MakeDragSource and conformance DragReorderableChildModifier.MakeDragSource;
  if (!lazy protocol witness table cache variable for type DragReorderableChildModifier.MakeDragSource and conformance DragReorderableChildModifier.MakeDragSource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragReorderableChildModifier.MakeDragSource and conformance DragReorderableChildModifier.MakeDragSource);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DragReorderableChildModifier.ResponderFilter and conformance DragReorderableChildModifier.ResponderFilter()
{
  unint64_t result = lazy protocol witness table cache variable for type DragReorderableChildModifier.ResponderFilter and conformance DragReorderableChildModifier.ResponderFilter;
  if (!lazy protocol witness table cache variable for type DragReorderableChildModifier.ResponderFilter and conformance DragReorderableChildModifier.ResponderFilter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragReorderableChildModifier.ResponderFilter and conformance DragReorderableChildModifier.ResponderFilter);
  }
  return result;
}

uint64_t outlined init with copy of DragReorderableChildModifier(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t partial apply for closure #1 in static DropPlaceholderListModifier._makeViewList(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in static DragReorderableLayoutView._makeView(view:inputs:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t (*)(void))type metadata accessor for DropPlaceholderListModifier, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t partial apply for closure #2 in static DropPlaceholderListModifier._makeViewList(modifier:inputs:body:)(uint64_t a1)
{
  return closure #2 in static DropPlaceholderListModifier._makeViewList(modifier:inputs:body:)(a1);
}

uint64_t type metadata accessor for DropPlaceholderListModifier.MakeList()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #1 in Attribute.init<A>(_:)partial apply(uint64_t a1, uint64_t a2)
{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TATm_1(a1, a2, (uint64_t (*)(void))type metadata accessor for ViewList, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

uint64_t initializeBufferWithCopyOfBuffer for DragReorderableChildModifier.ResponderFilter(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DragReorderableChildModifier.ResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DragReorderableChildModifier.ResponderFilter(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

void *type metadata accessor for DragReorderableChildModifier.ResponderFilter()
{
  return &unk_1ED452C68;
}

void *type metadata accessor for DragReorderableChildModifier.MakeDragSource()
{
  return &unk_1ED452BC0;
}

void *type metadata accessor for DragReorderableChildModifier.ChildCoordinateSpace()
{
  return &unk_1ED452BE8;
}

void *type metadata accessor for DragReorderableChildModifier.MakeDragSourceProxy()
{
  return &unk_1ED452B98;
}

uint64_t base witness table accessor for _AttributeBody in DropPlaceholderListModifier<A>.MakeList()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for DropPlaceholderListModifier.DropPlaceholderList()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187B41DB4()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);

  return swift_deallocObject();
}

uint64_t destroy for DropPlaceholderListModifier.DropPlaceholderList(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1 + 40);
}

_OWORD *initializeWithCopy for DropPlaceholderListModifier.DropPlaceholderList(_OWORD *a1, _OWORD *a2)
{
  long long v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = a2[4];
  a1[4] = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)a1 + 40, (uint64_t)a2 + 40);
  a1[5] = a2[5];
  *(_OWORD *)((char *)a1 + 89) = *(_OWORD *)((char *)a2 + 89);
  return a1;
}

uint64_t assignWithCopy for DropPlaceholderListModifier.DropPlaceholderList(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
  uint64_t v4 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v4;
  uint64_t v5 = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = v5;
  return a1;
}

uint64_t assignWithTake for DropPlaceholderListModifier.DropPlaceholderList(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  return a1;
}

uint64_t partial apply for closure #3 in DropPlaceholderListModifier.DropPlaceholderList.firstOffset<A>(forID:style:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #3 in DropPlaceholderListModifier.DropPlaceholderList.firstOffset<A>(forID:style:)(a1, *(void *)(v2 + 48), *(void **)(v2 + 56), *(void *)(v2 + 64), a2);
}

uint64_t partial apply for closure #1 in DropPlaceholderListModifier.DropPlaceholderList.firstOffset<A>(forID:style:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in DropPlaceholderListModifier.DropPlaceholderList.firstOffset<A>(forID:style:)(a1, *(void *)(v2 + 48), *(void *)(v2 + 56), *(void **)(v2 + 64), *(void *)(v2 + 72), a2);
}

uint64_t type metadata accessor for DropPlaceholderListModifier.DropPlaceholderList.IndexRange()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in DropPlaceholderListModifier.DropPlaceholderList.applyToBase(start:end:style:list:transform:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in DropPlaceholderListModifier.DropPlaceholderList.applyToBase(start:end:style:list:transform:body:)(a1, a2, a3, a4, *(unsigned char **)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32), *(void *)(v4 + 40), *(unsigned char *)(v4 + 48), *(uint64_t **)(v4 + 56)) & 1;
}

void type metadata accessor for _ViewList_ID._Views<EmptyCollection<_ViewList_ID>>()
{
  if (!lazy cache variable for type metadata for _ViewList_ID._Views<EmptyCollection<_ViewList_ID>>)
  {
    type metadata accessor for Binding<_DragReorderableView_DragState>(255, &lazy cache variable for type metadata for EmptyCollection<_ViewList_ID>, MEMORY[0x1E4F3F6E8], MEMORY[0x1E4FBBB60]);
    lazy protocol witness table accessor for type EmptyCollection<_ViewList_ID> and conformance EmptyCollection<A>(&lazy protocol witness table cache variable for type EmptyCollection<_ViewList_ID> and conformance EmptyCollection<A>);
    lazy protocol witness table accessor for type EmptyCollection<_ViewList_ID> and conformance EmptyCollection<A>(&lazy protocol witness table cache variable for type EmptyCollection<_ViewList_ID> and conformance EmptyCollection<A>);
    unint64_t v0 = type metadata accessor for _ViewList_ID._Views();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewList_ID._Views<EmptyCollection<_ViewList_ID>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type EmptyCollection<_ViewList_ID> and conformance EmptyCollection<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Binding<_DragReorderableView_DragState>(255, &lazy cache variable for type metadata for EmptyCollection<_ViewList_ID>, MEMORY[0x1E4F3F6E8], MEMORY[0x1E4FBBB60]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DropPlaceholderListModifier.DropPlaceholderList.IndexRange(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 18)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 17);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DropPlaceholderListModifier.DropPlaceholderList.IndexRange(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 18) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 17) = a2 + 1;
    }
  }
  return result;
}

uint64_t DefaultGroupBoxStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = result;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

uint64_t protocol witness for GroupBoxStyle.makeBody(configuration:) in conformance DefaultGroupBoxStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = result;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

uint64_t EnvironmentValues.disableGroupBoxPadding.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for _TraitWritingModifier<FormBorderlessSectionTraitKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisableGroupBoxPaddingKey>, (uint64_t)&unk_1ED4462C0, (uint64_t)&protocol witness table for DisableGroupBoxPaddingKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DisableGroupBoxPaddingKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for _TraitWritingModifier<FormBorderlessSectionTraitKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisableGroupBoxPaddingKey>, (uint64_t)&unk_1ED4462C0, (uint64_t)&protocol witness table for DisableGroupBoxPaddingKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DisableGroupBoxPaddingKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.disableGroupBoxPadding.setter()
{
  type metadata accessor for _TraitWritingModifier<FormBorderlessSectionTraitKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisableGroupBoxPaddingKey>, (uint64_t)&unk_1ED4462C0, (uint64_t)&protocol witness table for DisableGroupBoxPaddingKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DisableGroupBoxPaddingKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.disableGroupBoxPadding(_:)()
{
  return swift_release();
}

uint64_t sub_187B42540@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.disableGroupBoxPadding.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187B42580()
{
  return EnvironmentValues.disableGroupBoxPadding.setter();
}

uint64_t View.sectionBackground(_:)()
{
  return View._trait<A>(_:_:)();
}

uint64_t associated type witness table accessor for GroupBoxStyle.Body : View in DefaultGroupBoxStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for DefaultGroupBoxStyle()
{
  return &type metadata for DefaultGroupBoxStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>>, GroupBoxStyleModifier<PhoneIdiomGroupBoxStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>>, GroupBoxStyleModifier<PhoneIdiomGroupBoxStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>>, GroupBoxStyleModifier<PhoneIdiomGroupBoxStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>>, GroupBoxStyleModifier<PhoneIdiomGroupBoxStyle>>();
    lazy protocol witness table accessor for type GroupBox<GroupBoxStyleConfiguration.Label, ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>> and conformance GroupBox<A, B>(&lazy protocol witness table cache variable for type GroupBox<GroupBoxStyleConfiguration.Label, ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>> and conformance GroupBox<A, B>, (void (*)(uint64_t))type metadata accessor for GroupBox<GroupBoxStyleConfiguration.Label, ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>>, GroupBoxStyleModifier<PhoneIdiomGroupBoxStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>>, GroupBoxStyleModifier<PhoneIdiomGroupBoxStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>>, GroupBoxStyleModifier<PhoneIdiomGroupBoxStyle>>)
  {
    type metadata accessor for GroupBox<GroupBoxStyleConfiguration.Label, ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>>();
    type metadata accessor for GroupBoxStyleModifier<DefaultGroupBoxStyle>(255, &lazy cache variable for type metadata for GroupBoxStyleModifier<PhoneIdiomGroupBoxStyle>, (void (*)(void))lazy protocol witness table accessor for type PhoneIdiomGroupBoxStyle and conformance PhoneIdiomGroupBoxStyle);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>>, GroupBoxStyleModifier<PhoneIdiomGroupBoxStyle>>);
    }
  }
}

void type metadata accessor for GroupBox<GroupBoxStyleConfiguration.Label, ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>>()
{
  if (!lazy cache variable for type metadata for GroupBox<GroupBoxStyleConfiguration.Label, ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>>)
  {
    type metadata accessor for ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>();
    lazy protocol witness table accessor for type ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for GroupBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GroupBox<GroupBoxStyleConfiguration.Label, ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>)
  {
    type metadata accessor for GroupBoxStyleModifier<DefaultGroupBoxStyle>(255, (unint64_t *)&lazy cache variable for type metadata for GroupBoxStyleModifier<DefaultGroupBoxStyle>, (void (*)(void))lazy protocol witness table accessor for type DefaultGroupBoxStyle and conformance DefaultGroupBoxStyle);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type DefaultGroupBoxStyle and conformance DefaultGroupBoxStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultGroupBoxStyle and conformance DefaultGroupBoxStyle;
  if (!lazy protocol witness table cache variable for type DefaultGroupBoxStyle and conformance DefaultGroupBoxStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultGroupBoxStyle and conformance DefaultGroupBoxStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for GroupBoxStyleModifier<DefaultGroupBoxStyle>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for GroupBoxStyleModifier();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PhoneIdiomGroupBoxStyle and conformance PhoneIdiomGroupBoxStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneIdiomGroupBoxStyle and conformance PhoneIdiomGroupBoxStyle;
  if (!lazy protocol witness table cache variable for type PhoneIdiomGroupBoxStyle and conformance PhoneIdiomGroupBoxStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneIdiomGroupBoxStyle and conformance PhoneIdiomGroupBoxStyle);
  }
  return result;
}

uint64_t sub_187B429D8()
{
  return swift_getWitnessTable();
}

uint64_t lazy protocol witness table accessor for type GroupBox<GroupBoxStyleConfiguration.Label, ModifiedContent<GroupBoxStyleConfiguration.Content, GroupBoxStyleModifier<DefaultGroupBoxStyle>>> and conformance GroupBox<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_187B42ABC()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<FormBorderlessSectionTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<FormBorderlessSectionTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<FormBorderlessSectionTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<FormBorderlessSectionTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<FormBorderlessSectionTraitKey>, (uint64_t)&type metadata for FormBorderlessSectionTraitKey, (uint64_t)&protocol witness table for FormBorderlessSectionTraitKey, MEMORY[0x1E4F408B8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<FormBorderlessSectionTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for FormBorderlessSectionTraitKey()
{
  return &type metadata for FormBorderlessSectionTraitKey;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DisableGroupBoxPaddingKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DisableGroupBoxPaddingKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DisableGroupBoxPaddingKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _TraitWritingModifier<FormBorderlessSectionTraitKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisableGroupBoxPaddingKey>, (uint64_t)&unk_1ED4462C0, (uint64_t)&protocol witness table for DisableGroupBoxPaddingKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DisableGroupBoxPaddingKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void *type metadata accessor for DisableGroupBoxPaddingKey()
{
  return &unk_1ED4462C0;
}

uint64_t registerAppRootModifier<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x1F4188790](a1);
  if (one-time initialization token for appRootViewWrappers != -1) {
    swift_once();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  unint64_t v8 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a2;
  *(void *)(v9 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v9 + v8, (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  swift_beginAccess();
  rawuint64_t Value = appRootViewWrappers._rawValue;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  appRootViewWrappers._rawuint64_t Value = rawValue;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    rawuint64_t Value = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, rawValue[2] + 1, 1, rawValue);
    appRootViewWrappers._rawuint64_t Value = rawValue;
  }
  unint64_t v13 = rawValue[2];
  unint64_t v12 = rawValue[3];
  if (v13 >= v12 >> 1)
  {
    rawuint64_t Value = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, rawValue);
    appRootViewWrappers._rawuint64_t Value = rawValue;
  }
  rawValue[2] = v13 + 1;
  uint64_t v14 = &rawValue[2 * v13];
  v14[4] = partial apply for closure #1 in registerAppRootModifier<A>(_:);
  v14[5] = v9;
  return swift_endAccess();
}

uint64_t closure #1 in registerAppRootModifier<A>(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = MEMORY[0x1E4F41618];
  uint64_t v11 = type metadata accessor for ModifiedContent();
  double v12 = MEMORY[0x1F4188790](v11);
  uint64_t v17 = *a1;
  uint64_t v13 = MEMORY[0x1E4F41610];
  MEMORY[0x18C113660](a2, v10, a3, MEMORY[0x1E4F41610], v12);
  uint64_t v15 = v13;
  uint64_t v16 = a4;
  swift_getWitnessTable();
  uint64_t result = AnyView.init<A>(_:)();
  *a5 = result;
  return result;
}

uint64_t sub_187B42F88()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in registerAppRootModifier<A>(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in registerAppRootModifier<A>(_:)(a1, v2+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 16) - 8) + 80)), *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t dispatch thunk of App.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of App.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

SwiftUI::FrameResizePosition_optional __swiftcall FrameResizePosition.init(rawValue:)(Swift::Int8 rawValue)
{
  result.Swift::Bool value = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

void static FrameResizePosition.allCases.getter()
{
}

void FrameResizePosition.rawValue.getter()
{
}

void protocol witness for static Equatable.== infix(_:_:) in conformance FrameResizePosition()
{
  protocol witness for static Equatable.== infix(_:_:) in conformance CapsuleSlider<A>.ScrollState.Orientation();
}

void protocol witness for Hashable.hashValue.getter in conformance FrameResizePosition()
{
  protocol witness for static Equatable.== infix(_:_:) in conformance CapsuleSlider<A>.ScrollState.Orientation();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance FrameResizePosition()
{
  protocol witness for static Equatable.== infix(_:_:) in conformance CapsuleSlider<A>.ScrollState.Orientation();
}

void FrameResizeDirection.Set.rawValue.getter()
{
  protocol witness for static Equatable.== infix(_:_:) in conformance CapsuleSlider<A>.ScrollState.Orientation();
}

void FrameResizeDirection.Set.init(rawValue:)()
{
}

void FrameResizeDirection.Set.init(_:)()
{
}

void static FrameResizeDirection.Set.all.getter()
{
}

SwiftUI::FrameResizeDirection_optional __swiftcall FrameResizeDirection.init(rawValue:)(Swift::Int8 rawValue)
{
  result.Swift::Bool value = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type FrameResizePosition and conformance FrameResizePosition()
{
  unint64_t result = lazy protocol witness table cache variable for type FrameResizePosition and conformance FrameResizePosition;
  if (!lazy protocol witness table cache variable for type FrameResizePosition and conformance FrameResizePosition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FrameResizePosition and conformance FrameResizePosition);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in FrameResizePosition()
{
  return lazy protocol witness table accessor for type [FrameResizePosition] and conformance [A](&lazy protocol witness table cache variable for type [FrameResizePosition] and conformance [A], &lazy cache variable for type metadata for [FrameResizePosition]);
}

unint64_t lazy protocol witness table accessor for type FrameResizeDirection.Set and conformance FrameResizeDirection.Set()
{
  unint64_t result = lazy protocol witness table cache variable for type FrameResizeDirection.Set and conformance FrameResizeDirection.Set;
  if (!lazy protocol witness table cache variable for type FrameResizeDirection.Set and conformance FrameResizeDirection.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FrameResizeDirection.Set and conformance FrameResizeDirection.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FrameResizeDirection.Set and conformance FrameResizeDirection.Set;
  if (!lazy protocol witness table cache variable for type FrameResizeDirection.Set and conformance FrameResizeDirection.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FrameResizeDirection.Set and conformance FrameResizeDirection.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FrameResizeDirection.Set and conformance FrameResizeDirection.Set;
  if (!lazy protocol witness table cache variable for type FrameResizeDirection.Set and conformance FrameResizeDirection.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FrameResizeDirection.Set and conformance FrameResizeDirection.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FrameResizeDirection.Set and conformance FrameResizeDirection.Set;
  if (!lazy protocol witness table cache variable for type FrameResizeDirection.Set and conformance FrameResizeDirection.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FrameResizeDirection.Set and conformance FrameResizeDirection.Set);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FrameResizeDirection and conformance FrameResizeDirection()
{
  unint64_t result = lazy protocol witness table cache variable for type FrameResizeDirection and conformance FrameResizeDirection;
  if (!lazy protocol witness table cache variable for type FrameResizeDirection and conformance FrameResizeDirection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FrameResizeDirection and conformance FrameResizeDirection);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in FrameResizeDirection()
{
  return lazy protocol witness table accessor for type [FrameResizePosition] and conformance [A](&lazy protocol witness table cache variable for type [FrameResizeDirection] and conformance [A], &lazy cache variable for type metadata for [FrameResizeDirection]);
}

uint64_t lazy protocol witness table accessor for type [FrameResizePosition] and conformance [A](unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for [FrameResizePosition](255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for [FrameResizePosition](uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for Array();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for FrameResizePosition(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187B43544);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FrameResizePosition()
{
  return &type metadata for FrameResizePosition;
}

unsigned char *storeEnumTagSinglePayload for FrameResizeDirection(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187B43648);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FrameResizeDirection()
{
  return &type metadata for FrameResizeDirection;
}

ValueMetadata *type metadata accessor for FrameResizeDirection.Set()
{
  return &type metadata for FrameResizeDirection.Set;
}

void static FrameResizeDirection.Set.outward.getter()
{
}

void static FrameResizeDirection.Set.inward.getter()
{
}

void static FrameResizeDirection.allCases.getter()
{
}

void FrameResizeDirection.rawValue.getter()
{
}

uint64_t PlatformItemListReader.init(flags:content:source:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  swift_retain();
  static Alignment.center.getter();
  type metadata accessor for PlatformItemListReader();
  ZStack.init(alignment:content:)();
  return swift_release();
}

uint64_t _ViewInputs.addPlatformItemListKey<A>(flags:editOperation:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  int v6 = a2;
  PreferenceKeys.add(_:)();
  lazy protocol witness table accessor for type PlatformItemListTextRepresentable and conformance PlatformItemListTextRepresentable();
  _ViewInputs.requestedTextRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemListImageRepresentable and conformance PlatformItemListImageRepresentable();
  _ViewInputs.requestedImageRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemListNamedImageRepresentable and conformance PlatformItemListNamedImageRepresentable();
  _ViewInputs.requestedNamedImageRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemListSpacerRepresentable and conformance PlatformItemListSpacerRepresentable();
  _ViewInputs.requestedSpacerRepresentation.setter();
  lazy protocol witness table accessor for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey();
  uint64_t result = PropertyList.subscript.setter();
  if (v6 != 2)
  {
    (*(void (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    if (v6) {
      PropertyList.subscript.getter();
    }
    return PropertyList.subscript.setter();
  }
  return result;
}

uint64_t View.platformItemSystemType(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2(a1, (uint64_t)v8, &lazy cache variable for type metadata for PlatformItemList.Item.SystemItem?, (uint64_t)&type metadata for PlatformItemList.Item.SystemItem);
  uint64_t v5 = swift_allocObject();
  _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2((uint64_t)v8, v5 + 16, &lazy cache variable for type metadata for PlatformItemList.Item.SystemItem?, (uint64_t)&type metadata for PlatformItemList.Item.SystemItem);
  int v6 = outlined retain of PlatformItemList.Item.SystemItem?(v8, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of PlatformItemList.Item.SystemItem?);
  View.transformPlatformItemList<A>(_:_:)((uint64_t)v6, (uint64_t)partial apply for closure #1 in View.platformItemSystemType(_:), v5, a2, (uint64_t)&type metadata for LayoutPlatformItemListFlags, a3);
  return swift_release();
}

uint64_t specialized closure #1 in PlatformItemList.containerSelectionBehavior.getter(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = swift_bridgeObjectRetain() + 40;
    do
    {
      int v3 = *(void (**)(uint64_t))(v2 - 8);
      uint64_t v4 = swift_retain();
      v3(v4);
      swift_release();
      v2 += 16;
      --v1;
    }
    while (v1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized closure #3 in PlatformItemList.containerSelectionBehavior.getter(char a1, uint64_t a2)
{
  void (*v8)(uint64_t *__return_ptr, char *);
  uint64_t v10;

  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 1;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = a2 + 40;
  LOBYTE(v6) = 1;
  char v7 = a1 & 1;
  do
  {
    if (v6)
    {
      unint64_t v8 = *(void (**)(uint64_t *__return_ptr, char *))(v5 - 8);
      BYTE1(v10) = v7;
      swift_retain();
      v8(&v10, (char *)&v10 + 1);
      swift_release();
      uint64_t v6 = v10;
    }
    else
    {
      uint64_t v6 = 0;
    }
    v5 += 16;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v6;
}

__n128 PlatformItemList.Item.init(systemItem:)@<Q0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  long long v12 = a1[1];
  long long v13 = *a1;
  long long v10 = a1[3];
  long long v11 = a1[2];
  __n128 v8 = (__n128)a1[5];
  long long v9 = a1[4];
  uint64_t v3 = *((void *)a1 + 12);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(unsigned char *)(a2 + 32) = 0;
  *(_OWORD *)(a2 + 40) = xmmword_188380370;
  *(unsigned char *)(a2 + 56) = 1;
  _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v14);
  _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2((uint64_t)v14, a2 + 64, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
  *(_OWORD *)(a2 + 248) = 0u;
  *(_OWORD *)(a2 + 264) = 0u;
  *(_OWORD *)(a2 + 280) = 0u;
  *(_OWORD *)(a2 + 400) = xmmword_18834BB90;
  *(_OWORD *)(a2 + 416) = 0u;
  *(_OWORD *)(a2 + 432) = 0u;
  *(_OWORD *)(a2 + 448) = 0u;
  *(unsigned char *)(a2 + 464) = 0;
  *(void *)(a2 + 472) = 0;
  *(_OWORD *)(a2 + 480) = 0u;
  *(unsigned char *)(a2 + 496) = 0;
  *(_OWORD *)(a2 + 504) = 0u;
  *(_WORD *)(a2 + 520) = 256;
  *(_OWORD *)(a2 + 528) = 0u;
  *(void *)(a2 + 544) = 0;
  *(void *)(a2 + 552) = 1;
  *(void *)(a2 + 624) = 0;
  *(_OWORD *)(a2 + 592) = 0u;
  *(_OWORD *)(a2 + 608) = 0u;
  *(_OWORD *)(a2 + 560) = 0u;
  *(_OWORD *)(a2 + 576) = 0u;
  *(_WORD *)(a2 + 632) = 1283;
  *(unsigned char *)(a2 + 634) = 3;
  uint64_t v4 = (int *)type metadata accessor for PlatformItemList.Item();
  uint64_t v5 = a2 + v4[28];
  uint64_t v6 = type metadata accessor for CommandOperation();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(unsigned char *)(a2 + v4[29]) = 0;
  *(unsigned char *)(a2 + v4[30]) = 0;
  *(unsigned char *)(a2 + v4[31]) = 2;
  *(unsigned char *)(a2 + v4[32]) = 0;
  *(void *)(a2 + v4[33]) = 0;
  *(_OWORD *)(a2 + 296) = v13;
  *(_OWORD *)(a2 + 312) = v12;
  *(_OWORD *)(a2 + 328) = v11;
  *(_OWORD *)(a2 + 344) = v10;
  __n128 result = v8;
  *(_OWORD *)(a2 + 360) = v9;
  *(__n128 *)(a2 + 376) = v8;
  *(void *)(a2 + 392) = v3;
  return result;
}

void *UIItemHostingView.__allocating_init(rootView:)(objc_class *a1)
{
  uint64_t v2 = v1;
  id v4 = objc_allocWithZone(v1);
  uint64_t v5 = specialized _UIHostingView.init(rootView:)(a1);
  (*(void (**)(objc_class *))(*(void *)(*((void *)v2 + 200) - 8) + 8))(a1);
  return v5;
}

id UIItemHostingView.init(coder:)(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for UIItemHostingView();
  id v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id @objc UIItemHostingView.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  return UIItemHostingView.init(coder:)(a3);
}

id UIItemHostingView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UIItemHostingView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void closure #1 in View.forcePlatformItem()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PlatformItemList.Item();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  objc_super v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  __n128 v8 = (char *)&v12 - v7;
  long long v9 = *(void **)a1;
  if (!*(void *)(*(void *)a1 + 16))
  {
    _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v18);
    _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2((uint64_t)v18, (uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
    v15[0] = xmmword_18834BB90;
    memset(&v15[1], 0, 48);
    char v16 = 0;
    __n128 v13 = 0uLL;
    uint64_t v14 = 0;
    PlatformItemList.Item.init(text:image:selectionBehavior:accessibility:tint:imageColorResolver:)(0, (uint64_t)v17, v15, &v13, 0, 0, (uint64_t)v8);
    outlined init with copy of PlatformItemList.Item((uint64_t)v8, (uint64_t)v5);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v9 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    }
    unint64_t v11 = v9[2];
    unint64_t v10 = v9[3];
    if (v11 >= v10 >> 1) {
      long long v9 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1, v9);
    }
    v9[2] = v11 + 1;
    outlined init with take of PlatformItemList.Item((uint64_t)v5, (uint64_t)v9+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v11);
    *(void *)a1 = v9;
    outlined destroy of CommandOperation((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  }
}

int *closure #1 in View.platformItemTint(_:)(int *result, uint64_t a2)
{
  uint64_t v2 = *(void **)result;
  uint64_t v3 = *(void *)(*(void *)result + 16);
  if (v3)
  {
    objc_super v5 = result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_11:
    }
      uint64_t v2 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    for (unint64_t i = 0; i != v3; ++i)
    {
      if (i >= v2[2])
      {
        __break(1u);
        goto LABEL_11;
      }
      uint64_t v7 = type metadata accessor for PlatformItemList.Item();
      uint64_t v8 = *(void *)(v7 - 8);
      __n128 result = (int *)(v7 - 8);
      unint64_t v9 = (unint64_t)v2
         + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
         + *(void *)(v8 + 72) * i;
      uint64_t v10 = result[35];
      if (!*(void *)(v9 + v10))
      {
        *(void *)(v9 + v10) = a2;
        __n128 result = (int *)swift_retain();
      }
    }
    *(void *)objc_super v5 = v2;
  }
  return result;
}

uint64_t View.platformItemSelector(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return View.platformItemSelector(_:)(a1, a2, a3, (uint64_t)&unk_1ED481980, (uint64_t)partial apply for closure #1 in View.platformItemSelector(_:), (uint64_t)&type metadata for SelectionPlatformItemListFlags);
}

void *closure #1 in View.platformItemSelector(_:)(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = (void *)*result;
    uint64_t v4 = *(void *)(*result + 16);
    if (v4)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_12:
      }
        uint64_t v3 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
      for (unint64_t i = 0; i != v4; ++i)
      {
        if (i >= v3[2])
        {
          __break(1u);
          goto LABEL_12;
        }
        uint64_t v7 = type metadata accessor for PlatformItemList.Item();
        uint64_t v8 = *(void *)(v7 - 8);
        __n128 result = (void *)(v7 - 8);
        unint64_t v9 = (unint64_t)v3
           + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
           + *(void *)(v8 + 72) * i;
        if (*(void *)(v9 + 408) != 1) {
          *(void *)(v9 + 456) = a2;
        }
      }
      *uint64_t v2 = v3;
    }
  }
  return result;
}

int *closure #1 in View.platformItemKeepsMenuPresented(_:)(int *result, char a2)
{
  uint64_t v2 = *(void **)result;
  uint64_t v3 = *(void *)(*(void *)result + 16);
  if (v3)
  {
    objc_super v5 = result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_9:
    }
      uint64_t v2 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    unint64_t v6 = 0;
    a2 &= 1u;
    do
    {
      if (v6 >= v2[2])
      {
        __break(1u);
        goto LABEL_9;
      }
      uint64_t v7 = type metadata accessor for PlatformItemList.Item();
      uint64_t v8 = *(void *)(v7 - 8);
      __n128 result = (int *)(v7 - 8);
      *((unsigned char *)v2
      + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
      + *(void *)(v8 + 72) * v6++
      + result[32]) = a2;
    }
    while (v3 != v6);
    *(void *)objc_super v5 = v2;
  }
  return result;
}

uint64_t closure #1 in View.platformItemIdentifier(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)result;
  uint64_t v4 = *(void *)(*(void *)result + 16);
  if (v4)
  {
    uint64_t v7 = (void *)result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_9:
    }
      uint64_t v3 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    for (unint64_t i = 0; i != v4; ++i)
    {
      if (i >= v3[2])
      {
        __break(1u);
        goto LABEL_9;
      }
      uint64_t v9 = *(void *)(type metadata accessor for PlatformItemList.Item() - 8);
      unint64_t v10 = (unint64_t)v3
          + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
          + *(void *)(v9 + 72) * i;
      *(void *)(v10 + 16) = a2;
      *(void *)(v10 + 24) = a3;
      swift_bridgeObjectRetain();
      __n128 result = swift_bridgeObjectRelease();
    }
    *uint64_t v7 = v3;
  }
  return result;
}

uint64_t View.platformItemLabel<A, B>(_:flags:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  v27[1] = a5;
  v27[2] = a7;
  v27[3] = a6;
  uint64_t v13 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v22 = MEMORY[0x1F4188790](v21);
  long long v24 = (char *)v27 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v25 + 16))(v24, v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, a1, a3);
  (*(void (**)(char *, void, uint64_t))(v13 + 16))(v15, v27[0], a2);
  return PlatformItemLabelView.init(flags:label:content:)((uint64_t)v24, (uint64_t)v20, (uint64_t)v15, a4, a3, a2, a8);
}

uint64_t PlatformItemLabelView.init(flags:label:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a7, a1, a4);
  uint64_t v12 = type metadata accessor for PlatformItemLabelView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a7 + *(int *)(v12 + 68), a2, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a7 + *(int *)(v12 + 72), a3, a6);
}

uint64_t closure #1 in View.platformItemSystemType(_:)(uint64_t a1, void *a2)
{
  _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2((uint64_t)a2, (uint64_t)v48, &lazy cache variable for type metadata for PlatformItemList.Item.SystemItem?, (uint64_t)&type metadata for PlatformItemList.Item.SystemItem);
  uint64_t v3 = (void *)v48[0];
  uint64_t v4 = v48[1];
  uint64_t v40 = v48[3];
  uint64_t v42 = v48[2];
  uint64_t v36 = v48[5];
  unint64_t v38 = v48[4];
  uint64_t v5 = v50;
  char v32 = v49;
  uint64_t v34 = v48[6];
  uint64_t v6 = v51;
  uint64_t v7 = v52;
  char v8 = v53;
  uint64_t v9 = v54;
  uint64_t result = _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2((uint64_t)a2, (uint64_t)v55, &lazy cache variable for type metadata for PlatformItemList.Item.SystemItem?, (uint64_t)&type metadata for PlatformItemList.Item.SystemItem);
  unint64_t v25 = v56;
  if (v56 >> 2 != 0xFFFFFFFF)
  {
    unint64_t v11 = *(void **)a1;
    uint64_t v24 = *(void *)(*(void *)a1 + 16);
    if (v24)
    {
      uint64_t v21 = v55[1];
      double v22 = (void *)v55[0];
      uint64_t v19 = v55[3];
      uint64_t v20 = v55[2];
      uint64_t v17 = v58;
      uint64_t v18 = v57;
      uint64_t v16 = v59;
      uint64_t v46 = v61;
      uint64_t v47 = v60;
      uint64_t v44 = v63;
      uint64_t v45 = v62;
      uint64_t v43 = v64;
      outlined copy of PlatformItemList.Item.SystemItem(v3, v4, v42, v40, v38, v36, v34, v32, v5, v6, v7, v8, v9);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_10:
      }
        unint64_t v11 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v11);
      unint64_t v12 = 0;
      uint64_t v23 = v11;
      do
      {
        if (v12 >= v11[2])
        {
          __break(1u);
          goto LABEL_10;
        }
        uint64_t v13 = *(void *)(type metadata accessor for PlatformItemList.Item() - 8);
        unint64_t v14 = (unint64_t)v11
            + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))
            + *(void *)(v13 + 72) * v12;
        uint64_t v39 = *(void *)(v14 + 304);
        uint64_t v41 = *(void **)(v14 + 296);
        uint64_t v35 = *(void *)(v14 + 320);
        uint64_t v37 = *(void *)(v14 + 312);
        uint64_t v31 = *(void *)(v14 + 336);
        unint64_t v33 = *(void *)(v14 + 328);
        uint64_t v29 = *(void *)(v14 + 352);
        uint64_t v30 = *(void *)(v14 + 344);
        long long v27 = *(_OWORD *)(v14 + 376);
        long long v28 = *(_OWORD *)(v14 + 360);
        uint64_t v26 = *(void *)(v14 + 392);
        outlined copy of PlatformItemList.Item.SystemItem(v22, v21, v20, v19, v25, v18, v17, v16, v47, v46, v45, v44, v43);
        outlined consume of PlatformItemList.Item.SystemItem?(v41, v39, v37, v35, v33, v31, v30, v29, v28, *((uint64_t *)&v28 + 1), v27, SBYTE8(v27), v26);
        *(void *)(v14 + 296) = v22;
        *(void *)(v14 + 304) = v21;
        *(void *)(v14 + 312) = v20;
        *(void *)(v14 + 320) = v19;
        *(void *)(v14 + 328) = v25;
        *(void *)(v14 + 336) = v18;
        *(void *)(v14 + 344) = v17;
        *(void *)(v14 + 352) = v16;
        *(void *)(v14 + 360) = v47;
        *(void *)(v14 + 368) = v46;
        *(void *)(v14 + 376) = v45;
        ++v12;
        *(void *)(v14 + 384) = v44;
        *(void *)(v14 + 392) = v43;
        unint64_t v11 = v23;
      }
      while (v24 != v12);
      uint64_t result = (uint64_t)outlined retain of PlatformItemList.Item.SystemItem?(a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of PlatformItemList.Item.SystemItem?);
      *(void *)a1 = v23;
    }
  }
  return result;
}

void *closure #1 in View.platformItemHierarchicalLevel(_:)(void *result, uint64_t a2)
{
  uint64_t v2 = (void *)*result;
  uint64_t v3 = *(void *)(*result + 16);
  if (v3)
  {
    uint64_t v5 = result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_9:
    }
      uint64_t v2 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    for (unint64_t i = 0; i != v3; ++i)
    {
      if (i >= v2[2])
      {
        __break(1u);
        goto LABEL_9;
      }
      uint64_t v7 = type metadata accessor for PlatformItemList.Item();
      uint64_t v8 = *(void *)(v7 - 8);
      uint64_t result = (void *)(v7 - 8);
      *(void *)((char *)v2
                + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
                + *(void *)(v8 + 72) * i
                + 40) = a2;
    }
    *uint64_t v5 = v2;
  }
  return result;
}

double protocol witness for ViewModifier.body(content:) in conformance PlatformItemListContentModifier@<D0>(uint64_t a1@<X8>)
{
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  double result = *(double *)&v7;
  *(_OWORD *)(a1 + 32) = v7;
  return result;
}

uint64_t specialized View.platformItemChildren<A>(systemItem:primaryAction:menuIndicatorVisibility:controlSize:children:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10)
{
  uint64_t v22 = *(void *)(a6 + 8);
  uint64_t v23 = *(void *)a6;
  char v21 = *(unsigned char *)(a6 + 16);
  uint64_t v24 = *(void *)(a6 + 24);
  uint64_t v25 = *(void *)(a6 + 32);
  uint64_t v17 = swift_allocObject();
  _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2((uint64_t)a1, v17 + 16, &lazy cache variable for type metadata for PlatformItemList.Item.SystemItem?, (uint64_t)&type metadata for PlatformItemList.Item.SystemItem);
  *(void *)(v17 + 120) = a2;
  *(void *)(v17 + 128) = a3;
  *(unsigned char *)(v17 + 136) = a4;
  *(unsigned char *)(v17 + 137) = a5;
  if (!a8)
  {
    outlined retain of PlatformItemList.Item.SystemItem?(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of PlatformItemList.Item.SystemItem?);
    outlined copy of AppIntentExecutor?(a2);
    goto LABEL_5;
  }
  uint64_t v28 = a7;
  uint64_t v29 = a8;
  char v30 = a10 & 1;
  outlined retain of PlatformItemList.Item.SystemItem?(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of PlatformItemList.Item.SystemItem?);
  outlined copy of AppIntentExecutor?(a2);
  outlined copy of Binding<NavigationSplitViewColumn>?(a7, a8);
  _s7SwiftUI5ImageVAAE8ResolvedVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v27);
  swift_release();
  swift_release();
  if (v27)
  {
LABEL_5:
    char v18 = 0;
    goto LABEL_6;
  }
  char v18 = 1;
LABEL_6:
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v28 = v23;
  uint64_t v29 = v22;
  char v30 = v21 & 1;
  uint64_t v31 = v24;
  uint64_t v32 = v25;
  char v33 = v18;
  uint64_t v34 = 0;
  uint64_t v35 = KeyPath;
  char v36 = 0;
  uint64_t v37 = partial apply for closure #2 in View.platformItemChildren<A>(systemItem:primaryAction:menuIndicatorVisibility:controlSize:children:);
  uint64_t v38 = v17;
  swift_retain();
  specialized View.onPlatformContainerSelection(_:isMomentary:)(a2, a3, 1, a9);
  swift_release();
  outlined consume of Environment<Bool?>.Content(KeyPath, 0);
  swift_release();
  return outlined consume of Binding<NavigationSplitViewColumn>?(a7, a8);
}

uint64_t closure #2 in View.platformItemChildren<A>(systemItem:primaryAction:menuIndicatorVisibility:controlSize:children:)(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, char a5, int a6)
{
  int v20 = a6;
  uint64_t v9 = type metadata accessor for PlatformItemList.Item();
  uint64_t v21 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  unint64_t v11 = &v19[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v12);
  unint64_t v14 = &v19[-v13];
  uint64_t v15 = *a1;
  _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v27);
  _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2((uint64_t)v27, (uint64_t)v26, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
  v24[0] = xmmword_18834BB90;
  memset(&v24[1], 0, 48);
  char v25 = 0;
  __n128 v22 = 0uLL;
  uint64_t v23 = 0;
  PlatformItemList.Item.init(text:image:selectionBehavior:accessibility:tint:imageColorResolver:)(0, (uint64_t)v26, v24, &v22, 0, 0, (uint64_t)v14);
  outlined retain of PlatformItemList.Item.SystemItem?(a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of PlatformItemList.Item.SystemItem?);
  swift_bridgeObjectRelease();
  *((void *)v14 + 77) = v15;
  v14[632] = a5;
  outlined assign with take of PlatformItemList.Item.SystemItem?((uint64_t)a2, (uint64_t)(v14 + 296));
  v14[633] = v20;
  outlined init with copy of PlatformItemList.Item((uint64_t)v14, (uint64_t)v11);
  type metadata accessor for CommandOperation?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBBE00]);
  unint64_t v16 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_18834BB80;
  outlined init with take of PlatformItemList.Item((uint64_t)v11, v17 + v16);
  uint64_t result = outlined destroy of CommandOperation((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  *a1 = v17;
  return result;
}

id PlatformItemList.Item.resolvedMenuItemImage.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v6 = v0[41];
  if (v6 >> 62 || (v6 & 0xFFFFFFFFFFFFFFFCLL) == 0x3FFFFFFFCLL)
  {
LABEL_7:
    uint64_t v25 = MEMORY[0x1E4F41550];
    _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2((uint64_t)(v1 + 8), (uint64_t)v50, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
    _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2((uint64_t)v50, (uint64_t)&v51, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v25);
    if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v51) == 1) {
      return 0;
    }
    if (v63)
    {
      outlined retain of Image.Resolved?((uint64_t)v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of Image.Resolved?);
      swift_unknownObjectRetain();
      self;
      id v24 = (id)swift_dynamicCastObjCClassUnconditional();
      outlined init with copy of PlatformItemList.Item((uint64_t)v1, (uint64_t)v5);
      if (v24)
      {
        outlined retain of Image.Resolved?((uint64_t)v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
LABEL_15:
        outlined destroy of CommandOperation((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        return v24;
      }
    }
    else
    {
      _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2((uint64_t)v50, (uint64_t)&v38, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
      outlined retain of Image.Resolved((uint64_t)&v38);
      outlined init with copy of PlatformItemList.Item((uint64_t)v1, (uint64_t)v5);
    }
    id v26 = v51;
    char v27 = v52;
    id v38 = v51;
    char v39 = v52;
    long long v40 = v53;
    uint64_t v41 = v54;
    char v42 = v55;
    long long v43 = v56;
    char v44 = v57;
    long long v45 = v58;
    long long v46 = v59;
    char v47 = v60;
    char v48 = v61;
    __int16 v49 = v62;
    uint64_t v28 = *((void *)v5 + 6);
    outlined copy of GraphicsImage.Contents?(v51, v52);
    id v24 = GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(0, 0, v28);
    outlined retain of Image.Resolved?((uint64_t)v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
    outlined consume of GraphicsImage.Contents?(v26, v27);
    goto LABEL_15;
  }
  uint64_t v8 = (void *)v1[37];
  uint64_t v7 = v1[38];
  uint64_t v9 = v1[39];
  uint64_t v10 = v1[42];
  uint64_t v11 = v1[43];
  uint64_t v12 = v1[44];
  uint64_t v13 = v1[45];
  uint64_t v14 = v1[46];
  uint64_t v15 = v1[47];
  uint64_t v17 = v1[48];
  uint64_t v16 = v1[49];
  if (!*(void *)((char *)v1 + *(int *)(v3 + 132)))
  {
    outlined copy of PlatformItemList.Item.SystemItem(v8, v7, v9, v1[40], v6, v10, v11, v12, v13, v14, v15, v1[48], v16);
    goto LABEL_7;
  }
  uint64_t v36 = v1[40];
  uint64_t v37 = v9;
  uint64_t v34 = v12;
  uint64_t v35 = v7;
  uint64_t v32 = v10;
  uint64_t v33 = v11;
  uint64_t v30 = v13;
  id v31 = v8;
  _s7SwiftUI5ImageVAAE8ResolvedVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_188351940;
  type metadata accessor for UIColor();
  swift_retain();
  outlined copy of PlatformItemList.Item.SystemItem?(v31, v35, v37, v36, v6, v32, v33, v34, v30, v14, v15, v17, v16);
  uint64_t v19 = swift_retain();
  *(void *)(v18 + 32) = UIColor.init(_:)(v19);
  id v51 = (id)v18;
  specialized Array._endMutation()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v21 = objc_msgSend(self, sel_configurationWithPaletteColors_, isa);

  __n128 v22 = (void *)PlatformItemList.Item.image.getter();
  if (v22)
  {
    uint64_t v23 = v22;
    id v24 = objc_msgSend(v22, sel_imageWithSymbolConfiguration_, v21);

    swift_release();
  }
  else
  {

    swift_release();
    return 0;
  }
  return v24;
}

uint64_t closure #1 in static MergePlatformItemsView._makeView(view:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v7[2] = type metadata accessor for MergePlatformItemsView();
  _OWORD v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance MergePlatformItemsView<A>()
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ViewThatFits<A>();
}

void protocol witness for View.body.getter in conformance MergePlatformItemsView<A>()
{
}

uint64_t closure #1 in OnPlatformContainerSecondaryNavigationModifier.body(content:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PlatformItemList.Item();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (uint64_t *)((char *)&v20 - v9);
  PlatformItemList.mergedContentItem.getter(*a1, (uint64_t)&v20 - v9);
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)a2;
  uint64_t v12 = *(void *)(a2 + 24);
  uint64_t v13 = *(unsigned __int8 *)(a2 + 32);
  swift_retain();
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v12, v13);
  char v14 = specialized Environment.wrappedValue.getter(v12, v13);
  outlined consume of Environment<Bool?>.Content(v12, v13);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  if (v14)
  {
    uint64_t v15 = *(void *)(a2 + 8);
    uint64_t v16 = *(void *)(a2 + 16);
    outlined copy of AppIntentExecutor?(v15);
  }
  outlined consume of PlatformItemList.Item.SecondaryNavigationBehavior?(v10[69], v10[70]);
  v10[69] = v11;
  v10[70] = v15;
  v10[71] = v16;
  outlined init with copy of PlatformItemList.Item((uint64_t)v10, (uint64_t)v7);
  type metadata accessor for CommandOperation?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBBE00]);
  unint64_t v17 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_18834BB80;
  outlined init with take of PlatformItemList.Item((uint64_t)v7, v18 + v17);
  *a1 = v18;
  return outlined destroy of CommandOperation((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance OnPlatformContainerSecondaryNavigationModifier@<X0>(uint64_t (**a1)(uint64_t *a1)@<X8>)
{
  long long v3 = v1[1];
  long long v8 = *v1;
  long long v9 = v3;
  char v10 = *((unsigned char *)v1 + 32);
  _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2((uint64_t)&v8, (uint64_t)v11, &lazy cache variable for type metadata for AnyNavigationLinkPresentedValue?, (uint64_t)&type metadata for AnyNavigationLinkPresentedValue);
  uint64_t v4 = *((void *)&v8 + 1);
  uint64_t v12 = *((void *)&v9 + 1);
  char v13 = v10;
  uint64_t v5 = swift_allocObject();
  long long v6 = v9;
  *(_OWORD *)(v5 + 16) = v8;
  *(_OWORD *)(v5 + 32) = v6;
  *(unsigned char *)(v5 + 48) = v10;
  *a1 = partial apply for closure #1 in OnPlatformContainerSecondaryNavigationModifier.body(content:);
  a1[1] = (uint64_t (*)(uint64_t *))v5;
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v11);
  outlined copy of AppIntentExecutor?(v4);
  return outlined retain of Environment<Bool>((uint64_t)&v12);
}

uint64_t closure #1 in static PlatformItemListGeneratingViewModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  void v10[2] = type metadata accessor for PlatformItemListGeneratingViewModifier();
  void v10[3] = a3;
  uint64_t v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v10, a3, MEMORY[0x1E4FBC248], v7, MEMORY[0x1E4FBC278], v8);
  return v11;
}

uint64_t closure #1 in PlatformItemListReader.init(flags:content:source:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v16 - v11;
  v13(v10);
  static ViewBuilder.buildExpression<A>(_:)(v8);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v8, a5);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v14)(v12, a5);
}

uint64_t closure #1 in static PlatformItemListReader._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  uint64_t v20 = a7;
  uint64_t v8 = type metadata accessor for PlatformItemListReader();
  uint64_t v9 = a1 + *(int *)(v8 + 68);
  v13[2] = v8;
  uint64_t v14 = type metadata accessor for ZStack();
  uint64_t v10 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v9, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v13, v14, MEMORY[0x1E4FBC248], v10, MEMORY[0x1E4FBC278], v11);
  return v15;
}

uint64_t key path getter for PlatformItemListReader.content : <A, B, C>PlatformItemListReader<A, B, C>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a3 + a2;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = swift_allocObject();
  long long v9 = *(_OWORD *)(v5 - 32);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(v5 - 48);
  *(_OWORD *)(v8 + 32) = v9;
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(v5 - 16);
  *(void *)(v8 + 64) = v7;
  *(void *)(v8 + 72) = v6;
  *a4 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed PlatformItemList) -> (@out B);
  a4[1] = v8;

  return swift_retain();
}

uint64_t key path setter for PlatformItemListReader.content : <A, B, C>PlatformItemListReader<A, B, C>(uint64_t *a1, uint64_t (**a2)(uint64_t a1), uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 + a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = swift_allocObject();
  long long v9 = *(_OWORD *)(v5 - 32);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(v5 - 48);
  *(_OWORD *)(v8 + 32) = v9;
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(v5 - 16);
  *(void *)(v8 + 64) = v7;
  *(void *)(v8 + 72) = v6;
  swift_retain();
  uint64_t result = swift_release();
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed PlatformItemList) -> (@out B);
  a2[1] = (uint64_t (*)(uint64_t))v8;
  return result;
}

uint64_t (*PlatformItemListReader.Child.makeContent.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))()
{
  swift_getFunctionTypeMetadata1();
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v15 = *Value;
  uint64_t v14 = Value[1];
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = a2;
  v16[3] = a3;
  v16[4] = a4;
  v16[5] = a5;
  v16[6] = a6;
  v16[7] = a7;
  v16[8] = v15;
  v16[9] = v14;
  swift_retain();
  return thunk for @escaping @callee_guaranteed (@in_guaranteed PlatformItemList) -> (@out B)partial apply;
}

uint64_t PlatformItemListReader.Child.value.getter()
{
  return Rule.withObservation<A>(do:)();
}

uint64_t closure #1 in PlatformItemListReader.Child.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = PlatformItemListReader.Child.makeContent.getter(a1, a2, a3, a4, a5, a6, a7);
  AGGraphGetValue();
  uint64_t v8 = swift_bridgeObjectRetain();
  ((void (*)(uint64_t))v7)(v8);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Rule.value.getter in conformance PlatformItemListReader<A, B, C>.Child()
{
  return PlatformItemListReader.Child.value.getter();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance PlatformItemListReader<A, B, C>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  return static PlatformItemListReader._makeView(view:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance PlatformItemListReader<A, B, C>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance PlatformItemListReader<A, B, C>()
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ViewThatFits<A>();
}

void protocol witness for View.body.getter in conformance PlatformItemListReader<A, B, C>()
{
}

uint64_t specialized implicit closure #1 in _ViewOutputs.writePlatformItemList(inputs:value:)()
{
  uint64_t v0 = type metadata accessor for PlatformItemList.Item();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  long long v3 = &v8[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for GraphHost();
  MEMORY[0x18C114840]();
  memset(v9, 0, sizeof(v9));
  unint64_t v10 = 0xC000000000000000;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  PlatformItemList.Item.init(systemItem:)(v9, (uint64_t)v3);
  type metadata accessor for CommandOperation?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBBE00]);
  unint64_t v4 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18834BB80;
  outlined init with take of PlatformItemList.Item((uint64_t)v3, v5 + v4);
  *(void *)&v9[0] = v5;
  v8[15] = 5;
  uint64_t v6 = GraphHost.intern<A>(_:for:id:)();
  swift_bridgeObjectRelease();
  swift_release();
  return v6;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned char *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned char v8[8];
  long long v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;

  uint64_t v0 = type metadata accessor for PlatformItemList.Item();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  long long v3 = &v8[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for GraphHost();
  MEMORY[0x18C114840]();
  long long v9 = 1uLL;
  unint64_t v10 = 0;
  long long v11 = 0;
  long long v12 = 0xC000000000000000;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v15 = 0u;
  uint64_t v16 = 0u;
  PlatformItemList.Item.init(systemItem:)(&v9, (uint64_t)v3);
  type metadata accessor for CommandOperation?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBBE00]);
  unint64_t v4 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18834BB80;
  outlined init with take of PlatformItemList.Item((uint64_t)v3, v5 + v4);
  *(void *)&long long v9 = v5;
  v8[7] = 5;
  uint64_t v6 = GraphHost.intern<A>(_:for:id:)();
  swift_bridgeObjectRelease();
  swift_release();
  return v6;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsPlatformItemListSourcePredicate()
{
  lazy protocol witness table accessor for type IsPlatformItemListSourceInput and conformance IsPlatformItemListSourceInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v1;
}

void View.onDoubleClick(action:)()
{
}

uint64_t sub_187B46420(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t getEnumTagSinglePayload for PlatformItemLabelView(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(a3[3] - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6) {
    unsigned int v9 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v9 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v10 = a3[4];
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = *(void *)(*(void *)(a3[3] - 8) + 64);
  uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
  if (v12 <= v9) {
    unsigned int v16 = v9;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v11 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v17 = *(void *)(*(void *)(a3[2] - 8) + 64) + v13;
  int v18 = a2 - v16;
  if (a2 <= v16) {
    goto LABEL_27;
  }
  uint64_t v19 = ((v14 + v15 + (v17 & ~v13)) & ~v15) + *(void *)(*(void *)(v10 - 8) + 64);
  char v20 = 8 * v19;
  if (v19 <= 3)
  {
    unsigned int v22 = ((v18 + ~(-1 << v20)) >> v20) + 1;
    if (HIWORD(v22))
    {
      int v21 = *(_DWORD *)((char *)a1 + v19);
      if (!v21) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v22 > 0xFF)
    {
      int v21 = *(unsigned __int16 *)((char *)a1 + v19);
      if (!*(unsigned __int16 *)((char *)a1 + v19)) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v22 < 2)
    {
LABEL_27:
      if (v16)
      {
        if (v6 == v16)
        {
          id v26 = *(uint64_t (**)(void))(v5 + 48);
          return v26();
        }
        else
        {
          unint64_t v28 = ((unint64_t)a1 + v17) & ~v13;
          if (v8 == v16)
          {
            uint64_t v29 = *(uint64_t (**)(unint64_t))(v7 + 48);
            return v29(v28);
          }
          else
          {
            unint64_t v30 = (v28 + v14 + v15) & ~v15;
            id v31 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v11 + 48);
            return v31(v30, v12, v10);
          }
        }
      }
      return 0;
    }
  }
  int v21 = *((unsigned __int8 *)a1 + v19);
  if (!*((unsigned char *)a1 + v19)) {
    goto LABEL_27;
  }
LABEL_17:
  int v23 = (v21 - 1) << v20;
  if (v19 > 3) {
    int v23 = 0;
  }
  if (v19)
  {
    if (v19 <= 3) {
      int v24 = ((v14 + v15 + (v17 & ~v13)) & ~v15) + *(_DWORD *)(*(void *)(v10 - 8) + 64);
    }
    else {
      int v24 = 4;
    }
    switch(v24)
    {
      case 2:
        int v25 = *a1;
        break;
      case 3:
        int v25 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v25 = *(_DWORD *)a1;
        break;
      default:
        int v25 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v25 = 0;
  }
  return v16 + (v25 | v23) + 1;
}

void storeEnumTagSinglePayload for PlatformItemLabelView(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v6 = *(void *)(a4[2] - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = a4[3];
  uint64_t v9 = a4[4];
  uint64_t v10 = *(void *)(v8 - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v13 = *(void *)(v9 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
  if (*(_DWORD *)(v13 + 84) <= v12) {
    unsigned int v17 = v12;
  }
  else {
    unsigned int v17 = *(_DWORD *)(v13 + 84);
  }
  uint64_t v18 = *(void *)(*(void *)(a4[2] - 8) + 64) + v14;
  size_t v19 = ((v15 + v16 + (v18 & ~v14)) & ~v16) + *(void *)(*(void *)(v9 - 8) + 64);
  BOOL v20 = a3 >= v17;
  unsigned int v21 = a3 - v17;
  if (v21 != 0 && v20)
  {
    if (v19 <= 3)
    {
      unsigned int v26 = ((v21 + ~(-1 << (8 * v19))) >> (8 * v19)) + 1;
      if (HIWORD(v26))
      {
        int v22 = 4;
      }
      else if (v26 >= 0x100)
      {
        int v22 = 2;
      }
      else
      {
        int v22 = v26 > 1;
      }
    }
    else
    {
      int v22 = 1;
    }
  }
  else
  {
    int v22 = 0;
  }
  if (v17 < a2)
  {
    unsigned int v23 = ~v17 + a2;
    if (v19 < 4)
    {
      int v24 = (v23 >> (8 * v19)) + 1;
      if (v19)
      {
        int v27 = v23 & ~(-1 << (8 * v19));
        bzero(a1, v19);
        if (v19 == 3)
        {
          *(_WORD *)a1 = v27;
          a1[2] = BYTE2(v27);
        }
        else if (v19 == 2)
        {
          *(_WORD *)a1 = v27;
        }
        else
        {
          *a1 = v27;
        }
      }
    }
    else
    {
      bzero(a1, v19);
      *(_DWORD *)a1 = v23;
      int v24 = 1;
    }
    switch(v22)
    {
      case 1:
        a1[v19] = v24;
        return;
      case 2:
        *(_WORD *)&a1[v19] = v24;
        return;
      case 3:
        goto LABEL_48;
      case 4:
        *(_DWORD *)&a1[v19] = v24;
        return;
      default:
        return;
    }
  }
  uint64_t v25 = ~v14;
  switch(v22)
  {
    case 1:
      a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_48:
      __break(1u);
      JUMPOUT(0x187B46A78);
    case 4:
      *(_DWORD *)&a1[v19] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (!a2) {
        return;
      }
LABEL_27:
      if (v7 == v17)
      {
        unint64_t v28 = *(void (**)(char *))(v6 + 56);
        uint64_t v29 = a1;
LABEL_30:
        v28(v29);
        return;
      }
      unint64_t v30 = (unint64_t)&a1[v18] & v25;
      if (v11 != v17)
      {
        uint64_t v29 = (char *)((v30 + v15 + v16) & ~v16);
        unint64_t v28 = *(void (**)(char *))(v13 + 56);
        goto LABEL_30;
      }
      id v31 = *(void (**)(unint64_t))(v10 + 56);
      v31(v30);
      return;
  }
}

uint64_t destroy for PlatformItemList.Item.SecondaryNavigationBehavior(uint64_t a1)
{
  uint64_t result = swift_release();
  if (*(void *)(a1 + 8))
  {
    return swift_release();
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for PlatformItemList.Item.SecondaryNavigationBehavior(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v5 = a2 + 1;
  uint64_t v4 = a2[1];
  swift_retain();
  if (v4)
  {
    uint64_t v6 = a2[2];
    a1[1] = v4;
    a1[2] = v6;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 1) = *v5;
  }
  return a1;
}

void *assignWithCopy for PlatformItemList.Item.SecondaryNavigationBehavior(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v4 = a2[1];
  if (!a1[1])
  {
    if (v4)
    {
      uint64_t v6 = a2[2];
      a1[1] = v4;
      a1[2] = v6;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = a2[2];
  a1[1] = v4;
  a1[2] = v5;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for PlatformItemList.Item.SecondaryNavigationBehavior(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  uint64_t v4 = a2[1];
  if (!a1[1])
  {
    if (v4)
    {
      uint64_t v6 = a2[2];
      a1[1] = v4;
      a1[2] = v6;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = a2[2];
  a1[1] = v4;
  a1[2] = v5;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformItemList.Item.SecondaryNavigationBehavior(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PlatformItemList.Item.SecondaryNavigationBehavior(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlatformItemList.Item.SecondaryNavigationBehavior()
{
  return &type metadata for PlatformItemList.Item.SecondaryNavigationBehavior;
}

uint64_t destroy for PlatformItemList.Item.SelectionBehavior(uint64_t result)
{
  uint64_t v1 = result;
  if (*(void *)(result + 8)) {
    uint64_t result = swift_release();
  }
  if (*(void *)(v1 + 24)) {
    uint64_t result = swift_release();
  }
  if (*(void *)(v1 + 40))
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for PlatformItemList.Item.SelectionBehavior(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  uint64_t v8 = *(void *)(a2 + 40);
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = v8;
    *(void *)(a1 + 48) = v9;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for PlatformItemList.Item.SelectionBehavior(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3) = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  uint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v6 = (_OWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8))
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v7;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    uint64_t v8 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v8;
    goto LABEL_8;
  }
  *uint64_t v4 = *v6;
LABEL_8:
  uint64_t v9 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24))
  {
    if (v9)
    {
      uint64_t v10 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v9;
      *(void *)(a1 + 32) = v10;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v9)
  {
    uint64_t v11 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v9;
    *(void *)(a1 + 32) = v11;
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
LABEL_15:
  uint64_t v12 = *(void *)(a2 + 40);
  if (!*(void *)(a1 + 40))
  {
    if (v12)
    {
      uint64_t v14 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = v12;
      *(void *)(a1 + 48) = v14;
      goto LABEL_22;
    }
LABEL_21:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    goto LABEL_22;
  }
  if (!v12)
  {
    swift_release();
    goto LABEL_21;
  }
  uint64_t v13 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = v13;
  swift_release();
LABEL_22:
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformItemList.Item.SelectionBehavior(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 65)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PlatformItemList.Item.SelectionBehavior(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 65) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t assignWithCopy for PlatformItemList.Item(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = a2 + 278;
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v9 = v8;

  uint64_t v10 = *(void **)(a1 + 8);
  uint64_t v11 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v11;
  id v12 = v11;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v13 = (_OWORD *)(a1 + 64);
  uint64_t v14 = (id *)(a2 + 64);
  unint64_t v15 = *(void *)(a2 + 184) & 0xFFFFFFFFFFFFFFFELL;
  if (*(void *)(a1 + 184) >> 1 == 4294967294)
  {
    if (v15 == 0x1FFFFFFFCLL)
    {
      long long v16 = *(_OWORD *)v14;
      long long v17 = *(_OWORD *)(a2 + 80);
      long long v18 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v18;
      _OWORD *v13 = v16;
      *(_OWORD *)(a1 + 80) = v17;
      long long v19 = *(_OWORD *)(a2 + 128);
      long long v20 = *(_OWORD *)(a2 + 144);
      long long v21 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v21;
      *(_OWORD *)(a1 + 128) = v19;
      *(_OWORD *)(a1 + 144) = v20;
      long long v22 = *(_OWORD *)(a2 + 192);
      long long v23 = *(_OWORD *)(a2 + 208);
      long long v24 = *(_OWORD *)(a2 + 224);
      *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
      *(_OWORD *)(a1 + 208) = v23;
      *(_OWORD *)(a1 + 224) = v24;
      *(_OWORD *)(a1 + 192) = v22;
    }
    else
    {
      int v34 = *(unsigned __int8 *)(a2 + 72);
      if (v34 == 255)
      {
        id v40 = *v14;
        *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
        *(void *)uint64_t v13 = v40;
      }
      else
      {
        id v35 = *v14;
        outlined copy of GraphicsImage.Contents(*v14, *(unsigned char *)(a2 + 72));
        *(void *)(a1 + 64) = v35;
        *(unsigned char *)(a1 + 72) = v34;
      }
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      long long v41 = *(_OWORD *)(a2 + 108);
      *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
      *(_OWORD *)(a1 + 108) = v41;
      long long v42 = *(_OWORD *)(a2 + 128);
      long long v43 = *(_OWORD *)(a2 + 144);
      *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
      *(_OWORD *)(a1 + 128) = v42;
      *(_OWORD *)(a1 + 144) = v43;
      *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
      *(unsigned char *)(a1 + 162) = *(unsigned char *)(a2 + 162);
      *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
      unint64_t v44 = *(void *)(a2 + 184);
      if (v44 >> 1 == 0xFFFFFFFF)
      {
        long long v45 = *(_OWORD *)(a2 + 184);
        *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
        *(_OWORD *)(a1 + 184) = v45;
      }
      else
      {
        uint64_t v46 = *(void *)(a2 + 168);
        uint64_t v47 = *(void *)(a2 + 176);
        uint64_t v48 = *(void *)(a2 + 192);
        outlined copy of AccessibilityImageLabel(v46, v47, *(void *)(a2 + 184));
        *(void *)(a1 + 168) = v46;
        *(void *)(a1 + 176) = v47;
        *(void *)(a1 + 184) = v44;
        *(void *)(a1 + 192) = v48;
      }
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
      *(unsigned char *)(a1 + 217) = *(unsigned char *)(a2 + 217);
      int v49 = *(_DWORD *)(a2 + 220);
      *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
      *(_DWORD *)(a1 + 220) = v49;
      uint64_t v50 = *(void **)(a2 + 232);
      *(void *)(a1 + 232) = v50;
      *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
      *(unsigned char *)(a1 + 242) = *(unsigned char *)(a2 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      id v51 = v50;
    }
  }
  else if (v15 == 0x1FFFFFFFCLL)
  {
    outlined destroy of Image.Resolved(a1 + 64);
    long long v25 = *(_OWORD *)(a2 + 112);
    long long v27 = *(_OWORD *)v14;
    long long v26 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v25;
    _OWORD *v13 = v27;
    *(_OWORD *)(a1 + 80) = v26;
    long long v28 = *(_OWORD *)(a2 + 176);
    long long v30 = *(_OWORD *)(a2 + 128);
    long long v29 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v28;
    *(_OWORD *)(a1 + 128) = v30;
    *(_OWORD *)(a1 + 144) = v29;
    long long v32 = *(_OWORD *)(a2 + 208);
    long long v31 = *(_OWORD *)(a2 + 224);
    long long v33 = *(_OWORD *)(a2 + 192);
    *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
    *(_OWORD *)(a1 + 208) = v32;
    *(_OWORD *)(a1 + 224) = v31;
    *(_OWORD *)(a1 + 192) = v33;
  }
  else
  {
    int v36 = *(unsigned __int8 *)(a2 + 72);
    if (*(unsigned __int8 *)(a1 + 72) == 255)
    {
      if (v36 == 255)
      {
        id v54 = *v14;
        *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
        *(void *)uint64_t v13 = v54;
      }
      else
      {
        id v52 = *v14;
        outlined copy of GraphicsImage.Contents(*v14, *(unsigned char *)(a2 + 72));
        *(void *)(a1 + 64) = v52;
        *(unsigned char *)(a1 + 72) = v36;
      }
    }
    else if (v36 == 255)
    {
      outlined destroy of GraphicsImage.Contents(a1 + 64);
      char v53 = *(unsigned char *)(a2 + 72);
      *(void *)uint64_t v13 = *v14;
      *(unsigned char *)(a1 + 72) = v53;
    }
    else
    {
      id v37 = *v14;
      outlined copy of GraphicsImage.Contents(*v14, *(unsigned char *)(a2 + 72));
      id v38 = *(void **)(a1 + 64);
      *(void *)(a1 + 64) = v37;
      char v39 = *(unsigned char *)(a1 + 72);
      *(unsigned char *)(a1 + 72) = v36;
      outlined consume of GraphicsImage.Contents(v38, v39);
    }
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
    long long v55 = *(_OWORD *)(a2 + 108);
    *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
    *(_OWORD *)(a1 + 108) = v55;
    long long v56 = *(_OWORD *)(a2 + 128);
    long long v57 = *(_OWORD *)(a2 + 144);
    *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
    *(_OWORD *)(a1 + 128) = v56;
    *(_OWORD *)(a1 + 144) = v57;
    *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
    *(unsigned char *)(a1 + 162) = *(unsigned char *)(a2 + 162);
    *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
    long long v58 = (_OWORD *)(a1 + 168);
    long long v59 = (_OWORD *)(a2 + 168);
    uint64_t v60 = *(void *)(a2 + 184);
    unint64_t v61 = v60 & 0xFFFFFFFFFFFFFFFELL;
    if (*(void *)(a1 + 184) >> 1 == 0xFFFFFFFFLL)
    {
      if (v61 == 0x1FFFFFFFELL)
      {
        long long v62 = *(_OWORD *)(a2 + 184);
        _OWORD *v58 = *v59;
        *(_OWORD *)(a1 + 184) = v62;
      }
      else
      {
        uint64_t v64 = *(void *)(a2 + 168);
        uint64_t v65 = *(void *)(a2 + 176);
        uint64_t v66 = *(void *)(a2 + 192);
        outlined copy of AccessibilityImageLabel(v64, v65, *(void *)(a2 + 184));
        *(void *)(a1 + 168) = v64;
        *(void *)(a1 + 176) = v65;
        *(void *)(a1 + 184) = v60;
        *(void *)(a1 + 192) = v66;
      }
    }
    else if (v61 == 0x1FFFFFFFELL)
    {
      outlined destroy of AccessibilityImageLabel(a1 + 168);
      long long v63 = *(_OWORD *)(a2 + 184);
      _OWORD *v58 = *v59;
      *(_OWORD *)(a1 + 184) = v63;
    }
    else
    {
      uint64_t v67 = *(void *)(a2 + 168);
      uint64_t v68 = *(void *)(a2 + 176);
      uint64_t v69 = *(void *)(a2 + 192);
      outlined copy of AccessibilityImageLabel(v67, v68, *(void *)(a2 + 184));
      uint64_t v70 = *(void *)(a1 + 168);
      uint64_t v71 = *(void *)(a1 + 176);
      uint64_t v72 = *(void *)(a1 + 184);
      *(void *)(a1 + 168) = v67;
      *(void *)(a1 + 176) = v68;
      *(void *)(a1 + 184) = v60;
      *(void *)(a1 + 192) = v69;
      outlined consume of AccessibilityImageLabel(v70, v71, v72);
    }
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    swift_retain();
    swift_release();
    *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
    *(unsigned char *)(a1 + 217) = *(unsigned char *)(a2 + 217);
    int v73 = *(_DWORD *)(a2 + 220);
    *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
    *(_DWORD *)(a1 + 220) = v73;
    int v74 = *(void **)(a1 + 232);
    uint64_t v75 = *(void **)(a2 + 232);
    *(void *)(a1 + 232) = v75;
    id v76 = v75;

    *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
    *(unsigned char *)(a1 + 242) = *(unsigned char *)(a2 + 242);
  }
  uint64_t v77 = (_OWORD *)(a1 + 248);
  uint64_t v78 = (_OWORD *)(a2 + 248);
  uint64_t v79 = *(void *)(a2 + 256);
  if (*(void *)(a1 + 256))
  {
    if (!v79)
    {
      outlined destroy of Image.NamedResolved(a1 + 248);
      long long v87 = *(_OWORD *)(a2 + 264);
      long long v86 = *(_OWORD *)(a2 + 280);
      *uint64_t v77 = *v78;
      *(_OWORD *)(a1 + 264) = v87;
      *(_OWORD *)(a1 + 280) = v86;
      goto LABEL_44;
    }
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(void *)(a1 + 256) = *(void *)(a2 + 256);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v80 = *(void **)(a1 + 264);
    uint64_t v81 = *(void **)(a2 + 264);
    if ((unint64_t)v80 >= 2)
    {
      if ((unint64_t)v81 >= 2)
      {
        *(void *)(a1 + 264) = v81;
        id v90 = v81;

        goto LABEL_43;
      }

      uint64_t v81 = *(void **)(a2 + 264);
    }
    else if ((unint64_t)v81 >= 2)
    {
      *(void *)(a1 + 264) = v81;
      id v82 = v81;
LABEL_43:
      int v91 = *(_DWORD *)(a2 + 272);
      *(unsigned char *)(a1 + 276) = *(unsigned char *)(a2 + 276);
      *(_DWORD *)(a1 + 272) = v91;
      *(unsigned char *)(a1 + 277) = *(unsigned char *)(a2 + 277);
      *(unsigned char *)(a1 + 278) = *(unsigned char *)v6;
      *(void *)(a1 + 280) = *(void *)(a2 + 280);
      swift_retain();
      swift_release();
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      swift_retain();
      swift_release();
      goto LABEL_44;
    }
    *(void *)(a1 + 264) = v81;
    goto LABEL_43;
  }
  if (v79)
  {
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(void *)(a1 + 256) = *(void *)(a2 + 256);
    __int16 v83 = *(void **)(a2 + 264);
    swift_bridgeObjectRetain();
    if ((unint64_t)v83 >= 2) {
      id v84 = v83;
    }
    *(void *)(a1 + 264) = v83;
    int v85 = *(_DWORD *)(a2 + 272);
    *(unsigned char *)(a1 + 276) = *(unsigned char *)(a2 + 276);
    *(_DWORD *)(a1 + 272) = v85;
    *(unsigned char *)(a1 + 277) = *(unsigned char *)(a2 + 277);
    *(unsigned char *)(a1 + 278) = *(unsigned char *)(a2 + 278);
    *(void *)(a1 + 280) = *(void *)(a2 + 280);
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v88 = *v78;
    long long v89 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 280) = v89;
    *uint64_t v77 = v88;
  }
LABEL_44:
  uint64_t v92 = (long long *)(a1 + 296);
  uint64_t v93 = (long long *)(a2 + 296);
  unint64_t v94 = *(void *)(a2 + 328);
  unint64_t v95 = v94 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(void *)(a1 + 328) >> 2 == 0xFFFFFFFFLL)
  {
    if (v95 == 0x3FFFFFFFCLL)
    {
      long long v96 = *v93;
      long long v97 = *(_OWORD *)(a2 + 328);
      *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
      *(_OWORD *)(a1 + 328) = v97;
      *uint64_t v92 = v96;
      long long v98 = *(_OWORD *)(a2 + 344);
      long long v99 = *(_OWORD *)(a2 + 360);
      long long v100 = *(_OWORD *)(a2 + 376);
      *(void *)(a1 + 392) = *(void *)(a2 + 392);
      *(_OWORD *)(a1 + 360) = v99;
      *(_OWORD *)(a1 + 376) = v100;
      *(_OWORD *)(a1 + 344) = v98;
    }
    else
    {
      uint64_t v106 = *(void **)(a2 + 296);
      uint64_t v107 = *(void *)(a2 + 304);
      uint64_t v108 = *(void *)(a2 + 312);
      uint64_t v109 = *(void *)(a2 + 320);
      uint64_t v229 = v6;
      v232 = a3;
      uint64_t v110 = *(void *)(a2 + 336);
      uint64_t v111 = *(void *)(a2 + 344);
      uint64_t v112 = *(void *)(a2 + 352);
      uint64_t v218 = *(void *)(a2 + 360);
      uint64_t v220 = *(void *)(a2 + 368);
      uint64_t v222 = *(void *)(a2 + 376);
      uint64_t v224 = *(void *)(a2 + 384);
      uint64_t v226 = *(void *)(a2 + 392);
      outlined copy of PlatformItemList.Item.SystemItem(v106, v107, v108, v109, v94, v110, v111, v112, v218, v220, v222, v224, v226);
      *(void *)(a1 + 296) = v106;
      *(void *)(a1 + 304) = v107;
      *(void *)(a1 + 312) = v108;
      *(void *)(a1 + 320) = v109;
      *(void *)(a1 + 328) = v94;
      *(void *)(a1 + 336) = v110;
      *(void *)(a1 + 344) = v111;
      *(void *)(a1 + 352) = v112;
      uint64_t v6 = v229;
      a3 = v232;
      *(void *)(a1 + 360) = v218;
      *(void *)(a1 + 368) = v220;
      *(void *)(a1 + 376) = v222;
      *(void *)(a1 + 384) = v224;
      *(void *)(a1 + 392) = v226;
    }
  }
  else if (v95 == 0x3FFFFFFFCLL)
  {
    outlined destroy of PlatformItemList.Item.SystemItem(a1 + 296);
    long long v102 = *(_OWORD *)(a2 + 312);
    long long v101 = *(_OWORD *)(a2 + 328);
    *uint64_t v92 = *v93;
    *(_OWORD *)(a1 + 312) = v102;
    *(_OWORD *)(a1 + 328) = v101;
    long long v104 = *(_OWORD *)(a2 + 360);
    long long v103 = *(_OWORD *)(a2 + 376);
    long long v105 = *(_OWORD *)(a2 + 344);
    *(void *)(a1 + 392) = *(void *)(a2 + 392);
    *(_OWORD *)(a1 + 360) = v104;
    *(_OWORD *)(a1 + 376) = v103;
    *(_OWORD *)(a1 + 344) = v105;
  }
  else
  {
    v113 = *(void **)(a2 + 296);
    uint64_t v114 = *(void *)(a2 + 304);
    uint64_t v230 = v6;
    v233 = a3;
    uint64_t v115 = *(void *)(a2 + 312);
    uint64_t v116 = *(void *)(a2 + 320);
    uint64_t v117 = *(void *)(a2 + 336);
    uint64_t v118 = *(void *)(a2 + 344);
    uint64_t v119 = *(void *)(a2 + 352);
    uint64_t v219 = *(void *)(a2 + 360);
    uint64_t v221 = *(void *)(a2 + 368);
    uint64_t v223 = *(void *)(a2 + 376);
    uint64_t v225 = *(void *)(a2 + 384);
    uint64_t v227 = *(void *)(a2 + 392);
    outlined copy of PlatformItemList.Item.SystemItem(v113, v114, v115, v116, v94, v117, v118, v119, v219, v221, v223, v225, v227);
    id v120 = *(void **)(a1 + 296);
    uint64_t v121 = *(void *)(a1 + 304);
    uint64_t v122 = *(void *)(a1 + 312);
    uint64_t v123 = *(void *)(a1 + 320);
    unint64_t v124 = *(void *)(a1 + 328);
    uint64_t v125 = *(void *)(a1 + 336);
    uint64_t v126 = *(void *)(a1 + 344);
    uint64_t v127 = *(void *)(a1 + 352);
    long long v128 = *(_OWORD *)(a1 + 360);
    long long v129 = *(_OWORD *)(a1 + 376);
    uint64_t v130 = *(void *)(a1 + 392);
    *(void *)(a1 + 296) = v113;
    *(void *)(a1 + 304) = v114;
    *(void *)(a1 + 312) = v115;
    *(void *)(a1 + 320) = v116;
    *(void *)(a1 + 328) = v94;
    *(void *)(a1 + 336) = v117;
    uint64_t v6 = v230;
    a3 = v233;
    *(void *)(a1 + 344) = v118;
    *(void *)(a1 + 352) = v119;
    *(void *)(a1 + 360) = v219;
    *(void *)(a1 + 368) = v221;
    *(void *)(a1 + 376) = v223;
    *(void *)(a1 + 384) = v225;
    *(void *)(a1 + 392) = v227;
    outlined consume of PlatformItemList.Item.SystemItem(v120, v121, v122, v123, v124, v125, v126, v127, v128, *((uint64_t *)&v128 + 1), v129, SBYTE8(v129), v130);
  }
  uint64_t v131 = (_OWORD *)(a1 + 400);
  uint64_t v132 = (_OWORD *)(v6 + 122);
  double v133 = (_OWORD *)(a1 + 408);
  uint64_t v134 = *(void *)(a1 + 408);
  uint64_t v135 = (_OWORD *)(a2 + 408);
  uint64_t v136 = *(void *)(a2 + 408);
  if (v134 != 1)
  {
    if (v136 == 1)
    {
      outlined destroy of PlatformItemList.Item.SelectionBehavior(a1 + 400);
      *uint64_t v131 = *v132;
      long long v141 = *(_OWORD *)(v6 + 154);
      long long v140 = *(_OWORD *)(v6 + 170);
      long long v142 = *(_OWORD *)(v6 + 138);
      *(unsigned char *)(a1 + 464) = *(unsigned char *)(v6 + 186);
      *(_OWORD *)(a1 + 432) = v141;
      *(_OWORD *)(a1 + 448) = v140;
      *(_OWORD *)(a1 + 416) = v142;
      goto LABEL_85;
    }
    *(unsigned char *)(a1 + 400) = *(unsigned char *)(v6 + 122);
    *(unsigned char *)(a1 + 401) = *(unsigned char *)(v6 + 123);
    *(unsigned char *)(a1 + 402) = *(unsigned char *)(v6 + 124);
    *(unsigned char *)(a1 + 403) = *(unsigned char *)(v6 + 125);
    *(unsigned char *)(a1 + 404) = *(unsigned char *)(a2 + 404);
    uint64_t v148 = *(void *)(a2 + 408);
    if (v134)
    {
      if (v148)
      {
        uint64_t v149 = *(void *)(a2 + 416);
        *(void *)(a1 + 408) = v148;
        *(void *)(a1 + 416) = v149;
        swift_retain();
        swift_release();
        goto LABEL_70;
      }
      swift_release();
    }
    else if (v148)
    {
      uint64_t v150 = *(void *)(a2 + 416);
      *(void *)(a1 + 408) = v148;
      *(void *)(a1 + 416) = v150;
      swift_retain();
      goto LABEL_70;
    }
    *double v133 = *v135;
LABEL_70:
    uint64_t v151 = *(void *)(a2 + 424);
    if (*(void *)(a1 + 424))
    {
      if (v151)
      {
        uint64_t v152 = *(void *)(a2 + 432);
        *(void *)(a1 + 424) = v151;
        *(void *)(a1 + 432) = v152;
        swift_retain();
        swift_release();
        goto LABEL_77;
      }
      swift_release();
    }
    else if (v151)
    {
      uint64_t v153 = *(void *)(a2 + 432);
      *(void *)(a1 + 424) = v151;
      *(void *)(a1 + 432) = v153;
      swift_retain();
      goto LABEL_77;
    }
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
LABEL_77:
    uint64_t v147 = *(void *)(a2 + 440);
    if (*(void *)(a1 + 440))
    {
      if (v147)
      {
        uint64_t v154 = *(void *)(a2 + 448);
        *(void *)(a1 + 440) = v147;
        *(void *)(a1 + 448) = v154;
        swift_retain();
        swift_release();
        goto LABEL_84;
      }
      swift_release();
    }
    else if (v147)
    {
      goto LABEL_81;
    }
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
    goto LABEL_84;
  }
  if (v136 == 1)
  {
    *uint64_t v131 = *v132;
    long long v137 = *(_OWORD *)(v6 + 138);
    long long v138 = *(_OWORD *)(v6 + 154);
    long long v139 = *(_OWORD *)(v6 + 170);
    *(unsigned char *)(a1 + 464) = *(unsigned char *)(v6 + 186);
    *(_OWORD *)(a1 + 432) = v138;
    *(_OWORD *)(a1 + 448) = v139;
    *(_OWORD *)(a1 + 416) = v137;
    goto LABEL_85;
  }
  *(unsigned char *)(a1 + 400) = *(unsigned char *)(a2 + 400);
  *(unsigned char *)(a1 + 401) = *(unsigned char *)(a2 + 401);
  *(unsigned char *)(a1 + 402) = *(unsigned char *)(a2 + 402);
  *(unsigned char *)(a1 + 403) = *(unsigned char *)(a2 + 403);
  *(unsigned char *)(a1 + 404) = *(unsigned char *)(a2 + 404);
  uint64_t v143 = *(void *)(a2 + 408);
  if (v143)
  {
    uint64_t v144 = *(void *)(a2 + 416);
    *(void *)(a1 + 408) = v143;
    *(void *)(a1 + 416) = v144;
    swift_retain();
    uint64_t v145 = *(void *)(a2 + 424);
    if (v145) {
      goto LABEL_58;
    }
  }
  else
  {
    *double v133 = *v135;
    uint64_t v145 = *(void *)(a2 + 424);
    if (v145)
    {
LABEL_58:
      uint64_t v146 = *(void *)(a2 + 432);
      *(void *)(a1 + 424) = v145;
      *(void *)(a1 + 432) = v146;
      swift_retain();
      uint64_t v147 = *(void *)(a2 + 440);
      if (!v147) {
        goto LABEL_65;
      }
LABEL_81:
      uint64_t v155 = *(void *)(a2 + 448);
      *(void *)(a1 + 440) = v147;
      *(void *)(a1 + 448) = v155;
      swift_retain();
      goto LABEL_84;
    }
  }
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
  uint64_t v147 = *(void *)(a2 + 440);
  if (v147) {
    goto LABEL_81;
  }
LABEL_65:
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
LABEL_84:
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
LABEL_85:
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 496);
  uint64_t v156 = *(void *)(a2 + 504);
  if (*(void *)(a1 + 504))
  {
    if (v156)
    {
      uint64_t v157 = *(void *)(a2 + 512);
      *(void *)(a1 + 504) = v156;
      *(void *)(a1 + 512) = v157;
      swift_retain();
      swift_release();
      goto LABEL_92;
    }
    swift_release();
  }
  else if (v156)
  {
    uint64_t v158 = *(void *)(a2 + 512);
    *(void *)(a1 + 504) = v156;
    *(void *)(a1 + 512) = v158;
    swift_retain();
    goto LABEL_92;
  }
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
LABEL_92:
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  v159 = (_OWORD *)(a1 + 528);
  v160 = (_OWORD *)(a2 + 528);
  uint64_t v161 = *(void *)(a2 + 528);
  if (*(void *)(a1 + 528))
  {
    if (v161)
    {
      *(void *)(a1 + 528) = v161;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 536) = *(void *)(a2 + 536);
      swift_retain();
      swift_release();
      *(void *)(a1 + 544) = *(void *)(a2 + 544);
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of PlatformItemList.Item.Accessibility(a1 + 528);
      uint64_t v162 = *(void *)(a2 + 544);
      _OWORD *v159 = *v160;
      *(void *)(a1 + 544) = v162;
    }
  }
  else if (v161)
  {
    *(void *)(a1 + 528) = v161;
    *(void *)(a1 + 536) = *(void *)(a2 + 536);
    *(void *)(a1 + 544) = *(void *)(a2 + 544);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v163 = *v160;
    *(void *)(a1 + 544) = *(void *)(a2 + 544);
    _OWORD *v159 = v163;
  }
  v164 = (long long *)(a1 + 552);
  v165 = (long long *)(a2 + 552);
  uint64_t v166 = *(void *)(a2 + 552);
  if (*(void *)(a1 + 552) == 1)
  {
    if (v166 == 1)
    {
      long long v167 = *v165;
      *(void *)(a1 + 568) = *(void *)(a2 + 568);
      long long *v164 = v167;
      goto LABEL_115;
    }
    *(void *)(a1 + 552) = v166;
    uint64_t v169 = *(void *)(a2 + 560);
    swift_retain();
    if (!v169)
    {
      *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
      goto LABEL_115;
    }
    uint64_t v170 = *(void *)(a2 + 568);
    *(void *)(a1 + 560) = v169;
    goto LABEL_112;
  }
  if (v166 == 1)
  {
    outlined destroy of PlatformItemList.Item.SecondaryNavigationBehavior(a1 + 552);
    uint64_t v168 = *(void *)(a2 + 568);
    long long *v164 = *v165;
    *(void *)(a1 + 568) = v168;
    goto LABEL_115;
  }
  *(void *)(a1 + 552) = v166;
  swift_retain();
  swift_release();
  uint64_t v171 = *(void *)(a2 + 560);
  if (*(void *)(a1 + 560))
  {
    if (v171)
    {
      uint64_t v172 = *(void *)(a2 + 568);
      *(void *)(a1 + 560) = v171;
      *(void *)(a1 + 568) = v172;
      swift_retain();
      swift_release();
      goto LABEL_115;
    }
    swift_release();
  }
  else if (v171)
  {
    uint64_t v170 = *(void *)(a2 + 568);
    *(void *)(a1 + 560) = v171;
LABEL_112:
    *(void *)(a1 + 568) = v170;
    swift_retain();
    goto LABEL_115;
  }
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
LABEL_115:
  v173 = *(void **)(a1 + 576);
  v174 = *(void **)(a2 + 576);
  *(void *)(a1 + 576) = v174;
  id v175 = v174;

  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 632) = *(unsigned char *)(a2 + 632);
  *(unsigned char *)(a1 + 633) = *(unsigned char *)(a2 + 633);
  *(unsigned char *)(a1 + 634) = *(unsigned char *)(a2 + 634);
  uint64_t v176 = a3[28];
  v177 = (unsigned char *)(a1 + v176);
  v178 = (unsigned char *)(a2 + v176);
  uint64_t v179 = type metadata accessor for CommandOperation();
  uint64_t v180 = *(void *)(v179 - 8);
  v181 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v180 + 48);
  LODWORD(v173) = v181(v177, 1, v179);
  int v182 = v181(v178, 1, v179);
  if (!v173)
  {
    if (!v182)
    {
      v235 = a3;
      unsigned char *v177 = *v178;
      uint64_t v198 = *(int *)(v179 + 20);
      v199 = &v177[v198];
      v200 = &v178[v198];
      uint64_t v201 = *(void *)&v178[v198];
      uint64_t v202 = *(void *)&v178[v198 + 8];
      char v203 = v178[v198 + 16];
      outlined copy of Text.Storage(v201, v202, v203);
      uint64_t v204 = *(void *)v199;
      uint64_t v205 = *((void *)v199 + 1);
      char v206 = v199[16];
      *(void *)v199 = v201;
      *((void *)v199 + 1) = v202;
      v199[16] = v203;
      outlined consume of Text.Storage(v204, v205, v206);
      *((void *)v199 + 3) = *((void *)v200 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v207 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      v208 = &v199[v207];
      v209 = &v200[v207];
      uint64_t v210 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v210 - 8) + 24))(v208, v209, v210);
      uint64_t v211 = *(int *)(v179 + 24);
      v212 = &v177[v211];
      v213 = &v178[v211];
      uint64_t v214 = *(void *)&v178[v211];
      if (*v212)
      {
        a3 = v235;
        if (v214)
        {
          uint64_t v215 = *((void *)v213 + 1);
          void *v212 = v214;
          v212[1] = v215;
          swift_retain();
          swift_release();
          goto LABEL_127;
        }
        swift_release();
      }
      else
      {
        a3 = v235;
        if (v214)
        {
          uint64_t v217 = *((void *)v213 + 1);
          void *v212 = v214;
          v212[1] = v217;
          swift_retain();
          goto LABEL_127;
        }
      }
      *(_OWORD *)v212 = *(_OWORD *)v213;
      goto LABEL_127;
    }
    outlined destroy of CommandOperation((uint64_t)v177, (uint64_t (*)(void))type metadata accessor for CommandOperation);
    goto LABEL_121;
  }
  if (v182)
  {
LABEL_121:
    type metadata accessor for CommandOperation?(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
    memcpy(v177, v178, *(void *)(*(void *)(v197 - 8) + 64));
    goto LABEL_127;
  }
  v231 = v178;
  v234 = a3;
  unsigned char *v177 = *v178;
  uint64_t v183 = *(int *)(v179 + 20);
  v184 = &v177[v183];
  v185 = &v178[v183];
  uint64_t v186 = *(void *)v185;
  uint64_t v187 = *((void *)v185 + 1);
  char v188 = v185[16];
  outlined copy of Text.Storage(*(void *)v185, v187, v188);
  *(void *)v184 = v186;
  *((void *)v184 + 1) = v187;
  v184[16] = v188;
  *((void *)v184 + 3) = *((void *)v185 + 3);
  uint64_t v189 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  v228 = &v184[v189];
  v190 = &v185[v189];
  uint64_t v191 = type metadata accessor for UUID();
  v192 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v191 - 8) + 16);
  swift_bridgeObjectRetain();
  v192(v228, v190, v191);
  uint64_t v193 = *(int *)(v179 + 24);
  v194 = &v177[v193];
  v195 = &v231[v193];
  if (*v195)
  {
    uint64_t v196 = v195[1];
    void *v194 = *v195;
    v194[1] = v196;
    swift_retain();
  }
  else
  {
    *(_OWORD *)v194 = *(_OWORD *)v195;
  }
  a3 = v234;
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v180 + 56))(v177, 0, 1, v179);
LABEL_127:
  *(unsigned char *)(a1 + a3[29]) = *(unsigned char *)(a2 + a3[29]);
  *(unsigned char *)(a1 + a3[30]) = *(unsigned char *)(a2 + a3[30]);
  *(unsigned char *)(a1 + a3[31]) = *(unsigned char *)(a2 + a3[31]);
  *(unsigned char *)(a1 + a3[32]) = *(unsigned char *)(a2 + a3[32]);
  *(void *)(a1 + a3[33]) = *(void *)(a2 + a3[33]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for PlatformItemList.Item(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  long long v8 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v8;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
  long long v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  long long v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v10;
  long long v11 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v11;
  long long v12 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v12;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  long long v13 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v13;
  long long v14 = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 376) = v14;
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  long long v15 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v15;
  long long v16 = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 344) = v16;
  long long v17 = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = v17;
  *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
  long long v18 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v18;
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 481) = *(_OWORD *)(a2 + 481);
  uint64_t v19 = *(void *)(a2 + 504);
  if (v19)
  {
    uint64_t v20 = *(void *)(a2 + 512);
    *(void *)(a1 + 504) = v19;
    *(void *)(a1 + 512) = v20;
  }
  else
  {
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  }
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  char v21 = *(unsigned char *)(a2 + 632);
  *(_WORD *)(a1 + 633) = *(_WORD *)(a2 + 633);
  uint64_t v22 = a3[28];
  long long v23 = (unsigned char *)(a1 + v22);
  long long v24 = (unsigned char *)(a2 + v22);
  *(unsigned char *)(a1 + 632) = v21;
  uint64_t v25 = type metadata accessor for CommandOperation();
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    type metadata accessor for CommandOperation?(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    unsigned char *v23 = *v24;
    uint64_t v28 = *(int *)(v25 + 20);
    long long v29 = &v23[v28];
    long long v30 = &v24[v28];
    long long v31 = *(_OWORD *)&v24[v28 + 16];
    *long long v29 = *(_OWORD *)&v24[v28];
    v29[1] = v31;
    uint64_t v32 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    long long v33 = (char *)v29 + v32;
    int v34 = &v30[v32];
    uint64_t v35 = type metadata accessor for UUID();
    (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v35 - 8) + 32))(v33, v34, v35);
    uint64_t v36 = *(int *)(v25 + 24);
    id v37 = &v23[v36];
    id v38 = (uint64_t *)&v24[v36];
    uint64_t v39 = *v38;
    if (*v38)
    {
      uint64_t v40 = v38[1];
      *id v37 = v39;
      v37[1] = v40;
    }
    else
    {
      *(_OWORD *)id v37 = *(_OWORD *)v38;
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  uint64_t v41 = a3[30];
  *(unsigned char *)(a1 + a3[29]) = *(unsigned char *)(a2 + a3[29]);
  *(unsigned char *)(a1 + v41) = *(unsigned char *)(a2 + v41);
  uint64_t v42 = a3[32];
  *(unsigned char *)(a1 + a3[31]) = *(unsigned char *)(a2 + a3[31]);
  *(unsigned char *)(a1 + v42) = *(unsigned char *)(a2 + v42);
  *(void *)(a1 + a3[33]) = *(void *)(a2 + a3[33]);
  return a1;
}

uint64_t sub_187B48484(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    type metadata accessor for CommandOperation?(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
    long long v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    long long v12 = (char *)a1 + *(int *)(a3 + 112);
    return v10(v12, a2, v11);
  }
}

void *sub_187B48570(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    *uint64_t result = a2;
  }
  else
  {
    type metadata accessor for CommandOperation?(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
    long long v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    long long v10 = (char *)v5 + *(int *)(a4 + 112);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for PlatformItemListReader()
{
  uint64_t result = type metadata accessor for _VariadicView.Tree();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for PlatformItemListReader(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 32);
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6;
  unint64_t v8 = v6 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = v6 + 16;
  unint64_t v10 = v8 & v9;
  int v11 = v6 & 0x100000;
  uint64_t v12 = *a2;
  if (v7 > 7 || v11 != 0 || ((v7 + 16) & ~v7) + *(void *)(v5 + 64) + v10 > 0x18)
  {
    *a1 = v12;
    a1 = (void *)(v12 + v10);
    swift_retain();
  }
  else
  {
    uint64_t v15 = ~v7;
    uint64_t v16 = a2[1];
    *a1 = v12;
    a1[1] = v16;
    long long v17 = (_OWORD *)(v8 & ((unint64_t)a1 + 23));
    long long v18 = (_OWORD *)(v8 & ((unint64_t)a2 + 23));
    *long long v17 = *v18;
    unint64_t v19 = ((unint64_t)v17 + v9) & v15;
    unint64_t v20 = ((unint64_t)v18 + v9) & v15;
    char v21 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v21(v19, v20, v4);
  }
  return a1;
}

uint64_t destroy for PlatformItemListReader(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 32) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80)
      + ((a1 + (*(unsigned __int8 *)(v4 + 80) | 7) + 16) & ~(*(unsigned __int8 *)(v4 + 80) | 7))
      + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

void *initializeWithCopy for PlatformItemListReader(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a3 + 32);
  unint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v8 = (v7 | 7) + 16;
  uint64_t v9 = (_OWORD *)(((unint64_t)a1 + v8) & ~(v7 | 7));
  unint64_t v10 = (_OWORD *)(((unint64_t)a2 + v8) & ~(v7 | 7));
  _OWORD *v9 = *v10;
  uint64_t v11 = ((unint64_t)v9 + v7 + 16) & ~v7;
  uint64_t v12 = ((unint64_t)v10 + v7 + 16) & ~v7;
  swift_retain();
  v6(v11, v12, v5);
  return a1;
}

void *assignWithCopy for PlatformItemListReader(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v8 = *(void (**)(unint64_t, unint64_t))(v7 + 24);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (v9 | 7) + 16;
  uint64_t v11 = (void *)(((unint64_t)a1 + v10) & ~(v9 | 7));
  uint64_t v12 = (void *)(((unint64_t)a2 + v10) & ~(v9 | 7));
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  v8(((unint64_t)v11 + v9 + 16) & ~v9, ((unint64_t)v12 + v9 + 16) & ~v9);
  return a1;
}

_OWORD *initializeWithTake for PlatformItemListReader(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v5 = *(void (**)(unint64_t, unint64_t))(v4 + 32);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 | 7) + 16;
  uint64_t v8 = (_OWORD *)(((unint64_t)a1 + v7) & ~(v6 | 7));
  uint64_t v9 = (_OWORD *)(((unint64_t)a2 + v7) & ~(v6 | 7));
  *uint64_t v8 = *v9;
  v5(((unint64_t)v8 + v6 + 16) & ~v6, ((unint64_t)v9 + v6 + 16) & ~v6);
  return a1;
}

_OWORD *assignWithTake for PlatformItemListReader(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t))(v6 + 40);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 | 7) + 16;
  uint64_t v10 = (void *)(((unint64_t)a1 + v9) & ~(v8 | 7));
  uint64_t v11 = (void *)(((unint64_t)a2 + v9) & ~(v8 | 7));
  *uint64_t v10 = *v11;
  v10[1] = v11[1];
  v7(((unint64_t)v10 + v8 + 16) & ~v8, ((unint64_t)v11 + v8 + 16) & ~v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformItemListReader(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 32) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = v6 | 7;
  uint64_t v9 = v6 + 16;
  int v10 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v11 = (v9 & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 32) - 8) + 64) + (v9 & ~v8);
  char v12 = 8 * v11;
  if (v11 <= 3)
  {
    unsigned int v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      int v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v15 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(unsigned __int16 *)((char *)a1 + v11)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v15 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((v9 + (((unint64_t)a1 + v8 + 16) & ~v8)) & ~v6);
      }
      uint64_t v17 = *(void *)a1;
      if (*(void *)a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v17) = -1;
      }
      return (v17 + 1);
    }
  }
  int v13 = *((unsigned __int8 *)a1 + v11);
  if (!*((unsigned char *)a1 + v11)) {
    goto LABEL_23;
  }
LABEL_15:
  int v16 = (v13 - 1) << v12;
  if (v11 > 3) {
    int v16 = 0;
  }
  if (v11)
  {
    if (v11 > 3) {
      LODWORD(v11) = 4;
    }
    switch((int)v11)
    {
      case 2:
        LODWORD(v11) = *a1;
        break;
      case 3:
        LODWORD(v11) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v11) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v11) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v11 | v16) + 1;
}

void storeEnumTagSinglePayload for PlatformItemListReader(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 32) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 16) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 32) - 8) + 64);
  size_t v11 = v10 + ((v9 + 16) & ~(v9 | 7));
  BOOL v12 = a3 >= v8;
  unsigned int v13 = a3 - v8;
  if (v13 != 0 && v12)
  {
    if (v11 <= 3)
    {
      unsigned int v17 = ((v13 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
      if (HIWORD(v17))
      {
        int v14 = 4;
      }
      else if (v17 >= 0x100)
      {
        int v14 = 2;
      }
      else
      {
        int v14 = v17 > 1;
      }
    }
    else
    {
      int v14 = 1;
    }
  }
  else
  {
    int v14 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v15 = ~v8 + a2;
    if (v11 < 4)
    {
      int v16 = (v15 >> (8 * v11)) + 1;
      if (v11)
      {
        int v18 = v15 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v15;
      int v16 = 1;
    }
    switch(v14)
    {
      case 1:
        a1[v11] = v16;
        return;
      case 2:
        *(_WORD *)&a1[v11] = v16;
        return;
      case 3:
        goto LABEL_55;
      case 4:
        *(_DWORD *)&a1[v11] = v16;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_55:
      __break(1u);
      JUMPOUT(0x187B49004);
    case 4:
      *(_DWORD *)&a1[v11] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v20 = (unsigned char *)((unint64_t)&a1[(v9 | 7) + 16] & ~(v9 | 7));
          if (v7 >= a2)
          {
            long long v24 = *(void (**)(unint64_t))(v6 + 56);
            v24((unint64_t)&v20[v9 + 16] & ~v9);
          }
          else
          {
            if (v10 <= 3) {
              int v21 = ~(-1 << (8 * v10));
            }
            else {
              int v21 = -1;
            }
            if (v10)
            {
              int v22 = v21 & (~v7 + a2);
              if (v10 <= 3) {
                int v23 = v10;
              }
              else {
                int v23 = 4;
              }
              bzero(v20, v10);
              switch(v23)
              {
                case 2:
                  *(_WORD *)unint64_t v20 = v22;
                  break;
                case 3:
                  *(_WORD *)unint64_t v20 = v22;
                  _OWORD v20[2] = BYTE2(v22);
                  break;
                case 4:
                  *(_DWORD *)unint64_t v20 = v22;
                  break;
                default:
                  *unint64_t v20 = v22;
                  break;
              }
            }
          }
        }
        else
        {
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            *((void *)a1 + 1) = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *(void *)a1 = v19;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for PlatformItemListReader()
{
  return swift_getGenericMetadata();
}

void destroy for PlatformItemList.Item.SystemItem(uint64_t a1)
{
}

void *initializeWithCopy for PlatformItemList.Item.SystemItem(void *a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  uint64_t v16 = *(void *)(a2 + 96);
  outlined copy of PlatformItemList.Item.SystemItem(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  return a1;
}

uint64_t assignWithCopy for PlatformItemList.Item.SystemItem(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v24 = *(void *)(a2 + 72);
  uint64_t v25 = *(void *)(a2 + 80);
  uint64_t v26 = *(void *)(a2 + 88);
  uint64_t v27 = *(void *)(a2 + 96);
  outlined copy of PlatformItemList.Item.SystemItem(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v24, v25, v26, v27);
  BOOL v12 = *(void **)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  unint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  uint64_t v22 = *(void *)(a1 + 96);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v24;
  *(void *)(a1 + 80) = v25;
  *(void *)(a1 + 88) = v26;
  *(void *)(a1 + 96) = v27;
  outlined consume of PlatformItemList.Item.SystemItem(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, SBYTE8(v21), v22);
  return a1;
}

uint64_t assignWithTake for PlatformItemList.Item.SystemItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 96);
  uint64_t v4 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  unint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  long long v12 = *(_OWORD *)(a1 + 64);
  long long v13 = *(_OWORD *)(a1 + 80);
  uint64_t v14 = *(void *)(a1 + 96);
  long long v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  long long v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  long long v17 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v17;
  *(void *)(a1 + 96) = v3;
  outlined consume of PlatformItemList.Item.SystemItem(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, SBYTE8(v13), v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformItemList.Item.SystemItem(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 32) >> 2;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for PlatformItemList.Item.SystemItem(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 32) = 4 * -a2;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      return result;
    }
    *(unsigned char *)(a1 + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTag for PlatformItemList.Item.SystemItem(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32) >> 62;
  if (v1 == 3) {
    return (*(_DWORD *)a1 + 3);
  }
  else {
    return v1;
  }
}

uint64_t destructiveInjectEnumTag for PlatformItemList.Item.SystemItem(uint64_t result, uint64_t a2)
{
  if (a2 < 3)
  {
    *(void *)(result + 32) = *(void *)(result + 32) & 3 | (a2 << 62);
  }
  else
  {
    *(void *)double result = (a2 - 3);
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)(result + 32) = 0xC000000000000000;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlatformItemList.Item.SystemItem()
{
  return &type metadata for PlatformItemList.Item.SystemItem;
}

ValueMetadata *type metadata accessor for PlatformItemList.Key()
{
  return &type metadata for PlatformItemList.Key;
}

ValueMetadata *type metadata accessor for IsPlatformItemListSourcePredicate()
{
  return &type metadata for IsPlatformItemListSourcePredicate;
}

_UNKNOWN **base witness table accessor for View in PlatformItemListReader<A, B, C>()
{
  return &protocol witness table for PlatformItemListReader<A, B, C>;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in PlatformItemListContentModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for Rule.value.getter in conformance PlatformItemListTextRepresentable.PlatformRepresentation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = PlatformItemListTextRepresentable.PlatformRepresentation.value.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance PlatformItemListTextRepresentable.PlatformRepresentation(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlatformItemListTextRepresentable.PlatformRepresentation and conformance PlatformItemListTextRepresentable.PlatformRepresentation();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static PlatformTextRepresentable.representationOptions(inputs:) in conformance PlatformItemListTextRepresentable@<X0>(void *a1@<X8>)
{
  lazy protocol witness table accessor for type IncludesStyledText and conformance IncludesStyledText();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t protocol witness for static PlatformTextRepresentable.makeRepresentation(inputs:context:outputs:) in conformance PlatformItemListTextRepresentable()
{
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Rule.value.getter in conformance PlatformItemListImageRepresentable.PlatformRepresentation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = PlatformItemListImageRepresentable.PlatformRepresentation.value.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance PlatformItemListNamedImageRepresentable.NamedResolvedRule@<X0>(void *a1@<X8>)
{
  return protocol witness for Rule.value.getter in conformance PlatformItemListNamedImageRepresentable.NamedResolvedRule((uint64_t)partial apply for closure #1 in PlatformItemListNamedImageRepresentable.NamedResolvedRule.value.getter, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> (), a1);
}

uint64_t protocol witness for static PlatformSpacerRepresentable.makeRepresentation(inputs:outputs:) in conformance PlatformItemListSpacerRepresentable()
{
  return protocol witness for static PlatformSpacerRepresentable.makeRepresentation(inputs:outputs:) in conformance PlatformItemListSpacerRepresentable();
}

{
  uint64_t vars8;

  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static PlatformDividerRepresentable.makeRepresentation(inputs:outputs:) in conformance PlatformItemListDividerRepresentable()
{
  return protocol witness for static PlatformSpacerRepresentable.makeRepresentation(inputs:outputs:) in conformance PlatformItemListSpacerRepresentable();
}

uint64_t implicit closure #1 in static PlatformItemListViewThatFitsRepresentable.makeRepresentation(inputs:state:outputs:)()
{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  lazy protocol witness table accessor for type PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList and conformance PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList();
  swift_retain();
  uint64_t v0 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  return v0;
}

uint64_t protocol witness for Rule.value.getter in conformance PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = partial apply for closure #1 in PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList.value.getter;
  *(void *)(v4 + 24) = v3;
  *a1 = thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ()partial apply;
  a1[1] = v4;

  return swift_retain();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList and conformance PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static PlatformViewThatFitsRepresentable.shouldMakeRepresentation(inputs:) in conformance PlatformItemListViewThatFitsRepresentable(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 48);
  char v1 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  uint64_t result = 0;
  if (v1)
  {
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return (v3 >> 6) & 1;
  }
  return result;
}

unsigned char *closure #1 in PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform.value.getter(void *a1)
{
  uint64_t result = (unsigned char *)AGGraphGetValue();
  if (*result == 1 && (result[8] & 2) == 0)
  {
    uint64_t result = (unsigned char *)swift_bridgeObjectRelease();
    *a1 = MEMORY[0x1E4FBC860];
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform@<X0>(void *a1@<X8>)
{
  return protocol witness for Rule.value.getter in conformance PlatformItemListNamedImageRepresentable.NamedResolvedRule((uint64_t)partial apply for closure #1 in PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform.value.getter, (uint64_t)thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ()partial apply, a1);
}

uint64_t protocol witness for static PlatformDynamicHiddenRepresentable.makeRepresentation(inputs:modifier:outputs:) in conformance PlatformItemListDynamicHiddenRepresentable()
{
  return swift_bridgeObjectRelease();
}

id outlined copy of PlatformItemList.Item.SystemItem?(id result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  if (a5 >> 2 != 0xFFFFFFFF) {
    return outlined copy of PlatformItemList.Item.SystemItem(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  }
  return result;
}

uint64_t outlined assign with take of PlatformItemList.Item.SystemItem?(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI5ImageVAAE8ResolvedVSgMaTm_0(0, &lazy cache variable for type metadata for PlatformItemList.Item.SystemItem?, (uint64_t)&type metadata for PlatformItemList.Item.SystemItem, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_187B49B48()
{
  unint64_t v1 = *(void *)(v0 + 48);
  if (v1 >> 2 != 0xFFFFFFFF) {
    outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), v1, *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112));
  }

  return swift_deallocObject();
}

uint64_t outlined copy of PlatformItemList.Item.Accessibility?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_187B49C04()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #2 in PlatformItemList.containerSelectionBehavior.getter()
{
  return specialized closure #1 in PlatformItemList.containerSelectionBehavior.getter(*(void *)(v0 + 16));
}

uint64_t partial apply for specialized closure #3 in PlatformItemList.containerSelectionBehavior.getter(char a1)
{
  return specialized closure #3 in PlatformItemList.containerSelectionBehavior.getter(a1 & 1, *(void *)(v1 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned ()?) -> (@unowned Bool)@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t partial apply for closure #1 in static PlatformItemListReader._makeView(view:inputs:)(uint64_t a1)
{
  return closure #1 in static PlatformItemListReader._makeView(view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_187B49CB4()
{
  return 48;
}

__n128 sub_187B49CC0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t type metadata accessor for PlatformItemListReader.Child()
{
  return swift_getGenericMetadata();
}

uint64_t sub_187B49CEC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed PlatformItemList) -> (@out B)(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 64);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed PlatformItemList) -> (@out B)(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 64))(*a1);
}

uint64_t sub_187B49D88()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  long long v6 = *(_OWORD *)(v0 + 32);
  long long v3 = (int *)(type metadata accessor for PlatformItemLabelView() - 8);
  uint64_t v4 = v0
     + ((*(unsigned __int8 *)(*(void *)v3 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v3 + 80));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v4, v1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v4 + v3[19], v2);
  (*(void (**)(uint64_t))(*(void *)(v6 - 8) + 8))(v4 + v3[20]);
  return swift_deallocObject();
}

void partial apply for implicit closure #2 in implicit closure #1 in PlatformItemLabelView.body.getter(uint64_t *a1)
{
  type metadata accessor for PlatformItemLabelView();

  specialized PlatformItemLabelView.applyLabel(_:)(a1);
}

void specialized PlatformItemLabelView.applyLabel(_:)(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for PlatformItemList.Item();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  unint64_t v8 = (id *)((char *)&v21 - v7);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (id *)((char *)&v21 - v10);
  uint64_t v12 = *a1;
  uint64_t v13 = *(void *)(*a1 + 16);
  if (v13)
  {
    unint64_t v14 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    outlined init with copy of PlatformItemList.Item(v12 + v14, (uint64_t)&v21 - v10);
    if (v13 == 1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v15 = v12 + v14 + *(void *)(v3 + 72);
      long long v16 = *(void **)(v15 + 576);
      outlined init with copy of PlatformItemList.Item(v15, (uint64_t)v8);
      id v17 = v16;
      if (!v16)
      {
        id v17 = *v8;
        id v18 = *v8;
      }
      id v19 = v16;
      outlined destroy of CommandOperation((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      swift_bridgeObjectRelease();

      v11[72] = v17;
    }
    outlined init with copy of PlatformItemList.Item((uint64_t)v11, (uint64_t)v5);
    type metadata accessor for CommandOperation?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBBE00]);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_18834BB80;
    outlined init with take of PlatformItemList.Item((uint64_t)v5, v20 + v14);
    *a1 = v20;
    outlined destroy of CommandOperation((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  }
}

uint64_t sub_187B4A160()
{
  return swift_deallocObject();
}

void *partial apply for closure #1 in View.platformItemSelector(_:)(void *a1)
{
  return closure #1 in View.platformItemSelector(_:)(a1, *(void *)(v1 + 16));
}

void *outlined retain of PlatformItemList.Item.SystemItem?(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

void *type metadata accessor for ItemHostingViewGraph()
{
  return &unk_1ED4819A8;
}

ValueMetadata *type metadata accessor for PlatformItemListDynamicHiddenRepresentable()
{
  return &type metadata for PlatformItemListDynamicHiddenRepresentable;
}

ValueMetadata *type metadata accessor for PlatformItemListHiddenRepresentable()
{
  return &type metadata for PlatformItemListHiddenRepresentable;
}

ValueMetadata *type metadata accessor for PlatformItemListViewThatFitsRepresentable()
{
  return &type metadata for PlatformItemListViewThatFitsRepresentable;
}

ValueMetadata *type metadata accessor for PlatformItemListDividerRepresentable()
{
  return &type metadata for PlatformItemListDividerRepresentable;
}

ValueMetadata *type metadata accessor for PlatformItemListSpacerRepresentable()
{
  return &type metadata for PlatformItemListSpacerRepresentable;
}

ValueMetadata *type metadata accessor for PlatformItemListNamedImageRepresentable()
{
  return &type metadata for PlatformItemListNamedImageRepresentable;
}

ValueMetadata *type metadata accessor for PlatformItemListImageRepresentable()
{
  return &type metadata for PlatformItemListImageRepresentable;
}

ValueMetadata *type metadata accessor for PlatformItemListTextRepresentable()
{
  return &type metadata for PlatformItemListTextRepresentable;
}

ValueMetadata *type metadata accessor for IsPlatformItemListSourceInput()
{
  return &type metadata for IsPlatformItemListSourceInput;
}

uint64_t assignWithTake for OnPlatformContainerSelectionModifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (!*(void *)a1)
  {
    if (v4)
    {
      uint64_t v6 = a2[1];
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = v6;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = a2[1];
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  swift_release();
LABEL_8:
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  char v7 = *((unsigned char *)a2 + 32);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 32);
  *(void *)(a1 + 24) = a2[3];
  *(unsigned char *)(a1 + 32) = v7;
  outlined consume of Environment<Bool?>.Content(v8, v9);
  uint64_t v10 = a2[7];
  char v11 = *((unsigned char *)a2 + 64);
  char v12 = *((unsigned char *)a2 + 65);
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 56);
  char v16 = *(unsigned char *)(a1 + 65);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  *(void *)(a1 + 56) = v10;
  uint64_t v17 = *(unsigned __int8 *)(a1 + 64);
  *(unsigned char *)(a1 + 64) = v11;
  *(unsigned char *)(a1 + 65) = v12;
  outlined consume of Environment<KeyboardShortcut?>.Content(v13, v14, v15, v17, v16);
  char v18 = *((unsigned char *)a2 + 80);
  uint64_t v19 = *(void *)(a1 + 72);
  uint64_t v20 = *(unsigned __int8 *)(a1 + 80);
  *(void *)(a1 + 72) = a2[9];
  *(unsigned char *)(a1 + 80) = v18;
  outlined consume of Environment<Bool?>.Content(v19, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for OnPlatformContainerSelectionModifier(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 81)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for OnPlatformContainerSelectionModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 81) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

uint64_t destroy for OnPlatformContainerSecondaryNavigationModifier(uint64_t a1)
{
  swift_release();
  if (*(void *)(a1 + 8)) {
    swift_release();
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 32);

  return outlined consume of Environment<Bool?>.Content(v2, v3);
}

uint64_t initializeWithCopy for OnPlatformContainerSecondaryNavigationModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = (_OWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 8);
  swift_retain();
  if (v4)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v6;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *v5;
  }
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(unsigned __int8 *)(a2 + 32);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v7, v8);
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
  return a1;
}

uint64_t assignWithCopy for OnPlatformContainerSecondaryNavigationModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 8);
  if (!*(void *)(a1 + 8))
  {
    if (v4)
    {
      uint64_t v6 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v4;
      *(void *)(a1 + 16) = v6;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  swift_retain();
  swift_release();
LABEL_8:
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(unsigned __int8 *)(a2 + 32);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v7, v8);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 32);
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
  outlined consume of Environment<Bool?>.Content(v9, v10);
  return a1;
}

uint64_t assignWithTake for OnPlatformContainerSecondaryNavigationModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 8);
  if (!*(void *)(a1 + 8))
  {
    if (v4)
    {
      uint64_t v6 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v4;
      *(void *)(a1 + 16) = v6;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  swift_release();
LABEL_8:
  char v7 = *(unsigned char *)(a2 + 32);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = v7;
  outlined consume of Environment<Bool?>.Content(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for OnPlatformContainerSecondaryNavigationModifier(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 33)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for OnPlatformContainerSecondaryNavigationModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OnPlatformContainerSecondaryNavigationModifier()
{
  return &type metadata for OnPlatformContainerSecondaryNavigationModifier;
}

uint64_t getEnumTagSinglePayload for PlatformItemListGeneratingViewModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for PlatformItemListGeneratingViewModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187B4AA9CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        char v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t getEnumTagSinglePayload for MergePlatformItemsView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for MergePlatformItemsView(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187B4AE38);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        char v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

ValueMetadata *type metadata accessor for PlatformItemList.Item.ImageColorResolver()
{
  return &type metadata for PlatformItemList.Item.ImageColorResolver;
}

unsigned char *storeEnumTagSinglePayload for PlatformItemList.Item.SelectionBehavior.VisualStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187B4AF3CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlatformItemList.Item.SelectionBehavior.VisualStyle()
{
  return &type metadata for PlatformItemList.Item.SelectionBehavior.VisualStyle;
}

uint64_t sub_187B4AF74()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout>, HiddenModifierAllowingPlatformItemList> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout>, HiddenModifierAllowingPlatformItemList> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout>, HiddenModifierAllowingPlatformItemList> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout>, HiddenModifierAllowingPlatformItemList>();
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout>, HiddenModifierAllowingPlatformItemList> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout>, HiddenModifierAllowingPlatformItemList>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout>, HiddenModifierAllowingPlatformItemList>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout>, HiddenModifierAllowingPlatformItemList>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout>)
  {
    type metadata accessor for _ViewModifier_Content<PlatformItemListContentModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<PlatformItemListContentModifier>, (void (*)(void))lazy protocol witness table accessor for type PlatformItemListContentModifier and conformance PlatformItemListContentModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout>();
    lazy protocol witness table accessor for type _ViewModifier_Content<PlatformItemListContentModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<PlatformItemListContentModifier> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<PlatformItemListContentModifier>, (void (*)(void))lazy protocol witness table accessor for type PlatformItemListContentModifier and conformance PlatformItemListContentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformItemList.Item.SelectionBehavior.VisualStyle and conformance PlatformItemList.Item.SelectionBehavior.VisualStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItemList.Item.SelectionBehavior.VisualStyle and conformance PlatformItemList.Item.SelectionBehavior.VisualStyle;
  if (!lazy protocol witness table cache variable for type PlatformItemList.Item.SelectionBehavior.VisualStyle and conformance PlatformItemList.Item.SelectionBehavior.VisualStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemList.Item.SelectionBehavior.VisualStyle and conformance PlatformItemList.Item.SelectionBehavior.VisualStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in OnPlatformContainerSecondaryNavigationModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in PlatformItemListReader<A, B, C>.Child()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in static MergePlatformItemsView._makeView(view:inputs:)(uint64_t a1)
{
  return closure #1 in static MergePlatformItemsView._makeView(view:inputs:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for implicit closure #1 in static PlatformItemListTextRepresentable.makeRepresentation(inputs:context:outputs:)()
{
  return implicit closure #1 in static PlatformItemListTextRepresentable.makeRepresentation(inputs:context:outputs:)(*(unsigned int *)(v0 + 16), (void (*)(void))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (void (*)(void))lazy protocol witness table accessor for type PlatformItemListTextRepresentable.PlatformRepresentation and conformance PlatformItemListTextRepresentable.PlatformRepresentation);
}

unint64_t lazy protocol witness table accessor for type PlatformItemListTextRepresentable.PlatformRepresentation and conformance PlatformItemListTextRepresentable.PlatformRepresentation()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItemListTextRepresentable.PlatformRepresentation and conformance PlatformItemListTextRepresentable.PlatformRepresentation;
  if (!lazy protocol witness table cache variable for type PlatformItemListTextRepresentable.PlatformRepresentation and conformance PlatformItemListTextRepresentable.PlatformRepresentation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListTextRepresentable.PlatformRepresentation and conformance PlatformItemListTextRepresentable.PlatformRepresentation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformItemListTextRepresentable.PlatformRepresentation and conformance PlatformItemListTextRepresentable.PlatformRepresentation;
  if (!lazy protocol witness table cache variable for type PlatformItemListTextRepresentable.PlatformRepresentation and conformance PlatformItemListTextRepresentable.PlatformRepresentation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListTextRepresentable.PlatformRepresentation and conformance PlatformItemListTextRepresentable.PlatformRepresentation);
  }
  return result;
}

uint64_t sub_187B4B44C()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in static PlatformItemListViewThatFitsRepresentable.makeRepresentation(inputs:state:outputs:)()
{
  return implicit closure #1 in static PlatformItemListViewThatFitsRepresentable.makeRepresentation(inputs:state:outputs:)();
}

unint64_t lazy protocol witness table accessor for type PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList and conformance PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList and conformance PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList;
  if (!lazy protocol witness table cache variable for type PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList and conformance PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList and conformance PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList and conformance PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList;
  if (!lazy protocol witness table cache variable for type PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList and conformance PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList and conformance PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList.value.getter(uint64_t *a1, uint64_t a2)
{
  return closure #1 in closure #1 in PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList.value.getter(a1, a2, *(void ***)(v2 + 16));
}

uint64_t partial apply for closure #1 in PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList.value.getter(uint64_t *a1)
{
  return closure #1 in PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList.value.getter(a1);
}

uint64_t partial apply for implicit closure #1 in static PlatformItemListDynamicHiddenRepresentable.makeRepresentation(inputs:modifier:outputs:)()
{
  return implicit closure #1 in static PlatformItemListNamedImageRepresentable.makeRepresentation(inputs:context:outputs:)(*(unsigned int *)(v0 + 16), (void (*)(void))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (void (*)(void))lazy protocol witness table accessor for type PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform and conformance PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform);
}

unint64_t lazy protocol witness table accessor for type PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform and conformance PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform and conformance PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform;
  if (!lazy protocol witness table cache variable for type PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform and conformance PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform and conformance PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform);
  }
  return result;
}

uint64_t sub_187B4B57C()
{
  return swift_deallocObject();
}

unsigned char *partial apply for closure #1 in PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform.value.getter(void *a1)
{
  return closure #1 in PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform.value.getter(a1);
}

uint64_t partial apply for closure #1 in PlatformItemListReader.init(flags:content:source:)()
{
  return closure #1 in PlatformItemListReader.init(flags:content:source:)(v0[8], v0[9], v0[2], v0[3], v0[4]);
}

uint64_t partial apply for closure #1 in PlatformItemListReader.Child.value.getter()
{
  return closure #1 in PlatformItemListReader.Child.value.getter(v0[8], v0[2], v0[3], v0[4], v0[5], v0[6], v0[7]);
}

uint64_t partial apply for closure #1 in static PlatformItemListGeneratingViewModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in static PlatformItemListGeneratingViewModifier._makeView(modifier:inputs:body:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_187B4B5DC()
{
  return swift_deallocObject();
}

void *partial apply for closure #1 in View.platformItemHierarchicalLevel(_:)(void *a1)
{
  return closure #1 in View.platformItemHierarchicalLevel(_:)(a1, *(void *)(v1 + 16));
}

uint64_t sub_187B4B5F4()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  outlined consume of Environment<Bool?>.Content(*(void *)(v0 + 40), *(unsigned __int8 *)(v0 + 48));
  outlined consume of Environment<KeyboardShortcut?>.Content(*(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(unsigned __int8 *)(v0 + 80), *(unsigned char *)(v0 + 81));
  outlined consume of Environment<Bool?>.Content(*(void *)(v0 + 88), *(unsigned __int8 *)(v0 + 96));

  return swift_deallocObject();
}

uint64_t sub_187B4B660()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  outlined consume of Environment<Bool?>.Content(*(void *)(v0 + 40), *(unsigned __int8 *)(v0 + 48));

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OnPlatformContainerSecondaryNavigationModifier.body(content:)(uint64_t *a1)
{
  return closure #1 in OnPlatformContainerSecondaryNavigationModifier.body(content:)(a1, v1 + 16);
}

uint64_t outlined retain of Environment<Bool>(uint64_t a1)
{
  return a1;
}

uint64_t sub_187B4B6EC()
{
  unint64_t v1 = *(void *)(v0 + 48);
  if (v1 >> 2 != 0xFFFFFFFF) {
    outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), v1, *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112));
  }
  if (*(void *)(v0 + 120)) {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in View.platformItemChildren<A>(systemItem:primaryAction:menuIndicatorVisibility:controlSize:children:)(uint64_t *a1)
{
  return closure #2 in View.platformItemChildren<A>(systemItem:primaryAction:menuIndicatorVisibility:controlSize:children:)(a1, (void *)(v1 + 16), *(void *)(v1 + 120), *(void *)(v1 + 128), *(unsigned char *)(v1 + 136), *(unsigned __int8 *)(v1 + 137));
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 64);
  swift_retain();
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v2, v3);
  swift_retain();
  return a1;
}

void *type metadata accessor for PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform()
{
  return &unk_1ED465200;
}

void *type metadata accessor for PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList()
{
  return &unk_1ED464EE0;
}

void *type metadata accessor for PlatformItemListNamedImageRepresentable.NamedResolvedRule()
{
  return &unk_1ED4643D8;
}

void *type metadata accessor for PlatformItemListImageRepresentable.PlatformRepresentation()
{
  return &unk_1ED4606C0;
}

void *type metadata accessor for PlatformItemListTextRepresentable.PlatformRepresentation()
{
  return &unk_1ED45F080;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<OnPlatformContainerSecondaryNavigationModifier>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnPlatformContainerSecondaryNavigationModifier>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnPlatformContainerSecondaryNavigationModifier>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<OnPlatformContainerSecondaryNavigationModifier>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>();
    lazy protocol witness table accessor for type _ViewModifier_Content<PlatformItemListContentModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<OnPlatformContainerSecondaryNavigationModifier> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<OnPlatformContainerSecondaryNavigationModifier>, (void (*)(void))lazy protocol witness table accessor for type OnPlatformContainerSecondaryNavigationModifier and conformance OnPlatformContainerSecondaryNavigationModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnPlatformContainerSecondaryNavigationModifier>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<OnPlatformContainerSecondaryNavigationModifier>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<OnPlatformContainerSecondaryNavigationModifier>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>)
  {
    type metadata accessor for _ViewModifier_Content<PlatformItemListContentModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<OnPlatformContainerSecondaryNavigationModifier>, (void (*)(void))lazy protocol witness table accessor for type OnPlatformContainerSecondaryNavigationModifier and conformance OnPlatformContainerSecondaryNavigationModifier);
    type metadata accessor for PlatformItemListTransformModifier<SelectionPlatformItemListFlags>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<OnPlatformContainerSecondaryNavigationModifier>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type OnPlatformContainerSecondaryNavigationModifier and conformance OnPlatformContainerSecondaryNavigationModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type OnPlatformContainerSecondaryNavigationModifier and conformance OnPlatformContainerSecondaryNavigationModifier;
  if (!lazy protocol witness table cache variable for type OnPlatformContainerSecondaryNavigationModifier and conformance OnPlatformContainerSecondaryNavigationModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnPlatformContainerSecondaryNavigationModifier and conformance OnPlatformContainerSecondaryNavigationModifier);
  }
  return result;
}

uint64_t sub_187B4BA80()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t View.focused(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v8[0] = a1;
  v8[1] = a2;
  char v9 = a3;
  char v7 = 1;
  return View.focused<A>(_:equals:)((uint64_t)v8, (uint64_t)&v7, a4, MEMORY[0x1E4FBB390], a5, a6);
}

uint64_t FocusState.Binding.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  specialized FocusState.Binding.wrappedValue.setter();
  unsigned int v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8);

  return v4(a1);
}

void FocusState.Binding.wrappedValue.getter()
{
  type metadata accessor for Binding();

  JUMPOUT(0x18C113DA0);
}

void (*FocusState.Binding.wrappedValue.modify(void *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v5 = malloc(0x28uLL);
  *a1 = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  *uint64_t v5 = v2;
  v5[1] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[2] = v7;
  size_t v8 = *(void *)(v7 + 64);
  void v5[3] = malloc(v8);
  void v5[4] = malloc(v8);
  uint64_t v9 = type metadata accessor for Binding();
  MEMORY[0x18C113DA0](v9);
  return FocusState.Binding.wrappedValue.modify;
}

void (*FocusState.wrappedValue.modify(void *a1, uint64_t a2))(void **a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  *uint64_t v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  void v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  void v5[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v5[5] = v9;
  FocusState.getValue(forReading:)(1, a2, (uint64_t)v9);
  return SceneStorage.wrappedValue.modify;
}

uint64_t static FocusState._makeProperty<A>(in:container:fieldOffset:inputs:)()
{
  return specialized static FocusState._makeProperty<A>(in:container:fieldOffset:inputs:)();
}

Swift::Void __swiftcall FocusState.Box.reset()()
{
  swift_release();
  *(void *)(v0 + 8) = 0;
}

uint64_t FocusStateBindingResponder.__allocating_init(inputs:)()
{
  return FocusStateBindingResponder.init(inputs:)();
}

uint64_t key path setter for EnvironmentValues.focusScopes : EnvironmentValues()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  specialized EnvironmentValues.subscript.setter(v0);

  return swift_bridgeObjectRelease();
}

uint64_t FocusStateBindingResponder.init(inputs:)()
{
  swift_weakInit();
  *(void *)(v0 + 224) = MEMORY[0x1E4FBC860];
  swift_retain();
  ViewTransform.init()();
  *(void *)(v0 + 272) = 0;
  *(void *)(v0 + 280) = 0;
  *(unsigned char *)(v0 + 288) = 1;
  *(void *)(v0 + 296) = 0;
  swift_release();
  return DefaultLayoutViewResponder.init(inputs:)();
}

uint64_t FocusStateBindingResponder.__allocating_init(inputs:viewSubgraph:)()
{
  return FocusStateBindingResponder.init(inputs:viewSubgraph:)();
}

uint64_t FocusStateBindingResponder.init(inputs:viewSubgraph:)()
{
  swift_weakInit();
  *(void *)(v0 + 224) = MEMORY[0x1E4FBC860];
  swift_retain();
  ViewTransform.init()();
  *(void *)(v0 + 272) = 0;
  *(void *)(v0 + 280) = 0;
  *(unsigned char *)(v0 + 288) = 1;
  *(void *)(v0 + 296) = 0;
  swift_release();
  return DefaultLayoutViewResponder.init(inputs:viewSubgraph:)();
}

void FocusStateBindingResponder.__ivar_destroyer()
{
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v1 = *(void **)(v0 + 296);
}

uint64_t FocusStateBindingResponder.__deallocating_deinit()
{
  uint64_t v0 = DefaultLayoutViewResponder.deinit();
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t vtable thunk for DefaultLayoutViewResponder.__allocating_init(inputs:) dispatching to FocusStateBindingResponder.__allocating_init(inputs:)()
{
  return FocusStateBindingResponder.init(inputs:)();
}

uint64_t vtable thunk for DefaultLayoutViewResponder.__allocating_init(inputs:viewSubgraph:) dispatching to FocusStateBindingResponder.__allocating_init(inputs:viewSubgraph:)()
{
  return FocusStateBindingResponder.init(inputs:viewSubgraph:)();
}

uint64_t protocol witness for BaseFocusResponder.isEnabled.getter in conformance FocusStateBindingResponder()
{
  return *(unsigned __int8 *)(v0 + 288);
}

uint64_t protocol witness for AnyUIKitHostedFocusItemResponder.hostedItem.getter in conformance FocusStateBindingResponder()
{
  return swift_unknownObjectRetain();
}

uint64_t specialized FocusState.Binding.wrappedValue.setter()
{
  type metadata accessor for Binding();

  return specialized Binding.wrappedValue.setter();
}

uint64_t specialized FocusState.Binding.location.getter()
{
  type metadata accessor for FocusStoreLocation();

  return swift_dynamicCastClassUnconditional();
}

uint64_t sub_187B4C234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_2(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for FocusState.Binding, (uint64_t (*)(uint64_t))FocusState.Binding.wrappedValue.getter);
}

uint64_t sub_187B4C260()
{
  return specialized FocusState.Binding.wrappedValue.setter();
}

uint64_t sub_187B4C2A0()
{
  return 16;
}

__n128 sub_187B4C2AC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_187B4C2B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_2(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for FocusState, (uint64_t (*)(uint64_t))FocusState.wrappedValue.getter);
}

uint64_t sub_187B4C2E4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FocusState();
  return specialized SceneStorage.wrappedValue.setter(a1, v2);
}

uint64_t sub_187B4C324()
{
  return 16;
}

__n128 sub_187B4C330(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FocusState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  if (v8 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v8 + ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v8) + v7 > 0x18)
  {
    uint64_t v11 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (uint64_t *)(v11 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
    swift_retain();
  }
  else
  {
    unsigned int v12 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v12(a1, a2, v5);
    int v13 = (void *)(((unint64_t)v4 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v14 = (void *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    void *v13 = *v14;
    uint64_t v15 = ((unint64_t)v13 + v8 + 8) & ~v8;
    uint64_t v16 = ((unint64_t)v14 + v8 + 8) & ~v8;
    swift_retain();
    v12((uint64_t *)v15, (uint64_t *)v16, v5);
  }
  return v4;
}

unint64_t assignWithCopy for FocusState(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64) + 7;
  uint64_t v9 = (void *)((v8 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v10 = (void *)((v8 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v9 = *v10;
  swift_retain();
  swift_release();
  v7(((unint64_t)v9 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v10 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

unint64_t initializeWithTake for FocusState(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64) + 7;
  uint64_t v9 = (void *)((v8 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v10 = (void *)((v8 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v9 = *v10;
  v7(((unint64_t)v9 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v10 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

unint64_t assignWithTake for FocusState(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64) + 7;
  uint64_t v9 = (void *)((v8 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v10 = (void *)((v8 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v9 = *v10;
  swift_release();
  v7(((unint64_t)v9 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v10 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for FocusState(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
     + v6;
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 >= 0x7FFFFFFE) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      unint64_t v15 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      if ((v15 + 1) >= 2) {
        return v15;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for FocusState(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
      + v9;
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187B4CAF8);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 < 0x7FFFFFFE)
        {
          uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if (a2 > 0x7FFFFFFE)
          {
            *uint64_t v19 = 0;
            *(_DWORD *)uint64_t v19 = a2 - 0x7FFFFFFF;
          }
          else
          {
            *uint64_t v19 = a2;
          }
        }
        else
        {
          char v18 = *(void (**)(void))(v6 + 56);
          v18();
        }
      }
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for FocusState.Binding(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = ((v6 + 16) & ~v6) + *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    unsigned int v12 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    int v13 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v12 = *v13;
    uint64_t v14 = ((unint64_t)v12 + v6 + 8) & ~v6;
    uint64_t v15 = ((unint64_t)v13 + v6 + 8) & ~v6;
    unsigned int v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v16(v14, v15, v4);
  }
  return a1;
}

void *assignWithCopy for FocusState.Binding(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v6 = *(void *)(v5 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))(((unint64_t)v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 8 + (v5 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

void *initializeWithTake for FocusState.Binding(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

void *assignWithTake for FocusState.Binding(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  uint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v6 = *(void *)v5;
  swift_release();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 8 + v5) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for FocusState.Binding(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      uint64_t v15 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v15 + v6 + 8) & ~v6);
      }
      unint64_t v16 = *v15;
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      return (v16 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for FocusState.Binding(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 16) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x187B4D238);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        char v18 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v7 & 0x80000000) != 0)
        {
          uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(((unint64_t)v18 + v9 + 8) & ~v9);
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v19 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v19 = a2 - 1;
          }
          *char v18 = v19;
        }
      }
      return;
  }
}

uint64_t ObjC metadata update function for FocusStateBindingResponder()
{
  return type metadata accessor for FocusStateBindingResponder();
}

uint64_t sub_187B4D268()
{
  return swift_getWitnessTable();
}

uint64_t sub_187B4D2D8()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for FocusStateBindingModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v9 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_23;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v10 = ((v7 + v6 + ((v6 + 16) & ~v6)) & ~v6) + v7;
  char v11 = 8 * v10;
  if (v10 <= 3)
  {
    unsigned int v14 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (!v12) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (!*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 < 2)
    {
LABEL_23:
      unsigned int v16 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v16 + v6 + 8) & ~v6);
      }
      unint64_t v17 = *v16;
      if (v17 >= 0xFFFFFFFF) {
        LODWORD(v17) = -1;
      }
      return (v17 + 1);
    }
  }
  int v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((unsigned char *)a1 + v10)) {
    goto LABEL_23;
  }
LABEL_15:
  int v15 = (v12 - 1) << v11;
  if (v10 > 3) {
    int v15 = 0;
  }
  if (v10)
  {
    if (v10 > 3) {
      LODWORD(v10) = 4;
    }
    switch((int)v10)
    {
      case 2:
        LODWORD(v10) = *a1;
        break;
      case 3:
        LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v10) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v10) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v8 + (v10 | v15) + 1;
}

void storeEnumTagSinglePayload for FocusStateBindingModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v9 + ((v9 + 16) & ~v9)) & ~v9)
      + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x187B4D794);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        char v18 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v7 & 0x80000000) != 0)
        {
          uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(((unint64_t)v18 + v9 + 8) & ~v9);
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v19 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v19 = a2 - 1;
          }
          *char v18 = v19;
        }
      }
      return;
  }
}

uint64_t sub_187B4D7BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.focusBridge.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187B4D7F8()
{
  swift_retain();
  specialized EnvironmentValues.focusBridge.setter();

  return swift_release();
}

uint64_t sub_187B4D83C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.focusScopes.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187B4D878()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  specialized EnvironmentValues.subscript.setter(v0);

  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for FocusState.Binding.PrivateType()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t assignWithCopy for FocusState.Box(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for FocusState.Box(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for FocusBridgeKey()
{
  return &type metadata for FocusBridgeKey;
}

uint64_t initializeWithCopy for FocusStateBindingModifier.ListItemFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for FocusStateBindingModifier.ListItemFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  return a1;
}

uint64_t assignWithTake for FocusStateBindingModifier.ListItemFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  return a1;
}

uint64_t getEnumTagSinglePayload for FocusStateBindingModifier.ListItemFilter(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 29)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FocusStateBindingModifier.ListItemFilter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 28) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 29) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 29) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t assignWithCopy for FocusStateBindingResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  return a1;
}

uint64_t assignWithTake for FocusStateBindingResponderFilter(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for FocusStateBindingResponderFilter(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FocusStateBindingResponderFilter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for FocusStateBindingResponderFilter()
{
  return &unk_1ED45CBE0;
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in FocusState<A>.Box()
{
  return &protocol witness table for FocusState<A>;
}

uint64_t outlined destroy of FocusItem??(uint64_t a1)
{
  type metadata accessor for FocusItem??();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for FocusItem??()
{
  if (!lazy cache variable for type metadata for FocusItem??)
  {
    type metadata accessor for Attribute<FocusStoreList>(255, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FocusItem??);
    }
  }
}

uint64_t sub_187B4DD74()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187B4DDAC()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

_UNKNOWN **base witness table accessor for ViewModifier in ContainerBackgroundRendererModifier<A>()
{
  return &protocol witness table for ContainerBackgroundRendererModifier<A>;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ContainerBackgroundRendererModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t VisualEffect.offset(_:)()
{
  return VisualEffect.geometryEffect<A>(_:)();
}

unint64_t lazy protocol witness table accessor for type _OffsetEffect and conformance _OffsetEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type _OffsetEffect and conformance _OffsetEffect;
  if (!lazy protocol witness table cache variable for type _OffsetEffect and conformance _OffsetEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _OffsetEffect and conformance _OffsetEffect);
  }
  return result;
}

uint64_t VisualEffect.offset(x:y:)()
{
  return VisualEffect.geometryEffect<A>(_:)();
}

void HoverEffectContent.offset(x:y:)()
{
}

uint64_t sub_187B4DFAC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187B4E008(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void HoverEffectContent.offset(_:)()
{
}

uint64_t static EventModifiers.current.getter()
{
  if (one-time initialization token for _modifierKeySource != -1) {
    swift_once();
  }
  outlined init with copy of TableColumnList((uint64_t)&static EventModifiers._modifierKeySource, (uint64_t)v4);
  uint64_t v0 = v5;
  uint64_t v1 = v6;
  __swift_project_boxed_opaque_existential_1(v4, v5);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(v0, v1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  return v2;
}

uint64_t static EventModifiers.values(mask:initial:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (one-time initialization token for _modifierKeySource != -1) {
    swift_once();
  }
  uint64_t result = outlined init with copy of TableColumnList((uint64_t)&static EventModifiers._modifierKeySource, a2);
  *(void *)(a2 + 40) = a1;
  return result;
}

uint64_t EventModifiers.AsyncValues.Iterator.init(_:mask:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v7 + 24))(v17, v6, v7);
  unsigned int v8 = __swift_project_boxed_opaque_existential_1(v17, v18);
  double v9 = MEMORY[0x1F4188790](v8);
  (*(void (**)(char *, double))(v11 + 16))((char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  *((void *)&v21 + 1) = swift_getAssociatedTypeWitness();
  *(void *)&long long v22 = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v20);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  if (one-time initialization token for _modifierKeySource != -1) {
    swift_once();
  }
  outlined init with copy of TableColumnList((uint64_t)&static EventModifiers._modifierKeySource, (uint64_t)v17);
  uint64_t v12 = v18;
  uint64_t v13 = v19;
  __swift_project_boxed_opaque_existential_1(v17, v18);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(v12, v13);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  *((void *)&v22 + 1) = v14 & a2;
  uint64_t v23 = a2;
  long long v15 = v21;
  *(_OWORD *)a3 = v20;
  *(_OWORD *)(a3 + 16) = v15;
  *(void *)(a3 + 48) = a2;
  *(_OWORD *)(a3 + 32) = v22;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t EventModifiers.AsyncValues.Iterator.next()()
{
  *(void *)(v1 + 56) = v0;
  return MEMORY[0x1F4188298](EventModifiers.AsyncValues.Iterator.next(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  uint64_t v1 = v0[7];
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v1, v2);
  v0[8] = swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  v0[9] = v4;
  v0[10] = *(void *)(v4 - 8);
  uint64_t v5 = swift_task_alloc();
  v0[11] = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[12] = v6;
  *uint64_t v6 = v0;
  v6[1] = EventModifiers.AsyncValues.Iterator.next();
  return MEMORY[0x1F4187C78](v5, v2, v3);
}

{
  void *v0;
  uint64_t (*v1)();
  uint64_t v3;

  swift_task_dealloc();
  if (v0)
  {

    uint64_t v1 = EventModifiers.AsyncValues.Iterator.next();
  }
  else
  {
    uint64_t v1 = EventModifiers.AsyncValues.Iterator.next();
  }
  return MEMORY[0x1F4188298](v1, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *boxed_opaque_existential_1;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v15;

  uint64_t v1 = v0[11];
  uint64_t v2 = v0[8];
  uint64_t v3 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(uint64_t, void))(v0[10] + 8))(v1, v0[9]);
    swift_task_dealloc();
LABEL_8:
    uint64_t v6 = 0;
    uint64_t v12 = 1;
LABEL_9:
    uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    return v13(v6, v12);
  }
  v0[5] = v2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 32))(boxed_opaque_existential_1, v1, v2);
  swift_task_dealloc();
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t v5 = (void *)v0[7];
  uint64_t v6 = v5[6] & v0[6];
  if (v5[5] != v6)
  {
    uint64_t v12 = 0;
    v5[5] = v6;
    goto LABEL_9;
  }
  uint64_t v7 = v5[3];
  unsigned int v8 = v5[4];
  __swift_mutable_project_boxed_opaque_existential_1(v0[7], v7);
  v0[8] = swift_getAssociatedTypeWitness();
  double v9 = type metadata accessor for Optional();
  v0[9] = v9;
  v0[10] = *(void *)(v9 - 8);
  uint64_t v10 = swift_task_alloc();
  v0[11] = v10;
  uint64_t v11 = (void *)swift_task_alloc();
  v0[12] = v11;
  *uint64_t v11 = v0;
  v11[1] = EventModifiers.AsyncValues.Iterator.next();
  return MEMORY[0x1F4187C78](v10, v7, v8);
}

{
  uint64_t v0;
  uint64_t (*v1)(void, uint64_t);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void, uint64_t))(v0 + 8);
  return v1(0, 1);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance EventModifiers.AsyncValues.Iterator(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  *uint64_t v3 = v2;
  v3[1] = protocol witness for AsyncIteratorProtocol.next() in conformance EventModifiers.AsyncValues.Iterator;
  v3[7] = v1;
  return MEMORY[0x1F4188298](EventModifiers.AsyncValues.Iterator.next(), 0, 0);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance EventModifiers.AsyncValues.Iterator(uint64_t a1, char a2)
{
  uint64_t v5 = *(void *)(*v2 + 16);
  uint64_t v8 = *v2;
  swift_task_dealloc();
  *(void *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 8) = a2 & 1;
  uint64_t v6 = *(uint64_t (**)(void))(v8 + 8);
  return v6();
}

uint64_t _s7SwiftUI14EventModifiersV11AsyncValuesV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[3] = a2;
  v4[4] = a3;
  v4[2] = a1;
  uint64_t v5 = (void *)swift_task_alloc();
  v4[5] = v5;
  *uint64_t v5 = v4;
  v5[1] = _s7SwiftUI14EventModifiersV11AsyncValuesV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  v5[7] = v3;
  return MEMORY[0x1F4188298](EventModifiers.AsyncValues.Iterator.next(), 0, 0);
}

uint64_t _s7SwiftUI14EventModifiersV11AsyncValuesV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_(uint64_t a1, char a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 24);
  swift_task_dealloc();
  if (v6)
  {
    swift_getObjectType();
    uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  *(unsigned char *)(v5 + 56) = a2;
  *(void *)(v5 + 48) = a1;
  return MEMORY[0x1F4188298](_s7SwiftUI14EventModifiersV11AsyncValuesV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY1_, v7, v9);
}

uint64_t _s7SwiftUI14EventModifiersV11AsyncValuesV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY1_()
{
  char v1 = *(unsigned char *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 16);
  *(void *)uint64_t v2 = *(void *)(v0 + 48);
  *(unsigned char *)(v2 + 8) = v1 & 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t lazy protocol witness table accessor for type EventModifiers.AsyncValues.Iterator and conformance EventModifiers.AsyncValues.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type EventModifiers.AsyncValues.Iterator and conformance EventModifiers.AsyncValues.Iterator;
  if (!lazy protocol witness table cache variable for type EventModifiers.AsyncValues.Iterator and conformance EventModifiers.AsyncValues.Iterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventModifiers.AsyncValues.Iterator and conformance EventModifiers.AsyncValues.Iterator);
  }
  return result;
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance EventModifiers.AsyncValues@<X0>(uint64_t a1@<X8>)
{
  outlined init with copy of TableColumnList(v1, (uint64_t)v4);
  EventModifiers.AsyncValues.Iterator.init(_:mask:)(v4, *(void *)(v1 + 40), a1);
  return outlined destroy of AccessibilityRelationshipScope.Key(v1);
}

ValueMetadata *type metadata accessor for EventModifiers.AsyncValues()
{
  return &type metadata for EventModifiers.AsyncValues;
}

uint64_t initializeWithCopy for EventModifiers.AsyncValues.Iterator(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t *assignWithCopy for EventModifiers.AsyncValues.Iterator(uint64_t *a1, uint64_t *a2)
{
  a1[5] = a2[5];
  a1[6] = a2[6];
  return a1;
}

uint64_t assignWithTake for EventModifiers.AsyncValues.Iterator(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for EventModifiers.AsyncValues.Iterator()
{
  return &type metadata for EventModifiers.AsyncValues.Iterator;
}

uint64_t sub_187B4F574()
{
  return swift_getWitnessTable();
}

uint64_t assignWithTake for OnModifierKeysChangedModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_release();
  return a1;
}

uint64_t sub_187B4F630()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void type metadata accessor for State<EventModifiers>()
{
  if (!lazy cache variable for type metadata for State<EventModifiers>)
  {
    unint64_t v0 = type metadata accessor for State();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for State<EventModifiers>);
    }
  }
}

void _PositionLayout.position.setter(double a1, double a2)
{
  *uint64_t v2 = a1;
  v2[1] = a2;
}

uint64_t (*_PositionLayout.position.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _PositionLayout.placement(of:in:)()
{
  PlacementContext.size.getter();
  static UnitPoint.center.getter();

  return _Placement.init(proposedSize:anchoring:at:)();
}

uint64_t _PositionLayout.spacing(in:child:)()
{
  if ((static SemanticFeature.isEnabled.getter() & 1) == 0) {
    return LayoutProxy.spacing()();
  }

  return Spacing.init()();
}

uint64_t protocol witness for UnaryLayout.spacing(in:child:) in conformance _PositionLayout()
{
  if ((static SemanticFeature.isEnabled.getter() & 1) == 0) {
    return LayoutProxy.spacing()();
  }

  return Spacing.init()();
}

uint64_t protocol witness for UnaryLayout.placement(of:in:) in conformance _PositionLayout()
{
  PlacementContext.size.getter();
  static UnitPoint.center.getter();

  return _Placement.init(proposedSize:anchoring:at:)();
}

void protocol witness for ViewModifier.body(content:) in conformance _PositionLayout()
{
}

uint64_t View.position(_:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(double *)uint64_t v5 = a3;
  *(double *)&v5[1] = a4;
  return MEMORY[0x18C113660](v5, a1, &type metadata for _PositionLayout, a2);
}

uint64_t View.position(x:y:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(double *)uint64_t v5 = a3;
  *(double *)&v5[1] = a4;
  return MEMORY[0x18C113660](v5, a1, &type metadata for _PositionLayout, a2);
}

double specialized _PositionLayout.sizeThatFits(in:context:child:)()
{
  *(double *)&uint64_t v0 = COERCE_DOUBLE(CGSize.init(_:)());
  if ((v1 & 1) == 0) {
    return *(double *)&v0;
  }
  LayoutProxy.size(in:)();
  double v2 = v3;
  double v4 = COERCE_DOUBLE(_ProposedSize.width.getter());
  if ((v5 & 1) == 0) {
    double v2 = v4;
  }
  _ProposedSize.height.getter();
  return v2;
}

_UNKNOWN **base witness table accessor for ViewModifier in _PositionLayout()
{
  return &protocol witness table for _PositionLayout;
}

uint64_t sub_187B4FC0C()
{
  return swift_getWitnessTable();
}

uint64_t AutomaticTextEditorStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of TextEditorStyleConfiguration(a1, a2, type metadata accessor for TextEditorStyleConfiguration);
}

uint64_t AutomaticTextEditorStyle.Body.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for TextEditorStyleConfiguration(0);
  uint64_t v5 = v4 - 8;
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TextEditor();
  uint64_t v9 = v8 - 8;
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v20 - v13;
  outlined init with copy of TextEditorStyleConfiguration(v2, (uint64_t)v7, type metadata accessor for TextEditorStyleConfiguration);
  *(void *)uint64_t v11 = swift_getKeyPath();
  *((_WORD *)v11 + 4) = 0;
  v11[10] = 0;
  uint64_t v15 = (uint64_t)&v11[*(int *)(v9 + 32)];
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  uint64_t v17 = *((void *)v7 + 2);
  uint64_t v18 = *((void *)v7 + 3);
  *((_OWORD *)v11 + 1) = *(_OWORD *)v7;
  *((void *)v11 + 4) = v17;
  *((void *)v11 + 5) = v18;
  outlined assign with take of Binding<TextSelection?>?((uint64_t)&v7[*(int *)(v5 + 28)], v15);
  outlined init with take of TextEditor((uint64_t)v11, (uint64_t)v14);
  outlined init with copy of TextEditorStyleConfiguration((uint64_t)v14, a1, (uint64_t (*)(void))type metadata accessor for TextEditor);
  return outlined destroy of TextEditor((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for TextEditor);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance AutomaticTextEditorStyle.Body()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for TextEditorStyle.makeBody(configuration:) in conformance AutomaticTextEditorStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of TextEditorStyleConfiguration(a1, a2, type metadata accessor for TextEditorStyleConfiguration);
}

uint64_t outlined init with take of TextEditor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TextEditor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of TextEditorStyleConfiguration(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t associated type witness table accessor for View.Body : View in AutomaticTextEditorStyle.Body()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for TextEditorStyle.Body : View in AutomaticTextEditorStyle()
{
  return lazy protocol witness table accessor for type AutomaticTextEditorStyle.Body and conformance AutomaticTextEditorStyle.Body(&lazy protocol witness table cache variable for type AutomaticTextEditorStyle.Body and conformance AutomaticTextEditorStyle.Body, (void (*)(uint64_t))type metadata accessor for AutomaticTextEditorStyle.Body);
}

uint64_t type metadata accessor for AutomaticTextEditorStyle.Body()
{
  uint64_t result = type metadata singleton initialization cache for AutomaticTextEditorStyle.Body;
  if (!type metadata singleton initialization cache for AutomaticTextEditorStyle.Body) {
    return swift_getSingletonMetadata();
  }
  return result;
}

ValueMetadata *type metadata accessor for AutomaticTextEditorStyle()
{
  return &type metadata for AutomaticTextEditorStyle;
}

uint64_t *initializeBufferWithCopyOfBuffer for AutomaticTextEditorStyle.Body(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for TextEditorStyleConfiguration(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  uint64_t v6 = *a2;
  *a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    a1[3] = a2[3];
    uint64_t v8 = *(int *)(v4 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    type metadata accessor for Binding<TextSelection?>(0);
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)(v11 - 8);
    uint64_t v14 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v14(v10, 1, v12))
    {
      _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_0(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
      memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      uint64_t v16 = v10[1];
      void *v9 = *v10;
      v9[1] = v16;
      uint64_t v17 = *(int *)(v12 + 32);
      __dst = (char *)v9 + v17;
      uint64_t v18 = (char *)v10 + v17;
      uint64_t v19 = type metadata accessor for TextSelection(0);
      uint64_t v25 = *(void *)(v19 - 8);
      uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
      swift_retain();
      swift_retain();
      if (v20(v18, 1, v19))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v18, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        uint64_t v22 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for RangeSet<String.Index>();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(__dst, v18, v23);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v18, *(void *)(*(void *)(v22 - 8) + 64));
        }
        __dst[*(int *)(v19 + 20)] = v18[*(int *)(v19 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(__dst, 0, 1, v19);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t destroy for AutomaticTextEditorStyle.Body(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v2 = a1 + *(int *)(type metadata accessor for TextEditorStyleConfiguration(0) + 20);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v4 = v3;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3);
  if (!result)
  {
    swift_release();
    swift_release();
    uint64_t v6 = v2 + *(int *)(v4 + 32);
    uint64_t v7 = type metadata accessor for TextSelection(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
    if (!result)
    {
      type metadata accessor for TextSelection.Indices(0);
      uint64_t result = swift_getEnumCaseMultiPayload();
      if (result == 1)
      {
        type metadata accessor for RangeSet<String.Index>();
        uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
        return v9(v6, v8);
      }
    }
  }
  return result;
}

void *initializeWithCopy for AutomaticTextEditorStyle.Body(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(type metadata accessor for TextEditorStyleConfiguration(0) + 20);
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)((char *)a2 + v6);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  uint64_t v12 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v12(v8, 1, v10))
  {
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_0(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v14 = v8[1];
    *uint64_t v7 = *v8;
    v7[1] = v14;
    uint64_t v15 = *(int *)(v10 + 32);
    __dst = (char *)v7 + v15;
    uint64_t v16 = (char *)v8 + v15;
    uint64_t v17 = type metadata accessor for TextSelection(0);
    uint64_t v23 = *(void *)(v17 - 8);
    uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    swift_retain();
    swift_retain();
    if (v18(v16, 1, v17))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(__dst, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v20 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for RangeSet<String.Index>();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(__dst, v16, v21);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(__dst, v16, *(void *)(*(void *)(v20 - 8) + 64));
      }
      __dst[*(int *)(v17 + 20)] = v16[*(int *)(v17 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(__dst, 0, 1, v17);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
  }
  return a1;
}

void *assignWithCopy for AutomaticTextEditorStyle.Body(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(int *)(type metadata accessor for TextEditorStyleConfiguration(0) + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  int v11 = v10(v5, 1, v7);
  int v12 = v10(v6, 1, v8);
  if (v11)
  {
    if (!v12)
    {
      *(void *)uint64_t v5 = *(void *)v6;
      *((void *)v5 + 1) = *((void *)v6 + 1);
      uint64_t v13 = *(int *)(v8 + 32);
      __dst = &v5[v13];
      uint64_t v39 = &v6[v13];
      uint64_t v14 = type metadata accessor for TextSelection(0);
      uint64_t v15 = *(void *)(v14 - 8);
      uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
      swift_retain();
      swift_retain();
      if (v16(v39, 1, v14))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v39, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        uint64_t v32 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for RangeSet<String.Index>();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16))(__dst, v39, v33);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v39, *(void *)(*(void *)(v32 - 8) + 64));
        }
        __dst[*(int *)(v14 + 20)] = v39[*(int *)(v14 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v5, 0, 1, v8);
      return a1;
    }
    goto LABEL_7;
  }
  if (v12)
  {
    outlined destroy of TextEditor((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
LABEL_7:
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_0(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
    size_t v19 = *(void *)(*(void *)(v18 - 8) + 64);
    uint64_t v20 = v5;
    uint64_t v21 = v6;
LABEL_8:
    memcpy(v20, v21, v19);
    return a1;
  }
  *(void *)uint64_t v5 = *(void *)v6;
  swift_retain();
  swift_release();
  *((void *)v5 + 1) = *((void *)v6 + 1);
  swift_retain();
  swift_release();
  uint64_t v22 = *(int *)(v8 + 32);
  uint64_t v23 = &v5[v22];
  uint64_t v24 = &v6[v22];
  uint64_t v25 = type metadata accessor for TextSelection(0);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  int v28 = v27(v23, 1, v25);
  int v29 = v27(v24, 1, v25);
  if (v28)
  {
    if (!v29)
    {
      uint64_t v30 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for RangeSet<String.Index>();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(v23, v24, v31);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v23, v24, *(void *)(*(void *)(v30 - 8) + 64));
      }
      v23[*(int *)(v25 + 20)] = v24[*(int *)(v25 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      return a1;
    }
    goto LABEL_17;
  }
  if (v29)
  {
    outlined destroy of TextEditor((uint64_t)v23, type metadata accessor for TextSelection);
LABEL_17:
    type metadata accessor for TextSelection?(0);
    size_t v19 = *(void *)(*(void *)(v34 - 8) + 64);
    uint64_t v20 = v23;
    uint64_t v21 = v24;
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of TextEditor((uint64_t)v23, type metadata accessor for TextSelection.Indices);
    uint64_t v36 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for RangeSet<String.Index>();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(v23, v24, v37);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v23, v24, *(void *)(*(void *)(v36 - 8) + 64));
    }
  }
  v23[*(int *)(v25 + 20)] = v24[*(int *)(v25 + 20)];
  return a1;
}

uint64_t outlined destroy of TextEditor(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

_OWORD *initializeWithTake for AutomaticTextEditorStyle.Body(_OWORD *a1, _OWORD *a2)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(type metadata accessor for TextEditorStyleConfiguration(0) + 20);
  uint64_t v6 = (void *)((char *)a1 + v5);
  uint64_t v7 = (void *)((char *)a2 + v5);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v8))
  {
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_0(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v12 = v7[1];
    *uint64_t v6 = *v7;
    v6[1] = v12;
    uint64_t v13 = *(int *)(v9 + 32);
    uint64_t v14 = (char *)v6 + v13;
    uint64_t v15 = (char *)v7 + v13;
    uint64_t v16 = type metadata accessor for TextSelection(0);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v19 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for RangeSet<String.Index>();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v14, v15, v20);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64));
      }
      v14[*(int *)(v16 + 20)] = v15[*(int *)(v16 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
  }
  return a1;
}

void *assignWithTake for AutomaticTextEditorStyle.Body(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(int *)(type metadata accessor for TextEditorStyleConfiguration(0) + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v6, 1, v8);
  int v13 = v11(v7, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      uint64_t v14 = *((void *)v7 + 1);
      *(void *)uint64_t v6 = *(void *)v7;
      *((void *)v6 + 1) = v14;
      uint64_t v15 = *(int *)(v9 + 32);
      uint64_t v16 = &v6[v15];
      uint64_t v17 = &v7[v15];
      uint64_t v18 = type metadata accessor for TextSelection(0);
      uint64_t v19 = *(void *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        uint64_t v35 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for RangeSet<String.Index>();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32))(v16, v17, v36);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v16, v17, *(void *)(*(void *)(v35 - 8) + 64));
        }
        v16[*(int *)(v18 + 20)] = v17[*(int *)(v18 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
      return a1;
    }
    goto LABEL_7;
  }
  if (v13)
  {
    outlined destroy of TextEditor((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
LABEL_7:
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_0(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
    size_t v22 = *(void *)(*(void *)(v21 - 8) + 64);
    uint64_t v23 = v6;
    uint64_t v24 = v7;
LABEL_8:
    memcpy(v23, v24, v22);
    return a1;
  }
  *(void *)uint64_t v6 = *(void *)v7;
  swift_release();
  *((void *)v6 + 1) = *((void *)v7 + 1);
  swift_release();
  uint64_t v25 = *(int *)(v9 + 32);
  uint64_t v26 = &v6[v25];
  uint64_t v27 = &v7[v25];
  uint64_t v28 = type metadata accessor for TextSelection(0);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  int v31 = v30(v26, 1, v28);
  int v32 = v30(v27, 1, v28);
  if (v31)
  {
    if (!v32)
    {
      uint64_t v33 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for RangeSet<String.Index>();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32))(v26, v27, v34);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v26, v27, *(void *)(*(void *)(v33 - 8) + 64));
      }
      v26[*(int *)(v28 + 20)] = v27[*(int *)(v28 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      return a1;
    }
    goto LABEL_17;
  }
  if (v32)
  {
    outlined destroy of TextEditor((uint64_t)v26, type metadata accessor for TextSelection);
LABEL_17:
    type metadata accessor for TextSelection?(0);
    size_t v22 = *(void *)(*(void *)(v37 - 8) + 64);
    uint64_t v23 = v26;
    uint64_t v24 = v27;
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of TextEditor((uint64_t)v26, type metadata accessor for TextSelection.Indices);
    uint64_t v39 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for RangeSet<String.Index>();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32))(v26, v27, v40);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v26, v27, *(void *)(*(void *)(v39 - 8) + 64));
    }
  }
  v26[*(int *)(v28 + 20)] = v27[*(int *)(v28 + 20)];
  return a1;
}

uint64_t getEnumTagSinglePayload for AutomaticTextEditorStyle.Body(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187B51684);
}

uint64_t sub_187B51684(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TextEditorStyleConfiguration(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AutomaticTextEditorStyle.Body(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187B51704);
}

uint64_t sub_187B51704(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TextEditorStyleConfiguration(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<TextEditor, TextEditorStyleModifier<SystemTextEditorStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<TextEditor, TextEditorStyleModifier<SystemTextEditorStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<TextEditor, TextEditorStyleModifier<SystemTextEditorStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<TextEditor, TextEditorStyleModifier<SystemTextEditorStyle>>();
    lazy protocol witness table accessor for type AutomaticTextEditorStyle.Body and conformance AutomaticTextEditorStyle.Body(&lazy protocol witness table cache variable for type TextEditor and conformance TextEditor, (void (*)(uint64_t))type metadata accessor for TextEditor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TextEditor, TextEditorStyleModifier<SystemTextEditorStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<TextEditor, TextEditorStyleModifier<SystemTextEditorStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<TextEditor, TextEditorStyleModifier<SystemTextEditorStyle>>)
  {
    type metadata accessor for TextEditor();
    type metadata accessor for TextEditorStyleModifier<SystemTextEditorStyle>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TextEditor, TextEditorStyleModifier<SystemTextEditorStyle>>);
    }
  }
}

void type metadata accessor for TextEditorStyleModifier<SystemTextEditorStyle>()
{
  if (!lazy cache variable for type metadata for TextEditorStyleModifier<SystemTextEditorStyle>)
  {
    lazy protocol witness table accessor for type SystemTextEditorStyle and conformance SystemTextEditorStyle();
    unint64_t v0 = type metadata accessor for TextEditorStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TextEditorStyleModifier<SystemTextEditorStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SystemTextEditorStyle and conformance SystemTextEditorStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type SystemTextEditorStyle and conformance SystemTextEditorStyle;
  if (!lazy protocol witness table cache variable for type SystemTextEditorStyle and conformance SystemTextEditorStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemTextEditorStyle and conformance SystemTextEditorStyle);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AutomaticTextEditorStyle.Body and conformance AutomaticTextEditorStyle.Body(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void Scene.windowFocusability(_:)()
{
}

void static WindowFocusability.never.getter()
{
}

ValueMetadata *type metadata accessor for WindowFocusability()
{
  return &type metadata for WindowFocusability;
}

unsigned char *storeEnumTagSinglePayload for WindowFocusability(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187B51A88);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WindowFocusability.Role()
{
  return &type metadata for WindowFocusability.Role;
}

unint64_t lazy protocol witness table accessor for type WindowFocusability.Role and conformance WindowFocusability.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type WindowFocusability.Role and conformance WindowFocusability.Role;
  if (!lazy protocol witness table cache variable for type WindowFocusability.Role and conformance WindowFocusability.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowFocusability.Role and conformance WindowFocusability.Role);
  }
  return result;
}

void static WindowFocusability.automatic.getter()
{
}

void static WindowFocusability.always.getter()
{
}

ValueMetadata *type metadata accessor for SidebarDisclosureGroupStyle()
{
  return &type metadata for SidebarDisclosureGroupStyle;
}

uint64_t associated type witness table accessor for DisclosureGroupStyle.Body : View in SidebarDisclosureGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SidebarDisclosureGroupStyle.Container()
{
  return static TupleView._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance SidebarDisclosureGroupStyle.Container@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  char v7 = *(unsigned char *)(v1 + 32);
  swift_retain();
  swift_retain();
  outlined copy of Environment<Bool>.Content(v3, v4);
  swift_retain();
  swift_retain();
  outlined copy of Environment<Bool>.Content(v3, v4);
  double v8 = specialized Environment.wrappedValue.getter(v3, v4);
  outlined consume of Environment<Bool>.Content(v3, v4);
  outlined consume of Environment<Bool>.Content(v3, v4);
  swift_release();
  uint64_t result = swift_release();
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  *(double *)(a1 + 24) = v8;
  return result;
}

uint64_t protocol witness for DisclosureGroupStyle.makeBody(configuration:) in conformance SidebarDisclosureGroupStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  char v5 = *((unsigned char *)a1 + 16);
  *(void *)a2 = swift_getKeyPath();
  *(unsigned char *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = v3;
  *(void *)(a2 + 24) = v4;
  *(unsigned char *)(a2 + 32) = v5;
  swift_retain();

  return swift_retain();
}

void key path getter for EnvironmentValues.disclosureGroupIndicatorTrailingPadding : EnvironmentValues(double *a1@<X8>)
{
  *a1 = EnvironmentValues.disclosureGroupIndicatorTrailingPadding.getter();
}

void sub_187B51D18(double *a1@<X8>)
{
  *a1 = EnvironmentValues.disclosureGroupIndicatorTrailingPadding.getter();
}

uint64_t destroy for SidebarDisclosureGroupStyle.Container(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for SidebarDisclosureGroupStyle.Container(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SidebarDisclosureGroupStyle.Container(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for SidebarDisclosureGroupStyle.Container(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  swift_release();
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  swift_release();
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SidebarDisclosureGroupStyle.Container(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SidebarDisclosureGroupStyle.Container(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for SidebarDisclosureGroupStyle.Container()
{
  return &unk_1ED4508A0;
}

unint64_t lazy protocol witness table accessor for type SidebarDisclosureGroupStyle.Container and conformance SidebarDisclosureGroupStyle.Container()
{
  unint64_t result = lazy protocol witness table cache variable for type SidebarDisclosureGroupStyle.Container and conformance SidebarDisclosureGroupStyle.Container;
  if (!lazy protocol witness table cache variable for type SidebarDisclosureGroupStyle.Container and conformance SidebarDisclosureGroupStyle.Container)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SidebarDisclosureGroupStyle.Container and conformance SidebarDisclosureGroupStyle.Container);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in SidebarDisclosureGroupStyle.Container()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>, ListDisclosureGroupIndentationModifier>, IncrementListDisclosureGroupDepth>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>?)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>, ListDisclosureGroupIndentationModifier>, IncrementListDisclosureGroupDepth>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>?))
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>();
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>, ListDisclosureGroupIndentationModifier>, IncrementListDisclosureGroupDepth>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>?();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>, ListDisclosureGroupIndentationModifier>, IncrementListDisclosureGroupDepth>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>?));
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>);
    }
  }
}

void type metadata accessor for ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>)
  {
    type metadata accessor for HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>();
    type metadata accessor for ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformItemListTransformModifier<SelectionPlatformItemListFlags>, (uint64_t)&type metadata for SelectionPlatformItemListFlags, (uint64_t)&protocol witness table for SelectionPlatformItemListFlags, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>);
    }
  }
}

void type metadata accessor for HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>()
{
  if (!lazy cache variable for type metadata for HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>)
  {
    type metadata accessor for Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>(255, &lazy cache variable for type metadata for Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>, MEMORY[0x1E4F414E8]);
    lazy protocol witness table accessor for type Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>> and conformance <A> Group<A>();
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>);
    }
  }
}

void type metadata accessor for TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>(uint64_t a1)
{
}

void type metadata accessor for Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for (DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)()
{
  if (!lazy cache variable for type metadata for (DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>))
  {
    type metadata accessor for ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>, ListDisclosureGroupIndentationModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>));
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>, ListDisclosureGroupIndentationModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)
  {
    type metadata accessor for ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>();
    _s7SwiftUI37PrimitiveButtonStyleContainerModifierVyAA05PlaindE0VGMaTm_0(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle, (uint64_t)&type metadata for BorderlessButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>)
  {
    type metadata accessor for Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>();
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>);
    }
  }
}

void type metadata accessor for Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>()
{
  if (!lazy cache variable for type metadata for Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>)
  {
    type metadata accessor for ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>(255, &lazy cache variable for type metadata for ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>, (uint64_t)&type metadata for RotatingDisclosureIndicator, MEMORY[0x1E4F3FA80], MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for Button();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>(255, &lazy cache variable for type metadata for ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>, (uint64_t)&type metadata for RotatingDisclosureIndicator, MEMORY[0x1E4F3FA80], MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type RotatingDisclosureIndicator and conformance RotatingDisclosureIndicator();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RotatingDisclosureIndicator and conformance RotatingDisclosureIndicator()
{
  unint64_t result = lazy protocol witness table cache variable for type RotatingDisclosureIndicator and conformance RotatingDisclosureIndicator;
  if (!lazy protocol witness table cache variable for type RotatingDisclosureIndicator and conformance RotatingDisclosureIndicator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RotatingDisclosureIndicator and conformance RotatingDisclosureIndicator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>> and conformance <A> Group<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>> and conformance <A> Group<A>;
  if (!lazy protocol witness table cache variable for type Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>> and conformance <A> Group<A>)
  {
    type metadata accessor for Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>(255, &lazy cache variable for type metadata for Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>, MEMORY[0x1E4F414E8]);
    lazy protocol witness table accessor for type TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)> and conformance TupleView<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>> and conformance <A> Group<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)> and conformance TupleView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)> and conformance TupleView<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>, ListDisclosureGroupIndentationModifier>, IncrementListDisclosureGroupDepth>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>?()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>, ListDisclosureGroupIndentationModifier>, IncrementListDisclosureGroupDepth>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>?)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>, ListDisclosureGroupIndentationModifier>, IncrementListDisclosureGroupDepth>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>, ListDisclosureGroupIndentationModifier>, IncrementListDisclosureGroupDepth>);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>, ListDisclosureGroupIndentationModifier>, IncrementListDisclosureGroupDepth>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>?);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    type metadata accessor for ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<OutlineRootConfiguration.Key>, (uint64_t)&type metadata for OutlineRootConfiguration.Key, (uint64_t)&protocol witness table for OutlineRootConfiguration.Key, MEMORY[0x1E4F41108]);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>, ListDisclosureGroupIndentationModifier>, IncrementListDisclosureGroupDepth>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>, ListDisclosureGroupIndentationModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>)
  {
    _s7SwiftUI37PrimitiveButtonStyleContainerModifierVyAA05PlaindE0VGMaTm_0(255, &lazy cache variable for type metadata for DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarDisclosureGroupStyle and conformance SidebarDisclosureGroupStyle, (uint64_t)&type metadata for SidebarDisclosureGroupStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisclosureGroupStyleModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ListDisclosureGroupStyledContainer<SidebarDisclosureGroupStyle> and conformance ListDisclosureGroupStyledContainer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ListDisclosureGroupStyledContainer<SidebarDisclosureGroupStyle> and conformance ListDisclosureGroupStyledContainer<A>;
  if (!lazy protocol witness table cache variable for type ListDisclosureGroupStyledContainer<SidebarDisclosureGroupStyle> and conformance ListDisclosureGroupStyledContainer<A>)
  {
    _s7SwiftUI37PrimitiveButtonStyleContainerModifierVyAA05PlaindE0VGMaTm_0(255, &lazy cache variable for type metadata for ListDisclosureGroupStyledContainer<SidebarDisclosureGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarDisclosureGroupStyle and conformance SidebarDisclosureGroupStyle, (uint64_t)&type metadata for SidebarDisclosureGroupStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListDisclosureGroupStyledContainer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListDisclosureGroupStyledContainer<SidebarDisclosureGroupStyle> and conformance ListDisclosureGroupStyledContainer<A>);
  }
  return result;
}

void _s7SwiftUI37PrimitiveButtonStyleContainerModifierVyAA05PlaindE0VGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

SwiftUI::AnimationTimelineSchedule __swiftcall AnimationTimelineSchedule.init(minimumInterval:paused:)(SwiftUI::AnimationTimelineSchedule minimumInterval, Swift::Bool paused)
{
  double v4 = *(double *)&minimumInterval.paused;
  if (paused) {
    double v4 = 0.00833333333;
  }
  *(double *)uint64_t v3 = v4;
  *(unsigned char *)(v3 + 8) = v2;
  minimumInterval.minimumInterval = v4;
  return minimumInterval;
}

uint64_t AnimationTimelineSchedule.entries(from:mode:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  char v6 = *((unsigned char *)v3 + 8) | *a2;
  if (v6) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v3;
  }
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a3, a1, v8);
  uint64_t result = type metadata accessor for AnimationTimelineSchedule.Entries();
  uint64_t v10 = a3 + *(int *)(result + 20);
  *(void *)uint64_t v10 = v7;
  *(unsigned char *)(v10 + 8) = v6 & 1;
  return result;
}

uint64_t type metadata accessor for AnimationTimelineSchedule.Entries()
{
  uint64_t result = type metadata singleton initialization cache for AnimationTimelineSchedule.Entries;
  if (!type metadata singleton initialization cache for AnimationTimelineSchedule.Entries) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t AnimationTimelineSchedule.Entries.next()@<X0>(uint64_t a1@<X8>)
{
  if (*(unsigned char *)(v1 + *(int *)(type metadata accessor for AnimationTimelineSchedule.Entries() + 20) + 8))
  {
    uint64_t v3 = type metadata accessor for Date();
    double v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
    return v4(a1, 1, 1, v3);
  }
  else
  {
    uint64_t v6 = type metadata accessor for Date();
    uint64_t v7 = *(void *)(v6 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, v1, v6);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    return static Date.+= infix(_:_:)();
  }
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AnimationTimelineSchedule.Entries()
{
  return lazy protocol witness table accessor for type AnimationTimelineSchedule.Entries and conformance AnimationTimelineSchedule.Entries(&lazy protocol witness table cache variable for type AnimationTimelineSchedule.Entries and conformance AnimationTimelineSchedule.Entries);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance AnimationTimelineSchedule.Entries@<X0>(uint64_t a1@<X8>)
{
  return outlined init with take of AnimationTimelineSchedule.Entries(v1, a1);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AnimationTimelineSchedule.Entries()
{
  uint64_t v1 = specialized _copySequenceToContiguousArray<A>(_:)(v0);
  outlined destroy of AnimationTimelineSchedule.Entries(v0);
  return v1;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance AnimationTimelineSchedule.Entries@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(v2 + *(int *)(a1 + 20) + 8))
  {
    uint64_t v4 = type metadata accessor for Date();
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
    return v5(a2, 1, 1, v4);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void *)(v7 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a2, v2, v7);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
    return static Date.+= infix(_:_:)();
  }
}

uint64_t associated type witness table accessor for TimelineSchedule.Entries : Sequence in AnimationTimelineSchedule()
{
  return lazy protocol witness table accessor for type AnimationTimelineSchedule.Entries and conformance AnimationTimelineSchedule.Entries(&lazy protocol witness table cache variable for type AnimationTimelineSchedule.Entries and conformance AnimationTimelineSchedule.Entries);
}

uint64_t lazy protocol witness table accessor for type AnimationTimelineSchedule.Entries and conformance AnimationTimelineSchedule.Entries(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for AnimationTimelineSchedule.Entries();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for TimelineSchedule.entries(from:mode:) in conformance AnimationTimelineSchedule@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  char v6 = *((unsigned char *)v3 + 8) | *a2;
  if (v6) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v3;
  }
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a3, a1, v8);
  uint64_t result = type metadata accessor for AnimationTimelineSchedule.Entries();
  uint64_t v10 = a3 + *(int *)(result + 20);
  *(void *)uint64_t v10 = v7;
  *(unsigned char *)(v10 + 8) = v6 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AnimationTimelineSchedule()
{
  return &type metadata for AnimationTimelineSchedule;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnimationTimelineSchedule.Entries(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    *(void *)uint64_t v9 = *(void *)v10;
    v9[8] = v10[8];
  }
  return a1;
}

uint64_t initializeWithCopy for AnimationTimelineSchedule.Entries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  return a1;
}

uint64_t assignWithCopy for AnimationTimelineSchedule.Entries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  return a1;
}

uint64_t initializeWithTake for AnimationTimelineSchedule.Entries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  return a1;
}

uint64_t assignWithTake for AnimationTimelineSchedule.Entries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimationTimelineSchedule.Entries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187B5328C);
}

uint64_t sub_187B5328C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AnimationTimelineSchedule.Entries(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187B5330C);
}

uint64_t sub_187B5330C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for AnimationTimelineSchedule.Entries()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t outlined destroy of AnimationTimelineSchedule.Entries(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AnimationTimelineSchedule.Entries();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of AnimationTimelineSchedule.Entries(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AnimationTimelineSchedule.Entries();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t UISplitViewControllerProxyStorage.proxy.getter@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type Focus<UISplitViewControllerProxyModifier, (_:)> and conformance Focus<A, B>((unint64_t *)&lazy protocol witness table cache variable for type UISplitViewControllerProxyStorage and conformance UISplitViewControllerProxyStorage, (void (*)(uint64_t))type metadata accessor for UISplitViewControllerProxyStorage);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a1 = *(void *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t View.splitViewControllerProxy(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a1;
  v4[1] = a2;
  return MEMORY[0x18C113660](v4, a3, &type metadata for UISplitViewControllerProxyModifier);
}

uint64_t UISplitViewControllerProxy.subscript.setter(uint64_t a1, void *a2)
{
  specialized UISplitViewControllerProxy.subscript.setter(a1, a2);
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(a1, v3);
}

void (*UISplitViewControllerProxy.subscript.modify(void *a1, uint64_t *a2))(void ***a1, char a2)
{
  int v5 = malloc(0x30uLL);
  *a1 = v5;
  *int v5 = a2;
  v5[1] = v2;
  uint64_t v6 = type metadata accessor for Optional();
  void v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  void v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  void v5[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v5[5] = v9;
  UISplitViewControllerProxy.subscript.getter(a2, (uint64_t)v9);
  return UISplitViewControllerProxy.subscript.modify;
}

void UISplitViewControllerProxy.subscript.modify(void ***a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  int v5 = (*a1)[2];
  uint64_t v6 = (*a1)[3];
  uint64_t v7 = **a1;
  if (a2)
  {
    ((void (*)(void *, void *, void *))v6[2])((*a1)[4], v4, v5);
    swift_retain();
    specialized UISplitViewControllerProxy.subscript.setter((uint64_t)v3, v7);
    size_t v8 = (void (*)(void *, void *))v6[1];
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    swift_retain();
    specialized UISplitViewControllerProxy.subscript.setter((uint64_t)v4, v7);
    ((void (*)(void *, void *))v6[1])(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t static UISplitViewControllerProxyModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[5];
  uint64_t v6 = a2[6];
  int v7 = *((_DWORD *)a2 + 20);
  uint64_t v21 = *a2;
  int v22 = v3;
  uint64_t v23 = v4;
  long long v24 = *(_OWORD *)(a2 + 3);
  uint64_t v25 = v5;
  uint64_t v26 = v6;
  long long v27 = *(_OWORD *)(a2 + 7);
  uint64_t v28 = a2[9];
  int v29 = v7;
  type metadata accessor for PlatformItem.SelectionContent.AuxiliaryContent?(0, &lazy cache variable for type metadata for _GraphValue<UISplitViewControllerProxyModifier>, (uint64_t)&type metadata for UISplitViewControllerProxyModifier, MEMORY[0x1E4F3F590]);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphValue.value.getter();
  int v13 = (unint64_t)swift_getKeyPath() >> 32;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  type metadata accessor for Focus<UISplitViewControllerProxyModifier, (_:)>();
  lazy protocol witness table accessor for type Focus<UISplitViewControllerProxyModifier, (_:)> and conformance Focus<A, B>(&lazy protocol witness table cache variable for type Focus<UISplitViewControllerProxyModifier, (_:)> and conformance Focus<A, B>, (void (*)(uint64_t))type metadata accessor for Focus<UISplitViewControllerProxyModifier, (_:)>);
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  lazy protocol witness table accessor for type UISplitViewControllerProxyKey and conformance UISplitViewControllerProxyKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for UISplitViewControllerProxyStorage();
  lazy protocol witness table accessor for type UISplitViewControllerProxyModifier.EnsureObservableProxy and conformance UISplitViewControllerProxyModifier.EnsureObservableProxy();
  Attribute.init<A>(body:value:flags:update:)();
  AGCreateWeakAttribute();
  PropertyList.subscript.setter();
  uint64_t v11 = v21;
  int v12 = v22;
  uint64_t v14 = v4;
  long long v15 = v24;
  uint64_t v16 = v5;
  uint64_t v17 = v6;
  long long v18 = v27;
  uint64_t v19 = v28;
  int v20 = v29;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t key path setter for UISplitViewControllerProxyModifier.transform : UISplitViewControllerProxyModifier(uint64_t *a1, uint64_t (**a2)())
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain();
  uint64_t result = swift_release();
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@inout UISplitViewControllerProxy) -> (@out ());
  a2[1] = (uint64_t (*)())v5;
  return result;
}

void (**UISplitViewControllerProxyModifier.EnsureObservableProxy.updateValue()())(void)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  int Attribute = AGWeakAttributeGetAttribute();
  int v1 = *MEMORY[0x1E4F4E7A0];
  type metadata accessor for UISplitViewControllerProxyStorage();
  if (Attribute == v1)
  {
    if (!AGGraphGetOutputValue())
    {
      v17[0] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
      type metadata accessor for (_:)();
      uint64_t v14 = *(void (**)(void *))AGGraphGetValue();
      swift_retain();
      v14(v17);
      swift_release();
      uint64_t v15 = v17[0];
      uint64_t v16 = swift_allocObject();
      ObservationRegistrar.init()();
      *(void *)(v16 + 16) = v15;
      AGGraphSetOutputValue();
      return (void (**)(void))swift_release();
    }
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t Value = (uint64_t *)AGGraphGetValue();
    char v5 = v4;
    uint64_t v2 = *Value;
    if ((v4 & 1) != 0 || !AGGraphGetOutputValue())
    {
      v17[0] = v2;
      swift_retain();
      AGGraphSetOutputValue();
      char v6 = v5 & 1;
      goto LABEL_9;
    }
    swift_retain();
  }
  char v6 = 0;
LABEL_9:
  type metadata accessor for (_:)();
  uint64_t result = (void (**)(void))AGGraphGetValue();
  uint64_t v8 = *result;
  if (v9) {
    goto LABEL_12;
  }
  if (!v2) {
    return result;
  }
  if (v6)
  {
LABEL_12:
    type metadata accessor for UISplitViewControllerProxyStorage();
    uint64_t result = (void (**)(void))AGGraphGetOutputValue();
    if (result)
    {
      char v10 = *result;
      swift_getKeyPath();
      v17[0] = v10;
      lazy protocol witness table accessor for type Focus<UISplitViewControllerProxyModifier, (_:)> and conformance Focus<A, B>((unint64_t *)&lazy protocol witness table cache variable for type UISplitViewControllerProxyStorage and conformance UISplitViewControllerProxyStorage, (void (*)(uint64_t))type metadata accessor for UISplitViewControllerProxyStorage);
      swift_retain();
      swift_retain();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      v17[0] = *((void *)v10 + 2);
      swift_bridgeObjectRetain();
      swift_release();
      v8(v17);
      swift_release();
      uint64_t result = (void (**)(void))AGGraphGetOutputValue();
      if (result)
      {
        uint64_t v11 = swift_allocObject();
        swift_weakInit();
        uint64_t v12 = v17[0];
        uint64_t v13 = swift_allocObject();
        *(void *)(v13 + 16) = v11;
        *(void *)(v13 + 24) = v12;
        swift_retain();
        static Update.enqueueAction(_:)();
        swift_release();
        swift_release();
        return (void (**)(void))swift_release();
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return result;
  }
  return (void (**)(void))swift_release();
}

uint64_t closure #1 in UISplitViewControllerProxyModifier.EnsureObservableProxy.updateValue()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x1F4188790](KeyPath);
    lazy protocol witness table accessor for type Focus<UISplitViewControllerProxyModifier, (_:)> and conformance Focus<A, B>((unint64_t *)&lazy protocol witness table cache variable for type UISplitViewControllerProxyStorage and conformance UISplitViewControllerProxyStorage, (void (*)(uint64_t))type metadata accessor for UISplitViewControllerProxyStorage);
    swift_bridgeObjectRetain();
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance UISplitViewControllerProxyModifier()
{
}

uint64_t key path getter for UISplitViewControllerProxyStorage.proxy : UISplitViewControllerProxyStorage@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type Focus<UISplitViewControllerProxyModifier, (_:)> and conformance Focus<A, B>((unint64_t *)&lazy protocol witness table cache variable for type UISplitViewControllerProxyStorage and conformance UISplitViewControllerProxyStorage, (void (*)(uint64_t))type metadata accessor for UISplitViewControllerProxyStorage);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for UISplitViewControllerProxyStorage.proxy : UISplitViewControllerProxyStorage()
{
  return swift_bridgeObjectRelease();
}

uint64_t UISplitViewControllerProxyStorage.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC7SwiftUI33UISplitViewControllerProxyStorage___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance UISplitViewControllerProxyKey()
{
  type metadata accessor for UISplitViewControllerProxyStorage();

  return static WeakAttribute.== infix(_:_:)();
}

uint64_t specialized UISplitViewControllerProxy.subscript.setter(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(*MEMORY[0x1E4FBBE08] + *a2 + 8);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = MEMORY[0x1F4188790](v5);
  char v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)&v13 - v8, a1, v5, v7);
  uint64_t v10 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    long long v13 = 0u;
    long long v14 = 0u;
  }
  else
  {
    *((void *)&v14 + 1) = v4;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v13);
    (*(void (**)(uint64_t *, char *, uint64_t))(v10 + 32))(boxed_opaque_existential_1, v9, v4);
  }
  return specialized Dictionary.subscript.setter((uint64_t)&v13, (uint64_t)a2);
}

uint64_t sub_187B54580(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v4 = *a3;
  swift_retain();
  return specialized UISplitViewControllerProxy.subscript.setter(a1, v4);
}

uint64_t sub_187B545C4()
{
  return 8;
}

void *sub_187B545D0(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

ValueMetadata *type metadata accessor for UISplitViewControllerProxy()
{
  return &type metadata for UISplitViewControllerProxy;
}

uint64_t ObjC metadata update function for UISplitViewControllerProxyStorage()
{
  return type metadata accessor for UISplitViewControllerProxyStorage();
}

uint64_t sub_187B545F4()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for UISplitViewControllerProxyModifier()
{
  return &type metadata for UISplitViewControllerProxyModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in UISplitViewControllerProxyModifier()
{
  return &protocol witness table for UISplitViewControllerProxyModifier;
}

uint64_t sub_187B54674@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ();
  a2[1] = (uint64_t (*)())v5;

  return swift_retain();
}

void type metadata accessor for Focus<UISplitViewControllerProxyModifier, (_:)>()
{
  if (!lazy cache variable for type metadata for Focus<UISplitViewControllerProxyModifier, (_:)>)
  {
    type metadata accessor for (_:)();
    unint64_t v0 = type metadata accessor for Focus();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Focus<UISplitViewControllerProxyModifier, (_:)>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type UISplitViewControllerProxyModifier.EnsureObservableProxy and conformance UISplitViewControllerProxyModifier.EnsureObservableProxy()
{
  unint64_t result = lazy protocol witness table cache variable for type UISplitViewControllerProxyModifier.EnsureObservableProxy and conformance UISplitViewControllerProxyModifier.EnsureObservableProxy;
  if (!lazy protocol witness table cache variable for type UISplitViewControllerProxyModifier.EnsureObservableProxy and conformance UISplitViewControllerProxyModifier.EnsureObservableProxy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UISplitViewControllerProxyModifier.EnsureObservableProxy and conformance UISplitViewControllerProxyModifier.EnsureObservableProxy);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Focus<UISplitViewControllerProxyModifier, (_:)> and conformance Focus<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_187B54850()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_187B54888()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UISplitViewControllerProxyModifier.EnsureObservableProxy.updateValue()()
{
  return closure #1 in UISplitViewControllerProxyModifier.EnsureObservableProxy.updateValue()();
}

uint64_t partial apply for closure #1 in UISplitViewControllerProxyStorage.proxy.setter()
{
  return partial apply for closure #1 in UISplitViewControllerProxyStorage.proxy.setter();
}

{
  uint64_t v0;

  *(void *)(*(void *)(v0 + 16) + 16) = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_187B54924()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@inout UISplitViewControllerProxy) -> (@out ())()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void *type metadata accessor for UISplitViewControllerProxyModifier.EnsureObservableProxy()
{
  return &unk_1ED481D98;
}

ValueMetadata *type metadata accessor for UISplitViewControllerProxyKey()
{
  return &type metadata for UISplitViewControllerProxyKey;
}

uint64_t PlainButtonStyle.buttonStyleRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = KeyPath;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = result;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

uint64_t protocol witness for ButtonStyleConvertible.buttonStyleRepresentation.getter in conformance PlainButtonStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = KeyPath;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = result;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

uint64_t sub_187B54A50@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isFocused.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.isFocused : EnvironmentValues(unsigned __int8 *a1)
{
  return EnvironmentValues.isFocused.setter(*a1);
}

uint64_t sub_187B54AB8(unsigned __int8 *a1)
{
  return EnvironmentValues.isFocused.setter(*a1);
}

uint64_t associated type witness table accessor for ButtonStyleConvertible.ButtonStyleRepresentation : ButtonStyle in PlainButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for PassthroughNavigationViewStyle()
{
  return &type metadata for PassthroughNavigationViewStyle;
}

uint64_t associated type witness table accessor for NavigationViewStyle._Body : View in PassthroughNavigationViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for NavigationViewStyle._Body2 : View in PassthroughNavigationViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

void *type metadata accessor for PassthroughNavigationView()
{
  return &unk_1ED447B18;
}

unint64_t lazy protocol witness table accessor for type _VariadicView.Tree<PassthroughNavigationView, _NavigationViewStyleConfiguration.Content> and conformance <> _VariadicView.Tree<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _VariadicView.Tree<PassthroughNavigationView, _NavigationViewStyleConfiguration.Content> and conformance <> _VariadicView.Tree<A, B>;
  if (!lazy protocol witness table cache variable for type _VariadicView.Tree<PassthroughNavigationView, _NavigationViewStyleConfiguration.Content> and conformance <> _VariadicView.Tree<A, B>)
  {
    type metadata accessor for _VariadicView.Tree<PassthroughNavigationView, _NavigationViewStyleConfiguration.Content>();
    lazy protocol witness table accessor for type PassthroughNavigationView and conformance PassthroughNavigationView();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView.Tree<PassthroughNavigationView, _NavigationViewStyleConfiguration.Content> and conformance <> _VariadicView.Tree<A, B>);
  }
  return result;
}

void type metadata accessor for _VariadicView.Tree<PassthroughNavigationView, _NavigationViewStyleConfiguration.Content>()
{
  if (!lazy cache variable for type metadata for _VariadicView.Tree<PassthroughNavigationView, _NavigationViewStyleConfiguration.Content>)
  {
    unint64_t v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<PassthroughNavigationView, _NavigationViewStyleConfiguration.Content>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PassthroughNavigationView and conformance PassthroughNavigationView()
{
  unint64_t result = lazy protocol witness table cache variable for type PassthroughNavigationView and conformance PassthroughNavigationView;
  if (!lazy protocol witness table cache variable for type PassthroughNavigationView and conformance PassthroughNavigationView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PassthroughNavigationView and conformance PassthroughNavigationView);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PassthroughNavigationView and conformance PassthroughNavigationView;
  if (!lazy protocol witness table cache variable for type PassthroughNavigationView and conformance PassthroughNavigationView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PassthroughNavigationView and conformance PassthroughNavigationView);
  }
  return result;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance PassthroughNavigationView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = lazy protocol witness table accessor for type PassthroughNavigationView and conformance PassthroughNavigationView();

  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for _VariadicView_ViewRoot.body(children:) in conformance PassthroughNavigationView@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = static VerticalAlignment.center.getter();
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;

  return outlined init with copy of _VariadicView_Children(a1, a2 + 24);
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in PassthroughNavigationView()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for PassthroughNavigationView(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type PassthroughNavigationView and conformance PassthroughNavigationView();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type HStack<_VariadicView_Children> and conformance HStack<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type HStack<_VariadicView_Children> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<_VariadicView_Children> and conformance HStack<A>)
  {
    type metadata accessor for HStack<_VariadicView_Children>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<_VariadicView_Children> and conformance HStack<A>);
  }
  return result;
}

void type metadata accessor for HStack<_VariadicView_Children>()
{
  if (!lazy cache variable for type metadata for HStack<_VariadicView_Children>)
  {
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<_VariadicView_Children>);
    }
  }
}

uint64_t OutlineGroup<>.init<A>(_:children:content:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v36 = a4;
  uint64_t v37 = a9;
  uint64_t v38 = a3;
  uint64_t v34 = a1;
  uint64_t v35 = a2;
  long long v13 = (uint64_t *)(*a2 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v14 = *v13;
  uint64_t v15 = *(void *)(v13[1] + 16);
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v45 = v15;
  uint64_t v46 = a5;
  uint64_t v47 = a6;
  uint64_t v48 = a6;
  uint64_t v49 = a6;
  uint64_t v50 = a7;
  uint64_t v51 = AssociatedConformanceWitness;
  uint64_t v17 = type metadata accessor for OutlinePrimitive.Base();
  v18.n128_f64[0] = MEMORY[0x1F4188790](v17);
  int v20 = (char *)&v29 - v19;
  uint64_t v21 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v21 + 16))((char *)&v29 - v19, a1, v15, v18);
  swift_storeEnumTagMultiPayload();
  uint64_t v39 = v15;
  uint64_t v40 = a5;
  uint64_t v41 = a6;
  uint64_t v42 = v14;
  uint64_t v43 = a7;
  uint64_t v44 = a8;
  uint64_t v22 = a8;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v23 = a5;
  uint64_t v24 = AssociatedConformanceWitness;
  int v31 = static OutlineGroup.ChildPath.state(_:)((uint64_t)v35, v23, a6, a6, a6, a7, AssociatedConformanceWitness);
  uint64_t v30 = v25;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = a6;
  *(void *)(v26 + 24) = v22;
  uint64_t v27 = v36;
  swift_retain();
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:)((uint64_t)v20, KeyPath, (uint64_t)v31, v30, v38, v27, v38, v27, v37, (uint64_t)partial apply for defaultGrouping<A>(isExpanded:parent:), v26, v15, a6, a6, a6, a7, v24);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v34, v15);
}

{
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)();
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *KeyPath;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  int v31 = a8;
  int v32 = a1;
  uint64_t v33 = a4;
  uint64_t v34 = a9;
  uint64_t v35 = a3;
  uint64_t v36 = a2;
  long long v13 = (uint64_t *)(*a2 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v14 = *v13;
  uint64_t v15 = *(void *)(v13[1] + 16);
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v43 = v15;
  uint64_t v44 = a5;
  uint64_t v30 = v15;
  uint64_t v45 = a6;
  uint64_t v46 = a6;
  uint64_t v47 = a6;
  uint64_t v48 = a7;
  uint64_t v49 = AssociatedConformanceWitness;
  uint64_t v17 = type metadata accessor for OutlinePrimitive.Base();
  v18.n128_f64[0] = MEMORY[0x1F4188790](v17);
  int v20 = (char *)&KeyPath - v19;
  uint64_t v21 = *(void *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v21 + 16))((char *)&KeyPath - v19, a1, v14, v18);
  swift_storeEnumTagMultiPayload();
  uint64_t v37 = v15;
  uint64_t v38 = a5;
  uint64_t v39 = a6;
  uint64_t v40 = v14;
  uint64_t v22 = v31;
  uint64_t v41 = a7;
  uint64_t v42 = v31;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v23 = static OutlineGroup.ChildPath.state(_:)((uint64_t)v36, a5, a6, a6, a6, a7, AssociatedConformanceWitness);
  uint64_t v25 = v24;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = a6;
  *(void *)(v26 + 24) = v22;
  uint64_t v27 = v33;
  swift_retain();
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:)((uint64_t)v20, KeyPath, (uint64_t)v23, v25, v35, v27, v35, v27, v34, (uint64_t)partial apply for defaultGrouping<A>(isExpanded:parent:), v26, v30, a6, a6, a6, a7, AssociatedConformanceWitness);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v32, v14);
}

uint64_t OutlineGroup<>.init<A>(_:children:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v31 = a1;
  uint64_t v32 = a6;
  uint64_t v33 = a2;
  unint64_t v10 = (uint64_t *)(*a2 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v11 = *v10;
  uint64_t v12 = *(void *)(v10[1] + 16);
  uint64_t v13 = type metadata accessor for TableRow();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v39 = v12;
  uint64_t v40 = a3;
  uint64_t v41 = v13;
  uint64_t v42 = v13;
  uint64_t v43 = v13;
  uint64_t v44 = a4;
  uint64_t v45 = AssociatedConformanceWitness;
  uint64_t v15 = type metadata accessor for OutlinePrimitive.Base();
  v16.n128_f64[0] = MEMORY[0x1F4188790](v15);
  __n128 v18 = (char *)&v26 - v17;
  uint64_t v30 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v30 + 16))((char *)&v26 - v17, a1, v11, v16);
  swift_storeEnumTagMultiPayload();
  uint64_t v34 = v12;
  uint64_t v35 = a3;
  uint64_t v36 = v11;
  uint64_t v37 = a4;
  uint64_t v38 = a5;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v19 = swift_checkMetadataState();
  int v20 = static OutlineGroup.ChildPath.state(_:)((uint64_t)v33, a3, v19, v19, v19, a4, AssociatedConformanceWitness);
  uint64_t v27 = v21;
  uint64_t v28 = v20;
  uint64_t v22 = (void *)swift_allocObject();
  void v22[2] = v12;
  void v22[3] = a3;
  unsigned char v22[4] = v11;
  v22[5] = a4;
  v22[6] = a5;
  uint64_t v23 = (void *)swift_allocObject();
  v23[2] = v12;
  v23[3] = a3;
  void v23[4] = v11;
  v23[5] = a4;
  v23[6] = a5;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v19;
  *(void *)(v24 + 24) = swift_getWitnessTable();
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:)((uint64_t)v18, KeyPath, (uint64_t)v28, v27, (uint64_t)partial apply for closure #1 in OutlineGroup<>.init<A>(_:children:), (uint64_t)v22, (uint64_t)partial apply for closure #1 in OutlineGroup<>.init<A>(_:children:), (uint64_t)v23, v32, (uint64_t)partial apply for defaultGrouping<A>(isExpanded:parent:), v24, v12, v19, v19, v19, a4, AssociatedConformanceWitness);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8))(v31, v11);
}

{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t (*v20)();
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)();
  void *KeyPath;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  uint64_t v31 = a1;
  uint64_t v32 = a6;
  uint64_t v33 = a2;
  unint64_t v10 = (uint64_t *)(*a2 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v11 = *v10;
  uint64_t v12 = *(void *)(v10[1] + 16);
  uint64_t v13 = type metadata accessor for TableRow();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v39 = v12;
  uint64_t v40 = a3;
  uint64_t v41 = v13;
  uint64_t v42 = v13;
  uint64_t v43 = v13;
  uint64_t v44 = a4;
  uint64_t v45 = AssociatedConformanceWitness;
  uint64_t v15 = type metadata accessor for OutlinePrimitive.Base();
  v16.n128_f64[0] = MEMORY[0x1F4188790](v15);
  __n128 v18 = (char *)&v26 - v17;
  uint64_t v30 = *(void *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v30 + 16))((char *)&v26 - v17, a1, v12, v16);
  swift_storeEnumTagMultiPayload();
  uint64_t v34 = v12;
  uint64_t v35 = a3;
  uint64_t v36 = v11;
  uint64_t v37 = a4;
  uint64_t v38 = a5;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v19 = swift_checkMetadataState();
  int v20 = static OutlineGroup.ChildPath.state(_:)((uint64_t)v33, a3, v19, v19, v19, a4, AssociatedConformanceWitness);
  uint64_t v27 = v21;
  uint64_t v28 = v20;
  uint64_t v22 = (void *)swift_allocObject();
  void v22[2] = v12;
  void v22[3] = a3;
  unsigned char v22[4] = v11;
  v22[5] = a4;
  v22[6] = a5;
  uint64_t v23 = (void *)swift_allocObject();
  v23[2] = v12;
  v23[3] = a3;
  void v23[4] = v11;
  v23[5] = a4;
  v23[6] = a5;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v19;
  *(void *)(v24 + 24) = swift_getWitnessTable();
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:)((uint64_t)v18, KeyPath, (uint64_t)v28, v27, (uint64_t)partial apply for closure #1 in OutlineGroup<>.init<A>(_:children:), (uint64_t)v22, (uint64_t)partial apply for closure #1 in OutlineGroup<>.init<A>(_:children:), (uint64_t)v23, v32, (uint64_t)partial apply for defaultGrouping<A>(isExpanded:parent:), v24, v12, v19, v19, v19, a4, AssociatedConformanceWitness);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8))(v31, v12);
}

uint64_t closure #1 in OutlineGroup<>.init<A>(_:children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  double v5 = MEMORY[0x1F4188790](a1);
  double v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v8 + 16))(v7, v5);
  return TableRow.init(_:)((uint64_t)v7, a2, a3);
}

uint64_t key path getter for Identifiable.id : <A, B, C, D, E><A1>A1()
{
  return dispatch thunk of Identifiable.id.getter();
}

uint64_t sub_187B55AC4()
{
  return 48;
}

__n128 sub_187B55AD0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_187B55AE4()
{
  return swift_deallocObject();
}

uint64_t sub_187B55AF8()
{
  return dispatch thunk of Identifiable.id.getter();
}

uint64_t sub_187B55B2C()
{
  return 40;
}

__n128 sub_187B55B38(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_187B55B4C()
{
  return swift_deallocObject();
}

uint64_t sub_187B55B60()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OutlineGroup<>.init<A>(_:children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in OutlineGroup<>.init<A>(_:children:)(a1, *(void *)(v2 + 32), a2);
}

uint64_t sub_187B55B94()
{
  return swift_deallocObject();
}

uint64_t sub_187B55BA4()
{
  return swift_deallocObject();
}

uint64_t sub_187B55BB4()
{
  return swift_deallocObject();
}

uint64_t sub_187B55BC4()
{
  return swift_deallocObject();
}

uint64_t sub_187B55BD4()
{
  return swift_deallocObject();
}

uint64_t OutlineGroup<>.init<A>(_:id:children:content:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v34 = a8;
  uint64_t v35 = a5;
  uint64_t v37 = a9;
  uint64_t v38 = a4;
  uint64_t v32 = a1;
  uint64_t v36 = a2;
  uint64_t v13 = *a2;
  uint64_t v14 = *a3;
  v31[1] = a3;
  uint64_t v15 = *MEMORY[0x1E4FBC5F0];
  uint64_t v33 = *(void *)(*(void *)(v14 + *MEMORY[0x1E4FBC5F0] + 8) + 16);
  uint64_t v16 = *(void *)(v13 + v15 + 8);
  uint64_t v17 = *(void *)(v13 + v15);
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v39 = v33;
  uint64_t v40 = v16;
  uint64_t v41 = a6;
  uint64_t v42 = a6;
  uint64_t v43 = a6;
  uint64_t v44 = a7;
  uint64_t v45 = AssociatedConformanceWitness;
  uint64_t v19 = type metadata accessor for OutlinePrimitive.Base();
  v20.n128_f64[0] = MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)v31 - v21;
  uint64_t v23 = *(void *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v23 + 16))((char *)v31 - v21, a1, v17, v20);
  swift_storeEnumTagMultiPayload();
  uint64_t v24 = static OutlineGroup.ChildPath.state(_:)((uint64_t)a3, v16, a6, a6, a6, a7, AssociatedConformanceWitness);
  uint64_t v26 = v25;
  uint64_t v27 = swift_allocObject();
  uint64_t v28 = v34;
  uint64_t v29 = v35;
  *(void *)(v27 + 16) = a6;
  *(void *)(v27 + 24) = v28;
  swift_retain();
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:)((uint64_t)v22, v36, (uint64_t)v24, v26, v38, v29, v38, v29, v37, (uint64_t)partial apply for defaultGrouping<A>(isExpanded:parent:), v27, v33, a6, a6, a6, a7, AssociatedConformanceWitness);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v32, v17);
}

uint64_t sub_187B55E78()
{
  return swift_deallocObject();
}

uint64_t OutlineGroup<>.init<A>(_:id:children:content:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v32 = a8;
  uint64_t v33 = a5;
  uint64_t v35 = a9;
  uint64_t v36 = a4;
  uint64_t v31 = a1;
  uint64_t v34 = a2;
  uint64_t v13 = *a2;
  uint64_t v14 = *a3;
  uint64_t v30 = a3;
  uint64_t v15 = *(void *)(*(void *)(v14 + *MEMORY[0x1E4FBC5F0] + 8) + 16);
  uint64_t v16 = *(void *)(v13 + *MEMORY[0x1E4FBC5F0] + 8);
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v37 = v15;
  uint64_t v38 = v16;
  uint64_t v39 = a6;
  uint64_t v40 = a6;
  uint64_t v41 = a6;
  uint64_t v42 = a7;
  uint64_t v43 = AssociatedConformanceWitness;
  uint64_t v18 = type metadata accessor for OutlinePrimitive.Base();
  v19.n128_f64[0] = MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v30 - v20;
  uint64_t v22 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v22 + 16))((char *)&v30 - v20, a1, v15, v19);
  swift_storeEnumTagMultiPayload();
  uint64_t v23 = static OutlineGroup.ChildPath.state(_:)((uint64_t)a3, v16, a6, a6, a6, a7, AssociatedConformanceWitness);
  uint64_t v25 = v24;
  uint64_t v26 = swift_allocObject();
  uint64_t v27 = v32;
  uint64_t v28 = v33;
  *(void *)(v26 + 16) = a6;
  *(void *)(v26 + 24) = v27;
  swift_retain();
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:)((uint64_t)v21, v34, (uint64_t)v23, v25, v36, v28, v36, v28, v35, (uint64_t)partial apply for defaultGrouping<A>(isExpanded:parent:), v26, v15, a6, a6, a6, a7, AssociatedConformanceWitness);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(v31, v15);
}

uint64_t sub_187B56110()
{
  return swift_deallocObject();
}

uint64_t OutlineGroup<>.init<A>(_:children:expandedElements:content:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v36 = a7;
  uint64_t v37 = a5;
  uint64_t v40 = a9;
  uint64_t v41 = a6;
  uint64_t v38 = a4;
  uint64_t v39 = a3;
  uint64_t v34 = a1;
  uint64_t v33 = a12;
  uint64_t v35 = a2;
  uint64_t v15 = (uint64_t *)(*a2 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v16 = *v15;
  uint64_t v17 = *(void *)(v15[1] + 16);
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v48 = v17;
  uint64_t v49 = a8;
  uint64_t v50 = a10;
  uint64_t v51 = a10;
  uint64_t v52 = a10;
  uint64_t v53 = a11;
  uint64_t v54 = AssociatedConformanceWitness;
  uint64_t v19 = type metadata accessor for OutlinePrimitive.Base();
  v20.n128_f64[0] = MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v30 - v21;
  uint64_t v23 = *(void *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v23 + 16))((char *)&v30 - v21, a1, v17, v20);
  swift_storeEnumTagMultiPayload();
  uint64_t v42 = v17;
  uint64_t v43 = a8;
  uint64_t v44 = a10;
  uint64_t v45 = v16;
  uint64_t v24 = v33;
  uint64_t v46 = a11;
  uint64_t v47 = v33;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v31 = static OutlineGroup.ChildPath.state(_:)((uint64_t)v35, a8, a10, a10, a10, a11, AssociatedConformanceWitness);
  uint64_t v26 = v25;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = a10;
  *(void *)(v27 + 24) = v24;
  uint64_t v28 = v36;
  swift_retain();
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:expandedElements:)((uint64_t)v22, KeyPath, (uint64_t)v31, v26, v41, v28, v41, v28, v40, (uint64_t)partial apply for defaultGrouping<A>(isExpanded:parent:), v27, v39, v38, v37, v17, a10, a10, a10, a11,
    AssociatedConformanceWitness);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v34, v17);
}

{
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedConformanceWitness;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)();
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  void *KeyPath;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  uint64_t v37 = a7;
  uint64_t v38 = a5;
  uint64_t v41 = a9;
  uint64_t v42 = a6;
  uint64_t v39 = a4;
  uint64_t v40 = a3;
  uint64_t v36 = a1;
  uint64_t v35 = a12;
  uint64_t v43 = a2;
  uint64_t v15 = (uint64_t *)(*a2 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v16 = *v15;
  uint64_t v17 = *(void *)(v15[1] + 16);
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v50 = v17;
  uint64_t v51 = a8;
  uint64_t v19 = v17;
  uint64_t v34 = v17;
  uint64_t v52 = a10;
  uint64_t v53 = a10;
  uint64_t v54 = a10;
  long long v55 = a11;
  long long v56 = AssociatedConformanceWitness;
  __n128 v20 = type metadata accessor for OutlinePrimitive.Base();
  v21.n128_f64[0] = MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v32 - v22;
  uint64_t v24 = *(void *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v24 + 16))((char *)&v32 - v22, a1, v16, v21);
  swift_storeEnumTagMultiPayload();
  uint64_t v44 = v19;
  uint64_t v45 = a8;
  uint64_t v46 = a10;
  uint64_t v47 = v16;
  uint64_t v25 = v35;
  uint64_t v48 = a11;
  uint64_t v49 = v35;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v26 = static OutlineGroup.ChildPath.state(_:)((uint64_t)v43, a8, a10, a10, a10, a11, AssociatedConformanceWitness);
  uint64_t v28 = v27;
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = a10;
  *(void *)(v29 + 24) = v25;
  uint64_t v30 = v37;
  swift_retain();
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:expandedElements:)((uint64_t)v23, KeyPath, (uint64_t)v26, v28, v42, v30, v42, v30, v41, (uint64_t)partial apply for defaultGrouping<A>(isExpanded:parent:), v29, v40, v39, v38, v34, a10, a10, a10, a11,
    AssociatedConformanceWitness);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v36, v16);
}

uint64_t sub_187B563D0()
{
  return swift_deallocObject();
}

uint64_t sub_187B5669C()
{
  return swift_deallocObject();
}

uint64_t OutlineGroup<>.init<A>(_:id:childrenGetter:content:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v28 = a3;
  uint64_t v29 = a5;
  uint64_t v31 = a8;
  uint64_t v32 = a4;
  uint64_t v26 = a1;
  uint64_t v27 = a10;
  uint64_t v30 = a2;
  uint64_t v13 = *(void *)(*a2 + *MEMORY[0x1E4FBC5F0] + 8);
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v33 = a6;
  uint64_t v34 = v13;
  uint64_t v35 = a7;
  uint64_t v36 = a7;
  uint64_t v37 = a7;
  uint64_t v38 = a9;
  uint64_t v39 = AssociatedConformanceWitness;
  uint64_t v15 = type metadata accessor for OutlinePrimitive.Base();
  v16.n128_f64[0] = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v26 - v17;
  uint64_t v19 = *(void *)(a6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v19 + 16))((char *)&v26 - v17, a1, a6, v16);
  swift_storeEnumTagMultiPayload();
  uint64_t v28 = static OutlineGroup.ChildPath.closure(_:)(v28);
  uint64_t v21 = v20;
  uint64_t v22 = swift_allocObject();
  uint64_t v23 = v27;
  *(void *)(v22 + 16) = a7;
  *(void *)(v22 + 24) = v23;
  uint64_t v24 = v29;
  swift_retain();
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:)((uint64_t)v18, v30, v28, v21, v32, v24, v32, v24, v31, (uint64_t)partial apply for defaultGrouping<A>(isExpanded:parent:), v22, a6, a7, a7, a7, a9, AssociatedConformanceWitness);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v26, a6);
}

uint64_t sub_187B56914()
{
  return swift_deallocObject();
}

uint64_t OutlineGroup<>.init<A>(_:id:expandedElements:childrenGetter:content:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v35 = a8;
  uint64_t v36 = a7;
  uint64_t v32 = a5;
  uint64_t v33 = a4;
  uint64_t v34 = a3;
  uint64_t v27 = a1;
  uint64_t v29 = a6;
  uint64_t v30 = a9;
  uint64_t v28 = a13;
  uint64_t v31 = a2;
  uint64_t v14 = *(void *)(*a2 + *MEMORY[0x1E4FBC5F0] + 8);
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v37 = a10;
  uint64_t v38 = v14;
  uint64_t v39 = a11;
  uint64_t v40 = a11;
  uint64_t v41 = a11;
  uint64_t v42 = a12;
  uint64_t v43 = AssociatedConformanceWitness;
  uint64_t v16 = type metadata accessor for OutlinePrimitive.Base();
  v17.n128_f64[0] = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v27 - v18;
  uint64_t v20 = *(void *)(a10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v20 + 16))((char *)&v27 - v18, a1, a10, v17);
  swift_storeEnumTagMultiPayload();
  uint64_t v29 = static OutlineGroup.ChildPath.closure(_:)(v29);
  uint64_t v22 = v21;
  uint64_t v23 = swift_allocObject();
  uint64_t v24 = v28;
  *(void *)(v23 + 16) = a11;
  *(void *)(v23 + 24) = v24;
  uint64_t v25 = v30;
  swift_retain();
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:expandedElements:)((uint64_t)v19, v31, v29, v22, v36, v25, v36, v25, v35, (uint64_t)partial apply for defaultGrouping<A>(isExpanded:parent:), v23, v34, v33, v32, a10, a11, a11, a11, a12,
    AssociatedConformanceWitness);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v27, a10);
}

uint64_t sub_187B56BAC()
{
  return swift_deallocObject();
}

uint64_t partial apply for defaultGrouping<A>(isExpanded:parent:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v2 + 16) - 8) + 16))(a2, a1);
}

uint64_t OutlineGroup<>.baseItems.getter()
{
  uint64_t v0 = type metadata accessor for OutlinePrimitive.Base();
  uint64_t result = OutlinePrimitive.Base.count.getter(v0);
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    MEMORY[0x1F4188790](result);
    type metadata accessor for Range<Int>();
    swift_getAssociatedTypeWitness();
    lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    return Sequence.compactMap<A>(_:)();
  }
  return result;
}

uint64_t closure #1 in OutlineGroup<>.baseItems.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for OutlineGroup();
  uint64_t v3 = type metadata accessor for OutlinePrimitive.Base();
  return OutlinePrimitive.Base.itemAt(index:)(v2, v3, a2);
}

uint64_t OutlineGroup<>.IsExpandedProjection.get(base:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();

  return Set.contains(_:)();
}

uint64_t OutlineGroup<>.IsExpandedProjection.set(base:newValue:)(uint64_t a1, char a2, uint64_t a3)
{
  v19[1] = a1;
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  char v9 = (char *)v19 - v8;
  uint64_t v10 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = MEMORY[0x1F4188790](v14);
  __n128 v17 = (char *)v19 - v16;
  if (a2)
  {
    (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v13, v3, v5, v15);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for Set();
    Set.insert(_:)();
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v17, v5);
  }
  else
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for Set();
    Set.remove(_:)();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

uint64_t OutlineGroup<>.IsExpandedProjection.hash(into:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();

  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static OutlineGroup<>.IsExpandedProjection.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

Swift::Int OutlineGroup<>.IsExpandedProjection.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t OutlineGroup<>.OutlineGroupSubgroup.$expandedItems.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  type metadata accessor for Binding();
  Binding.projectedValue.getter();
  return v1;
}

uint64_t protocol witness for Projection.get(base:) in conformance OutlineGroup<A, B, C, D, E><>.IsExpandedProjection@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = OutlineGroup<>.IsExpandedProjection.get(base:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance OutlineGroup<A, B, C, D, E><>.IsExpandedProjection(uint64_t a1, char *a2, uint64_t a3)
{
  return OutlineGroup<>.IsExpandedProjection.set(base:newValue:)(a1, *a2, a3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance OutlineGroup<A, B, C, D, E><>.IsExpandedProjection()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance OutlineGroup<A, B, C, D, E><>.IsExpandedProjection()
{
  return static OutlineGroup<>.IsExpandedProjection.== infix(_:_:)();
}

uint64_t OutlineGroup<>.OutlineGroupSubgroup.tableRowBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v47 = a2;
  uint64_t v45 = *(void *)(a1 - 8);
  uint64_t v46 = *(void *)(v45 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v44 = &v34[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = *(void *)(v5 + 32);
  MEMORY[0x1F4188790](v5);
  uint64_t v48 = &v34[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = *(void *)(v8 + 24);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = &v34[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = v13[5];
  uint64_t v15 = v13[6];
  uint64_t v42 = v13[2];
  uint64_t v43 = v14;
  uint64_t v50 = v42;
  uint64_t v51 = v9;
  uint64_t v52 = v6;
  uint64_t v53 = v14;
  uint64_t v54 = v15;
  uint64_t v16 = v15;
  uint64_t IsExpandedProjection = type metadata accessor for OutlineGroup<>.IsExpandedProjection();
  uint64_t v18 = *(void *)(IsExpandedProjection - 8);
  MEMORY[0x1F4188790](IsExpandedProjection);
  uint64_t v20 = &v34[-v19];
  uint64_t v50 = OutlineGroup<>.OutlineGroupSubgroup.$expandedItems.getter();
  uint64_t v51 = v21;
  uint64_t v52 = v22;
  uint64_t v23 = v2 + *(int *)(a1 + 60);
  uint64_t v39 = v2;
  uint64_t v40 = v23;
  swift_getAtKeyPath();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v20, v12, v9);
  uint64_t v41 = v16;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  type metadata accessor for Binding();
  swift_getWitnessTable();
  Binding.projecting<A>(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v18 + 8))(v20, IsExpandedProjection);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v37 = v57;
  uint64_t v36 = v58;
  int v35 = v59;
  uint64_t v24 = v39;
  (*(void (**)(uint64_t))(v39 + *(int *)(a1 + 68)))(v40);
  uint64_t v26 = v44;
  uint64_t v25 = v45;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v45 + 16))(v44, v24, a1);
  unint64_t v27 = (*(unsigned __int8 *)(v25 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  uint64_t v28 = (char *)swift_allocObject();
  uint64_t v30 = v42;
  uint64_t v29 = v43;
  *((void *)v28 + 2) = v42;
  *((void *)v28 + 3) = v9;
  *((void *)v28 + 4) = v6;
  *((void *)v28 + 5) = v29;
  uint64_t v31 = v41;
  *((void *)v28 + 6) = v41;
  (*(void (**)(char *, unsigned char *, uint64_t))(v25 + 32))(&v28[v27], v26, a1);
  uint64_t v50 = v30;
  uint64_t v51 = v9;
  uint64_t v52 = v6;
  uint64_t v53 = v6;
  uint64_t v54 = v6;
  uint64_t v55 = v29;
  uint64_t v56 = AssociatedConformanceWitness;
  uint64_t v32 = type metadata accessor for OutlineGroup();
  uint64_t v49 = v31;
  swift_getWitnessTable();
  return DisclosureTableRow.init(isExpanded:label:content:)(v37, v36, v35, (uint64_t)v48, (void (*)(uint64_t))partial apply for closure #1 in OutlineGroup<>.OutlineGroupSubgroup.tableRowBody.getter, v6, v32, v47);
}

uint64_t closure #1 in OutlineGroup<>.OutlineGroupSubgroup.tableRowBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v30 = a5;
  uint64_t v31 = a4;
  uint64_t v32 = a3;
  uint64_t v33 = a6;
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = v11;
  uint64_t v35 = v12;
  uint64_t v36 = v13;
  uint64_t v37 = v14;
  uint64_t v38 = v15;
  uint64_t v16 = (int *)type metadata accessor for OutlineGroup<>.OutlineGroupSubgroup();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1 + v16[16], a2);
  __n128 v17 = *(void **)(a1 + v16[20]);
  swift_retain();
  uint64_t v18 = OutlineGroup<>.OutlineGroupSubgroup.$expandedItems.getter();
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v23 = v16[18];
  uint64_t v24 = *(void *)(a1 + v16[19]);
  uint64_t v25 = a1 + v23;
  uint64_t v26 = *(void *)(a1 + v23);
  uint64_t v27 = *(void *)(v25 + 8);
  swift_retain();
  swift_retain();
  return OutlineGroup<>.init<A>(_:id:expandedElements:childrenGetter:content:)((uint64_t)v10, v17, v18, v20, v22, v24, v26, v33, v27, a2, v32, v31, v30);
}

uint64_t OutlineGroup<>.OutlineGroupSubgroup.init(expandedItems:element:data:parentContent:leafContent:children:id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14)
{
  uint64_t v18 = *a13;
  *(void *)a9 = a1;
  *((void *)a9 + 1) = a2;
  *((void *)a9 + 2) = a3;
  uint64_t v19 = (void *)(v18 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v20 = (int *)type metadata accessor for OutlineGroup<>.OutlineGroupSubgroup();
  (*(void (**)(char *, uint64_t))(*(void *)(*v19 - 8) + 32))(&a9[v20[15]], a4);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a14 - 8) + 32))(&a9[v20[16]], a5, a14);
  uint64_t v22 = &a9[v20[17]];
  *(void *)uint64_t v22 = a6;
  *((void *)v22 + 1) = a7;
  uint64_t v23 = &a9[v20[18]];
  *(void *)uint64_t v23 = a8;
  *((void *)v23 + 1) = a10;
  uint64_t v24 = &a9[v20[19]];
  *(void *)uint64_t v24 = a11;
  *((void *)v24 + 1) = a12;
  *(void *)&a9[v20[20]] = a13;
  return result;
}

uint64_t OutlineGroup<>.tableRowBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v23 = a3;
  uint64_t v6 = *(void *)(a1 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = OutlineGroup<>.baseItems.getter();
  uint64_t v21 = *(void *)(v3 + *(int *)(a1 + 80));
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3, a1);
  unint64_t v9 = (*(unsigned __int8 *)(v6 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = (char *)swift_allocObject();
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *((void *)v10 + 2) = v12;
  *((void *)v10 + 3) = v11;
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 56);
  *((void *)v10 + 4) = v13;
  *((void *)v10 + 5) = v14;
  *((void *)v10 + 6) = a2;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v10[v9], v8, a1);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = type metadata accessor for Array();
  uint64_t v16 = v21;
  swift_retain();
  uint64_t v26 = v12;
  uint64_t v27 = v11;
  uint64_t v28 = v13;
  uint64_t v29 = v14;
  uint64_t v30 = a2;
  type metadata accessor for OutlineGroup<>.OutlineGroupSubgroup();
  uint64_t v17 = type metadata accessor for _ConditionalContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v24 = swift_getWitnessTable();
  uint64_t v25 = a2;
  swift_getWitnessTable();
  return ForEach<>.init<A>(_:id:content:)((uint64_t)&v31, v16, (uint64_t)partial apply for closure #1 in OutlineGroup<>.tableRowBody.getter, (uint64_t)v10, v15, v17, AssociatedTypeWitness, WitnessTable);
}

uint64_t closure #1 in OutlineGroup<>.tableRowBody.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v79 = a2;
  uint64_t v80 = a1;
  uint64_t v87 = a8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v73 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  int v74 = (char *)&v66 - v14;
  uint64_t v90 = a3;
  uint64_t v91 = a4;
  uint64_t v92 = a5;
  uint64_t v93 = a6;
  uint64_t v94 = a7;
  uint64_t v15 = type metadata accessor for OutlineGroup<>.OutlineGroupSubgroup();
  uint64_t v78 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v77 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v75 = (char *)&v66 - v18;
  uint64_t v72 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v71 = (void (*)(void))((char *)&v66 - v23);
  uint64_t v69 = type metadata accessor for Optional();
  uint64_t v68 = *(void *)(v69 - 8);
  MEMORY[0x1F4188790](v69);
  uint64_t v25 = (char *)&v66 - v24;
  uint64_t v26 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v70 = (char *)&v66 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  uint64_t v67 = (char *)&v66 - v30;
  uint64_t v84 = v15;
  uint64_t v31 = type metadata accessor for _ConditionalContent();
  uint64_t v82 = *(void *)(v31 - 8);
  uint64_t v83 = v31;
  MEMORY[0x1F4188790](v31);
  uint64_t v81 = (uint64_t)&v66 - v32;
  uint64_t v86 = a7;
  swift_getAssociatedConformanceWitness();
  uint64_t v85 = AssociatedTypeWitness;
  uint64_t v33 = v79;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v90 = a3;
  uint64_t v91 = a4;
  uint64_t v92 = a5;
  uint64_t v93 = a5;
  uint64_t v94 = a5;
  uint64_t v95 = a6;
  uint64_t v76 = a6;
  uint64_t v96 = AssociatedConformanceWitness;
  uint64_t v35 = (int *)type metadata accessor for OutlineGroup();
  uint64_t v36 = (void (**)(void))(v33 + v35[21]);
  uint64_t v37 = *v36;
  uint64_t v38 = (uint64_t)v36[1];
  uint64_t v39 = v80;
  (*v36)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v25, 1, a3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v68 + 8))(v25, v69);
    (*(void (**)(uint64_t *))(v33 + v35[23]))(v39);
    uint64_t v40 = (uint64_t)v71;
    uint64_t v42 = v85;
    uint64_t v41 = v86;
    static TableRowBuilder.buildExpression<A>(_:)(v21, v85, a5, v86);
    uint64_t v43 = *(void (**)(char *, uint64_t))(v72 + 8);
    v43(v21, a5);
    static TableRowBuilder.buildExpression<A>(_:)(v40, v42, a5, v41);
    v43((char *)v40, a5);
    swift_getWitnessTable();
    uint64_t v44 = v81;
    static TableRowBuilder.buildEither<A, B>(second:)((uint64_t)v21, a5, v81);
    v43(v21, a5);
  }
  else
  {
    uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    uint64_t v72 = v38;
    uint64_t v71 = v37;
    uint64_t v46 = v67;
    v45(v67, v25, a3);
    uint64_t v69 = OutlineGroup.$expandedElements.getter();
    uint64_t v68 = v47;
    uint64_t v66 = v48;
    uint64_t v49 = (uint64_t)v74;
    uint64_t v50 = v85;
    (*(void (**)(char *, uint64_t *, uint64_t))(v73 + 16))(v74, v39, v85);
    uint64_t v51 = (uint64_t)v70;
    v45(v70, v46, a3);
    uint64_t v52 = (uint64_t *)(v33 + v35[22]);
    uint64_t v53 = *v52;
    uint64_t v54 = v52[1];
    uint64_t v55 = (uint64_t *)(v33 + v35[23]);
    uint64_t v56 = *v55;
    uint64_t v73 = v55[1];
    uint64_t v80 = *(uint64_t **)(v33 + v35[20]);
    uint64_t v57 = v86;
    uint64_t v42 = v50;
    uint64_t v58 = v77;
    OutlineGroup<>.OutlineGroupSubgroup.init(expandedItems:element:data:parentContent:leafContent:children:id:)(v69, v68, v66, v49, v51, v53, v54, v56, v77, v73, (uint64_t)v71, v72, v80, a3);
    uint64_t v59 = v84;
    uint64_t WitnessTable = swift_getWitnessTable();
    unint64_t v61 = v75;
    static TableRowBuilder.buildExpression<A>(_:)(v58, v42, v59, WitnessTable);
    long long v62 = *(void (**)(char *, uint64_t))(v78 + 8);
    swift_retain();
    uint64_t v41 = v57;
    swift_retain();
    swift_retain();
    swift_retain();
    v62(v58, v59);
    static TableRowBuilder.buildExpression<A>(_:)(v61, v42, v59, WitnessTable);
    v62(v61, v59);
    uint64_t v44 = v81;
    static TableRowBuilder.buildEither<A, B>(first:)((uint64_t)v58, v59, v81);
    v62(v58, v59);
  }
  uint64_t v88 = swift_getWitnessTable();
  uint64_t v89 = v41;
  uint64_t v63 = v83;
  uint64_t v64 = swift_getWitnessTable();
  static TableRowBuilder.buildExpression<A>(_:)(v44, v42, v63, v64);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v82 + 8))(v44, v63);
}

uint64_t sub_187B5874C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v2 = type metadata accessor for OutlineGroup();
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80));
  outlined consume of StateOrBinding<Set<B>><A, B, C, D, E><A1>(*(void *)v3, *(void *)(v3 + 8), *(void *)(v3 + 16), *(unsigned char *)(v3 + 24));
  uint64_t v4 = v3 + *(int *)(v2 + 76);
  type metadata accessor for OutlinePrimitive.Base();
  if (swift_getEnumCaseMultiPayload() != 1) {
    uint64_t v1 = swift_checkMetadataState();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v4, v1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OutlineGroup<>.tableRowBody.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = v2[2];
  uint64_t v5 = v2[3];
  uint64_t v7 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v9 = v2[6];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = *(void *)(type metadata accessor for OutlineGroup() - 8);
  uint64_t v11 = (uint64_t)v2 + ((*(unsigned __int8 *)(v10 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));

  return closure #1 in OutlineGroup<>.tableRowBody.getter(a1, v11, v6, v5, v7, v8, v9, a2);
}

uint64_t type metadata accessor for OutlineGroup<>.OutlineGroupSubgroup()
{
  return swift_getGenericMetadata();
}

uint64_t static OutlineGroup<>._containsOutlineSymbol(inputs:)()
{
  return 1;
}

uint64_t associated type witness table accessor for TableRowContent.TableRowBody : TableRowContent in <> OutlineGroup<A, B, C, D, E>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for TableRowContent.TableRowValue : Identifiable in <> OutlineGroup<A, B, C, D, E>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t protocol witness for TableRowContent.tableRowBody.getter in conformance <> OutlineGroup<A, B, C, D, E>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return OutlineGroup<>.tableRowBody.getter(a1, *(void *)(a2 - 8), a3);
}

uint64_t sub_187B58B4C()
{
  return swift_getWitnessTable();
}

uint64_t type metadata completion function for OutlineGroup<>.OutlineGroupSubgroup()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for OutlineGroup<>.OutlineGroupSubgroup(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(v5 - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = v9 + v11;
  uint64_t v13 = *(void *)(v10 + 64) + 7;
  int v14 = (*(_DWORD *)(v10 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000;
  uint64_t v15 = *a2;
  *a1 = *a2;
  if ((v11 | v8) > 7
    || v14 != 0
    || ((((((((v13 + ((v9 + v11 + ((v8 + 24) & ~v8)) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    uint64_t v36 = (uint64_t *)(v15 + (((v11 | v8) & 0xF8 ^ 0x1F8) & ((v11 | v8) + 16)));
  }
  else
  {
    uint64_t v18 = ~v8;
    uint64_t v38 = ~v11;
    uint64_t v19 = a2[2];
    a1[1] = a2[1];
    a1[2] = v19;
    uint64_t v20 = (char *)a1 + v8;
    uint64_t v21 = (char *)a2 + v8;
    uint64_t v22 = (unint64_t)(v20 + 24) & v18;
    uint64_t v23 = (unint64_t)(v21 + 24) & v18;
    uint64_t v39 = a1;
    uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    uint64_t v25 = AssociatedTypeWitness;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v24(v22, v23, v25);
    uint64_t v26 = (v22 + v12) & v38;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v26, (v23 + v12) & v38, v5);
    uint64_t v27 = (void *)((v13 + v26) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v28 = (void *)((v13 + ((v23 + v12) & v38)) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v29 = v28[1];
    *uint64_t v27 = *v28;
    v27[1] = v29;
    uint64_t v30 = (void *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v31 = (void *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v32 = v31[1];
    *uint64_t v30 = *v31;
    v30[1] = v32;
    uint64_t v33 = (void *)(((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v34 = (void *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v35 = v34[1];
    *uint64_t v33 = *v34;
    v33[1] = v35;
    *(void *)(((unint64_t)v33 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v34 + 23) & 0xFFFFFFFFFFFFFFF8);
    swift_retain();
    swift_retain();
    uint64_t v36 = v39;
    swift_retain();
  }
  swift_retain();
  return v36;
}

uint64_t destroy for OutlineGroup<>.OutlineGroupSubgroup(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (a1 + *(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v4 - 8) + 8))((v8 + *(void *)(v7 + 56) + *(unsigned __int8 *)(*(void *)(v4 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80), v4);
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

void *initializeWithCopy for OutlineGroup<>.OutlineGroupSubgroup(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  a1[2] = a2[2];
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  uint64_t v10 = v8 + 16;
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = ((unint64_t)a1 + v11 + 24) & ~v11;
  uint64_t v13 = ((unint64_t)a2 + v11 + 24) & ~v11;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v9(v12, v13, AssociatedTypeWitness);
  uint64_t v14 = *(void *)(v6 - 8);
  uint64_t v15 = v14 + 16;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = *(void *)(v10 + 48) + v16;
  uint64_t v18 = (v17 + v12) & ~v16;
  uint64_t v19 = (v17 + v13) & ~v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v18, v19, v6);
  uint64_t v20 = *(void *)(v15 + 48) + 7;
  uint64_t v21 = (void *)((v20 + v18) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = (void *)((v20 + v19) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v23;
  uint64_t v24 = (void *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v25 = (void *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v26 = v25[1];
  *uint64_t v24 = *v25;
  v24[1] = v26;
  uint64_t v27 = (void *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v28 = (void *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v29 = v28[1];
  *uint64_t v27 = *v28;
  v27[1] = v29;
  *(void *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for OutlineGroup<>.OutlineGroupSubgroup(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ((unint64_t)a1 + v10 + 24) & ~v10;
  uint64_t v12 = ((unint64_t)a2 + v10 + 24) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v11, v12, AssociatedTypeWitness);
  uint64_t v13 = *(void *)(v9 + 40);
  uint64_t v14 = *(void *)(v6 - 8);
  uint64_t v15 = v14 + 24;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 24))(v18, v19, v6);
  uint64_t v20 = *(void *)(v15 + 40) + 7;
  uint64_t v21 = (void *)((v20 + v18) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = (void *)((v20 + v19) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v23;
  swift_retain();
  swift_release();
  uint64_t v24 = (void *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v25 = (void *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v26 = v25[1];
  *uint64_t v24 = *v25;
  v24[1] = v26;
  swift_retain();
  swift_release();
  uint64_t v27 = (void *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v28 = (void *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v29 = v28[1];
  *uint64_t v27 = *v28;
  v27[1] = v29;
  swift_retain();
  swift_release();
  *(void *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for OutlineGroup<>.OutlineGroupSubgroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (v9 + 24 + a1) & ~v9;
  uint64_t v11 = (v9 + 24 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v10, v11, AssociatedTypeWitness);
  uint64_t v12 = *(void *)(v8 + 32);
  uint64_t v13 = *(void *)(v5 - 8);
  uint64_t v14 = v13 + 32;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = v12 + v15;
  uint64_t v17 = (v16 + v10) & ~v15;
  uint64_t v18 = (v16 + v11) & ~v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v17, v18, v5);
  uint64_t v19 = *(void *)(v14 + 32) + 7;
  uint64_t v20 = (_OWORD *)((v19 + v17) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (_OWORD *)((v19 + v18) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v20 = *v21;
  uint64_t v22 = (_OWORD *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = (_OWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v22 = *v23;
  uint64_t v24 = (_OWORD *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v25 = (_OWORD *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v24 = *v25;
  *(void *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithTake for OutlineGroup<>.OutlineGroupSubgroup(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ((unint64_t)a1 + v10 + 24) & ~v10;
  uint64_t v12 = ((unint64_t)a2 + v10 + 24) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v11, v12, AssociatedTypeWitness);
  uint64_t v13 = *(void *)(v9 + 24);
  uint64_t v14 = *(void *)(v6 - 8);
  uint64_t v15 = v14 + 40;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(v18, v19, v6);
  uint64_t v20 = *(void *)(v15 + 24) + 7;
  uint64_t v21 = (_OWORD *)((v20 + v18) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = v20 + v19;
  unint64_t v23 = (v22 & 0xFFFFFFFFFFFFFFF8) + 23;
  *uint64_t v21 = *(_OWORD *)(v22 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  uint64_t v24 = (_OWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  v23 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v24 = *(_OWORD *)v23;
  swift_release();
  uint64_t v25 = (_OWORD *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v26 = (_OWORD *)((v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v25 = *v26;
  swift_release();
  *(void *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for OutlineGroup<>.OutlineGroupSubgroup(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  if (v7 <= v9) {
    unsigned int v13 = *(_DWORD *)(v8 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  if (v13 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  else {
    unsigned int v14 = v13;
  }
  if (!a2) {
    return 0;
  }
  if (v14 < a2)
  {
    unint64_t v15 = ((((((((*(void *)(*(void *)(v5 - 8) + 64) + ((v11 + v12 + ((v10 + 24) & ~v10)) & ~v12) + 7) & 0xFFFFFFFFFFFFFFF8)
              + 23) & 0xFFFFFFFFFFFFFFF8)
            + 23) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    uint64_t v16 = v15 & 0xFFFFFFF8;
    if ((v15 & 0xFFFFFFF8) != 0) {
      unsigned int v17 = 2;
    }
    else {
      unsigned int v17 = a2 - v14 + 1;
    }
    if (v17 >= 0x10000) {
      unsigned int v18 = 4;
    }
    else {
      unsigned int v18 = 2;
    }
    if (v17 < 0x100) {
      unsigned int v18 = 1;
    }
    if (v17 >= 2) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    switch(v19)
    {
      case 1:
        int v20 = *((unsigned __int8 *)a1 + v15);
        if (!v20) {
          break;
        }
        goto LABEL_25;
      case 2:
        int v20 = *(unsigned __int16 *)((char *)a1 + v15);
        if (v20) {
          goto LABEL_25;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187B59B5CLL);
      case 4:
        int v20 = *(int *)((char *)a1 + v15);
        if (!v20) {
          break;
        }
LABEL_25:
        int v22 = v20 - 1;
        if (v16)
        {
          int v22 = 0;
          int v23 = *a1;
        }
        else
        {
          int v23 = 0;
        }
        return v14 + (v23 | v22) + 1;
      default:
        break;
    }
  }
  if ((v13 & 0x80000000) != 0)
  {
    uint64_t v25 = ((unint64_t)a1 + v10 + 24) & ~v10;
    if (v7 == v14)
    {
      uint64_t v26 = *(uint64_t (**)(uint64_t))(v6 + 48);
      return v26(v25);
    }
    else
    {
      uint64_t v27 = (v25 + v11 + v12) & ~v12;
      uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
      return v28(v27, v9, v5);
    }
  }
  else
  {
    unint64_t v24 = *((void *)a1 + 1);
    if (v24 >= 0xFFFFFFFF) {
      LODWORD(v24) = -1;
    }
    return (v24 + 1);
  }
}

void storeEnumTagSinglePayload for OutlineGroup<>.OutlineGroupSubgroup(void *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(void *)(v7 - 8);
  uint64_t v11 = *(unsigned int *)(v10 + 84);
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = *(void *)(v8 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  if (v9 <= v11) {
    unsigned int v15 = *(_DWORD *)(v10 + 84);
  }
  else {
    unsigned int v15 = *(_DWORD *)(v8 + 84);
  }
  if (v15 <= 0x7FFFFFFF) {
    unsigned int v16 = 0x7FFFFFFF;
  }
  else {
    unsigned int v16 = v15;
  }
  size_t v17 = ((((((((*(void *)(*(void *)(v7 - 8) + 64) + ((v13 + v14 + ((v12 + 24) & ~v12)) & ~v14) + 7) & 0xFFFFFFFFFFFFFFF8)
            + 23) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v16 >= a3)
  {
    int v20 = 0;
    int v21 = a2 - v16;
    if (a2 <= v16)
    {
LABEL_20:
      switch(v20)
      {
        case 1:
          *((unsigned char *)a1 + v17) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 2:
          *(_WORD *)((char *)a1 + v17) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 3:
          goto LABEL_49;
        case 4:
          *(_DWORD *)((char *)a1 + v17) = 0;
          goto LABEL_32;
        default:
LABEL_32:
          if (a2)
          {
LABEL_33:
            if ((v15 & 0x80000000) != 0)
            {
              uint64_t v24 = ((unint64_t)a1 + v12 + 24) & ~v12;
              if (v9 == v16)
              {
                uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v8 + 56);
                v25(v24, a2);
              }
              else
              {
                uint64_t v26 = (v24 + v13 + v14) & ~v14;
                uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
                v27(v26, a2, v11, v7);
              }
            }
            else if ((a2 & 0x80000000) != 0)
            {
              a1[1] = 0;
              a1[2] = 0;
              *a1 = a2 ^ 0x80000000;
            }
            else
            {
              a1[1] = (a2 - 1);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((((((((*(_DWORD *)(*(void *)(v7 - 8) + 64)
               + ((v13 + v14 + ((v12 + 24) & ~v12)) & ~v14)
               + 7) & 0xFFFFFFF8)
             + 23) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) == 0xFFFFFFF8)
      unsigned int v18 = a3 - v16 + 1;
    else {
      unsigned int v18 = 2;
    }
    if (v18 >= 0x10000) {
      int v19 = 4;
    }
    else {
      int v19 = 2;
    }
    if (v18 < 0x100) {
      int v19 = 1;
    }
    if (v18 >= 2) {
      int v20 = v19;
    }
    else {
      int v20 = 0;
    }
    int v21 = a2 - v16;
    if (a2 <= v16) {
      goto LABEL_20;
    }
  }
  if (((((((((*(_DWORD *)(*(void *)(v7 - 8) + 64)
             + ((v13 + v14 + ((v12 + 24) & ~v12)) & ~v14)
             + 7) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8)
       + 23) & 0xFFFFFFF8) == 0xFFFFFFF8)
    int v22 = v21;
  else {
    int v22 = 1;
  }
  if (v17)
  {
    int v23 = ~v16 + a2;
    bzero(a1, v17);
    *(_DWORD *)a1 = v23;
  }
  switch(v20)
  {
    case 1:
      *((unsigned char *)a1 + v17) = v22;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v17) = v22;
      break;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x187B59E6CLL);
    case 4:
      *(_DWORD *)((char *)a1 + v17) = v22;
      break;
    default:
      return;
  }
}

ValueMetadata *type metadata accessor for EmptyTableRowGenerator()
{
  return &type metadata for EmptyTableRowGenerator;
}

uint64_t associated type witness table accessor for TableRowContent.TableRowBody : TableRowContent in OutlineGroup<A, B, C, D, E><>.OutlineGroupSubgroup()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for TableRowContent.TableRowValue : Identifiable in OutlineGroup<A, B, C, D, E><>.OutlineGroupSubgroup()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t protocol witness for TableRowGenerator.rowIDs.getter in conformance EmptyTableRowGenerator()
{
  type metadata accessor for WrappedTableRowIDs<[TableRowID]>();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = MEMORY[0x1E4FBC860];
  return result;
}

uint64_t type metadata accessor for OutlineGroup<>.IsExpandedProjection()
{
  return swift_getGenericMetadata();
}

uint64_t sub_187B59F5C()
{
  long long v6 = *(_OWORD *)(v0 + 16);
  unint64_t v1 = (int *)(type metadata accessor for OutlineGroup<>.OutlineGroupSubgroup() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v3 = v2 + v1[17];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v3, AssociatedTypeWitness);
  (*(void (**)(uint64_t, void))(*(void *)(v6 - 8) + 8))(v2 + v1[18], v6);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OutlineGroup<>.OutlineGroupSubgroup.tableRowBody.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[6];
  uint64_t v7 = *(void *)(type metadata accessor for OutlineGroup<>.OutlineGroupSubgroup() - 8);
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v7 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return closure #1 in OutlineGroup<>.OutlineGroupSubgroup.tableRowBody.getter(v8, v3, v4, v5, v6, a1);
}

uint64_t partial apply for closure #1 in OutlineGroup<>.baseItems.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in OutlineGroup<>.baseItems.getter(a1, a2);
}

uint64_t type metadata completion function for OutlineGroup<>.IsExpandedProjection()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for OutlineGroup<>.IsExpandedProjection(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for OutlineGroup<>.IsExpandedProjection(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187B5A684);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unsigned int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t sub_187B5A6AC()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in OutlineGroup<A, B, C, D, E><>.IsExpandedProjection()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Hashable in OutlineGroup<A, B, C, D, E><>.IsExpandedProjection()
{
  return swift_getWitnessTable();
}

uint64_t PlatformBarUpdater.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of weak FallbackResponderProvider?(v0 + 32);
  swift_bridgeObjectRelease();
  unint64_t v1 = *(void **)(v0 + 64);

  return swift_deallocClassInstance();
}

uint64_t one-time initialization function for bar()
{
  static Material.bar.getter();
  uint64_t result = AnyShapeStyle.init<A>(_:)();
  static PlatformBarBackground.Backgrounds.bar = result;
  return result;
}

uint64_t closure #1 in PlatformBarBackground.body.getter@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v6 = a1;
  if (a2)
  {
    double v8 = a4;
    if (a1)
    {
      uint64_t v9 = one-time initialization token for bar;
      swift_retain();
      if (v9 != -1) {
        swift_once();
      }
      if (static PlatformBarBackground.Backgrounds.bar == v6)
      {
        swift_release();
      }
      else
      {
        char v10 = dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
        swift_release();
        if ((v10 & 1) == 0)
        {
          char v11 = 1;
          double v8 = 0.0;
          uint64_t v12 = v6;
LABEL_22:
          uint64_t result = swift_retain();
          char v15 = 0;
          double v16 = 0.0;
          uint64_t v6 = v12;
          goto LABEL_25;
        }
      }
      char v11 = 0;
      uint64_t v12 = v6;
      double v8 = a4;
      goto LABEL_22;
    }
    goto LABEL_15;
  }
  if (!a1)
  {
    double v8 = 0.0;
LABEL_15:
    if (one-time initialization token for bar != -1) {
      swift_once();
    }
    uint64_t v12 = static PlatformBarBackground.Backgrounds.bar;
    uint64_t result = swift_retain();
    if (a2)
    {
      char v11 = 0;
      goto LABEL_22;
    }
    uint64_t v6 = v12;
    goto LABEL_24;
  }
  uint64_t v13 = one-time initialization token for bar;
  swift_retain();
  if (v13 != -1) {
    swift_once();
  }
  uint64_t result = static PlatformBarBackground.Backgrounds.bar;
  if (static PlatformBarBackground.Backgrounds.bar == v6)
  {
    double v8 = 0.0;
    goto LABEL_24;
  }
  uint64_t result = dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
  double v8 = 0.0;
  if (result)
  {
LABEL_24:
    char v11 = 0;
    char v15 = 0;
    double v16 = a4;
    goto LABEL_25;
  }
  char v11 = 0;
  char v15 = 1;
  double v16 = 0.0;
LABEL_25:
  *(double *)a3 = v8;
  float v17 = a4;
  *(unsigned char *)(a3 + 8) = v11;
  *(unsigned char *)(a3 + 9) = (a2 & 1) == 0;
  *(void *)(a3 + 16) = v6;
  *(float *)(a3 + 24) = v17;
  *(_WORD *)(a3 + 28) = 256;
  *(double *)(a3 + 32) = v16;
  *(unsigned char *)(a3 + 40) = v15;
  *(unsigned char *)(a3 + 41) = a2 & 1;
  return result;
}

uint64_t BarEnvironmentViewModel.visibility.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance PlatformBarBackground()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance PlatformBarBackground@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  int v4 = *(unsigned __int8 *)(v1 + 8);
  double v5 = *(double *)(v1 + 16);
  uint64_t v6 = static HorizontalAlignment.center.getter();
  uint64_t result = closure #1 in PlatformBarBackground.body.getter(v3, v4, (uint64_t)&v19, v5);
  uint64_t v8 = v19;
  char v9 = v20;
  char v10 = v21;
  uint64_t v11 = v22;
  int v12 = v23;
  char v13 = v24;
  char v14 = v25;
  uint64_t v15 = v26;
  char v16 = v27;
  char v17 = v28;
  if (v4) {
    char v18 = 4;
  }
  else {
    char v18 = 1;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 32) = v9;
  *(unsigned char *)(a1 + 33) = v10;
  *(void *)(a1 + 40) = v11;
  *(_DWORD *)(a1 + 48) = v12;
  *(unsigned char *)(a1 + 52) = v13;
  *(unsigned char *)(a1 + 53) = v14;
  *(void *)(a1 + 56) = v15;
  *(unsigned char *)(a1 + 64) = v16;
  *(unsigned char *)(a1 + 65) = v17;
  *(void *)(a1 + 72) = 1;
  *(unsigned char *)(a1 + 80) = v18;
  return result;
}

uint64_t BarEnvironmentViewModel.colorScheme.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t ObjC metadata update function for BarEnvironmentViewModel()
{
  return type metadata accessor for BarEnvironmentViewModel(0);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance BarEnvironmentViewModel@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for BarEnvironmentViewModel(0);
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t ObjC metadata update function for PrimaryBarViewModel()
{
  return type metadata accessor for PrimaryBarViewModel(0);
}

uint64_t initializeBufferWithCopyOfBuffer for PlatformBarBackground(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PlatformBarBackground(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for PlatformBarBackground(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for PlatformBarBackground()
{
  return &type metadata for PlatformBarBackground;
}

uint64_t assignWithCopy for PlatformBarUpdater.UpdateContext(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)a1;
  double v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  unsigned int v7 = *(void **)(a1 + 8);
  uint64_t v8 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v8;
  id v9 = v8;

  return a1;
}

uint64_t assignWithTake for PlatformBarUpdater.UpdateContext(uint64_t a1, _OWORD *a2)
{
  int v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for PlatformBarUpdater.UpdateContext()
{
  return &type metadata for PlatformBarUpdater.UpdateContext;
}

ValueMetadata *type metadata accessor for BarAppearanceBridge.Updates()
{
  return &type metadata for BarAppearanceBridge.Updates;
}

uint64_t storeEnumTagSinglePayload for PlatformBarUpdates(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65282 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65282 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 254;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187B5B2E0);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlatformBarUpdates()
{
  return &type metadata for PlatformBarUpdates;
}

uint64_t assignWithCopy for BarAppearanceBridge.UpdateContext(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  unsigned int v7 = *(void **)(a1 + 8);
  uint64_t v8 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v8;
  id v9 = v8;

  char v10 = (_OWORD *)(a1 + 16);
  uint64_t v11 = (_OWORD *)(a2 + 16);
  uint64_t v12 = *(unsigned __int8 *)(a2 + 24);
  if (*(unsigned char *)(a1 + 24) != 2)
  {
    if (v12 == 2)
    {
      outlined destroy of PushTarget(a1 + 16);
      long long v14 = *(_OWORD *)(a2 + 25);
      *char v10 = *v11;
      *(_OWORD *)(a1 + 25) = v14;
      goto LABEL_9;
    }
    swift_unknownObjectWeakCopyAssign();
LABEL_8:
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    uint64_t v15 = *(void *)(a2 + 32);
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
    *(void *)(a1 + 32) = v15;
    goto LABEL_9;
  }
  if (v12 != 2)
  {
    swift_unknownObjectWeakCopyInit();
    goto LABEL_8;
  }
  long long v13 = *v11;
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *char v10 = v13;
LABEL_9:
  swift_unknownObjectWeakCopyAssign();
  swift_unknownObjectWeakCopyAssign();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of PushTarget(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for BarAppearanceBridge.UpdateContext(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  uint64_t v6 = *(unsigned __int8 *)(a2 + 24);
  if (*(unsigned char *)(a1 + 24) == 2)
  {
    if (v6 != 2)
    {
      swift_unknownObjectWeakTakeInit();
LABEL_8:
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      goto LABEL_9;
    }
  }
  else
  {
    if (v6 != 2)
    {
      swift_unknownObjectWeakTakeAssign();
      goto LABEL_8;
    }
    outlined destroy of PushTarget(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
LABEL_9:
  swift_unknownObjectWeakTakeAssign();
  swift_unknownObjectWeakTakeAssign();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for BarAppearanceBridge.UpdateContext()
{
  return &type metadata for BarAppearanceBridge.UpdateContext;
}

uint64_t initializeWithCopy for BarAppearanceBridge.PlatformStorage(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  swift_unknownObjectWeakCopyInit();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

unsigned char *assignWithCopy for BarAppearanceBridge.PlatformStorage(unsigned char *a1, unsigned char *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_unknownObjectWeakCopyAssign();
  a1[16] = a2[16];
  return a1;
}

uint64_t initializeWithTake for BarAppearanceBridge.PlatformStorage(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  swift_unknownObjectWeakTakeInit();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for BarAppearanceBridge.PlatformStorage(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  swift_unknownObjectWeakTakeAssign();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for BarAppearanceBridge.PlatformStorage()
{
  return &type metadata for BarAppearanceBridge.PlatformStorage;
}

unint64_t lazy protocol witness table accessor for type BarAppearanceBridge.Updates and conformance BarAppearanceBridge.Updates()
{
  unint64_t result = lazy protocol witness table cache variable for type BarAppearanceBridge.Updates and conformance BarAppearanceBridge.Updates;
  if (!lazy protocol witness table cache variable for type BarAppearanceBridge.Updates and conformance BarAppearanceBridge.Updates)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BarAppearanceBridge.Updates and conformance BarAppearanceBridge.Updates);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BarAppearanceBridge.Updates and conformance BarAppearanceBridge.Updates;
  if (!lazy protocol witness table cache variable for type BarAppearanceBridge.Updates and conformance BarAppearanceBridge.Updates)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BarAppearanceBridge.Updates and conformance BarAppearanceBridge.Updates);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BarAppearanceBridge.Updates and conformance BarAppearanceBridge.Updates;
  if (!lazy protocol witness table cache variable for type BarAppearanceBridge.Updates and conformance BarAppearanceBridge.Updates)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BarAppearanceBridge.Updates and conformance BarAppearanceBridge.Updates);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BarAppearanceBridge.Updates and conformance BarAppearanceBridge.Updates;
  if (!lazy protocol witness table cache variable for type BarAppearanceBridge.Updates and conformance BarAppearanceBridge.Updates)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BarAppearanceBridge.Updates and conformance BarAppearanceBridge.Updates);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in PlatformBarBackground()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for VStack<TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>>()
{
  if (!lazy cache variable for type metadata for VStack<TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>>)
  {
    type metadata accessor for EnvironmentObjectKey<PrimaryBarViewModel>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??), MEMORY[0x1E4F41850]);
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)> and conformance TupleView<A>();
    unint64_t v0 = type metadata accessor for VStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>>);
    }
  }
}

void type metadata accessor for (ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??))
  {
    type metadata accessor for EnvironmentObjectKey<PrimaryBarViewModel>(255, &lazy cache variable for type metadata for ModifiedContent<Divider, OpacityRendererEffect>??, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<Divider, OpacityRendererEffect>?, MEMORY[0x1E4FBB718]);
    type metadata accessor for _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??));
    }
  }
}

void type metadata accessor for ModifiedContent<Divider, OpacityRendererEffect>?()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Divider, OpacityRendererEffect>?)
  {
    type metadata accessor for ModifiedContent<Divider, OpacityRendererEffect>(255, &lazy cache variable for type metadata for ModifiedContent<Divider, OpacityRendererEffect>, (uint64_t)&type metadata for Divider, MEMORY[0x1E4F40808], MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Divider, OpacityRendererEffect>?);
    }
  }
}

void type metadata accessor for _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>()
{
  if (!lazy cache variable for type metadata for _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>)
  {
    type metadata accessor for ModifiedContent<Divider, OpacityRendererEffect>(255, &lazy cache variable for type metadata for _OpacityShapeStyle<AnyShapeStyle>, MEMORY[0x1E4F3F700], MEMORY[0x1E4F3F6F8], MEMORY[0x1E4F403C0]);
    lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    lazy protocol witness table accessor for type _OpacityShapeStyle<AnyShapeStyle> and conformance _OpacityShapeStyle<A>();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _OpacityShapeStyle<AnyShapeStyle> and conformance _OpacityShapeStyle<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _OpacityShapeStyle<AnyShapeStyle> and conformance _OpacityShapeStyle<A>;
  if (!lazy protocol witness table cache variable for type _OpacityShapeStyle<AnyShapeStyle> and conformance _OpacityShapeStyle<A>)
  {
    type metadata accessor for ModifiedContent<Divider, OpacityRendererEffect>(255, &lazy cache variable for type metadata for _OpacityShapeStyle<AnyShapeStyle>, MEMORY[0x1E4F3F700], MEMORY[0x1E4F3F6F8], MEMORY[0x1E4F403C0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _OpacityShapeStyle<AnyShapeStyle> and conformance _OpacityShapeStyle<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)> and conformance TupleView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)> and conformance TupleView<A>)
  {
    type metadata accessor for EnvironmentObjectKey<PrimaryBarViewModel>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??), MEMORY[0x1E4F41850]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)> and conformance TupleView<A>);
  }
  return result;
}

uint64_t specialized Set._Variant.remove(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    id v5 = a1;
    char v6 = __CocoaSet.contains(_:)();

    if (v6)
    {
      uint64_t v7 = specialized Set._Variant._migrateToNative(_:removing:)();
      swift_bridgeObjectRelease();
      return v7;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  Swift::Int v8 = *(void *)(v4 + 40);
  swift_bridgeObjectRetain();
  Swift::Int v9 = NSObject._rawHashValue(seed:)(v8);
  uint64_t v10 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v11 = v9 & ~v10;
  if (((*(void *)(v4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    goto LABEL_12;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext);
  id v12 = *(id *)(*(void *)(v4 + 48) + 8 * v11);
  char v13 = static NSObject.== infix(_:_:)();

  if ((v13 & 1) == 0)
  {
    uint64_t v14 = ~v10;
    do
    {
      unint64_t v11 = (v11 + 1) & v14;
      if (((*(void *)(v4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
        goto LABEL_12;
      }
      id v15 = *(id *)(*(void *)(v4 + 48) + 8 * v11);
      char v16 = static NSObject.== infix(_:_:)();
    }
    while ((v16 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v18 = *v2;
  uint64_t v20 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    uint64_t v18 = v20;
  }
  uint64_t v7 = *(void *)(*(void *)(v18 + 48) + 8 * v11);
  specialized _NativeSet._delete(at:)(v11);
  *uint64_t v2 = v20;
  swift_bridgeObjectRelease();
  return v7;
}

Swift::Int specialized Set._Variant.remove(_:)@<X0>(Swift::UInt a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int result = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = result & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_9:
    *(void *)a2 = 0;
    char v13 = 1;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (*(void *)(v9 + 8 * v8) != a1)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_9;
      }
    }
    while (*(void *)(v9 + 8 * v8) != a1);
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *v2;
  uint64_t v14 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    uint64_t v12 = v14;
  }
  *(void *)a2 = *(void *)(*(void *)(v12 + 48) + 8 * v8);
  specialized _NativeSet._delete(at:)(v8);
  *uint64_t v2 = v14;
  Swift::Int result = swift_bridgeObjectRelease();
  char v13 = 0;
LABEL_10:
  *(unsigned char *)(a2 + 8) = v13;
  return result;
}

Swift::Int specialized Set._Variant.remove(_:)@<X0>(Swift::UInt a1@<X0>, Swift::UInt a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  Swift::Int result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = result & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    while (1)
    {
      uint64_t v12 = (void *)(*(void *)(v7 + 48) + 16 * v10);
      if (v12[1] == a2 && *v12 == a1) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        goto LABEL_8;
      }
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *v3;
    uint64_t v19 = *v3;
    *int v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      uint64_t v15 = v19;
    }
    char v16 = (uint64_t *)(*(void *)(v15 + 48) + 16 * v10);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    *a3 = v18;
    a3[1] = v17;
    specialized _NativeSet._delete(at:)(v10);
    *int v3 = v19;
    return swift_bridgeObjectRelease();
  }
  else
  {
LABEL_8:
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t specialized Set._Variant._migrateToNative(_:removing:)()
{
  uint64_t v1 = v0;
  swift_bridgeObjectRelease();
  uint64_t v2 = __CocoaSet.count.getter();
  uint64_t v3 = swift_unknownObjectRetain();
  Swift::Int v4 = specialized _NativeSet.init(_:capacity:)(v3, v2);
  Swift::Int v16 = v4;
  Swift::Int v5 = *(void *)(v4 + 40);
  swift_retain();
  Swift::Int v6 = NSObject._rawHashValue(seed:)(v5);
  uint64_t v7 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v8 = v6 & ~v7;
  if ((*(void *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext);
    id v9 = *(id *)(*(void *)(v4 + 48) + 8 * v8);
    char v10 = static NSObject.== infix(_:_:)();

    if (v10)
    {
LABEL_6:
      swift_release();
      uint64_t v14 = *(void *)(*(void *)(v4 + 48) + 8 * v8);
      specialized _NativeSet._delete(at:)(v8);
      if (static NSObject.== infix(_:_:)())
      {
        *uint64_t v1 = v16;
        return v14;
      }
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v7;
      while (1)
      {
        unint64_t v8 = (v8 + 1) & v11;
        if (((*(void *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
          break;
        }
        id v12 = *(id *)(*(void *)(v4 + 48) + 8 * v8);
        char v13 = static NSObject.== infix(_:_:)();

        if (v13) {
          goto LABEL_6;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

void specialized _NativeSet._delete(at:)(int64_t a1, uint64_t (*a2)(void), unint64_t *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v42 = a4;
  uint64_t v43 = a5;
  uint64_t v41 = a3;
  uint64_t v7 = a2(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  char v10 = (char *)&v37 - v9;
  uint64_t v11 = *v5;
  uint64_t v12 = *v5 + 56;
  uint64_t v13 = -1 << *(unsigned char *)(*v5 + 32);
  unint64_t v14 = (a1 + 1) & ~v13;
  if (((1 << v14) & *(void *)(v12 + 8 * (v14 >> 6))) != 0)
  {
    uint64_t v37 = v5;
    uint64_t v15 = ~v13;
    swift_retain();
    uint64_t v16 = _HashTable.previousHole(before:)();
    uint64_t v17 = v11;
    if ((*(void *)(v12 + 8 * (v14 >> 6)) & (1 << v14)) != 0)
    {
      unint64_t v39 = (v16 + 1) & v15;
      uint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
      uint64_t v18 = v8 + 16;
      uint64_t v38 = v19;
      uint64_t v44 = *(void *)(v18 + 56);
      uint64_t v40 = v18;
      uint64_t v20 = (void (**)(char *, uint64_t))(v18 - 8);
      do
      {
        uint64_t v21 = v12;
        int64_t v22 = v44 * v14;
        v38(v10, *(void *)(v17 + 48) + v44 * v14, v7);
        uint64_t v23 = v17;
        _s10Foundation9IndexPathVACSQAAWlTm_0(v41, v42);
        uint64_t v24 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v20)(v10, v7);
        unint64_t v25 = v24 & v15;
        if (a1 >= (uint64_t)v39)
        {
          if (v25 >= v39 && a1 >= (uint64_t)v25)
          {
LABEL_16:
            uint64_t v17 = v23;
            uint64_t v28 = *(void *)(v23 + 48);
            int64_t v29 = v44 * a1;
            unint64_t v30 = v28 + v44 * a1;
            unint64_t v31 = v28 + v22 + v44;
            if (v44 * a1 < v22 || v30 >= v31)
            {
              swift_arrayInitWithTakeFrontToBack();
              a1 = v14;
            }
            else
            {
              a1 = v14;
              if (v29 != v22)
              {
                swift_arrayInitWithTakeBackToFront();
                a1 = v14;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v25 >= v39 || a1 >= (uint64_t)v25)
        {
          goto LABEL_16;
        }
        uint64_t v17 = v23;
LABEL_5:
        unint64_t v14 = (v14 + 1) & v15;
        uint64_t v12 = v21;
      }
      while (((*(void *)(v21 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
    }
    *(void *)(v12 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    swift_release();
    Swift::Int v5 = v37;
  }
  else
  {
    *(void *)(v12 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v33 = *v5;
  uint64_t v34 = *(void *)(*v5 + 16);
  BOOL v35 = __OFSUB__(v34, 1);
  uint64_t v36 = v34 - 1;
  if (v35)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v33 + 16) = v36;
    ++*(_DWORD *)(v33 + 36);
  }
}

uint64_t specialized static PlatformBarUpdates.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  int v2 = a1[1];
  int v3 = a2[1];
  if (v2 == 2)
  {
    if (v3 != 2) {
      return 0;
    }
  }
  else
  {
    int v5 = (v3 ^ v2) & 1;
    if (v3 == 2 || v5 != 0) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_187B5D324()
{
  return swift_deallocObject();
}

id partial apply for closure #2 in BarAppearanceBridge.updateTabBarVisibility(_:tabBarController:)()
{
  return closure #2 in BarAppearanceBridge.updateTabBarVisibility(_:tabBarController:)(*(void **)(v0 + 16), *(unsigned int *)(v0 + 24));
}

id partial apply for closure #1 in BarAppearanceBridge.updateTabBarVisibility(_:tabBarController:)()
{
  return closure #1 in BarAppearanceBridge.updateTabBarVisibility(_:tabBarController:)(*(void **)(v0 + 16), *(unsigned int *)(v0 + 24));
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>>, _SafeAreaRegionsIgnoringLayout>();
    _s10Foundation9IndexPathVACSQAAWlTm_0(&lazy protocol witness table cache variable for type VStack<TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>> and conformance VStack<A>, (void (*)(uint64_t))type metadata accessor for VStack<TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>>, _SafeAreaRegionsIgnoringLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>>, _SafeAreaRegionsIgnoringLayout>)
  {
    type metadata accessor for VStack<TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>>, _SafeAreaRegionsIgnoringLayout>);
    }
  }
}

ValueMetadata *type metadata accessor for SystemTextEditorStyle()
{
  return &type metadata for SystemTextEditorStyle;
}

uint64_t associated type witness table accessor for TextEditorStyle.Body : View in SystemTextEditorStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in SystemTextEditorStyle.makeBody(configuration:)(uint64_t result)
{
  if (!*(unsigned char *)(result + 8)) {
    *(unsigned char *)(result + 8) = 1;
  }
  return result;
}

uint64_t protocol witness for TextEditorStyle.makeBody(configuration:) in conformance SystemTextEditorStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UIKitTextEditor(0);
  MEMORY[0x1F4188790](v4 - 8);
  Swift::Int v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>();
  uint64_t v8 = v7 - 8;
  MEMORY[0x1F4188790](v7);
  char v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI28TextEditorStyleConfigurationVWOcTm_0(a1, (uint64_t)v6, type metadata accessor for TextEditorStyleConfiguration);
  uint64_t KeyPath = swift_getKeyPath();
  _s7SwiftUI28TextEditorStyleConfigurationVWOcTm_0((uint64_t)v6, (uint64_t)v10, type metadata accessor for UIKitTextEditor);
  uint64_t v12 = &v10[*(int *)(v8 + 44)];
  *(void *)uint64_t v12 = KeyPath;
  unsigned char v12[8] = 0;
  outlined destroy of UIKitTextEditor((uint64_t)v6, type metadata accessor for UIKitTextEditor);
  uint64_t v13 = swift_getKeyPath();
  _s7SwiftUI28TextEditorStyleConfigurationVWOcTm_0((uint64_t)v10, a2, (uint64_t (*)(void))type metadata accessor for ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>);
  type metadata accessor for ModifiedContent<ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>, _EnvironmentKeyTransformModifier<ScrollContentBackground>>();
  uint64_t v15 = (uint64_t *)(a2 + *(int *)(v14 + 36));
  *uint64_t v15 = v13;
  v15[1] = (uint64_t)closure #1 in SystemTextEditorStyle.makeBody(configuration:);
  void v15[2] = 0;
  return outlined destroy of UIKitTextEditor((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>);
}

void type metadata accessor for ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>)
  {
    type metadata accessor for UIKitTextEditor(255);
    type metadata accessor for _EnvironmentKeyWritingModifier<TextEditorBorderStyle>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextEditorBorderStyle>, (uint64_t)&type metadata for TextEditorBorderStyle, MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>);
    }
  }
}

uint64_t _s7SwiftUI28TextEditorStyleConfigurationVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for ModifiedContent<ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>, _EnvironmentKeyTransformModifier<ScrollContentBackground>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>, _EnvironmentKeyTransformModifier<ScrollContentBackground>>)
  {
    type metadata accessor for ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<TextEditorBorderStyle>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<ScrollContentBackground>, (uint64_t)&type metadata for ScrollContentBackground, MEMORY[0x1E4F41280]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>, _EnvironmentKeyTransformModifier<ScrollContentBackground>>);
    }
  }
}

void type metadata accessor for _EnvironmentKeyWritingModifier<TextEditorBorderStyle>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined destroy of UIKitTextEditor(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>, _EnvironmentKeyTransformModifier<ScrollContentBackground>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>, _EnvironmentKeyTransformModifier<ScrollContentBackground>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>, _EnvironmentKeyTransformModifier<ScrollContentBackground>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>, _EnvironmentKeyTransformModifier<ScrollContentBackground>>();
    lazy protocol witness table accessor for type ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<ScrollContentBackground> and conformance _EnvironmentKeyTransformModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>, _EnvironmentKeyTransformModifier<ScrollContentBackground>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TextEditorBorderStyle> and conformance _EnvironmentKeyWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TextEditorBorderStyle> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TextEditorBorderStyle> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TextEditorBorderStyle> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<TextEditorBorderStyle>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextEditorBorderStyle>, (uint64_t)&type metadata for TextEditorBorderStyle, MEMORY[0x1E4F411E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TextEditorBorderStyle> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t key path setter for EnvironmentValues.navigationEventHandlers : EnvironmentValues(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  outlined copy of AppIntentExecutor?(*a1);
  outlined copy of AppIntentExecutor?(v3);
  specialized EnvironmentValues._set<A>(_:for:)(v1, v2, v3);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);

  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v3);
}

uint64_t EnvironmentValues.navigationRequiredCompactColumn.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationCompactColumnKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationCompactColumnKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationCompactColumnKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationCompactColumnKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationCompactColumnKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationCompactColumnKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path setter for EnvironmentValues.navigationRequiredCompactColumn : EnvironmentValues(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16);
  outlined copy of Binding<NavigationSplitViewColumn>?(*(void *)a1, v2);
  specialized EnvironmentValues.subscript.setter(v1, v2, v3);

  return outlined consume of Binding<NavigationSplitViewColumn>?(v1, v2);
}

uint64_t View.onNavigationSplitViewExpand_v1(action:)(uint64_t a1, uint64_t a2)
{
  return View.onNavigationSplitViewExpand_v1(action:)(a1, a2);
}

{
  uint64_t v4;
  uint64_t vars8;

  swift_getKeyPath();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  swift_retain();
  View.transformEnvironment<A>(_:transform:)();
  swift_release();

  return swift_release();
}

uint64_t sub_187B5DC90@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.navigationEventHandlers.getter();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return result;
}

uint64_t sub_187B5DCD4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.onNavigationSplitViewExpand_v1(action:)(uint64_t *a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v5 = *a1;
  swift_retain();
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v5);
  *a1 = v4;
  a1[1] = v3;
  return result;
}

uint64_t View.onNavigation_v1(action:)(uint64_t a1, uint64_t a2)
{
  return View.onNavigationSplitViewExpand_v1(action:)(a1, a2);
}

uint64_t partial apply for closure #1 in View.onNavigation_v1(action:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(a1 + 16);
  swift_retain();
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v5);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v3;
  return result;
}

uint64_t View.navigationSplitViewCompactColumn_v1(_:)()
{
  return swift_release();
}

uint64_t NavigationUpdateEvent.action.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of NavigationUpdateEvent.Action(v1, a1);
}

uint64_t outlined init with copy of NavigationUpdateEvent.Action(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t NavigationUpdateEvent.action.setter(uint64_t a1)
{
  return outlined assign with take of NavigationUpdateEvent.Action(a1, v1);
}

uint64_t outlined assign with take of NavigationUpdateEvent.Action(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t (*NavigationUpdateEvent.action.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void NavigationUpdateEvent.column.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 57);
}

unsigned char *NavigationUpdateEvent.column.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 57) = *result;
  return result;
}

uint64_t (*NavigationUpdateEvent.column.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t destroy for NavigationUpdateEvent(uint64_t result)
{
  if (*(unsigned __int8 *)(result + 56) - 1 <= 2) {
    return __swift_destroy_boxed_opaque_existential_1(result);
  }
  return result;
}

uint64_t initializeWithCopy for NavigationUpdateEvent(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 56);
  switch(v4)
  {
    case 3:
      long long v6 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v6;
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(unsigned char *)(a1 + 56) = 3;
      break;
    case 2:
      long long v7 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v7;
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1, a2);
      *(unsigned char *)(a1 + 56) = 2;
      break;
    case 1:
      long long v5 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v5;
      (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
      *(unsigned char *)(a1 + 56) = 1;
      break;
    default:
      long long v8 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v8;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
      break;
  }
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  return a1;
}

uint64_t assignWithCopy for NavigationUpdateEvent(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    outlined destroy of NavigationUpdateEvent.Action(a1);
    int v4 = *((unsigned __int8 *)a2 + 56);
    switch(v4)
    {
      case 3:
        uint64_t v6 = *((void *)a2 + 3);
        *(void *)(a1 + 24) = v6;
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        (**(void (***)(uint64_t, long long *))(v6 - 8))(a1, a2);
        *(unsigned char *)(a1 + 56) = 3;
        break;
      case 2:
        uint64_t v7 = *((void *)a2 + 3);
        *(void *)(a1 + 24) = v7;
        uint64_t v8 = *((void *)a2 + 6);
        *(_OWORD *)(a1 + 32) = a2[2];
        *(void *)(a1 + 48) = v8;
        (**(void (***)(uint64_t, long long *))(v7 - 8))(a1, a2);
        *(unsigned char *)(a1 + 56) = 2;
        break;
      case 1:
        uint64_t v5 = *((void *)a2 + 3);
        *(void *)(a1 + 24) = v5;
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        (**(void (***)(uint64_t, long long *))(v5 - 8))(a1, a2);
        *(unsigned char *)(a1 + 56) = 1;
        break;
      default:
        long long v9 = *a2;
        long long v10 = a2[1];
        long long v11 = a2[2];
        *(_OWORD *)(a1 + 41) = *(long long *)((char *)a2 + 41);
        *(_OWORD *)(a1 + 16) = v10;
        *(_OWORD *)(a1 + 32) = v11;
        *(_OWORD *)a1 = v9;
        break;
    }
  }
  *(unsigned char *)(a1 + 57) = *((unsigned char *)a2 + 57);
  return a1;
}

uint64_t outlined destroy of NavigationUpdateEvent.Action(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy58_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for NavigationUpdateEvent(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of NavigationUpdateEvent.Action(a1);
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  }
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationUpdateEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 58)) {
    return (*(_DWORD *)a1 + 253);
  }
  if (*(unsigned __int8 *)(a1 + 57) <= 3u) {
    int v3 = 3;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 57);
  }
  int v4 = v3 - 4;
  if (*(unsigned __int8 *)(a1 + 57) < 3u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationUpdateEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(void *)__n128 result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 58) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 58) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 57) = a2 + 3;
    }
  }
  return result;
}

uint64_t destroy for NavigationUpdateEvent.Action(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 56);
  if (v1 >= 4) {
    unsigned int v1 = *(_DWORD *)result + 4;
  }
  if (v1 - 1 <= 2) {
    return __swift_destroy_boxed_opaque_existential_1(result);
  }
  return result;
}

uint64_t initializeWithCopy for NavigationUpdateEvent.Action(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 56);
  if (v3 >= 4) {
    unsigned int v3 = *(_DWORD *)a2 + 4;
  }
  switch(v3)
  {
    case 0u:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 56) = 0;
      return a1;
    case 1u:
      long long v5 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v5;
      (**(void (***)(uint64_t))(v5 - 8))(a1);
      char v6 = 1;
      goto LABEL_9;
    case 2u:
      long long v7 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v7;
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      (**(void (***)(uint64_t))(v7 - 8))(a1);
      char v6 = 2;
      goto LABEL_9;
    case 3u:
      long long v8 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v8;
      (**(void (***)(uint64_t))(v8 - 8))(a1);
      char v6 = 3;
LABEL_9:
      *(unsigned char *)(a1 + 56) = v6;
      break;
    default:
      long long v4 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v4;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
      break;
  }
  return a1;
}

uint64_t assignWithCopy for NavigationUpdateEvent.Action(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 56);
    if (v4 >= 4) {
      unsigned int v4 = *(_DWORD *)a1 + 4;
    }
    if (v4 - 1 <= 2) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 56);
    if (v5 >= 4) {
      unsigned int v5 = *(_DWORD *)a2 + 4;
    }
    switch(v5)
    {
      case 0u:
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 56) = 0;
        return a1;
      case 1u:
        uint64_t v9 = *((void *)a2 + 3);
        *(void *)(a1 + 24) = v9;
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        (**(void (***)(uint64_t, long long *))(v9 - 8))(a1, a2);
        char v10 = 1;
        goto LABEL_14;
      case 2u:
        uint64_t v11 = *((void *)a2 + 3);
        *(void *)(a1 + 24) = v11;
        uint64_t v12 = *((void *)a2 + 6);
        *(_OWORD *)(a1 + 32) = a2[2];
        *(void *)(a1 + 48) = v12;
        (**(void (***)(uint64_t, long long *))(v11 - 8))(a1, a2);
        char v10 = 2;
        goto LABEL_14;
      case 3u:
        uint64_t v13 = *((void *)a2 + 3);
        *(void *)(a1 + 24) = v13;
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        (**(void (***)(uint64_t, long long *))(v13 - 8))(a1, a2);
        char v10 = 3;
LABEL_14:
        *(unsigned char *)(a1 + 56) = v10;
        break;
      default:
        long long v6 = *a2;
        long long v7 = a2[1];
        long long v8 = a2[2];
        *(_OWORD *)(a1 + 41) = *(long long *)((char *)a2 + 41);
        *(_OWORD *)(a1 + 16) = v7;
        *(_OWORD *)(a1 + 32) = v8;
        *(_OWORD *)a1 = v6;
        break;
    }
  }
  return a1;
}

uint64_t assignWithTake for NavigationUpdateEvent.Action(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 56);
    if (v4 >= 4) {
      unsigned int v4 = *(_DWORD *)a1 + 4;
    }
    if (v4 - 1 <= 2) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 56);
    if (v5 >= 4) {
      unsigned int v5 = *(_DWORD *)a2 + 4;
    }
    switch(v5)
    {
      case 0u:
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 56) = 0;
        return a1;
      case 1u:
        long long v7 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v7;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        char v8 = 1;
        goto LABEL_14;
      case 2u:
        long long v9 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v9;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        char v8 = 2;
        goto LABEL_14;
      case 3u:
        long long v10 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v10;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        char v8 = 3;
LABEL_14:
        *(unsigned char *)(a1 + 56) = v8;
        break;
      default:
        long long v6 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v6;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationUpdateEvent.Action(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 57)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 >= 5) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for NavigationUpdateEvent.Action(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_OWORD *)(result + 41) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_DWORD *)__n128 result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 57) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 56) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for NavigationUpdateEvent.Action(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 56);
  if (result >= 4) {
    return (*(_DWORD *)a1 + 4);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for NavigationUpdateEvent.Action(uint64_t result, unsigned int a2)
{
  if (a2 > 3)
  {
    *(void *)(result + 48) = 0;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_DWORD *)uint64_t result = a2 - 4;
    LOBYTE(a2) = 4;
  }
  *(unsigned char *)(result + 56) = a2;
  return result;
}

ValueMetadata *type metadata accessor for NavigationUpdateEvent.Action()
{
  return &type metadata for NavigationUpdateEvent.Action;
}

uint64_t sub_187B5E98C()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<NavigationEventHandlers> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<NavigationEventHandlers> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<NavigationEventHandlers> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyTransformModifier<NavigationEventHandlers>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<NavigationEventHandlers>, (uint64_t)&type metadata for NavigationEventHandlers, MEMORY[0x1E4F41280]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<NavigationEventHandlers> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

uint64_t sub_187B5EA98()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Binding<NavigationSplitViewColumn>?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Binding<NavigationSplitViewColumn>?>)
  {
    type metadata accessor for Binding<NavigationSplitViewColumn>?();
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Binding<NavigationSplitViewColumn>?>);
    }
  }
}

void type metadata accessor for Binding<NavigationSplitViewColumn>?()
{
  if (!lazy cache variable for type metadata for Binding<NavigationSplitViewColumn>?)
  {
    type metadata accessor for _EnvironmentKeyTransformModifier<NavigationEventHandlers>(255, (unint64_t *)&lazy cache variable for type metadata for Binding<NavigationSplitViewColumn>, (uint64_t)&type metadata for NavigationSplitViewColumn, MEMORY[0x1E4F41638]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<NavigationSplitViewColumn>?);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Binding<NavigationSplitViewColumn>?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Binding<NavigationSplitViewColumn>?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Binding<NavigationSplitViewColumn>?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Binding<NavigationSplitViewColumn>?>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Binding<NavigationSplitViewColumn>?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

unint64_t implicit closure #2 in UpdateNavigationEventHandlers.updateValue()()
{
  return 0xD00000000000001ELL;
}

ValueMetadata *type metadata accessor for NavigationEventHandlersKey()
{
  return &type metadata for NavigationEventHandlersKey;
}

ValueMetadata *type metadata accessor for NavigationCompactColumnKey()
{
  return &type metadata for NavigationCompactColumnKey;
}

ValueMetadata *type metadata accessor for UpdateNavigationEventHandlers()
{
  return &type metadata for UpdateNavigationEventHandlers;
}

ValueMetadata *type metadata accessor for PlatformItemListTextFieldStyle()
{
  return &type metadata for PlatformItemListTextFieldStyle;
}

uint64_t associated type witness table accessor for TextFieldStyle._Body : View in PlatformItemListTextFieldStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in PlatformItemListTextFieldStyle._body(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  outlined init with copy of TextField<_TextFieldStyleLabel>(a2, a3);
  uint64_t v5 = a3 + *(int *)(type metadata accessor for PlatformItemListTextFieldStyle.PlatformItemListWriter() + 20);

  return outlined init with copy of PlatformItem(a1, v5);
}

uint64_t static PlatformItemListTextFieldStyle.PlatformItemListWriter._makeView(view:inputs:)()
{
  return swift_release();
}

uint64_t implicit closure #1 in static PlatformItemListTextFieldStyle.PlatformItemListWriter._makeView(view:inputs:)(uint64_t a1)
{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  outlined retain of PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems(a1);
  type metadata accessor for (_:)();
  lazy protocol witness table accessor for type PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems and conformance PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems();
  uint64_t v2 = Attribute.init<A>(body:value:flags:update:)();
  outlined release of PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems(a1);
  return v2;
}

id PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems.coordinator.getter()
{
  type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  MEMORY[0x1F4188790](v1);
  unsigned int v3 = (char *)&v17 - v2;
  unsigned int v4 = *(void **)(v0 + 24);
  if (v4)
  {
    id v5 = *(id *)(v0 + 24);
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    outlined init with copy of TextField<_TextFieldStyleLabel>(Value, (uint64_t)v3);
    long long v7 = (objc_class *)type metadata accessor for PlatformTextFieldCoordinator(0);
    char v8 = objc_allocWithZone(v7);
    long long v17 = xmmword_18834FC50;
    *(_OWORD *)&v8[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment] = xmmword_18834FC50;
    long long v9 = &v8[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_label];
    _s7SwiftUI12PlatformItemV14PrimaryContentVSgWOi0_((uint64_t)v19);
    *((_OWORD *)v9 + 15) = 0u;
    *((_OWORD *)v9 + 16) = 0u;
    long long v10 = v17;
    *((_OWORD *)v9 + 17) = 0u;
    *((_OWORD *)v9 + 18) = v10;
    *(void *)long long v9 = &outlined read-only object #0 of PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems.coordinator.getter;
    *((void *)v9 + 1) = 0;
    *((_DWORD *)v9 + 4) = 0;
    _s7SwiftUI12PlatformItemV14PrimaryContentVSgWObTm_0((uint64_t)v19, (uint64_t)(v9 + 24), (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
    *((void *)v9 + 38) = 0;
    v9[312] = 1;
    *((void *)v9 + 40) = 0;
    *((void *)v9 + 41) = 0;
    uint64_t v11 = &v8[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_selectionStorage];
    *(_OWORD *)uint64_t v11 = 0u;
    *((_OWORD *)v11 + 1) = 0u;
    v11[32] = 1;
    v8[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isViewUpdating] = 0;
    uint64_t v12 = &v8[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_field];
    *(void *)uint64_t v12 = 0;
    unsigned char v12[8] = -1;
    v8[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_ignoreNextUpdate] = 0;
    v8[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isUserEditing] = 0;
    outlined init with copy of TextField<_TextFieldStyleLabel>((uint64_t)v3, (uint64_t)&v8[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_configuration]);
    *(_OWORD *)uint64_t v11 = 0u;
    *((_OWORD *)v11 + 1) = 0u;
    v11[32] = 1;
    v18.receiver = v8;
    v18.super_class = v7;
    id v13 = objc_msgSendSuper2(&v18, sel_init);
    outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v3);
    uint64_t v14 = *(void **)(v0 + 24);
    id v5 = v13;

    unsigned int v4 = 0;
    *(void *)(v0 + 24) = v13;
  }
  id v15 = v4;
  return v5;
}

uint64_t PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems.updateValue()()
{
  v65[42] = *MEMORY[0x1E4F143B8];
  type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  MEMORY[0x1F4188790](v1);
  uint64_t v50 = (uint64_t)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  id v5 = (char *)&v50 - v4;
  MEMORY[0x1F4188790](v6);
  char v8 = (char *)&v50 - v7;
  uint64_t v55 = (char *)PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems.coordinator.getter();
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of PlatformItem(Value, (uint64_t)v65);
  uint64_t v10 = AGGraphGetValue();
  uint64_t v52 = v11;
  outlined init with copy of TextField<_TextFieldStyleLabel>(v10, (uint64_t)v8);
  uint64_t v12 = (uint64_t *)AGGraphGetValue();
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  if (v15)
  {
    swift_retain();
    swift_retain_n();
    int v59 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
    swift_release();
  }
  else
  {
    swift_retain();
    swift_retain();
    int v59 = 0;
  }
  uint64_t v16 = AGGraphGetValue();
  outlined init with copy of TextField<_TextFieldStyleLabel>(v16, (uint64_t)v5);
  uint64_t v18 = *((void *)v5 + 9);
  uint64_t v17 = *((void *)v5 + 10);
  uint64_t v19 = *((void *)v5 + 11);
  uint64_t v20 = *((void *)v5 + 12);
  uint64_t v22 = *((void *)v5 + 13);
  uint64_t v21 = *((void *)v5 + 14);
  uint64_t v24 = *((void *)v5 + 15);
  uint64_t v23 = *((void *)v5 + 16);
  uint64_t v26 = *((void *)v5 + 17);
  uint64_t v25 = *((void *)v5 + 18);
  uint64_t v28 = *((void *)v5 + 19);
  uint64_t v27 = *((void *)v5 + 20);
  uint64_t v29 = *((void *)v5 + 21);
  char v30 = v5[180];
  uint64_t v56 = v8;
  uint64_t v57 = v0;
  uint64_t v53 = v14;
  uint64_t v54 = v13;
  if (v30)
  {
    int v31 = *((_DWORD *)v5 + 44);
    *(void *)&v60[0] = v18;
    *((void *)&v60[0] + 1) = v17;
    *(void *)&v60[1] = v19;
    *((void *)&v60[1] + 1) = v20;
    *(void *)&v60[2] = v22;
    *((void *)&v60[2] + 1) = v21;
    *(void *)&v60[3] = v24;
    *((void *)&v60[3] + 1) = v23;
    *(void *)&v60[4] = v26;
    *((void *)&v60[4] + 1) = v25;
    *(void *)&v60[5] = v28;
    *((void *)&v60[5] + 1) = v27;
    LOBYTE(v60[6]) = v29 & 1;
    DWORD1(v60[6]) = HIDWORD(v29);
    WORD4(v60[6]) = v31 & 0xFF01;
    BYTE10(v60[6]) = BYTE2(v31) & 1;
    BYTE11(v60[6]) = HIBYTE(v31) & 1;
    type metadata accessor for Binding<TextFieldState>(0, &lazy cache variable for type metadata for Binding<TextFieldState>, (uint64_t)&type metadata for TextFieldState, MEMORY[0x1E4F41638]);
    MEMORY[0x18C113DA0](&v61);
  }
  else
  {
    *(void *)&v60[0] = v18;
    *((void *)&v60[0] + 1) = v17;
    *(void *)&v60[1] = v19;
    *((void *)&v60[1] + 1) = v20;
    *(void *)&v60[2] = v22;
    *((void *)&v60[2] + 1) = v21;
    *(void *)&v60[3] = v24;
    *((void *)&v60[3] + 1) = v23;
    *(void *)&v60[4] = v26;
    *((void *)&v60[4] + 1) = v25;
    LOBYTE(v60[5]) = v28 & 1;
    DWORD1(v60[5]) = HIDWORD(v28);
    WORD4(v60[5]) = v27 & 0xFF01;
    BYTE10(v60[5]) = BYTE2(v27) & 1;
    BYTE11(v60[5]) = BYTE3(v27) & 1;
    *(void *)&v60[6] = v29;
    type metadata accessor for Binding<TextFieldState>(0, (unint64_t *)&lazy cache variable for type metadata for State<TextFieldState>, (uint64_t)&type metadata for TextFieldState, MEMORY[0x1E4F41580]);
    State.wrappedValue.getter();
  }
  uint64_t v51 = v61;
  uint64_t v32 = v63;
  uint64_t v58 = v62;
  uint64_t v33 = v64;
  outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v5);
  outlined consume of TextFieldState.FormatActions?(v32);
  outlined consume of TextFieldState.FormatActions?(v33);
  uint64_t v34 = v57;
  BOOL v35 = *(void **)(v57 + 40);
  if (v35)
  {
    int v36 = v52;
    uint64_t v38 = v55;
    uint64_t v37 = (uint64_t)v56;
    if (*(uint64_t (**)(void **))(v57 + 32) == v51 && v35 == v58)
    {
      unint64_t v39 = v51;
      int v40 = 1;
      if (v52) {
        goto LABEL_18;
      }
    }
    else
    {
      unint64_t v39 = v51;
      int v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (v36) {
        goto LABEL_18;
      }
    }
  }
  else
  {
    unint64_t v39 = v51;
    int v36 = v52;
    int v40 = 0;
    uint64_t v38 = v55;
    uint64_t v37 = (uint64_t)v56;
    if (v52) {
      goto LABEL_18;
    }
  }
  type metadata accessor for (_:)();
  if (AGGraphGetOutputValue())
  {
    if (v59) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v41 = v50;
  outlined init with copy of TextField<_TextFieldStyleLabel>(v37, v50);
  uint64_t v42 = (uint64_t)&v38[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_configuration];
  swift_beginAccess();
  outlined assign with take of TextField<_TextFieldStyleLabel>(v41, v42);
  swift_endAccess();
  outlined init with copy of PlatformItem((uint64_t)v65, (uint64_t)v60);
  uint64_t v43 = (uint64_t)&v38[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_label];
  swift_beginAccess();
  outlined assign with take of PlatformItem((uint64_t)v60, v43);
  swift_endAccess();
  if (v59)
  {
LABEL_20:
    PropertyList.Tracker.reset()();
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    uint64_t v44 = *(void *)&v38[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment];
    *(_OWORD *)&v38[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment] = v60[0];
    outlined consume of EnvironmentValues?(v44);
    goto LABEL_21;
  }
LABEL_19:
  type metadata accessor for (_:)();
  if (!AGGraphGetOutputValue()) {
    goto LABEL_20;
  }
LABEL_21:
  if (((v36 | v59) & 1) != 0 || (type metadata accessor for (_:)(), !AGGraphGetOutputValue())) {
    PlatformTextFieldCoordinator.update()();
  }
  type metadata accessor for (_:)();
  BOOL v45 = AGGraphGetOutputValue() != 0;
  uint64_t v46 = v58;
  if ((v45 & v40 & 1) == 0)
  {
    outlined init with copy of PlatformItem((uint64_t)v65, (uint64_t)v60);
    uint64_t v47 = (void *)swift_allocObject();
    v47[2] = v38;
    v47[3] = v39;
    v47[4] = v46;
    memcpy(v47 + 5, v60, 0x150uLL);
    unint64_t v61 = partial apply for closure #1 in PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems.updateValue();
    long long v62 = v47;
    swift_bridgeObjectRetain();
    uint64_t v48 = v38;
    AGGraphSetOutputValue();
    swift_release();
  }
  *(void *)(v34 + 32) = v39;
  *(void *)(v34 + 40) = v46;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of TextField<_TextFieldStyleLabel>(v37);
  return outlined destroy of PlatformItem((uint64_t)v65);
}

uint64_t closure #1 in PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems.updateValue()(void **a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v38 = a5;
  unint64_t v39 = a1;
  uint64_t v44 = a3;
  unint64_t v45 = a4;
  uint64_t v6 = type metadata accessor for PlatformItemList.Item();
  uint64_t v47 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v46 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v38 - v9;
  _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v53);
  _s7SwiftUI12PlatformItemV14PrimaryContentVSgWObTm_0((uint64_t)v53, (uint64_t)v50, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
  v48[0] = xmmword_18834BB90;
  memset(&v48[1], 0, 48);
  char v49 = 0;
  __n128 v51 = 0uLL;
  uint64_t v52 = 0;
  PlatformItemList.Item.init(text:image:selectionBehavior:accessibility:tint:imageColorResolver:)(0, (uint64_t)v50, v48, &v51, 0, 0, (uint64_t)v10);
  uint64_t v12 = (void *)*((void *)v10 + 37);
  uint64_t v11 = *((void *)v10 + 38);
  uint64_t v13 = *((void *)v10 + 39);
  uint64_t v42 = *((void *)v10 + 40);
  uint64_t v43 = v11;
  unint64_t v14 = *((void *)v10 + 41);
  uint64_t v15 = *((void *)v10 + 42);
  uint64_t v17 = *((void *)v10 + 43);
  uint64_t v16 = *((void *)v10 + 44);
  long long v18 = *(_OWORD *)(v10 + 360);
  long long v40 = *(_OWORD *)(v10 + 376);
  long long v41 = v18;
  uint64_t v19 = *((void *)v10 + 49);
  id v20 = a2;
  uint64_t v21 = v13;
  unint64_t v22 = v14;
  uint64_t v24 = v44;
  unint64_t v23 = v45;
  outlined consume of PlatformItemList.Item.SystemItem?(v12, v43, v21, v42, v22, v15, v17, v16, v41, *((uint64_t *)&v41 + 1), v40, SBYTE8(v40), v19);
  *((void *)v10 + 37) = a2;
  *((void *)v10 + 38) = 0;
  *((void *)v10 + 39) = 0;
  *((void *)v10 + 40) = 0;
  *((void *)v10 + 41) = 0x4000000000000000;
  uint64_t v25 = HIBYTE(v23) & 0xF;
  if ((v23 & 0x2000000000000000) == 0) {
    uint64_t v25 = v24 & 0xFFFFFFFFFFFFLL;
  }
  *((_OWORD *)v10 + 21) = 0u;
  *((_OWORD *)v10 + 22) = 0u;
  *((_OWORD *)v10 + 23) = 0u;
  *((_OWORD *)v10 + 24) = 0u;
  if (v25)
  {
    id v26 = objc_allocWithZone(MEMORY[0x1E4F28B18]);
    swift_bridgeObjectRetain();
    uint64_t v27 = (void *)MEMORY[0x18C115780](v24, v23);
    swift_bridgeObjectRelease();
    id v28 = objc_msgSend(v26, sel_initWithString_, v27, v38);

    *(void *)uint64_t v10 = v28;
    uint64_t v29 = v39;
    uint64_t v30 = (uint64_t)v46;
  }
  else
  {
    _s7SwiftUI12PlatformItemV14PrimaryContentVSgWObTm_0(v38 + 24, (uint64_t)v48, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
    _s7SwiftUI12PlatformItemV14PrimaryContentVSgWObTm_0((uint64_t)v48, (uint64_t)v50, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
    int v31 = _s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg((uint64_t *)v50);
    uint64_t v30 = (uint64_t)v46;
    if (v31 == 1)
    {
      uint64_t v29 = v39;
    }
    else
    {
      id v32 = v50[0];
      uint64_t v29 = v39;
      if (v50[0])
      {
        id v33 = v50[0];
        if (objc_msgSend(v33, sel_length))
        {

          *(void *)uint64_t v10 = v32;
        }
        else
        {
        }
      }
    }
  }
  outlined init with copy of PlatformItemList.Item((uint64_t)v10, v30);
  uint64_t v34 = *v29;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v34 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34[2] + 1, 1, v34);
  }
  unint64_t v36 = v34[2];
  unint64_t v35 = v34[3];
  if (v36 >= v35 >> 1) {
    uint64_t v34 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1, v34);
  }
  v34[2] = v36 + 1;
  outlined init with take of PlatformItemList.Item(v30, (uint64_t)v34+ ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80))+ *(void *)(v47 + 72) * v36);
  *uint64_t v29 = v34;
  return _s7SwiftUI13TextSelectionV7IndicesOWOhTm_0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
}

void protocol witness for View.body.getter in conformance PlatformItemListTextFieldStyle.PlatformItemListWriter()
{
}

uint64_t protocol witness for TextFieldStyle._body(configuration:) in conformance PlatformItemListTextFieldStyle@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)&v21 - v6;
  outlined init with copy of TextField<_TextFieldStyleLabel>((uint64_t)a1, (uint64_t)&v21 - v6);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  outlined init with take of TextField<_TextFieldStyleLabel>((uint64_t)v7, v9 + v8);
  swift_retain();
  uint64_t v10 = static Alignment.center.getter();
  uint64_t v12 = v11;
  uint64_t v13 = a1[5];
  uint64_t v14 = a1[6];
  uint64_t v15 = a1[7];
  uint64_t v16 = a1[8];
  if (v16) {
    uint64_t v17 = v13;
  }
  else {
    uint64_t v17 = 0;
  }
  if (v16) {
    uint64_t v18 = v14;
  }
  else {
    uint64_t v18 = 0;
  }
  if (v16) {
    uint64_t v19 = v15 & 1;
  }
  else {
    uint64_t v19 = 0;
  }
  outlined copy of Text?(v13, v14, v15, v16);
  uint64_t result = swift_release();
  *(void *)a2 = partial apply for closure #1 in PlatformItemListTextFieldStyle._body(configuration:);
  *(void *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = v10;
  *(void *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v17;
  *(void *)(a2 + 40) = v18;
  *(void *)(a2 + 48) = v19;
  *(void *)(a2 + 56) = v16;
  *(unsigned char *)(a2 + 64) = v16 == 0;
  return result;
}

uint64_t sub_187B5FE7C()
{
  type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v2 = v1;
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v3 + 64))
  {
    outlined consume of Text.Storage(*(void *)(v3 + 40), *(void *)(v3 + 48), *(unsigned char *)(v3 + 56));
    swift_bridgeObjectRelease();
  }
  outlined consume of StateOrBinding<TextFieldState>(*(void *)(v3 + 72), *(void *)(v3 + 80), *(void *)(v3 + 88), *(void *)(v3 + 96), *(void *)(v3 + 104), *(void *)(v3 + 112), *(void *)(v3 + 120), *(void *)(v3 + 128), *(void *)(v3 + 136), *(void *)(v3 + 144), *(void *)(v3 + 152), *(void *)(v3 + 160), *(void *)(v3 + 168), *(_DWORD *)(v3 + 176), *(unsigned char *)(v3 + 180));
  uint64_t v4 = v3 + *(int *)(v2 + 56);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v6 = v5;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    swift_release();
    swift_release();
    uint64_t v7 = v4 + *(int *)(v6 + 32);
    uint64_t v8 = type metadata accessor for TextSelection(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8))
    {
      type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v7, v9);
      }
    }
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PlatformItemListTextFieldStyle._body(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v6 = v2
     + ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80));

  return closure #1 in PlatformItemListTextFieldStyle._body(configuration:)(a1, v6, a2);
}

uint64_t type metadata accessor for PlatformItemListTextFieldStyle.PlatformItemListWriter()
{
  uint64_t result = type metadata singleton initialization cache for PlatformItemListTextFieldStyle.PlatformItemListWriter;
  if (!type metadata singleton initialization cache for PlatformItemListTextFieldStyle.PlatformItemListWriter) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PlatformItemListTextFieldStyle.PlatformItemListWriter(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = a2[3];
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    *(unsigned char *)(a1 + 33) = *((unsigned char *)a2 + 33);
    uint64_t v8 = a2[8];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v8)
    {
      uint64_t v9 = a2[5];
      uint64_t v10 = a2[6];
      char v11 = *((unsigned char *)a2 + 56);
      outlined copy of Text.Storage(v9, v10, v11);
      *(void *)(a1 + 40) = v9;
      *(void *)(a1 + 48) = v10;
      *(unsigned char *)(a1 + 56) = v11;
      *(void *)(a1 + 64) = a2[8];
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v13 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 56) = v13;
    }
    uint64_t v14 = a2[9];
    uint64_t v15 = a2[10];
    uint64_t v16 = a2[11];
    uint64_t v17 = a2[12];
    uint64_t v18 = a2[13];
    uint64_t v19 = a2[14];
    uint64_t v21 = a2[15];
    uint64_t v20 = a2[16];
    uint64_t v84 = a2[17];
    uint64_t v85 = a2[18];
    uint64_t v86 = a2[19];
    uint64_t v87 = a2[20];
    uint64_t v88 = a2[21];
    int __dsta = *((_DWORD *)a2 + 44);
    char v92 = *((unsigned char *)a2 + 180);
    outlined copy of StateOrBinding<TextFieldState>(v14, v15, v16, v17, v18, v19, v21, v20, v84, v85, v86, v87, v88, __dsta, v92);
    *(void *)(a1 + 72) = v14;
    *(void *)(a1 + 80) = v15;
    *(void *)(a1 + 88) = v16;
    *(void *)(a1 + 96) = v17;
    *(void *)(a1 + 104) = v18;
    *(void *)(a1 + 112) = v19;
    *(void *)(a1 + 120) = v21;
    *(void *)(a1 + 128) = v20;
    *(void *)(a1 + 136) = v84;
    *(void *)(a1 + 144) = v85;
    *(void *)(a1 + 152) = v86;
    *(void *)(a1 + 160) = v87;
    *(void *)(a1 + 168) = v88;
    *(_DWORD *)(a1 + 176) = __dsta;
    *(unsigned char *)(a1 + 180) = v92;
    type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
    uint64_t v23 = *(int *)(v22 + 56);
    uint64_t v24 = (void *)(a1 + v23);
    uint64_t v25 = (uint64_t *)((char *)a2 + v23);
    type metadata accessor for Binding<TextSelection?>(0);
    uint64_t v27 = v26;
    uint64_t v28 = *(void *)(v26 - 8);
    uint64_t v12 = a1;
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v28 + 48))(v25, 1, v26))
    {
      _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_3(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
      memcpy(v24, v25, *(void *)(*(void *)(v29 - 8) + 64));
      uint64_t v30 = a3;
    }
    else
    {
      uint64_t v93 = a1;
      uint64_t v31 = v25[1];
      *uint64_t v24 = *v25;
      v24[1] = v31;
      uint64_t v32 = *(int *)(v27 + 32);
      __dst = (char *)v24 + v32;
      id v33 = (char *)v25 + v32;
      uint64_t v34 = type metadata accessor for TextSelection(0);
      uint64_t v89 = *(void *)(v34 - 8);
      unint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48);
      swift_retain();
      swift_retain();
      if (v35(v33, 1, v34))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v33, *(void *)(*(void *)(v36 - 8) + 64));
        uint64_t v12 = a1;
        uint64_t v30 = a3;
      }
      else
      {
        uint64_t v37 = type metadata accessor for TextSelection.Indices(0);
        uint64_t v30 = a3;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16))(__dst, v33, v38);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v33, *(void *)(*(void *)(v37 - 8) + 64));
        }
        __dst[*(int *)(v34 + 20)] = v33[*(int *)(v34 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v89 + 56))(__dst, 0, 1, v34);
        uint64_t v12 = v93;
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v24, 0, 1, v27);
    }
    uint64_t v39 = *(int *)(v30 + 20);
    uint64_t v40 = v12 + v39;
    uint64_t v41 = (uint64_t)a2 + v39;
    uint64_t v42 = *(uint64_t *)((char *)a2 + v39);
    uint64_t v43 = *(uint64_t *)((char *)a2 + v39 + 8);
    *(void *)uint64_t v40 = v42;
    *(void *)(v40 + 8) = v43;
    *(_DWORD *)(v40 + 16) = *(_DWORD *)(v41 + 16);
    uint64_t v44 = *(void **)(v41 + 24);
    swift_bridgeObjectRetain();
    if (v44 == (void *)1)
    {
      long long v45 = *(_OWORD *)(v41 + 200);
      *(_OWORD *)(v40 + 184) = *(_OWORD *)(v41 + 184);
      *(_OWORD *)(v40 + 200) = v45;
      *(_OWORD *)(v40 + 216) = *(_OWORD *)(v41 + 216);
      *(void *)(v40 + 232) = *(void *)(v41 + 232);
      long long v46 = *(_OWORD *)(v41 + 136);
      *(_OWORD *)(v40 + 120) = *(_OWORD *)(v41 + 120);
      *(_OWORD *)(v40 + 136) = v46;
      long long v47 = *(_OWORD *)(v41 + 168);
      *(_OWORD *)(v40 + 152) = *(_OWORD *)(v41 + 152);
      *(_OWORD *)(v40 + 168) = v47;
      long long v48 = *(_OWORD *)(v41 + 72);
      *(_OWORD *)(v40 + 56) = *(_OWORD *)(v41 + 56);
      *(_OWORD *)(v40 + 72) = v48;
      long long v49 = *(_OWORD *)(v41 + 104);
      *(_OWORD *)(v40 + 88) = *(_OWORD *)(v41 + 88);
      *(_OWORD *)(v40 + 104) = v49;
      long long v50 = *(_OWORD *)(v41 + 40);
      *(_OWORD *)(v40 + 24) = *(_OWORD *)(v41 + 24);
      *(_OWORD *)(v40 + 40) = v50;
    }
    else
    {
      __n128 v51 = *(void **)(v41 + 32);
      uint64_t v52 = *(void **)(v41 + 40);
      *(void *)(v40 + 24) = v44;
      *(void *)(v40 + 32) = v51;
      *(void *)(v40 + 40) = v52;
      uint64_t v53 = (_OWORD *)(v40 + 48);
      uint64_t v54 = (_OWORD *)(v41 + 48);
      unint64_t v55 = *(void *)(v41 + 168);
      id v56 = v44;
      id v57 = v51;
      id v58 = v52;
      if (v55 >> 1 == 4294967294)
      {
        long long v59 = *(_OWORD *)(v41 + 192);
        *(_OWORD *)(v40 + 176) = *(_OWORD *)(v41 + 176);
        *(_OWORD *)(v40 + 192) = v59;
        *(_OWORD *)(v40 + 208) = *(_OWORD *)(v41 + 208);
        *(_DWORD *)(v40 + 223) = *(_DWORD *)(v41 + 223);
        long long v60 = *(_OWORD *)(v41 + 128);
        *(_OWORD *)(v40 + 112) = *(_OWORD *)(v41 + 112);
        *(_OWORD *)(v40 + 128) = v60;
        long long v61 = *(_OWORD *)(v41 + 160);
        *(_OWORD *)(v40 + 144) = *(_OWORD *)(v41 + 144);
        *(_OWORD *)(v40 + 160) = v61;
        long long v62 = *(_OWORD *)(v41 + 64);
        *uint64_t v53 = *v54;
        *(_OWORD *)(v40 + 64) = v62;
        long long v63 = *(_OWORD *)(v41 + 96);
        *(_OWORD *)(v40 + 80) = *(_OWORD *)(v41 + 80);
        *(_OWORD *)(v40 + 96) = v63;
      }
      else
      {
        int v64 = *(unsigned __int8 *)(v41 + 56);
        if (v64 == 255)
        {
          *(void *)uint64_t v53 = *(void *)v54;
          *(unsigned char *)(v40 + 56) = *(unsigned char *)(v41 + 56);
        }
        else
        {
          uint64_t v65 = *(void **)(v41 + 48);
          outlined copy of GraphicsImage.Contents(v65, *(unsigned char *)(v41 + 56));
          *(void *)(v40 + 48) = v65;
          *(unsigned char *)(v40 + 56) = v64;
          unint64_t v55 = *(void *)(v41 + 168);
        }
        *(void *)(v40 + 64) = *(void *)(v41 + 64);
        *(_OWORD *)(v40 + 72) = *(_OWORD *)(v41 + 72);
        *(unsigned char *)(v40 + 88) = *(unsigned char *)(v41 + 88);
        *(_OWORD *)(v40 + 92) = *(_OWORD *)(v41 + 92);
        *(unsigned char *)(v40 + 108) = *(unsigned char *)(v41 + 108);
        long long v66 = *(_OWORD *)(v41 + 128);
        *(_OWORD *)(v40 + 112) = *(_OWORD *)(v41 + 112);
        *(_OWORD *)(v40 + 128) = v66;
        *(_WORD *)(v40 + 144) = *(_WORD *)(v41 + 144);
        *(unsigned char *)(v40 + 146) = *(unsigned char *)(v41 + 146);
        *(unsigned char *)(v40 + 147) = *(unsigned char *)(v41 + 147);
        if (v55 >> 1 == 0xFFFFFFFF)
        {
          long long v67 = *(_OWORD *)(v41 + 168);
          *(_OWORD *)(v40 + 152) = *(_OWORD *)(v41 + 152);
          *(_OWORD *)(v40 + 168) = v67;
        }
        else
        {
          uint64_t v68 = *(void *)(v41 + 152);
          uint64_t v69 = *(void *)(v41 + 160);
          uint64_t v70 = *(void *)(v41 + 176);
          outlined copy of AccessibilityImageLabel(v68, v69, v55);
          *(void *)(v40 + 152) = v68;
          *(void *)(v40 + 160) = v69;
          *(void *)(v40 + 168) = v55;
          *(void *)(v40 + 176) = v70;
        }
        uint64_t v71 = *(void *)(v41 + 192);
        *(void *)(v40 + 184) = *(void *)(v41 + 184);
        *(void *)(v40 + 192) = v71;
        *(_WORD *)(v40 + 200) = *(_WORD *)(v41 + 200);
        *(_DWORD *)(v40 + 204) = *(_DWORD *)(v41 + 204);
        *(unsigned char *)(v40 + 208) = *(unsigned char *)(v41 + 208);
        uint64_t v72 = *(void **)(v41 + 216);
        *(void *)(v40 + 216) = v72;
        *(_WORD *)(v40 + 224) = *(_WORD *)(v41 + 224);
        *(unsigned char *)(v40 + 226) = *(unsigned char *)(v41 + 226);
        swift_unknownObjectRetain();
        swift_retain();
        id v73 = v72;
      }
      *(unsigned char *)(v40 + 227) = *(unsigned char *)(v41 + 227);
      *(void *)(v40 + 232) = *(void *)(v41 + 232);
      swift_retain();
    }
    uint64_t v74 = *(void *)(v41 + 288);
    if (v74 == 1)
    {
      long long v75 = *(_OWORD *)(v41 + 256);
      *(_OWORD *)(v40 + 240) = *(_OWORD *)(v41 + 240);
      *(_OWORD *)(v40 + 256) = v75;
      long long v76 = *(_OWORD *)(v41 + 288);
      *(_OWORD *)(v40 + 272) = *(_OWORD *)(v41 + 272);
      *(_OWORD *)(v40 + 288) = v76;
    }
    else
    {
      *(_OWORD *)(v40 + 240) = *(_OWORD *)(v41 + 240);
      *(void *)(v40 + 256) = *(void *)(v41 + 256);
      uint64_t v77 = (_OWORD *)(v40 + 264);
      uint64_t v78 = (_OWORD *)(v41 + 264);
      if (v74)
      {
        uint64_t v79 = *(void *)(v41 + 296);
        *(void *)(v40 + 288) = v74;
        *(void *)(v40 + 296) = v79;
        (**(void (***)(_OWORD *, _OWORD *))(v74 - 8))(v77, v78);
      }
      else
      {
        long long v80 = *(_OWORD *)(v41 + 280);
        *uint64_t v77 = *v78;
        *(_OWORD *)(v40 + 280) = v80;
        *(void *)(v40 + 296) = *(void *)(v41 + 296);
      }
    }
    *(void *)(v40 + 304) = *(void *)(v41 + 304);
    *(unsigned char *)(v40 + 312) = *(unsigned char *)(v41 + 312);
    uint64_t v81 = *(void *)(v41 + 328);
    *(void *)(v40 + 320) = *(void *)(v41 + 320);
    *(void *)(v40 + 328) = v81;
    swift_bridgeObjectRetain();
  }
  return v12;
}

uint64_t destroy for PlatformItemListTextFieldStyle.PlatformItemListWriter(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 64))
  {
    outlined consume of Text.Storage(*(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
    swift_bridgeObjectRelease();
  }
  outlined consume of StateOrBinding<TextFieldState>(*(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144), *(void *)(a1 + 152), *(void *)(a1 + 160), *(void *)(a1 + 168), *(_DWORD *)(a1 + 176), *(unsigned char *)(a1 + 180));
  type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v5 = a1 + *(int *)(v4 + 56);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v7 = v6;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    swift_release();
    swift_release();
    uint64_t v8 = v5 + *(int *)(v7 + 32);
    uint64_t v9 = type metadata accessor for TextSelection(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
    {
      type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v8, v10);
      }
    }
  }
  uint64_t v11 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void **)(v11 + 24);
  if (v12 != (void *)1)
  {

    uint64_t v13 = *(void *)(v11 + 168);
    unint64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
    if ((v13 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      int v15 = *(unsigned __int8 *)(v11 + 56);
      if (v15 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(v11 + 48), v15);
        uint64_t v13 = *(void *)(v11 + 168);
        unint64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v14 != 0x1FFFFFFFELL) {
        outlined consume of AccessibilityImageLabel(*(void *)(v11 + 152), *(void *)(v11 + 160), v13);
      }
      swift_unknownObjectRelease();
      swift_release();
    }
    swift_release();
  }
  if (*(void *)(v11 + 288) >= 2uLL) {
    __swift_destroy_boxed_opaque_existential_1(v11 + 264);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PlatformItemListTextFieldStyle.PlatformItemListWriter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v7 = *(void *)(a2 + 64);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    uint64_t v8 = *(void *)(a2 + 40);
    uint64_t v9 = *(void *)(a2 + 48);
    char v10 = *(unsigned char *)(a2 + 56);
    outlined copy of Text.Storage(v8, v9, v10);
    *(void *)(a1 + 40) = v8;
    *(void *)(a1 + 48) = v9;
    *(unsigned char *)(a1 + 56) = v10;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v11;
  }
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a2 + 80);
  uint64_t v14 = *(void *)(a2 + 88);
  uint64_t v15 = *(void *)(a2 + 96);
  uint64_t v16 = *(void *)(a2 + 104);
  uint64_t v17 = *(void *)(a2 + 112);
  uint64_t v19 = *(void *)(a2 + 120);
  uint64_t v18 = *(void *)(a2 + 128);
  uint64_t v83 = *(void *)(a2 + 136);
  uint64_t v84 = *(void *)(a2 + 144);
  uint64_t v85 = *(void *)(a2 + 152);
  uint64_t v86 = *(void *)(a2 + 160);
  uint64_t v87 = *(void *)(a2 + 168);
  int __dsta = *(_DWORD *)(a2 + 176);
  char v91 = *(unsigned char *)(a2 + 180);
  outlined copy of StateOrBinding<TextFieldState>(v12, v13, v14, v15, v16, v17, v19, v18, v83, v84, v85, v86, v87, __dsta, v91);
  *(void *)(a1 + 72) = v12;
  *(void *)(a1 + 80) = v13;
  *(void *)(a1 + 88) = v14;
  *(void *)(a1 + 96) = v15;
  *(void *)(a1 + 104) = v16;
  *(void *)(a1 + 112) = v17;
  *(void *)(a1 + 120) = v19;
  *(void *)(a1 + 128) = v18;
  *(void *)(a1 + 136) = v83;
  *(void *)(a1 + 144) = v84;
  *(void *)(a1 + 152) = v85;
  *(void *)(a1 + 160) = v86;
  *(void *)(a1 + 168) = v87;
  *(_DWORD *)(a1 + 176) = __dsta;
  *(unsigned char *)(a1 + 180) = v91;
  type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v21 = *(int *)(v20 + 56);
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v25 = v24;
  uint64_t v26 = *(void *)(v24 - 8);
  uint64_t v27 = a1;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v26 + 48))(v23, 1, v24))
  {
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_3(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
    memcpy(v22, v23, *(void *)(*(void *)(v28 - 8) + 64));
    uint64_t v29 = a3;
  }
  else
  {
    uint64_t v92 = a1;
    uint64_t v30 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v30;
    uint64_t v31 = *(int *)(v25 + 32);
    __dst = (char *)v22 + v31;
    uint64_t v32 = (char *)v23 + v31;
    uint64_t v33 = type metadata accessor for TextSelection(0);
    uint64_t v88 = *(void *)(v33 - 8);
    uint64_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48);
    swift_retain();
    swift_retain();
    if (v34(v32, 1, v33))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(__dst, v32, *(void *)(*(void *)(v35 - 8) + 64));
      uint64_t v27 = a1;
      uint64_t v29 = a3;
    }
    else
    {
      uint64_t v36 = type metadata accessor for TextSelection.Indices(0);
      uint64_t v29 = a3;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(__dst, v32, v37);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(__dst, v32, *(void *)(*(void *)(v36 - 8) + 64));
      }
      __dst[*(int *)(v33 + 20)] = v32[*(int *)(v33 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v88 + 56))(__dst, 0, 1, v33);
      uint64_t v27 = v92;
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v22, 0, 1, v25);
  }
  uint64_t v38 = *(int *)(v29 + 20);
  uint64_t v39 = v27 + v38;
  uint64_t v40 = a2 + v38;
  uint64_t v41 = *(void *)(a2 + v38);
  uint64_t v42 = *(void *)(a2 + v38 + 8);
  *(void *)uint64_t v39 = v41;
  *(void *)(v39 + 8) = v42;
  *(_DWORD *)(v39 + 16) = *(_DWORD *)(v40 + 16);
  uint64_t v43 = *(void **)(v40 + 24);
  swift_bridgeObjectRetain();
  if (v43 == (void *)1)
  {
    long long v44 = *(_OWORD *)(v40 + 200);
    *(_OWORD *)(v39 + 184) = *(_OWORD *)(v40 + 184);
    *(_OWORD *)(v39 + 200) = v44;
    *(_OWORD *)(v39 + 216) = *(_OWORD *)(v40 + 216);
    *(void *)(v39 + 232) = *(void *)(v40 + 232);
    long long v45 = *(_OWORD *)(v40 + 136);
    *(_OWORD *)(v39 + 120) = *(_OWORD *)(v40 + 120);
    *(_OWORD *)(v39 + 136) = v45;
    long long v46 = *(_OWORD *)(v40 + 168);
    *(_OWORD *)(v39 + 152) = *(_OWORD *)(v40 + 152);
    *(_OWORD *)(v39 + 168) = v46;
    long long v47 = *(_OWORD *)(v40 + 72);
    *(_OWORD *)(v39 + 56) = *(_OWORD *)(v40 + 56);
    *(_OWORD *)(v39 + 72) = v47;
    long long v48 = *(_OWORD *)(v40 + 104);
    *(_OWORD *)(v39 + 88) = *(_OWORD *)(v40 + 88);
    *(_OWORD *)(v39 + 104) = v48;
    long long v49 = *(_OWORD *)(v40 + 40);
    *(_OWORD *)(v39 + 24) = *(_OWORD *)(v40 + 24);
    *(_OWORD *)(v39 + 40) = v49;
  }
  else
  {
    long long v50 = *(void **)(v40 + 32);
    __n128 v51 = *(void **)(v40 + 40);
    *(void *)(v39 + 24) = v43;
    *(void *)(v39 + 32) = v50;
    *(void *)(v39 + 40) = v51;
    uint64_t v52 = (_OWORD *)(v39 + 48);
    uint64_t v53 = (_OWORD *)(v40 + 48);
    unint64_t v54 = *(void *)(v40 + 168);
    id v55 = v43;
    id v56 = v50;
    id v57 = v51;
    if (v54 >> 1 == 4294967294)
    {
      long long v58 = *(_OWORD *)(v40 + 192);
      *(_OWORD *)(v39 + 176) = *(_OWORD *)(v40 + 176);
      *(_OWORD *)(v39 + 192) = v58;
      *(_OWORD *)(v39 + 208) = *(_OWORD *)(v40 + 208);
      *(_DWORD *)(v39 + 223) = *(_DWORD *)(v40 + 223);
      long long v59 = *(_OWORD *)(v40 + 128);
      *(_OWORD *)(v39 + 112) = *(_OWORD *)(v40 + 112);
      *(_OWORD *)(v39 + 128) = v59;
      long long v60 = *(_OWORD *)(v40 + 160);
      *(_OWORD *)(v39 + 144) = *(_OWORD *)(v40 + 144);
      *(_OWORD *)(v39 + 160) = v60;
      long long v61 = *(_OWORD *)(v40 + 64);
      *uint64_t v52 = *v53;
      *(_OWORD *)(v39 + 64) = v61;
      long long v62 = *(_OWORD *)(v40 + 96);
      *(_OWORD *)(v39 + 80) = *(_OWORD *)(v40 + 80);
      *(_OWORD *)(v39 + 96) = v62;
    }
    else
    {
      int v63 = *(unsigned __int8 *)(v40 + 56);
      if (v63 == 255)
      {
        *(void *)uint64_t v52 = *(void *)v53;
        *(unsigned char *)(v39 + 56) = *(unsigned char *)(v40 + 56);
      }
      else
      {
        int v64 = *(void **)(v40 + 48);
        outlined copy of GraphicsImage.Contents(v64, *(unsigned char *)(v40 + 56));
        *(void *)(v39 + 48) = v64;
        *(unsigned char *)(v39 + 56) = v63;
        unint64_t v54 = *(void *)(v40 + 168);
      }
      *(void *)(v39 + 64) = *(void *)(v40 + 64);
      *(_OWORD *)(v39 + 72) = *(_OWORD *)(v40 + 72);
      *(unsigned char *)(v39 + 88) = *(unsigned char *)(v40 + 88);
      *(_OWORD *)(v39 + 92) = *(_OWORD *)(v40 + 92);
      *(unsigned char *)(v39 + 108) = *(unsigned char *)(v40 + 108);
      long long v65 = *(_OWORD *)(v40 + 128);
      *(_OWORD *)(v39 + 112) = *(_OWORD *)(v40 + 112);
      *(_OWORD *)(v39 + 128) = v65;
      *(_WORD *)(v39 + 144) = *(_WORD *)(v40 + 144);
      *(unsigned char *)(v39 + 146) = *(unsigned char *)(v40 + 146);
      *(unsigned char *)(v39 + 147) = *(unsigned char *)(v40 + 147);
      if (v54 >> 1 == 0xFFFFFFFF)
      {
        long long v66 = *(_OWORD *)(v40 + 168);
        *(_OWORD *)(v39 + 152) = *(_OWORD *)(v40 + 152);
        *(_OWORD *)(v39 + 168) = v66;
      }
      else
      {
        uint64_t v67 = *(void *)(v40 + 152);
        uint64_t v68 = *(void *)(v40 + 160);
        uint64_t v69 = *(void *)(v40 + 176);
        outlined copy of AccessibilityImageLabel(v67, v68, v54);
        *(void *)(v39 + 152) = v67;
        *(void *)(v39 + 160) = v68;
        *(void *)(v39 + 168) = v54;
        *(void *)(v39 + 176) = v69;
      }
      uint64_t v70 = *(void *)(v40 + 192);
      *(void *)(v39 + 184) = *(void *)(v40 + 184);
      *(void *)(v39 + 192) = v70;
      *(_WORD *)(v39 + 200) = *(_WORD *)(v40 + 200);
      *(_DWORD *)(v39 + 204) = *(_DWORD *)(v40 + 204);
      *(unsigned char *)(v39 + 208) = *(unsigned char *)(v40 + 208);
      uint64_t v71 = *(void **)(v40 + 216);
      *(void *)(v39 + 216) = v71;
      *(_WORD *)(v39 + 224) = *(_WORD *)(v40 + 224);
      *(unsigned char *)(v39 + 226) = *(unsigned char *)(v40 + 226);
      swift_unknownObjectRetain();
      swift_retain();
      id v72 = v71;
    }
    *(unsigned char *)(v39 + 227) = *(unsigned char *)(v40 + 227);
    *(void *)(v39 + 232) = *(void *)(v40 + 232);
    swift_retain();
  }
  uint64_t v73 = *(void *)(v40 + 288);
  if (v73 == 1)
  {
    long long v74 = *(_OWORD *)(v40 + 256);
    *(_OWORD *)(v39 + 240) = *(_OWORD *)(v40 + 240);
    *(_OWORD *)(v39 + 256) = v74;
    long long v75 = *(_OWORD *)(v40 + 288);
    *(_OWORD *)(v39 + 272) = *(_OWORD *)(v40 + 272);
    *(_OWORD *)(v39 + 288) = v75;
  }
  else
  {
    *(_OWORD *)(v39 + 240) = *(_OWORD *)(v40 + 240);
    *(void *)(v39 + 256) = *(void *)(v40 + 256);
    long long v76 = (_OWORD *)(v39 + 264);
    uint64_t v77 = (_OWORD *)(v40 + 264);
    if (v73)
    {
      uint64_t v78 = *(void *)(v40 + 296);
      *(void *)(v39 + 288) = v73;
      *(void *)(v39 + 296) = v78;
      (**(void (***)(_OWORD *, _OWORD *))(v73 - 8))(v76, v77);
    }
    else
    {
      long long v79 = *(_OWORD *)(v40 + 280);
      *long long v76 = *v77;
      *(_OWORD *)(v39 + 280) = v79;
      *(void *)(v39 + 296) = *(void *)(v40 + 296);
    }
  }
  *(void *)(v39 + 304) = *(void *)(v40 + 304);
  *(unsigned char *)(v39 + 312) = *(unsigned char *)(v40 + 312);
  uint64_t v80 = *(void *)(v40 + 328);
  *(void *)(v39 + 320) = *(void *)(v40 + 320);
  *(void *)(v39 + 328) = v80;
  swift_bridgeObjectRetain();
  return v27;
}

void *assignWithCopy for PlatformItemListTextFieldStyle.PlatformItemListWriter(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  *a1 = *(void *)a2;
  swift_retain();
  swift_release();
  v5[1] = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  void v5[2] = *(void *)(a2 + 16);
  void v5[3] = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)v5 + 32) = *(unsigned char *)(a2 + 32);
  *((unsigned char *)v5 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v6 = v5 + 5;
  uint64_t v7 = (_OWORD *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 64);
  uint64_t v228 = a3;
  if (v5[8])
  {
    if (v8)
    {
      uint64_t v9 = *(void *)(a2 + 40);
      uint64_t v10 = *(void *)(a2 + 48);
      char v11 = *(unsigned char *)(a2 + 56);
      outlined copy of Text.Storage(v9, v10, v11);
      uint64_t v12 = v5[5];
      uint64_t v13 = v5[6];
      char v14 = *((unsigned char *)v5 + 56);
      v5[5] = v9;
      v5[6] = v10;
      *((unsigned char *)v5 + 56) = v11;
      outlined consume of Text.Storage(v12, v13, v14);
      v5[8] = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text((uint64_t)(v5 + 5));
      long long v18 = *(_OWORD *)(a2 + 56);
      *uint64_t v6 = *v7;
      *(_OWORD *)(v5 + 7) = v18;
    }
  }
  else if (v8)
  {
    uint64_t v15 = *(void *)(a2 + 40);
    uint64_t v16 = *(void *)(a2 + 48);
    char v17 = *(unsigned char *)(a2 + 56);
    outlined copy of Text.Storage(v15, v16, v17);
    v5[5] = v15;
    v5[6] = v16;
    *((unsigned char *)v5 + 56) = v17;
    v5[8] = *(void *)(a2 + 64);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v19 = *(_OWORD *)(a2 + 56);
    *uint64_t v6 = *v7;
    *(_OWORD *)(v5 + 7) = v19;
  }
  uint64_t v20 = *(void *)(a2 + 72);
  uint64_t v21 = *(void *)(a2 + 80);
  uint64_t v22 = *(void *)(a2 + 88);
  uint64_t v237 = a2;
  uint64_t v23 = *(void *)(a2 + 96);
  uint64_t v24 = *(void *)(a2 + 104);
  uint64_t v25 = *(void *)(a2 + 112);
  uint64_t v26 = *(void *)(a2 + 120);
  uint64_t v27 = *(void *)(a2 + 128);
  uint64_t v229 = *(void *)(a2 + 136);
  uint64_t v28 = *(void *)(a2 + 144);
  uint64_t v230 = *(void *)(v237 + 152);
  uint64_t v231 = *(void *)(v237 + 160);
  uint64_t v232 = *(void *)(v237 + 168);
  int v233 = *(_DWORD *)(v237 + 176);
  char __dsta = *(unsigned char *)(v237 + 180);
  outlined copy of StateOrBinding<TextFieldState>(v20, v21, v22, v23, v24, v25, v26, v27, v229, v28, v230, v231, v232, v233, __dsta);
  uint64_t v29 = v5[9];
  uint64_t v30 = v5[10];
  uint64_t v31 = v5[11];
  uint64_t v32 = v5[12];
  uint64_t v33 = v5[13];
  uint64_t v34 = v5[14];
  uint64_t v35 = v5[15];
  uint64_t v36 = v5[16];
  long long v37 = *(_OWORD *)(v5 + 17);
  long long v38 = *(_OWORD *)(v5 + 19);
  uint64_t v39 = v5[21];
  int v40 = *((_DWORD *)v5 + 44);
  char v41 = *((unsigned char *)v5 + 180);
  v5[9] = v20;
  v5[10] = v21;
  v5[11] = v22;
  v5[12] = v23;
  uint64_t v42 = v237;
  void v5[13] = v24;
  v5[14] = v25;
  v5[15] = v26;
  v5[16] = v27;
  v5[17] = v229;
  v5[18] = v28;
  v5[19] = v230;
  v5[20] = v231;
  v5[21] = v232;
  *((_DWORD *)v5 + 44) = v233;
  *((unsigned char *)v5 + 180) = __dsta;
  outlined consume of StateOrBinding<TextFieldState>(v29, v30, v31, v32, v33, v34, v35, v36, v37, *((uint64_t *)&v37 + 1), v38, *((uint64_t *)&v38 + 1), v39, v40, v41);
  type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v44 = *(int *)(v43 + 56);
  long long v45 = (char *)v5 + v44;
  long long v46 = (char *)(v237 + v44);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v48 = v47;
  uint64_t v49 = *(void *)(v47 - 8);
  long long v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48);
  LODWORD(v27) = v50(v45, 1, v47);
  int v51 = v50(v46, 1, v48);
  if (v27)
  {
    if (!v51)
    {
      v234 = v5;
      *(void *)long long v45 = *(void *)v46;
      *((void *)v45 + 1) = *((void *)v46 + 1);
      uint64_t v52 = *(int *)(v48 + 32);
      __dst = &v45[v52];
      uint64_t v53 = &v46[v52];
      uint64_t v54 = type metadata accessor for TextSelection(0);
      uint64_t v55 = *(void *)(v54 - 8);
      id v56 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48);
      swift_retain();
      swift_retain();
      if (v56(v53, 1, v54))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v53, *(void *)(*(void *)(v57 - 8) + 64));
      }
      else
      {
        uint64_t v73 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v74 - 8) + 16))(__dst, v53, v74);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v53, *(void *)(*(void *)(v73 - 8) + 64));
        }
        uint64_t v5 = v234;
        __dst[*(int *)(v54 + 20)] = v53[*(int *)(v54 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(__dst, 0, 1, v54);
      }
      uint64_t v42 = v237;
      uint64_t v62 = v228;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v45, 0, 1, v48);
      goto LABEL_29;
    }
    goto LABEL_14;
  }
  if (v51)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_0((uint64_t)v45, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
LABEL_14:
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_3(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
    size_t v59 = *(void *)(*(void *)(v58 - 8) + 64);
    long long v60 = v45;
    long long v61 = v46;
    goto LABEL_15;
  }
  *(void *)long long v45 = *(void *)v46;
  swift_retain();
  swift_release();
  *((void *)v45 + 1) = *((void *)v46 + 1);
  swift_retain();
  swift_release();
  uint64_t v63 = *(int *)(v48 + 32);
  int v64 = &v45[v63];
  long long v65 = &v46[v63];
  uint64_t v66 = type metadata accessor for TextSelection(0);
  uint64_t v67 = *(void *)(v66 - 8);
  uint64_t v68 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v67 + 48);
  int v69 = v68(v64, 1, v66);
  int v70 = v68(v65, 1, v66);
  if (v69)
  {
    if (!v70)
    {
      uint64_t v71 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 16))(v64, v65, v72);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v64, v65, *(void *)(*(void *)(v71 - 8) + 64));
      }
      v64[*(int *)(v66 + 20)] = v65[*(int *)(v66 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
      uint64_t v42 = v237;
      goto LABEL_16;
    }
  }
  else
  {
    if (!v70)
    {
      if (v5 != (void *)v237)
      {
        _s7SwiftUI13TextSelectionV7IndicesOWOhTm_0((uint64_t)v64, type metadata accessor for TextSelection.Indices);
        uint64_t v181 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v182 - 8) + 16))(v64, v65, v182);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v64, v65, *(void *)(*(void *)(v181 - 8) + 64));
        }
        uint64_t v42 = v237;
      }
      v64[*(int *)(v66 + 20)] = v65[*(int *)(v66 + 20)];
      goto LABEL_16;
    }
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_0((uint64_t)v64, type metadata accessor for TextSelection);
  }
  type metadata accessor for TextSelection?(0);
  size_t v59 = *(void *)(*(void *)(v75 - 8) + 64);
  long long v60 = v64;
  long long v61 = v65;
LABEL_15:
  memcpy(v60, v61, v59);
LABEL_16:
  uint64_t v62 = v228;
LABEL_29:
  uint64_t v76 = *(int *)(v62 + 20);
  uint64_t v77 = (char *)v5 + v76;
  uint64_t v78 = v42 + v76;
  *(void *)((char *)v5 + v76) = *(void *)v78;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v77 + 1) = *(void *)(v78 + 8);
  *((_DWORD *)v77 + 4) = *(_DWORD *)(v78 + 16);
  long long v79 = v77 + 24;
  uint64_t v80 = (void *)*((void *)v77 + 3);
  uint64_t v82 = (_OWORD *)(v78 + 24);
  uint64_t v81 = *(void **)(v78 + 24);
  if (v80 == (void *)1)
  {
    if (v81 == (void *)1)
    {
      long long v83 = *(_OWORD *)(v78 + 40);
      _OWORD *v79 = *v82;
      *(_OWORD *)(v77 + 40) = v83;
      long long v84 = *(_OWORD *)(v78 + 56);
      long long v85 = *(_OWORD *)(v78 + 72);
      long long v86 = *(_OWORD *)(v78 + 104);
      *(_OWORD *)(v77 + 88) = *(_OWORD *)(v78 + 88);
      *(_OWORD *)(v77 + 104) = v86;
      *(_OWORD *)(v77 + 56) = v84;
      *(_OWORD *)(v77 + 72) = v85;
      long long v87 = *(_OWORD *)(v78 + 120);
      long long v88 = *(_OWORD *)(v78 + 136);
      long long v89 = *(_OWORD *)(v78 + 168);
      *(_OWORD *)(v77 + 152) = *(_OWORD *)(v78 + 152);
      *(_OWORD *)(v77 + 168) = v89;
      *(_OWORD *)(v77 + 120) = v87;
      *(_OWORD *)(v77 + 136) = v88;
      long long v90 = *(_OWORD *)(v78 + 184);
      long long v91 = *(_OWORD *)(v78 + 200);
      long long v92 = *(_OWORD *)(v78 + 216);
      *((void *)v77 + 29) = *(void *)(v78 + 232);
      *(_OWORD *)(v77 + 200) = v91;
      *(_OWORD *)(v77 + 216) = v92;
      *(_OWORD *)(v77 + 184) = v90;
    }
    else
    {
      *((void *)v77 + 3) = v81;
      long long v103 = *(void **)(v78 + 32);
      *((void *)v77 + 4) = v103;
      long long v104 = *(void **)(v78 + 40);
      *((void *)v77 + 5) = v104;
      long long v105 = v77 + 48;
      uint64_t v106 = (id *)(v78 + 48);
      unint64_t v107 = *(void *)(v78 + 168);
      id v108 = v81;
      id v109 = v103;
      id v110 = v104;
      if (v107 >> 1 == 4294967294)
      {
        long long v111 = *(_OWORD *)v106;
        long long v112 = *(_OWORD *)(v78 + 64);
        long long v113 = *(_OWORD *)(v78 + 96);
        *((_OWORD *)v77 + 5) = *(_OWORD *)(v78 + 80);
        *((_OWORD *)v77 + 6) = v113;
        *long long v105 = v111;
        *((_OWORD *)v77 + 4) = v112;
        long long v114 = *(_OWORD *)(v78 + 112);
        long long v115 = *(_OWORD *)(v78 + 128);
        long long v116 = *(_OWORD *)(v78 + 160);
        *((_OWORD *)v77 + 9) = *(_OWORD *)(v78 + 144);
        *((_OWORD *)v77 + 10) = v116;
        *((_OWORD *)v77 + 7) = v114;
        *((_OWORD *)v77 + 8) = v115;
        long long v117 = *(_OWORD *)(v78 + 176);
        long long v118 = *(_OWORD *)(v78 + 192);
        long long v119 = *(_OWORD *)(v78 + 208);
        *(_DWORD *)(v77 + 223) = *(_DWORD *)(v78 + 223);
        *((_OWORD *)v77 + 12) = v118;
        *((_OWORD *)v77 + 13) = v119;
        *((_OWORD *)v77 + 11) = v117;
      }
      else
      {
        int v139 = *(unsigned __int8 *)(v78 + 56);
        if (v139 == 255)
        {
          id v156 = *v106;
          v77[56] = *(unsigned char *)(v78 + 56);
          *(void *)long long v105 = v156;
        }
        else
        {
          id v140 = *v106;
          outlined copy of GraphicsImage.Contents(*v106, *(unsigned char *)(v78 + 56));
          *((void *)v77 + 6) = v140;
          v77[56] = v139;
        }
        *((void *)v77 + 8) = *(void *)(v78 + 64);
        *(_OWORD *)(v77 + 72) = *(_OWORD *)(v78 + 72);
        v77[88] = *(unsigned char *)(v78 + 88);
        long long v157 = *(_OWORD *)(v78 + 92);
        v77[108] = *(unsigned char *)(v78 + 108);
        *(_OWORD *)(v77 + 92) = v157;
        long long v158 = *(_OWORD *)(v78 + 112);
        long long v159 = *(_OWORD *)(v78 + 128);
        v77[144] = *(unsigned char *)(v78 + 144);
        *((_OWORD *)v77 + 7) = v158;
        *((_OWORD *)v77 + 8) = v159;
        v77[145] = *(unsigned char *)(v78 + 145);
        v77[146] = *(unsigned char *)(v78 + 146);
        v77[147] = *(unsigned char *)(v78 + 147);
        unint64_t v160 = *(void *)(v78 + 168);
        if (v160 >> 1 == 0xFFFFFFFF)
        {
          long long v161 = *(_OWORD *)(v78 + 168);
          *(_OWORD *)(v77 + 152) = *(_OWORD *)(v78 + 152);
          *(_OWORD *)(v77 + 168) = v161;
        }
        else
        {
          uint64_t v162 = *(void *)(v78 + 152);
          uint64_t v163 = *(void *)(v78 + 160);
          uint64_t v164 = *(void *)(v78 + 176);
          outlined copy of AccessibilityImageLabel(v162, v163, *(void *)(v78 + 168));
          *((void *)v77 + 19) = v162;
          *((void *)v77 + 20) = v163;
          *((void *)v77 + 21) = v160;
          *((void *)v77 + 22) = v164;
        }
        *((void *)v77 + 23) = *(void *)(v78 + 184);
        *((void *)v77 + 24) = *(void *)(v78 + 192);
        v77[200] = *(unsigned char *)(v78 + 200);
        v77[201] = *(unsigned char *)(v78 + 201);
        int v165 = *(_DWORD *)(v78 + 204);
        v77[208] = *(unsigned char *)(v78 + 208);
        *((_DWORD *)v77 + 51) = v165;
        uint64_t v166 = *(void **)(v78 + 216);
        *((void *)v77 + 27) = v166;
        *((_WORD *)v77 + 112) = *(_WORD *)(v78 + 224);
        v77[226] = *(unsigned char *)(v78 + 226);
        swift_unknownObjectRetain();
        swift_retain();
        id v167 = v166;
      }
      v77[227] = *(unsigned char *)(v78 + 227);
      *((void *)v77 + 29) = *(void *)(v78 + 232);
      swift_retain();
    }
  }
  else if (v81 == (void *)1)
  {
    outlined destroy of PlatformItem.PrimaryContent((uint64_t)(v77 + 24));
    long long v93 = *(_OWORD *)(v78 + 40);
    _OWORD *v79 = *v82;
    *(_OWORD *)(v77 + 40) = v93;
    long long v94 = *(_OWORD *)(v78 + 104);
    long long v96 = *(_OWORD *)(v78 + 56);
    long long v95 = *(_OWORD *)(v78 + 72);
    *(_OWORD *)(v77 + 88) = *(_OWORD *)(v78 + 88);
    *(_OWORD *)(v77 + 104) = v94;
    *(_OWORD *)(v77 + 56) = v96;
    *(_OWORD *)(v77 + 72) = v95;
    long long v97 = *(_OWORD *)(v78 + 168);
    long long v99 = *(_OWORD *)(v78 + 120);
    long long v98 = *(_OWORD *)(v78 + 136);
    *(_OWORD *)(v77 + 152) = *(_OWORD *)(v78 + 152);
    *(_OWORD *)(v77 + 168) = v97;
    *(_OWORD *)(v77 + 120) = v99;
    *(_OWORD *)(v77 + 136) = v98;
    long long v101 = *(_OWORD *)(v78 + 200);
    long long v100 = *(_OWORD *)(v78 + 216);
    long long v102 = *(_OWORD *)(v78 + 184);
    *((void *)v77 + 29) = *(void *)(v78 + 232);
    *(_OWORD *)(v77 + 200) = v101;
    *(_OWORD *)(v77 + 216) = v100;
    *(_OWORD *)(v77 + 184) = v102;
  }
  else
  {
    *((void *)v77 + 3) = v81;
    id v120 = v81;

    uint64_t v121 = (void *)*((void *)v77 + 4);
    uint64_t v122 = *(void **)(v78 + 32);
    *((void *)v77 + 4) = v122;
    id v123 = v122;

    unint64_t v124 = (void *)*((void *)v77 + 5);
    uint64_t v125 = *(void **)(v78 + 40);
    *((void *)v77 + 5) = v125;
    id v126 = v125;

    uint64_t v127 = v77 + 48;
    long long v128 = (id *)(v78 + 48);
    unint64_t v129 = *(void *)(v78 + 168) & 0xFFFFFFFFFFFFFFFELL;
    if (*((void *)v77 + 21) >> 1 == 4294967294)
    {
      if (v129 == 0x1FFFFFFFCLL)
      {
        long long v130 = *(_OWORD *)v128;
        long long v131 = *(_OWORD *)(v78 + 64);
        long long v132 = *(_OWORD *)(v78 + 96);
        *((_OWORD *)v77 + 5) = *(_OWORD *)(v78 + 80);
        *((_OWORD *)v77 + 6) = v132;
        _OWORD *v127 = v130;
        *((_OWORD *)v77 + 4) = v131;
        long long v133 = *(_OWORD *)(v78 + 112);
        long long v134 = *(_OWORD *)(v78 + 128);
        long long v135 = *(_OWORD *)(v78 + 160);
        *((_OWORD *)v77 + 9) = *(_OWORD *)(v78 + 144);
        *((_OWORD *)v77 + 10) = v135;
        *((_OWORD *)v77 + 7) = v133;
        *((_OWORD *)v77 + 8) = v134;
        long long v136 = *(_OWORD *)(v78 + 176);
        long long v137 = *(_OWORD *)(v78 + 192);
        long long v138 = *(_OWORD *)(v78 + 208);
        *(_DWORD *)(v77 + 223) = *(_DWORD *)(v78 + 223);
        *((_OWORD *)v77 + 12) = v137;
        *((_OWORD *)v77 + 13) = v138;
        *((_OWORD *)v77 + 11) = v136;
      }
      else
      {
        int v150 = *(unsigned __int8 *)(v78 + 56);
        if (v150 == 255)
        {
          id v168 = *v128;
          v77[56] = *(unsigned char *)(v78 + 56);
          *(void *)uint64_t v127 = v168;
        }
        else
        {
          id v151 = *v128;
          outlined copy of GraphicsImage.Contents(*v128, *(unsigned char *)(v78 + 56));
          *((void *)v77 + 6) = v151;
          v77[56] = v150;
        }
        *((void *)v77 + 8) = *(void *)(v78 + 64);
        *(_OWORD *)(v77 + 72) = *(_OWORD *)(v78 + 72);
        v77[88] = *(unsigned char *)(v78 + 88);
        long long v169 = *(_OWORD *)(v78 + 92);
        v77[108] = *(unsigned char *)(v78 + 108);
        *(_OWORD *)(v77 + 92) = v169;
        long long v170 = *(_OWORD *)(v78 + 112);
        long long v171 = *(_OWORD *)(v78 + 128);
        v77[144] = *(unsigned char *)(v78 + 144);
        *((_OWORD *)v77 + 7) = v170;
        *((_OWORD *)v77 + 8) = v171;
        v77[145] = *(unsigned char *)(v78 + 145);
        v77[146] = *(unsigned char *)(v78 + 146);
        v77[147] = *(unsigned char *)(v78 + 147);
        unint64_t v172 = *(void *)(v78 + 168);
        if (v172 >> 1 == 0xFFFFFFFF)
        {
          long long v173 = *(_OWORD *)(v78 + 168);
          *(_OWORD *)(v77 + 152) = *(_OWORD *)(v78 + 152);
          *(_OWORD *)(v77 + 168) = v173;
        }
        else
        {
          uint64_t v174 = *(void *)(v78 + 152);
          uint64_t v175 = *(void *)(v78 + 160);
          uint64_t v176 = *(void *)(v78 + 176);
          outlined copy of AccessibilityImageLabel(v174, v175, *(void *)(v78 + 168));
          *((void *)v77 + 19) = v174;
          *((void *)v77 + 20) = v175;
          *((void *)v77 + 21) = v172;
          *((void *)v77 + 22) = v176;
        }
        *((void *)v77 + 23) = *(void *)(v78 + 184);
        *((void *)v77 + 24) = *(void *)(v78 + 192);
        v77[200] = *(unsigned char *)(v78 + 200);
        v77[201] = *(unsigned char *)(v78 + 201);
        int v177 = *(_DWORD *)(v78 + 204);
        v77[208] = *(unsigned char *)(v78 + 208);
        *((_DWORD *)v77 + 51) = v177;
        v178 = *(void **)(v78 + 216);
        *((void *)v77 + 27) = v178;
        *((_WORD *)v77 + 112) = *(_WORD *)(v78 + 224);
        v77[226] = *(unsigned char *)(v78 + 226);
        swift_unknownObjectRetain();
        swift_retain();
        id v179 = v178;
      }
    }
    else if (v129 == 0x1FFFFFFFCLL)
    {
      outlined destroy of Image.Resolved((uint64_t)(v77 + 48));
      long long v141 = *(_OWORD *)(v78 + 96);
      long long v143 = *(_OWORD *)v128;
      long long v142 = *(_OWORD *)(v78 + 64);
      *((_OWORD *)v77 + 5) = *(_OWORD *)(v78 + 80);
      *((_OWORD *)v77 + 6) = v141;
      _OWORD *v127 = v143;
      *((_OWORD *)v77 + 4) = v142;
      long long v144 = *(_OWORD *)(v78 + 160);
      long long v146 = *(_OWORD *)(v78 + 112);
      long long v145 = *(_OWORD *)(v78 + 128);
      *((_OWORD *)v77 + 9) = *(_OWORD *)(v78 + 144);
      *((_OWORD *)v77 + 10) = v144;
      *((_OWORD *)v77 + 7) = v146;
      *((_OWORD *)v77 + 8) = v145;
      long long v148 = *(_OWORD *)(v78 + 192);
      long long v147 = *(_OWORD *)(v78 + 208);
      long long v149 = *(_OWORD *)(v78 + 176);
      *(_DWORD *)(v77 + 223) = *(_DWORD *)(v78 + 223);
      *((_OWORD *)v77 + 12) = v148;
      *((_OWORD *)v77 + 13) = v147;
      *((_OWORD *)v77 + 11) = v149;
    }
    else
    {
      int v152 = *(unsigned __int8 *)(v78 + 56);
      if (v77[56] == 255)
      {
        if (v152 == 255)
        {
          id v184 = *v128;
          v77[56] = *(unsigned char *)(v78 + 56);
          *(void *)uint64_t v127 = v184;
        }
        else
        {
          id v180 = *v128;
          outlined copy of GraphicsImage.Contents(*v128, *(unsigned char *)(v78 + 56));
          *((void *)v77 + 6) = v180;
          v77[56] = v152;
        }
      }
      else if (v152 == 255)
      {
        outlined destroy of GraphicsImage.Contents((uint64_t)(v77 + 48));
        char v183 = *(unsigned char *)(v78 + 56);
        *(void *)uint64_t v127 = *v128;
        v77[56] = v183;
      }
      else
      {
        id v153 = *v128;
        outlined copy of GraphicsImage.Contents(*v128, *(unsigned char *)(v78 + 56));
        uint64_t v154 = (void *)*((void *)v77 + 6);
        *((void *)v77 + 6) = v153;
        char v155 = v77[56];
        v77[56] = v152;
        outlined consume of GraphicsImage.Contents(v154, v155);
      }
      *((void *)v77 + 8) = *(void *)(v78 + 64);
      *((void *)v77 + 9) = *(void *)(v78 + 72);
      *((void *)v77 + 10) = *(void *)(v78 + 80);
      v77[88] = *(unsigned char *)(v78 + 88);
      long long v185 = *(_OWORD *)(v78 + 92);
      v77[108] = *(unsigned char *)(v78 + 108);
      *(_OWORD *)(v77 + 92) = v185;
      long long v186 = *(_OWORD *)(v78 + 112);
      long long v187 = *(_OWORD *)(v78 + 128);
      v77[144] = *(unsigned char *)(v78 + 144);
      *((_OWORD *)v77 + 7) = v186;
      *((_OWORD *)v77 + 8) = v187;
      v77[145] = *(unsigned char *)(v78 + 145);
      v77[146] = *(unsigned char *)(v78 + 146);
      v77[147] = *(unsigned char *)(v78 + 147);
      char v188 = v77 + 152;
      uint64_t v189 = (_OWORD *)(v78 + 152);
      uint64_t v190 = *(void *)(v78 + 168);
      unint64_t v191 = v190 & 0xFFFFFFFFFFFFFFFELL;
      if (*((void *)v77 + 21) >> 1 == 0xFFFFFFFFLL)
      {
        if (v191 == 0x1FFFFFFFELL)
        {
          long long v192 = *(_OWORD *)(v78 + 168);
          *char v188 = *v189;
          *(_OWORD *)(v77 + 168) = v192;
        }
        else
        {
          uint64_t v194 = *(void *)(v78 + 152);
          uint64_t v195 = *(void *)(v78 + 160);
          uint64_t v196 = *(void *)(v78 + 176);
          outlined copy of AccessibilityImageLabel(v194, v195, *(void *)(v78 + 168));
          *((void *)v77 + 19) = v194;
          *((void *)v77 + 20) = v195;
          *((void *)v77 + 21) = v190;
          *((void *)v77 + 22) = v196;
        }
      }
      else if (v191 == 0x1FFFFFFFELL)
      {
        outlined destroy of AccessibilityImageLabel((uint64_t)(v77 + 152));
        long long v193 = *(_OWORD *)(v78 + 168);
        *char v188 = *v189;
        *(_OWORD *)(v77 + 168) = v193;
      }
      else
      {
        uint64_t v197 = *(void *)(v78 + 152);
        uint64_t v198 = *(void *)(v78 + 160);
        uint64_t v199 = *(void *)(v78 + 176);
        outlined copy of AccessibilityImageLabel(v197, v198, *(void *)(v78 + 168));
        uint64_t v200 = *((void *)v77 + 19);
        uint64_t v201 = *((void *)v77 + 20);
        uint64_t v202 = *((void *)v77 + 21);
        *((void *)v77 + 19) = v197;
        *((void *)v77 + 20) = v198;
        *((void *)v77 + 21) = v190;
        *((void *)v77 + 22) = v199;
        outlined consume of AccessibilityImageLabel(v200, v201, v202);
      }
      *((void *)v77 + 23) = *(void *)(v78 + 184);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *((void *)v77 + 24) = *(void *)(v78 + 192);
      swift_retain();
      swift_release();
      v77[200] = *(unsigned char *)(v78 + 200);
      v77[201] = *(unsigned char *)(v78 + 201);
      int v203 = *(_DWORD *)(v78 + 204);
      v77[208] = *(unsigned char *)(v78 + 208);
      *((_DWORD *)v77 + 51) = v203;
      uint64_t v204 = (void *)*((void *)v77 + 27);
      uint64_t v205 = *(void **)(v78 + 216);
      *((void *)v77 + 27) = v205;
      id v206 = v205;

      *((_WORD *)v77 + 112) = *(_WORD *)(v78 + 224);
      v77[226] = *(unsigned char *)(v78 + 226);
    }
    v77[227] = *(unsigned char *)(v78 + 227);
    *((void *)v77 + 29) = *(void *)(v78 + 232);
    swift_retain();
    swift_release();
  }
  uint64_t v207 = (long long *)(v77 + 240);
  v208 = (long long *)(v78 + 240);
  uint64_t v209 = *((void *)v77 + 36);
  uint64_t v210 = *(void *)(v78 + 288);
  if (v209 == 1)
  {
    if (v210 == 1)
    {
      long long v211 = *v208;
      long long v212 = *(_OWORD *)(v78 + 256);
      long long v213 = *(_OWORD *)(v78 + 288);
      *((_OWORD *)v77 + 17) = *(_OWORD *)(v78 + 272);
      *((_OWORD *)v77 + 18) = v213;
LABEL_80:
      *uint64_t v207 = v211;
      v207[1] = v212;
      goto LABEL_92;
    }
    *((void *)v77 + 30) = *(void *)(v78 + 240);
    *((void *)v77 + 31) = *(void *)(v78 + 248);
    *((void *)v77 + 32) = *(void *)(v78 + 256);
    uint64_t v217 = v77 + 264;
    uint64_t v218 = (long long *)(v78 + 264);
    uint64_t v219 = *(void *)(v78 + 288);
    if (v219)
    {
      *((void *)v77 + 36) = v219;
      *((void *)v77 + 37) = *(void *)(v78 + 296);
      (**(void (***)(_OWORD *, long long *))(v219 - 8))(v217, v218);
    }
    else
    {
      long long v222 = *v218;
      long long v223 = *(_OWORD *)(v78 + 280);
      *((void *)v77 + 37) = *(void *)(v78 + 296);
      *uint64_t v217 = v222;
      *(_OWORD *)(v77 + 280) = v223;
    }
  }
  else
  {
    if (v210 == 1)
    {
      outlined destroy of PlatformItem.SelectionContent((uint64_t)(v77 + 240));
      long long v214 = *(_OWORD *)(v78 + 288);
      long long v216 = *v208;
      long long v215 = *(_OWORD *)(v78 + 256);
      *((_OWORD *)v77 + 17) = *(_OWORD *)(v78 + 272);
      *((_OWORD *)v77 + 18) = v214;
      *uint64_t v207 = v216;
      *((_OWORD *)v77 + 16) = v215;
      goto LABEL_92;
    }
    *((_DWORD *)v77 + 60) = *(_DWORD *)(v78 + 240);
    *((_DWORD *)v77 + 61) = *(_DWORD *)(v78 + 244);
    *((_DWORD *)v77 + 62) = *(_DWORD *)(v78 + 248);
    *((_DWORD *)v77 + 63) = *(_DWORD *)(v78 + 252);
    *((void *)v77 + 32) = *(void *)(v78 + 256);
    uint64_t v207 = (long long *)(v77 + 264);
    uint64_t v220 = (long long *)(v78 + 264);
    uint64_t v221 = *(void *)(v78 + 288);
    if (!v209)
    {
      if (v221)
      {
        *((void *)v77 + 36) = v221;
        *((void *)v77 + 37) = *(void *)(v78 + 296);
        (**(void (***)(uint64_t, uint64_t))(v221 - 8))((uint64_t)(v77 + 264), v78 + 264);
        goto LABEL_92;
      }
      long long v211 = *v220;
      long long v212 = *(_OWORD *)(v78 + 280);
      *((void *)v77 + 37) = *(void *)(v78 + 296);
      goto LABEL_80;
    }
    if (v221)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)v77 + 33, (uint64_t *)(v78 + 264));
    }
    else
    {
      outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent((uint64_t)(v77 + 264));
      uint64_t v224 = *(void *)(v78 + 296);
      long long v225 = *(_OWORD *)(v78 + 280);
      *uint64_t v207 = *v220;
      *(_OWORD *)(v77 + 280) = v225;
      *((void *)v77 + 37) = v224;
    }
  }
LABEL_92:
  uint64_t v226 = *(void *)(v78 + 304);
  v77[312] = *(unsigned char *)(v78 + 312);
  *((void *)v77 + 38) = v226;
  *((void *)v77 + 40) = *(void *)(v78 + 320);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_DWORD *)v77 + 82) = *(_DWORD *)(v78 + 328);
  *((_DWORD *)v77 + 83) = *(_DWORD *)(v78 + 332);
  return v5;
}

uint64_t outlined destroy of PlatformItem.PrimaryContent(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithTake for PlatformItemListTextFieldStyle.PlatformItemListWriter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 165) = *(_OWORD *)(a2 + 165);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v8 = *(int *)(v7 + 56);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v11))
  {
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_3(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    uint64_t v15 = v10[1];
    void *v9 = *v10;
    v9[1] = v15;
    uint64_t v16 = *(int *)(v12 + 32);
    char v17 = (char *)v9 + v16;
    long long v18 = (char *)v10 + v16;
    uint64_t v19 = type metadata accessor for TextSelection(0);
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      uint64_t v25 = a3;
      uint64_t v22 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v17, v18, v23);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v17, v18, *(void *)(*(void *)(v22 - 8) + 64));
      }
      v17[*(int *)(v19 + 20)] = v18[*(int *)(v19 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      a3 = v25;
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
  }
  memcpy((void *)(a1 + *(int *)(a3 + 20)), (const void *)(a2 + *(int *)(a3 + 20)), 0x150uLL);
  return a1;
}

uint64_t assignWithTake for PlatformItemListTextFieldStyle.PlatformItemListWriter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  if (*(void *)(a1 + 64))
  {
    if (*(void *)(a2 + 64))
    {
      char v7 = *(unsigned char *)(a2 + 56);
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v9 = *(void *)(a1 + 48);
      char v10 = *(unsigned char *)(a1 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(unsigned char *)(a1 + 56) = v7;
      outlined consume of Text.Storage(v8, v9, v10);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 40);
  }
  long long v11 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v11;
LABEL_6:
  uint64_t v12 = *(void *)(a2 + 168);
  int v13 = *(_DWORD *)(a2 + 176);
  char v14 = *(unsigned char *)(a2 + 180);
  uint64_t v15 = *(void *)(a1 + 72);
  uint64_t v16 = *(void *)(a1 + 80);
  uint64_t v17 = *(void *)(a1 + 88);
  uint64_t v18 = *(void *)(a1 + 96);
  uint64_t v19 = *(void *)(a1 + 104);
  uint64_t v20 = *(void *)(a1 + 112);
  uint64_t v21 = *(void *)(a1 + 120);
  uint64_t v22 = *(void *)(a1 + 128);
  long long v23 = *(_OWORD *)(a1 + 136);
  long long v24 = *(_OWORD *)(a1 + 152);
  uint64_t v25 = *(void *)(a1 + 168);
  int v26 = *(_DWORD *)(a1 + 176);
  char v27 = *(unsigned char *)(a1 + 180);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = v12;
  *(_DWORD *)(a1 + 176) = v13;
  *(unsigned char *)(a1 + 180) = v14;
  outlined consume of StateOrBinding<TextFieldState>(v15, v16, v17, v18, v19, v20, v21, v22, v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25, v26, v27);
  type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v29 = *(int *)(v28 + 56);
  uint64_t v30 = (char *)(a1 + v29);
  uint64_t v31 = (char *)(a2 + v29);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v33 = v32;
  uint64_t v34 = *(void *)(v32 - 8);
  uint64_t v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  int v36 = v35(v30, 1, v32);
  int v37 = v35(v31, 1, v33);
  if (v36)
  {
    if (!v37)
    {
      uint64_t v38 = *((void *)v31 + 1);
      *(void *)uint64_t v30 = *(void *)v31;
      *((void *)v30 + 1) = v38;
      uint64_t v39 = *(int *)(v33 + 32);
      int v40 = &v30[v39];
      char v41 = &v31[v39];
      uint64_t v42 = type metadata accessor for TextSelection(0);
      uint64_t v43 = *(void *)(v42 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
      }
      else
      {
        uint64_t v103 = a3;
        uint64_t v60 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 32))(v40, v41, v61);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v40, v41, *(void *)(*(void *)(v60 - 8) + 64));
        }
        a3 = v103;
        v40[*(int *)(v42 + 20)] = v41[*(int *)(v42 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v30, 0, 1, v33);
      goto LABEL_26;
    }
    goto LABEL_12;
  }
  if (v37)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_0((uint64_t)v30, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
LABEL_12:
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_3(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
    size_t v46 = *(void *)(*(void *)(v45 - 8) + 64);
    uint64_t v47 = v30;
    uint64_t v48 = v31;
LABEL_13:
    memcpy(v47, v48, v46);
    goto LABEL_26;
  }
  uint64_t v49 = a3;
  *(void *)uint64_t v30 = *(void *)v31;
  swift_release();
  *((void *)v30 + 1) = *((void *)v31 + 1);
  swift_release();
  uint64_t v50 = *(int *)(v33 + 32);
  int v51 = &v30[v50];
  uint64_t v52 = &v31[v50];
  uint64_t v53 = type metadata accessor for TextSelection(0);
  uint64_t v54 = *(void *)(v53 - 8);
  uint64_t v55 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
  int v56 = v55(v51, 1, v53);
  int v57 = v55(v52, 1, v53);
  a3 = v49;
  if (v56)
  {
    if (!v57)
    {
      uint64_t v58 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 32))(v51, v52, v59);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v51, v52, *(void *)(*(void *)(v58 - 8) + 64));
      }
      v51[*(int *)(v53 + 20)] = v52[*(int *)(v53 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
      goto LABEL_26;
    }
    goto LABEL_22;
  }
  if (v57)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_0((uint64_t)v51, type metadata accessor for TextSelection);
LABEL_22:
    type metadata accessor for TextSelection?(0);
    size_t v46 = *(void *)(*(void *)(v62 - 8) + 64);
    uint64_t v47 = v51;
    uint64_t v48 = v52;
    goto LABEL_13;
  }
  if (a1 != a2)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_0((uint64_t)v51, type metadata accessor for TextSelection.Indices);
    uint64_t v86 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v87 - 8) + 32))(v51, v52, v87);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v51, v52, *(void *)(*(void *)(v86 - 8) + 64));
    }
  }
  v51[*(int *)(v53 + 20)] = v52[*(int *)(v53 + 20)];
LABEL_26:
  uint64_t v63 = *(int *)(a3 + 20);
  uint64_t v64 = a1 + v63;
  uint64_t v65 = a2 + v63;
  *(void *)(a1 + v63) = *(void *)(a2 + v63);
  swift_bridgeObjectRelease();
  *(void *)(v64 + 8) = *(void *)(v65 + 8);
  *(_DWORD *)(v64 + 16) = *(_DWORD *)(v65 + 16);
  uint64_t v66 = *(void **)(v64 + 24);
  uint64_t v67 = *(void *)(v65 + 24);
  if (v66 == (void *)1)
  {
LABEL_29:
    long long v68 = *(_OWORD *)(v65 + 200);
    *(_OWORD *)(v64 + 184) = *(_OWORD *)(v65 + 184);
    *(_OWORD *)(v64 + 200) = v68;
    *(_OWORD *)(v64 + 216) = *(_OWORD *)(v65 + 216);
    *(void *)(v64 + 232) = *(void *)(v65 + 232);
    long long v69 = *(_OWORD *)(v65 + 136);
    *(_OWORD *)(v64 + 120) = *(_OWORD *)(v65 + 120);
    *(_OWORD *)(v64 + 136) = v69;
    long long v70 = *(_OWORD *)(v65 + 168);
    *(_OWORD *)(v64 + 152) = *(_OWORD *)(v65 + 152);
    *(_OWORD *)(v64 + 168) = v70;
    long long v71 = *(_OWORD *)(v65 + 72);
    *(_OWORD *)(v64 + 56) = *(_OWORD *)(v65 + 56);
    *(_OWORD *)(v64 + 72) = v71;
    long long v72 = *(_OWORD *)(v65 + 104);
    *(_OWORD *)(v64 + 88) = *(_OWORD *)(v65 + 88);
    *(_OWORD *)(v64 + 104) = v72;
    long long v73 = *(_OWORD *)(v65 + 40);
    *(_OWORD *)(v64 + 24) = *(_OWORD *)(v65 + 24);
    *(_OWORD *)(v64 + 40) = v73;
    goto LABEL_51;
  }
  if (v67 == 1)
  {
    outlined destroy of PlatformItem.PrimaryContent(v64 + 24);
    goto LABEL_29;
  }
  *(void *)(v64 + 24) = v67;

  uint64_t v74 = *(void **)(v64 + 32);
  *(void *)(v64 + 32) = *(void *)(v65 + 32);

  uint64_t v75 = *(void **)(v64 + 40);
  *(void *)(v64 + 40) = *(void *)(v65 + 40);

  uint64_t v76 = (void *)(v64 + 48);
  uint64_t v77 = (void *)(v65 + 48);
  if (*(void *)(v64 + 168) >> 1 == 4294967294) {
    goto LABEL_33;
  }
  if (*(void *)(v65 + 168) >> 1 != 4294967294)
  {
    int v83 = *(unsigned __int8 *)(v64 + 56);
    if (v83 != 255)
    {
      int v84 = *(unsigned __int8 *)(v65 + 56);
      if (v84 != 255)
      {
        long long v85 = *(void **)(v64 + 48);
        *(void *)(v64 + 48) = *v77;
        *(unsigned char *)(v64 + 56) = v84;
        outlined consume of GraphicsImage.Contents(v85, v83);
        goto LABEL_44;
      }
      outlined destroy of GraphicsImage.Contents(v64 + 48);
    }
    *uint64_t v76 = *v77;
    *(unsigned char *)(v64 + 56) = *(unsigned char *)(v65 + 56);
LABEL_44:
    *(_OWORD *)(v64 + 64) = *(_OWORD *)(v65 + 64);
    *(void *)(v64 + 80) = *(void *)(v65 + 80);
    *(unsigned char *)(v64 + 88) = *(unsigned char *)(v65 + 88);
    *(_OWORD *)(v64 + 92) = *(_OWORD *)(v65 + 92);
    *(unsigned char *)(v64 + 108) = *(unsigned char *)(v65 + 108);
    long long v88 = *(_OWORD *)(v65 + 128);
    *(_OWORD *)(v64 + 112) = *(_OWORD *)(v65 + 112);
    *(_OWORD *)(v64 + 128) = v88;
    *(unsigned char *)(v64 + 144) = *(unsigned char *)(v65 + 144);
    *(unsigned char *)(v64 + 145) = *(unsigned char *)(v65 + 145);
    unint64_t v89 = *(void *)(v64 + 168);
    *(_WORD *)(v64 + 146) = *(_WORD *)(v65 + 146);
    if (v89 >> 1 != 0xFFFFFFFF)
    {
      unint64_t v90 = *(void *)(v65 + 168);
      if (v90 >> 1 != 0xFFFFFFFF)
      {
        uint64_t v92 = *(void *)(v65 + 176);
        uint64_t v93 = *(void *)(v64 + 152);
        uint64_t v94 = *(void *)(v64 + 160);
        *(_OWORD *)(v64 + 152) = *(_OWORD *)(v65 + 152);
        *(void *)(v64 + 168) = v90;
        *(void *)(v64 + 176) = v92;
        outlined consume of AccessibilityImageLabel(v93, v94, v89);
        goto LABEL_49;
      }
      outlined destroy of AccessibilityImageLabel(v64 + 152);
    }
    long long v91 = *(_OWORD *)(v65 + 168);
    *(_OWORD *)(v64 + 152) = *(_OWORD *)(v65 + 152);
    *(_OWORD *)(v64 + 168) = v91;
LABEL_49:
    *(void *)(v64 + 184) = *(void *)(v65 + 184);
    swift_unknownObjectRelease();
    *(void *)(v64 + 192) = *(void *)(v65 + 192);
    swift_release();
    *(unsigned char *)(v64 + 200) = *(unsigned char *)(v65 + 200);
    *(unsigned char *)(v64 + 201) = *(unsigned char *)(v65 + 201);
    *(_DWORD *)(v64 + 204) = *(_DWORD *)(v65 + 204);
    *(unsigned char *)(v64 + 208) = *(unsigned char *)(v65 + 208);
    long long v95 = *(void **)(v64 + 216);
    *(void *)(v64 + 216) = *(void *)(v65 + 216);

    *(_WORD *)(v64 + 224) = *(_WORD *)(v65 + 224);
    *(unsigned char *)(v64 + 226) = *(unsigned char *)(v65 + 226);
    goto LABEL_50;
  }
  outlined destroy of Image.Resolved(v64 + 48);
LABEL_33:
  long long v78 = *(_OWORD *)(v65 + 192);
  *(_OWORD *)(v64 + 176) = *(_OWORD *)(v65 + 176);
  *(_OWORD *)(v64 + 192) = v78;
  *(_OWORD *)(v64 + 208) = *(_OWORD *)(v65 + 208);
  *(_DWORD *)(v64 + 223) = *(_DWORD *)(v65 + 223);
  long long v79 = *(_OWORD *)(v65 + 128);
  *(_OWORD *)(v64 + 112) = *(_OWORD *)(v65 + 112);
  *(_OWORD *)(v64 + 128) = v79;
  long long v80 = *(_OWORD *)(v65 + 160);
  *(_OWORD *)(v64 + 144) = *(_OWORD *)(v65 + 144);
  *(_OWORD *)(v64 + 160) = v80;
  long long v81 = *(_OWORD *)(v65 + 64);
  *(_OWORD *)uint64_t v76 = *(_OWORD *)v77;
  *(_OWORD *)(v64 + 64) = v81;
  long long v82 = *(_OWORD *)(v65 + 96);
  *(_OWORD *)(v64 + 80) = *(_OWORD *)(v65 + 80);
  *(_OWORD *)(v64 + 96) = v82;
LABEL_50:
  *(unsigned char *)(v64 + 227) = *(unsigned char *)(v65 + 227);
  *(void *)(v64 + 232) = *(void *)(v65 + 232);
  swift_release();
LABEL_51:
  uint64_t v96 = *(void *)(v64 + 288);
  if (v96 == 1)
  {
LABEL_54:
    long long v98 = *(_OWORD *)(v65 + 256);
    *(_OWORD *)(v64 + 240) = *(_OWORD *)(v65 + 240);
    *(_OWORD *)(v64 + 256) = v98;
    long long v99 = *(_OWORD *)(v65 + 288);
    *(_OWORD *)(v64 + 272) = *(_OWORD *)(v65 + 272);
    *(_OWORD *)(v64 + 288) = v99;
    goto LABEL_60;
  }
  uint64_t v97 = *(void *)(v65 + 288);
  if (v97 == 1)
  {
    outlined destroy of PlatformItem.SelectionContent(v64 + 240);
    goto LABEL_54;
  }
  *(_OWORD *)(v64 + 240) = *(_OWORD *)(v65 + 240);
  *(void *)(v64 + 256) = *(void *)(v65 + 256);
  if (v96)
  {
    uint64_t v100 = v64 + 264;
    if (v97) {
      __swift_destroy_boxed_opaque_existential_1(v100);
    }
    else {
      outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent(v100);
    }
  }
  long long v101 = *(_OWORD *)(v65 + 280);
  *(_OWORD *)(v64 + 264) = *(_OWORD *)(v65 + 264);
  *(_OWORD *)(v64 + 280) = v101;
  *(void *)(v64 + 296) = *(void *)(v65 + 296);
LABEL_60:
  *(void *)(v64 + 304) = *(void *)(v65 + 304);
  *(unsigned char *)(v64 + 312) = *(unsigned char *)(v65 + 312);
  *(void *)(v64 + 320) = *(void *)(v65 + 320);
  swift_bridgeObjectRelease();
  *(void *)(v64 + 328) = *(void *)(v65 + 328);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformItemListTextFieldStyle.PlatformItemListWriter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187B63260);
}

uint64_t sub_187B63260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for PlatformItemListTextFieldStyle.PlatformItemListWriter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187B63360);
}

void sub_187B63360(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

void type metadata completion function for PlatformItemListTextFieldStyle.PlatformItemListWriter()
{
  type metadata accessor for TextField<_TextFieldStyleLabel>(319, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

_UNKNOWN **sub_187B63508()
{
  return &protocol witness table for PlatformItemsReader<A, B, C>;
}

_UNKNOWN **base witness table accessor for View in PlatformItemListTextFieldStyle.PlatformItemListWriter()
{
  return &protocol witness table for PlatformItemListTextFieldStyle.PlatformItemListWriter;
}

uint64_t partial apply for implicit closure #1 in static PlatformItemListTextFieldStyle.PlatformItemListWriter._makeView(view:inputs:)()
{
  return implicit closure #1 in static PlatformItemListTextFieldStyle.PlatformItemListWriter._makeView(view:inputs:)(*(void *)(v0 + 16));
}

uint64_t outlined retain of PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  swift_bridgeObjectRetain();
  swift_retain();
  id v3 = v2;
  return a1;
}

unint64_t lazy protocol witness table accessor for type PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems and conformance PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems and conformance PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems;
  if (!lazy protocol witness table cache variable for type PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems and conformance PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems and conformance PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems);
  }
  return result;
}

uint64_t outlined release of PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  swift_release();

  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined assign with take of TextField<_TextFieldStyleLabel>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of PlatformItem(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_187B636F4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void **)(v0 + 64);
  if (v1 != (void *)1)
  {

    uint64_t v2 = *(void *)(v0 + 208);
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    if ((v2 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      int v4 = *(unsigned __int8 *)(v0 + 96);
      if (v4 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(v0 + 88), v4);
        uint64_t v2 = *(void *)(v0 + 208);
        unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v3 != 0x1FFFFFFFELL) {
        outlined consume of AccessibilityImageLabel(*(void *)(v0 + 192), *(void *)(v0 + 200), v2);
      }
      swift_unknownObjectRelease();
      swift_release();
    }
    swift_release();
  }
  if (*(void *)(v0 + 328) >= 2uLL) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 304);
  }
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems.updateValue()(void **a1)
{
  return closure #1 in PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems.updateValue()(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), v1 + 40);
}

uint64_t _s7SwiftUI12PlatformItemV14PrimaryContentVSgWObTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for Binding<TextFieldState>(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t _s7SwiftUI13TextSelectionV7IndicesOWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for Binding<TextFieldState>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t destroy for PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems(uint64_t a1)
{
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v3 = *(void **)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_retain();
  id v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void **)(a1 + 24);
  id v5 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  id v6 = v5;

  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  swift_release();
  uint64_t v4 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems()
{
  return &unk_1ED4595C0;
}

void static SubmitLabel.done.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static SubmitLabel.go.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static SubmitLabel.send.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static SubmitLabel.join.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

void static SubmitLabel.route.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

void static SubmitLabel.search.getter(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

void static SubmitLabel.return.getter(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

void static SubmitLabel.next.getter(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

void static SubmitLabel.continue.getter(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

uint64_t View.submitLabel(_:)()
{
  return swift_release();
}

uint64_t EnvironmentValues.submitLabel.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SubmitLabel> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SubmitLabel> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.submitLabel : EnvironmentValues@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SubmitLabel> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SubmitLabel> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t sub_187B63E18()
{
  return EnvironmentValues.submitLabel.setter();
}

uint64_t EnvironmentValues.submitLabel.setter()
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>();
  lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SubmitLabel> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.returnKey(_:)()
{
  return swift_release();
}

uint64_t sub_187B63FDC()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<SubmitLabel>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SubmitLabel>)
  {
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SubmitLabel>);
    }
  }
}

uint64_t getEnumTagSinglePayload for SubmitLabel(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SubmitLabel(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187B6422CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SubmitLabel.Role()
{
  return &type metadata for SubmitLabel.Role;
}

unint64_t lazy protocol witness table accessor for type SubmitLabel.Role and conformance SubmitLabel.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type SubmitLabel.Role and conformance SubmitLabel.Role;
  if (!lazy protocol witness table cache variable for type SubmitLabel.Role and conformance SubmitLabel.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubmitLabel.Role and conformance SubmitLabel.Role);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SubmitLabel> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.SubmitLabelKey()
{
  return &type metadata for EnvironmentValues.SubmitLabelKey;
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.SubmitLabelKey(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

void static AnimatedValueKeyframeInterpolation.linear.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

ValueMetadata *type metadata accessor for AnimatedValueKeyframeInterpolation()
{
  return &type metadata for AnimatedValueKeyframeInterpolation;
}

unsigned char *storeEnumTagSinglePayload for AnimatedValueKeyframeInterpolation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187B64408);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnimatedValueKeyframeInterpolation.Storage()
{
  return &type metadata for AnimatedValueKeyframeInterpolation.Storage;
}

unint64_t lazy protocol witness table accessor for type AnimatedValueKeyframeInterpolation.Storage and conformance AnimatedValueKeyframeInterpolation.Storage()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatedValueKeyframeInterpolation.Storage and conformance AnimatedValueKeyframeInterpolation.Storage;
  if (!lazy protocol witness table cache variable for type AnimatedValueKeyframeInterpolation.Storage and conformance AnimatedValueKeyframeInterpolation.Storage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatedValueKeyframeInterpolation.Storage and conformance AnimatedValueKeyframeInterpolation.Storage);
  }
  return result;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance NavigationTransitionKey(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  outlined init with copy of _NavigationTransitionOutputs?(a1, (uint64_t)v7);
  uint64_t v4 = v7[4];
  uint64_t result = _s7SwiftUI28_NavigationTransitionOutputsVSgWOhTm_0((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for _NavigationTransitionOutputs?);
  if (v4 == 1)
  {
    uint64_t v6 = _s7SwiftUI28_NavigationTransitionOutputsVSgWOhTm_0(a1, (uint64_t (*)(void))type metadata accessor for _NavigationTransitionOutputs?);
    return a2(v6);
  }
  return result;
}

double AutomaticNavigationTransition._outputs(for:)@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t ZoomNavigationTransition._outputs(for:)@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return outlined init with copy of AnyHashable((uint64_t)(v1 + 1), (uint64_t)(a1 + 1));
}

uint64_t dispatch thunk of NavigationTransition._outputs(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

ValueMetadata *type metadata accessor for _NavigationTransitionInputs()
{
  return &type metadata for _NavigationTransitionInputs;
}

ValueMetadata *type metadata accessor for AutomaticNavigationTransition()
{
  return &type metadata for AutomaticNavigationTransition;
}

uint64_t sub_187B64584()
{
  return swift_getWitnessTable();
}

uint64_t _ViewInputs.requestedDividerRepresentation.setter()
{
  return PropertyList.subscript.setter();
}

uint64_t Divider.Child.value.getter@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  if (result != 2)
  {
    char v4 = result & 1;
    goto LABEL_7;
  }
  if (*MEMORY[0x1E4F4E7A0] != HIDWORD(result))
  {
    type metadata accessor for Axis?();
    double result = AGGraphGetValue();
    char v3 = 0;
    int v5 = *(unsigned __int8 *)result;
    if (v5 == 2) {
      goto LABEL_8;
    }
    char v4 = v5 & 1;
LABEL_7:
    char v3 = v4 ^ 1;
    goto LABEL_8;
  }
  char v3 = 0;
LABEL_8:
  *a2 = v3;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance Divider.Child@<X0>(unsigned char *a1@<X8>)
{
  return Divider.Child.value.getter(*v1 | ((unint64_t)*((unsigned int *)v1 + 1) << 32), a1);
}

void protocol witness for View.body.getter in conformance Divider()
{
}

double key path getter for _ViewInputs.requestedDividerRepresentation : _ViewInputs@<D0>(_OWORD *a1@<X8>)
{
  lazy protocol witness table accessor for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t _GraphInputs.requestedDividerRepresentation.getter()
{
  lazy protocol witness table accessor for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v1;
}

uint64_t _GraphInputs.requestedDividerRepresentation.setter()
{
  return PropertyList.subscript.setter();
}

void (*_ViewInputs.requestedDividerRepresentation.modify(void *a1))(_OWORD **a1)
{
  long long v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = lazy protocol witness table accessor for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  *(_OWORD *)long long v3 = *((_OWORD *)v3 + 1);
  return _ViewInputs.requestedDividerRepresentation.modify;
}

void _ViewInputs.requestedDividerRepresentation.modify(_OWORD **a1)
{
  uint64_t v1 = *a1;
  (*a1)[1] = **a1;
  PropertyList.subscript.setter();

  free(v1);
}

double key path getter for _GraphInputs.requestedDividerRepresentation : _GraphInputs@<D0>(_OWORD *a1@<X8>)
{
  lazy protocol witness table accessor for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

void (*_GraphInputs.requestedDividerRepresentation.modify(void *a1))(_OWORD **a1)
{
  long long v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = lazy protocol witness table accessor for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  *(_OWORD *)long long v3 = *((_OWORD *)v3 + 1);
  return _ViewInputs.requestedDividerRepresentation.modify;
}

_UNKNOWN **base witness table accessor for View in Divider()
{
  return &protocol witness table for Divider;
}

uint64_t sub_187B64B8C()
{
  return PropertyList.subscript.setter();
}

uint64_t sub_187B64BDC()
{
  return PropertyList.subscript.setter();
}

uint64_t dispatch thunk of static PlatformDividerRepresentable.shouldMakeRepresentation(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of static PlatformDividerRepresentable.makeRepresentation(inputs:outputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t getEnumTagSinglePayload for Divider.Child(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && a1[8]) {
    return (*(_DWORD *)a1 + 254);
  }
  if (*a1 <= 2u) {
    int v3 = 2;
  }
  else {
    int v3 = *a1;
  }
  int v4 = v3 - 3;
  if (*a1 < 2u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Divider.Child(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)double result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(unsigned char *)double result = a2 + 2;
    }
  }
  return result;
}

void *type metadata accessor for Divider.Child()
{
  return &unk_1ED466CB8;
}

ValueMetadata *type metadata accessor for _GraphInputs.DividerRepresentationKey()
{
  return &type metadata for _GraphInputs.DividerRepresentationKey;
}

void type metadata accessor for Axis?()
{
  if (!lazy cache variable for type metadata for Axis?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Axis?);
    }
  }
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  int v2 = (uint64_t *)(swift_bridgeObjectRetain() + 80);
  int v3 = (void *)MEMORY[0x1E4FBC860];
  do
  {
    uint64_t v5 = *(v2 - 1);
    if (v5)
    {
      uint64_t v6 = *v2;
      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 16) = v5;
      *(void *)(v7 + 24) = v6;
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
      }
      unint64_t v9 = v3[2];
      unint64_t v8 = v3[3];
      if (v9 >= v8 >> 1) {
        int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v3);
      }
      v3[2] = v9 + 1;
      int v4 = &v3[2 * v9];
      v4[4] = partial apply for thunk for @callee_guaranteed () -> ();
      void v4[5] = v7;
    }
    v2 += 14;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t DropInfoAdaptor.init(_:host:responder:)@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  void (*v12)(uint64_t *__return_ptr, uint64_t);
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  unsigned char v16[48];
  uint64_t v17;
  uint64_t v18;

  swift_unknownObjectWeakInit();
  a4[1] = 0;
  swift_unknownObjectWeakAssign();
  objc_msgSend(a1, sel_locationInView_, a2);
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v17 = v8;
  uint64_t v18 = v10;
  if (static SemanticFeature.isEnabled.getter())
  {
    hostingViewCoordinateSpace.getter();
    v16[40] = 1;
    uint64_t v12 = *(void (**)(uint64_t *__return_ptr, uint64_t))(class metadata base offset for UIViewSnapshotResponder
                                                                + *a3
                                                                + 80);
    int v13 = swift_retain();
    v12(&v15, v13);
    swift_release();
    type metadata accessor for CGPoint(0);
    protocol witness for ViewTransformable.convert(from:transform:) in conformance CGPoint();
    swift_unknownObjectRelease();

    swift_release();
    swift_release();
    double result = outlined destroy of CoordinateSpace((uint64_t)v16);
    uint64_t v9 = v17;
    uint64_t v11 = v18;
  }
  else
  {
    swift_unknownObjectRelease();

    double result = swift_release();
  }
  a4[2] = v9;
  a4[3] = v11;
  return result;
}

uint64_t DragAndDropBridge.itemsInListForSession(_:)()
{
  uint64_t v6 = 0;
  uint64_t result = MEMORY[0x18C119DF0](v0 + direct field offset for DragAndDropBridge.host);
  if (result)
  {
    int v2 = (void *)result;
    type metadata accessor for _UIHostingView();
    swift_getWitnessTable();
    uint64_t v3 = ViewRendererHost.responderNode.getter();

    if (v3)
    {
      MEMORY[0x1F4188790](v4);
      dispatch thunk of ResponderNode.visit(applying:)();
      swift_release();
    }
    uint64_t v5 = MEMORY[0x1E4FBC860];
    swift_release();
    return v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t DragAndDropBridge.outermostDropResponder()()
{
  uint64_t result = MEMORY[0x18C119DF0](v0 + direct field offset for DragAndDropBridge.host);
  if (result)
  {
    int v2 = (void *)result;
    type metadata accessor for _UIHostingView();
    swift_getWitnessTable();
    uint64_t v3 = ViewRendererHost.responderNode.getter();

    if (v3)
    {
      MEMORY[0x1F4188790](v4);
      dispatch thunk of ResponderNode.visit(applying:)();
      swift_release();
      return 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void AnyDragAndDropBridge.outermostDropResponder()()
{
}

void AnyDragAndDropBridge.itemsInListForSession(_:)()
{
}

uint64_t DragAndDropBridge.hitTestedResponder(locationInWindow:)()
{
  MEMORY[0x18C113CA0]();
  uint64_t result = MEMORY[0x18C119DF0](v0 + direct field offset for DragAndDropBridge.host);
  if (result)
  {
    int v2 = (void *)result;
    type metadata accessor for _UIHostingView();
    swift_getWitnessTable();
    uint64_t v3 = ViewRendererHost.responderNode.getter();

    if (v3)
    {
      type metadata accessor for ViewResponder();
      uint64_t v4 = swift_dynamicCastClass();
      if (v4) {
        uint64_t v4 = ViewResponder.hitTest(globalPoint:radius:cacheKey:options:)();
      }
      swift_release();
    }
    else
    {
      uint64_t v4 = 0;
    }
    static Update.end()();
    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id thunk for @escaping @callee_guaranteed () -> (@owned UIDragPreview?)(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = (void *)v1(v2);
  swift_release();

  return v3;
}

uint64_t closure #1 in DragAndDropBridge.itemsInListForSession(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char *a3@<X8>)
{
  v8[5] = a1;
  type metadata accessor for ResponderNode();
  type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for DragPayloadProvider);
  swift_retain();
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    *a2 = a1;
    swift_retain();
    uint64_t result = swift_release();
    char v7 = 2;
  }
  else
  {
    char v7 = 0;
  }
  *a3 = v7;
  return result;
}

void closure #1 in DragAndDropBridge.updateSpringLoadedInteraction(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x18C119DF0](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    specialized DragAndDropBridge.springLoadedInteraction(_:didActivate:)();
  }
}

Class @objc DragAndDropBridge.dragInteraction(_:itemsForBeginning:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  swift_unknownObjectRetain();
  id v7 = a1;
  specialized DragAndDropBridge.dragInteraction(_:itemsForBeginning:)(a4);

  swift_unknownObjectRelease();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIDragItem);
  v8.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v8.super.isa;
}

Class @objc DragAndDropBridge.dragInteraction(_:itemsForAddingTo:withTouchAt:)(void *a1, double a2, double a3, uint64_t a4, void *a5, void *a6)
{
  id v10 = a5;
  swift_unknownObjectRetain();
  id v11 = a1;
  specialized DragAndDropBridge.dragInteraction(_:itemsForAddingTo:withTouchAt:)(a6, a2, a3);

  swift_unknownObjectRelease();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIDragItem);
  v12.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v12.super.isa;
}

id @objc DragAndDropBridge.dragInteraction(_:previewForLifting:session:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  swift_unknownObjectRetain();
  id v8 = a1;
  uint64_t v9 = (void *)specialized DragAndDropBridge.dragInteraction(_:previewForLifting:session:)(v7);

  swift_unknownObjectRelease();

  return v9;
}

id @objc DragAndDropBridge.dragInteraction(_:previewForCancelling:withDefault:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  return @objc DragAndDropBridge.dragInteraction(_:previewForCancelling:withDefault:)(a1, a2, a3, a4, a5, (uint64_t (*)(id, id))specialized DragAndDropBridge.dragInteraction(_:previewForCancelling:withDefault:));
}

uint64_t @objc DragAndDropBridge.dragInteraction(_:prefersFullSizePreviewsFor:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  swift_unknownObjectRetain();
  id v7 = a1;
  char v8 = specialized DragAndDropBridge.dragInteraction(_:prefersFullSizePreviewsFor:)(a4);

  swift_unknownObjectRelease();
  return v8 & 1;
}

uint64_t closure #2 in DragAndDropBridge.dragInteraction(_:willAnimateLiftWith:session:)(uint64_t result, uint64_t a2)
{
  if (result) {
    char v2 = 2;
  }
  else {
    char v2 = 1;
  }
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    uint64_t v4 = a2 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of DragContext(v4, (uint64_t)v7);
      uint64_t v5 = v8;
      outlined copy of AppIntentExecutor?((uint64_t)v8);
      outlined destroy of DragContext((uint64_t)v7);
      if (v5)
      {
        char v6 = v2;
        v5(&v6);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v5);
      }
      v4 += 112;
      --v3;
    }
    while (v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UIViewAnimatingPosition) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

void @objc DragAndDropBridge.dragInteraction(_:willAnimateLiftWith:session:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8 = a3;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  id v9 = a1;
  specialized DragAndDropBridge.dragInteraction(_:willAnimateLiftWith:session:)(a4, a5);

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
}

uint64_t closure #1 in DragAndDropBridge.dragInteraction(_:item:willAnimateCancelWith:)(uint64_t result, id a2)
{
  if (result) {
    return result;
  }
  uint64_t v17 = v2;
  uint64_t v18 = v3;
  if (objc_msgSend(a2, sel_localObject))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v7, 0, 32);
  }
  uint64_t v4 = MEMORY[0x1E4FBC840] + 8;
  _sypSgWObTm_0((uint64_t)v7, (uint64_t)&v10, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
  if (!*((void *)&v11 + 1))
  {
    _sypSgWOhTm_6((uint64_t)&v10, (unint64_t *)&lazy cache variable for type metadata for Any?, v4);
    goto LABEL_9;
  }
  type metadata accessor for DragSourceContext();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    goto LABEL_10;
  }
  swift_retain();
  swift_release();
  DragPayload.resolve()((uint64_t)&v10);
  swift_release();
LABEL_10:
  outlined init with copy of DropDestination?((uint64_t)&v10, (uint64_t)v7, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
  if (v9)
  {
    uint64_t v5 = v8;
    outlined copy of AppIntentExecutor?((uint64_t)v8);
    outlined destroy of DragContext((uint64_t)v7);
    if (v5)
    {
      v5(1);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v5);
    }
    char v6 = &v10;
  }
  else
  {
    _sypSgWOhTm_6((uint64_t)&v10, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
    char v6 = v7;
  }
  return _sypSgWOhTm_6((uint64_t)v6, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
}

void @objc DragAndDropBridge.dragInteraction(_:item:willAnimateCancelWith:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8 = a3;
  id v9 = a4;
  swift_unknownObjectRetain();
  id v10 = a1;
  specialized DragAndDropBridge.dragInteraction(_:item:willAnimateCancelWith:)(v9, a5);

  swift_unknownObjectRelease();
}

void @objc DragAndDropBridge.dragInteraction(_:sessionWillBegin:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
}

id @objc DragAndDropBridge._dragInteraction(_:sessionPropertiesForSession:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  swift_unknownObjectRetain();
  id v7 = a1;
  id v8 = specialized DragAndDropBridge._dragInteraction(_:sessionPropertiesForSession:)(a4);

  swift_unknownObjectRelease();

  return v8;
}

void @objc DragAndDropBridge.dragInteraction(_:session:didEndWith:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  swift_unknownObjectRetain();
  id v5 = a1;
  specialized DragAndDropBridge.dragInteraction(_:session:didEndWith:)();

  swift_unknownObjectRelease();
}

void *DragAndDropBridge.dropResponder(from:)(void *a1)
{
  uint64_t result = DragAndDropBridge.hitTestedResponder(session:)(a1);
  if (result)
  {
    type metadata accessor for DragDropDefaultPreviewResponder & DropPayloadProvider();
    ResponderNode.firstAncestor<A>(ofType:)();
    swift_release();
    return (void *)v2;
  }
  return result;
}

uint64_t closure #1 in DragAndDropBridge.outermostDropResponder()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char *a3@<X8>)
{
  type metadata accessor for DragDropDefaultPreviewResponder();
  uint64_t result = dynamic_cast_existential_1_superclass_conditional(a1);
  if (result)
  {
    *a2 = result;
    a2[1] = v7;
    swift_retain();
    uint64_t result = swift_release();
    char v8 = 2;
  }
  else
  {
    char v8 = 0;
  }
  *a3 = v8;
  return result;
}

id @objc DragAndDropBridge.dropInteraction(_:sessionDidUpdate:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  swift_unknownObjectRetain();
  id v7 = a1;
  specialized DragAndDropBridge.dropInteraction(_:sessionDidUpdate:)(a4);
  id v9 = v8;

  swift_unknownObjectRelease();

  return v9;
}

void @objc DragAndDropBridge.dropInteraction(_:sessionDidEnter:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
}

void @objc DragAndDropBridge.dropInteraction(_:sessionDidExit:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
}

void @objc DragAndDropBridge.dropInteraction(_:sessionDidEnd:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
}

void @objc DragAndDropBridge.dropInteraction(_:performDrop:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
}

void @objc DragAndDropBridge.dropInteraction(_:item:willAnimateDropWith:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8 = a3;
  id v9 = a4;
  swift_unknownObjectRetain();
  id v10 = a1;
  specialized DragAndDropBridge.dropInteraction(_:item:willAnimateDropWith:)(v9, a5);

  swift_unknownObjectRelease();
}

void @objc DragAndDropBridge.dropInteraction(_:concludeDrop:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
}

void @objc DragAndDropBridge.dragInteraction(_:sessionWillBegin:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(uint64_t))
{
  id v8 = a3;
  swift_unknownObjectRetain();
  id v9 = a1;
  a5(a4);

  swift_unknownObjectRelease();
}

id @objc DragAndDropBridge.dropInteraction(_:previewForDropping:withDefault:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  return @objc DragAndDropBridge.dragInteraction(_:previewForCancelling:withDefault:)(a1, a2, a3, a4, a5, (uint64_t (*)(id, id))specialized DragAndDropBridge.dropInteraction(_:previewForDropping:withDefault:));
}

id @objc DragAndDropBridge.dragInteraction(_:previewForCancelling:withDefault:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t (*a6)(id, id))
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a1;
  long long v14 = (void *)a6(v11, v12);

  return v14;
}

uint64_t DragAndDropBridge.__ivar_destroyer()
{
  swift_unknownObjectWeakDestroy();

  swift_release();
  _sypSgWOhTm_6(v0 + direct field offset for DragAndDropBridge.activeDrop, &lazy cache variable for type metadata for DropDestination?, (uint64_t)&type metadata for DropDestination);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(void *)(v0 + direct field offset for DragAndDropBridge.onSessionBegan));
  uint64_t v1 = *(void *)(v0 + direct field offset for DragAndDropBridge.onSessionEnded);

  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
}

uint64_t type metadata completion function for DragAndDropBridge.SpringLoadedEffect()
{
  return swift_initClassMetadata2();
}

void DragAndDropBridge.SpringLoadedEffect.bridge.getter()
{
}

void DragAndDropBridge.SpringLoadedEffect.blinkTimer.setter(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + direct field offset for DragAndDropBridge.SpringLoadedEffect.blinkTimer);
  *(void *)(v1 + direct field offset for DragAndDropBridge.SpringLoadedEffect.blinkTimer) = a1;
}

void DragAndDropBridge.SpringLoadedEffect.previousHighlightState.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + direct field offset for DragAndDropBridge.SpringLoadedEffect.previousHighlightState);
}

unsigned char *DragAndDropBridge.SpringLoadedEffect.previousHighlightState.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + direct field offset for DragAndDropBridge.SpringLoadedEffect.previousHighlightState) = *result;
  return result;
}

void closure #1 in DragAndDropBridge.SpringLoadedEffect.interaction(_:didChangeWith:)(void *a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x18C119DF0](v3);
  if (v4)
  {
    id v5 = (void *)v4;
    if (*(unsigned char *)(v4 + direct field offset for DragAndDropBridge.SpringLoadedEffect.previousHighlightState) == 2) {
      unsigned __int8 v6 = 1;
    }
    else {
      unsigned __int8 v6 = 2;
    }
    unsigned __int8 v7 = v6;
    specialized DragAndDropBridge.SpringLoadedEffect.updateHighlightState(_:interaction:)(&v7);
  }
  else
  {
    objc_msgSend(a1, sel_invalidate);
  }
}

void thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

void @objc DragAndDropBridge.SpringLoadedEffect.interaction(_:didChangeWith:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  swift_unknownObjectRetain();
  id v7 = a1;
  DragAndDropBridge.SpringLoadedEffect.interaction(_:didChangeWith:)(v6, a4);

  swift_unknownObjectRelease();
}

uint64_t @objc DragAndDropBridge.SpringLoadedEffect.init()(void *a1, uint64_t a2)
{
  return @objc DragAndDropBridge.SpringLoadedEffect.init()(a1, a2, (uint64_t (*)(void, void))specialized DragAndDropBridge.SpringLoadedEffect.init());
}

id DragAndDropBridge.SpringLoadedEffect.__deallocating_deinit()
{
  return DragAndDropBridge.SpringLoadedEffect.__deallocating_deinit((uint64_t (*)(void, void, void))type metadata accessor for DragAndDropBridge.SpringLoadedEffect);
}

void @objc DragAndDropBridge.SpringLoadedEffect.__ivar_destroyer(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  uint64_t v2 = *(void **)(a1 + direct field offset for DragAndDropBridge.SpringLoadedEffect.blinkTimer);
}

uint64_t type metadata accessor for DragAndDropBridge.SpringLoadedEffect()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for DragAndDropBridge.SpringLoadedBehavior()
{
  return swift_initClassMetadata2();
}

void DragAndDropBridge.SpringLoadedBehavior.bridge.getter()
{
}

uint64_t DragAndDropBridge.SpringLoadedBehavior.shouldAllow(_:with:)(uint64_t a1, void *a2)
{
  uint64_t v5 = MEMORY[0x18C119DF0](v2 + direct field offset for DragAndDropBridge.SpringLoadedBehavior.bridge);
  if (v5)
  {
    id v6 = (void *)v5;
    if (objc_msgSend(*(id *)(v2 + direct field offset for DragAndDropBridge.SpringLoadedBehavior.base), sel_shouldAllowInteraction_withContext_, a1, a2))char v7 = specialized DragAndDropBridge.shouldAllow(_:with:)(a2); {
    else
    }
      char v7 = 0;
  }
  else
  {
    char v7 = 0;
  }
  return v7 & 1;
}

uint64_t @objc DragAndDropBridge.SpringLoadedBehavior.shouldAllow(_:with:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  swift_unknownObjectRetain();
  id v7 = a1;
  char v8 = DragAndDropBridge.SpringLoadedBehavior.shouldAllow(_:with:)((uint64_t)v6, a4);

  swift_unknownObjectRelease();
  return v8 & 1;
}

uint64_t @objc DragAndDropBridge.SpringLoadedBehavior.init()(void *a1, uint64_t a2)
{
  return @objc DragAndDropBridge.SpringLoadedEffect.init()(a1, a2, (uint64_t (*)(void, void))specialized DragAndDropBridge.SpringLoadedBehavior.init());
}

uint64_t @objc DragAndDropBridge.SpringLoadedEffect.init()(void *a1, uint64_t a2, uint64_t (*a3)(void, void))
{
  return a3(*(void *)((*MEMORY[0x1E4FBC8C8] & *a1) + 0x50), *(void *)((*MEMORY[0x1E4FBC8C8] & *a1) + 0x58));
}

id DragAndDropBridge.SpringLoadedBehavior.__deallocating_deinit()
{
  return DragAndDropBridge.SpringLoadedEffect.__deallocating_deinit((uint64_t (*)(void, void, void))type metadata accessor for DragAndDropBridge.SpringLoadedBehavior);
}

id DragAndDropBridge.SpringLoadedEffect.__deallocating_deinit(uint64_t (*a1)(void, void, void))
{
  uint64_t v2 = (objc_class *)a1(0, *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x50), *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x58));
  v4.receiver = v1;
  v4.super_class = v2;
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

uint64_t @objc DragAndDropBridge.SpringLoadedBehavior.__ivar_destroyer()
{
  swift_unknownObjectWeakDestroy();

  return swift_unknownObjectRelease();
}

uint64_t type metadata accessor for DragAndDropBridge.SpringLoadedBehavior()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t DragSourceContext.__deallocating_deinit()
{
  uint64_t v1 = *(void *)(v0 + 24);
  memset(v3, 0, sizeof(v3));
  swift_beginAccess();
  swift_retain();
  outlined assign with take of DragContext?((uint64_t)v3, v1 + 152, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
  swift_endAccess();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DragSourceContext()
{
  return self;
}

uint64_t DropInfoTargetStore.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DropInfoTargetStore()
{
  return self;
}

uint64_t initializeWithCopy for DropDestination(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_weakCopyInit();
  *(void *)(v4 + 8) = *(void *)(a2 + 8);
  uint64_t v5 = v4 + 16;
  id v6 = (_OWORD *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 40);
  if (v7)
  {
    uint64_t v8 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = v7;
    *(void *)(a1 + 48) = v8;
    (**(void (***)(uint64_t, _OWORD *))(v7 - 8))(v5, v6);
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)uint64_t v5 = *v6;
    *(_OWORD *)(v5 + 16) = v9;
    *(void *)(v5 + 32) = *(void *)(a2 + 48);
  }
  uint64_t v10 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v10;
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DropDestination(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_weakCopyAssign();
  v4[1] = *(void *)(a2 + 8);
  uint64_t v5 = v4 + 2;
  uint64_t v6 = *(void *)(a2 + 40);
  if (!v4[5])
  {
    if (v6)
    {
      *(void *)(a1 + 40) = v6;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(v4 + 2), a2 + 16);
      goto LABEL_8;
    }
LABEL_7:
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v8 = *(_OWORD *)(a2 + 32);
    void v5[4] = *(void *)(a2 + 48);
    *(_OWORD *)uint64_t v5 = v7;
    *((_OWORD *)v5 + 1) = v8;
    goto LABEL_8;
  }
  if (!v6)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v4 + 2));
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1(v4 + 2, (uint64_t *)(a2 + 16));
LABEL_8:
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

__n128 initializeWithTake for DropDestination(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = swift_weakTakeInit();
  *(void *)(v3 + 8) = *(void *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v3 + 32) = v4;
  __n128 result = *(__n128 *)(a2 + 48);
  *(__n128 *)(v3 + 48) = result;
  *(void *)(v3 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(v3 + 72) = *(unsigned char *)(a2 + 72);
  return result;
}

uint64_t assignWithTake for DropDestination(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_weakTakeAssign();
  *(void *)(v4 + 8) = *(void *)(a2 + 8);
  uint64_t v5 = v4 + 16;
  if (*(void *)(v4 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v4 + 16);
  }
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(v5 + 32) = *(void *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = v7;
  *(void *)(a1 + 64) = v8;
  swift_release();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

uint64_t storeEnumTagSinglePayload for DropDestination(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      *(void *)(result + 8) = 1;
      return result;
    }
    *(unsigned char *)(result + 73) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DropDestination()
{
  return &type metadata for DropDestination;
}

uint64_t DropInfoAdaptor.localDragContexts.getter()
{
  uint64_t v1 = (void *)MEMORY[0x18C119DF0](v0);
  uint64_t v2 = MEMORY[0x1E4FBC840];
  if (!v1
    || (id v3 = objc_msgSend(v1, sel_localDragSession),
        swift_unknownObjectRelease(),
        !v3))
  {
    long long v7 = 0u;
    long long v8 = 0u;
LABEL_10:
    _sypSgWOhTm_6((uint64_t)&v7, (unint64_t *)&lazy cache variable for type metadata for Any?, v2 + 8);
    return MEMORY[0x1E4FBC860];
  }
  id v4 = objc_msgSend(v3, sel_localContext);
  swift_unknownObjectRelease();
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  _sypSgWObTm_0((uint64_t)v6, (uint64_t)&v7, (unint64_t *)&lazy cache variable for type metadata for Any?, v2 + 8);
  if (!*((void *)&v8 + 1)) {
    goto LABEL_10;
  }
  _sypSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for [Any], v2 + 8, MEMORY[0x1E4FBB320]);
  if (swift_dynamicCast()) {
    return *(void *)&v6[0];
  }
  return MEMORY[0x1E4FBC860];
}

uint64_t UIDropSession.registeredContentTypes()()
{
  uint64_t v1 = type metadata accessor for UTType();
  uint64_t v37 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  id v3 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v5 = MEMORY[0x1F4188790](v4);
  uint64_t v47 = (char *)&v33 - v6;
  id v7 = objc_msgSend(v0, sel_items, v5);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIDragItem);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v8 >> 62) {
    goto LABEL_24;
  }
  uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v9)
  {
    unint64_t v10 = 0;
    unint64_t v38 = v8 & 0xC000000000000001;
    unint64_t v33 = v8 + 32;
    uint64_t v34 = v8 & 0xFFFFFFFFFFFFFF8;
    uint64_t v46 = v37 + 16;
    id v11 = (void (**)(char *, uint64_t))(v37 + 8);
    uint64_t v12 = MEMORY[0x1E4FBC870];
    uint64_t v35 = v9;
    unint64_t v36 = v8;
    while (1)
    {
      if (v38)
      {
        id v13 = (id)MEMORY[0x18C117680](v10, v8);
      }
      else
      {
        if (v10 >= *(void *)(v34 + 16)) {
          goto LABEL_23;
        }
        id v13 = *(id *)(v33 + 8 * v10);
      }
      long long v14 = v13;
      if (__OFADD__(v10++, 1)) {
        break;
      }
      id v16 = objc_msgSend(v13, sel_itemProvider);
      id v17 = objc_msgSend(v16, sel_registeredContentTypes);

      uint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v43 = *(void *)(v18 + 16);
      if (v43)
      {
        id v40 = v14;
        unint64_t v41 = v10;
        uint64_t v19 = 0;
        uint64_t v20 = *(unsigned __int8 *)(v37 + 80);
        uint64_t v39 = v18;
        uint64_t v42 = v18 + ((v20 + 32) & ~v20);
        uint64_t v45 = *(void *)(v37 + 72);
        uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 16);
        do
        {
          uint64_t v44 = v19;
          v21(v47, v42 + v45 * v19, v1);
          lazy protocol witness table accessor for type UTType and conformance UTType(&lazy protocol witness table cache variable for type UTType and conformance UTType);
          swift_bridgeObjectRetain();
          uint64_t v24 = dispatch thunk of Hashable._rawHashValue(seed:)();
          uint64_t v25 = -1 << *(unsigned char *)(v12 + 32);
          unint64_t v26 = v24 & ~v25;
          uint64_t v27 = v12 + 56;
          if ((*(void *)(v12 + 56 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26))
          {
            uint64_t v28 = ~v25;
            while (1)
            {
              uint64_t v29 = v12;
              v21(v3, *(void *)(v12 + 48) + v26 * v45, v1);
              lazy protocol witness table accessor for type UTType and conformance UTType((unint64_t *)&lazy protocol witness table cache variable for type UTType and conformance UTType);
              char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
              uint64_t v31 = *v11;
              (*v11)(v3, v1);
              if (v30) {
                break;
              }
              unint64_t v26 = (v26 + 1) & v28;
              uint64_t v12 = v29;
              if (((*(void *)(v27 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26) & 1) == 0) {
                goto LABEL_12;
              }
            }
            swift_bridgeObjectRelease();
            v31(v47, v1);
            uint64_t v12 = v29;
          }
          else
          {
LABEL_12:
            swift_bridgeObjectRelease();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            long long v23 = v47;
            v21(v3, (uint64_t)v47, v1);
            uint64_t v48 = v12;
            specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v3, v26, isUniquelyReferenced_nonNull_native);
            uint64_t v12 = v48;
            swift_bridgeObjectRelease();
            (*v11)(v23, v1);
          }
          uint64_t v19 = v44 + 1;
        }
        while (v44 + 1 != v43);

        swift_bridgeObjectRelease();
        uint64_t v9 = v35;
        unint64_t v8 = v36;
        unint64_t v10 = v41;
        if (v41 == v35)
        {
LABEL_21:
          swift_bridgeObjectRelease();
          return v12;
        }
      }
      else
      {

        swift_bridgeObjectRelease();
        if (v10 == v9) {
          goto LABEL_21;
        }
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E4FBC870];
}

void thunk for @escaping @callee_guaranteed (@guaranteed UISpringLoadedInteraction, @guaranteed UISpringLoadedInteractionContext) -> ()(uint64_t a1, void *a2, uint64_t a3)
{
  double v5 = *(void (**)(id, uint64_t))(a1 + 32);
  swift_retain();
  id v6 = a2;
  swift_unknownObjectRetain();
  v5(v6, a3);
  swift_release();
  swift_unknownObjectRelease();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI12DraggingItemVG_So06UIDragG0Cs5NeverOTg503_s7d77UI17DragAndDropBridgeC9dragItems33_1C4DED7BD95AC993CC69F2CB25BC2A40LLySaySo10hg54CGAA0cE23DefaultPreviewResponderC_AA0C7PayloadCtFAgA08F8S0VXEfU_AF0lN23DefaultPreviewResponderCAF0L13SourceContextCTf1cn_nTf4ngg_n(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v4)
  {
    uint64_t v19 = MEMORY[0x1E4FBC860];
    uint64_t v8 = specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v9 = (id *)(a1 + 32);
    char v10 = (*(uint64_t (**)(uint64_t))(class metadata base offset for DragDropDefaultPreviewResponder + *a2 + 64))(v8);
    do
    {
      id v11 = *v9;
      id v12 = objc_msgSend(v11, sel_preferredPresentationSize);
      if (v14 == 0.0 && v13 == 0.0)
      {
        (*(void (**)(id))(class metadata base offset for DragDropDefaultPreviewResponder + *a2 + 32))(v12);
        objc_msgSend(v11, sel_setPreferredPresentationSize_);
      }
      id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1710]), sel_initWithItemProvider_, v11);
      objc_msgSend(v15, sel_setLocalObject_, a3);
      if (v10)
      {
        uint64_t v16 = swift_allocObject();
        *(void *)(v16 + 16) = partial apply for implicit closure #2 in implicit closure #1 in closure #1 in DragAndDropBridge.dragItems(_:_:);
        *(void *)(v16 + 24) = a2;
        aBlock[4] = partial apply for closure #1 in closure #1 in DragAndDropBridge.dragItems(_:_:);
        aBlock[5] = v16;
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed () -> (@owned UIDragPreview?);
        aBlock[3] = &block_descriptor_22;
        id v17 = _Block_copy(aBlock);
        swift_retain_n();
        swift_release();
        objc_msgSend(v15, sel_setPreviewProvider_, v17);

        _Block_release(v17);
        swift_release();
      }
      else
      {
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      ++v9;
      --v4;
    }
    while (v4);
    return v19;
  }
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t a2)
{
  unint64_t v3 = a1;
  uint64_t v23 = MEMORY[0x1E4FBC860];
  if (a1 >> 62) {
    goto LABEL_21;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      unint64_t v17 = v3;
      unint64_t v5 = 0;
      uint64_t v21 = v3 & 0xFFFFFFFFFFFFFF8;
      unint64_t v22 = v3 & 0xC000000000000001;
      uint64_t v19 = a2;
      unint64_t v20 = v3 + 32;
      uint64_t v18 = v4;
      while (v22)
      {
        id v6 = (id)MEMORY[0x18C117680](v5, v17);
LABEL_9:
        id v7 = v6;
        if (__OFADD__(v5++, 1)) {
          goto LABEL_20;
        }
        uint64_t v9 = *(void *)(a2 + 16);
        if (v9)
        {
          uint64_t v10 = *(void *)(type metadata accessor for UTType() - 8);
          unint64_t v3 = a2 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
          uint64_t v11 = *(void *)(v10 + 72);
          swift_bridgeObjectRetain();
          while (1)
          {
            id v12 = objc_msgSend(v7, sel_itemProvider);
            uint64_t v13 = UTType.identifier.getter();
            double v14 = (void *)MEMORY[0x18C115780](v13);
            swift_bridgeObjectRelease();
            unsigned __int8 v15 = objc_msgSend(v12, sel_hasItemConformingToTypeIdentifier_, v14);

            if (v15) {
              break;
            }
            v3 += v11;
            if (!--v9)
            {

              a2 = v19;
              swift_bridgeObjectRelease();
              goto LABEL_16;
            }
          }
          a2 = v19;
          swift_bridgeObjectRelease();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          unint64_t v3 = (unint64_t)&v23;
          specialized ContiguousArray._endMutation()();
LABEL_16:
          uint64_t v4 = v18;
        }
        else
        {
        }
        if (v5 == v4) {
          return v23;
        }
      }
      if (v5 < *(void *)(v21 + 16)) {
        break;
      }
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4) {
        return MEMORY[0x1E4FBC860];
      }
    }
    id v6 = *(id *)(v20 + 8 * v5);
    goto LABEL_9;
  }
  return MEMORY[0x1E4FBC860];
}

{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;

  uint64_t v11 = MEMORY[0x1E4FBC860];
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      unint64_t v5 = 0;
      id v6 = OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id;
      uint64_t v10 = OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v7 = (char *)MEMORY[0x18C117680](v5, a1);
LABEL_9:
        uint64_t v8 = v5 + 1;
        if (__OFADD__(v5, 1)) {
          goto LABEL_15;
        }
        if (*(void *)&v7[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id] == *(void *)(a2 + v6))
        {
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          id v6 = v10;
        }
        ++v5;
        if (v8 == v4) {
          return v11;
        }
      }
      if (v5 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4) {
        return MEMORY[0x1E4FBC860];
      }
    }
    id v7 = (char *)*(id *)(a1 + 8 * v5 + 32);
    goto LABEL_9;
  }
  return MEMORY[0x1E4FBC860];
}

id specialized DragAndDropBridge.SpringLoadedBehavior.init(bridge:)()
{
  swift_unknownObjectWeakInit();
  uint64_t v1 = direct field offset for DragAndDropBridge.SpringLoadedBehavior.base;
  uint64_t v2 = self;
  unint64_t v3 = v0;
  *(void *)&v0[v1] = objc_msgSend(v2, sel__defaultInteractionBehavior);
  swift_unknownObjectWeakAssign();

  v5.receiver = v3;
  v5.super_class = (Class)type metadata accessor for DragAndDropBridge.SpringLoadedBehavior();
  return objc_msgSendSuper2(&v5, sel_init);
}

id specialized DragAndDropBridge.SpringLoadedEffect.init(bridge:)()
{
  swift_unknownObjectWeakInit();
  *(void *)&v0[direct field offset for DragAndDropBridge.SpringLoadedEffect.blinkTimer] = 0;
  v0[direct field offset for DragAndDropBridge.SpringLoadedEffect.previousHighlightState] = 0;
  swift_unknownObjectWeakAssign();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DragAndDropBridge.SpringLoadedEffect();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t specialized DragAndDropBridge.SpringLoadedBehavior.__allocating_init(bridge:)(uint64_t a1, uint64_t (*a2)(void, void, void), uint64_t (*a3)(uint64_t))
{
  id v6 = objc_allocWithZone((Class)a2(0, *(void *)(v3 + 80), *(void *)(v3 + 88)));
  return a3(a1);
}

id specialized static UIDropProposal.fromActiveDrop(_:session:responder:host:)(void *a1, void *a2, uint64_t *a3, uint64_t a4, void *a5)
{
  void (*v15)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  BOOL v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(long long *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  void (*v38)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v39;
  void *v40;
  id v41;
  ValueMetadata *v42;
  _UNKNOWN **v43;
  ValueMetadata *v44;
  _UNKNOWN **v45;
  ValueMetadata *v46;
  _UNKNOWN **v47;
  uint64_t v48;
  uint64_t v49;
  long long *v50;
  long long *v51;
  void *v53;
  _OWORD v54[2];
  uint64_t v55;
  long long v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  void v63[5];
  long long v64;
  ValueMetadata *v65;
  _UNKNOWN **v66;

  uint64_t v10 = a1 + 2;
  if (*a1) {
    BOOL v11 = 0;
  }
  else {
    BOOL v11 = a1[1] == 1;
  }
  if (v11 || (uint64_t Strong = swift_weakLoadStrong()) == 0)
  {
    if (!a3) {
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v13 = (uint64_t *)Strong;
    swift_unknownObjectRelease();
    if (!a3)
    {
      unint64_t v22 = 1;
      goto LABEL_13;
    }
    if (v13 == a3)
    {
      uint64_t v14 = *v13;
      v63[0] = v13;
      unsigned __int8 v15 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(a4 + 8);
      swift_retain();
      v15(&v64, v14, a4);
      if (v65)
      {
        outlined init with take of OptionalBinaryInteger(&v64, (uint64_t)&v56);
        uint64_t v65 = &type metadata for DropInfoAdaptor;
        uint64_t v66 = &protocol witness table for DropInfoAdaptor;
        uint64_t v16 = swift_allocObject();
        unint64_t v17 = (void *)(v16 + 16);
        *(void *)&uint64_t v64 = v16;
        swift_unknownObjectRetain();
        uint64_t v18 = a5;
        swift_retain();
        DropInfoAdaptor.init(_:host:responder:)(a2, v18, v13, v17);
        uint64_t v19 = v58;
        unint64_t v20 = v59;
        __swift_project_boxed_opaque_existential_1(&v56, v58);
        (*(void (**)(void *__return_ptr, long long *, uint64_t, uint64_t))(v20 + 32))(v63, &v64, v19, v20);
        uint64_t v21 = LOBYTE(v63[0]);
        switch(LOBYTE(v63[0]))
        {
          case 1:
            uint64_t v21 = 1;
            goto LABEL_34;
          case 2:
            uint64_t v21 = 2;
            goto LABEL_34;
          case 3:
            uint64_t v21 = 3;
            goto LABEL_34;
          case 4:
            if (!*a1 && a1[1] == 1) {
              goto LABEL_44;
            }
            outlined destroy of DropInfo((uint64_t)&v64);
            swift_release();
            uint64_t v21 = a1[7];
            break;
          default:
LABEL_34:
            if (!*a1 && a1[1] == 1)
            {
              __break(1u);
LABEL_44:
              __break(1u);
              JUMPOUT(0x187B68330);
            }
            outlined destroy of DropInfo((uint64_t)&v64);
            swift_release();
            a1[7] = v21;
            break;
        }
        uint64_t v50 = &v56;
        goto LABEL_38;
      }
      swift_release();
      int v51 = &v64;
LABEL_26:
      outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v51, (unint64_t *)&lazy cache variable for type metadata for DropDelegate?, &lazy cache variable for type metadata for DropDelegate);
      goto LABEL_30;
    }
  }
  unint64_t v22 = 0;
LABEL_13:
  if (*a1) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = a1[1] == 1;
  }
  if (!v23)
  {
    uint64_t v24 = (void *)swift_weakLoadStrong();
    if (v24)
    {
      uint64_t v25 = v24;
      unint64_t v26 = a1[1];
      uint64_t v27 = *v24;
      v63[0] = v24;
      (*(void (**)(long long *__return_ptr, uint64_t))(v26 + 8))(&v64, v27);
      if (!v65)
      {
        swift_release();
        outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v64, (unint64_t *)&lazy cache variable for type metadata for DropDelegate?, &lazy cache variable for type metadata for DropDelegate);
        if (v22) {
          goto LABEL_30;
        }
        goto LABEL_21;
      }
      outlined init with take of OptionalBinaryInteger(&v64, (uint64_t)&v56);
      uint64_t v65 = &type metadata for DropInfoAdaptor;
      uint64_t v66 = &protocol witness table for DropInfoAdaptor;
      uint64_t v28 = swift_allocObject();
      uint64_t v29 = (void *)(v28 + 16);
      *(void *)&uint64_t v64 = v28;
      swift_unknownObjectRetain();
      char v30 = a5;
      swift_retain();
      DropInfoAdaptor.init(_:host:responder:)(a2, v30, v25, v29);
      uint64_t v53 = a2;
      uint64_t v31 = a4;
      uint64_t v32 = a5;
      unint64_t v33 = v58;
      uint64_t v34 = v59;
      __swift_project_boxed_opaque_existential_1(&v56, v58);
      uint64_t v35 = *(void (**)(long long *, uint64_t, uint64_t))(v34 + 40);
      unint64_t v36 = v34;
      a5 = v32;
      a4 = v31;
      a2 = v53;
      v35(&v64, v33, v36);
      swift_release();
      outlined destroy of DropInfo((uint64_t)&v64);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v56);
    }
  }
  if ((v22 & 1) == 0)
  {
LABEL_21:
    uint64_t v37 = *a3;
    v63[0] = a3;
    unint64_t v38 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(a4 + 8);
    swift_retain();
    v38(&v56, v37, a4);
    if (v58)
    {
      outlined init with take of OptionalBinaryInteger(&v56, (uint64_t)&v64);
      v63[3] = &type metadata for DropInfoAdaptor;
      v63[4] = &protocol witness table for DropInfoAdaptor;
      uint64_t v39 = swift_allocObject();
      id v40 = (void *)(v39 + 16);
      v63[0] = v39;
      swift_unknownObjectRetain();
      unint64_t v41 = a5;
      swift_retain();
      DropInfoAdaptor.init(_:host:responder:)(a2, v41, a3, v40);
      uint64_t v42 = v65;
      uint64_t v43 = v66;
      __swift_project_boxed_opaque_existential_1(&v64, (uint64_t)v65);
      if (((uint64_t (*)(void *, ValueMetadata *, _UNKNOWN **))v43[1])(v63, v42, v43))
      {
        uint64_t v44 = v65;
        uint64_t v45 = v66;
        __swift_project_boxed_opaque_existential_1(&v64, (uint64_t)v65);
        ((void (*)(void *, ValueMetadata *, _UNKNOWN **))v45[3])(v63, v44, v45);
        uint64_t v46 = v65;
        uint64_t v47 = v66;
        __swift_project_boxed_opaque_existential_1(&v64, (uint64_t)v65);
        ((void (*)(long long *__return_ptr, void *, ValueMetadata *, _UNKNOWN **))v47[4])(&v56, v63, v46, v47);
        uint64_t v21 = qword_1883834E8[(char)v56];
        uint64_t v55 = 0;
        memset(v54, 0, sizeof(v54));
        *((void *)&v56 + 1) = a4;
        swift_weakInit();
        outlined init with take of DropDelegate?((uint64_t)v54, (uint64_t)&v57);
        uint64_t v60 = v21;
        type metadata accessor for DropInfoTargetStore();
        uint64_t v48 = swift_allocObject();
        uint64_t v49 = MEMORY[0x1E4FBC860];
        *(void *)(v48 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
        *(void *)(v48 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v49);
        swift_release();
        uint64_t v61 = v48;
        uint64_t v62 = 0;
        outlined destroy of DropInfo((uint64_t)v63);
        outlined assign with take of DragContext?((uint64_t)&v56, (uint64_t)a1, &lazy cache variable for type metadata for DropDestination?, (uint64_t)&type metadata for DropDestination);
      }
      else
      {
        outlined destroy of DropInfo((uint64_t)v63);
        swift_release();
        _sypSgWOhTm_6((uint64_t)a1, &lazy cache variable for type metadata for DropDestination?, (uint64_t)&type metadata for DropDestination);
        *(_OWORD *)a1 = xmmword_18834BB90;
        *uint64_t v10 = 0u;
        v10[1] = 0u;
        void v10[2] = 0u;
        *(_OWORD *)((char *)v10 + 41) = 0u;
        uint64_t v21 = 1;
      }
      uint64_t v50 = &v64;
LABEL_38:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
      return objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1740]), sel_initWithDropOperation_, v21);
    }
    swift_release();
    int v51 = &v56;
    goto LABEL_26;
  }
LABEL_30:
  _sypSgWOhTm_6((uint64_t)a1, &lazy cache variable for type metadata for DropDestination?, (uint64_t)&type metadata for DropDestination);
  uint64_t v21 = 0;
  *(_OWORD *)a1 = xmmword_18834BB90;
  *uint64_t v10 = 0u;
  v10[1] = 0u;
  void v10[2] = 0u;
  *(_OWORD *)((char *)v10 + 41) = 0u;
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1740]), sel_initWithDropOperation_, v21);
}

void specialized DragAndDropBridge.springLoadedInteraction(_:didActivate:)()
{
  uint64_t v1 = *(void *)(v0 + direct field offset for DragAndDropBridge.activeSpringLoadedResponder);
  if (v1)
  {
    objc_super v2 = *(void (**)(uint64_t))(v1 + 224);
    uint64_t v3 = swift_retain();
    v2(v3);
    swift_release();
  }
}

uint64_t specialized DragAndDropBridge.dragInteraction(_:itemsForBeginning:)(void *a1)
{
  if (!DragAndDropBridge.hitTestedResponder(session:)(a1))
  {
    uint64_t v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
    goto LABEL_7;
  }
  type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for DragPayloadProvider);
  ResponderNode.firstAncestor<A>(ofType:)();
  swift_release();
  if (!*((void *)&v12 + 1))
  {
LABEL_7:
    outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v11, &lazy cache variable for type metadata for DragPayloadProvider?, &lazy cache variable for type metadata for DragPayloadProvider);
    return MEMORY[0x1E4FBC860];
  }
  outlined init with take of OptionalBinaryInteger(&v11, (uint64_t)v15);
  outlined init with copy of TableColumnList((uint64_t)v15, (uint64_t)&v11);
  type metadata accessor for DragDropDefaultPreviewResponder();
  if ((swift_dynamicCast() & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v1 = v14;
  uint64_t v2 = v16;
  uint64_t v3 = v17;
  __swift_project_boxed_opaque_existential_1(v15, v16);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  DragPayload.resolve()((uint64_t)&v11);
  if (v11 == 1)
  {
    uint64_t v5 = *(void *)(v4 + 16);
    char v6 = *(unsigned char *)(v4 + 24);
    type metadata accessor for DragSourceContext();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v1;
    *(void *)(v7 + 24) = v4;
    *(void *)(v7 + 32) = v5;
    *(unsigned char *)(v7 + 40) = v6;
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v8 = swift_bridgeObjectRetain();
    uint64_t v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI12DraggingItemVG_So06UIDragG0Cs5NeverOTg503_s7d77UI17DragAndDropBridgeC9dragItems33_1C4DED7BD95AC993CC69F2CB25BC2A40LLySaySo10hg54CGAA0cE23DefaultPreviewResponderC_AA0C7PayloadCtFAgA08F8S0VXEfU_AF0lN23DefaultPreviewResponderCAF0L13SourceContextCTf1cn_nTf4ngg_n(v8, v1, v7);
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of DragContext((uint64_t)&v11);
    swift_release();
  }
  else
  {
    outlined destroy of DragContext((uint64_t)&v11);
    uint64_t v9 = MEMORY[0x1E4FBC860];
  }
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  return v9;
}

uint64_t specialized DragAndDropBridge.dragInteraction(_:itemsForAddingTo:withTouchAt:)(void *a1, double a2, double a3)
{
  uint64_t v7 = (void *)MEMORY[0x18C119DF0](v3 + direct field offset for DragAndDropBridge.host);
  uint64_t v8 = MEMORY[0x1E4FBC860];
  if (!v7) {
    return v8;
  }
  uint64_t v9 = v7;
  id v10 = objc_msgSend(v7, sel_window);
  if (!v10)
  {

    return v8;
  }
  long long v11 = v10;
  objc_msgSend(v10, sel_convertPoint_fromCoordinateSpace_, v9, a2, a3);
  if (!DragAndDropBridge.hitTestedResponder(locationInWindow:)()
    || (type metadata accessor for DragDropDefaultPreviewResponder(),
        ResponderNode.firstAncestor<A>(ofType:)(),
        swift_release(),
        (long long v12 = (void *)v41) == 0))
  {
LABEL_50:

    return v8;
  }
  *(void *)&v44[0] = v41;
  type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for DragPayloadProvider);
  swift_retain();
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v43 = 0;
    long long v41 = 0u;
    long long v42 = 0u;

    swift_release();
    outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v41, &lazy cache variable for type metadata for DragPayloadProvider?, &lazy cache variable for type metadata for DragPayloadProvider);
    return v8;
  }
  uint64_t v13 = *((void *)&v42 + 1);
  uint64_t v14 = v43;
  __swift_project_boxed_opaque_existential_1(&v41, *((uint64_t *)&v42 + 1));
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v13, v14);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v41);
  if (*(unsigned char *)(v15 + 24) == 1)
  {

    swift_release();
    swift_release();
    return v8;
  }
  uint64_t v39 = *(void *)(v15 + 16);
  id v16 = objc_msgSend(a1, sel_items);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIDragItem);
  unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v46 = v8;
  if (!(v17 >> 62))
  {
    uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v38 = v15;
    if (v18) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v18 = result;
  uint64_t v38 = v15;
  if (!result)
  {
LABEL_32:
    swift_bridgeObjectRelease();
    unint64_t v40 = MEMORY[0x1E4FBC860];
LABEL_33:
    swift_bridgeObjectRelease();
    if (v40 >> 62) {
      goto LABEL_55;
    }
    uint64_t v24 = *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_bridgeObjectRetain();
    if (v24)
    {
LABEL_35:
      uint64_t v25 = 4;
      do
      {
        uint64_t v26 = v25 - 4;
        if ((v40 & 0xC000000000000001) != 0)
        {
          uint64_t v27 = MEMORY[0x18C117680](v25 - 4, v40);
          BOOL v28 = __OFADD__(v26, 1);
          uint64_t v29 = v25 - 3;
          if (v28) {
            goto LABEL_54;
          }
        }
        else
        {
          uint64_t v27 = *(void *)(v40 + 8 * v25);
          swift_retain();
          BOOL v28 = __OFADD__(v26, 1);
          uint64_t v29 = v25 - 3;
          if (v28)
          {
LABEL_54:
            __break(1u);
LABEL_55:
            swift_retain();
            swift_bridgeObjectRetain();
            uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
            if (!v24) {
              break;
            }
            goto LABEL_35;
          }
        }
        if (*(void **)(v27 + 16) == v12)
        {
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_53;
        }
        char v30 = v12;
        uint64_t v31 = *(void *)(v27 + 32);
        char v32 = *(unsigned char *)(v27 + 40);
        swift_release();
        if ((v32 & 1) != 0 || v31 != v39)
        {
          swift_release();
          swift_bridgeObjectRelease();
LABEL_53:

          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          return MEMORY[0x1E4FBC860];
        }
        ++v25;
        long long v12 = v30;
      }
      while (v29 != v24);
    }
    swift_release();
    swift_bridgeObjectRelease_n();
    DragPayload.resolve()((uint64_t)&v41);
    if (v41 == 1)
    {
      uint64_t v33 = *(void *)(v38 + 16);
      char v34 = *(unsigned char *)(v38 + 24);
      type metadata accessor for DragSourceContext();
      uint64_t v35 = swift_allocObject();
      *(void *)(v35 + 16) = v12;
      *(void *)(v35 + 24) = v38;
      *(void *)(v35 + 32) = v33;
      *(unsigned char *)(v35 + 40) = v34;
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v36 = swift_bridgeObjectRetain();
      uint64_t v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI12DraggingItemVG_So06UIDragG0Cs5NeverOTg503_s7d77UI17DragAndDropBridgeC9dragItems33_1C4DED7BD95AC993CC69F2CB25BC2A40LLySaySo10hg54CGAA0cE23DefaultPreviewResponderC_AA0C7PayloadCtFAgA08F8S0VXEfU_AF0lN23DefaultPreviewResponderCAF0L13SourceContextCTf1cn_nTf4ngg_n(v36, v12, v35);
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of DragContext((uint64_t)&v41);
      swift_release();
      swift_release();
    }
    else
    {
      outlined destroy of DragContext((uint64_t)&v41);
      swift_release();
      uint64_t v8 = MEMORY[0x1E4FBC860];
    }
    swift_release();
    goto LABEL_50;
  }
LABEL_12:
  uint64_t v37 = v12;
  if (v18 >= 1)
  {
    uint64_t v20 = 0;
    uint64_t v21 = MEMORY[0x1E4FBC840] + 8;
    while (1)
    {
      if ((v17 & 0xC000000000000001) != 0) {
        id v22 = (id)MEMORY[0x18C117680](v20, v17);
      }
      else {
        id v22 = *(id *)(v17 + 8 * v20 + 32);
      }
      uint64_t v23 = v22;
      if (objc_msgSend(v22, sel_localObject, v37))
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v44, 0, sizeof(v44));
      }
      _sypSgWObTm_0((uint64_t)v44, (uint64_t)&v41, (unint64_t *)&lazy cache variable for type metadata for Any?, v21);
      if (*((void *)&v42 + 1))
      {
        type metadata accessor for DragSourceContext();
        if (swift_dynamicCast()) {
          goto LABEL_27;
        }
      }
      else
      {
        _sypSgWOhTm_6((uint64_t)&v41, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
      }
      uint64_t v45 = 0;
LABEL_27:

      if (v45)
      {
        MEMORY[0x18C115B40]();
        if (*(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      if (v18 == ++v20)
      {
        swift_bridgeObjectRelease();
        unint64_t v40 = v46;
        long long v12 = v37;
        goto LABEL_33;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized DragAndDropBridge.dragInteraction(_:prefersFullSizePreviewsFor:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_items);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIDragItem);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
LABEL_22:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v3)
    {
LABEL_3:
      unint64_t v4 = v2 & 0xC000000000000001;
      uint64_t v5 = 4;
      char v6 = &selRef_showsMenuAsPrimaryAction;
      uint64_t v7 = MEMORY[0x1E4FBC840];
      uint64_t v8 = MEMORY[0x1E4FBC840] + 8;
      unint64_t v17 = v2;
      while (1)
      {
        if (v4) {
          id v9 = (id)MEMORY[0x18C117680](v5 - 4, v2);
        }
        else {
          id v9 = *(id *)(v2 + 8 * v5);
        }
        id v10 = v9;
        uint64_t v11 = v5 - 3;
        if (__OFADD__(v5 - 4, 1))
        {
          __break(1u);
          goto LABEL_22;
        }
        if ([v9 v6[441]])
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          memset(v19, 0, sizeof(v19));
        }
        _sypSgWObTm_0((uint64_t)v19, (uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for Any?, v8);
        if (!v21) {
          break;
        }
        type metadata accessor for DragSourceContext();
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_5;
        }
        uint64_t v12 = v7;
        uint64_t v13 = v6;
        uint64_t v14 = *(void *)(v18 + 16);
        swift_retain();
        swift_release();
        char v15 = *(unsigned char *)(v14 + 296);

        swift_release();
        if (v15)
        {
          uint64_t v3 = 1;
          goto LABEL_20;
        }
        char v6 = v13;
        uint64_t v7 = v12;
        unint64_t v2 = v17;
        if (v11 == v3)
        {
LABEL_18:
          uint64_t v3 = 0;
          goto LABEL_20;
        }
LABEL_6:
        ++v5;
      }
      _sypSgWOhTm_6((uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for Any?, v7 + 8);
LABEL_5:

      if (v11 == v3) {
        goto LABEL_18;
      }
      goto LABEL_6;
    }
  }
LABEL_20:
  swift_bridgeObjectRelease_n();
  return v3;
}

void specialized DragAndDropBridge.dragInteraction(_:willAnimateLiftWith:session:)(void *a1, id a2)
{
  id v2 = objc_msgSend(a2, sel_items);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIDragItem);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v3 >> 62)
  {
LABEL_28:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      unint64_t v5 = v3 & 0xC000000000000001;
      char v6 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v7 = 4;
      unint64_t v45 = v3 & 0xC000000000000001;
      uint64_t v46 = MEMORY[0x1E4FBC840] + 8;
      uint64_t v34 = v4;
      unint64_t v35 = v3;
      while (1)
      {
        if (v5) {
          id v8 = (id)MEMORY[0x18C117680](v7 - 4, v3);
        }
        else {
          id v8 = *(id *)(v3 + 8 * v7);
        }
        id v9 = v8;
        uint64_t v10 = v7 - 3;
        if (__OFADD__(v7 - 4, 1))
        {
          __break(1u);
          goto LABEL_28;
        }
        if (objc_msgSend(v8, sel_localObject))
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          memset(v55, 0, sizeof(v55));
        }
        _sypSgWObTm_0((uint64_t)v55, (uint64_t)&v47, (unint64_t *)&lazy cache variable for type metadata for Any?, v46);
        if (!*((void *)&v48 + 1)) {
          break;
        }
        type metadata accessor for DragSourceContext();
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_18;
        }
        uint64_t v11 = *(void *)(v54 + 24);
        swift_retain();
        swift_release();
        uint64_t v12 = v11 + 152;
        swift_beginAccess();
        outlined init with copy of DropDestination?(v11 + 152, (uint64_t)&v47, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
        if (*((void *)&v53 + 1))
        {
          long long v60 = v51;
          long long v61 = v52;
          long long v62 = v53;
          long long v56 = v47;
          unsigned long long v57 = v48;
          long long v58 = v49;
          unsigned long long v59 = v50;
          swift_release();
          unint64_t v5 = v45;
        }
        else
        {
          uint64_t v44 = v6;
          _sypSgWOhTm_6((uint64_t)&v47, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
          swift_beginAccess();
          uint64_t v21 = outlined init with copy of DropDestination?(v11 + 32, (uint64_t)&v47, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier);
          if (!*((void *)&v53 + 1))
          {
            __break(1u);
            return;
          }
          MEMORY[0x1F4188790](v21);
          _sypSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for [DraggingItem], (uint64_t)&type metadata for DraggingItem, MEMORY[0x1E4FBB320]);
          static Update.dispatchImmediately<A>(_:)();
          char v41 = v47;
          uint64_t v22 = *((void *)&v47 + 1);
          unint64_t v23 = *((void *)&v48 + 1);
          unint64_t v24 = v48;
          uint64_t v25 = *((void *)&v49 + 1);
          uint64_t v36 = *((void *)&v48 + 1);
          uint64_t v37 = *((void *)&v49 + 1);
          uint64_t v38 = v49;
          unint64_t v26 = *((void *)&v50 + 1);
          unsigned long long v27 = v50;
          uint64_t v42 = v27 >> 64;
          unint64_t v39 = v27;
          uint64_t v43 = *(void *)&v55[0];
          uint64_t v40 = v51;
          outlined init with copy of DropDestination?((uint64_t)&v51 + 8, (uint64_t)&v60 + 8, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
          LOBYTE(v56) = v41;
          *((void *)&v56 + 1) = v22;
          unsigned long long v57 = __PAIR128__(v23, v24);
          *(void *)&long long v58 = v38;
          *((void *)&v58 + 1) = v25;
          unsigned long long v59 = __PAIR128__(v26, v39);
          *(void *)&long long v60 = v40;
          *((void *)&v62 + 1) = v43;
          outlined copy of AppIntentExecutor?(v22);
          outlined copy of AppIntentExecutor?(v36);
          outlined copy of AppIntentExecutor?(v37);
          outlined copy of AppIntentExecutor?(v42);
          outlined destroy of _DraggingModifier((uint64_t)&v47);
          outlined init with copy of DragContext((uint64_t)&v56, (uint64_t)&v47);
          swift_beginAccess();
          outlined assign with take of DragContext?((uint64_t)&v47, v12, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
          swift_endAccess();
          swift_release();
          char v6 = v44;
          unint64_t v5 = v45;
          uint64_t v4 = v34;
          unint64_t v3 = v35;
        }
LABEL_19:

        if (*((void *)&v62 + 1))
        {
          long long v51 = v60;
          long long v52 = v61;
          long long v53 = v62;
          long long v47 = v56;
          unsigned long long v48 = v57;
          long long v49 = v58;
          unsigned long long v50 = v59;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            char v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v6 + 2) + 1, 1, v6);
          }
          unint64_t v14 = *((void *)v6 + 2);
          unint64_t v13 = *((void *)v6 + 3);
          if (v14 >= v13 >> 1) {
            char v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v6);
          }
          *((void *)v6 + 2) = v14 + 1;
          char v15 = &v6[112 * v14];
          long long v16 = v47;
          long long v17 = v49;
          *((_OWORD *)v15 + 3) = v48;
          *((_OWORD *)v15 + 4) = v17;
          *((_OWORD *)v15 + 2) = v16;
          unsigned long long v18 = v50;
          long long v19 = v51;
          long long v20 = v53;
          *((_OWORD *)v15 + 7) = v52;
          *((_OWORD *)v15 + 8) = v20;
          *((_OWORD *)v15 + 5) = v18;
          *((_OWORD *)v15 + 6) = v19;
        }
        else
        {
          _sypSgWOhTm_6((uint64_t)&v56, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
        }
        ++v7;
        if (v10 == v4) {
          goto LABEL_30;
        }
      }
      _sypSgWOhTm_6((uint64_t)&v47, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
LABEL_18:
      long long v56 = 0u;
      unsigned long long v57 = 0u;
      long long v58 = 0u;
      unsigned long long v59 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      goto LABEL_19;
    }
  }
  char v6 = (char *)MEMORY[0x1E4FBC860];
LABEL_30:
  swift_bridgeObjectRelease_n();
  uint64_t v28 = *((void *)v6 + 2);
  if (v28)
  {
    uint64_t v29 = (uint64_t)(v6 + 32);
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of DragContext(v29, (uint64_t)&v47);
      char v30 = (void (*)(long long *))*((void *)&v47 + 1);
      outlined copy of AppIntentExecutor?(*((uint64_t *)&v47 + 1));
      outlined destroy of DragContext((uint64_t)&v47);
      if (v30)
      {
        LOBYTE(v56) = 0;
        v30(&v56);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v30);
      }
      v29 += 112;
      --v28;
    }
    while (v28);
    swift_bridgeObjectRelease();
  }
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = v6;
  *(void *)&long long v49 = partial apply for closure #2 in DragAndDropBridge.dragInteraction(_:willAnimateLiftWith:session:);
  *((void *)&v49 + 1) = v31;
  *(void *)&long long v47 = MEMORY[0x1E4F143A8];
  *((void *)&v47 + 1) = 1107296256;
  *(void *)&unsigned long long v48 = thunk for @escaping @callee_guaranteed (@unowned UIViewAnimatingPosition) -> ();
  *((void *)&v48 + 1) = &block_descriptor_60;
  char v32 = _Block_copy(&v47);
  swift_release();
  objc_msgSend(a1, sel_addCompletion_, v32);
  _Block_release(v32);
}

void specialized DragAndDropBridge.dragInteraction(_:item:willAnimateCancelWith:)(void *a1, void *a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  v7[4] = partial apply for closure #1 in DragAndDropBridge.dragInteraction(_:item:willAnimateCancelWith:);
  v7[5] = v4;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1107296256;
  uint64_t v7[2] = thunk for @escaping @callee_guaranteed (@unowned UIViewAnimatingPosition) -> ();
  _OWORD v7[3] = &block_descriptor_54;
  unint64_t v5 = _Block_copy(v7);
  id v6 = a1;
  swift_release();
  objc_msgSend(a2, sel_addCompletion_, v5);
  _Block_release(v5);
}

uint64_t specialized DragAndDropBridge.dragInteraction(_:sessionWillBegin:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_items);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIDragItem);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v4 = MEMORY[0x1E4FBC840];
  if (v3)
  {
    unint64_t v48 = v2 & 0xC000000000000001;
    unint64_t v5 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v6 = 4;
    uint64_t v46 = v3;
    uint64_t v47 = MEMORY[0x1E4FBC840] + 8;
    unint64_t v36 = v2;
    while (1)
    {
      if (v48) {
        id v7 = (id)MEMORY[0x18C117680](v6 - 4, v2);
      }
      else {
        id v7 = *(id *)(v2 + 8 * v6);
      }
      id v8 = v7;
      uint64_t v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1))
      {
        __break(1u);
        goto LABEL_39;
      }
      if (objc_msgSend(v7, sel_localObject))
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v57, 0, sizeof(v57));
      }
      _sypSgWObTm_0((uint64_t)v57, (uint64_t)&v49, (unint64_t *)&lazy cache variable for type metadata for Any?, v47);
      if (!*((void *)&v50 + 1)) {
        break;
      }
      type metadata accessor for DragSourceContext();
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_19;
      }
      uint64_t v10 = *(void *)(v56 + 24);
      swift_retain();
      swift_release();
      uint64_t v11 = v10 + 152;
      swift_beginAccess();
      outlined init with copy of DropDestination?(v10 + 152, (uint64_t)&v49, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
      if (*((void *)&v55 + 1))
      {
        long long v62 = v53;
        long long v63 = v54;
        long long v64 = v55;
        long long v58 = v49;
        long long v59 = v50;
        unsigned long long v60 = v51;
        long long v61 = v52;
        swift_release();
        uint64_t v3 = v46;
      }
      else
      {
        unint64_t v45 = v5;
        _sypSgWOhTm_6((uint64_t)&v49, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
        swift_beginAccess();
        uint64_t result = outlined init with copy of DropDestination?(v10 + 32, (uint64_t)&v49, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier);
        if (!*((void *)&v55 + 1))
        {
          __break(1u);
          return result;
        }
        MEMORY[0x1F4188790](result);
        _sypSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for [DraggingItem], (uint64_t)&type metadata for DraggingItem, MEMORY[0x1E4FBB320]);
        static Update.dispatchImmediately<A>(_:)();
        uint64_t v44 = *(void *)&v57[0];
        char v43 = v49;
        uint64_t v21 = *((void *)&v50 + 1);
        uint64_t v39 = v50;
        uint64_t v40 = *((void *)&v49 + 1);
        unint64_t v22 = *((void *)&v51 + 1);
        unint64_t v23 = v51;
        uint64_t v37 = *((void *)&v50 + 1);
        uint64_t v38 = *((void *)&v51 + 1);
        uint64_t v24 = *((void *)&v52 + 1);
        uint64_t v41 = v52;
        uint64_t v42 = v53;
        uint64_t v4 = MEMORY[0x1E4FBC840];
        outlined init with copy of DropDestination?((uint64_t)&v53 + 8, (uint64_t)&v62 + 8, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
        LOBYTE(v58) = v43;
        *((void *)&v58 + 1) = v40;
        *(void *)&long long v59 = v39;
        *((void *)&v59 + 1) = v21;
        unsigned long long v60 = __PAIR128__(v22, v23);
        *(void *)&long long v61 = v41;
        *((void *)&v61 + 1) = v24;
        *(void *)&long long v62 = v42;
        *((void *)&v64 + 1) = v44;
        outlined copy of AppIntentExecutor?(v40);
        outlined copy of AppIntentExecutor?(v37);
        outlined copy of AppIntentExecutor?(v38);
        outlined copy of AppIntentExecutor?(v24);
        outlined destroy of _DraggingModifier((uint64_t)&v49);
        outlined init with copy of DragContext((uint64_t)&v58, (uint64_t)&v49);
        swift_beginAccess();
        outlined assign with take of DragContext?((uint64_t)&v49, v11, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
        swift_endAccess();
        swift_release();
        unint64_t v5 = v45;
        uint64_t v3 = v46;
        unint64_t v2 = v36;
      }
LABEL_20:

      if (*((void *)&v64 + 1))
      {
        long long v53 = v62;
        long long v54 = v63;
        long long v55 = v64;
        long long v49 = v58;
        long long v50 = v59;
        unsigned long long v51 = v60;
        long long v52 = v61;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v5 + 2) + 1, 1, v5);
        }
        unint64_t v13 = *((void *)v5 + 2);
        unint64_t v12 = *((void *)v5 + 3);
        if (v13 >= v12 >> 1) {
          unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, v5);
        }
        *((void *)v5 + 2) = v13 + 1;
        unint64_t v14 = &v5[112 * v13];
        long long v15 = v49;
        unsigned long long v16 = v51;
        *((_OWORD *)v14 + 3) = v50;
        *((_OWORD *)v14 + 4) = v16;
        *((_OWORD *)v14 + 2) = v15;
        long long v17 = v52;
        long long v18 = v53;
        long long v19 = v55;
        *((_OWORD *)v14 + 7) = v54;
        *((_OWORD *)v14 + 8) = v19;
        *((_OWORD *)v14 + 5) = v17;
        *((_OWORD *)v14 + 6) = v18;
      }
      else
      {
        _sypSgWOhTm_6((uint64_t)&v58, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
      }
      ++v6;
      if (v9 == v3) {
        goto LABEL_29;
      }
    }
    _sypSgWOhTm_6((uint64_t)&v49, (unint64_t *)&lazy cache variable for type metadata for Any?, v4 + 8);
LABEL_19:
    long long v58 = 0u;
    long long v59 = 0u;
    unsigned long long v60 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    goto LABEL_20;
  }
  unint64_t v5 = (char *)MEMORY[0x1E4FBC860];
LABEL_29:
  swift_bridgeObjectRelease_n();
  specialized Sequence.compactMap<A>(_:)((uint64_t)v5);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_setLocalContext_, isa);

  uint64_t v26 = *((void *)v5 + 2);
  if (v26)
  {
    uint64_t v27 = (uint64_t)(v5 + 32);
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of DragContext(v27, (uint64_t)&v49);
      uint64_t v28 = (void (*)(uint64_t))*((void *)&v50 + 1);
      outlined copy of AppIntentExecutor?(*((uint64_t *)&v50 + 1));
      uint64_t v29 = outlined destroy of DragContext((uint64_t)&v49);
      if (v28)
      {
        v28(v29);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v28);
      }
      v27 += 112;
      --v26;
    }
    while (v26);
    swift_bridgeObjectRelease();
  }
  char v30 = specialized Sequence.compactMap<A>(_:)((uint64_t)v5);
  swift_bridgeObjectRelease();
  if (!v30[2]) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = v30;
  char v32 = (uint64_t (**)())(v34 + direct field offset for DragAndDropBridge.onSessionEnded);
  uint64_t v33 = *(void *)(v34 + direct field offset for DragAndDropBridge.onSessionEnded);
  *char v32 = partial apply for closure #2 in DragAndDropBridge.dragInteraction(_:sessionWillBegin:);
  v32[1] = (uint64_t (*)())v31;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v33);
}

id specialized DragAndDropBridge._dragInteraction(_:sessionPropertiesForSession:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_items);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIDragItem);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
LABEL_21:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3)
    {
LABEL_3:
      unint64_t v4 = v2 & 0xC000000000000001;
      uint64_t v5 = 4;
      uint64_t v6 = &selRef_showsMenuAsPrimaryAction;
      uint64_t v7 = MEMORY[0x1E4FBC840];
      uint64_t v8 = MEMORY[0x1E4FBC840] + 8;
      do
      {
        uint64_t v9 = v5 - 4;
        if (v4)
        {
          id v10 = (id)MEMORY[0x18C117680](v5 - 4, v2);
          uint64_t v11 = v5 - 3;
          if (__OFADD__(v9, 1)) {
            goto LABEL_20;
          }
        }
        else
        {
          id v10 = *(id *)(v2 + 8 * v5);
          uint64_t v11 = v5 - 3;
          if (__OFADD__(v9, 1))
          {
LABEL_20:
            __break(1u);
            goto LABEL_21;
          }
        }
        if (objc_msgSend(v10, v6[441], v10))
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          memset(v22, 0, sizeof(v22));
        }
        _sypSgWObTm_0((uint64_t)v22, (uint64_t)v23, (unint64_t *)&lazy cache variable for type metadata for Any?, v8);
        if (v24)
        {
          type metadata accessor for DragSourceContext();
          if (swift_dynamicCast())
          {
            unint64_t v12 = v2;
            unint64_t v13 = v4;
            uint64_t v14 = v3;
            uint64_t v15 = v7;
            unsigned long long v16 = v6;
            int v17 = *(unsigned __int8 *)(*(void *)(v21 + 16) + 316);
            if (v17 != 2)
            {
              swift_bridgeObjectRelease();
              id v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB20B8]), sel_init);
              objc_msgSend(v18, sel_set_supportsSystemDrag_, v17 & 1);

              swift_release();
              return v18;
            }
            swift_release();

            uint64_t v6 = v16;
            uint64_t v7 = v15;
            uint64_t v3 = v14;
            unint64_t v4 = v13;
            unint64_t v2 = v12;
          }
          else
          {
          }
        }
        else
        {

          _sypSgWOhTm_6((uint64_t)v23, (unint64_t *)&lazy cache variable for type metadata for Any?, v7 + 8);
        }
        ++v5;
      }
      while (v11 != v3);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized DragAndDropBridge.dragInteraction(_:session:didEndWith:)()
{
  id v1 = (uint64_t *)(v0 + direct field offset for DragAndDropBridge.onSessionEnded);
  unint64_t v2 = *(void (**)(uint64_t))(v0 + direct field offset for DragAndDropBridge.onSessionEnded);
  if (v2)
  {
    uint64_t v3 = swift_retain();
    v2(v3);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v2);
    uint64_t v4 = *v1;
  }
  else
  {
    uint64_t v4 = 0;
  }
  *id v1 = 0;
  v1[1] = 0;

  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v4);
}

void specialized DragAndDropBridge.dropInteraction(_:sessionDidUpdate:)(void *a1)
{
  void (*v17)(void *__return_ptr, uint64_t);
  uint64_t v18;
  uint64_t *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void v28[3];
  uint64_t v29;
  uint64_t v30;
  long long aBlock;
  long long v32;
  id (*v33)();
  uint64_t v34;
  unsigned char v35[80];
  void v36[5];
  uint64_t *v37;
  void *v38;
  long long v39;
  char v40;

  uint64_t v2 = v1;
  uint64_t v4 = (uint64_t *)DragAndDropBridge.dropResponder(from:)(a1);
  uint64_t v6 = v5;
  uint64_t v7 = v1 + direct field offset for DragAndDropBridge.activeDrop;
  swift_beginAccess();
  outlined init with copy of DropDestination?(v7, (uint64_t)&aBlock, &lazy cache variable for type metadata for DropDestination?, (uint64_t)&type metadata for DropDestination);
  if (aBlock == __PAIR128__(1, 0))
  {
    _sypSgWOhTm_6((uint64_t)&aBlock, &lazy cache variable for type metadata for DropDestination?, (uint64_t)&type metadata for DropDestination);
    goto LABEL_24;
  }
  outlined init with take of DropDestination((uint64_t)&aBlock, (uint64_t)v35);
  if (v35[72]) {
    goto LABEL_23;
  }
  id v8 = objc_msgSend(a1, sel_items);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIDragItem);
  unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v9 >> 62))
  {
    if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v25)
  {
LABEL_22:
    swift_bridgeObjectRelease();
LABEL_23:
    outlined destroy of DropDestination((uint64_t)v35);
    goto LABEL_24;
  }
LABEL_6:
  if ((v9 & 0xC000000000000001) != 0)
  {
    id v10 = (uint64_t *)MEMORY[0x18C117680](0, v9);
  }
  else
  {
    if (!*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_28;
    }
    id v10 = (uint64_t *)*(id *)(v9 + 32);
  }
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  if (!v4
    || (uint64_t v37 = v4,
        uint64_t v38 = (void *)v6,
        type metadata accessor for DragDropDefaultPreviewResponder & DropPayloadProvider(),
        type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for CustomDropPreviewProvider),
        swift_retain(),
        (swift_dynamicCast() & 1) == 0))
  {
    uint64_t v33 = 0;
    long long aBlock = 0u;
    char v32 = 0u;
    goto LABEL_15;
  }
  if (!*((void *)&v32 + 1))
  {
LABEL_15:

    outlined destroy of DropDestination((uint64_t)v35);
    outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&aBlock, &lazy cache variable for type metadata for CustomDropPreviewProvider?, &lazy cache variable for type metadata for CustomDropPreviewProvider);
    goto LABEL_24;
  }
  outlined init with take of OptionalBinaryInteger(&aBlock, (uint64_t)v28);
  uint64_t v12 = v29;
  uint64_t v13 = v30;
  __swift_project_boxed_opaque_existential_1(v28, v29);
  id v14 = objc_msgSend(v11, sel_itemProvider);
  id v15 = objc_msgSend(v14, sel_registeredContentTypes);

  type metadata accessor for UTType();
  uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  *(void *)&long long aBlock = 0;
  (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(v13 + 8))(v16, &aBlock, v12, v13);
  swift_bridgeObjectRelease();
  int v17 = *(void (**)(void *__return_ptr, uint64_t))(class metadata base offset for DragDropDefaultPreviewResponder
                                                             + *v4
                                                             + 72);
  id v18 = swift_retain();
  v17(v36, v18);
  swift_release();
  _sypSgWObTm_0((uint64_t)v36, (uint64_t)&v37, (unint64_t *)&lazy cache variable for type metadata for UIKitDragDropPreviewAdaptor?, (uint64_t)&type metadata for UIKitDragDropPreviewAdaptor);
  long long v19 = v37;
  if (v37)
  {
    long long v20 = v38;
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v19;
    *(void *)(v21 + 24) = v20;
    *(_OWORD *)(v21 + 32) = v39;
    *(unsigned char *)(v21 + 48) = v40;
    uint64_t v33 = partial apply for closure #1 in DragAndDropBridge.dropInteraction(_:sessionDidUpdate:);
    uint64_t v34 = v21;
    *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&char v32 = thunk for @escaping @callee_guaranteed () -> (@owned UIDragPreview?);
    *((void *)&v32 + 1) = &block_descriptor_39;
    unint64_t v22 = _Block_copy(&aBlock);
    unint64_t v23 = v19;
    uint64_t v24 = v20;
    swift_release();
    objc_msgSend(v11, sel_setPreviewProvider_, v22);

    _Block_release(v22);
    uint64_t v11 = v23;
  }
  else
  {
    objc_msgSend(v11, sel_setPreviewProvider_, 0);
  }

  outlined destroy of DropDestination((uint64_t)v35);
  if (*(void *)v7 || *(void *)(v7 + 8) != 1) {
    *(unsigned char *)(v7 + 72) = 1;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
LABEL_24:
  uint64_t v26 = MEMORY[0x18C119DF0](v2 + direct field offset for DragAndDropBridge.host);
  if (v26)
  {
    uint64_t v27 = (void *)v26;
    swift_beginAccess();
    specialized static UIDropProposal.fromActiveDrop(_:session:responder:host:)((void *)v7, a1, v4, v6, v27);
    swift_endAccess();

    swift_release();
    return;
  }
LABEL_28:
  __break(1u);
}

void specialized DragAndDropBridge.dropInteraction(_:sessionDidExit:)(void *a1)
{
  specialized DragAndDropBridge.dropInteraction(_:sessionDidUpdate:)(a1);
}

uint64_t specialized DragAndDropBridge.dropInteraction(_:sessionDidEnd:)()
{
  uint64_t v1 = (void *)(v0 + direct field offset for DragAndDropBridge.activeDrop);
  swift_beginAccess();
  if (*v1) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = v1[1] == 1;
  }
  if (v2) {
    goto LABEL_14;
  }
  uint64_t Strong = (void *)swift_weakLoadStrong();
  if (!Strong) {
    goto LABEL_14;
  }
  uint64_t v4 = Strong;
  (*(void (**)(long long *__return_ptr, void))(v1[1] + 8))(&v12, *Strong);
  if (!v13)
  {
    outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v12, (unint64_t *)&lazy cache variable for type metadata for DropDelegate?, &lazy cache variable for type metadata for DropDelegate);
    long long v15 = 0u;
    long long v16 = 0u;
    uint64_t v17 = 0;
    goto LABEL_13;
  }
  type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for DropDelegate);
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for DropDelegate_Private);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v17 = 0;
    long long v15 = 0u;
    long long v16 = 0u;
    goto LABEL_13;
  }
  if (!*((void *)&v16 + 1))
  {
LABEL_13:
    swift_release();
    outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v15, &lazy cache variable for type metadata for DropDelegate_Private?, (unint64_t *)&lazy cache variable for type metadata for DropDelegate_Private);
    goto LABEL_14;
  }
  outlined init with take of OptionalBinaryInteger(&v15, (uint64_t)&v18);
  uint64_t result = MEMORY[0x18C119DF0](v0 + direct field offset for DragAndDropBridge.host);
  if (result)
  {
    uint64_t v6 = (void *)result;
    uint64_t v13 = &type metadata for DropInfoAdaptor;
    id v14 = &protocol witness table for DropInfoAdaptor;
    uint64_t v7 = swift_allocObject();
    id v8 = (void *)(v7 + 16);
    *(void *)&long long v12 = v7;
    swift_retain();
    unint64_t v9 = (void *)swift_unknownObjectRetain();
    DropInfoAdaptor.init(_:host:responder:)(v9, v6, v4, v8);
    outlined init with take of OptionalBinaryInteger(&v12, (uint64_t)&v15);
    uint64_t v10 = *((void *)&v19 + 1);
    uint64_t v11 = v20;
    __swift_project_boxed_opaque_existential_1(&v18, *((uint64_t *)&v19 + 1));
    (*(void (**)(long long *, uint64_t, uint64_t))(v11 + 32))(&v15, v10, v11);
    swift_release();
    outlined destroy of DropInfo((uint64_t)&v15);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v18);
LABEL_14:
    long long v18 = xmmword_18834BB90;
    long long v19 = 0u;
    long long v20 = 0u;
    memset(v21, 0, sizeof(v21));
    swift_beginAccess();
    outlined assign with take of DragContext?((uint64_t)&v18, (uint64_t)v1, &lazy cache variable for type metadata for DropDestination?, (uint64_t)&type metadata for DropDestination);
    return swift_endAccess();
  }
  __break(1u);
  return result;
}

uint64_t specialized DragAndDropBridge.dropInteraction(_:performDrop:)()
{
  uint64_t v1 = (void *)(v0 + direct field offset for DragAndDropBridge.activeDrop);
  uint64_t result = swift_beginAccess();
  if (*v1) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = v1[1] == 1;
  }
  if (!v3)
  {
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      uint64_t v4 = (void *)result;
      uint64_t v5 = v1[1];
      uint64_t result = MEMORY[0x18C119DF0](v0 + direct field offset for DragAndDropBridge.host);
      if (result)
      {
        uint64_t v6 = (void *)result;
        swift_retain();
        uint64_t v7 = (void *)swift_unknownObjectRetain();
        DropInfoAdaptor.init(_:host:responder:)(v7, v6, v4, v16);
        if (*v1) {
          BOOL v8 = 0;
        }
        else {
          BOOL v8 = v1[1] == 1;
        }
        if (v8)
        {
          uint64_t v9 = 0;
        }
        else
        {
          uint64_t v9 = v1[8];
          swift_retain();
        }
        swift_release();
        v16[1] = v9;
        void v15[3] = &type metadata for DropInfoAdaptor;
        long long v15[4] = &protocol witness table for DropInfoAdaptor;
        v15[0] = swift_allocObject();
        outlined init with copy of DropInfoAdaptor((uint64_t)v16, v15[0] + 16);
        (*(void (**)(void *__return_ptr, void, uint64_t))(v5 + 8))(v12, *v4, v5);
        uint64_t v10 = v13;
        if (v13)
        {
          uint64_t v11 = v14;
          __swift_project_boxed_opaque_existential_1(v12, v13);
          (*(void (**)(void *, uint64_t, uint64_t))(v11 + 16))(v15, v10, v11);
          swift_release();
          outlined destroy of DropInfo((uint64_t)v15);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
        }
        else
        {
          swift_release();
          outlined destroy of DropInfo((uint64_t)v15);
          outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for DropDelegate?, &lazy cache variable for type metadata for DropDelegate);
        }
        return outlined destroy of DropInfoAdaptor((uint64_t)v16);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

void specialized DragAndDropBridge.dropInteraction(_:item:willAnimateDropWith:)(void *a1, void *a2)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = a1;
  v9[4] = partial apply for closure #1 in DragAndDropBridge.dropInteraction(_:item:willAnimateDropWith:);
  v9[5] = v5;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1107296256;
  long long v9[2] = thunk for @escaping @callee_guaranteed (@unowned UIViewAnimatingPosition) -> ();
  v9[3] = &block_descriptor_31;
  uint64_t v6 = _Block_copy(v9);
  id v7 = v2;
  id v8 = a1;
  swift_release();
  objc_msgSend(a2, sel_addCompletion_, v6);
  _Block_release(v6);
}

void *specialized DragAndDropBridge.dropInteraction(_:concludeDrop:)()
{
  uint64_t v1 = v0;
  BOOL v2 = (void *)(v0 + direct field offset for DragAndDropBridge.activeDrop);
  uint64_t result = (void *)swift_beginAccess();
  if (*v2) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v2[1] == 1;
  }
  if (!v4)
  {
    uint64_t result = (void *)swift_weakLoadStrong();
    if (result)
    {
      uint64_t v5 = result;
      (*(void (**)(long long *__return_ptr, void))(v2[1] + 8))(&v12, *result);
      if (v13)
      {
        type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for DropDelegate);
        type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for DropDelegate_Private);
        if (swift_dynamicCast())
        {
          if (*((void *)&v16 + 1))
          {
            outlined init with take of OptionalBinaryInteger(&v15, (uint64_t)v18);
            uint64_t result = (void *)MEMORY[0x18C119DF0](v1 + direct field offset for DragAndDropBridge.host);
            if (result)
            {
              uint64_t v6 = result;
              uint64_t v13 = &type metadata for DropInfoAdaptor;
              uint64_t v14 = &protocol witness table for DropInfoAdaptor;
              uint64_t v7 = swift_allocObject();
              id v8 = (void *)(v7 + 16);
              *(void *)&long long v12 = v7;
              swift_retain();
              uint64_t v9 = (void *)swift_unknownObjectRetain();
              DropInfoAdaptor.init(_:host:responder:)(v9, v6, v5, v8);
              outlined init with take of OptionalBinaryInteger(&v12, (uint64_t)&v15);
              uint64_t v10 = v19;
              uint64_t v11 = v20;
              __swift_project_boxed_opaque_existential_1(v18, v19);
              (*(void (**)(long long *, uint64_t, uint64_t))(v11 + 24))(&v15, v10, v11);
              swift_release();
              outlined destroy of DropInfo((uint64_t)&v15);
              return (void *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
            }
            else
            {
              __break(1u);
            }
            return result;
          }
        }
        else
        {
          uint64_t v17 = 0;
          long long v15 = 0u;
          long long v16 = 0u;
        }
      }
      else
      {
        outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v12, (unint64_t *)&lazy cache variable for type metadata for DropDelegate?, &lazy cache variable for type metadata for DropDelegate);
        long long v15 = 0u;
        long long v16 = 0u;
        uint64_t v17 = 0;
      }
      swift_release();
      return (void *)outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v15, &lazy cache variable for type metadata for DropDelegate_Private?, (unint64_t *)&lazy cache variable for type metadata for DropDelegate_Private);
    }
  }
  return result;
}

void specialized DragAndDropBridge.dropInteraction(_:previewForDropping:withDefault:)(void *a1, void *a2)
{
  void (*v17)(void *__return_ptr, uint64_t);
  uint64_t v18;
  void *v19;
  void *v20;
  char v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  void *v30;
  double v31;
  void *v32;
  void *v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  unint64_t v40;
  char v41;
  double *v42;
  uint64_t v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  void *v55;
  float64x2_t v56;
  long long v57;
  float64x2_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66[8];
  void *v67;
  uint64_t v68;
  void v69[5];
  void *v70;
  void *v71;
  float64x2_t v72;
  char v73;

  uint64_t v3 = v2;
  uint64_t v6 = v2 + direct field offset for DragAndDropBridge.activeDrop;
  swift_beginAccess();
  outlined init with copy of DropDestination?(v6, (uint64_t)&v60, &lazy cache variable for type metadata for DropDestination?, (uint64_t)&type metadata for DropDestination);
  if (v60 == 0.0 && v61 == 1)
  {
    _sypSgWOhTm_6((uint64_t)&v60, &lazy cache variable for type metadata for DropDestination?, (uint64_t)&type metadata for DropDestination);
LABEL_12:
    unint64_t v22 = a2;
    return;
  }
  outlined init with take of DropDestination((uint64_t)&v60, (uint64_t)v66);
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    outlined destroy of DropDestination((uint64_t)v66);
    goto LABEL_12;
  }
  uint64_t v9 = (void *)Strong;
  long long v70 = (void *)Strong;
  long long v71 = v67;
  type metadata accessor for DragDropDefaultPreviewResponder & DropPayloadProvider();
  type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for CustomDropPreviewProvider);
  swift_retain();
  if (swift_dynamicCast())
  {
    outlined init with take of OptionalBinaryInteger(&v57, (uint64_t)&v60);
    uint64_t v10 = v63;
    uint64_t v11 = v64;
    __swift_project_boxed_opaque_existential_1(&v60, v63);
    long long v55 = a1;
    id v12 = objc_msgSend(a1, sel_itemProvider);
    id v13 = objc_msgSend(v12, sel_registeredContentTypes);

    type metadata accessor for UTType();
    uint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    *(void *)&unsigned long long v57 = a2;
    long long v15 = *(void (**)(uint64_t, long long *, uint64_t, uint64_t))(v11 + 8);
    id v16 = a2;
    v15(v14, &v57, v10, v11);

    swift_bridgeObjectRelease();
    uint64_t v17 = *(void (**)(void *__return_ptr, uint64_t))(class metadata base offset for DragDropDefaultPreviewResponder
                                                               + *v9
                                                               + 72);
    long long v18 = swift_retain();
    v17(v69, v18);
    swift_release();
    _sypSgWObTm_0((uint64_t)v69, (uint64_t)&v70, (unint64_t *)&lazy cache variable for type metadata for UIKitDragDropPreviewAdaptor?, (uint64_t)&type metadata for UIKitDragDropPreviewAdaptor);
    uint64_t v19 = v70;
    if (!v70)
    {
      outlined destroy of DropDestination((uint64_t)v66);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
      return;
    }
    uint64_t v20 = v71;
    uint64_t v56 = v72;
    uint64_t v21 = v73;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
    if ((v21 & 1) == 0)
    {
      a1 = v55;
      goto LABEL_16;
    }
    swift_release();

LABEL_24:
    outlined destroy of DropDestination((uint64_t)v66);
    return;
  }
  long long v59 = 0;
  unsigned long long v57 = 0u;
  long long v58 = 0u;
  outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v57, &lazy cache variable for type metadata for CustomDropPreviewProvider?, &lazy cache variable for type metadata for CustomDropPreviewProvider);
  unint64_t v23 = v68;
  swift_beginAccess();
  uint64_t v24 = *(void *)(v23 + 16);
  uint64_t v25 = *(void *)(v24 + 16);
  swift_retain();
  if (!v25)
  {
LABEL_23:
    swift_endAccess();
    swift_release();
    swift_release();
    goto LABEL_24;
  }
  uint64_t v26 = a1;
  uint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v26);
  if ((v28 & 1) == 0)
  {

    goto LABEL_23;
  }
  uint64_t v56 = *(float64x2_t *)(*(void *)(v24 + 56) + 16 * v27);
  swift_endAccess();
  swift_release();

  uint64_t v20 = 0;
  uint64_t v19 = 0;
LABEL_16:
  uint64_t v29 = MEMORY[0x18C119DF0](v3 + direct field offset for DragAndDropBridge.host);
  if (v29)
  {
    char v30 = (void *)v29;
    unsigned long long v57 = 0uLL;
    long long v58 = vaddq_f64(v56, v56);
    LOBYTE(v59) = 0;
    swift_retain();
    uint64_t v31 = UIViewSnapshotResponder.portalContainer(centeringPortalRect:inHost:options:preferredContainer:)((uint64_t)&v57, v30, 8, 0);
    uint64_t v33 = v32;
    uint64_t v34 = v31;
    unint64_t v36 = v35;
    swift_release();

    uint64_t v37 = v68;
    swift_beginAccess();
    uint64_t v38 = *(void *)(v37 + 24);
    if (*(void *)(v38 + 16))
    {
      uint64_t v39 = a1;
      swift_retain();
      uint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v39);
      if (v41)
      {
        uint64_t v42 = (double *)(*(void *)(v38 + 56) + 48 * v40);
        uint64_t v44 = *v42;
        char v43 = *((void *)v42 + 1);
        uint64_t v46 = *((void *)v42 + 2);
        unint64_t v45 = v42[3];
        unint64_t v48 = *((void *)v42 + 4);
        uint64_t v47 = *((void *)v42 + 5);

        goto LABEL_28;
      }
    }
    else
    {
      swift_retain();
    }
    unint64_t v45 = 1.0;
    uint64_t v47 = 0;
    unint64_t v48 = 0;
    uint64_t v46 = 0;
    char v43 = 0;
    uint64_t v44 = 1.0;
LABEL_28:
    swift_endAccess();
    swift_release();
    long long v49 = objc_allocWithZone(MEMORY[0x1E4FB1728]);
    unsigned long long v60 = v44;
    long long v61 = v43;
    long long v62 = v46;
    long long v63 = *(void *)&v45;
    long long v64 = v48;
    uint64_t v65 = v47;
    long long v50 = objc_msgSend(v49, sel_initWithContainer_center_transform_, v33, &v60, v34, v36);
    if (v19)
    {
      unsigned long long v51 = v19;
      if (v20) {
        long long v52 = v20;
      }
      else {
        long long v52 = objc_msgSend(a2, sel_parameters);
      }
      long long v53 = objc_allocWithZone(MEMORY[0x1E4FB1D40]);
      long long v54 = v20;
      objc_msgSend(v53, sel_initWithView_parameters_target_, v19, v52, v50);

      swift_release();
    }
    else
    {
      objc_msgSend(a2, sel_retargetedPreviewWithTarget_, v50);
      swift_release();
    }
    goto LABEL_24;
  }
  swift_retain();

  __break(1u);
}

uint64_t specialized DragAndDropBridge.shouldAllow(_:with:)(void *a1)
{
  uint64_t v3 = DragAndDropBridge.springLoadedResponder(from:)(a1);
  BOOL v4 = v3;
  uint64_t v5 = direct field offset for DragAndDropBridge.activeSpringLoadedResponder;
  uint64_t v6 = *(void **)(v1 + direct field offset for DragAndDropBridge.activeSpringLoadedResponder);
  if (!v3)
  {
    if (!v6) {
      return 0;
    }
LABEL_9:
    id v8 = (void (*)(uint64_t))v6[32];
    swift_retain();
    uint64_t v9 = swift_retain();
    v8(v9);
    swift_release();
    swift_release();
    if (!v4) {
      goto LABEL_17;
    }
    goto LABEL_10;
  }
  if (v6) {
    BOOL v7 = v3 == v6;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7) {
    goto LABEL_18;
  }
  if (v6) {
    goto LABEL_9;
  }
LABEL_10:
  uint64_t v10 = (void (*)(char *))v4[30];
  swift_retain();
  swift_retain();
  id v11 = objc_msgSend(a1, sel_state);
  if (v11) {
    BOOL v12 = v11 == (id)3;
  }
  else {
    BOOL v12 = 1;
  }
  char v13 = !v12;
  char v15 = v13;
  v10(&v15);
  swift_release();
  swift_release();
LABEL_17:
  *(void *)(v1 + v5) = v4;
  swift_retain();
  swift_release();
  if (v4)
  {
LABEL_18:
    swift_release();
    return 1;
  }
  return 0;
}

char *specialized DragAndDropBridge.springLoadedInteraction(_:highlightDidChange:)(char *result)
{
  uint64_t v2 = *(void *)(v1 + direct field offset for DragAndDropBridge.activeSpringLoadedResponder);
  if (v2)
  {
    uint64_t v3 = *(void (**)(char *))(v2 + 240);
    char v4 = *result;
    swift_retain();
    v3(&v4);
    return (char *)swift_release();
  }
  return result;
}

void specialized DragAndDropBridge.interactionDidFinish(_:)()
{
  uint64_t v1 = direct field offset for DragAndDropBridge.activeSpringLoadedResponder;
  uint64_t v2 = *(void *)(v0 + direct field offset for DragAndDropBridge.activeSpringLoadedResponder);
  if (v2)
  {
    uint64_t v3 = *(void (**)(uint64_t))(v2 + 256);
    swift_retain();
    uint64_t v4 = swift_retain();
    v3(v4);
    swift_release();
    swift_release();
    *(void *)(v0 + v1) = 0;
    swift_release();
  }
}

void specialized DragAndDropBridge.SpringLoadedEffect.init()()
{
}

void specialized DragAndDropBridge.SpringLoadedBehavior.init()()
{
}

uint64_t sub_187B6B3D4()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_187B6B40C()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in DragAndDropBridge.SpringLoadedEffect.interaction(_:didChangeWith:)(void *a1)
{
  closure #1 in DragAndDropBridge.SpringLoadedEffect.interaction(_:didChangeWith:)(a1, *(void *)(v1 + 32));
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in closure #1 in DragAndDropBridge.dragItems(_:_:)@<X0>(uint64_t a1@<X8>)
{
  (*(void (**)(void *__return_ptr))(class metadata base offset for DragDropDefaultPreviewResponder
                                               + *v1
                                               + 72))(v4);
  return _sypSgWObTm_0((uint64_t)v4, a1, (unint64_t *)&lazy cache variable for type metadata for UIKitDragDropPreviewAdaptor?, (uint64_t)&type metadata for UIKitDragDropPreviewAdaptor);
}

uint64_t sub_187B6B4E4()
{
  swift_release();

  return swift_deallocObject();
}

id partial apply for closure #1 in closure #1 in DragAndDropBridge.dragItems(_:_:)()
{
  return closure #1 in closure #1 in DragAndDropBridge.dragItems(_:_:)(*(void (**)(void *__return_ptr))(v0 + 16));
}

uint64_t outlined init with take of DropDestination(uint64_t a1, uint64_t a2)
{
  swift_weakTakeInit();
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  long long v4 = *(_OWORD *)(a1 + 16);
  long long v5 = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(a1 + 64);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(void *)(a2 + 64) = v6;
  *(unsigned char *)(a2 + 72) = *(unsigned char *)(a1 + 72);
  return a2;
}

uint64_t outlined destroy of DropDestination(uint64_t a1)
{
  return a1;
}

unint64_t type metadata accessor for DragDropDefaultPreviewResponder & DropPayloadProvider()
{
  unint64_t result = lazy cache variable for type metadata for DragDropDefaultPreviewResponder & DropPayloadProvider;
  if (!lazy cache variable for type metadata for DragDropDefaultPreviewResponder & DropPayloadProvider)
  {
    type metadata accessor for DragDropDefaultPreviewResponder();
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for DragDropDefaultPreviewResponder & DropPayloadProvider);
  }
  return result;
}

uint64_t sub_187B6B610()
{
  swift_unknownObjectWeakDestroy();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187B6B650()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DragAndDropBridge.dropInteraction(_:item:willAnimateDropWith:)(uint64_t a1)
{
  return closure #1 in DragAndDropBridge.dropInteraction(_:item:willAnimateDropWith:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t outlined init with copy of DropDestination?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  _sypSgMaTm_4(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t outlined init with copy of DropInfoAdaptor(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  swift_retain();
  return a2;
}

uint64_t outlined destroy of DropInfoAdaptor(uint64_t a1)
{
  return a1;
}

uint64_t outlined assign with take of DragContext?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  _sypSgMaTm_4(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

uint64_t sub_187B6B810()
{
  return swift_deallocObject();
}

id partial apply for closure #1 in DragAndDropBridge.dropInteraction(_:sessionDidUpdate:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  id v3 = objc_allocWithZone(MEMORY[0x1E4FB1718]);

  return objc_msgSend(v3, sel_initWithView_parameters_, v1, v2);
}

uint64_t outlined init with take of DropDelegate?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for IntelligenceAppIntentsPayloadProviding?(0, (unint64_t *)&lazy cache variable for type metadata for DropDelegate?, &lazy cache variable for type metadata for DropDelegate);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_187B6B918()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in DragAndDropBridge.dragInteraction(_:sessionWillBegin:)()
{
  return specialized closure #1 in PlatformItemList.containerSelectionBehavior.getter(*(void *)(v0 + 16));
}

uint64_t sub_187B6B958()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DragAndDropBridge.dragInteraction(_:item:willAnimateCancelWith:)(uint64_t a1)
{
  return closure #1 in DragAndDropBridge.dragInteraction(_:item:willAnimateCancelWith:)(a1, *(id *)(v1 + 16));
}

uint64_t partial apply for closure #2 in DragAndDropBridge.dragInteraction(_:willAnimateLiftWith:session:)(uint64_t a1)
{
  return closure #2 in DragAndDropBridge.dragInteraction(_:willAnimateLiftWith:session:)(a1, *(void *)(v1 + 16));
}

uint64_t lazy protocol witness table accessor for type UTType and conformance UTType(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for UTType();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_187B6B9E4()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in DragAndDropBridge.updateSpringLoadedInteraction(_:)(uint64_t a1, uint64_t a2)
{
  closure #1 in DragAndDropBridge.updateSpringLoadedInteraction(_:)(a1, a2, *(void *)(v2 + 32));
}

uint64_t destroy for DropInfoAdaptor()
{
  swift_unknownObjectWeakDestroy();

  return swift_release();
}

uint64_t initializeWithCopy for DropInfoAdaptor(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

void *assignWithCopy for DropInfoAdaptor(void *a1, void *a2)
{
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

__n128 initializeWithTake for DropInfoAdaptor(uint64_t a1, __n128 *a2)
{
  id v3 = (__n128 *)swift_unknownObjectWeakTakeInit();
  v3->n128_u64[1] = a2->n128_u64[1];
  __n128 result = a2[1];
  v3[1] = result;
  return result;
}

uint64_t assignWithTake for DropInfoAdaptor(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for DropInfoAdaptor()
{
  return &type metadata for DropInfoAdaptor;
}

uint64_t ButtonMenuStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v8 = swift_getKeyPath();
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v6;
  *(unsigned char *)(a2 + 32) = 2;
  *(void *)(a2 + 40) = KeyPath;
  *(unsigned char *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = v8;
  *(unsigned char *)(a2 + 64) = 0;
  *(_WORD *)(a2 + 65) = 256;
  outlined copy of AppIntentExecutor?(v3);

  return outlined copy of AppIntentExecutor?(v5);
}

uint64_t protocol witness for MenuStyle.makeBody(configuration:) in conformance ButtonMenuStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return ButtonMenuStyle.makeBody(configuration:)(a1, a2);
}

uint64_t ButtonMenuStyle.Automatic.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v8 = swift_getKeyPath();
  uint64_t v9 = swift_getKeyPath();
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v6;
  *(unsigned char *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 40) = 2;
  *(void *)(a2 + 48) = KeyPath;
  *(unsigned char *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = v8;
  *(unsigned char *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = v9;
  *(unsigned char *)(a2 + 88) = 0;
  outlined copy of AppIntentExecutor?(v3);

  return outlined copy of AppIntentExecutor?(v5);
}

uint64_t associated type witness table accessor for MenuStyle.Body : View in ButtonMenuStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for ButtonMenuStyle()
{
  return &type metadata for ButtonMenuStyle;
}

uint64_t sub_187B6BD68()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<ButtonMenuStyle.Automatic>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<ButtonMenuStyle.Automatic>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<ButtonMenuStyle.Automatic>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<ButtonMenuStyle.Automatic>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<ButtonMenuStyle.Automatic>>)
  {
    type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>);
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>(255, &lazy cache variable for type metadata for MenuStyleModifier<ButtonMenuStyle.Automatic>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonMenuStyle.Automatic and conformance ButtonMenuStyle.Automatic, (uint64_t)&type metadata for ButtonMenuStyle.Automatic, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<ButtonMenuStyle.Automatic>>);
    }
  }
}

void type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>()
{
  if (!lazy cache variable for type metadata for Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>)
  {
    type metadata accessor for ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>();
    lazy protocol witness table accessor for type ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for Menu();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>)
  {
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultButtonStyle and conformance DefaultButtonStyle, (uint64_t)&type metadata for DefaultButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>();
    lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<DefaultButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<DefaultButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<DefaultButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<DefaultButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>)
  {
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultButtonStyle and conformance DefaultButtonStyle, (uint64_t)&type metadata for DefaultButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<DefaultButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
  }
  return result;
}

void type metadata accessor for StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>)
  {
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>(255, &lazy cache variable for type metadata for ButtonStylePredicate<PlainButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle, (uint64_t)&type metadata for PlainButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStylePredicate);
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>(255, &lazy cache variable for type metadata for MenuStyleModifier<_PlainButtonMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type _PlainButtonMenuStyle and conformance _PlainButtonMenuStyle, (uint64_t)&type metadata for _PlainButtonMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
    lazy protocol witness table accessor for type ButtonStylePredicate<PlainButtonStyle> and conformance ButtonStylePredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _PlainButtonMenuStyle and conformance _PlainButtonMenuStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type _PlainButtonMenuStyle and conformance _PlainButtonMenuStyle;
  if (!lazy protocol witness table cache variable for type _PlainButtonMenuStyle and conformance _PlainButtonMenuStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PlainButtonMenuStyle and conformance _PlainButtonMenuStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonStylePredicate<PlainButtonStyle> and conformance ButtonStylePredicate<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonStylePredicate<PlainButtonStyle> and conformance ButtonStylePredicate<A>;
  if (!lazy protocol witness table cache variable for type ButtonStylePredicate<PlainButtonStyle> and conformance ButtonStylePredicate<A>)
  {
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>(255, &lazy cache variable for type metadata for ButtonStylePredicate<PlainButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle, (uint64_t)&type metadata for PlainButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStylePredicate);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStylePredicate<PlainButtonStyle> and conformance ButtonStylePredicate<A>);
  }
  return result;
}

void type metadata accessor for StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>)
  {
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>(255, &lazy cache variable for type metadata for ButtonStylePredicate<BorderlessButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle, (uint64_t)&type metadata for BorderlessButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStylePredicate);
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>(255, &lazy cache variable for type metadata for MenuStyleModifier<BorderlessButtonMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonMenuStyle and conformance BorderlessButtonMenuStyle, (uint64_t)&type metadata for BorderlessButtonMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
    lazy protocol witness table accessor for type ButtonStylePredicate<BorderlessButtonStyle> and conformance ButtonStylePredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type BorderlessButtonMenuStyle and conformance BorderlessButtonMenuStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type BorderlessButtonMenuStyle and conformance BorderlessButtonMenuStyle;
  if (!lazy protocol witness table cache variable for type BorderlessButtonMenuStyle and conformance BorderlessButtonMenuStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BorderlessButtonMenuStyle and conformance BorderlessButtonMenuStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonStylePredicate<BorderlessButtonStyle> and conformance ButtonStylePredicate<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonStylePredicate<BorderlessButtonStyle> and conformance ButtonStylePredicate<A>;
  if (!lazy protocol witness table cache variable for type ButtonStylePredicate<BorderlessButtonStyle> and conformance ButtonStylePredicate<A>)
  {
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>(255, &lazy cache variable for type metadata for ButtonStylePredicate<BorderlessButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle, (uint64_t)&type metadata for BorderlessButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStylePredicate);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStylePredicate<BorderlessButtonStyle> and conformance ButtonStylePredicate<A>);
  }
  return result;
}

void type metadata accessor for StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>)
  {
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>(255, &lazy cache variable for type metadata for ButtonStylePredicate<BorderedButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle, (uint64_t)&type metadata for BorderedButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStylePredicate);
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>(255, &lazy cache variable for type metadata for MenuStyleModifier<_BorderedButtonMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type _BorderedButtonMenuStyle and conformance _BorderedButtonMenuStyle, (uint64_t)&type metadata for _BorderedButtonMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
    lazy protocol witness table accessor for type ButtonStylePredicate<BorderedButtonStyle> and conformance ButtonStylePredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _BorderedButtonMenuStyle and conformance _BorderedButtonMenuStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type _BorderedButtonMenuStyle and conformance _BorderedButtonMenuStyle;
  if (!lazy protocol witness table cache variable for type _BorderedButtonMenuStyle and conformance _BorderedButtonMenuStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BorderedButtonMenuStyle and conformance _BorderedButtonMenuStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonStylePredicate<BorderedButtonStyle> and conformance ButtonStylePredicate<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonStylePredicate<BorderedButtonStyle> and conformance ButtonStylePredicate<A>;
  if (!lazy protocol witness table cache variable for type ButtonStylePredicate<BorderedButtonStyle> and conformance ButtonStylePredicate<A>)
  {
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>(255, &lazy cache variable for type metadata for ButtonStylePredicate<BorderedButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle, (uint64_t)&type metadata for BorderedButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStylePredicate);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStylePredicate<BorderedButtonStyle> and conformance ButtonStylePredicate<A>);
  }
  return result;
}

void type metadata accessor for StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>)
  {
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>(255, &lazy cache variable for type metadata for ButtonStylePredicate<BorderedProminentButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedProminentButtonStyle and conformance BorderedProminentButtonStyle, (uint64_t)&type metadata for BorderedProminentButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStylePredicate);
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>(255, &lazy cache variable for type metadata for MenuStyleModifier<_BorderedButtonMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type _BorderedButtonMenuStyle and conformance _BorderedButtonMenuStyle, (uint64_t)&type metadata for _BorderedButtonMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
    lazy protocol witness table accessor for type ButtonStylePredicate<BorderedProminentButtonStyle> and conformance ButtonStylePredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ButtonStylePredicate<BorderedProminentButtonStyle> and conformance ButtonStylePredicate<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonStylePredicate<BorderedProminentButtonStyle> and conformance ButtonStylePredicate<A>;
  if (!lazy protocol witness table cache variable for type ButtonStylePredicate<BorderedProminentButtonStyle> and conformance ButtonStylePredicate<A>)
  {
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>(255, &lazy cache variable for type metadata for ButtonStylePredicate<BorderedProminentButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedProminentButtonStyle and conformance BorderedProminentButtonStyle, (uint64_t)&type metadata for BorderedProminentButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStylePredicate);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStylePredicate<BorderedProminentButtonStyle> and conformance ButtonStylePredicate<A>);
  }
  return result;
}

void type metadata accessor for StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>)
  {
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>(255, &lazy cache variable for type metadata for MenuStyleModifier<CustomButtonMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CustomButtonMenuStyle and conformance CustomButtonMenuStyle, (uint64_t)&type metadata for CustomButtonMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type CustomButtonMenuStyle and conformance CustomButtonMenuStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomButtonMenuStyle and conformance CustomButtonMenuStyle;
  if (!lazy protocol witness table cache variable for type CustomButtonMenuStyle and conformance CustomButtonMenuStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomButtonMenuStyle and conformance CustomButtonMenuStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>(255);
    lazy protocol witness table accessor for type ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>(255);
    lazy protocol witness table accessor for type Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content> and conformance Menu<A, B>(&lazy protocol witness table cache variable for type Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>> and conformance Menu<A, B>, (void (*)(uint64_t))type metadata accessor for Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>);
    lazy protocol witness table accessor for type StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content> and conformance Menu<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for MenuStyle.Body : View in ButtonMenuStyle.Automatic()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187B6CDCC()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<ButtonMenuStyle.Automatic>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<ConditionallyBorderedMenuButtonStyle>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<ConditionallyBorderedMenuButtonStyle>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<ButtonMenuStyle.Automatic>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<ConditionallyBorderedMenuButtonStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<ConditionallyBorderedMenuButtonStyle>>)
  {
    type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>);
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>(255, &lazy cache variable for type metadata for MenuStyleModifier<ConditionallyBorderedMenuButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ConditionallyBorderedMenuButtonStyle and conformance ConditionallyBorderedMenuButtonStyle, (uint64_t)&type metadata for ConditionallyBorderedMenuButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<ConditionallyBorderedMenuButtonStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>)
  {
    type metadata accessor for InterfaceIdiomPredicate<MacInterfaceIdiom>();
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>(255, &lazy cache variable for type metadata for MenuStyleModifier<_BorderedButtonMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type _BorderedButtonMenuStyle and conformance _BorderedButtonMenuStyle, (uint64_t)&type metadata for _BorderedButtonMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
    lazy protocol witness table accessor for type Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content> and conformance Menu<A, B>((unint64_t *)&lazy protocol witness table cache variable for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>, (void (*)(uint64_t))type metadata accessor for InterfaceIdiomPredicate<MacInterfaceIdiom>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for InterfaceIdiomPredicate<MacInterfaceIdiom>()
{
  if (!lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>)
  {
    unint64_t v0 = type metadata accessor for InterfaceIdiomPredicate();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<ToolbarStyleContext>();
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>(255, &lazy cache variable for type metadata for MenuStyleModifier<BorderlessButtonMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonMenuStyle and conformance BorderlessButtonMenuStyle, (uint64_t)&type metadata for BorderlessButtonMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
    lazy protocol witness table accessor for type Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content> and conformance Menu<A, B>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>, (void (*)(uint64_t))type metadata accessor for StyleContextAcceptsPredicate<ToolbarStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StyleContextAcceptsPredicate<ToolbarStyleContext>()
{
  if (!lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>)
  {
    unint64_t v0 = type metadata accessor for StyleContextAcceptsPredicate();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>);
    }
  }
}

void type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ConditionallyBorderedMenuButtonStyle and conformance ConditionallyBorderedMenuButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ConditionallyBorderedMenuButtonStyle and conformance ConditionallyBorderedMenuButtonStyle;
  if (!lazy protocol witness table cache variable for type ConditionallyBorderedMenuButtonStyle and conformance ConditionallyBorderedMenuButtonStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConditionallyBorderedMenuButtonStyle and conformance ConditionallyBorderedMenuButtonStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>);
    lazy protocol witness table accessor for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>(255);
    lazy protocol witness table accessor for type Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content> and conformance Menu<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content> and conformance Menu<A, B>, (void (*)(uint64_t))type metadata accessor for Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>);
    lazy protocol witness table accessor for type StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id HostingScrollView.PlatformContainer._parentContainer.getter()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  if ((MEMORY[0x18C111F70]() & 1) == 0)
  {
    v22.receiver = v0;
    v22.super_class = ObjectType;
    return objc_msgSendSuper2(&v22, sel__parentGestureRecognizerContainer);
  }
  if (swift_weakLoadStrong()) {
    goto LABEL_3;
  }
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v11 = Strong;
    uint64_t v12 = Strong + 200;
    swift_beginAccess();
    uint64_t v13 = MEMORY[0x18C119DF0](v12);
    uint64_t v14 = *(void *)(v11 + 208);
    swift_release();
    if (v13)
    {
      uint64_t v15 = swift_getObjectType();
      unint64_t v16 = type metadata accessor for EventGraphHost();
      (*(void (**)(void *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 16))(v21, v16, v16, v15, v14);
      swift_unknownObjectRelease();
      if (v21[0])
      {
        uint64_t v17 = v21[1];
        uint64_t v18 = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t))(v17 + 16))(v18, v17);
        swift_unknownObjectRelease();
LABEL_3:
        swift_release();
      }
    }
  }
  uint64_t v2 = swift_weakLoadStrong();
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  swift_retain();
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    while (1)
    {
      uint64_t v4 = dispatch thunk of ViewResponder.gestureContainer.getter();
      if (v4) {
        break;
      }
      type metadata accessor for UIViewResponder();
      uint64_t v5 = swift_dynamicCastClass();
      if (v5)
      {
        uint64_t v4 = MEMORY[0x18C119DF0](v5 + 48);
        if (v4) {
          break;
        }
      }
      swift_release();
      swift_beginAccess();
      if (!swift_weakLoadStrong()) {
        goto LABEL_13;
      }
    }
    uint64_t v6 = v4;
    swift_release();
  }
  else
  {
LABEL_13:
    swift_beginAccess();
    uint64_t v6 = MEMORY[0x18C119DF0](v3 + 16);
    if (v6)
    {
      uint64_t v7 = *(void *)(v3 + 24);
      uint64_t v8 = swift_getObjectType();
      unint64_t v9 = type metadata accessor for UIView();
      (*(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t))(v7 + 16))(&v20, v9, v9, v8, v7);
      swift_unknownObjectRelease();
      uint64_t v6 = v20;
    }
  }
  swift_release();
  swift_release();
  return (id)v6;
}

uint64_t HostingScrollView.PlatformContainer.shouldEagerlyUpdateSafeArea.getter()
{
  uint64_t v1 = *(char **)(v0 + OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer_scrollView);
  if ((objc_msgSend(v1, sel_isTracking) & 1) != 0
    || objc_msgSend(v1, sel_isDecelerating)
    || (objc_msgSend(v1, sel_isScrollAnimating) & 1) != 0)
  {
    return 1;
  }
  uint64_t v3 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_safeAreaTransitionState + 8];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  swift_unknownObjectRetain();
  LOBYTE(v3) = v5(ObjectType, v3);
  swift_unknownObjectRelease();
  return v3 & 1;
}

double protocol witness for SafeAreaHelperDelegate._safeAreaInsets.getter in conformance HostingScrollView.PlatformContainer()
{
  return *(double *)(v0 + OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets);
}

void protocol witness for SafeAreaHelperDelegate._safeAreaInsets.setter in conformance HostingScrollView.PlatformContainer(double a1, double a2, double a3, double a4)
{
  uint64_t v5 = (double *)(v4 + OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets);
  *uint64_t v5 = a1;
  v5[1] = a2;
  void v5[2] = a3;
  void v5[3] = a4;
}

uint64_t protocol witness for PlatformGroupFactory.renderPlatformGroup(_:in:size:renderer:) in conformance HostingScrollView.PlatformContainer(uint64_t a1, uint64_t a2)
{
  return specialized HostingScrollView.PlatformContainer.renderPlatformGroup(_:in:size:renderer:)(a1, a2);
}

uint64_t protocol witness for AnyViewFactory.viewType.getter in conformance HostingScrollView.PlatformContainer()
{
  return *(void *)(*(void *)(*v0 + OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer_scrollView)
                   + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_viewType);
}

uint64_t specialized HostingScrollView.PlatformContainer.renderPlatformGroup(_:in:size:renderer:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a2;
  uint64_t v3 = *(void **)(v2 + OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer_scrollView);
  uint64_t v4 = (objc_class *)type metadata accessor for HostingScrollView();
  v7.receiver = v3;
  v7.super_class = v4;
  swift_retain();
  objc_msgSendSuper2(&v7, sel_bounds);
  v6.receiver = v3;
  v6.super_class = v4;
  objc_msgSendSuper2(&v6, sel_bounds);
  GraphicsContext.translateBy(x:y:)();
  Path.init(_:)();
  GraphicsContext.clip(to:style:options:)();
  outlined release of Path((uint64_t)v9);
  DisplayList.GraphicsRenderer.render(list:in:)();
  return swift_release();
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, void *a6@<X8>)
{
  uint64_t v6 = a3;
  uint64_t v8 = a6;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
    swift_release();
LABEL_22:
    uint64_t result = outlined consume of Text.LineStyle?(v6, a4);
    void v8[6] = 0;
    *((_OWORD *)v8 + 1) = 0u;
    *((_OWORD *)v8 + 2) = 0u;
    *(_OWORD *)uint64_t v8 = 0u;
    return result;
  }
  unint64_t v24 = HIDWORD(a3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = (uint64_t *)(a1 + 80);
  while (1)
  {
    uint64_t v15 = *(v11 - 6);
    uint64_t v14 = *(v11 - 5);
    uint64_t v17 = *(v11 - 4);
    uint64_t v16 = *(v11 - 3);
    uint64_t v18 = *v11;
    if (!v14 || a2 == 0) {
      break;
    }
    uint64_t v27 = *(v11 - 2);
    uint64_t v28 = *(v11 - 1);
    uint64_t v33 = *(uint64_t (**)(uint64_t))(*(void *)v14 + 176);
    swift_retain();
    swift_retain();
    outlined copy of Text.LineStyle?(v17, v16);
    swift_retain();
    swift_retain();
    uint64_t v12 = swift_retain();
    char v13 = v33(v12);
    swift_release();
    swift_release();
    if (v13) {
      goto LABEL_23;
    }
LABEL_4:
    swift_release();
    swift_release();
    outlined consume of Text.LineStyle?(v17, v16);
    swift_release();
LABEL_5:
    v11 += 7;
    if (!--v9)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v8 = a6;
      uint64_t v6 = a3;
      goto LABEL_22;
    }
  }
  if (v16 != 1 && a4 != 1)
  {
    uint64_t v27 = *(v11 - 2);
    uint64_t v28 = *(v11 - 1);
    v32[0] = *(v11 - 4);
    v32[1] = v16;
    v30[0] = a3;
    v30[1] = v24;
    uint64_t v31 = a4;
    swift_retain();
    swift_retain();
    outlined copy of Text.LineStyle?(v17, v16);
    swift_retain();
    char v21 = MEMORY[0x18C10D6E0](v32, v30);
    if (v21) {
      goto LABEL_23;
    }
    goto LABEL_4;
  }
  if (*(v11 - 2) != a5) {
    goto LABEL_5;
  }
  uint64_t v28 = *(v11 - 1);
  swift_retain();
  swift_retain();
  outlined copy of Text.LineStyle?(v17, v16);
  swift_retain();
  uint64_t v27 = a5;
LABEL_23:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = outlined consume of Text.LineStyle?(a3, a4);
  *a6 = v15;
  a6[1] = v14;
  a6[2] = v17;
  a6[3] = v16;
  a6[4] = v27;
  a6[5] = v28;
  a6[6] = v18;
  return result;
}

uint64_t NavigationColumnState.ColumnContent.isPresentingViewDestinationView(_:)(uint64_t *a1)
{
  uint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v7 = *v1;
  uint64_t v6 = v1[1];
  uint64_t v9 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v10 = v1[4];
  if (v1[7] < 0)
  {
    char v12 = 0;
    if (v7 < 0 && (v7 & 0xF000000000000007) != 0xF000000000000007)
    {
      uint64_t v15 = v6;
      uint64_t v16 = v9;
      uint64_t v17 = v8;
      uint64_t v18 = v10;
      uint64_t v19 = v3;
      unint64_t v20 = v2;
      uint64_t v21 = v5;
      uint64_t v22 = v4;
      char v12 = NavigationLinkSelectionIdentifier.matches(_:)(&v19);
    }
  }
  else
  {
    uint64_t v14 = v1[3];
    uint64_t v11 = v1[8];
    if ((~v7 & 0xF000000000000007) != 0)
    {
      if (v7 < 0)
      {
        uint64_t v15 = v6;
        uint64_t v16 = v9;
        uint64_t v17 = v14;
        uint64_t v18 = v10;
        uint64_t v19 = v3;
        unint64_t v20 = v2;
        uint64_t v21 = v5;
        uint64_t v22 = v4;
        outlined copy of NavigationColumnState.ReplacedRoot(v7, v6, v9, v14);
        if (NavigationLinkSelectionIdentifier.matches(_:)(&v19))
        {
          outlined consume of NavigationColumnState.ReplacedRoot?(v7, v6, v9, v14);
          char v12 = 1;
          return v12 & 1;
        }
      }
      else
      {
        swift_retain();
      }
    }
    swift_retain();
    outlined copy of Text.LineStyle?(v2, v5);
    specialized Sequence.first(where:)(v11, v3, v2, v5, v4, &v15);
    outlined consume of NavigationColumnState.ReplacedRoot?(v7, v6, v9, v14);
    char v12 = v15 != 0;
    if (v15) {
      outlined consume of NavigationViewDestinationView?(v15, v16, v17, v18);
    }
  }
  return v12 & 1;
}

uint64_t closure #1 in NavigationColumnState.ColumnContent.dismissReplacedRootView()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 40))();
}

Swift::Void __swiftcall NavigationColumnState.ColumnContent.clearAll(popReplacedRoots:)(Swift::Bool popReplacedRoots)
{
  unint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v6 = v1 + 1;
  uint64_t v5 = v1[1];
  uint64_t v8 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = v1[5];
  uint64_t v12 = v1[6];
  uint64_t v11 = v1[7];
  if (v11 < 0)
  {
    if (popReplacedRoots)
    {
      outlined consume of NavigationColumnState.ColumnContent(v4, v5, v8, v7, v9, v10, v12, v11);
      uint64_t v5 = 0;
      uint64_t v8 = 0;
      uint64_t v7 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v12 = 0;
      uint64_t v21 = 0;
      unint64_t v20 = 0;
      uint64_t v11 = 0x8000000000000000;
      uint64_t v4 = 0xF000000000000007;
    }
    else
    {
      uint64_t v21 = 0;
      unint64_t v20 = 0;
      uint64_t v11 = 0x8000000000000000;
    }
  }
  else
  {
    Swift::Bool v22 = popReplacedRoots;
    uint64_t v23 = v4;
    uint64_t v24 = v5;
    *unint64_t v2 = 0xF000000000000007;
    *uint64_t v6 = 0u;
    v6[1] = 0u;
    _OWORD v6[2] = 0u;
    v2[7] = 0x8000000000000000;
    v2[8] = 0;
    v2[9] = 0;
    uint64_t v13 = (*(uint64_t (**)(void))(*(void *)v11 + 88))();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v14 = v7;
      uint64_t v15 = v8;
      uint64_t v16 = v10;
      uint64_t v17 = v9;
      uint64_t v18 = v12;
      uint64_t v19 = (*(uint64_t (**)(void))(*(void *)v11 + 104))();
      swift_release();
      uint64_t v11 = v19;
      uint64_t v12 = v18;
      uint64_t v9 = v17;
      uint64_t v10 = v16;
      uint64_t v8 = v15;
      uint64_t v7 = v14;
    }
    (*(void (**)(uint64_t))(*(void *)v11 + 128))(v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v20 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    if (v22)
    {
      outlined consume of NavigationColumnState.ReplacedRoot?(v23, v24, v8, v7);
      uint64_t v5 = 0;
      uint64_t v8 = 0;
      uint64_t v7 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v12 = 0;
      uint64_t v4 = 0xF000000000000007;
    }
    else
    {
      uint64_t v4 = v23;
      uint64_t v5 = v24;
    }
    uint64_t v21 = MEMORY[0x1E4FBC860];
  }
  *unint64_t v2 = v4;
  v2[1] = v5;
  v2[2] = v8;
  v2[3] = v7;
  v2[4] = v9;
  v2[5] = v10;
  v2[6] = v12;
  v2[7] = v11;
  v2[8] = v21;
  v2[9] = v20;
}

uint64_t NavigationColumnState.ColumnContent.presentView(_:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2[7];
  if (v3 < 0) {
    return 1;
  }
  uint64_t v4 = v2;
  uint64_t v6 = *(void *)a1;
  uint64_t v26 = *(void *)(a1 + 8);
  uint64_t v27 = *(void *)(a1 + 16);
  long long v36 = *(_OWORD *)(a1 + 24);
  uint64_t v25 = *(void *)(a1 + 40);
  uint64_t v7 = *v2;
  uint64_t v33 = v2[2];
  uint64_t v34 = v2[1];
  uint64_t v31 = v2[4];
  uint64_t v32 = v2[3];
  uint64_t v30 = v2[5];
  uint64_t v28 = *(void *)(a1 + 48);
  uint64_t v29 = v2[6];
  uint64_t v8 = v2[8];
  uint64_t v9 = v2[9];
  *(void *)&long long v37 = v8;
  *((void *)&v37 + 1) = v9;
  *unint64_t v2 = 0xF000000000000007;
  *(_OWORD *)(v2 + 1) = 0u;
  *(_OWORD *)(v2 + 3) = 0u;
  *(_OWORD *)(v2 + 5) = 0u;
  v2[7] = 0x8000000000000000;
  v2[8] = 0;
  v2[9] = 0;
  uint64_t v10 = *(uint64_t (**)(void))(*(void *)v3 + 88);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v11 = swift_bridgeObjectRetain();
  uint64_t v35 = v7;
  if (((uint64_t (*)(uint64_t))v10)(v11) > a2)
  {
    uint64_t v12 = v10();
    uint64_t result = swift_release();
    uint64_t v14 = v12 - a2;
    if (!__OFSUB__(v12, a2))
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v3 + 104))();
        swift_release();
        uint64_t v3 = v15;
      }
      uint64_t v24 = v14;
      (*(void (**)(uint64_t))(*(void *)v3 + 128))(v14);
      specialized Collection<>.dismiss(from:)(0, v8, v9);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t v8 = MEMORY[0x1E4FBC860];
      *(void *)&long long v37 = MEMORY[0x1E4FBC860];
      *((void *)&v37 + 1) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
      goto LABEL_19;
    }
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v16 = *(void *)(v8 + 16);
  uint64_t result = v10();
  if (__OFADD__(v16, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v16 + result <= a2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_18:
    uint64_t v24 = 1;
    goto LABEL_19;
  }
  uint64_t v17 = v10();
  uint64_t result = swift_release();
  BOOL v18 = __OFSUB__(a2, v17);
  uint64_t v19 = a2 - v17;
  if (v18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Collection<>.dismiss(from:)(v19, v8, v9);
  swift_bridgeObjectRelease_n();
  uint64_t result = swift_bridgeObjectRelease_n();
  uint64_t v20 = v16 - v19;
  if (__OFSUB__(v16, v19))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (!v20) {
    goto LABEL_18;
  }
  if (v20 < 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v21 = *(void *)(v8 + 16);
  uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(v21, v19 - v16, 0, v8);
  if (v22)
  {
LABEL_27:
    __break(1u);
    return result;
  }
  if (v21 < result)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  specialized IdentifiedArray.replaceSubrange<A>(_:with:)(result, v21);
  uint64_t v24 = 1;
LABEL_19:
  uint64_t v23 = *(void *)(v8 + 16);
  v38[0] = v6;
  v38[1] = v26;
  v38[2] = v27;
  long long v39 = v36;
  uint64_t v40 = v25;
  uint64_t v41 = v28;
  swift_retain();
  swift_retain();
  outlined copy of Text.LineStyle?(v27, v36);
  swift_retain();
  specialized IdentifiedArray.replaceSubrange<A>(_:with:)(v23, v23, v38);
  swift_release();
  swift_release();
  outlined consume of Text.LineStyle?(v27, v36);
  swift_release();
  *uint64_t v4 = v35;
  v4[1] = v34;
  void v4[2] = v33;
  void v4[3] = v32;
  v4[4] = v31;
  void v4[5] = v30;
  _OWORD v4[6] = v29;
  v4[7] = v3;
  *((_OWORD *)v4 + 4) = v37;
  return v24;
}

unint64_t NavigationColumnState.ColumnContent.replaceViewDestinationView(_:identifier:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  uint64_t v7 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v9 = *v2;
  uint64_t v8 = v2[1];
  uint64_t v10 = v2[2];
  uint64_t v11 = v2[3];
  uint64_t v12 = v2[4];
  uint64_t v13 = v2[5];
  uint64_t v15 = v3[6];
  uint64_t v14 = v3[7];
  uint64_t v16 = v3[8];
  uint64_t v17 = v3[9];
  if (v14 < 0)
  {
    if ((~v9 & 0xF000000000000007) != 0)
    {
      if ((v9 & 0x8000000000000000) == 0) {
        return 0;
      }
      uint64_t v61 = v8;
      uint64_t v62 = v10;
      uint64_t v63 = v11;
      uint64_t v64 = v12;
      *(void *)&long long v58 = v4;
      *((void *)&v58 + 1) = v5;
      uint64_t v59 = v7;
      uint64_t v60 = v6;
      uint64_t v30 = v8;
      uint64_t v31 = v10;
      uint64_t v32 = v11;
      uint64_t v57 = v12;
      uint64_t v33 = v14;
      outlined copy of NavigationColumnState.ColumnContent(v9, v8, v10, v11, v12, v13, v15, v14);
      swift_retain();
      outlined copy of Text.LineStyle?(v31, v32);
      swift_retain();
      if (NavigationLinkSelectionIdentifier.matches(_:)(&v58))
      {
        outlined consume of NavigationColumnState.ColumnContent(v9, v30, v31, v32, v57, v13, v15, v33);
        swift_retain_n();
        swift_release();
        swift_retain();
        outlined copy of Text.LineStyle?(v31, v32);
        outlined consume of Text.LineStyle?(v31, v32);
        swift_release();
        swift_release_n();
        outlined consume of Text.LineStyle?(v31, v32);
        swift_release();
        *uint64_t v3 = a1 | 0x8000000000000000;
        v3[1] = v30;
        v3[2] = v31;
        v3[3] = v32;
        v3[4] = v57;
        v3[5] = v13;
        v3[6] = v15;
        _OWORD v3[7] = 0x8000000000000000;
        unint64_t result = 1;
        v3[8] = 0;
        v3[9] = 0;
        return result;
      }
      swift_release();
      outlined consume of Text.LineStyle?(v31, v32);
      swift_release();
      uint64_t v27 = v9;
      uint64_t v8 = v30;
      uint64_t v10 = v31;
      uint64_t v11 = v32;
      uint64_t v12 = v57;
      uint64_t v28 = v13;
      uint64_t v29 = v15;
      uint64_t v14 = v33;
    }
    else
    {
      uint64_t v27 = v9;
      uint64_t v28 = v13;
      uint64_t v29 = v3[6];
    }
LABEL_21:
    outlined consume of NavigationColumnState.ColumnContent(v27, v8, v10, v11, v12, v28, v29, v14);
    return 0;
  }
  uint64_t v55 = v8;
  uint64_t v56 = v12;
  uint64_t v53 = v10;
  uint64_t v54 = v11;
  uint64_t v52 = v3[7];
  uint64_t v49 = v6;
  if ((~v9 & 0xF000000000000007) == 0 || (v9 & 0x8000000000000000) == 0)
  {
    outlined copy of NavigationColumnState.ReplacedRoot?(v9, v8, v10, v11);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (*(void *)(v17 + 16)) {
      goto LABEL_5;
    }
LABEL_19:
    uint64_t v27 = v9;
    uint64_t v11 = v54;
    uint64_t v8 = v55;
    uint64_t v10 = v53;
    uint64_t v12 = v56;
    uint64_t v28 = v13;
    goto LABEL_20;
  }
  uint64_t v61 = v8;
  uint64_t v62 = v10;
  uint64_t v63 = v11;
  uint64_t v64 = v12;
  *(void *)&long long v58 = v4;
  *((void *)&v58 + 1) = v5;
  unint64_t v43 = v5;
  uint64_t v45 = v7;
  uint64_t v59 = v7;
  uint64_t v60 = v6;
  uint64_t v41 = v17;
  uint64_t v34 = v8;
  uint64_t v35 = v10;
  uint64_t v36 = v15;
  uint64_t v37 = v11;
  uint64_t v46 = v16;
  uint64_t v38 = v14;
  outlined copy of NavigationColumnState.ColumnContent(v9, v8, v10, v11, v12, v13, v36, v14);
  uint64_t v39 = v37;
  uint64_t v40 = v37;
  uint64_t v15 = v36;
  outlined copy of NavigationColumnState.ReplacedRoot?(v9, v34, v35, v39);
  uint64_t v17 = v41;
  swift_retain();
  outlined copy of Text.LineStyle?(v35, v40);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (NavigationLinkSelectionIdentifier.matches(_:)(&v58))
  {
    outlined consume of NavigationColumnState.ColumnContent(v9, v55, v35, v40, v56, v13, v36, v38);
    outlined consume of NavigationColumnState.ColumnContent(v9, v55, v35, v40, v56, v13, v36, v38);
    swift_retain_n();
    swift_release();
    swift_retain();
    outlined copy of Text.LineStyle?(v35, v40);
    outlined consume of Text.LineStyle?(v35, v40);
    swift_release();
    swift_release_n();
    outlined consume of Text.LineStyle?(v35, v40);
    swift_release();
    *uint64_t v3 = a1 | 0x8000000000000000;
    v3[1] = v55;
    v3[2] = v35;
    v3[3] = v40;
    v3[4] = v56;
    v3[5] = v13;
    v3[6] = v36;
    _OWORD v3[7] = v38;
    unint64_t result = 1;
    v3[8] = v46;
    v3[9] = v41;
    return result;
  }
  swift_release();
  outlined consume of Text.LineStyle?(v35, v40);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v16 = v46;
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of NavigationColumnState.ReplacedRoot?(v9, v55, v35, v40);
  unint64_t v5 = v43;
  uint64_t v7 = v45;
  if (!*(void *)(v41 + 16)) {
    goto LABEL_19;
  }
LABEL_5:
  uint64_t v51 = v13;
  swift_retain();
  outlined copy of Text.LineStyle?(v5, v7);
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5, v7, v49);
  if ((v19 & 1) == 0)
  {
    swift_release();
    outlined consume of Text.LineStyle?(v5, v7);
    uint64_t v27 = v9;
    uint64_t v11 = v54;
    uint64_t v8 = v55;
    uint64_t v10 = v53;
    uint64_t v12 = v56;
    uint64_t v28 = v13;
LABEL_20:
    uint64_t v29 = v15;
    uint64_t v14 = v52;
    goto LABEL_21;
  }
  unint64_t v20 = *(void *)(*(void *)(v17 + 56) + 8 * result);
  if ((v20 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v21 = *(void *)(v16 + 16);
    swift_release();
    unint64_t result = outlined consume of Text.LineStyle?(v5, v7);
    if (v20 < v21)
    {
      uint64_t v50 = v15;
      *(void *)&long long v58 = v16;
      *((void *)&v58 + 1) = v17;
      if (v20 < *(void *)(v16 + 16))
      {
        char v22 = (void *)(v16 + 56 * v20);
        uint64_t v23 = v22[5];
        uint64_t v24 = v22[6];
        uint64_t v25 = v22[7];
        uint64_t v26 = v22[10];
        uint64_t v42 = v22[9];
        uint64_t v44 = v22[8];
        swift_retain();
        swift_retain();
        swift_retain();
        outlined copy of Text.LineStyle?(v24, v25);
        swift_retain();
        swift_release();
        uint64_t v61 = a1;
        uint64_t v62 = v23;
        uint64_t v63 = v24;
        uint64_t v64 = v25;
        uint64_t v65 = v44;
        uint64_t v66 = v42;
        uint64_t v67 = v26;
        specialized IdentifiedArray.subscript.setter(&v61, v20);
        outlined consume of NavigationColumnState.ColumnContent(v9, v55, v53, v54, v56, v51, v50, v52);
        *uint64_t v3 = v9;
        v3[1] = v55;
        v3[2] = v53;
        v3[3] = v54;
        v3[4] = v56;
        v3[5] = v51;
        v3[6] = v50;
        _OWORD v3[7] = v52;
        *((_OWORD *)v3 + 4) = v58;
        return 1;
      }
      goto LABEL_26;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized IdentifiedArray.subscript.setter(void *a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v2 = v3;
  unint64_t v5 = a2;
  if (*(void *)(*v3 + 16) <= a2)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v3);
    uint64_t v3 = (void *)result;
    goto LABEL_6;
  }
  uint64_t v4 = (uint64_t)a1;
  uint64_t v6 = (void *)(*v3 + 56 * a2);
  uint64_t v7 = v6[5];
  unint64_t v8 = v6[6];
  uint64_t v10 = v6[7];
  uint64_t v9 = v6[8];
  uint64_t v33 = v7;
  unint64_t v34 = v8;
  uint64_t v35 = v10;
  uint64_t v36 = v9;
  uint64_t v12 = a1[1];
  unint64_t v11 = a1[2];
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  uint64_t v29 = v12;
  unint64_t v30 = v11;
  uint64_t v31 = v14;
  uint64_t v32 = v13;
  uint64_t v27 = v13;
  swift_retain();
  outlined copy of Text.LineStyle?(v8, v10);
  swift_retain();
  outlined copy of Text.LineStyle?(v11, v14);
  if (!specialized static NavigationLinkSelectionIdentifier.== infix(_:_:)(&v29, &v33))
  {
    swift_retain();
    outlined copy of Text.LineStyle?(v8, v10);
    specialized Dictionary._Variant.removeValue(forKey:)(v7, v8, v10, v9);
    swift_release();
    outlined consume of Text.LineStyle?(v8, v10);
    swift_retain();
    outlined copy of Text.LineStyle?(v11, v14);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = v2[1];
    v2[1] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v5, v12, v11, v14, v27, isUniquelyReferenced_nonNull_native);
    v2[1] = v28;
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Text.LineStyle?(v11, v14);
  }
  uint64_t v3 = (void *)*v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_12;
  }
LABEL_6:
  if (v3[2] <= v5)
  {
    __break(1u);
  }
  else
  {
    uint64_t v17 = &v3[7 * v5];
    uint64_t v18 = v17[6];
    uint64_t v19 = v17[7];
    outlined retain of NavigationViewDestinationView(v4);
    swift_release();
    swift_release();
    outlined consume of Text.LineStyle?(v18, v19);
    swift_release();
    long long v20 = *(_OWORD *)v4;
    long long v21 = *(_OWORD *)(v4 + 16);
    long long v22 = *(_OWORD *)(v4 + 32);
    v17[10] = *(void *)(v4 + 48);
    *((_OWORD *)v17 + 3) = v21;
    *((_OWORD *)v17 + 4) = v22;
    *((_OWORD *)v17 + 2) = v20;
    outlined release of NavigationViewDestinationView(v4);
    *unint64_t v2 = v3;
    uint64_t v23 = v30;
    uint64_t v24 = v31;
    swift_release();
    outlined consume of Text.LineStyle?(v23, v24);
    uint64_t v25 = v34;
    uint64_t v26 = v35;
    swift_release();
    return outlined consume of Text.LineStyle?(v25, v26);
  }
  return result;
}

uint64_t outlined consume of NavigationViewDestinationView?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    swift_release();
    swift_release();
    outlined consume of Text.LineStyle?(a3, a4);
    return swift_release();
  }
  return result;
}

uint64_t outlined retain of NavigationViewDestinationView(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  swift_retain();
  swift_retain();
  outlined copy of Text.LineStyle?(v2, v3);
  swift_retain();
  return a1;
}

uint64_t outlined release of NavigationViewDestinationView(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  swift_release();
  swift_release();
  outlined consume of Text.LineStyle?(v2, v3);
  swift_release();
  return a1;
}

void View.onLongTouchGesture(minimumDuration:perform:onTouchingChanged:)()
{
}

uint64_t sub_187B6EFB4()
{
  type metadata accessor for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>, (void (*)(uint64_t))type metadata accessor for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>);
  return swift_getWitnessTable();
}

void type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, LongRemoteTouchGesture>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, LongRemoteTouchGesture>)
  {
    type metadata accessor for CallbacksGesture<PressableGestureCallbacks<Bool>>();
    lazy protocol witness table accessor for type ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type CallbacksGesture<PressableGestureCallbacks<Bool>> and conformance CallbacksGesture<A>, (void (*)(uint64_t))type metadata accessor for CallbacksGesture<PressableGestureCallbacks<Bool>>);
    lazy protocol witness table accessor for type LongRemoteTouchGesture and conformance LongRemoteTouchGesture();
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, LongRemoteTouchGesture>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>> and conformance ModifierGesture<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LongRemoteTouchGesture and conformance LongRemoteTouchGesture()
{
  unint64_t result = lazy protocol witness table cache variable for type LongRemoteTouchGesture and conformance LongRemoteTouchGesture;
  if (!lazy protocol witness table cache variable for type LongRemoteTouchGesture and conformance LongRemoteTouchGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LongRemoteTouchGesture and conformance LongRemoteTouchGesture);
  }
  return result;
}

void *type metadata accessor for LongRemoteTouchGesture()
{
  return &unk_1ED439D10;
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in LongRemoteTouchGesture()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187B6F380()
{
  return lazy protocol witness table accessor for type ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.dependency(_:)>>.0> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.dependency(_:)>>.0>);
}

void type metadata accessor for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.dependency(_:)>>.0>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.dependency(_:)>>.0>)
  {
    type metadata accessor for EventFilter<Bool>(255, &lazy cache variable for type metadata for EventFilter<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F3F4E8]);
    type metadata accessor for <<opaque return type of Gesture.dependency(_:)>>.0();
    lazy protocol witness table accessor for type EventFilter<Bool> and conformance EventFilter<A>();
    type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0();
    type metadata accessor for ModifierGesture<MapGesture<TouchEvent, Bool>, EventListener<TouchEvent>>();
    type metadata accessor for ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>>();
    lazy protocol witness table accessor for type ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<TouchEvent, Bool>, EventListener<TouchEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<TouchEvent, Bool>, EventListener<TouchEvent>>);
    lazy protocol witness table accessor for type ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>>);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.dependency(_:)>>.0>);
    }
  }
}

void type metadata accessor for <<opaque return type of Gesture.dependency(_:)>>.0()
{
  if (!lazy cache variable for type metadata for <<opaque return type of Gesture.dependency(_:)>>.0)
  {
    type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0();
    type metadata accessor for ModifierGesture<MapGesture<TouchEvent, Bool>, EventListener<TouchEvent>>();
    type metadata accessor for ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>>();
    lazy protocol witness table accessor for type ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<TouchEvent, Bool>, EventListener<TouchEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<TouchEvent, Bool>, EventListener<TouchEvent>>);
    lazy protocol witness table accessor for type ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>>);
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.dependency(_:)>>.0);
    }
  }
}

{
  unint64_t OpaqueTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for <<opaque return type of Gesture.dependency(_:)>>.0)
  {
    type metadata accessor for ModifierGesture<CoordinateSpaceGesture<[EventID : TouchEvent]>, MultiEventListener<TouchEvent>>();
    lazy protocol witness table accessor for type CoordinateSpaceGesture<[EventID : TouchEvent]> and conformance CoordinateSpaceGesture<A>(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<[EventID : TouchEvent]>, MultiEventListener<TouchEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<[EventID : TouchEvent]>, MultiEventListener<TouchEvent>>);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.dependency(_:)>>.0);
    }
  }
}

void type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0()
{
  if (!lazy cache variable for type metadata for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0)
  {
    type metadata accessor for ModifierGesture<MapGesture<TouchEvent, Bool>, EventListener<TouchEvent>>();
    type metadata accessor for ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>>();
    lazy protocol witness table accessor for type ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<TouchEvent, Bool>, EventListener<TouchEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<TouchEvent, Bool>, EventListener<TouchEvent>>);
    lazy protocol witness table accessor for type ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>>);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0);
    }
  }
}

{
  unint64_t OpaqueTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0)
  {
    type metadata accessor for ModifierGesture<MapGesture<SpatialEvent, Bool>, EventListener<SpatialEvent>>();
    type metadata accessor for ModifierGesture<DurationGesture<SpatialEvent>, EventListener<SpatialEvent>>();
    lazy protocol witness table accessor for type ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<SpatialEvent, Bool>, EventListener<SpatialEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<SpatialEvent, Bool>, EventListener<SpatialEvent>>);
    lazy protocol witness table accessor for type ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<SpatialEvent>, EventListener<SpatialEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<SpatialEvent>, EventListener<SpatialEvent>>);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0);
    }
  }
}

{
  unint64_t OpaqueTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0)
  {
    type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0();
    type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>();
    type metadata accessor for ModifierGesture<MapGesture<SpatialEvent, Bool>, EventListener<SpatialEvent>>();
    type metadata accessor for ModifierGesture<DurationGesture<SpatialEvent>, EventListener<SpatialEvent>>();
    lazy protocol witness table accessor for type ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<SpatialEvent, Bool>, EventListener<SpatialEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<SpatialEvent, Bool>, EventListener<SpatialEvent>>);
    lazy protocol witness table accessor for type ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<SpatialEvent>, EventListener<SpatialEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<SpatialEvent>, EventListener<SpatialEvent>>);
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0);
    }
  }
}

{
  unint64_t OpaqueTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0)
  {
    type metadata accessor for ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>();
    type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>();
    lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>);
    lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0);
    }
  }
}

{
  unint64_t OpaqueTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0)
  {
    type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0();
    type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>();
    type metadata accessor for ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>();
    lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>);
    lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>);
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0);
    }
  }
}

{
  unint64_t OpaqueTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0)
  {
    type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0();
    type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>();
    type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0();
    type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>();
    type metadata accessor for ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>();
    lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>);
    lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0);
    }
  }
}

void type metadata accessor for ModifierGesture<MapGesture<TouchEvent, Bool>, EventListener<TouchEvent>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<MapGesture<TouchEvent, Bool>, EventListener<TouchEvent>>)
  {
    type metadata accessor for PressableGestureCallbacks<Bool>(255, &lazy cache variable for type metadata for MapGesture<TouchEvent, Bool>, (uint64_t)&type metadata for TouchEvent, MEMORY[0x1E4FBB390], MEMORY[0x1E4F3F370]);
    type metadata accessor for EventListener<TouchEvent>();
    lazy protocol witness table accessor for type MapGesture<TouchEvent, Bool> and conformance MapGesture<A, B>();
    lazy protocol witness table accessor for type ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type EventListener<TouchEvent> and conformance EventListener<A>, (void (*)(uint64_t))type metadata accessor for EventListener<TouchEvent>);
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<MapGesture<TouchEvent, Bool>, EventListener<TouchEvent>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type MapGesture<TouchEvent, Bool> and conformance MapGesture<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type MapGesture<TouchEvent, Bool> and conformance MapGesture<A, B>;
  if (!lazy protocol witness table cache variable for type MapGesture<TouchEvent, Bool> and conformance MapGesture<A, B>)
  {
    type metadata accessor for PressableGestureCallbacks<Bool>(255, &lazy cache variable for type metadata for MapGesture<TouchEvent, Bool>, (uint64_t)&type metadata for TouchEvent, MEMORY[0x1E4FBB390], MEMORY[0x1E4F3F370]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MapGesture<TouchEvent, Bool> and conformance MapGesture<A, B>);
  }
  return result;
}

void type metadata accessor for ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>>)
  {
    type metadata accessor for EventFilter<Bool>(255, &lazy cache variable for type metadata for DurationGesture<TouchEvent>, (uint64_t)&type metadata for TouchEvent, MEMORY[0x1E4F3FB10]);
    type metadata accessor for EventListener<TouchEvent>();
    lazy protocol witness table accessor for type DurationGesture<TouchEvent> and conformance DurationGesture<A>();
    lazy protocol witness table accessor for type ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type EventListener<TouchEvent> and conformance EventListener<A>, (void (*)(uint64_t))type metadata accessor for EventListener<TouchEvent>);
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>>);
    }
  }
}

void type metadata accessor for EventFilter<Bool>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type DurationGesture<TouchEvent> and conformance DurationGesture<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type DurationGesture<TouchEvent> and conformance DurationGesture<A>;
  if (!lazy protocol witness table cache variable for type DurationGesture<TouchEvent> and conformance DurationGesture<A>)
  {
    type metadata accessor for EventFilter<Bool>(255, &lazy cache variable for type metadata for DurationGesture<TouchEvent>, (uint64_t)&type metadata for TouchEvent, MEMORY[0x1E4F3FB10]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DurationGesture<TouchEvent> and conformance DurationGesture<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EventFilter<Bool> and conformance EventFilter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EventFilter<Bool> and conformance EventFilter<A>;
  if (!lazy protocol witness table cache variable for type EventFilter<Bool> and conformance EventFilter<A>)
  {
    type metadata accessor for EventFilter<Bool>(255, &lazy cache variable for type metadata for EventFilter<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F3F4E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventFilter<Bool> and conformance EventFilter<A>);
  }
  return result;
}

uint64_t EnvironmentValues.toolbarCustomizationBehavior.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.toolbarCustomizationBehavior.setter()
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void static ToolbarCustomizationBehavior.default.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t static CustomizationBehaviorModifier._makeToolbar(content:inputs:body:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  unsigned int v6 = *((_DWORD *)a2 + 6);
  unsigned int v7 = *((_DWORD *)a2 + 7);
  unsigned int v8 = *((_DWORD *)a2 + 8);
  unsigned int v9 = *((_DWORD *)a2 + 9);
  uint64_t v10 = a2[5];
  uint64_t v11 = a2[6];
  int v12 = *((_DWORD *)a2 + 14);
  uint64_t v13 = a2[8];
  int v14 = *((_DWORD *)a2 + 18);
  uint64_t v26 = *a2;
  int v27 = v4;
  uint64_t v28 = v5;
  *(void *)&long long v29 = __PAIR64__(v7, v6);
  *((void *)&v29 + 1) = __PAIR64__(v9, v8);
  uint64_t v30 = v10;
  uint64_t v31 = v11;
  int v32 = v12;
  uint64_t v33 = v13;
  int v34 = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphInputs.environment.getter();
  type metadata accessor for _GraphValue<CustomizationBehaviorModifier>();
  _GraphValue.value.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type CustomizationBehaviorModifier.ChildEnvironment and conformance CustomizationBehaviorModifier.ChildEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphInputs.environment.setter();
  uint64_t v17 = v26;
  int v18 = v27;
  uint64_t v19 = v5;
  long long v20 = v29;
  uint64_t v21 = v10;
  uint64_t v22 = v11;
  int v23 = v32;
  uint64_t v24 = v33;
  int v25 = v34;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v15 = swift_bridgeObjectRetain();
  a3(v15, &v17);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for Rule.value.getter in conformance CustomizationBehaviorModifier.ChildEnvironment@<X0>(void *a1@<X8>)
{
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v3 = Value[1];
  *a1 = *Value;
  a1[1] = v3;
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  return specialized EnvironmentValues.subscript.setter();
}

void static ToolbarCustomizationBehavior.reorderable.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static ToolbarCustomizationBehavior.disabled.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t CustomizableToolbarContent.customizationBehavior(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = *a1;
  return ToolbarContent.modifier<A>(_:)((uint64_t)&v4, a2, (uint64_t)&type metadata for CustomizationBehaviorModifier, a3);
}

uint64_t sub_187B6FFB8()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type ToolbarCustomizationBehavior.Role and conformance ToolbarCustomizationBehavior.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarCustomizationBehavior.Role and conformance ToolbarCustomizationBehavior.Role;
  if (!lazy protocol witness table cache variable for type ToolbarCustomizationBehavior.Role and conformance ToolbarCustomizationBehavior.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarCustomizationBehavior.Role and conformance ToolbarCustomizationBehavior.Role);
  }
  return result;
}

void type metadata accessor for _GraphValue<CustomizationBehaviorModifier>()
{
  if (!lazy cache variable for type metadata for _GraphValue<CustomizationBehaviorModifier>)
  {
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<CustomizationBehaviorModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type CustomizationBehaviorModifier.ChildEnvironment and conformance CustomizationBehaviorModifier.ChildEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomizationBehaviorModifier.ChildEnvironment and conformance CustomizationBehaviorModifier.ChildEnvironment;
  if (!lazy protocol witness table cache variable for type CustomizationBehaviorModifier.ChildEnvironment and conformance CustomizationBehaviorModifier.ChildEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomizationBehaviorModifier.ChildEnvironment and conformance CustomizationBehaviorModifier.ChildEnvironment);
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.ToolbarCustomizationBehaviorKey()
{
  return &type metadata for EnvironmentValues.ToolbarCustomizationBehaviorKey;
}

void *type metadata accessor for CustomizationBehaviorModifier.ChildEnvironment()
{
  return &unk_1ED4558F8;
}

void PushWindowAction.callAsFunction<A>(value:)()
{
}

Swift::Void __swiftcall PushWindowAction.callAsFunction(id:)(Swift::String id)
{
}

void PushWindowAction.callAsFunction<A>(id:value:)()
{
}

void EnvironmentValues.pushWindow.getter()
{
}

uint64_t destroy for PushWindowAction(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 16);
  if (v1 <= 0xFD) {
    return outlined consume of SceneID(*(void *)result, *(void *)(result + 8), v1 & 1);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PushWindowAction(uint64_t a1, uint64_t *a2)
{
  int v3 = *((unsigned __int8 *)a2 + 16);
  if (v3 == 254 || v3 == 255)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  }
  else
  {
    char v4 = v3 & 1;
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    outlined copy of SceneID(*a2, v6, v3 & 1);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v6;
    *(unsigned char *)(a1 + 16) = v4;
  }
  return a1;
}

uint64_t assignWithCopy for PushWindowAction(uint64_t a1, uint64_t *a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 16);
  int v5 = *((unsigned __int8 *)a2 + 16);
  if (v4 == 254)
  {
    if (v5 == 254) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (v5 == 254)
  {
    outlined destroy of SceneID?(a1);
LABEL_12:
    char v10 = *((unsigned char *)a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = v10;
    return a1;
  }
  if (v4 != 255)
  {
    if (v5 != 255)
    {
      char v12 = v5 & 1;
      uint64_t v14 = *a2;
      uint64_t v13 = a2[1];
      outlined copy of SceneID(*a2, v13, v5 & 1);
      uint64_t v15 = *(void *)a1;
      uint64_t v16 = *(void *)(a1 + 8);
      char v17 = *(unsigned char *)(a1 + 16);
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v13;
      *(unsigned char *)(a1 + 16) = v12;
      outlined consume of SceneID(v15, v16, v17);
      return a1;
    }
    outlined destroy of SceneID(a1);
    goto LABEL_12;
  }
LABEL_7:
  if (v5 != 255)
  {
    char v7 = v5 & 1;
    uint64_t v9 = *a2;
    uint64_t v8 = a2[1];
    outlined copy of SceneID(*a2, v8, v5 & 1);
    *(void *)a1 = v9;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v7;
    return a1;
  }
LABEL_8:
  long long v6 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  *(_OWORD *)a1 = v6;
  return a1;
}

uint64_t outlined destroy of SceneID?(uint64_t a1)
{
  type metadata accessor for SceneID?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for SceneID?()
{
  if (!lazy cache variable for type metadata for SceneID?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SceneID?);
    }
  }
}

uint64_t assignWithTake for PushWindowAction(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 16);
  int v5 = *(unsigned __int8 *)(a2 + 16);
  if (v4 != 254)
  {
    if (v5 == 254)
    {
      outlined destroy of SceneID?(a1);
    }
    else if (v4 != 255)
    {
      if (v5 != 255)
      {
        uint64_t v7 = *(void *)a1;
        uint64_t v8 = *(void *)(a1 + 8);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(unsigned char *)(a1 + 16) = v5 & 1;
        outlined consume of SceneID(v7, v8, v4 & 1);
        return a1;
      }
      outlined destroy of SceneID(a1);
    }
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for PushWindowAction(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  int v4 = v3 ^ 0xFF;
  if ((int)(v3 ^ 0xFF) <= 1) {
    int v4 = 1;
  }
  int v5 = v4 - 2;
  if (v3 <= 1) {
    int v6 = -1;
  }
  else {
    int v6 = v5;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for PushWindowAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -2 - a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PushWindowAction()
{
  return &type metadata for PushWindowAction;
}

void Scene.defaultVisibility(_:)()
{
}

void Scene.defaultLaunchBehavior(_:)()
{
}

void static SceneLaunchBehavior.suppressed.getter()
{
}

ValueMetadata *type metadata accessor for SceneLaunchBehavior()
{
  return &type metadata for SceneLaunchBehavior;
}

ValueMetadata *type metadata accessor for WindowPresentationBehavior()
{
  return &type metadata for WindowPresentationBehavior;
}

unsigned char *storeEnumTagSinglePayload for SceneLaunchBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187B70744);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SceneLaunchBehavior.Role()
{
  return &type metadata for SceneLaunchBehavior.Role;
}

unint64_t lazy protocol witness table accessor for type SceneLaunchBehavior.Role and conformance SceneLaunchBehavior.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type SceneLaunchBehavior.Role and conformance SceneLaunchBehavior.Role;
  if (!lazy protocol witness table cache variable for type SceneLaunchBehavior.Role and conformance SceneLaunchBehavior.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneLaunchBehavior.Role and conformance SceneLaunchBehavior.Role);
  }
  return result;
}

void Scene.defaultPresentationBehavior(_:)()
{
}

void static SceneLaunchBehavior.presented.getter()
{
}

void static SceneLaunchBehavior.automatic.getter()
{
}

void static WindowPresentationBehavior.automatic.getter()
{
}

void static WindowPresentationBehavior.closed.getter()
{
}

void static WindowPresentationBehavior.opened.getter()
{
}

void TextFieldLink.body.getter()
{
}

void TextFieldLink.init(prompt:label:onSubmit:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
}

void TextFieldLink<>.init(_:prompt:onSubmit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
}

void TextFieldLink<>.init<A>(_:prompt:onSubmit:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
}

uint64_t associated type witness table accessor for View.Body : View in TextFieldLink<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata completion function for TextFieldLink()
{
  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Environment<Locale>.Content();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for TextFieldLink(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = type metadata accessor for Locale();
  int v9 = *(_DWORD *)(*(void *)(v8 - 8) + 80);
  unint64_t v10 = ~(unint64_t)(v9 & 0xF8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = (v9 & 0xF8) + 16;
  if (*(void *)(*(void *)(v8 - 8) + 64) <= 8uLL) {
    uint64_t v12 = 8;
  }
  else {
    uint64_t v12 = *(void *)(*(void *)(v8 - 8) + 64);
  }
  int v13 = v9 | *(_DWORD *)(v6 + 80);
  if ((v13 & 0x1000F8) != 0
    || v12
     + ((v11
       + ((((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
         + 31) & 0xFFFFFFFFFFFFFFF8)) & v10)
     + 1 > 0x18)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    uint64_t v16 = (uint64_t *)(v15 + (((v13 & 0xF8 | 7u) + 16) & ~(unint64_t)(v13 & 0xF8 | 7u)));
LABEL_29:
    swift_retain();
    return v16;
  }
  uint64_t v43 = *(void *)(v8 - 8);
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
  unint64_t v17 = ((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = ((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v44 = a1;
  if (*(void *)(v18 + 24) < 0xFFFFFFFFuLL)
  {
    long long v22 = *(_OWORD *)(v18 + 16);
    *(_OWORD *)unint64_t v17 = *(_OWORD *)v18;
    *(_OWORD *)(v17 + 16) = v22;
  }
  else
  {
    uint64_t v19 = *(void *)v18;
    uint64_t v20 = *(void *)(v18 + 8);
    char v21 = *(unsigned char *)(v18 + 16);
    outlined copy of Text.Storage(*(void *)v18, v20, v21);
    *(void *)unint64_t v17 = v19;
    *(void *)(v17 + 8) = v20;
    *(unsigned char *)(v17 + 16) = v21;
    *(void *)(v17 + 24) = *(void *)(v18 + 24);
    swift_bridgeObjectRetain();
  }
  int v23 = (void *)((v17 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v24 = (void *)((v18 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v25 = v24[1];
  void *v23 = *v24;
  v23[1] = v25;
  unint64_t v26 = ((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = ((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v26 = *(unsigned char *)v27;
  *(void *)(v26 + 8) = *(void *)(v27 + 8);
  uint64_t v28 = (void *)((v26 + 23) & 0xFFFFFFFFFFFFFFF8);
  long long v29 = (void *)((v27 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v28 = *v29;
  v28[1] = v29[1];
  v28[2] = v29[2];
  unint64_t v30 = ((unint64_t)v28 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v31 = ((unint64_t)v29 + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v32 = *(void *)v31;
  char v33 = *(unsigned char *)(v31 + 8);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of Environment<Bool>.Content(v32, v33);
  *(void *)unint64_t v30 = v32;
  *(unsigned char *)(v30 + 8) = v33;
  int v34 = (void *)((v11 + v30) & v10);
  uint64_t v35 = (unsigned __int8 *)((v11 + v31) & v10);
  unsigned int v36 = v35[v12];
  unsigned int v37 = v36 - 2;
  if (v36 < 2)
  {
    uint64_t v16 = v44;
LABEL_20:
    if (v36 != 1)
    {
LABEL_28:
      *int v34 = *(void *)v35;
      *((unsigned char *)v34 + v12) = 0;
      goto LABEL_29;
    }
  }
  else
  {
    if (v12 <= 3) {
      uint64_t v38 = v12;
    }
    else {
      uint64_t v38 = 4;
    }
    uint64_t v16 = v44;
    switch(v38)
    {
      case 1:
        int v39 = *v35;
        break;
      case 2:
        int v39 = *(unsigned __int16 *)v35;
        break;
      case 3:
        int v39 = *(unsigned __int16 *)v35 | (v35[2] << 16);
        break;
      case 4:
        int v39 = *(_DWORD *)v35;
        break;
      default:
        goto LABEL_20;
    }
    int v40 = (v39 | (v37 << (8 * v12))) + 2;
    int v41 = v39 + 2;
    if (v12 < 4) {
      int v41 = v40;
    }
    if (v41 != 1) {
      goto LABEL_28;
    }
  }
  (*(void (**)(unint64_t))(v43 + 16))((v11 + v30) & v10);
  *((unsigned char *)v34 + v12) = 1;
  return v16;
}

uint64_t destroy for TextFieldLink(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = (a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v4 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(void *)v4, *(void *)(v4 + 8), *(unsigned char *)(v4 + 16));
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  unint64_t v5 = (((((((v4 + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<Bool>.Content(*(void *)v5, *(unsigned char *)(v5 + 8));
  uint64_t v6 = *(void *)(type metadata accessor for Locale() - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  uint64_t v8 = (unsigned __int8 *)((v5 + v7 + 9) & ~v7);
  unint64_t v9 = *(void *)(v6 + 64);
  if (v9 <= 8) {
    unint64_t v9 = 8;
  }
  unsigned int v10 = v8[v9];
  unsigned int v11 = v10 - 2;
  if (v10 >= 2)
  {
    if (v9 <= 3) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *v8;
        goto LABEL_14;
      case 2:
        int v13 = *(unsigned __int16 *)v8;
        goto LABEL_14;
      case 3:
        int v13 = *(unsigned __int16 *)v8 | (v8[2] << 16);
        goto LABEL_14;
      case 4:
        int v13 = *(_DWORD *)v8;
LABEL_14:
        int v14 = (v13 | (v11 << (8 * v9))) + 2;
        unsigned int v10 = v13 + 2;
        if (v9 < 4) {
          unsigned int v10 = v14;
        }
        break;
      default:
        break;
    }
  }
  if (v10 == 1)
  {
    uint64_t v15 = *(uint64_t (**)(void))(v6 + 8);
    return v15();
  }
  else
  {
    return swift_release();
  }
}

uint64_t initializeWithCopy for TextFieldLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v8 + 24) < 0xFFFFFFFFuLL)
  {
    long long v12 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v12;
  }
  else
  {
    uint64_t v9 = *(void *)v8;
    uint64_t v10 = *(void *)(v8 + 8);
    char v11 = *(unsigned char *)(v8 + 16);
    outlined copy of Text.Storage(*(void *)v8, v10, v11);
    *(void *)unint64_t v7 = v9;
    *(void *)(v7 + 8) = v10;
    *(unsigned char *)(v7 + 16) = v11;
    *(void *)(v7 + 24) = *(void *)(v8 + 24);
    swift_bridgeObjectRetain();
  }
  int v13 = (void *)((v7 + 39) & 0xFFFFFFFFFFFFFFF8);
  int v14 = (void *)((v8 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = v14[1];
  void *v13 = *v14;
  v13[1] = v15;
  unint64_t v16 = ((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = ((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v16 = *(unsigned char *)v17;
  *(void *)(v16 + 8) = *(void *)(v17 + 8);
  unint64_t v18 = (void *)((v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (void *)((v17 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v18 = *v19;
  v18[1] = v19[1];
  void v18[2] = v19[2];
  unint64_t v20 = ((unint64_t)v18 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = ((unint64_t)v19 + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = *(void *)v21;
  char v23 = *(unsigned char *)(v21 + 8);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of Environment<Bool>.Content(v22, v23);
  *(void *)unint64_t v20 = v22;
  *(unsigned char *)(v20 + 8) = v23;
  uint64_t v24 = *(void *)(type metadata accessor for Locale() - 8);
  uint64_t v25 = *(_DWORD *)(v24 + 80) & 0xF8;
  uint64_t v26 = v25 + 16;
  unint64_t v27 = v25 + 16 + v20;
  unint64_t v28 = ~v25 & 0xFFFFFFFFFFFFFFF8;
  long long v29 = (void *)(v27 & v28);
  unint64_t v30 = (unsigned __int8 *)((v26 + v21) & v28);
  if (*(void *)(v24 + 64) <= 8uLL) {
    uint64_t v31 = 8;
  }
  else {
    uint64_t v31 = *(void *)(v24 + 64);
  }
  unsigned int v32 = v30[v31];
  unsigned int v33 = v32 - 2;
  if (v32 >= 2)
  {
    if (v31 <= 3) {
      uint64_t v34 = v31;
    }
    else {
      uint64_t v34 = 4;
    }
    switch(v34)
    {
      case 1:
        int v35 = *v30;
        goto LABEL_16;
      case 2:
        int v35 = *(unsigned __int16 *)v30;
        goto LABEL_16;
      case 3:
        int v35 = *(unsigned __int16 *)((v26 + v21) & v28) | (*(unsigned __int8 *)(((v26 + v21) & v28) + 2) << 16);
        goto LABEL_16;
      case 4:
        int v35 = *(_DWORD *)v30;
LABEL_16:
        int v36 = (v35 | (v33 << (8 * v31))) + 2;
        unsigned int v32 = v35 + 2;
        if (v31 < 4) {
          unsigned int v32 = v36;
        }
        break;
      default:
        break;
    }
  }
  if (v32 == 1)
  {
    (*(void (**)(void *))(v24 + 16))(v29);
    char v37 = 1;
  }
  else
  {
    *long long v29 = *(void *)v30;
    swift_retain();
    char v37 = 0;
  }
  *((unsigned char *)v29 + v31) = v37;
  return a1;
}

uint64_t assignWithCopy for TextFieldLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = *(void *)(v8 + 24);
  if (*(void *)(v7 + 24) < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      uint64_t v16 = *(void *)v8;
      uint64_t v17 = *(void *)(v8 + 8);
      char v18 = *(unsigned char *)(v8 + 16);
      outlined copy of Text.Storage(*(void *)v8, v17, v18);
      *(void *)unint64_t v7 = v16;
      *(void *)(v7 + 8) = v17;
      *(unsigned char *)(v7 + 16) = v18;
      *(void *)(v7 + 24) = *(void *)(v8 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v9 >= 0xFFFFFFFF)
    {
      uint64_t v10 = *(void *)v8;
      uint64_t v11 = *(void *)(v8 + 8);
      char v12 = *(unsigned char *)(v8 + 16);
      outlined copy of Text.Storage(*(void *)v8, v11, v12);
      uint64_t v13 = *(void *)v7;
      uint64_t v14 = *(void *)(v7 + 8);
      char v15 = *(unsigned char *)(v7 + 16);
      *(void *)unint64_t v7 = v10;
      *(void *)(v7 + 8) = v11;
      *(unsigned char *)(v7 + 16) = v12;
      outlined consume of Text.Storage(v13, v14, v15);
      *(void *)(v7 + 24) = *(void *)(v8 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined consume of Text.Storage(*(void *)v7, *(void *)(v7 + 8), *(unsigned char *)(v7 + 16));
    swift_bridgeObjectRelease();
  }
  long long v19 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v19;
LABEL_8:
  unint64_t v20 = (void *)((v7 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v21 = (void *)((v8 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = v21[1];
  *unint64_t v20 = *v21;
  v20[1] = v22;
  swift_retain();
  swift_release();
  unint64_t v23 = ((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = ((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v23 = *(unsigned char *)v24;
  *(void *)(v23 + 8) = *(void *)(v24 + 8);
  swift_retain();
  swift_release();
  uint64_t v25 = (void *)((v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v26 = (void *)((v24 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v25[2] = v26[2];
  swift_retain();
  swift_release();
  unint64_t v27 = ((unint64_t)v25 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = ((unint64_t)v26 + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v29 = *(void *)v28;
  LOBYTE(v25) = *(unsigned char *)(v28 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v28, (char)v25);
  uint64_t v30 = *(void *)v27;
  char v31 = *(unsigned char *)(v27 + 8);
  *(void *)unint64_t v27 = v29;
  *(unsigned char *)(v27 + 8) = (_BYTE)v25;
  outlined consume of Environment<Bool>.Content(v30, v31);
  uint64_t v32 = type metadata accessor for Locale();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = *(_DWORD *)(v33 + 80) & 0xF8;
  uint64_t v35 = v34 + 16;
  unint64_t v36 = v34 + 16 + v27;
  unint64_t v37 = ~v34 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v38 = (unsigned __int8 *)(v36 & v37);
  uint64_t v39 = v35 + v28;
  int v40 = (unsigned __int8 *)(v39 & v37);
  if ((v36 & v37) != (v39 & v37))
  {
    uint64_t v41 = v32;
    uint64_t v42 = *(void *)(v32 - 8);
    if (*(void *)(v33 + 64) <= 8uLL) {
      uint64_t v43 = 8;
    }
    else {
      uint64_t v43 = *(void *)(v33 + 64);
    }
    unsigned int v44 = v38[v43];
    unsigned int v45 = v44 - 2;
    if (v44 >= 2)
    {
      if (v43 <= 3) {
        uint64_t v46 = v43;
      }
      else {
        uint64_t v46 = 4;
      }
      switch(v46)
      {
        case 1:
          int v47 = *v38;
          goto LABEL_21;
        case 2:
          int v47 = *(unsigned __int16 *)v38;
          goto LABEL_21;
        case 3:
          int v47 = *(unsigned __int16 *)v38 | (v38[2] << 16);
          goto LABEL_21;
        case 4:
          int v47 = *(_DWORD *)v38;
LABEL_21:
          int v48 = (v47 | (v45 << (8 * v43))) + 2;
          unsigned int v44 = v47 + 2;
          if (v43 < 4) {
            unsigned int v44 = v48;
          }
          break;
        default:
          break;
      }
    }
    if (v44 == 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v42 + 8))(v38, v32);
    }
    else {
      swift_release();
    }
    unsigned int v49 = v40[v43];
    unsigned int v50 = v49 - 2;
    if (v49 >= 2)
    {
      if (v43 <= 3) {
        uint64_t v51 = v43;
      }
      else {
        uint64_t v51 = 4;
      }
      switch(v51)
      {
        case 1:
          int v52 = *v40;
          goto LABEL_35;
        case 2:
          int v52 = *(unsigned __int16 *)v40;
          goto LABEL_35;
        case 3:
          int v52 = *(unsigned __int16 *)v40 | (v40[2] << 16);
          goto LABEL_35;
        case 4:
          int v52 = *(_DWORD *)v40;
LABEL_35:
          int v53 = (v52 | (v50 << (8 * v43))) + 2;
          unsigned int v49 = v52 + 2;
          if (v43 < 4) {
            unsigned int v49 = v53;
          }
          break;
        default:
          break;
      }
    }
    if (v49 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v42 + 16))(v38, v40, v41);
      v38[v43] = 1;
    }
    else
    {
      *(void *)uint64_t v38 = *(void *)v40;
      v38[v43] = 0;
      swift_retain();
    }
  }
  return a1;
}

uint64_t initializeWithTake for TextFieldLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  long long v9 = v8[1];
  *unint64_t v7 = *v8;
  v7[1] = v9;
  uint64_t v10 = (_OWORD *)(((unint64_t)v7 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (_OWORD *)(((unint64_t)v8 + 39) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v10 = *v11;
  char v12 = (_OWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (_OWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  *char v12 = *v13;
  unint64_t v14 = ((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = ((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  long long v16 = *(_OWORD *)v15;
  *(void *)(v14 + 16) = *(void *)(v15 + 16);
  *(_OWORD *)unint64_t v14 = v16;
  unint64_t v17 = (v14 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v15) = *(unsigned char *)(v18 + 8);
  *(void *)unint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = v15;
  uint64_t v19 = *(void *)(type metadata accessor for Locale() - 8);
  uint64_t v20 = *(_DWORD *)(v19 + 80) & 0xF8;
  uint64_t v21 = v20 + 16;
  unint64_t v22 = v20 + 16 + v17;
  unint64_t v23 = ~v20 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = (void *)(v22 & v23);
  uint64_t v25 = (unsigned __int8 *)((v21 + v18) & v23);
  if (*(void *)(v19 + 64) <= 8uLL) {
    uint64_t v26 = 8;
  }
  else {
    uint64_t v26 = *(void *)(v19 + 64);
  }
  unsigned int v27 = v25[v26];
  unsigned int v28 = v27 - 2;
  if (v27 >= 2)
  {
    if (v26 <= 3) {
      uint64_t v29 = v26;
    }
    else {
      uint64_t v29 = 4;
    }
    switch(v29)
    {
      case 1:
        int v30 = *v25;
        goto LABEL_13;
      case 2:
        int v30 = *(unsigned __int16 *)v25;
        goto LABEL_13;
      case 3:
        int v30 = *(unsigned __int16 *)v25 | (v25[2] << 16);
        goto LABEL_13;
      case 4:
        int v30 = *(_DWORD *)v25;
LABEL_13:
        int v31 = (v30 | (v28 << (8 * v26))) + 2;
        unsigned int v27 = v30 + 2;
        if (v26 < 4) {
          unsigned int v27 = v31;
        }
        break;
      default:
        break;
    }
  }
  if (v27 == 1)
  {
    (*(void (**)(void *))(v19 + 32))(v24);
    char v32 = 1;
  }
  else
  {
    char v32 = 0;
    *unint64_t v24 = *(void *)v25;
  }
  *((unsigned char *)v24 + v26) = v32;
  return a1;
}

uint64_t assignWithTake for TextFieldLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v7 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(void *)(v8 + 24) >= 0xFFFFFFFFuLL)
    {
      char v9 = *(unsigned char *)(v8 + 16);
      uint64_t v10 = *(void *)v7;
      uint64_t v11 = *(void *)(v7 + 8);
      char v12 = *(unsigned char *)(v7 + 16);
      *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
      *(unsigned char *)(v7 + 16) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(void *)(v7 + 24) = *(void *)(v8 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined consume of Text.Storage(*(void *)v7, *(void *)(v7 + 8), *(unsigned char *)(v7 + 16));
    swift_bridgeObjectRelease();
  }
  long long v13 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v13;
LABEL_6:
  unint64_t v14 = (_OWORD *)((v7 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v15 = (_OWORD *)((v8 + 39) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v14 = *v15;
  swift_release();
  unint64_t v16 = ((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = ((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v16 = *(unsigned char *)v17;
  *(void *)(v16 + 8) = *(void *)(v17 + 8);
  swift_release();
  unint64_t v18 = (void *)((v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (void *)((v17 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRelease();
  void v18[2] = v19[2];
  swift_release();
  unint64_t v20 = ((unint64_t)v18 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = ((unint64_t)v19 + 31) & 0xFFFFFFFFFFFFFFF8;
  char v22 = *(unsigned char *)(v21 + 8);
  uint64_t v23 = *(void *)v20;
  char v24 = *(unsigned char *)(v20 + 8);
  *(void *)unint64_t v20 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = v22;
  outlined consume of Environment<Bool>.Content(v23, v24);
  uint64_t v25 = type metadata accessor for Locale();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(_DWORD *)(v26 + 80) & 0xF8;
  uint64_t v28 = v27 + 16;
  unint64_t v29 = v27 + 16 + v20;
  unint64_t v30 = ~v27 & 0xFFFFFFFFFFFFFFF8;
  int v31 = (unsigned __int8 *)(v29 & v30);
  uint64_t v32 = v28 + v21;
  uint64_t v33 = (unsigned __int8 *)(v32 & v30);
  if ((v29 & v30) != (v32 & v30))
  {
    uint64_t v34 = v25;
    uint64_t v35 = *(void *)(v25 - 8);
    if (*(void *)(v26 + 64) <= 8uLL) {
      uint64_t v36 = 8;
    }
    else {
      uint64_t v36 = *(void *)(v26 + 64);
    }
    unsigned int v37 = v31[v36];
    unsigned int v38 = v37 - 2;
    if (v37 >= 2)
    {
      if (v36 <= 3) {
        uint64_t v39 = v36;
      }
      else {
        uint64_t v39 = 4;
      }
      switch(v39)
      {
        case 1:
          int v40 = *v31;
          goto LABEL_19;
        case 2:
          int v40 = *(unsigned __int16 *)v31;
          goto LABEL_19;
        case 3:
          int v40 = *(unsigned __int16 *)v31 | (v31[2] << 16);
          goto LABEL_19;
        case 4:
          int v40 = *(_DWORD *)v31;
LABEL_19:
          int v41 = (v40 | (v38 << (8 * v36))) + 2;
          unsigned int v37 = v40 + 2;
          if (v36 < 4) {
            unsigned int v37 = v41;
          }
          break;
        default:
          break;
      }
    }
    if (v37 == 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v35 + 8))(v31, v25);
    }
    else {
      swift_release();
    }
    unsigned int v42 = v33[v36];
    unsigned int v43 = v42 - 2;
    if (v42 >= 2)
    {
      if (v36 <= 3) {
        uint64_t v44 = v36;
      }
      else {
        uint64_t v44 = 4;
      }
      switch(v44)
      {
        case 1:
          int v45 = *v33;
          goto LABEL_33;
        case 2:
          int v45 = *(unsigned __int16 *)v33;
          goto LABEL_33;
        case 3:
          int v45 = *(unsigned __int16 *)v33 | (v33[2] << 16);
          goto LABEL_33;
        case 4:
          int v45 = *(_DWORD *)v33;
LABEL_33:
          int v46 = (v45 | (v43 << (8 * v36))) + 2;
          unsigned int v42 = v45 + 2;
          if (v36 < 4) {
            unsigned int v42 = v46;
          }
          break;
        default:
          break;
      }
    }
    if (v42 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v35 + 32))(v31, v33, v34);
      char v47 = 1;
    }
    else
    {
      char v47 = 0;
      *(void *)int v31 = *(void *)v33;
    }
    v31[v36] = v47;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for TextFieldLink(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(type metadata accessor for Locale() - 8);
  uint64_t v10 = 8;
  if (*(void *)(v9 + 64) > 8uLL) {
    uint64_t v10 = *(void *)(v9 + 64);
  }
  uint64_t v11 = *(void *)(v6 + 64);
  if (!a2) {
    return 0;
  }
  if (a2 <= v8) {
    goto LABEL_25;
  }
  uint64_t v12 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
  unint64_t v13 = v10
      + ((v12
        + ((((((((((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
          + 31) & 0xFFFFFFFFFFFFFFF8)
        + 9) & ~v12)
      + 1;
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v17 = ((a2 - v8 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v17))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
    if (v17 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
    if (v17 < 2)
    {
LABEL_25:
      if (v7 < 0x7FFFFFFF)
      {
        unint64_t v20 = *(void *)(((((unint64_t)a1 + v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8);
        if (v20 >= 0xFFFFFFFF) {
          LODWORD(v20) = -1;
        }
        return (v20 + 1);
      }
      else
      {
        uint64_t v19 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
        return v19(a1, v7, v5);
      }
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_25;
  }
LABEL_17:
  int v18 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v18 = 0;
  }
  if (v13)
  {
    if (v13 > 3) {
      LODWORD(v13) = 4;
    }
    switch((int)v13)
    {
      case 2:
        LODWORD(v13) = *a1;
        break;
      case 3:
        LODWORD(v13) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v13) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v13) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v8 + (v13 | v18) + 1;
}

void storeEnumTagSinglePayload for TextFieldLink(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v24 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v11 = *(void *)(type metadata accessor for Locale() - 8);
  uint64_t v12 = 8;
  if (*(void *)(v11 + 64) > 8uLL) {
    uint64_t v12 = *(void *)(v11 + 64);
  }
  uint64_t v13 = *(void *)(v8 + 64);
  uint64_t v14 = *(_DWORD *)(v11 + 80) & 0xF8 | 7;
  size_t v15 = v12
      + ((v14
        + ((((((((((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
          + 31) & 0xFFFFFFFFFFFFFFF8)
        + 9) & ~v14)
      + 1;
  if (a3 <= v10)
  {
    int v16 = 0;
  }
  else if (v15 <= 3)
  {
    unsigned int v19 = ((a3 - v10 + ~(-1 << (8 * v15))) >> (8 * v15)) + 1;
    if (HIWORD(v19))
    {
      int v16 = 4;
    }
    else if (v19 >= 0x100)
    {
      int v16 = 2;
    }
    else
    {
      int v16 = v19 > 1;
    }
  }
  else
  {
    int v16 = 1;
  }
  if (v10 < a2)
  {
    unsigned int v17 = ~v10 + a2;
    if (v15 < 4)
    {
      int v18 = (v17 >> (8 * v15)) + 1;
      if (v15)
      {
        int v20 = v17 & ~(-1 << (8 * v15));
        bzero(a1, v15);
        if (v15 == 3)
        {
          *(_WORD *)a1 = v20;
          a1[2] = BYTE2(v20);
        }
        else if (v15 == 2)
        {
          *(_WORD *)a1 = v20;
        }
        else
        {
          *a1 = v20;
        }
      }
    }
    else
    {
      bzero(a1, v15);
      *(_DWORD *)a1 = v17;
      int v18 = 1;
    }
    switch(v16)
    {
      case 1:
        a1[v15] = v18;
        return;
      case 2:
        *(_WORD *)&a1[v15] = v18;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v15] = v18;
        return;
      default:
        return;
    }
  }
  switch(v16)
  {
    case 1:
      a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x187B72258);
    case 4:
      *(_DWORD *)&a1[v15] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v9 < 0x7FFFFFFF)
        {
          char v22 = (void *)((((unint64_t)&a1[v13 + 7] & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v23 = a2 ^ 0x80000000;
            v22[1] = 0;
          }
          else
          {
            uint64_t v23 = (a2 - 1);
          }
          *char v22 = v23;
        }
        else
        {
          unint64_t v21 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
          v21(a1, a2, v9, v7);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for TextFieldLink()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for Environment<Locale>.Content()
{
  if (!lazy cache variable for type metadata for Environment<Locale>.Content)
  {
    type metadata accessor for Locale();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content);
    }
  }
}

_UNKNOWN **sub_187B722F0()
{
  return &protocol witness table for PlatformItemListReader<A, B, C>;
}

void Scene.windowIdealSize(_:)()
{
}

void static WindowIdealSize.fitToContent.getter()
{
}

void Scene.idealWindowPlacement(_:)()
{
}

void Scene.contentDefinesIdealSize()()
{
}

void Scene.contentDefinesIdealSize(horizontal:vertical:)()
{
}

ValueMetadata *type metadata accessor for WindowIdealSize()
{
  return &type metadata for WindowIdealSize;
}

unsigned char *storeEnumTagSinglePayload for WindowIdealSize(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187B72440);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WindowIdealSize.Guts()
{
  return &type metadata for WindowIdealSize.Guts;
}

unint64_t lazy protocol witness table accessor for type WindowIdealSize.Guts and conformance WindowIdealSize.Guts()
{
  unint64_t result = lazy protocol witness table cache variable for type WindowIdealSize.Guts and conformance WindowIdealSize.Guts;
  if (!lazy protocol witness table cache variable for type WindowIdealSize.Guts and conformance WindowIdealSize.Guts)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowIdealSize.Guts and conformance WindowIdealSize.Guts);
  }
  return result;
}

void static WindowIdealSize.automatic.getter()
{
}

void static WindowIdealSize.maximum.getter()
{
}

void Scene.defaultWindowPlacement(_:)()
{
}

{
  Scene.idealWindowPlacement(_:)();
}

void Scene.windowIdealPlacement(_:)()
{
}

uint64_t specialized SubmitTriggerSource.updateTriggersIfNeeded()()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment);
  if (v1 == 1) {
    return 0;
  }
  if (*(void *)(v0 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment + 8))
  {
    _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey>, (uint64_t)&type metadata for EnvironmentValues.TriggerSubmissionKey, (uint64_t)&protocol witness table for EnvironmentValues.TriggerSubmissionKey, MEMORY[0x1E4F40930]);
    outlined copy of EnvironmentValues?(v1);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey>, (uint64_t)&type metadata for EnvironmentValues.TriggerSubmissionKey, (uint64_t)&protocol witness table for EnvironmentValues.TriggerSubmissionKey);
    swift_retain();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release();
  }
  else
  {
    _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey>, (uint64_t)&type metadata for EnvironmentValues.TriggerSubmissionKey, (uint64_t)&protocol witness table for EnvironmentValues.TriggerSubmissionKey, MEMORY[0x1E4F40930]);
    outlined copy of EnvironmentValues?(v1);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey>, (uint64_t)&type metadata for EnvironmentValues.TriggerSubmissionKey, (uint64_t)&protocol witness table for EnvironmentValues.TriggerSubmissionKey);
    swift_retain();
    PropertyList.subscript.getter();
  }
  swift_release();
  uint64_t v2 = outlined consume of EnvironmentValues?(v1);
  if (!v5) {
    return 0;
  }
  MEMORY[0x1F4188790](v2);
  MEMORY[0x1F4188790](v3);
  static Update.dispatchImmediately<A>(_:)();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v5);
  return 1;
}

Swift::Void __swiftcall PlatformTextFieldCoordinator.update()()
{
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v5 = (char *)v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TextSelection?(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  size_t v15 = (char *)v74 - v14;
  uint64_t v90 = v0;
  uint64_t v16 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment);
  if (v16 == 1) {
    return;
  }
  uint64_t v89 = v13;
  uint64_t v17 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment + 8);
  uint64_t v18 = v90 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_field;
  swift_beginAccess();
  outlined init with copy of PlatformTextFieldCoordinator.FieldStorage?(v18, (uint64_t)&v92);
  if (v93 == 255) {
    return;
  }
  long long v85 = v11;
  if ((v93 & 1) == 0)
  {
    outlined init with take of WeakBox<VerticalTextView>((uint64_t)&v92, (uint64_t)v110, (uint64_t (*)(void))type metadata accessor for WeakBox<UITextField>);
    unsigned int v19 = (void *)MEMORY[0x18C119DF0](v110);
    swift_retain();
    swift_retain();
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v110, (uint64_t (*)(void))type metadata accessor for WeakBox<UITextField>);
    if (v19)
    {
      uint64_t v79 = v3;
      uint64_t v80 = v2;
      uint64_t v76 = v5;
      uint64_t v82 = v18;
      int v20 = &protocol witness table for UITextField;
      unint64_t v21 = &protocol witness table for UITextField;
      goto LABEL_8;
    }
LABEL_10:
    outlined consume of EnvironmentValues?(v16);
    return;
  }
  outlined init with take of WeakBox<VerticalTextView>((uint64_t)&v92, (uint64_t)v110, (uint64_t (*)(void))type metadata accessor for WeakBox<VerticalTextView>);
  unsigned int v19 = (void *)MEMORY[0x18C119DF0](v110);
  swift_retain();
  swift_retain();
  _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v110, (uint64_t (*)(void))type metadata accessor for WeakBox<VerticalTextView>);
  if (!v19) {
    goto LABEL_10;
  }
  uint64_t v79 = v3;
  uint64_t v80 = v2;
  uint64_t v76 = v5;
  uint64_t v82 = v18;
  int v20 = &protocol witness table for UITextView;
  unint64_t v21 = &protocol witness table for VerticalTextView;
LABEL_8:
  long long v81 = v8;
  uint64_t v83 = OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isViewUpdating;
  *(unsigned char *)(v90 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isViewUpdating) = 1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v92 = v16;
  uint64_t v93 = v17;
  UIKitTextInput.update(in:)((uint64_t)&v92, ObjectType, (uint64_t)v21);
  uint64_t v92 = v16;
  uint64_t v93 = v17;
  UIKitTextInputTraits.updateTraits(in:)((uint64_t)&v92, ObjectType, (uint64_t)v20);
  uint64_t v92 = v16;
  uint64_t v93 = v17;
  UITextInputTraits_Private.updatePrivateTraits(in:)((uint64_t)&v92);
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.InputAccessoryKey>, (uint64_t)&type metadata for EnvironmentValues.InputAccessoryKey, (uint64_t)&protocol witness table for EnvironmentValues.InputAccessoryKey, MEMORY[0x1E4F40930]);
  outlined copy of EnvironmentValues?(v16);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.InputAccessoryKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.InputAccessoryKey>, (uint64_t)&type metadata for EnvironmentValues.InputAccessoryKey, (uint64_t)&protocol witness table for EnvironmentValues.InputAccessoryKey);
  swift_retain();
  if (v17)
  {
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release();
  uint64_t Strong = swift_weakLoadStrong();
  _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)&v92, (uint64_t (*)(void))type metadata accessor for WeakBox<InputAccessoryGenerator>);
  outlined consume of EnvironmentValues?(v16);
  uint64_t v87 = v19;
  long long v88 = v21;
  uint64_t v84 = v17;
  uint64_t v86 = ObjectType;
  if (Strong)
  {
    uint64_t v24 = *(void **)(Strong + 24);
    if (!v24)
    {
      id v25 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for InputAccessoryGenerator.RootUIView()), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
      objc_msgSend(v25, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
      uint64_t v26 = *(void **)(Strong + 24);
      *(void *)(Strong + 24) = v25;
      id v27 = v25;

      unint64_t v21 = v88;
      InputAccessoryGenerator.updateHostIfNeeded()();

      uint64_t v24 = *(void **)(Strong + 24);
      if (!v24)
      {
        __break(1u);
        return;
      }
    }
    uint64_t v28 = (uint64_t (*)(uint64_t, _UNKNOWN **))v21[12];
    id v29 = v24;
    unint64_t v30 = (void *)v28(v86, v21);
    if (!v30 || (id v31 = v30, v30, v31 != v29))
    {
      uint64_t v32 = (uint64_t)v88;
      uint64_t v33 = (void (*)(void *, uint64_t, uint64_t))v88[13];
      id v34 = v29;
      v33(v24, v86, v32);
    }
    swift_release();

    uint64_t v17 = v84;
    unsigned int v19 = v87;
    unint64_t v21 = v88;
    uint64_t ObjectType = v86;
  }
  char v35 = *(unsigned char *)(v90 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isUserEditing);
  uint64_t v78 = OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isUserEditing;
  if (v35)
  {
    LODWORD(v77) = 0;
  }
  else
  {
    uint64_t v36 = v90 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_configuration;
    swift_beginAccess();
    outlined init with copy of TextField<_TextFieldStyleLabel>(v36, (uint64_t)v15);
    uint64_t v37 = *((void *)v15 + 10);
    uint64_t v38 = *((void *)v15 + 11);
    uint64_t v39 = (void *)*((void *)v15 + 12);
    uint64_t v41 = *((void *)v15 + 13);
    uint64_t v40 = *((void *)v15 + 14);
    uint64_t v43 = *((void *)v15 + 15);
    uint64_t v42 = *((void *)v15 + 16);
    uint64_t v45 = *((void *)v15 + 17);
    uint64_t v44 = *((void *)v15 + 18);
    uint64_t v47 = *((void *)v15 + 19);
    uint64_t v46 = *((void *)v15 + 20);
    uint64_t v48 = *((void *)v15 + 21);
    if (v15[180])
    {
      int v49 = *((_DWORD *)v15 + 44);
      uint64_t v92 = *((void *)v15 + 9);
      uint64_t v93 = v37;
      uint64_t v94 = v38;
      id v95 = v39;
      uint64_t v96 = v41;
      uint64_t v97 = v40;
      uint64_t v98 = v43;
      uint64_t v99 = v42;
      uint64_t v100 = v45;
      uint64_t v101 = v44;
      uint64_t v102 = v47;
      uint64_t v103 = v46;
      LOBYTE(v104) = v48 & 1;
      HIDWORD(v104) = HIDWORD(v48);
      __int16 v105 = v49 & 0xFF01;
      char v106 = BYTE2(v49) & 1;
      char v107 = HIBYTE(v49) & 1;
      _s7SwiftUI7BindingVyAA14TextFieldStateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<TextFieldState>, (uint64_t)&type metadata for TextFieldState, MEMORY[0x1E4F41638]);
      MEMORY[0x18C113DA0](v110);
    }
    else
    {
      uint64_t v92 = *((void *)v15 + 9);
      uint64_t v93 = v37;
      uint64_t v94 = v38;
      id v95 = v39;
      uint64_t v96 = v41;
      uint64_t v97 = v40;
      uint64_t v98 = v43;
      uint64_t v99 = v42;
      uint64_t v100 = v45;
      uint64_t v101 = v44;
      LOBYTE(v102) = v47 & 1;
      HIDWORD(v102) = HIDWORD(v47);
      LOWORD(v103) = v46 & 0xFF01;
      BYTE2(v103) = BYTE2(v46) & 1;
      BYTE3(v103) = BYTE3(v46) & 1;
      uint64_t v104 = v48;
      _s7SwiftUI7BindingVyAA14TextFieldStateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for State<TextFieldState>, (uint64_t)&type metadata for TextFieldState, MEMORY[0x1E4F41580]);
      State.wrappedValue.getter();
    }
    uint64_t v77 = v110[0];
    uint64_t v50 = v110[2];
    uint64_t v51 = v110[6];
    v74[1] = v110[9];
    uint64_t v75 = v110[1];
    outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v15);
    outlined consume of TextFieldState.FormatActions?(v50);
    outlined consume of TextFieldState.FormatActions?(v51);
    uint64_t v17 = v84;
    uint64_t v92 = v16;
    uint64_t v93 = v84;
    uint64_t ObjectType = v86;
    unsigned int v19 = v87;
    unint64_t v21 = v88;
    LODWORD(v77) = UIKitTextInput.setText(_:environment:)(v77, v75, &v92, v86, (uint64_t)v88);
    swift_bridgeObjectRelease();
  }
  uint64_t v52 = v80;
  uint64_t v53 = v90 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_label;
  swift_beginAccess();
  outlined init with copy of PlatformItem(v53, (uint64_t)&v92);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v95, (uint64_t)v109);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v109, (uint64_t)v110);
  if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(v110) == 1)
  {
    outlined destroy of PlatformItem((uint64_t)&v92);
LABEL_28:
    id v56 = objc_allocWithZone(MEMORY[0x1E4F28B18]);
    uint64_t v57 = (void *)MEMORY[0x18C115780](0, 0xE000000000000000);
    id v55 = objc_msgSend(v56, sel_initWithString_, v57);

    unint64_t v21 = v88;
    goto LABEL_29;
  }
  id v54 = v95;
  id v55 = v95;
  outlined destroy of PlatformItem((uint64_t)&v92);
  if (!v54) {
    goto LABEL_28;
  }
LABEL_29:
  UIKitTextInput.setPlaceholderText(_:)(v55, ObjectType, (uint64_t)v21);

  uint64_t v58 = v90 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_configuration;
  swift_beginAccess();
  long long v88 = (_UNKNOWN **)v58;
  uint64_t v59 = (uint64_t)v85;
  outlined init with copy of TextField<_TextFieldStyleLabel>(v58, (uint64_t)v85);
  uint64_t v60 = v59 + *(int *)(v89 + 56);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48))(v60, 1, v52))
  {
    outlined destroy of TextField<_TextFieldStyleLabel>(v59);
    uint64_t v61 = type metadata accessor for TextSelection(0);
    uint64_t v62 = (uint64_t)v81;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v81, 1, 1, v61);
  }
  else
  {
    uint64_t v63 = v60;
    uint64_t v64 = (uint64_t)v76;
    outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>(v63, (uint64_t)v76, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
    outlined destroy of TextField<_TextFieldStyleLabel>(v59);
    uint64_t v62 = (uint64_t)v81;
    MEMORY[0x18C113DA0](v52);
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1(v64, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
  }
  uint64_t v65 = v78;
  UIKitTextInput.setSelection(_:)(v62, ObjectType, (uint64_t)v21);
  _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1(v62, (uint64_t (*)(void))type metadata accessor for TextSelection?);
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>, (uint64_t)&type metadata for EnvironmentValues.TextSelectionAffinityKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSelectionAffinityKey, MEMORY[0x1E4F40930]);
  outlined copy of EnvironmentValues?(v16);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>, (uint64_t)&type metadata for EnvironmentValues.TextSelectionAffinityKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSelectionAffinityKey);
  swift_retain();
  if (v17)
  {
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release();
  outlined consume of EnvironmentValues?(v16);
  v91[0] = v92;
  UIKitTextInput.setAffinity(_:)(v91, ObjectType, (uint64_t)v21);
  *(unsigned char *)(v90 + v65) = 0;
  if (v77 & 1) != 0 && (((uint64_t (*)(uint64_t, _UNKNOWN **))v21[1])(ObjectType, v21)) {
    objc_msgSend(v19, sel_invalidateIntrinsicContentSize);
  }
  outlined init with copy of PlatformItem(v53, (uint64_t)&v92);
  uint64_t v66 = (void *)PlatformItem.accessibilityResolvedAttributedLabel.getter();
  outlined destroy of PlatformItem((uint64_t)&v92);
  if (v66)
  {
    objc_msgSend(v19, sel_setAccessibilityAttributedLabel_, v66);
  }
  outlined init with copy of PlatformItem(v53, (uint64_t)&v92);
  if (v108)
  {
    swift_bridgeObjectRetain();
    outlined destroy of PlatformItem((uint64_t)&v92);
    uint64_t v67 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v67, (uint64_t)&v92);
    swift_bridgeObjectRelease_n();
    uint64_t v68 = v93;
    if (v93)
    {
      if (v94 >= 2u)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v69 = v92;
        id v70 = v19;
        long long v71 = (void *)MEMORY[0x18C115780](v69, v68);
        swift_bridgeObjectRelease();
        objc_msgSend(v70, sel_setAccessibilityIdentifier_, v71);
      }
    }
  }
  else
  {
    outlined destroy of PlatformItem((uint64_t)&v92);
  }
  outlined init with copy of PlatformTextFieldCoordinator.FieldStorage?(v82, (uint64_t)&v92);
  if (v93 == 255)
  {
    outlined consume of EnvironmentValues?(v16);

    _sypSgWOhTm_7((uint64_t)&v92, &lazy cache variable for type metadata for PlatformTextFieldCoordinator.FieldStorage?, (uint64_t)&type metadata for PlatformTextFieldCoordinator.FieldStorage);
  }
  else if (v93)
  {
    outlined consume of EnvironmentValues?(v16);

    outlined destroy of PlatformTextFieldCoordinator.FieldStorage((uint64_t)&v92);
  }
  else
  {
    outlined init with take of WeakBox<VerticalTextView>((uint64_t)&v92, (uint64_t)v91, (uint64_t (*)(void))type metadata accessor for WeakBox<UITextField>);
    long long v72 = (void *)MEMORY[0x18C119DF0](v91);
    if (v72)
    {
      long long v73 = v72;
      objc_msgSend(v72, sel_setSecureTextEntry_, *((unsigned __int8 *)v88 + 32));

      outlined consume of EnvironmentValues?(v16);
      _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v91, (uint64_t (*)(void))type metadata accessor for WeakBox<UITextField>);
    }
    else
    {
      _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v91, (uint64_t (*)(void))type metadata accessor for WeakBox<UITextField>);
      outlined consume of EnvironmentValues?(v16);
    }
  }
  *(unsigned char *)(v90 + v83) = 0;
}

uint64_t PlainTextFieldStyle.BodyContent.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  type metadata accessor for ModifiedContent<SystemTextField, _AlignmentLayout>(0);
  uint64_t v5 = v4 - 8;
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemTextField(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TextField<_TextFieldStyleLabel>(v2, (uint64_t)v10);
  *(void *)&v10[*(int *)(type metadata accessor for SystemTextFieldConfiguration(0) + 20)] = 0;
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>((uint64_t)v10, (uint64_t)v7, type metadata accessor for SystemTextField);
  *(_WORD *)&v7[*(int *)(v5 + 44)] = 769;
  LOBYTE(v2) = *(unsigned char *)(v2 + 33);
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>((uint64_t)v7, a1, (uint64_t (*)(void))type metadata accessor for ModifiedContent<SystemTextField, _AlignmentLayout>);
  type metadata accessor for ModifiedContent<SystemTextField, _AlignmentLayout>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SystemTextField, _AlignmentLayout>, _FixedSizeLayout>, type metadata accessor for ModifiedContent<SystemTextField, _AlignmentLayout>);
  uint64_t v12 = (unsigned char *)(a1 + *(int *)(v11 + 36));
  *uint64_t v12 = 0;
  v12[1] = (v2 & 1) == 0;
  _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ModifiedContent<SystemTextField, _AlignmentLayout>);
  return _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v10, type metadata accessor for SystemTextField);
}

uint64_t RoundedBorderTextFieldStyle.BodyContent.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SystemTextField(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<SystemTextField, _AlignmentLayout>(0);
  uint64_t v7 = v6 - 8;
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TextField<_TextFieldStyleLabel>(v1, (uint64_t)v5);
  *(void *)&v5[*(int *)(type metadata accessor for SystemTextFieldConfiguration(0) + 20)] = 3;
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>((uint64_t)v5, (uint64_t)v9, type metadata accessor for SystemTextField);
  *(_WORD *)&v9[*(int *)(v7 + 44)] = 769;
  _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v5, type metadata accessor for SystemTextField);
  char v10 = *(unsigned char *)(v1 + 33);
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>((uint64_t)v9, a1, (uint64_t (*)(void))type metadata accessor for ModifiedContent<SystemTextField, _AlignmentLayout>);
  type metadata accessor for ModifiedContent<SystemTextField, _AlignmentLayout>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SystemTextField, _AlignmentLayout>, _FixedSizeLayout>, type metadata accessor for ModifiedContent<SystemTextField, _AlignmentLayout>);
  uint64_t v12 = (unsigned char *)(a1 + *(int *)(v11 + 36));
  *uint64_t v12 = 0;
  v12[1] = (v10 & 1) == 0;
  return _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ModifiedContent<SystemTextField, _AlignmentLayout>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance PlainTextFieldStyle.BodyContent()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t static SystemTextField._makeView(view:inputs:)()
{
  type metadata accessor for _GraphInputs.SelectionBasedStorageKey<TextSelection>(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _GraphInputs.SelectionBasedStorageKey<TextSelection> and conformance _GraphInputs.SelectionBasedStorageKey<A>, type metadata accessor for _GraphInputs.SelectionBasedStorageKey<TextSelection>);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v0 = *MEMORY[0x1E4F4E7A0];
  if (v2 == *MEMORY[0x1E4F4E7A0])
  {
    if (v3 != v0) {
      goto LABEL_3;
    }
  }
  else
  {
    AGCreateWeakAttribute();
    if (v3 != v0)
    {
LABEL_3:
      AGCreateWeakAttribute();
      if (v4 != v0) {
        goto LABEL_4;
      }
LABEL_8:
      if (v5 == v0) {
        goto LABEL_9;
      }
      goto LABEL_5;
    }
  }
  if (v4 == v0) {
    goto LABEL_8;
  }
LABEL_4:
  AGCreateWeakAttribute();
  if (v5 != v0) {
LABEL_5:
  }
    AGCreateWeakAttribute();
LABEL_9:
  _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_4(0, &lazy cache variable for type metadata for _GraphValue<SystemTextField>, 255, type metadata accessor for SystemTextField, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  type metadata accessor for SystemTextFieldConfiguration(0);
  AGGraphCreateOffsetAttribute2();
  type metadata accessor for ResolvedSystemTextField(0);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type SystemTextField.MakeRepresentable and conformance SystemTextField.MakeRepresentable();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedSystemTextField and conformance ResolvedSystemTextField, (void (*)(uint64_t))type metadata accessor for ResolvedSystemTextField);
  return static View.makeView(view:inputs:)();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance SystemTextField.MakeRepresentable@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ResolvedSystemTextField(0);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

double protocol witness for Rule.value.getter in conformance SystemTextField.MakeRepresentable@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SystemTextFieldConfiguration(0);
  MEMORY[0x1F4188790](v3);
  int v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>(Value, (uint64_t)v5, type metadata accessor for SystemTextFieldConfiguration);
  *(void *)a1 = swift_getKeyPath();
  *(unsigned char *)(a1 + 8) = 0;
  uint64_t v7 = type metadata accessor for ResolvedSystemTextField(0);
  outlined init with take of WeakBox<VerticalTextView>((uint64_t)v5, a1 + *(int *)(v7 + 20), type metadata accessor for SystemTextFieldConfiguration);
  uint64_t v8 = a1 + *(int *)(v7 + 24);
  *(void *)uint64_t v8 = *(void *)(v1 + 4);
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(v1 + 12);
  double result = *(double *)(v1 + 28);
  *(double *)(v8 + 24) = result;
  return result;
}

void protocol witness for View.body.getter in conformance SystemTextField()
{
}

uint64_t ResolvedSystemTextField.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for SystemTextFieldConfiguration(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (uint64_t *)((char *)&v27 - v8);
  uint64_t v10 = type metadata accessor for ResolvedSystemTextField(0);
  uint64_t v11 = v10 - 8;
  uint64_t v12 = *(void *)(v10 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x1F4188790](v10);
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>(v2, (uint64_t)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ResolvedSystemTextField);
  unint64_t v14 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = swift_allocObject();
  outlined init with take of WeakBox<VerticalTextView>((uint64_t)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14, type metadata accessor for ResolvedSystemTextField);
  swift_retain();
  uint64_t v16 = static Alignment.center.getter();
  uint64_t v28 = v17;
  uint64_t v29 = v16;
  uint64_t v18 = v2 + *(int *)(v11 + 28);
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>(v18, (uint64_t)v9, type metadata accessor for SystemTextFieldConfiguration);
  uint64_t v19 = v9[5];
  uint64_t v20 = v9[6];
  uint64_t v21 = v9[7];
  uint64_t v22 = v9[8];
  outlined copy of Text?(v19, v20, v21, v22);
  outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v9);
  if (v22)
  {
    uint64_t v27 = v21 & 1;
  }
  else
  {
    outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>(v18, (uint64_t)v6, type metadata accessor for SystemTextFieldConfiguration);
    outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v6);
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v27 = 0;
  }
  uint64_t KeyPath = swift_getKeyPath();
  id v30 = objc_msgSend(self, sel_placeholderTextColor);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  _sSo7UIColorCAB7SwiftUI13ColorProviderACWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UIColor and conformance UIColor, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  uint64_t v24 = Color.init<A>(provider:)();
  uint64_t result = swift_release();
  *(void *)a1 = partial apply for closure #1 in ResolvedSystemTextField.body.getter;
  *(void *)(a1 + 8) = v15;
  uint64_t v26 = v28;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v26;
  *(void *)(a1 + 32) = v19;
  *(void *)(a1 + 40) = v20;
  *(void *)(a1 + 48) = v27;
  *(void *)(a1 + 56) = v22;
  *(unsigned char *)(a1 + 64) = v22 == 0;
  *(void *)(a1 + 72) = KeyPath;
  *(unsigned char *)(a1 + 80) = 1;
  *(void *)(a1 + 88) = v24;
  return result;
}

uint64_t ResolvedSystemTextField.adaptorView(label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&long long v90 = a1;
  uint64_t v91 = a2;
  uint64_t v83 = type metadata accessor for PlatformTextFieldAdaptor(0);
  MEMORY[0x1F4188790](v83);
  uint64_t v87 = (char *)&v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = type metadata accessor for TextViewAdaptor(0);
  MEMORY[0x1F4188790](v86);
  uint64_t v85 = (uint64_t)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<TextViewAdaptor, _PaddingLayout>(0);
  uint64_t v84 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v89 = (uint64_t)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>(0);
  uint64_t v88 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>(0);
  uint64_t v11 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v79 - v15;
  uint64_t v82 = type metadata accessor for SystemTextFieldConfiguration(0);
  MEMORY[0x1F4188790](v82);
  uint64_t v18 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for ResolvedSystemTextField(0);
  uint64_t v20 = v2 + *(int *)(v19 + 20);
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>(v20, (uint64_t)v18, type metadata accessor for SystemTextFieldConfiguration);
  int v21 = v18[33];
  outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v18);
  if (v21 == 1)
  {
    uint64_t v80 = v11;
    long long v81 = v13;
    uint64_t v87 = v9;
    uint64_t v83 = (uint64_t)v16;
    outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>(v20, (uint64_t)v18, type metadata accessor for SystemTextFieldConfiguration);
    outlined init with copy of PlatformItem(v90, (uint64_t)v92);
    uint64_t v22 = (long long *)(v2 + *(int *)(v19 + 24));
    long long v90 = *v22;
    long long v79 = v22[1];
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v24 = v85;
    outlined init with take of WeakBox<VerticalTextView>((uint64_t)v18, v85, type metadata accessor for SystemTextFieldConfiguration);
    uint64_t v25 = v86;
    memcpy((void *)(v24 + *(int *)(v86 + 20)), v92, 0x150uLL);
    uint64_t v26 = (_OWORD *)(v24 + *(int *)(v25 + 24));
    long long v27 = v79;
    *uint64_t v26 = v90;
    v26[1] = v27;
    uint64_t v28 = v24 + *(int *)(v25 + 28);
    *(void *)uint64_t v28 = KeyPath;
    *(unsigned char *)(v28 + 8) = 0;
    *(void *)&long long v90 = *(int *)(v82 + 20);
    uint64_t v29 = v89;
    uint64_t v30 = v24;
    uint64_t v31 = v84;
    if (*(void *)(v20 + v90) == 3)
    {
      double v32 = 6.0;
      double v33 = 4.0;
      double v34 = 4.0;
      double v35 = 6.0;
    }
    else
    {
      static EdgeInsets.zero.getter();
      double v33 = v43;
      double v32 = v44;
      double v34 = v45;
      double v35 = v46;
    }
    char v47 = static Edge.Set.all.getter();
    outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>(v30, v29, type metadata accessor for TextViewAdaptor);
    uint64_t v48 = v29 + *(int *)(v31 + 36);
    *(unsigned char *)uint64_t v48 = v47;
    *(double *)(v48 + 8) = v33;
    *(double *)(v48 + 16) = v32;
    *(double *)(v48 + 24) = v34;
    *(double *)(v48 + 32) = v35;
    *(unsigned char *)(v48 + 40) = 0;
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1(v30, type metadata accessor for TextViewAdaptor);
    uint64_t v49 = *(void *)v2;
    char v50 = *(unsigned char *)(v2 + 8);
    outlined copy of Environment<Bool>.Content(v49, v50);
    specialized Environment.wrappedValue.getter(v49, v50);
    outlined consume of Environment<Bool>.Content(v49, v50);
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
    uint64_t v86 = v20;
    if (*(void *)(v20 + v90) == 3)
    {
      uint64_t v52 = v92[3];
      uint64_t v51 = v92[4];
      uint64_t v54 = v92[1];
      uint64_t v53 = v92[2];
      uint64_t v55 = v92[0];
      uint64_t v56 = static Alignment.center.getter();
      uint64_t v58 = 0x4010000000000000;
      uint64_t v59 = 256;
      uint64_t v60 = 1;
    }
    else
    {
      outlined release of StrokeStyle((uint64_t)v92);
      uint64_t v58 = 0;
      uint64_t v60 = 0;
      uint64_t v55 = 0;
      uint64_t v54 = 0;
      uint64_t v53 = 0;
      uint64_t v52 = 0;
      uint64_t v51 = 0;
      uint64_t v59 = 0;
      uint64_t v56 = 0;
      uint64_t v57 = 0;
    }
    uint64_t v84 = v56;
    uint64_t v85 = v57;
    uint64_t v82 = static Alignment.center.getter();
    *(void *)&long long v79 = v61;
    uint64_t v62 = v29;
    uint64_t v63 = (uint64_t)v87;
    outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>(v62, (uint64_t)v87, (uint64_t (*)(void))type metadata accessor for ModifiedContent<TextViewAdaptor, _PaddingLayout>);
    uint64_t v64 = (uint64_t *)(v63 + *(int *)(v88 + 36));
    *uint64_t v64 = v58;
    v64[1] = v58;
    v64[2] = v60;
    v64[3] = v55;
    v64[4] = v54;
    v64[5] = v53;
    v64[6] = v52;
    v64[7] = v51;
    uint64_t v65 = v84;
    v64[8] = v59;
    v64[9] = v65;
    uint64_t v66 = v82;
    v64[10] = v85;
    v64[11] = v66;
    v64[12] = v79;
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1(v89, (uint64_t (*)(void))type metadata accessor for ModifiedContent<TextViewAdaptor, _PaddingLayout>);
    uint64_t v67 = v83;
    if (*(void *)(v86 + v90) == 3)
    {
      uint64_t v68 = static Color._background.getter();
      __int16 v69 = 256;
      uint64_t v70 = 0x4010000000000000;
      uint64_t v71 = 1;
    }
    else
    {
      uint64_t v70 = 0;
      uint64_t v71 = 0;
      uint64_t v68 = 0;
      __int16 v69 = 0;
    }
    uint64_t v72 = static Alignment.center.getter();
    uint64_t v74 = v73;
    uint64_t v75 = (uint64_t)v87;
    uint64_t v76 = (uint64_t)v81;
    outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>((uint64_t)v87, (uint64_t)v81, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>);
    uint64_t v77 = v76 + *(int *)(v80 + 36);
    *(void *)uint64_t v77 = v70;
    *(void *)(v77 + 8) = v70;
    *(void *)(v77 + 16) = v71;
    *(void *)(v77 + 24) = v68;
    *(_WORD *)(v77 + 32) = v69;
    *(void *)(v77 + 40) = v72;
    *(void *)(v77 + 48) = v74;
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1(v75, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>);
    outlined init with take of WeakBox<VerticalTextView>(v76, v67, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>);
    outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>(v67, v91, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>);
    type metadata accessor for ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>(0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>, PlatformTextFieldAdaptor>.Storage, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>, type metadata accessor for PlatformTextFieldAdaptor, MEMORY[0x1E4F40568]);
    swift_storeEnumTagMultiPayload();
    uint64_t v41 = (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>;
    uint64_t v42 = v67;
  }
  else
  {
    uint64_t v36 = (uint64_t)v87;
    outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>(v20, (uint64_t)v87, type metadata accessor for SystemTextFieldConfiguration);
    uint64_t v37 = v83;
    outlined init with copy of PlatformItem(v90, v36 + *(int *)(v83 + 20));
    uint64_t v38 = (_OWORD *)(v2 + *(int *)(v19 + 24));
    uint64_t v39 = v36 + *(int *)(v37 + 24);
    long long v40 = v38[1];
    *(_OWORD *)uint64_t v39 = *v38;
    *(_OWORD *)(v39 + 16) = v40;
    *(unsigned char *)(v39 + 32) = 0;
    outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>(v36, v91, type metadata accessor for PlatformTextFieldAdaptor);
    type metadata accessor for ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>(0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>, PlatformTextFieldAdaptor>.Storage, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>, type metadata accessor for PlatformTextFieldAdaptor, MEMORY[0x1E4F40568]);
    swift_storeEnumTagMultiPayload();
    uint64_t v41 = type metadata accessor for PlatformTextFieldAdaptor;
    uint64_t v42 = v36;
  }
  return _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1(v42, v41);
}

uint64_t PlatformTextFieldAdaptor.updateUIView(_:context:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v28 - v7;
  uint64_t v9 = type metadata accessor for SystemTextFieldConfiguration(0);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a2 + 16);
  uint64_t v14 = *(void *)(a2 + 24);
  uint64_t v15 = *(char **)(a2 + 40);
  if (*(unsigned char *)(a2 + 32) == 1)
  {
    uint64_t v30 = &v28;
    uint64_t v31 = a1;
    uint64_t v32 = v3;
    MEMORY[0x1F4188790](v10);
    uint64_t v28 = &v28 - 4;
    *(&v28 - 2) = (void *)__ROR8__(v13, 32);
    swift_retain();
    uint64_t v16 = v8;
    uint64_t v17 = v9;
    uint64_t v18 = v15;
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v13, v14, 1);
    uint64_t v19 = v18;
    uint64_t v9 = v17;
    uint64_t v8 = v16;
    uint64_t v29 = v19;
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v13, v14, 1);
    static Update.ensure<A>(_:)();
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v13, v14, 1);
    a1 = v31;
    swift_release();
    uint64_t v3 = v32;
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v13, v14, 1);
  }
  else
  {
    uint64_t v34 = *(void *)(a2 + 16);
    uint64_t v35 = v14;
    uint64_t v20 = v15;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v13, v14, 0);
  }
  objc_msgSend(a1, sel_setBorderStyle_, *(void *)(v3 + *(int *)(v9 + 20)));
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>(v3, (uint64_t)v12, type metadata accessor for SystemTextFieldConfiguration);
  outlined init with take of TextField<_TextFieldStyleLabel>((uint64_t)v12, (uint64_t)v8);
  uint64_t v21 = (uint64_t)&v15[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_configuration];
  swift_beginAccess();
  outlined assign with take of TextField<_TextFieldStyleLabel>((uint64_t)v8, v21);
  swift_endAccess();
  uint64_t v22 = v35;
  uint64_t v23 = &v15[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment];
  uint64_t v24 = *(void *)&v15[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment];
  *(void *)uint64_t v23 = v34;
  *((void *)v23 + 1) = v22;
  swift_retain();
  swift_retain();
  outlined consume of EnvironmentValues?(v24);
  uint64_t v25 = type metadata accessor for PlatformTextFieldAdaptor(0);
  outlined init with copy of PlatformItem(v3 + *(int *)(v25 + 20), (uint64_t)v33);
  uint64_t v26 = (uint64_t)&v15[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_label];
  swift_beginAccess();
  outlined assign with take of PlatformItem((uint64_t)v33, v26);
  swift_endAccess();
  PlatformTextFieldCoordinator.update()();

  swift_release();
  return swift_release();
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance PlatformTextFieldAdaptor()
{
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1D70]), sel_init);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<VerticalTextView>((uint64_t)v4, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for WeakBox<UITextField>);
  v5[8] = 0;
  PlatformTextFieldCoordinator.configure(field:)((uint64_t)v5);
  outlined destroy of PlatformTextFieldCoordinator.FieldStorage((uint64_t)v5);
  objc_msgSend(v1, sel_setBorderStyle_, *(void *)(v0 + *(int *)(type metadata accessor for SystemTextFieldConfiguration(0) + 20)));
  uint64_t v2 = (void *)MEMORY[0x18C115780](32, 0xE100000000000000);
  objc_msgSend(v1, sel_setText_, v2);

  return v1;
}

id protocol witness for UIViewRepresentable.makeCoordinator() in conformance PlatformTextFieldAdaptor@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = &v13[-v6];
  uint64_t v8 = type metadata accessor for SystemTextFieldConfiguration(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = &v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>(v2, (uint64_t)v10, type metadata accessor for SystemTextFieldConfiguration);
  outlined init with take of TextField<_TextFieldStyleLabel>((uint64_t)v10, (uint64_t)v7);
  outlined init with take of WeakBox<VerticalTextView>(v2 + *(int *)(a1 + 24), (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for WeakSelectionBasedStorage<TextSelection>?);
  id v11 = objc_allocWithZone((Class)type metadata accessor for PlatformTextFieldCoordinator(0));
  id result = PlatformTextFieldCoordinator.init(configuration:selectionStorage:)((uint64_t)v7, (uint64_t)v14);
  *a2 = result;
  return result;
}

id TextViewAdaptor.makeUIView(context:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Text.Resolved();
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void **)(a1 + 16);
  uint64_t v5 = *(void **)(a1 + 24);
  int v7 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v8 = *(void **)(a1 + 40);
  type metadata accessor for VerticalTextView();
  id v9 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  swift_unknownObjectWeakInit();
  uint64_t v10 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<VerticalTextView>(v10, (uint64_t)&v28, (uint64_t (*)(void))type metadata accessor for WeakBox<VerticalTextView>);
  LOBYTE(v29) = 1;
  v27[0] = v8;
  PlatformTextFieldCoordinator.configure(field:)((uint64_t)&v28);
  outlined destroy of PlatformTextFieldCoordinator.FieldStorage((uint64_t)&v28);
  objc_msgSend(v9, sel_setBackgroundColor_, 0);
  objc_msgSend(v9, sel_setShowsVerticalScrollIndicator_, 0);
  static Semantics.v6.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) == 0
    || (id v11 = objc_msgSend(v9, sel_traitCollection),
        id v12 = objc_msgSend(v11, sel_userInterfaceIdiom),
        v11,
        v12 != (id)6))
  {
    objc_msgSend(v9, sel_setTextContainerInset_, *MEMORY[0x1E4FB2848], *(double *)(MEMORY[0x1E4FB2848] + 8), *(double *)(MEMORY[0x1E4FB2848] + 16), *(double *)(MEMORY[0x1E4FB2848] + 24));
  }
  id v13 = objc_msgSend(v9, sel_textContainer);
  objc_msgSend(v13, sel_setLineFragmentPadding_, 0.0);

  if (v7)
  {
    MEMORY[0x1F4188790](v14);
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage((uint64_t)v6, (uint64_t)v5, 1);
    id v15 = v27[0];
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage((uint64_t)v6, (uint64_t)v5, 1);
    static Update.ensure<A>(_:)();
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage((uint64_t)v6, (uint64_t)v5, 1);
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage((uint64_t)v6, (uint64_t)v5, 1);

    uint64_t v6 = v28;
    uint64_t v5 = v29;
  }
  else
  {
    uint64_t v28 = v6;
    uint64_t v29 = v5;
    swift_retain();
    swift_retain();
  }
  Text.Resolved.init()();
  v27[3] = v6;
  void v27[4] = v5;
  v27[2] = 0;
  Text.resolve<A>(into:in:with:)();
  specialized UIKitTextInput.setDefaultAttributes(resolved:in:)((uint64_t)v4, (uint64_t)v6, (uint64_t)v5);
  uint64_t v16 = Text.Resolved.attributedString.getter();
  if (v16)
  {
    uint64_t v17 = (void *)v16;
    v18.super.Class isa = NSAttributedString.replacingLineBreakModes(_:)(NSLineBreakByWordWrapping).super.isa;
    id v19 = objc_msgSend(v9, sel_attributedText);
    if (!v19) {
      goto LABEL_13;
    }
    uint64_t v20 = v19;
    id v21 = objc_msgSend(v19, sel_string);

    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;

    if (v22 == 32 && v24 == 0xE100000000000000)
    {

      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v25 & 1) == 0) {
LABEL_13:
    }
      objc_msgSend(v9, sel_setAttributedText_, v18.super.isa);
  }
LABEL_15:
  _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v4, MEMORY[0x1E4F413F0]);
  swift_release();
  swift_release();
  return v9;
}

uint64_t UIKitTextInput.setText(_:environment:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for Text.Resolved();
  MEMORY[0x1F4188790](v10);
  id v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *a3;
  uint64_t v13 = a3[1];
  Text.Resolved.init()();
  uint64_t v33 = v14;
  uint64_t v34 = v13;
  uint64_t v32 = 0;
  swift_bridgeObjectRetain();
  uint64_t v31 = a1;
  Text.resolve<A>(into:in:with:)();
  swift_bridgeObjectRelease();
  uint64_t v33 = v14;
  uint64_t v34 = v13;
  int v15 = UIKitTextInput.setDefaultAttributes(resolved:in:)((uint64_t)v12, &v33, a4, a5);
  uint64_t v16 = (void *)Text.Resolved.attributedString.getter();
  if (v16)
  {
    HIDWORD(v30) = v15;
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 8);
    NSAttributedString v18 = v16;
    Class isa = v18;
    if (v17(a4, a5))
    {
      Class isa = NSAttributedString.replacingLineBreakModes(_:)(NSLineBreakByWordWrapping).super.isa;
    }
    uint64_t v20 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5);
    if (v20)
    {
      id v21 = v20;
      id v22 = objc_msgSend(v20, sel_string);

      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v25 = v24;

      if (v23 == v31 && v25 == a2)
      {

        swift_bridgeObjectRelease();
        LOBYTE(v15) = BYTE4(v30);
        goto LABEL_11;
      }
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v26)
      {

        LOBYTE(v15) = BYTE4(v30);
        goto LABEL_11;
      }
    }
    long long v27 = *(void (**)(Class, uint64_t, uint64_t))(a5 + 32);
    uint64_t v28 = isa;
    v27(isa, a4, a5);

    LOBYTE(v15) = 1;
  }
LABEL_11:
  _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v12, MEMORY[0x1E4F413F0]);
  return v15 & 1;
}

uint64_t TextViewAdaptor.updateUIView(_:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v28 - v7;
  uint64_t v9 = type metadata accessor for SystemTextFieldConfiguration(0);
  MEMORY[0x1F4188790](v9 - 8);
  id v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a2 + 16);
  uint64_t v14 = *(void *)(a2 + 24);
  int v15 = *(char **)(a2 + 40);
  if (*(unsigned char *)(a2 + 32) == 1)
  {
    uint64_t v30 = v28;
    uint64_t v31 = a1;
    MEMORY[0x1F4188790](v10);
    v28[1] = &v28[-4];
    v28[-2] = __ROR8__(v13, 32);
    swift_retain();
    uint64_t v16 = v8;
    uint64_t v17 = v3;
    NSAttributedString v18 = v15;
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v13, v14, 1);
    id v19 = v18;
    uint64_t v3 = v17;
    uint64_t v8 = v16;
    uint64_t v29 = v19;
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v13, v14, 1);
    static Update.ensure<A>(_:)();
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v13, v14, 1);
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v13, v14, 1);

    uint64_t v13 = v32[0];
    uint64_t v14 = v32[1];
  }
  else
  {
    uint64_t v20 = v15;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v13, v14, 0);
  }
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>(v3, (uint64_t)v12, type metadata accessor for SystemTextFieldConfiguration);
  char v21 = v12[33];
  outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v12);
  specialized VerticalTextField.updateLimits(environment:axis:)(v13, v14, v21);
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>(v3, (uint64_t)v12, type metadata accessor for SystemTextFieldConfiguration);
  outlined init with take of TextField<_TextFieldStyleLabel>((uint64_t)v12, (uint64_t)v8);
  uint64_t v22 = (uint64_t)&v15[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_configuration];
  swift_beginAccess();
  outlined assign with take of TextField<_TextFieldStyleLabel>((uint64_t)v8, v22);
  swift_endAccess();
  uint64_t v23 = (uint64_t *)&v15[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment];
  uint64_t v24 = *(void *)&v15[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment];
  uint64_t *v23 = v13;
  v23[1] = v14;
  swift_retain();
  swift_retain();
  outlined consume of EnvironmentValues?(v24);
  uint64_t v25 = type metadata accessor for TextViewAdaptor(0);
  outlined init with copy of PlatformItem(v3 + *(int *)(v25 + 20), (uint64_t)v32);
  uint64_t v26 = (uint64_t)&v15[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_label];
  swift_beginAccess();
  outlined assign with take of PlatformItem((uint64_t)v32, v26);
  swift_endAccess();
  PlatformTextFieldCoordinator.update()();

  swift_release();
  return swift_release();
}

void specialized VerticalTextField.updateLimits(environment:axis:)(uint64_t a1, uint64_t a2, char a3)
{
  EnvironmentValues.lowerLineLimit.getter();
  char v6 = v5;
  static Semantics.v4.getter();
  char v7 = isLinkedOnOrAfter(_:)();
  EnvironmentValues.lineLimit.getter();
  char v9 = v8;
  if (v7) {
    v6 &= a3;
  }
  static Semantics.v4.getter();
  if (isLinkedOnOrAfter(_:)()) {
    char v10 = a3 & v9;
  }
  else {
    char v10 = v9;
  }
  if ((v6 & 1) == 0 || (v10 & 1) == 0)
  {
    EnvironmentValues.effectiveFont.getter();
    id v23 = (id)Font.platformFont(in:)();
    swift_release();
    double v11 = 0.0;
    double v12 = 0.0;
    if ((v10 & 1) == 0)
    {
      type metadata accessor for CTFontRef(0);
      id v13 = v23;
      uint64_t v14 = v3;
      objc_msgSend(v13, sel_lineHeight);
      objc_msgSend(v13, sel_leading);
      static CTFontRef.limitedHeight(by:lineHeight:leading:)();
      double v16 = v15;

      double v12 = v16 + 0.0;
    }
    uint64_t v17 = (double *)&v3[OBJC_IVAR____TtC7SwiftUI16VerticalTextView_upperLimit];
    *uint64_t v17 = v12;
    *((unsigned char *)v17 + 8) = v10 & 1;
    if ((v6 & 1) == 0)
    {
      type metadata accessor for CTFontRef(0);
      id v18 = v23;
      id v19 = v3;
      objc_msgSend(v18, sel_lineHeight);
      objc_msgSend(v18, sel_leading);
      static CTFontRef.limitedHeight(by:lineHeight:leading:)();
      double v21 = v20;

      double v11 = v21 + 0.0;
    }
    uint64_t v22 = (double *)&v3[OBJC_IVAR____TtC7SwiftUI16VerticalTextView_lowerLimit];
    *uint64_t v22 = v11;
    *((unsigned char *)v22 + 8) = v6 & 1;
  }
}

uint64_t TextViewAdaptor._overrideSizeThatFits(_:in:uiView:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for SystemTextFieldConfiguration(0);
  MEMORY[0x1F4188790](v8 - 8);
  char v10 = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  id v13 = (char *)v39 - v12;
  uint64_t v14 = *(void *)a2;
  int v15 = *(unsigned __int8 *)(a2 + 8);
  uint64_t v16 = *(void *)(a2 + 16);
  int v17 = *(unsigned __int8 *)(a2 + 24);
  uint64_t v47 = *(void *)a2;
  LOBYTE(v48) = v15;
  uint64_t v49 = v16;
  LOBYTE(v50) = v17;
  uint64_t result = _ProposedSize.width.getter();
  if ((v19 & 1) == 0)
  {
    uint64_t v20 = result;
    static Semantics.v4.getter();
    uint64_t result = isLinkedOnOrAfter(_:)();
    if (result)
    {
      *a1 = v20;
      outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>(v4, (uint64_t)v13, type metadata accessor for SystemTextFieldConfiguration);
      uint64_t v22 = *((void *)v13 + 9);
      uint64_t v21 = *((void *)v13 + 10);
      uint64_t v23 = *((void *)v13 + 11);
      uint64_t v24 = *((void *)v13 + 12);
      uint64_t v26 = *((void *)v13 + 13);
      uint64_t v25 = *((void *)v13 + 14);
      uint64_t v28 = *((void *)v13 + 15);
      uint64_t v27 = *((void *)v13 + 16);
      uint64_t v30 = *((void *)v13 + 17);
      uint64_t v29 = *((void *)v13 + 18);
      uint64_t v32 = *((void *)v13 + 19);
      uint64_t v31 = *((void *)v13 + 20);
      uint64_t v33 = *((void *)v13 + 21);
      char v34 = v13[180];
      uint64_t v46 = a3;
      double v45 = a1;
      uint64_t v44 = v4;
      uint64_t v43 = v14;
      int v42 = v15;
      uint64_t v41 = v16;
      int v40 = v17;
      if (v34)
      {
        int v35 = *((_DWORD *)v13 + 44);
        uint64_t v47 = v22;
        uint64_t v48 = v21;
        uint64_t v49 = v23;
        uint64_t v50 = v24;
        uint64_t v51 = v26;
        uint64_t v52 = v25;
        uint64_t v53 = v28;
        uint64_t v54 = v27;
        uint64_t v55 = v30;
        uint64_t v56 = v29;
        uint64_t v57 = v32;
        uint64_t v58 = v31;
        LOBYTE(v59) = v33 & 1;
        HIDWORD(v59) = HIDWORD(v33);
        __int16 v60 = v35 & 0xFF01;
        char v61 = BYTE2(v35) & 1;
        char v62 = HIBYTE(v35) & 1;
        _s7SwiftUI7BindingVyAA14TextFieldStateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<TextFieldState>, (uint64_t)&type metadata for TextFieldState, MEMORY[0x1E4F41638]);
        MEMORY[0x18C113DA0](v63);
      }
      else
      {
        uint64_t v47 = v22;
        uint64_t v48 = v21;
        uint64_t v49 = v23;
        uint64_t v50 = v24;
        uint64_t v51 = v26;
        uint64_t v52 = v25;
        uint64_t v53 = v28;
        uint64_t v54 = v27;
        uint64_t v55 = v30;
        uint64_t v56 = v29;
        LOBYTE(v57) = v32 & 1;
        HIDWORD(v57) = HIDWORD(v32);
        LOWORD(v58) = v31 & 0xFF01;
        BYTE2(v58) = BYTE2(v31) & 1;
        BYTE3(v58) = BYTE3(v31) & 1;
        uint64_t v59 = v33;
        _s7SwiftUI7BindingVyAA14TextFieldStateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for State<TextFieldState>, (uint64_t)&type metadata for TextFieldState, MEMORY[0x1E4F41580]);
        State.wrappedValue.getter();
      }
      uint64_t v36 = v63[2];
      v39[1] = v63[1];
      uint64_t v37 = v63[6];
      outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v13);
      outlined consume of TextFieldState.FormatActions?(v36);
      outlined consume of TextFieldState.FormatActions?(v37);
      outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>(v44, (uint64_t)v10, type metadata accessor for SystemTextFieldConfiguration);
      char v38 = v10[33];
      outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v10);
      LOBYTE(v47) = v42;
      LOBYTE(v63[0]) = v40;
      specialized VerticalTextField.updateVerticalSize(_:in:text:measureText:)((uint64_t)v45, v43, v42, v41, v40, v38);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

id protocol witness for UIViewRepresentable.makeCoordinator() in conformance TextViewAdaptor@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  MEMORY[0x1F4188790](v5 - 8);
  char v7 = (char *)v15 - v6;
  uint64_t v8 = type metadata accessor for SystemTextFieldConfiguration(0);
  MEMORY[0x1F4188790](v8 - 8);
  char v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>(v2, (uint64_t)v10, type metadata accessor for SystemTextFieldConfiguration);
  outlined init with take of TextField<_TextFieldStyleLabel>((uint64_t)v10, (uint64_t)v7);
  uint64_t v11 = (_OWORD *)(v2 + *(int *)(a1 + 24));
  long long v12 = v11[1];
  v15[0] = *v11;
  v15[1] = v12;
  char v16 = 0;
  id v13 = objc_allocWithZone((Class)type metadata accessor for PlatformTextFieldCoordinator(0));
  id result = PlatformTextFieldCoordinator.init(configuration:selectionStorage:)((uint64_t)v7, (uint64_t)v15);
  *a2 = result;
  return result;
}

uint64_t PlatformTextFieldCoordinator.textInput.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_field;
  swift_beginAccess();
  outlined init with copy of PlatformTextFieldCoordinator.FieldStorage?(v1, (uint64_t)v5);
  uint64_t v2 = 0;
  if (v6 != 255)
  {
    if (v6)
    {
      outlined init with take of WeakBox<VerticalTextView>((uint64_t)v5, (uint64_t)&v4, (uint64_t (*)(void))type metadata accessor for WeakBox<VerticalTextView>);
      uint64_t v2 = MEMORY[0x18C119DF0](&v4);
      _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)&v4, (uint64_t (*)(void))type metadata accessor for WeakBox<VerticalTextView>);
    }
    else
    {
      outlined init with take of WeakBox<VerticalTextView>((uint64_t)v5, (uint64_t)&v4, (uint64_t (*)(void))type metadata accessor for WeakBox<UITextField>);
      uint64_t v2 = MEMORY[0x18C119DF0](&v4);
      _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)&v4, (uint64_t (*)(void))type metadata accessor for WeakBox<UITextField>);
    }
  }
  return v2;
}

id PlatformTextFieldCoordinator.init(configuration:selectionStorage:)(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)&v2[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment] = xmmword_18834FC50;
  uint64_t v5 = &v2[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_label];
  _s7SwiftUI12PlatformItemV14PrimaryContentVSgWOi0_((uint64_t)v11);
  *((_OWORD *)v5 + 15) = 0u;
  *((_OWORD *)v5 + 16) = 0u;
  *((_OWORD *)v5 + 17) = 0u;
  *((_OWORD *)v5 + 18) = xmmword_18834FC50;
  *(void *)uint64_t v5 = &outlined read-only object #0 of PlatformTextFieldCoordinator.init(configuration:selectionStorage:);
  *((void *)v5 + 1) = 0;
  *((_DWORD *)v5 + 4) = 0;
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v11, (uint64_t)(v5 + 24));
  *((void *)v5 + 38) = 0;
  v5[312] = 1;
  *((void *)v5 + 40) = 0;
  *((void *)v5 + 41) = 0;
  uint64_t v6 = (uint64_t)&v2[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_selectionStorage];
  *(_OWORD *)uint64_t v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(unsigned char *)(v6 + 32) = 1;
  v2[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isViewUpdating] = 0;
  char v7 = &v2[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_field];
  *(void *)char v7 = 0;
  unsigned char v7[8] = -1;
  v2[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_ignoreNextUpdate] = 0;
  v2[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isUserEditing] = 0;
  outlined init with copy of TextField<_TextFieldStyleLabel>(a1, (uint64_t)&v2[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_configuration]);
  outlined init with take of WeakBox<VerticalTextView>(a2, v6, (uint64_t (*)(void))type metadata accessor for WeakSelectionBasedStorage<TextSelection>?);
  v10.receiver = v2;
  v10.super_class = (Class)type metadata accessor for PlatformTextFieldCoordinator(0);
  id v8 = objc_msgSendSuper2(&v10, sel_init);
  outlined destroy of TextField<_TextFieldStyleLabel>(a1);
  return v8;
}

Swift::Void __swiftcall PlatformTextFieldCoordinator.updateText(_:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)v80 - v4;
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isViewUpdating) & 1) == 0)
  {
    uint64_t v6 = v1 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_configuration;
    swift_beginAccess();
    outlined init with copy of TextField<_TextFieldStyleLabel>(v6, (uint64_t)v5);
    uint64_t v8 = *((void *)v5 + 9);
    uint64_t v7 = *((void *)v5 + 10);
    uint64_t v10 = *((void *)v5 + 11);
    uint64_t v9 = *((void *)v5 + 12);
    uint64_t v12 = *((void *)v5 + 13);
    uint64_t v11 = *((void *)v5 + 14);
    uint64_t v13 = *((void *)v5 + 15);
    uint64_t v14 = *((void *)v5 + 16);
    uint64_t v15 = *((void *)v5 + 17);
    uint64_t v16 = *((void *)v5 + 18);
    uint64_t v17 = *((void *)v5 + 19);
    uint64_t v18 = *((void *)v5 + 20);
    uint64_t v19 = *((void *)v5 + 21);
    int v20 = *((_DWORD *)v5 + 44);
    LODWORD(v82) = v5[180];
    uint64_t v98 = v13;
    uint64_t v85 = v10;
    uint64_t v90 = v12;
    uint64_t v91 = v8;
    uint64_t v97 = v15;
    uint64_t v94 = v16;
    uint64_t v87 = v17;
    uint64_t v84 = v18;
    int v86 = v20;
    uint64_t v95 = v19;
    uint64_t v96 = v11;
    uint64_t v83 = (uint64_t)object;
    uint64_t v89 = v7;
    uint64_t v93 = v9;
    uint64_t v88 = v14;
    uint64_t v99 = v8;
    uint64_t v100 = v7;
    uint64_t v101 = v10;
    uint64_t v102 = v9;
    uint64_t v103 = v12;
    uint64_t v104 = v11;
    uint64_t v105 = v13;
    uint64_t v106 = v14;
    uint64_t v107 = v15;
    uint64_t v108 = v16;
    if (v82)
    {
      uint64_t v109 = v17;
      uint64_t v110 = v18;
      LOBYTE(v111) = v19 & 1;
      HIDWORD(v111) = HIDWORD(v19);
      __int16 v112 = v20 & 0xFF01;
      char v113 = BYTE2(v20) & 1;
      char v114 = HIBYTE(v20) & 1;
      uint64_t v21 = v17;
      uint64_t v22 = v9;
      uint64_t v23 = v10;
      uint64_t v24 = v7;
      swift_bridgeObjectRetain();
      uint64_t v77 = v21;
      uint64_t v25 = v88;
      outlined copy of StateOrBinding<TextFieldState>(v91, v24, v23, v22, v12, v96, v98, v88, v97, v16, v77, v18, v19, v20, 1);
      _s7SwiftUI7BindingVyAA14TextFieldStateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<TextFieldState>, (uint64_t)&type metadata for TextFieldState, MEMORY[0x1E4F41638]);
      MEMORY[0x18C113DA0](&v115);
    }
    else
    {
      LOBYTE(v109) = v17 & 1;
      HIDWORD(v109) = HIDWORD(v17);
      LOWORD(v110) = v18 & 0xFF01;
      BYTE2(v110) = BYTE2(v18) & 1;
      BYTE3(v110) = BYTE3(v18) & 1;
      uint64_t v111 = v19;
      uint64_t v26 = v19;
      uint64_t v27 = v17;
      uint64_t v28 = v12;
      uint64_t v29 = v9;
      uint64_t v30 = v10;
      uint64_t v31 = v7;
      swift_bridgeObjectRetain();
      uint64_t v78 = v27;
      uint64_t v25 = v88;
      outlined copy of StateOrBinding<TextFieldState>(v8, v31, v30, v29, v28, v96, v98, v88, v97, v16, v78, v18, v26, v86, 0);
      _s7SwiftUI7BindingVyAA14TextFieldStateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for State<TextFieldState>, (uint64_t)&type metadata for TextFieldState, MEMORY[0x1E4F41580]);
      State.wrappedValue.getter();
    }
    swift_bridgeObjectRelease();
    uint64_t v32 = v116;
    uint64_t v33 = v121;
    uint64_t v35 = v122;
    uint64_t v34 = v123;
    uint64_t v81 = v120;
    v80[3] = v119;
    v80[2] = v118;
    v80[1] = v117;
    if (v82)
    {
      uint64_t v99 = countAndFlagsBits;
      uint64_t v100 = v83;
      uint64_t v101 = v116;
      uint64_t v102 = v117;
      uint64_t v103 = v118;
      uint64_t v104 = v119;
      uint64_t v105 = v120;
      uint64_t v106 = v121;
      uint64_t v107 = v122;
      uint64_t v108 = v123;
      LOBYTE(v109) = v124;
      HIDWORD(v109) = v125;
      LODWORD(v110) = v126;
      uint64_t countAndFlagsBits = v122;
      uint64_t v36 = v91;
      swift_retain();
      uint64_t v82 = v34;
      uint64_t v37 = v89;
      swift_retain();
      swift_bridgeObjectRetain();
      outlined copy of TextFieldState.FormatActions?(v90);
      uint64_t v38 = v97;
      uint64_t v39 = v94;
      uint64_t v40 = v87;
      uint64_t v41 = v84;
      outlined copy of TextFieldState.FormatActions?(v97);
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_bridgeObjectRelease();
      outlined consume of TextFieldState.FormatActions?(v32);
      outlined consume of TextFieldState.FormatActions?(v81);
      int v42 = v86;
      uint64_t v43 = v95;
      uint64_t v76 = v39;
      uint64_t v79 = v40;
      uint64_t v74 = v38;
      uint64_t v44 = v36;
      uint64_t v45 = v37;
      uint64_t v46 = v85;
      uint64_t v47 = v93;
      uint64_t v48 = v90;
      uint64_t v49 = v96;
      uint64_t v50 = v98;
      uint64_t v51 = v88;
      outlined consume of StateOrBinding<TextFieldState>(v44, v45, v85, v93, v90, v96, v98, v88, v74, v76, v79, v41, v95, v86, 1);
      outlined consume of StateOrBinding<TextFieldState>(v91, v89, v46, v47, v48, v49, v50, v51, v97, v94, v87, v41, v43, v42, 1);
    }
    else
    {
      uint64_t v99 = countAndFlagsBits;
      uint64_t v100 = v83;
      uint64_t v101 = v116;
      uint64_t v102 = v117;
      uint64_t v103 = v118;
      uint64_t v104 = v119;
      uint64_t v105 = v120;
      uint64_t v106 = v121;
      uint64_t v107 = v122;
      uint64_t v108 = v123;
      LOBYTE(v109) = v124;
      HIDWORD(v109) = v125;
      LODWORD(v110) = v126;
      if (v95)
      {
        swift_bridgeObjectRetain();
        v80[0] = v33;
        uint64_t v52 = v96;
        outlined copy of TextFieldState.FormatActions?(v85);
        uint64_t v53 = v98;
        uint64_t countAndFlagsBits = v35;
        uint64_t v54 = v97;
        outlined copy of TextFieldState.FormatActions?(v98);
        swift_retain();
        uint64_t v82 = v34;
        dispatch thunk of AnyLocation.set(_:transaction:)();
        swift_bridgeObjectRelease();
        uint64_t v55 = v89;
        outlined consume of TextFieldState.FormatActions?(v32);
        outlined consume of TextFieldState.FormatActions?(v81);
        int v56 = v86;
        uint64_t v57 = v84;
        uint64_t v58 = v87;
        uint64_t v75 = v54;
        uint64_t v59 = v91;
        uint64_t v60 = v85;
        uint64_t v61 = v90;
        uint64_t v62 = v53;
        uint64_t v63 = v88;
        outlined consume of StateOrBinding<TextFieldState>(v91, v55, v85, v93, v90, v52, v62, v88, v75, v94, v87, v84, v95, v86, 0);
        uint64_t v64 = v93;
        uint64_t v65 = v97;
        uint64_t v66 = v98;
        uint64_t v67 = v63;
        uint64_t v68 = v55;
        uint64_t v69 = v60;
        uint64_t v70 = v52;
        uint64_t v71 = v61;
        uint64_t v72 = v94;
        uint64_t v73 = v95;
      }
      else
      {
        swift_bridgeObjectRelease();
        outlined consume of TextFieldState.FormatActions?(v32);
        outlined consume of TextFieldState.FormatActions?(v81);
        uint64_t v73 = 0;
        uint64_t v67 = v25;
        uint64_t v66 = v98;
        uint64_t v70 = v96;
        uint64_t v71 = v90;
        uint64_t v64 = v93;
        uint64_t v69 = v85;
        uint64_t v68 = v89;
        uint64_t v59 = v91;
        uint64_t v65 = v97;
        uint64_t v72 = v94;
        uint64_t v58 = v87;
        uint64_t v57 = v84;
        int v56 = v86;
      }
      outlined consume of StateOrBinding<TextFieldState>(v59, v68, v69, v64, v71, v70, v66, v67, v65, v72, v58, v57, v73, v56, 0);
    }
    outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v5);
  }
}

uint64_t closure #1 in PlatformTextFieldCoordinator.didBeginEditing()(uint64_t a1)
{
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v71 - v3;
  uint64_t v5 = a1 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_configuration;
  swift_beginAccess();
  outlined init with copy of TextField<_TextFieldStyleLabel>(v5, (uint64_t)v4);
  uint64_t v6 = *((void *)v4 + 9);
  uint64_t v7 = *((void *)v4 + 10);
  uint64_t v8 = *((void *)v4 + 11);
  uint64_t v9 = *((void *)v4 + 12);
  uint64_t v11 = *((void *)v4 + 13);
  uint64_t v10 = *((void *)v4 + 14);
  uint64_t v13 = *((void *)v4 + 15);
  uint64_t v12 = *((void *)v4 + 16);
  uint64_t v14 = *((void *)v4 + 17);
  uint64_t v15 = *((void *)v4 + 18);
  uint64_t v16 = *((void *)v4 + 19);
  uint64_t v17 = *((void *)v4 + 20);
  uint64_t v18 = *((void *)v4 + 21);
  int v19 = *((_DWORD *)v4 + 44);
  LODWORD(v81) = v4[180];
  uint64_t v84 = v8;
  uint64_t v86 = v6;
  uint64_t v91 = v12;
  uint64_t v88 = v14;
  uint64_t v89 = v15;
  uint64_t v85 = v16;
  uint64_t v83 = v17;
  int v82 = v19;
  uint64_t v90 = v18;
  uint64_t v87 = v7;
  if (v81)
  {
    uint64_t v92 = v6;
    uint64_t v93 = v7;
    uint64_t v94 = v8;
    uint64_t v95 = v9;
    uint64_t v96 = v11;
    uint64_t v97 = v10;
    uint64_t v98 = v13;
    uint64_t v99 = v12;
    uint64_t v100 = v14;
    uint64_t v101 = v15;
    uint64_t v102 = v16;
    uint64_t v103 = v17;
    LOBYTE(v104) = v18 & 1;
    HIDWORD(v104) = HIDWORD(v18);
    __int16 v105 = v19 & 0xFF01;
    char v106 = BYTE2(v19) & 1;
    char v107 = HIBYTE(v19) & 1;
    uint64_t v20 = v14;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    outlined copy of TextFieldState.FormatActions?(v11);
    outlined copy of TextFieldState.FormatActions?(v20);
    _s7SwiftUI7BindingVyAA14TextFieldStateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<TextFieldState>, (uint64_t)&type metadata for TextFieldState, MEMORY[0x1E4F41638]);
    MEMORY[0x18C113DA0](&v108);
    uint64_t v21 = v114;
    if (v114)
    {
LABEL_3:
      uint64_t v22 = v87;
      uint64_t v23 = v9;
      uint64_t v24 = v10;
      uint64_t v25 = v13;
      v21(1);
      uint64_t v26 = (uint64_t)v114;
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v92 = v6;
    uint64_t v93 = v7;
    uint64_t v94 = v8;
    uint64_t v95 = v9;
    uint64_t v96 = v11;
    uint64_t v97 = v10;
    uint64_t v98 = v13;
    uint64_t v99 = v12;
    uint64_t v100 = v14;
    uint64_t v101 = v15;
    LOBYTE(v102) = v16 & 1;
    HIDWORD(v102) = HIDWORD(v16);
    LOWORD(v103) = v17 & 0xFF01;
    BYTE2(v103) = BYTE2(v17) & 1;
    BYTE3(v103) = BYTE3(v17) & 1;
    uint64_t v104 = v18;
    swift_bridgeObjectRetain();
    outlined copy of TextFieldState.FormatActions?(v8);
    outlined copy of TextFieldState.FormatActions?(v13);
    _s7SwiftUI7BindingVyAA14TextFieldStateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for State<TextFieldState>, (uint64_t)&type metadata for TextFieldState, MEMORY[0x1E4F41580]);
    swift_retain();
    State.wrappedValue.getter();
    uint64_t v21 = v114;
    if (v114) {
      goto LABEL_3;
    }
  }
  uint64_t v22 = v87;
  uint64_t v23 = v9;
  uint64_t v24 = v10;
  uint64_t v25 = v13;
  uint64_t v26 = 0;
LABEL_6:
  char v27 = v81;
  uint64_t v81 = v113;
  uint64_t v80 = v112;
  uint64_t v79 = v111;
  uint64_t v78 = v110;
  if (v27)
  {
    uint64_t v92 = v108;
    uint64_t v93 = v109;
    uint64_t v94 = v110;
    uint64_t v95 = v111;
    uint64_t v96 = v112;
    uint64_t v97 = v113;
    uint64_t v77 = v26;
    uint64_t v98 = v26;
    uint64_t v99 = v115;
    uint64_t v100 = v116;
    uint64_t v101 = v117;
    LOBYTE(v102) = v118;
    HIDWORD(v102) = v119;
    LOWORD(v103) = v120;
    BYTE2(v103) = HIBYTE(v120) & 1;
    BYTE3(v103) = 1;
    v71[1] = v116;
    uint64_t v28 = v86;
    uint64_t v72 = v109;
    swift_retain();
    swift_retain();
    uint64_t v76 = v23;
    swift_bridgeObjectRetain();
    uint64_t v73 = v11;
    uint64_t v74 = v24;
    uint64_t v75 = v25;
    outlined copy of TextFieldState.FormatActions?(v11);
    uint64_t v29 = v88;
    uint64_t v30 = v89;
    uint64_t v31 = v85;
    uint64_t v32 = v83;
    outlined copy of TextFieldState.FormatActions?(v88);
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_bridgeObjectRelease();
    outlined consume of TextFieldState.FormatActions?(v78);
    outlined consume of TextFieldState.FormatActions?(v77);
    int v33 = v82;
    uint64_t v34 = v90;
    uint64_t v69 = v30;
    uint64_t v70 = v31;
    uint64_t v68 = v29;
    uint64_t v35 = v28;
    uint64_t v36 = v22;
    uint64_t v37 = v84;
    uint64_t v38 = v76;
    uint64_t v39 = v73;
    uint64_t v40 = v74;
    uint64_t v41 = v75;
    uint64_t v42 = v91;
    outlined consume of StateOrBinding<TextFieldState>(v35, v36, v84, v76, v73, v74, v75, v91, v68, v69, v70, v32, v90, v82, 1);
    outlined consume of StateOrBinding<TextFieldState>(v86, v87, v37, v38, v39, v40, v41, v42, v88, v89, v85, v32, v34, v33, 1);
  }
  else
  {
    uint64_t v92 = v108;
    uint64_t v93 = v109;
    uint64_t v94 = v110;
    uint64_t v95 = v111;
    uint64_t v96 = v112;
    uint64_t v97 = v113;
    uint64_t v98 = v26;
    uint64_t v99 = v115;
    uint64_t v100 = v116;
    uint64_t v101 = v117;
    LOBYTE(v102) = v118;
    HIDWORD(v102) = v119;
    LOWORD(v103) = v120;
    BYTE2(v103) = HIBYTE(v120) & 1;
    BYTE3(v103) = 1;
    if (v90)
    {
      uint64_t v72 = v109;
      swift_bridgeObjectRetain();
      uint64_t v77 = v26;
      uint64_t v73 = v11;
      outlined copy of TextFieldState.FormatActions?(v84);
      uint64_t v75 = v25;
      outlined copy of TextFieldState.FormatActions?(v25);
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      uint64_t v43 = v22;
      swift_bridgeObjectRelease();
      uint64_t v44 = v24;
      uint64_t v74 = v24;
      uint64_t v45 = v23;
      uint64_t v76 = v23;
      uint64_t v46 = v84;
      outlined consume of TextFieldState.FormatActions?(v78);
      outlined consume of TextFieldState.FormatActions?(v77);
      int v47 = v82;
      uint64_t v48 = v83;
      uint64_t v49 = v85;
      uint64_t v50 = v88;
      uint64_t v51 = v86;
      uint64_t v52 = v43;
      uint64_t v53 = v45;
      uint64_t v54 = v73;
      uint64_t v55 = v44;
      uint64_t v56 = v75;
      uint64_t v57 = v91;
      outlined consume of StateOrBinding<TextFieldState>(v86, v52, v46, v53, v73, v55, v75, v91, v88, v89, v85, v83, v90, v82, 0);
      uint64_t v58 = v89;
      uint64_t v59 = v46;
      uint64_t v60 = v76;
      uint64_t v61 = v87;
      uint64_t v62 = v74;
      uint64_t v63 = v54;
      uint64_t v64 = v57;
      uint64_t v65 = v56;
      uint64_t v66 = v90;
    }
    else
    {
      swift_bridgeObjectRelease();
      outlined consume of TextFieldState.FormatActions?(v78);
      outlined consume of TextFieldState.FormatActions?(v26);
      uint64_t v66 = 0;
      uint64_t v64 = v91;
      uint64_t v65 = v25;
      uint64_t v62 = v24;
      uint64_t v63 = v11;
      uint64_t v60 = v23;
      uint64_t v59 = v84;
      uint64_t v61 = v22;
      uint64_t v51 = v86;
      uint64_t v50 = v88;
      uint64_t v58 = v89;
      uint64_t v49 = v85;
      uint64_t v48 = v83;
      int v47 = v82;
    }
    outlined consume of StateOrBinding<TextFieldState>(v51, v61, v59, v60, v63, v62, v65, v64, v50, v58, v49, v48, v66, v47, 0);
  }
  return outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v4);
}

uint64_t closure #1 in PlatformTextFieldCoordinator.didEndEditing()(uint64_t a1)
{
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v72 - v3;
  uint64_t v5 = a1 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_configuration;
  swift_beginAccess();
  outlined init with copy of TextField<_TextFieldStyleLabel>(v5, (uint64_t)v4);
  uint64_t v6 = *((void *)v4 + 9);
  uint64_t v7 = *((void *)v4 + 10);
  uint64_t v9 = *((void *)v4 + 11);
  uint64_t v8 = *((void *)v4 + 12);
  uint64_t v11 = *((void *)v4 + 13);
  uint64_t v10 = *((void *)v4 + 14);
  uint64_t v12 = *((void *)v4 + 15);
  uint64_t v13 = *((void *)v4 + 16);
  uint64_t v14 = *((void *)v4 + 17);
  uint64_t v15 = *((void *)v4 + 18);
  uint64_t v16 = *((void *)v4 + 19);
  uint64_t v17 = *((void *)v4 + 20);
  uint64_t v18 = *((void *)v4 + 21);
  int v19 = *((_DWORD *)v4 + 44);
  LODWORD(v78) = v4[180];
  uint64_t v80 = v9;
  uint64_t v91 = v7;
  uint64_t v84 = v6;
  uint64_t v88 = v8;
  uint64_t v87 = v14;
  uint64_t v86 = v11;
  uint64_t v90 = v15;
  uint64_t v83 = v16;
  uint64_t v89 = v17;
  int v79 = v19;
  uint64_t v92 = v18;
  uint64_t v85 = v10;
  uint64_t v82 = v12;
  uint64_t v81 = v13;
  uint64_t v93 = v6;
  uint64_t v94 = v7;
  uint64_t v95 = v9;
  uint64_t v96 = v8;
  uint64_t v97 = v11;
  uint64_t v98 = v10;
  uint64_t v99 = v12;
  uint64_t v100 = v13;
  uint64_t v101 = v14;
  uint64_t v102 = v15;
  if (v78)
  {
    uint64_t v103 = v16;
    uint64_t v104 = v17;
    LOBYTE(v105) = v18 & 1;
    HIDWORD(v105) = HIDWORD(v18);
    __int16 v106 = v19 & 0xFF01;
    char v107 = BYTE2(v19) & 1;
    char v108 = HIBYTE(v19) & 1;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    outlined copy of TextFieldState.FormatActions?(v11);
    outlined copy of TextFieldState.FormatActions?(v14);
    _s7SwiftUI7BindingVyAA14TextFieldStateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<TextFieldState>, (uint64_t)&type metadata for TextFieldState, MEMORY[0x1E4F41638]);
    MEMORY[0x18C113DA0](&v109);
  }
  else
  {
    LOBYTE(v103) = v16 & 1;
    HIDWORD(v103) = HIDWORD(v16);
    LOWORD(v104) = v17 & 0xFF01;
    BYTE2(v104) = BYTE2(v17) & 1;
    BYTE3(v104) = BYTE3(v17) & 1;
    uint64_t v105 = v18;
    uint64_t v20 = v12;
    swift_bridgeObjectRetain();
    outlined copy of TextFieldState.FormatActions?(v9);
    outlined copy of TextFieldState.FormatActions?(v20);
    _s7SwiftUI7BindingVyAA14TextFieldStateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for State<TextFieldState>, (uint64_t)&type metadata for TextFieldState, MEMORY[0x1E4F41580]);
    swift_retain();
    State.wrappedValue.getter();
  }
  TextFieldState.endEditing()();
  uint64_t v21 = v112;
  uint64_t v22 = v114;
  uint64_t v24 = v115;
  uint64_t v23 = v116;
  uint64_t v25 = v117;
  uint64_t v26 = v118;
  uint64_t v77 = v111;
  if (v78)
  {
    uint64_t v93 = v109;
    uint64_t v94 = v110;
    uint64_t v95 = v111;
    uint64_t v96 = v112;
    uint64_t v97 = v113;
    uint64_t v98 = v114;
    uint64_t v99 = v115;
    uint64_t v100 = v116;
    uint64_t v101 = v117;
    uint64_t v102 = v118;
    uint64_t v76 = v118;
    LOBYTE(v103) = v119;
    HIDWORD(v103) = v120;
    LODWORD(v104) = v121;
    uint64_t v78 = v116;
    uint64_t v27 = v84;
    uint64_t v74 = v110;
    swift_retain();
    uint64_t v75 = v25;
    uint64_t v28 = v91;
    swift_retain();
    swift_bridgeObjectRetain();
    outlined copy of TextFieldState.FormatActions?(v86);
    uint64_t v29 = v87;
    uint64_t v30 = v90;
    uint64_t v73 = v24;
    uint64_t v31 = v89;
    outlined copy of TextFieldState.FormatActions?(v87);
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_bridgeObjectRelease();
    outlined consume of TextFieldState.FormatActions?(v77);
    outlined consume of TextFieldState.FormatActions?(v73);
    int v32 = v79;
    uint64_t v33 = v92;
    uint64_t v71 = v31;
    uint64_t v34 = v83;
    uint64_t v70 = v30;
    uint64_t v68 = v29;
    uint64_t v35 = v27;
    uint64_t v36 = v28;
    uint64_t v37 = v80;
    uint64_t v38 = v88;
    uint64_t v39 = v86;
    uint64_t v40 = v85;
    uint64_t v41 = v82;
    uint64_t v42 = v81;
    outlined consume of StateOrBinding<TextFieldState>(v35, v36, v80, v88, v86, v85, v82, v81, v68, v70, v83, v71, v92, v79, 1);
    outlined consume of StateOrBinding<TextFieldState>(v84, v91, v37, v38, v39, v40, v41, v42, v87, v90, v34, v89, v33, v32, 1);
  }
  else
  {
    uint64_t v93 = v109;
    uint64_t v94 = v110;
    uint64_t v95 = v111;
    uint64_t v96 = v112;
    uint64_t v97 = v113;
    uint64_t v98 = v114;
    uint64_t v99 = v115;
    uint64_t v100 = v116;
    uint64_t v101 = v117;
    uint64_t v102 = v118;
    LOBYTE(v103) = v119;
    HIDWORD(v103) = v120;
    LODWORD(v104) = v121;
    if (v92)
    {
      uint64_t v74 = v110;
      swift_bridgeObjectRetain();
      v72[0] = v21;
      uint64_t v43 = v88;
      uint64_t v76 = v26;
      v72[1] = v22;
      outlined copy of TextFieldState.FormatActions?(v80);
      uint64_t v73 = v24;
      uint64_t v44 = v82;
      uint64_t v45 = v81;
      uint64_t v78 = v23;
      uint64_t v46 = v87;
      outlined copy of TextFieldState.FormatActions?(v82);
      swift_retain();
      uint64_t v75 = v25;
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_bridgeObjectRelease();
      uint64_t v47 = v80;
      uint64_t v48 = v45;
      uint64_t v49 = v43;
      outlined consume of TextFieldState.FormatActions?(v77);
      outlined consume of TextFieldState.FormatActions?(v73);
      int v50 = v79;
      uint64_t v51 = v89;
      uint64_t v52 = v83;
      uint64_t v69 = v46;
      uint64_t v53 = v84;
      uint64_t v54 = v49;
      uint64_t v55 = v86;
      uint64_t v56 = v85;
      outlined consume of StateOrBinding<TextFieldState>(v84, v91, v47, v54, v86, v85, v44, v48, v69, v90, v83, v89, v92, v79, 0);
      uint64_t v57 = v91;
      uint64_t v58 = v47;
      uint64_t v59 = v88;
      uint64_t v60 = v56;
      uint64_t v61 = v44;
      uint64_t v62 = v48;
      uint64_t v63 = v55;
      uint64_t v64 = v90;
      uint64_t v65 = v87;
      uint64_t v66 = v92;
    }
    else
    {
      swift_bridgeObjectRelease();
      outlined consume of TextFieldState.FormatActions?(v77);
      outlined consume of TextFieldState.FormatActions?(v24);
      uint64_t v66 = 0;
      uint64_t v62 = v81;
      uint64_t v61 = v82;
      uint64_t v60 = v85;
      uint64_t v63 = v86;
      uint64_t v59 = v88;
      uint64_t v58 = v80;
      uint64_t v57 = v91;
      uint64_t v53 = v84;
      uint64_t v65 = v87;
      uint64_t v64 = v90;
      uint64_t v52 = v83;
      uint64_t v51 = v89;
      int v50 = v79;
    }
    outlined consume of StateOrBinding<TextFieldState>(v53, v57, v58, v59, v63, v60, v61, v62, v65, v64, v52, v51, v66, v50, 0);
  }
  return outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v4);
}

Swift::Void __swiftcall PlatformTextFieldCoordinator.didChangeSelection()()
{
  uint64_t v1 = type metadata accessor for TextSelection.Indices(0);
  MEMORY[0x1F4188790](v1);
  uint64_t v71 = (uint64_t *)((char *)&v62 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v3 = type metadata accessor for TextSelection(0);
  uint64_t v74 = *(void *)(v3 - 8);
  uint64_t v75 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TextSelection?(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v72 = (uint64_t)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v62 - v9;
  MEMORY[0x1F4188790](v11);
  uint64_t v73 = (char *)&v62 - v12;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v62 - v14;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v62 - v17;
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v62 - v20;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1F4188790](v22 - 8);
  uint64_t v24 = (char *)&v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v26 = v25;
  uint64_t v27 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isViewUpdating) & 1) == 0)
  {
    uint64_t v69 = v10;
    uint64_t v70 = (char *)&v62 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v29 = v0 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_field;
    swift_beginAccess();
    outlined init with copy of PlatformTextFieldCoordinator.FieldStorage?(v29, (uint64_t)v76);
    if (v77 != 255)
    {
      if (v77)
      {
        outlined init with take of WeakBox<VerticalTextView>((uint64_t)v76, (uint64_t)v78, (uint64_t (*)(void))type metadata accessor for WeakBox<VerticalTextView>);
        uint64_t v30 = (void *)MEMORY[0x18C119DF0](v78);
        _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v78, (uint64_t (*)(void))type metadata accessor for WeakBox<VerticalTextView>);
        if (!v30) {
          return;
        }
        uint64_t v31 = &protocol witness table for VerticalTextView;
      }
      else
      {
        outlined init with take of WeakBox<VerticalTextView>((uint64_t)v76, (uint64_t)v78, (uint64_t (*)(void))type metadata accessor for WeakBox<UITextField>);
        uint64_t v30 = (void *)MEMORY[0x18C119DF0](v78);
        _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v78, (uint64_t (*)(void))type metadata accessor for WeakBox<UITextField>);
        if (!v30) {
          return;
        }
        uint64_t v31 = &protocol witness table for UITextField;
      }
      uint64_t v68 = v31;
      uint64_t v32 = v0 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_configuration;
      swift_beginAccess();
      _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
      outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>(v32 + *(int *)(v33 + 56), (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v26) == 1)
      {

        uint64_t v34 = type metadata accessor for Binding<TextSelection?>?;
        goto LABEL_28;
      }
      outlined init with take of WeakBox<VerticalTextView>((uint64_t)v24, (uint64_t)v70, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v36 = (uint64_t (__cdecl *)())v68[24];
      uint64_t v66 = ObjectType;
      id v67 = v30;
      uint64_t v37 = v36();
      if ((v39 & 1) == 0)
      {
        uint64_t v40 = v37;
        unint64_t v65 = v38;
        MEMORY[0x18C113DA0](v26);
        uint64_t v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48);
        unsigned int v42 = v41(v21, 1, v75);
        uint64_t v64 = v41;
        if (v42)
        {
          _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for TextSelection?);
          unint64_t v43 = v65;
LABEL_13:
          uint64_t v44 = (uint64_t)v71;
          uint64_t *v71 = v40;
          *(void *)(v44 + 8) = v43;
          swift_storeEnumTagMultiPayload();
          MEMORY[0x18C113DA0](v26);
          outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>((uint64_t)v18, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for TextSelection?);
          uint64_t v45 = v75;
          uint64_t v46 = v64;
          unsigned int v47 = v64(v15, 1, v75);
          _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for TextSelection?);
          if (v47 == 1)
          {
            _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for TextSelection?);
            outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>(v44, (uint64_t)v18, type metadata accessor for TextSelection.Indices);
            v18[*(int *)(v45 + 20)] = 0;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(v18, 0, 1, v45);
          }
          else if (!v46(v18, 1, v45))
          {
            outlined assign with copy of TextSelection.Indices(v44, (uint64_t)v18);
          }
          _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1(v44, type metadata accessor for TextSelection.Indices);
          dispatch thunk of AnyLocation.set(_:transaction:)();
          _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for TextSelection?);
          goto LABEL_18;
        }
        outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>((uint64_t)v21, (uint64_t)v5, type metadata accessor for TextSelection);
        _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for TextSelection?);
        uint64_t v58 = TextSelection.range.getter();
        uint64_t v63 = v59;
        char v61 = v60;
        _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v5, type metadata accessor for TextSelection);
        unint64_t v43 = v65;
        if ((v61 & 1) != 0 || (v58 ^ (unint64_t)v40) >> 14 || (v63 ^ v65) >= 0x4000) {
          goto LABEL_13;
        }
      }
LABEL_18:
      uint64_t v48 = ((uint64_t (*)(uint64_t))v68[27])(v66);
      if (v48) {
        int v49 = 2 * (v48 == 1);
      }
      else {
        int v49 = 1;
      }
      uint64_t v50 = (uint64_t)v73;
      MEMORY[0x18C113DA0](v26);
      uint64_t v51 = v75;
      uint64_t v52 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48);
      if (v52(v50, 1, v75))
      {
        _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1(v50, (uint64_t (*)(void))type metadata accessor for TextSelection?);
      }
      else
      {
        int v53 = *(unsigned __int8 *)(v50 + *(int *)(v51 + 20));
        _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1(v50, (uint64_t (*)(void))type metadata accessor for TextSelection?);
        if (v53 == v49)
        {
          _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v70, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);

          return;
        }
      }
      uint64_t v54 = (uint64_t)v69;
      uint64_t v24 = v70;
      MEMORY[0x18C113DA0](v26);
      if (v52(v54, 1, v51))
      {
        uint64_t v55 = v72;
        outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>(v54, v72, (uint64_t (*)(void))type metadata accessor for TextSelection?);
        dispatch thunk of AnyLocation.set(_:transaction:)();
        _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1(v55, (uint64_t (*)(void))type metadata accessor for TextSelection?);

        _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
        uint64_t v56 = v54;
        uint64_t v57 = type metadata accessor for TextSelection?;
LABEL_29:
        _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1(v56, (uint64_t (*)(void))v57);
        return;
      }
      *(unsigned char *)(v54 + *(int *)(v51 + 20)) = v49;
      dispatch thunk of AnyLocation.set(_:transaction:)();
      _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1(v54, (uint64_t (*)(void))type metadata accessor for TextSelection?);

      uint64_t v34 = type metadata accessor for Binding<TextSelection?>;
LABEL_28:
      uint64_t v57 = v34;
      uint64_t v56 = (uint64_t)v24;
      goto LABEL_29;
    }
  }
}

void __swiftcall PlatformTextFieldCoordinator.presentEditMenu(with:)(UIMenu_optional *__return_ptr retstr, Swift::OpaquePointer with)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for TextSelection(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (uint64_t *)((char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = PlatformTextFieldCoordinator.textInput.getter();
  if (!v8) {
    goto LABEL_11;
  }
  uint64_t v10 = (void *)v8;
  uint64_t v11 = v9;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 192))(ObjectType, v11);
  if (v15)
  {

LABEL_11:
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
    swift_bridgeObjectRetain();
    v35._uint64_t countAndFlagsBits = 0;
    v35._object = (void *)0xE000000000000000;
    v51.value.super.Class isa = 0;
    v51.Swift::Bool is_nil = 0;
    UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v36, v35, (Swift::String_optional)0, v51, 0, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)with._rawValue, v38);
    return;
  }
  uint64_t v16 = v13;
  uint64_t v17 = v14;
  rawuint64_t Value = (UIMenu *)with._rawValue;
  MEMORY[0x1F4188790](v13);
  uint64_t v37 = v3;
  _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_4(0, &lazy cache variable for type metadata for ((_:))?, 255, (uint64_t (*)(uint64_t))type metadata accessor for (_:), MEMORY[0x1E4FBB718]);
  static Update.ensure<A>(_:)();
  uint64_t v18 = v41;
  if (!v41)
  {

    with._rawuint64_t Value = rawValue;
    goto LABEL_11;
  }
  uint64_t v19 = v42;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v18;
  *(void *)(v20 + 24) = v19;
  uint64_t v21 = v20;
  *uint64_t v7 = v16;
  v7[1] = v17;
  type metadata accessor for TextSelection.Indices(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v22 = *(int *)(v5 + 20);
  *((unsigned char *)v7 + v22) = 0;
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 216))(ObjectType, v11);
  char v24 = 2 * (v23 == 1);
  if (!v23) {
    char v24 = 1;
  }
  *((unsigned char *)v7 + v22) = v24;
  MEMORY[0x1F4188790](v23);
  *(&v39 - 4) = (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed TextSelection) -> (@out PlatformItemList);
  *(&v39 - 3) = v21;
  uint64_t v37 = v7;
  static Update.ensure<A>(_:)();
  uint64_t v25 = v41;
  uint64_t v39 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
  unint64_t v26 = MEMORY[0x1E4FBC860];
  uint64_t v49 = MEMORY[0x1E4FBC860];
  unint64_t v27 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  LOBYTE(v41) = 0;
  _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_4(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, 255, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, MEMORY[0x1E4FBBE00]);
  uint64_t v28 = type metadata accessor for MenuVisitor.MenuStackGroup();
  unint64_t v29 = (*(unsigned __int8 *)(*(void *)(v28 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v28 - 8) + 80);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_18834BB80;
  if (one-time initialization token for empty != -1) {
    swift_once();
  }
  uint64_t v31 = __swift_project_value_buffer(v28, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>(v31, v30 + v29, (uint64_t (*)(void))type metadata accessor for MenuVisitor.MenuStackGroup);
  char v32 = (char)v41;
  uint64_t v41 = 0;
  LOBYTE(v42) = 0;
  uint64_t v43 = MEMORY[0x1E4FBC868];
  unint64_t v44 = v27;
  unint64_t v45 = v26;
  uint64_t v46 = MEMORY[0x1E4FBC868];
  char v47 = v32;
  uint64_t v48 = v30;
  MenuVisitor.visit(_:uniqueNames:)((uint64_t)v25, &v49);
  swift_bridgeObjectRelease();
  unint64_t v33 = v45;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v41 = rawValue;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v33);
  v34._uint64_t countAndFlagsBits = 0;
  v34._object = (void *)0xE000000000000000;
  v50.value.super.Class isa = 0;
  v50.Swift::Bool is_nil = 0;
  UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v41, v34, (Swift::String_optional)0, v50, 0, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)v41, v38);

  swift_release();
  _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v7, type metadata accessor for TextSelection);
}

uint64_t *closure #1 in PlatformTextFieldCoordinator.presentEditMenu(with:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_selectionStorage + 32))
  {
    uint64_t v3 = 0;
    id result = 0;
  }
  else
  {
    type metadata accessor for (_:)();
    id result = (uint64_t *)AGGraphGetWeakValue();
    if (result)
    {
      uint64_t v3 = *result;
      id result = (uint64_t *)swift_retain();
    }
    else
    {
      uint64_t v3 = 0;
    }
  }
  *a2 = v3;
  a2[1] = result;
  return result;
}

uint64_t closure #2 in PlatformTextFieldCoordinator.presentEditMenu(with:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for TextSelection(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>(a2, (uint64_t)v8, type metadata accessor for TextSelection);
  uint64_t v9 = a1(v8);
  uint64_t result = _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v8, type metadata accessor for TextSelection);
  *a3 = v9;
  return result;
}

Swift::Void __swiftcall PlatformTextFieldCoordinator.triggerPrimaryAction()()
{
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v78 - v2;
  *(unsigned char *)(v0 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isUserEditing) = 0;
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isViewUpdating) & 1) == 0)
  {
    uint64_t v87 = v0;
    uint64_t v4 = v0 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_configuration;
    swift_beginAccess();
    outlined init with copy of TextField<_TextFieldStyleLabel>(v4, (uint64_t)v3);
    uint64_t v5 = *((void *)v3 + 9);
    uint64_t v6 = *((void *)v3 + 10);
    uint64_t v7 = *((void *)v3 + 11);
    uint64_t v8 = *((void *)v3 + 12);
    uint64_t v9 = *((void *)v3 + 13);
    uint64_t v10 = *((void *)v3 + 14);
    uint64_t v12 = *((void *)v3 + 15);
    uint64_t v11 = *((void *)v3 + 16);
    uint64_t v14 = *((void *)v3 + 17);
    uint64_t v13 = *((void *)v3 + 18);
    uint64_t v16 = *((void *)v3 + 19);
    uint64_t v15 = *((void *)v3 + 20);
    uint64_t v17 = *((void *)v3 + 21);
    int v18 = *((_DWORD *)v3 + 44);
    LODWORD(v85) = v3[180];
    uint64_t v88 = v7;
    uint64_t v96 = v6;
    uint64_t v91 = v5;
    uint64_t v98 = v14;
    uint64_t v95 = v13;
    uint64_t v90 = v16;
    uint64_t v89 = v15;
    int v86 = v18;
    uint64_t v99 = v17;
    uint64_t v93 = v8;
    uint64_t v94 = v10;
    uint64_t v92 = v9;
    uint64_t v100 = v5;
    uint64_t v101 = v6;
    uint64_t v102 = v7;
    uint64_t v103 = v8;
    uint64_t v104 = (uint64_t (*)(void, void))v9;
    uint64_t v105 = v10;
    uint64_t v106 = v12;
    uint64_t v107 = v11;
    uint64_t v108 = v14;
    uint64_t v109 = v13;
    if (v85)
    {
      uint64_t v110 = v16;
      uint64_t v111 = v15;
      LOBYTE(v112) = v17 & 1;
      HIDWORD(v112) = HIDWORD(v17);
      __int16 v113 = v18 & 0xFF01;
      char v114 = BYTE2(v18) & 1;
      char v115 = HIBYTE(v18) & 1;
      uint64_t v19 = v14;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v20 = v12;
      uint64_t v21 = v11;
      outlined copy of TextFieldState.FormatActions?(v9);
      outlined copy of TextFieldState.FormatActions?(v19);
      _s7SwiftUI7BindingVyAA14TextFieldStateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<TextFieldState>, (uint64_t)&type metadata for TextFieldState, MEMORY[0x1E4F41638]);
      MEMORY[0x18C113DA0](&v116);
    }
    else
    {
      LOBYTE(v110) = v16 & 1;
      HIDWORD(v110) = HIDWORD(v16);
      LOWORD(v111) = v15 & 0xFF01;
      BYTE2(v111) = BYTE2(v15) & 1;
      BYTE3(v111) = BYTE3(v15) & 1;
      uint64_t v112 = v17;
      swift_bridgeObjectRetain();
      outlined copy of TextFieldState.FormatActions?(v7);
      uint64_t v20 = v12;
      uint64_t v21 = v11;
      outlined copy of TextFieldState.FormatActions?(v12);
      _s7SwiftUI7BindingVyAA14TextFieldStateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for State<TextFieldState>, (uint64_t)&type metadata for TextFieldState, MEMORY[0x1E4F41580]);
      swift_retain();
      State.wrappedValue.getter();
    }
    static Semantics.v3.getter();
    BOOL v126 = (isLinkedOnOrAfter(_:)() & 1) == 0;
    if (v118)
    {
      uint64_t v22 = v120(v116, v117);
      if (v23)
      {
        uint64_t v24 = v22;
        uint64_t v25 = v23;
        swift_bridgeObjectRelease();
        uint64_t v116 = v24;
        uint64_t v117 = v25;
      }
    }
    uint64_t v97 = v21;
    uint64_t v26 = v93;
    uint64_t v27 = v92;
    if (v122)
    {
      v124();
      uint64_t v28 = v122;
    }
    else
    {
      uint64_t v28 = 0;
    }
    char v29 = (char)v85;
    uint64_t v30 = v121;
    uint64_t v32 = v123;
    uint64_t v31 = v124;
    uint64_t v85 = v120;
    uint64_t v84 = v119;
    uint64_t v83 = v118;
    if (v29)
    {
      uint64_t v100 = v116;
      uint64_t v101 = v117;
      uint64_t v102 = v118;
      uint64_t v103 = v119;
      uint64_t v104 = v120;
      uint64_t v105 = v121;
      uint64_t v106 = v28;
      uint64_t v107 = v123;
      uint64_t v108 = (uint64_t)v124;
      uint64_t v109 = v125;
      LOBYTE(v110) = v126;
      HIDWORD(v110) = v127;
      LODWORD(v111) = v128;
      uint64_t v80 = v121;
      uint64_t v33 = v91;
      uint64_t v78 = v117;
      swift_retain();
      uint64_t v81 = v32;
      uint64_t v34 = v96;
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v82 = v20;
      outlined copy of TextFieldState.FormatActions?(v27);
      int v79 = v31;
      uint64_t v35 = v98;
      uint64_t v36 = v28;
      uint64_t v37 = v95;
      uint64_t v38 = v90;
      uint64_t v39 = v89;
      outlined copy of TextFieldState.FormatActions?(v98);
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_bridgeObjectRelease();
      outlined consume of TextFieldState.FormatActions?(v83);
      outlined consume of TextFieldState.FormatActions?(v36);
      LODWORD(v36) = v86;
      uint64_t v40 = v99;
      uint64_t v75 = v37;
      uint64_t v77 = v38;
      uint64_t v74 = v35;
      uint64_t v41 = v33;
      uint64_t v42 = v34;
      uint64_t v43 = v88;
      uint64_t v44 = v93;
      uint64_t v45 = v92;
      uint64_t v46 = v94;
      uint64_t v47 = v82;
      uint64_t v48 = v97;
      outlined consume of StateOrBinding<TextFieldState>(v41, v42, v88, v93, v92, v94, v82, v97, v74, v75, v77, v39, v99, v86, 1);
      outlined consume of StateOrBinding<TextFieldState>(v91, v96, v43, v44, v45, v46, v47, v48, v98, v95, v90, v39, v40, v36, 1);
    }
    else
    {
      uint64_t v100 = v116;
      uint64_t v101 = v117;
      uint64_t v102 = v118;
      uint64_t v103 = v119;
      uint64_t v104 = v120;
      uint64_t v105 = v121;
      uint64_t v106 = v28;
      uint64_t v107 = v123;
      uint64_t v108 = (uint64_t)v124;
      uint64_t v109 = v125;
      LOBYTE(v110) = v126;
      HIDWORD(v110) = v127;
      LODWORD(v111) = v128;
      if (v99)
      {
        uint64_t v78 = v117;
        swift_bridgeObjectRetain();
        int v79 = v31;
        uint64_t v80 = v30;
        uint64_t v81 = v32;
        uint64_t v49 = v94;
        outlined copy of TextFieldState.FormatActions?(v88);
        uint64_t v82 = v20;
        uint64_t v50 = v95;
        outlined copy of TextFieldState.FormatActions?(v20);
        swift_retain();
        dispatch thunk of AnyLocation.set(_:transaction:)();
        swift_bridgeObjectRelease();
        outlined consume of TextFieldState.FormatActions?(v83);
        outlined consume of TextFieldState.FormatActions?(v28);
        int v51 = v86;
        uint64_t v52 = v89;
        uint64_t v53 = v90;
        uint64_t v76 = v50;
        uint64_t v54 = v91;
        uint64_t v55 = v96;
        uint64_t v56 = v88;
        uint64_t v57 = v26;
        uint64_t v58 = v92;
        uint64_t v59 = v49;
        uint64_t v60 = v82;
        uint64_t v61 = v97;
        outlined consume of StateOrBinding<TextFieldState>(v91, v96, v88, v57, v92, v59, v82, v97, v98, v76, v90, v89, v99, v86, 0);
        uint64_t v62 = v95;
        uint64_t v63 = v93;
        uint64_t v64 = v98;
        uint64_t v65 = v94;
        uint64_t v66 = v58;
        uint64_t v67 = v61;
        uint64_t v68 = v60;
        uint64_t v69 = v56;
        uint64_t v70 = v55;
        uint64_t v71 = v99;
      }
      else
      {
        swift_bridgeObjectRelease();
        outlined consume of TextFieldState.FormatActions?(v83);
        outlined consume of TextFieldState.FormatActions?(v28);
        uint64_t v71 = 0;
        uint64_t v67 = v97;
        uint64_t v68 = v20;
        uint64_t v65 = v94;
        uint64_t v66 = v27;
        uint64_t v63 = v26;
        uint64_t v69 = v88;
        uint64_t v70 = v96;
        uint64_t v54 = v91;
        uint64_t v64 = v98;
        uint64_t v62 = v95;
        uint64_t v53 = v90;
        uint64_t v52 = v89;
        int v51 = v86;
      }
      outlined consume of StateOrBinding<TextFieldState>(v54, v70, v69, v63, v66, v65, v68, v67, v64, v62, v53, v52, v71, v51, 0);
    }
    outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v3);
    uint64_t v72 = (void *)PlatformTextFieldCoordinator.textInput.getter();
    if (v72)
    {
      uint64_t v73 = v72;
      objc_msgSend(v72, sel_endEditing_, 1);
    }
    PlatformTextFieldCoordinator.updateToDisplayTextIfNeeded()();
    specialized SubmitTriggerSource.updateTriggersIfNeeded()();
  }
}

Swift::Void __swiftcall PlatformTextFieldCoordinator.updateToDisplayTextIfNeeded()()
{
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v59 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v59 - v5;
  uint64_t v7 = v0 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_configuration;
  swift_beginAccess();
  uint64_t ObjectType = v7;
  outlined init with copy of TextField<_TextFieldStyleLabel>(v7, (uint64_t)v6);
  uint64_t v9 = *((void *)v6 + 9);
  uint64_t v8 = *((void *)v6 + 10);
  uint64_t v10 = *((void *)v6 + 11);
  uint64_t v11 = *((void *)v6 + 12);
  uint64_t v13 = *((void *)v6 + 13);
  uint64_t v12 = *((void *)v6 + 14);
  uint64_t v15 = *((void *)v6 + 15);
  uint64_t v14 = *((void *)v6 + 16);
  uint64_t v17 = *((void *)v6 + 17);
  uint64_t v16 = *((void *)v6 + 18);
  uint64_t v19 = *((void *)v6 + 19);
  uint64_t v18 = *((void *)v6 + 20);
  uint64_t v20 = *((void *)v6 + 21);
  char v21 = v6[180];
  uint64_t v63 = v3;
  uint64_t v64 = v0;
  if (v21)
  {
    int v22 = *((_DWORD *)v6 + 44);
    uint64_t v65 = v9;
    uint64_t v66 = v8;
    uint64_t v67 = v10;
    uint64_t v68 = v11;
    uint64_t v69 = v13;
    uint64_t v70 = v12;
    uint64_t v71 = v15;
    uint64_t v72 = v14;
    uint64_t v73 = v17;
    uint64_t v74 = v16;
    uint64_t v75 = v19;
    uint64_t v76 = v18;
    LOBYTE(v77) = v20 & 1;
    HIDWORD(v77) = HIDWORD(v20);
    __int16 v78 = v22 & 0xFF01;
    char v79 = BYTE2(v22) & 1;
    char v80 = HIBYTE(v22) & 1;
    _s7SwiftUI7BindingVyAA14TextFieldStateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<TextFieldState>, (uint64_t)&type metadata for TextFieldState, MEMORY[0x1E4F41638]);
    MEMORY[0x18C113DA0](&v81);
  }
  else
  {
    uint64_t v65 = v9;
    uint64_t v66 = v8;
    uint64_t v67 = v10;
    uint64_t v68 = v11;
    uint64_t v69 = v13;
    uint64_t v70 = v12;
    uint64_t v71 = v15;
    uint64_t v72 = v14;
    uint64_t v73 = v17;
    uint64_t v74 = v16;
    LOBYTE(v75) = v19 & 1;
    HIDWORD(v75) = HIDWORD(v19);
    LOWORD(v76) = v18 & 0xFF01;
    BYTE2(v76) = BYTE2(v18) & 1;
    BYTE3(v76) = BYTE3(v18) & 1;
    uint64_t v77 = v20;
    _s7SwiftUI7BindingVyAA14TextFieldStateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for State<TextFieldState>, (uint64_t)&type metadata for TextFieldState, MEMORY[0x1E4F41580]);
    State.wrappedValue.getter();
  }
  uint64_t v23 = v82;
  uint64_t v62 = v81;
  uint64_t v24 = v83;
  uint64_t v25 = v84;
  outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v6);
  outlined consume of TextFieldState.FormatActions?(v24);
  outlined consume of TextFieldState.FormatActions?(v25);
  uint64_t v26 = v64;
  uint64_t v27 = PlatformTextFieldCoordinator.textInput.getter();
  if (!v27
    || (char v29 = (void *)v27,
        uint64_t v30 = v28,
        uint64_t v31 = swift_getObjectType(),
        uint64_t v32 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v30 + 24))(v31, v30),
        v29,
        !v32))
  {
    swift_bridgeObjectRelease();
LABEL_10:
    uint64_t v37 = *(void *)(v26 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment);
    if (v37 != 1)
    {
      uint64_t v38 = *(void *)(v26 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment + 8);
      swift_retain();
      swift_retain();
      uint64_t v39 = PlatformTextFieldCoordinator.textInput.getter();
      if (v39)
      {
        uint64_t v41 = (void *)v39;
        uint64_t v62 = v40;
        uint64_t v64 = v38;
        uint64_t v42 = (uint64_t)v63;
        outlined init with copy of TextField<_TextFieldStyleLabel>(ObjectType, (uint64_t)v63);
        uint64_t v43 = *(void *)(v42 + 80);
        uint64_t v44 = *(void *)(v42 + 88);
        uint64_t v45 = *(void *)(v42 + 96);
        uint64_t v47 = *(void *)(v42 + 104);
        uint64_t v46 = *(void *)(v42 + 112);
        uint64_t v49 = *(void *)(v42 + 120);
        uint64_t v48 = *(void *)(v42 + 128);
        uint64_t v51 = *(void *)(v42 + 136);
        uint64_t v50 = *(void *)(v42 + 144);
        uint64_t v53 = *(void *)(v42 + 152);
        uint64_t v52 = *(void *)(v42 + 160);
        uint64_t v54 = *(void *)(v42 + 168);
        if (*(unsigned char *)(v42 + 180))
        {
          int v55 = *(_DWORD *)(v42 + 176);
          uint64_t v65 = *(void *)(v42 + 72);
          uint64_t v66 = v43;
          uint64_t v67 = v44;
          uint64_t v68 = v45;
          uint64_t v69 = v47;
          uint64_t v70 = v46;
          uint64_t v71 = v49;
          uint64_t v72 = v48;
          uint64_t v73 = v51;
          uint64_t v74 = v50;
          uint64_t v75 = v53;
          uint64_t v76 = v52;
          LOBYTE(v77) = v54 & 1;
          HIDWORD(v77) = HIDWORD(v54);
          __int16 v78 = v55 & 0xFF01;
          char v79 = BYTE2(v55) & 1;
          char v80 = HIBYTE(v55) & 1;
          _s7SwiftUI7BindingVyAA14TextFieldStateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<TextFieldState>, (uint64_t)&type metadata for TextFieldState, MEMORY[0x1E4F41638]);
          MEMORY[0x18C113DA0](&v81);
        }
        else
        {
          uint64_t v65 = *(void *)(v42 + 72);
          uint64_t v66 = v43;
          uint64_t v67 = v44;
          uint64_t v68 = v45;
          uint64_t v69 = v47;
          uint64_t v70 = v46;
          uint64_t v71 = v49;
          uint64_t v72 = v48;
          uint64_t v73 = v51;
          uint64_t v74 = v50;
          LOBYTE(v75) = v53 & 1;
          HIDWORD(v75) = HIDWORD(v53);
          LOWORD(v76) = v52 & 0xFF01;
          BYTE2(v76) = BYTE2(v52) & 1;
          BYTE3(v76) = BYTE3(v52) & 1;
          uint64_t v77 = v54;
          _s7SwiftUI7BindingVyAA14TextFieldStateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for State<TextFieldState>, (uint64_t)&type metadata for TextFieldState, MEMORY[0x1E4F41580]);
          State.wrappedValue.getter();
        }
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v60 = v81;
        uint64_t v57 = v83;
        uint64_t v59 = v82;
        uint64_t v58 = v84;
        outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v63);
        outlined consume of TextFieldState.FormatActions?(v57);
        outlined consume of TextFieldState.FormatActions?(v58);
        uint64_t v65 = v37;
        uint64_t v66 = v64;
        UIKitTextInput.setText(_:environment:)(v60, v59, &v65, ObjectType, v62);

        swift_bridgeObjectRelease();
      }
      outlined consume of EnvironmentValues?(v37);
    }
    return;
  }
  id v33 = objc_msgSend(v32, sel_string);

  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v36 = v35;

  if (v62 == v34 && v23 == v36)
  {
    swift_bridgeObjectRelease_n();
    return;
  }
  char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v56 & 1) == 0) {
    goto LABEL_10;
  }
}

uint64_t PlatformTextFieldCoordinator.__ivar_destroyer()
{
  outlined destroy of TextField<_TextFieldStyleLabel>(v0 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_configuration);
  outlined consume of EnvironmentValues?(*(void *)(v0
                                                   + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment));
  outlined destroy of PlatformItem(v0 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_label);
  return _sypSgWOhTm_7(v0 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_field, &lazy cache variable for type metadata for PlatformTextFieldCoordinator.FieldStorage?, (uint64_t)&type metadata for PlatformTextFieldCoordinator.FieldStorage);
}

id PlatformTextFieldCoordinator.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PlatformTextFieldCoordinator(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for PlatformTextFieldCoordinator()
{
  return type metadata accessor for PlatformTextFieldCoordinator(0);
}

uint64_t type metadata accessor for PlatformTextFieldCoordinator(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for PlatformTextFieldCoordinator);
}

void type metadata completion function for PlatformTextFieldCoordinator()
{
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

Swift::Bool __swiftcall PlatformTextFieldCoordinator.textField(_:shouldChangeCharactersIn:replacementString:)(UITextField *_, __C::_NSRange shouldChangeCharactersIn, Swift::String replacementString)
{
  object = replacementString._object;
  uint64_t countAndFlagsBits = replacementString._countAndFlagsBits;
  Swift::Int length = shouldChangeCharactersIn.length;
  Swift::Int location = shouldChangeCharactersIn.location;
  uint64_t v9 = v3 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_field;
  swift_beginAccess();
  outlined init with copy of PlatformTextFieldCoordinator.FieldStorage?(v9, (uint64_t)v19);
  if (BYTE8(v19[0]) == 255) {
    goto LABEL_2;
  }
  if (BYTE8(v19[0]))
  {
    outlined init with take of WeakBox<VerticalTextView>((uint64_t)v19, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for WeakBox<VerticalTextView>);
    uint64_t v12 = (void *)MEMORY[0x18C119DF0](v21);
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for WeakBox<VerticalTextView>);
    if (v12) {
      goto LABEL_8;
    }
LABEL_2:
    char v10 = 1;
    return v10 & 1;
  }
  outlined init with take of WeakBox<VerticalTextView>((uint64_t)v19, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for WeakBox<UITextField>);
  uint64_t v12 = (void *)MEMORY[0x18C119DF0](v21);
  _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for WeakBox<UITextField>);
  if (!v12) {
    goto LABEL_2;
  }
LABEL_8:
  uint64_t v13 = [(UITextField *)_ text];
  if (!v13)
  {

    goto LABEL_2;
  }
  uint64_t v14 = v13;
  unint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v17 = v16;

  uint64_t v18 = *(void *)(v3 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment);
  if (v18 == 1)
  {
    uint64_t v20 = 0;
    memset(v19, 0, sizeof(v19));
  }
  else
  {
    if (*(void *)(v3 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment + 8))
    {
      _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputValidationKey>, (uint64_t)&type metadata for TextInputValidationKey, (uint64_t)&protocol witness table for TextInputValidationKey, MEMORY[0x1E4F40930]);
      outlined copy of EnvironmentValues?(v18);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputValidationKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputValidationKey>, (uint64_t)&type metadata for TextInputValidationKey, (uint64_t)&protocol witness table for TextInputValidationKey);
      swift_retain();
      swift_retain();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release();
    }
    else
    {
      _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputValidationKey>, (uint64_t)&type metadata for TextInputValidationKey, (uint64_t)&protocol witness table for TextInputValidationKey, MEMORY[0x1E4F40930]);
      outlined copy of EnvironmentValues?(v18);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputValidationKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputValidationKey>, (uint64_t)&type metadata for TextInputValidationKey, (uint64_t)&protocol witness table for TextInputValidationKey);
      swift_retain();
      PropertyList.subscript.getter();
    }
    swift_release();
    outlined consume of EnvironmentValues?(v18);
  }
  swift_getObjectType();
  char v10 = specialized UIKitTextInput.shouldChangeText(in:text:replacement:validator:)(location, length, v15, v17, countAndFlagsBits, (unint64_t)object, (uint64_t)v19);

  swift_bridgeObjectRelease();
  _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for TextInputValidation?);
  return v10 & 1;
}

Swift::Bool __swiftcall PlatformTextFieldCoordinator.textView(_:shouldChangeTextIn:replacementText:)(UITextView *_, __C::_NSRange shouldChangeTextIn, Swift::String replacementText)
{
  if (*(unsigned char *)(v3 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_ignoreNextUpdate))
  {
    char v4 = 0;
    goto LABEL_15;
  }
  uint64_t v5 = *(void *)(v3 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment);
  if (v5 == 1)
  {
    uint64_t v23 = 0;
    long long v21 = 0u;
    long long v22 = 0u;
LABEL_12:
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)&v21, (uint64_t (*)(void))type metadata accessor for TextInputValidation?);
    char v4 = 1;
    goto LABEL_15;
  }
  object = replacementText._object;
  uint64_t countAndFlagsBits = replacementText._countAndFlagsBits;
  if (*(void *)(v3 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment + 8))
  {
    _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputValidationKey>, (uint64_t)&type metadata for TextInputValidationKey, (uint64_t)&protocol witness table for TextInputValidationKey, MEMORY[0x1E4F40930]);
    outlined copy of EnvironmentValues?(v5);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputValidationKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputValidationKey>, (uint64_t)&type metadata for TextInputValidationKey, (uint64_t)&protocol witness table for TextInputValidationKey);
    swift_retain();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release();
  }
  else
  {
    _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputValidationKey>, (uint64_t)&type metadata for TextInputValidationKey, (uint64_t)&protocol witness table for TextInputValidationKey, MEMORY[0x1E4F40930]);
    outlined copy of EnvironmentValues?(v5);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputValidationKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputValidationKey>, (uint64_t)&type metadata for TextInputValidationKey, (uint64_t)&protocol witness table for TextInputValidationKey);
    swift_retain();
    PropertyList.subscript.getter();
  }
  swift_release();
  outlined consume of EnvironmentValues?(v5);
  if (!*((void *)&v22 + 1)) {
    goto LABEL_12;
  }
  outlined init with take of OptionalBinaryInteger(&v21, (uint64_t)v24);
  uint64_t v9 = (uint64_t (**)(uint64_t))__swift_project_boxed_opaque_existential_1(v24, v24[3]);
  char v10 = [(UITextView *)_ text];
  if (!v10)
  {
    __break(1u);
    return (char)v10;
  }
  uint64_t v11 = v10;
  unint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v14 = v13;

  unint64_t v15 = *v9;
  unint64_t v16 = Range<>.init(_:in:)();
  if (v18)
  {
    char v4 = 1;
  }
  else
  {
    uint64_t v19 = specialized StringProtocol.replacingCharacters<A, B>(in:with:)(v16, v17, countAndFlagsBits, (unint64_t)object, v12, v14);
    char v4 = v15(v19);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
LABEL_15:
  LOBYTE(v10) = v4 & 1;
  return (char)v10;
}

uint64_t @objc PlatformTextFieldCoordinator.textField(_:shouldChangeCharactersIn:replacementString:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(id, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;
  id v15 = a3;
  id v16 = a1;
  LOBYTE(a7) = a7(v15, a4, a5, v12, v14);

  swift_bridgeObjectRelease();
  return a7 & 1;
}

uint64_t VerticalTextView.uiDefaultTextAttributes.didset()
{
  uint64_t v1 = v0;
  id v2 = objc_msgSend(v0, sel_textStorage);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = partial apply for closure #1 in VerticalTextView.uiDefaultTextAttributes.didset;
  *(void *)(v4 + 24) = v3;
  v9[4] = partial apply for thunk for @callee_guaranteed (@guaranteed UIMutableTraits) -> ();
  v9[5] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1107296256;
  long long v9[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSTextStorage?) -> ();
  v9[3] = &block_descriptor_26;
  uint64_t v5 = _Block_copy(v9);
  id v6 = v1;
  swift_retain();
  swift_release();
  objc_msgSend(v2, sel_coordinateEditing_, v5);
  _Block_release(v5);

  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
  swift_bridgeObjectRetain();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v6, sel_setTypingAttributes_, isa);
  swift_release();

  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v3) {
    __break(1u);
  }
  return result;
}

void closure #1 in VerticalTextView.uiDefaultTextAttributes.didset(void *a1)
{
  if (a1)
  {
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
    id v2 = a1;
    swift_bridgeObjectRetain();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v3 = v2;
    uint64_t v4 = NSAttributedString.range.getter();
    uint64_t v6 = v5;

    objc_msgSend(v3, sel_setAttributes_range_, isa, v4, v6);
  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed NSTextStorage?) -> ()(uint64_t a1, void *a2)
{
  id v3 = *(void (**)(void *))(a1 + 32);
  id v4 = a2;
  v3(a2);
}

void VerticalTextView.pressesBegan(_:with:)(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v7 = v3;
  specialized Sequence.first(where:)(a1, (uint64_t)v7);
  uint64_t v9 = v8;

  if (v9)
  {

    uint64_t v10 = MEMORY[0x18C119DF0](&v7[OBJC_IVAR____TtC7SwiftUI16VerticalTextView_uiDelegate]);
    if (v10)
    {
      *(unsigned char *)(v10 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_ignoreNextUpdate) = 1;
      swift_unknownObjectRelease();
    }
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIPress);
  _sSo7UIColorCAB7SwiftUI13ColorProviderACWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UIPress and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for UIPress);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  v12.receiver = v7;
  v12.super_class = ObjectType;
  objc_msgSendSuper2(&v12, sel_pressesBegan_withEvent_, isa, a2);
}

void VerticalTextView.pressesEnded(_:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIPress);
  _sSo7UIColorCAB7SwiftUI13ColorProviderACWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UIPress and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for UIPress);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  v11.receiver = v2;
  v11.super_class = ObjectType;
  objc_msgSendSuper2(&v11, sel_pressesEnded_withEvent_, isa, a2);

  uint64_t v7 = v2;
  specialized Sequence.first(where:)(a1, (uint64_t)v7);
  uint64_t v9 = v8;

  if (v9)
  {

    uint64_t v10 = MEMORY[0x18C119DF0](&v7[OBJC_IVAR____TtC7SwiftUI16VerticalTextView_uiDelegate]);
    if (v10)
    {
      *(unsigned char *)(v10 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_ignoreNextUpdate) = 0;
      PlatformTextFieldCoordinator.triggerPrimaryAction()();
      swift_unknownObjectRelease();
    }
  }
}

uint64_t @objc VerticalTextView.pressesBegan(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t, void *))
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIPress);
  _sSo7UIColorCAB7SwiftUI13ColorProviderACWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UIPress and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for UIPress);
  uint64_t v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a4;
  id v10 = a1;
  a5(v8, a4);

  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in VerticalTextView.isSubmission(_:)(id *a1, uint64_t a2)
{
  uint64_t result = (uint64_t)objc_msgSend(*a1, sel_key);
  if (result)
  {
    id v4 = (void *)result;
    id v5 = objc_msgSend((id)result, sel_characters);
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;

    BOOL v9 = v6 == 10 && v8 == 0xE100000000000000;
    if (v9
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || (v6 == 13 ? (BOOL v10 = v8 == 0xE100000000000000) : (BOOL v10 = 0), v10))
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0)
      {
LABEL_18:

        return 0;
      }
    }
    if ((objc_msgSend(v4, sel_modifierFlags) & 0x80000) != 0) {
      goto LABEL_18;
    }
    uint64_t v12 = MEMORY[0x18C119DF0](a2 + OBJC_IVAR____TtC7SwiftUI16VerticalTextView_uiDelegate);
    if (!v12) {
      goto LABEL_18;
    }
    uint64_t v13 = *(void *)(v12 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment);
    if (v13 == 1)
    {
      swift_unknownObjectRelease();

      return 1;
    }
    else
    {
      if (*(void *)(v12 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment + 8))
      {
        _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SubmitsOnReturnKey>, (uint64_t)&type metadata for SubmitsOnReturnKey, (uint64_t)&protocol witness table for SubmitsOnReturnKey, MEMORY[0x1E4F40930]);
        outlined copy of EnvironmentValues?(v13);
        lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SubmitsOnReturnKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<SubmitsOnReturnKey>, (uint64_t)&type metadata for SubmitsOnReturnKey, (uint64_t)&protocol witness table for SubmitsOnReturnKey);
        swift_retain();
        swift_retain();
        PropertyList.Tracker.value<A>(_:for:)();
        swift_release();
      }
      else
      {
        _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SubmitsOnReturnKey>, (uint64_t)&type metadata for SubmitsOnReturnKey, (uint64_t)&protocol witness table for SubmitsOnReturnKey, MEMORY[0x1E4F40930]);
        outlined copy of EnvironmentValues?(v13);
        lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SubmitsOnReturnKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<SubmitsOnReturnKey>, (uint64_t)&type metadata for SubmitsOnReturnKey, (uint64_t)&protocol witness table for SubmitsOnReturnKey);
        swift_retain();
        PropertyList.subscript.getter();
      }
      swift_release();
      outlined consume of EnvironmentValues?(v13);
      swift_unknownObjectRelease();

      return v14;
    }
  }
  return result;
}

id VerticalTextView.init(coder:)(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v4 = &v1[OBJC_IVAR____TtC7SwiftUI16VerticalTextView_upperLimit];
  *(void *)id v4 = 0;
  unsigned char v4[8] = 1;
  id v5 = &v1[OBJC_IVAR____TtC7SwiftUI16VerticalTextView_lowerLimit];
  *(void *)id v5 = 0;
  unsigned char v5[8] = 1;
  *(void *)&v1[OBJC_IVAR____TtC7SwiftUI16VerticalTextView_uiDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v6 = OBJC_IVAR____TtC7SwiftUI16VerticalTextView_uiDefaultTextAttributes;
  uint64_t v7 = v1;
  *(void *)&v1[v6] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);

  v10.receiver = v7;
  v10.super_class = ObjectType;
  id v8 = objc_msgSendSuper2(&v10, sel_initWithCoder_, a1);

  return v8;
}

uint64_t VerticalTextView.__ivar_destroyer()
{
  outlined destroy of weak FallbackResponderProvider?(v0 + OBJC_IVAR____TtC7SwiftUI16VerticalTextView_uiDelegate);

  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for VerticalTextView()
{
  return self;
}

uint64_t initializeWithCopy for PlatformTextFieldCoordinator.FieldStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for PlatformTextFieldCoordinator.FieldStorage(a1, a2, a3, MEMORY[0x1E4FBC920]);
}

uint64_t assignWithCopy for PlatformTextFieldCoordinator.FieldStorage(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    swift_unknownObjectWeakDestroy();
    unsigned int v4 = *(unsigned __int8 *)(a2 + 8);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a2 + 2;
    }
    BOOL v5 = v4 == 1;
    swift_unknownObjectWeakCopyInit();
    *(unsigned char *)(a1 + 8) = v5;
  }
  return a1;
}

uint64_t initializeWithTake for PlatformTextFieldCoordinator.FieldStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for PlatformTextFieldCoordinator.FieldStorage(a1, a2, a3, MEMORY[0x1E4FBC930]);
}

uint64_t initializeWithCopy for PlatformTextFieldCoordinator.FieldStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 8);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a2 + 2;
  }
  BOOL v5 = v4 == 1;
  uint64_t result = a4();
  *(unsigned char *)(result + 8) = v5;
  return result;
}

uint64_t assignWithTake for PlatformTextFieldCoordinator.FieldStorage(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    swift_unknownObjectWeakDestroy();
    unsigned int v4 = *(unsigned __int8 *)(a2 + 8);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a2 + 2;
    }
    BOOL v5 = v4 == 1;
    swift_unknownObjectWeakTakeInit();
    *(unsigned char *)(a1 + 8) = v5;
  }
  return a1;
}

uint64_t storeEnumTagSinglePayload for PlatformTextFieldCoordinator.FieldStorage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)uint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for PlatformTextFieldCoordinator.FieldStorage(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 8);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for PlatformTextFieldCoordinator.FieldStorage(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PlatformTextFieldCoordinator.FieldStorage()
{
  return &type metadata for PlatformTextFieldCoordinator.FieldStorage;
}

uint64_t _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlainTextFieldStyle.BodyContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_2);
}

uint64_t storeEnumTagSinglePayload for PlainTextFieldStyle.BodyContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_2);
}

uint64_t type metadata accessor for PlainTextFieldStyle.BodyContent(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for PlainTextFieldStyle.BodyContent);
}

uint64_t initializeBufferWithCopyOfBuffer for PlainTextFieldStyle.BodyContent(uint64_t a1, uint64_t *a2)
{
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  uint64_t v7 = *a2;
  *(void *)a1 = *a2;
  if ((v6 & 0x20000) != 0)
  {
    a1 = v7 + ((v6 + 16) & ~(unint64_t)v6);
    swift_retain();
  }
  else
  {
    uint64_t v46 = v5;
    uint64_t v8 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = a2[3];
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    *(unsigned char *)(a1 + 33) = *((unsigned char *)a2 + 33);
    uint64_t v9 = a2[8];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v9)
    {
      uint64_t v10 = a2[5];
      uint64_t v11 = a2[6];
      char v12 = *((unsigned char *)a2 + 56);
      outlined copy of Text.Storage(v10, v11, v12);
      *(void *)(a1 + 40) = v10;
      *(void *)(a1 + 48) = v11;
      *(unsigned char *)(a1 + 56) = v12;
      *(void *)(a1 + 64) = v9;
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v13 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 56) = v13;
    }
    uint64_t v14 = a2[9];
    uint64_t v15 = a2[10];
    uint64_t v16 = a2[11];
    uint64_t v17 = a2[12];
    uint64_t v18 = a2[13];
    uint64_t v19 = a2[14];
    uint64_t v21 = a2[15];
    uint64_t v20 = a2[16];
    uint64_t v38 = a2[17];
    uint64_t v39 = a2[18];
    uint64_t v40 = a2[19];
    uint64_t v41 = a2[20];
    uint64_t v42 = a2[21];
    int v43 = *((_DWORD *)a2 + 44);
    char v44 = *((unsigned char *)a2 + 180);
    outlined copy of StateOrBinding<TextFieldState>(v14, v15, v16, v17, v18, v19, v21, v20, v38, v39, v40, v41, v42, v43, v44);
    *(void *)(a1 + 72) = v14;
    *(void *)(a1 + 80) = v15;
    *(void *)(a1 + 88) = v16;
    *(void *)(a1 + 96) = v17;
    *(void *)(a1 + 104) = v18;
    *(void *)(a1 + 112) = v19;
    *(void *)(a1 + 120) = v21;
    *(void *)(a1 + 128) = v20;
    *(void *)(a1 + 136) = v38;
    *(void *)(a1 + 144) = v39;
    *(void *)(a1 + 152) = v40;
    *(void *)(a1 + 160) = v41;
    *(void *)(a1 + 168) = v42;
    *(_DWORD *)(a1 + 176) = v43;
    *(unsigned char *)(a1 + 180) = v44;
    uint64_t v22 = *(int *)(v46 + 56);
    uint64_t v23 = (void *)(a1 + v22);
    uint64_t v24 = (uint64_t *)((char *)a2 + v22);
    type metadata accessor for Binding<TextSelection?>(0);
    uint64_t v26 = v25;
    uint64_t v27 = *(void *)(v25 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v25))
    {
      type metadata accessor for Binding<TextSelection?>?(0);
      memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      uint64_t v29 = v24[1];
      void *v23 = *v24;
      v23[1] = v29;
      uint64_t v30 = *(int *)(v26 + 32);
      uint64_t v47 = (char *)v23 + v30;
      uint64_t v31 = (char *)v24 + v30;
      uint64_t v32 = type metadata accessor for TextSelection(0);
      uint64_t v45 = *(void *)(v32 - 8);
      id v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
      swift_retain();
      swift_retain();
      if (v33(v31, 1, v32))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v47, v31, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        uint64_t v35 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16))(v47, v31, v36);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v47, v31, *(void *)(*(void *)(v35 - 8) + 64));
        }
        v47[*(int *)(v32 + 20)] = v31[*(int *)(v32 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v47, 0, 1, v32);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v23, 0, 1, v26);
    }
  }
  return a1;
}

uint64_t destroy for PlainTextFieldStyle.BodyContent(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 64))
  {
    outlined consume of Text.Storage(*(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
    swift_bridgeObjectRelease();
  }
  outlined consume of StateOrBinding<TextFieldState>(*(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144), *(void *)(a1 + 152), *(void *)(a1 + 160), *(void *)(a1 + 168), *(_DWORD *)(a1 + 176), *(unsigned char *)(a1 + 180));
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v3 = a1 + *(int *)(v2 + 56);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v5 = v4;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4);
  if (!result)
  {
    swift_release();
    swift_release();
    uint64_t v7 = v3 + *(int *)(v5 + 32);
    uint64_t v8 = type metadata accessor for TextSelection(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8);
    if (!result)
    {
      type metadata accessor for TextSelection.Indices(0);
      uint64_t result = swift_getEnumCaseMultiPayload();
      if (result == 1)
      {
        _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
        return v10(v7, v9);
      }
    }
  }
  return result;
}

uint64_t initializeWithCopy for PlainTextFieldStyle.BodyContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v6 = *(void *)(a2 + 64);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 40);
    uint64_t v8 = *(void *)(a2 + 48);
    char v9 = *(unsigned char *)(a2 + 56);
    outlined copy of Text.Storage(v7, v8, v9);
    *(void *)(a1 + 40) = v7;
    *(void *)(a1 + 48) = v8;
    *(unsigned char *)(a1 + 56) = v9;
    *(void *)(a1 + 64) = v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v10;
  }
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  uint64_t v13 = *(void *)(a2 + 88);
  uint64_t v14 = *(void *)(a2 + 96);
  uint64_t v15 = *(void *)(a2 + 104);
  uint64_t v16 = *(void *)(a2 + 112);
  uint64_t v17 = *(void *)(a2 + 120);
  uint64_t v18 = *(void *)(a2 + 128);
  uint64_t v36 = *(void *)(a2 + 136);
  uint64_t v37 = *(void *)(a2 + 144);
  uint64_t v38 = *(void *)(a2 + 152);
  uint64_t v39 = *(void *)(a2 + 160);
  uint64_t v40 = *(void *)(a2 + 168);
  int v41 = *(_DWORD *)(a2 + 176);
  char v43 = *(unsigned char *)(a2 + 180);
  outlined copy of StateOrBinding<TextFieldState>(v11, v12, v13, v14, v15, v16, v17, v18, v36, v37, v38, v39, v40, v41, v43);
  *(void *)(a1 + 72) = v11;
  *(void *)(a1 + 80) = v12;
  *(void *)(a1 + 88) = v13;
  *(void *)(a1 + 96) = v14;
  *(void *)(a1 + 104) = v15;
  *(void *)(a1 + 112) = v16;
  *(void *)(a1 + 120) = v17;
  *(void *)(a1 + 128) = v18;
  *(void *)(a1 + 136) = v36;
  *(void *)(a1 + 144) = v37;
  *(void *)(a1 + 152) = v38;
  *(void *)(a1 + 160) = v39;
  *(void *)(a1 + 168) = v40;
  *(_DWORD *)(a1 + 176) = v41;
  *(unsigned char *)(a1 + 180) = v43;
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v20 = *(int *)(v19 + 56);
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v24 = v23;
  uint64_t v25 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v23))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v21, v22, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    uint64_t v27 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v27;
    uint64_t v28 = *(int *)(v24 + 32);
    char v44 = (char *)v21 + v28;
    uint64_t v29 = (char *)v22 + v28;
    uint64_t v30 = type metadata accessor for TextSelection(0);
    uint64_t v42 = *(void *)(v30 - 8);
    uint64_t v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
    swift_retain();
    swift_retain();
    if (v31(v29, 1, v30))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v44, v29, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      uint64_t v33 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16))(v44, v29, v34);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v44, v29, *(void *)(*(void *)(v33 - 8) + 64));
      }
      v44[*(int *)(v30 + 20)] = v29[*(int *)(v30 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v44, 0, 1, v30);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v21, 0, 1, v24);
  }
  return a1;
}

uint64_t assignWithCopy for PlainTextFieldStyle.BodyContent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v4 = (_OWORD *)(a1 + 40);
  uint64_t v5 = (_OWORD *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 64);
  if (*(void *)(a1 + 64))
  {
    if (v6)
    {
      uint64_t v7 = *(void *)(a2 + 40);
      uint64_t v8 = *(void *)(a2 + 48);
      char v9 = *(unsigned char *)(a2 + 56);
      outlined copy of Text.Storage(v7, v8, v9);
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v11 = *(void *)(a1 + 48);
      char v12 = *(unsigned char *)(a1 + 56);
      *(void *)(a1 + 40) = v7;
      *(void *)(a1 + 48) = v8;
      *(unsigned char *)(a1 + 56) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 40);
      long long v16 = *(_OWORD *)(a2 + 56);
      *uint64_t v4 = *v5;
      *(_OWORD *)(a1 + 56) = v16;
    }
  }
  else if (v6)
  {
    uint64_t v13 = *(void *)(a2 + 40);
    uint64_t v14 = *(void *)(a2 + 48);
    char v15 = *(unsigned char *)(a2 + 56);
    outlined copy of Text.Storage(v13, v14, v15);
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v14;
    *(unsigned char *)(a1 + 56) = v15;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v17 = *(_OWORD *)(a2 + 56);
    *uint64_t v4 = *v5;
    *(_OWORD *)(a1 + 56) = v17;
  }
  uint64_t v18 = *(void *)(a2 + 72);
  uint64_t v19 = *(void *)(a2 + 80);
  uint64_t v20 = *(void *)(a2 + 88);
  uint64_t v21 = *(void *)(a2 + 96);
  uint64_t v22 = *(void *)(a2 + 104);
  uint64_t v23 = *(void *)(a2 + 112);
  uint64_t v24 = *(void *)(a2 + 120);
  uint64_t v25 = *(void *)(a2 + 128);
  uint64_t v73 = *(void *)(a2 + 136);
  uint64_t v74 = *(void *)(a2 + 144);
  uint64_t v75 = *(void *)(a2 + 152);
  uint64_t v76 = *(void *)(a2 + 160);
  uint64_t v77 = *(void *)(a2 + 168);
  int __dsta = *(_DWORD *)(a2 + 176);
  char v80 = *(unsigned char *)(a2 + 180);
  outlined copy of StateOrBinding<TextFieldState>(v18, v19, v20, v21, v22, v23, v24, v25, v73, v74, v75, v76, v77, __dsta, v80);
  uint64_t v26 = *(void *)(a1 + 72);
  uint64_t v27 = *(void *)(a1 + 80);
  uint64_t v28 = *(void *)(a1 + 88);
  uint64_t v29 = *(void *)(a1 + 96);
  uint64_t v30 = *(void *)(a1 + 104);
  uint64_t v31 = *(void *)(a1 + 112);
  uint64_t v32 = *(void *)(a1 + 120);
  uint64_t v33 = *(void *)(a1 + 128);
  long long v34 = *(_OWORD *)(a1 + 136);
  long long v35 = *(_OWORD *)(a1 + 152);
  uint64_t v36 = *(void *)(a1 + 168);
  int v37 = *(_DWORD *)(a1 + 176);
  char v38 = *(unsigned char *)(a1 + 180);
  *(void *)(a1 + 72) = v18;
  *(void *)(a1 + 80) = v19;
  *(void *)(a1 + 88) = v20;
  *(void *)(a1 + 96) = v21;
  *(void *)(a1 + 104) = v22;
  *(void *)(a1 + 112) = v23;
  *(void *)(a1 + 120) = v24;
  *(void *)(a1 + 128) = v25;
  *(void *)(a1 + 136) = v73;
  *(void *)(a1 + 144) = v74;
  *(void *)(a1 + 152) = v75;
  *(void *)(a1 + 160) = v76;
  *(void *)(a1 + 168) = v77;
  *(_DWORD *)(a1 + 176) = __dsta;
  *(unsigned char *)(a1 + 180) = v80;
  outlined consume of StateOrBinding<TextFieldState>(v26, v27, v28, v29, v30, v31, v32, v33, v34, *((uint64_t *)&v34 + 1), v35, *((uint64_t *)&v35 + 1), v36, v37, v38);
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v40 = *(int *)(v39 + 56);
  int v41 = (char *)(a1 + v40);
  uint64_t v42 = (char *)(a2 + v40);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v44 = v43;
  uint64_t v45 = *(void *)(v43 - 8);
  uint64_t v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  LODWORD(v21) = v46(v41, 1, v43);
  int v47 = v46(v42, 1, v44);
  if (v21)
  {
    if (!v47)
    {
      *(void *)int v41 = *(void *)v42;
      *((void *)v41 + 1) = *((void *)v42 + 1);
      uint64_t v48 = *(int *)(v44 + 32);
      __dst = &v41[v48];
      uint64_t v81 = &v42[v48];
      uint64_t v49 = type metadata accessor for TextSelection(0);
      uint64_t v50 = *(void *)(v49 - 8);
      uint64_t v51 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
      swift_retain();
      swift_retain();
      if (v51(v81, 1, v49))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v81, *(void *)(*(void *)(v52 - 8) + 64));
      }
      else
      {
        uint64_t v67 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 16))(__dst, v81, v68);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v81, *(void *)(*(void *)(v67 - 8) + 64));
        }
        __dst[*(int *)(v49 + 20)] = v81[*(int *)(v49 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(__dst, 0, 1, v49);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v41, 0, 1, v44);
      return a1;
    }
    goto LABEL_14;
  }
  if (v47)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v41, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
LABEL_14:
    type metadata accessor for Binding<TextSelection?>?(0);
    size_t v54 = *(void *)(*(void *)(v53 - 8) + 64);
    int v55 = v41;
    char v56 = v42;
LABEL_15:
    memcpy(v55, v56, v54);
    return a1;
  }
  *(void *)int v41 = *(void *)v42;
  swift_retain();
  swift_release();
  *((void *)v41 + 1) = *((void *)v42 + 1);
  swift_retain();
  swift_release();
  uint64_t v57 = *(int *)(v44 + 32);
  uint64_t v58 = &v41[v57];
  uint64_t v59 = &v42[v57];
  uint64_t v60 = type metadata accessor for TextSelection(0);
  uint64_t v61 = *(void *)(v60 - 8);
  uint64_t v62 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v61 + 48);
  int v63 = v62(v58, 1, v60);
  int v64 = v62(v59, 1, v60);
  if (v63)
  {
    if (!v64)
    {
      uint64_t v65 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 16))(v58, v59, v66);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v58, v59, *(void *)(*(void *)(v65 - 8) + 64));
      }
      v58[*(int *)(v60 + 20)] = v59[*(int *)(v60 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
      return a1;
    }
    goto LABEL_24;
  }
  if (v64)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v58, type metadata accessor for TextSelection);
LABEL_24:
    type metadata accessor for TextSelection?(0);
    size_t v54 = *(void *)(*(void *)(v69 - 8) + 64);
    int v55 = v58;
    char v56 = v59;
    goto LABEL_15;
  }
  if (a1 != a2)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v58, type metadata accessor for TextSelection.Indices);
    uint64_t v71 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 16))(v58, v59, v72);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v58, v59, *(void *)(*(void *)(v71 - 8) + 64));
    }
  }
  v58[*(int *)(v60 + 20)] = v59[*(int *)(v60 + 20)];
  return a1;
}

uint64_t initializeWithTake for PlainTextFieldStyle.BodyContent(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 165) = *(_OWORD *)(a2 + 165);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v6 = *(int *)(v5 + 56);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v9))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = v8[1];
    *uint64_t v7 = *v8;
    v7[1] = v13;
    uint64_t v14 = *(int *)(v10 + 32);
    char v15 = (char *)v7 + v14;
    long long v16 = (char *)v8 + v14;
    uint64_t v17 = type metadata accessor for TextSelection(0);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v20 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v15, v16, v21);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
      }
      v15[*(int *)(v17 + 20)] = v16[*(int *)(v17 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
  }
  return a1;
}

uint64_t assignWithTake for PlainTextFieldStyle.BodyContent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  if (*(void *)(a1 + 64))
  {
    uint64_t v5 = *(void *)(a2 + 64);
    if (v5)
    {
      char v6 = *(unsigned char *)(a2 + 56);
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v8 = *(void *)(a1 + 48);
      char v9 = *(unsigned char *)(a1 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(unsigned char *)(a1 + 56) = v6;
      outlined consume of Text.Storage(v7, v8, v9);
      *(void *)(a1 + 64) = v5;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 40);
  }
  long long v10 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v10;
LABEL_6:
  uint64_t v11 = *(void *)(a2 + 168);
  int v12 = *(_DWORD *)(a2 + 176);
  char v13 = *(unsigned char *)(a2 + 180);
  uint64_t v14 = *(void *)(a1 + 72);
  uint64_t v15 = *(void *)(a1 + 80);
  uint64_t v16 = *(void *)(a1 + 88);
  uint64_t v17 = *(void *)(a1 + 96);
  uint64_t v18 = *(void *)(a1 + 104);
  uint64_t v19 = *(void *)(a1 + 112);
  uint64_t v20 = *(void *)(a1 + 120);
  uint64_t v21 = *(void *)(a1 + 128);
  long long v22 = *(_OWORD *)(a1 + 136);
  long long v23 = *(_OWORD *)(a1 + 152);
  uint64_t v24 = *(void *)(a1 + 168);
  int v25 = *(_DWORD *)(a1 + 176);
  char v26 = *(unsigned char *)(a1 + 180);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = v11;
  *(_DWORD *)(a1 + 176) = v12;
  *(unsigned char *)(a1 + 180) = v13;
  outlined consume of StateOrBinding<TextFieldState>(v14, v15, v16, v17, v18, v19, v20, v21, v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, v25, v26);
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v28 = *(int *)(v27 + 56);
  uint64_t v29 = (char *)(a1 + v28);
  uint64_t v30 = (char *)(a2 + v28);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v32 = v31;
  uint64_t v33 = *(void *)(v31 - 8);
  long long v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
  int v35 = v34(v29, 1, v31);
  int v36 = v34(v30, 1, v32);
  if (v35)
  {
    if (!v36)
    {
      uint64_t v37 = *((void *)v30 + 1);
      *(void *)uint64_t v29 = *(void *)v30;
      *((void *)v29 + 1) = v37;
      uint64_t v38 = *(int *)(v32 + 32);
      uint64_t v39 = &v29[v38];
      uint64_t v40 = &v30[v38];
      uint64_t v41 = type metadata accessor for TextSelection(0);
      uint64_t v42 = *(void *)(v41 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
      }
      else
      {
        uint64_t v58 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 32))(v39, v40, v59);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v39, v40, *(void *)(*(void *)(v58 - 8) + 64));
        }
        v39[*(int *)(v41 + 20)] = v40[*(int *)(v41 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v29, 0, 1, v32);
      return a1;
    }
    goto LABEL_12;
  }
  if (v36)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
LABEL_12:
    type metadata accessor for Binding<TextSelection?>?(0);
    size_t v45 = *(void *)(*(void *)(v44 - 8) + 64);
    uint64_t v46 = v29;
    int v47 = v30;
LABEL_13:
    memcpy(v46, v47, v45);
    return a1;
  }
  *(void *)uint64_t v29 = *(void *)v30;
  swift_release();
  *((void *)v29 + 1) = *((void *)v30 + 1);
  swift_release();
  uint64_t v48 = *(int *)(v32 + 32);
  uint64_t v49 = &v29[v48];
  uint64_t v50 = &v30[v48];
  uint64_t v51 = type metadata accessor for TextSelection(0);
  uint64_t v52 = *(void *)(v51 - 8);
  uint64_t v53 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 48);
  int v54 = v53(v49, 1, v51);
  int v55 = v53(v50, 1, v51);
  if (v54)
  {
    if (!v55)
    {
      uint64_t v56 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 32))(v49, v50, v57);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v49, v50, *(void *)(*(void *)(v56 - 8) + 64));
      }
      v49[*(int *)(v51 + 20)] = v50[*(int *)(v51 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
      return a1;
    }
    goto LABEL_22;
  }
  if (v55)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v49, type metadata accessor for TextSelection);
LABEL_22:
    type metadata accessor for TextSelection?(0);
    size_t v45 = *(void *)(*(void *)(v60 - 8) + 64);
    uint64_t v46 = v49;
    int v47 = v50;
    goto LABEL_13;
  }
  if (a1 != a2)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v49, type metadata accessor for TextSelection.Indices);
    uint64_t v62 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 32))(v49, v50, v63);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v49, v50, *(void *)(*(void *)(v62 - 8) + 64));
    }
  }
  v49[*(int *)(v51 + 20)] = v50[*(int *)(v51 + 20)];
  return a1;
}

uint64_t getEnumTagSinglePayload for RoundedBorderTextFieldStyle.BodyContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187B7D844);
}

uint64_t __swift_get_extra_inhabitant_indexTm_2(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for RoundedBorderTextFieldStyle.BodyContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187B7D8F4);
}

uint64_t __swift_store_extra_inhabitant_indexTm_2(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for RoundedBorderTextFieldStyle.BodyContent(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, type metadata singleton initialization cache for RoundedBorderTextFieldStyle.BodyContent);
}

void type metadata completion function for PlainTextFieldStyle.BodyContent()
{
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t associated type witness table accessor for View.Body : View in PlainTextFieldStyle.BodyContent()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in RoundedBorderTextFieldStyle.BodyContent()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for SystemTextField(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, type metadata singleton initialization cache for SystemTextField);
}

void type metadata accessor for ModifiedContent<SystemTextField, _AlignmentLayout>(uint64_t a1)
{
}

uint64_t type metadata accessor for SystemTextFieldConfiguration(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for SystemTextFieldConfiguration);
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for ModifiedContent<SystemTextField, _AlignmentLayout>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<SystemTextField, _AlignmentLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<SystemTextField, _AlignmentLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<SystemTextField, _AlignmentLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<SystemTextField, _AlignmentLayout>(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<SystemTextField, _AlignmentLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t specialized UIKitTextInput.setDefaultAttributes(resolved:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  Text.ResolvedProperties.init()();
  *(void *)&long long v25 = a2;
  *((void *)&v25 + 1) = a3;
  v24[0] = 0;
  uint64_t v7 = Text.Resolved.nsAttributes(content:in:with:properties:)();
  if (!*(void *)(v7 + 16))
  {
    long long v25 = 0u;
    long long v26 = 0u;
    goto LABEL_8;
  }
  uint64_t v8 = (void *)*MEMORY[0x1E4FB0738];
  swift_bridgeObjectRetain();
  id v9 = v8;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9);
  if ((v11 & 1) == 0)
  {
    long long v25 = 0u;
    long long v26 = 0u;

    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  outlined init with copy of Any(*(void *)(v7 + 56) + 32 * v10, (uint64_t)&v25);

  swift_bridgeObjectRelease();
  if (!*((void *)&v26 + 1))
  {
LABEL_8:
    _sypSgWOhTm_7((uint64_t)&v25, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
    goto LABEL_9;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSParagraphStyle);
  if (swift_dynamicCast())
  {
    id v12 = v24[0];
    objc_msgSend(v24[0], sel_mutableCopy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    uint64_t v13 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSMutableParagraphStyle);
    swift_dynamicCast();
    id v14 = v24[0];
    objc_msgSend(v24[0], sel_setLineBreakMode_, 0);
    objc_msgSend(v24[0], sel_setLineBreakStrategy_, 2);
    *((void *)&v26 + 1) = v13;
    *(id *)&long long v25 = v24[0];
    outlined init with take of Any(&v25, v24);
    id v15 = v9;
    id v16 = v14;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v24, v15, isUniquelyReferenced_nonNull_native);

    swift_bridgeObjectRelease();
  }
LABEL_9:
  uint64_t v18 = OBJC_IVAR____TtC7SwiftUI16VerticalTextView_uiDefaultTextAttributes;
  uint64_t v19 = *(void *)(v4 + OBJC_IVAR____TtC7SwiftUI16VerticalTextView_uiDefaultTextAttributes);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  specialized static Dictionary.Keys.== infix(_:_:)(v19, v7);
  char v21 = v20;
  swift_bridgeObjectRelease();
  if (v21)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v22 = specialized Sequence.allSatisfy(_:)(v19, v19, v7);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if (v22)
    {
      swift_bridgeObjectRelease();
      long long v31 = v40;
      long long v32 = v41;
      uint64_t v33 = v42;
      long long v27 = v36;
      long long v28 = v37;
      long long v29 = v38;
      long long v30 = v39;
      long long v25 = v34;
      long long v26 = v35;
      outlined release of Text.ResolvedProperties(&v25);
      return 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  *(void *)(v4 + v18) = v7;
  swift_bridgeObjectRelease();
  VerticalTextView.uiDefaultTextAttributes.didset();
  long long v31 = v40;
  long long v32 = v41;
  uint64_t v33 = v42;
  long long v27 = v36;
  long long v28 = v37;
  long long v29 = v38;
  long long v30 = v39;
  long long v25 = v34;
  long long v26 = v35;
  outlined release of Text.ResolvedProperties(&v25);
  return 1;
}

uint64_t UIKitTextInput.setDefaultAttributes(resolved:in:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  Text.ResolvedProperties.init()();
  *(void *)&long long v27 = v6;
  *((void *)&v27 + 1) = v7;
  v26[0] = 0;
  uint64_t v8 = Text.Resolved.nsAttributes(content:in:with:properties:)();
  id v9 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 8);
  swift_bridgeObjectRetain();
  if ((v9(a3, a4) & 1) == 0) {
    goto LABEL_2;
  }
  if (!*(void *)(v8 + 16))
  {
    long long v27 = 0u;
    long long v28 = 0u;
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  id v10 = (id)*MEMORY[0x1E4FB0738];
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
  if ((v12 & 1) == 0)
  {
    long long v27 = 0u;
    long long v28 = 0u;

    goto LABEL_10;
  }
  outlined init with copy of Any(*(void *)(v8 + 56) + 32 * v11, (uint64_t)&v27);

  swift_bridgeObjectRelease();
  if (!*((void *)&v28 + 1))
  {
LABEL_11:
    _sypSgWOhTm_7((uint64_t)&v27, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
    goto LABEL_12;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSParagraphStyle);
  if (swift_dynamicCast())
  {
    id v13 = v26[0];
    objc_msgSend(v26[0], sel_mutableCopy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    uint64_t v14 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSMutableParagraphStyle);
    swift_dynamicCast();
    id v15 = v26[0];
    objc_msgSend(v26[0], sel_setLineBreakMode_, 0);
    objc_msgSend(v26[0], sel_setLineBreakStrategy_, 2);
    *((void *)&v28 + 1) = v14;
    *(id *)&long long v27 = v26[0];
    outlined init with take of Any(&v27, v26);
    id v16 = v10;
    id v17 = v15;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v26, v16, isUniquelyReferenced_nonNull_native);

LABEL_2:
    swift_bridgeObjectRelease();
  }
LABEL_12:
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 72))(a3, a4);
  swift_bridgeObjectRetain();
  uint64_t v20 = swift_bridgeObjectRetain();
  specialized static Dictionary.Keys.== infix(_:_:)(v20, v8);
  char v22 = v21;
  swift_bridgeObjectRelease();
  if (v22)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = swift_bridgeObjectRetain();
    char v24 = specialized Sequence.allSatisfy(_:)(v23, v19, v8);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if (v24)
    {
      swift_bridgeObjectRelease();
      long long v33 = v42;
      long long v34 = v43;
      uint64_t v35 = v44;
      long long v29 = v38;
      long long v30 = v39;
      long long v31 = v40;
      long long v32 = v41;
      long long v27 = v36;
      long long v28 = v37;
      outlined release of Text.ResolvedProperties(&v27);
      return 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 80))(v8, a3, a4);
  long long v33 = v42;
  long long v34 = v43;
  uint64_t v35 = v44;
  long long v29 = v38;
  long long v30 = v39;
  long long v31 = v40;
  long long v32 = v41;
  long long v27 = v36;
  long long v28 = v37;
  outlined release of Text.ResolvedProperties(&v27);
  return 1;
}

void UIKitTextInput.setPlaceholderText(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3) & 1) == 0
    || (uint64_t)objc_msgSend(a1, sel_length) < 1)
  {
    goto LABEL_7;
  }
  if (objc_msgSend(a1, sel_attribute_atIndex_effectiveRange_, *MEMORY[0x1E4FB0700], 0, 0))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    _sypSgWOhTm_7((uint64_t)&v11, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
LABEL_7:
    id v6 = a1;
    goto LABEL_8;
  }
  long long v11 = 0u;
  long long v12 = 0u;
  _sypSgWOhTm_7((uint64_t)&v11, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
  objc_msgSend(a1, sel_mutableCopy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_7;
  }
  id v6 = v10;
  id v7 = objc_msgSend(self, sel_placeholderTextColor);
  *((void *)&v12 + 1) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  *(void *)&long long v11 = v7;
  NSMutableAttributedString.addUniformAttribute(_:value:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
LABEL_8:
  uint64_t v8 = *(void (**)(id, uint64_t, uint64_t))(a3 + 56);
  id v9 = v6;
  v8(v6, a2, a3);
}

uint64_t UIKitTextInput.setSelection(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for TextSelection?(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TextSelection(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  long long v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>(a1, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for TextSelection?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
  {
    outlined init with take of WeakBox<VerticalTextView>((uint64_t)v8, (uint64_t)v12, type metadata accessor for TextSelection);
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 192))(a2, a3);
    unint64_t v17 = v16;
    char v19 = v18;
    uint64_t v20 = TextSelection.range.getter();
    if (v19)
    {
      if (v22)
      {
LABEL_10:
        id v13 = type metadata accessor for TextSelection;
        uint64_t v14 = (uint64_t)v12;
        return _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1(v14, v13);
      }
    }
    else if ((v22 & 1) == 0 && !((v20 ^ (unint64_t)v15) >> 14) && (v21 ^ v17) < 0x4000)
    {
      goto LABEL_10;
    }
    uint64_t v23 = TextSelection.range.getter();
    (*(void (**)(uint64_t))(a3 + 200))(v23);
    goto LABEL_10;
  }
  id v13 = (uint64_t (*)(void))type metadata accessor for TextSelection?;
  uint64_t v14 = (uint64_t)v8;
  return _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1(v14, v13);
}

unsigned char *UIKitTextInput.setAffinity(_:)(unsigned char *result, uint64_t a2, uint64_t a3)
{
  if (*result)
  {
    BOOL v3 = *result != 1;
    unint64_t result = (unsigned char *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 216))(a2, a3);
    if ((unsigned char *)v3 != result)
    {
      uint64_t v6 = *(uint64_t (**)(BOOL, uint64_t, uint64_t))(a3 + 224);
      return (unsigned char *)v6(v3, a2, a3);
    }
  }
  return result;
}

void specialized static Dictionary.Keys.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (a1 == a2 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return;
  }
  uint64_t v4 = a1 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(63 - v6) >> 6;
  swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (1)
  {
    int64_t v15 = v9;
    if (v7)
    {
      unint64_t v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      if (!*(void *)(a2 + 16)) {
        goto LABEL_30;
      }
      goto LABEL_7;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v16 >= v8) {
      goto LABEL_30;
    }
    unint64_t v17 = *(void *)(v4 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v15 + 2;
      if (v15 + 2 >= v8) {
        goto LABEL_30;
      }
      unint64_t v17 = *(void *)(v4 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v15 + 3;
        if (v15 + 3 >= v8) {
          goto LABEL_30;
        }
        unint64_t v17 = *(void *)(v4 + 8 * v9);
        if (!v17)
        {
          int64_t v9 = v15 + 4;
          if (v15 + 4 >= v8) {
            goto LABEL_30;
          }
          unint64_t v17 = *(void *)(v4 + 8 * v9);
          if (!v17)
          {
            int64_t v9 = v15 + 5;
            if (v15 + 5 >= v8) {
              goto LABEL_30;
            }
            unint64_t v17 = *(void *)(v4 + 8 * v9);
            if (!v17) {
              break;
            }
          }
        }
      }
    }
LABEL_26:
    unint64_t v7 = (v17 - 1) & v17;
    unint64_t v11 = __clz(__rbit64(v17)) + (v9 << 6);
    if (!*(void *)(a2 + 16))
    {
LABEL_30:
      outlined consume of Set<UIPress>.Iterator._Variant();
      return;
    }
LABEL_7:
    id v12 = *(id *)(*(void *)(a1 + 48) + 8 * v11);
    specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v12);
    char v14 = v13;

    if ((v14 & 1) == 0) {
      goto LABEL_30;
    }
  }
  int64_t v18 = v15 + 6;
  if (v15 + 6 >= v8) {
    goto LABEL_30;
  }
  unint64_t v17 = *(void *)(v4 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v15 + 6;
    goto LABEL_26;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v8) {
      goto LABEL_30;
    }
    unint64_t v17 = *(void *)(v4 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_26;
    }
  }
LABEL_32:
  __break(1u);
}

void PlatformTextFieldCoordinator.configure(field:)(uint64_t a1)
{
  outlined init with copy of PlatformTextFieldCoordinator.FieldStorage(a1, (uint64_t)v10);
  uint64_t v3 = v1 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_field;
  swift_beginAccess();
  outlined assign with take of PlatformTextFieldCoordinator.FieldStorage?((uint64_t)v10, v3);
  swift_endAccess();
  outlined init with copy of PlatformTextFieldCoordinator.FieldStorage(a1, (uint64_t)v9);
  if (v9[8])
  {
    outlined init with take of WeakBox<VerticalTextView>((uint64_t)v9, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for WeakBox<VerticalTextView>);
    uint64_t v4 = (char *)MEMORY[0x18C119DF0](v10);
    if (v4)
    {
      uint64_t v5 = v4;
      objc_msgSend(v4, sel_setDelegate_, v1);
      _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for WeakBox<VerticalTextView>);
      *(void *)&v5[OBJC_IVAR____TtC7SwiftUI16VerticalTextView_uiDelegate + 8] = &protocol witness table for PlatformTextFieldCoordinator;
      swift_unknownObjectWeakAssign();

      return;
    }
    int64_t v8 = (uint64_t (*)(void))type metadata accessor for WeakBox<VerticalTextView>;
  }
  else
  {
    outlined init with take of WeakBox<VerticalTextView>((uint64_t)v9, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for WeakBox<UITextField>);
    uint64_t v6 = (void *)MEMORY[0x18C119DF0](v10);
    if (v6)
    {
      unint64_t v7 = v6;
      objc_msgSend(v6, sel_setDelegate_, v1);
      objc_msgSend(v7, sel_addTarget_action_forControlEvents_, v1, sel_textChanged_, 0x20000);
      objc_msgSend(v7, sel_addTarget_action_forControlEvents_, v1, sel_primaryActionTriggered_, 0x2000);
    }
    int64_t v8 = (uint64_t (*)(void))type metadata accessor for WeakBox<UITextField>;
  }
  _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v10, v8);
}

uint64_t protocol witness for UIKitTextInput.uiDefaultTextAttributes.getter in conformance VerticalTextView()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for UIKitTextInput.uiDefaultTextAttributes.setter in conformance VerticalTextView(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI16VerticalTextView_uiDefaultTextAttributes) = a1;
  swift_bridgeObjectRelease();

  return VerticalTextView.uiDefaultTextAttributes.didset();
}

uint64_t sub_187B7EC00()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in VerticalTextView.uiDefaultTextAttributes.didset(void *a1)
{
}

uint64_t sub_187B7EC40()
{
  return swift_deallocObject();
}

void specialized Sequence.first(where:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIPress);
    _sSo7UIColorCAB7SwiftUI13ColorProviderACWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UIPress and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for UIPress);
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v23;
    uint64_t v22 = v24;
    uint64_t v6 = v25;
    int64_t v7 = v26;
    unint64_t v8 = v27;
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v22 = a1 + 56;
    uint64_t v10 = ~v9;
    uint64_t v11 = -v9;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v8 = v12 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v6 = v10;
    int64_t v7 = 0;
  }
  int64_t v21 = (unint64_t)(v6 + 64) >> 6;
  if ((v5 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (!__CocoaSet.Iterator.next()()) {
    goto LABEL_36;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIPress);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  id v13 = v28;
  swift_unknownObjectRelease();
  int64_t v14 = v7;
  uint64_t v15 = v8;
  if (!v13) {
    goto LABEL_36;
  }
  while (1)
  {
    id v28 = v13;
    char v19 = closure #1 in VerticalTextView.isSubmission(_:)(&v28, a2);
    if (v3)
    {

      goto LABEL_36;
    }
    if (v19) {
      goto LABEL_36;
    }

    int64_t v7 = v14;
    unint64_t v8 = v15;
    if (v5 < 0) {
      goto LABEL_8;
    }
LABEL_11:
    if (!v8) {
      break;
    }
    uint64_t v15 = (v8 - 1) & v8;
    unint64_t v16 = __clz(__rbit64(v8)) | (v7 << 6);
    int64_t v14 = v7;
LABEL_24:
    id v13 = *(id *)(*(void *)(v5 + 48) + 8 * v16);
    if (!v13) {
      goto LABEL_36;
    }
  }
  int64_t v14 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    return;
  }
  if (v14 >= v21) {
    goto LABEL_36;
  }
  unint64_t v17 = *(void *)(v22 + 8 * v14);
  if (v17)
  {
LABEL_23:
    uint64_t v15 = (v17 - 1) & v17;
    unint64_t v16 = __clz(__rbit64(v17)) + (v14 << 6);
    goto LABEL_24;
  }
  int64_t v18 = v7 + 2;
  if (v7 + 2 >= v21) {
    goto LABEL_36;
  }
  unint64_t v17 = *(void *)(v22 + 8 * v18);
  if (v17) {
    goto LABEL_22;
  }
  int64_t v18 = v7 + 3;
  if (v7 + 3 >= v21) {
    goto LABEL_36;
  }
  unint64_t v17 = *(void *)(v22 + 8 * v18);
  if (v17) {
    goto LABEL_22;
  }
  int64_t v18 = v7 + 4;
  if (v7 + 4 >= v21) {
    goto LABEL_36;
  }
  unint64_t v17 = *(void *)(v22 + 8 * v18);
  if (v17)
  {
LABEL_22:
    int64_t v14 = v18;
    goto LABEL_23;
  }
  int64_t v14 = v7 + 5;
  if (v7 + 5 >= v21) {
    goto LABEL_36;
  }
  unint64_t v17 = *(void *)(v22 + 8 * v14);
  if (v17) {
    goto LABEL_23;
  }
  int64_t v20 = v7 + 6;
  while (v21 != v20)
  {
    unint64_t v17 = *(void *)(v22 + 8 * v20++);
    if (v17)
    {
      int64_t v14 = v20 - 1;
      goto LABEL_23;
    }
  }
LABEL_36:
  outlined consume of Set<UIPress>.Iterator._Variant();
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(255, a2, a3, a4, MEMORY[0x1E4F40930]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for TextInputValidation?(uint64_t a1)
{
}

unint64_t type metadata accessor for TextInputValidation()
{
  unint64_t result = lazy cache variable for type metadata for TextInputValidation;
  if (!lazy cache variable for type metadata for TextInputValidation)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TextInputValidation);
  }
  return result;
}

uint64_t specialized Sequence.allSatisfy(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v26 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v8 = 0;
  uint64_t v9 = MEMORY[0x1E4FBC840] + 8;
  while (1)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_26;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v13 >= v27) {
      goto LABEL_38;
    }
    unint64_t v14 = *(void *)(v26 + 8 * v13);
    ++v8;
    if (!v14)
    {
      int64_t v8 = v13 + 1;
      if (v13 + 1 >= v27) {
        goto LABEL_38;
      }
      unint64_t v14 = *(void *)(v26 + 8 * v8);
      if (!v14)
      {
        int64_t v8 = v13 + 2;
        if (v13 + 2 >= v27) {
          goto LABEL_38;
        }
        unint64_t v14 = *(void *)(v26 + 8 * v8);
        if (!v14)
        {
          int64_t v8 = v13 + 3;
          if (v13 + 3 >= v27) {
            goto LABEL_38;
          }
          unint64_t v14 = *(void *)(v26 + 8 * v8);
          if (!v14)
          {
            int64_t v8 = v13 + 4;
            if (v13 + 4 >= v27) {
              goto LABEL_38;
            }
            unint64_t v14 = *(void *)(v26 + 8 * v8);
            if (!v14) {
              break;
            }
          }
        }
      }
    }
LABEL_25:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v8 << 6);
LABEL_26:
    unint64_t v16 = *(void **)(*(void *)(a1 + 48) + 8 * v12);
    if (*(void *)(a2 + 16))
    {
      id v17 = v16;
      unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v17);
      if (v19)
      {
        outlined init with copy of Any(*(void *)(a2 + 56) + 32 * v18, (uint64_t)&v31);
      }
      else
      {
        long long v31 = 0u;
        long long v32 = 0u;
      }

      if (*(void *)(a3 + 16))
      {
LABEL_33:
        id v21 = v16;
        unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v21);
        if (v23)
        {
          outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v22, (uint64_t)&v29);
        }
        else
        {
          long long v29 = 0u;
          long long v30 = 0u;
        }

        goto LABEL_5;
      }
    }
    else
    {
      long long v31 = 0u;
      long long v32 = 0u;
      id v20 = v16;
      if (*(void *)(a3 + 16)) {
        goto LABEL_33;
      }
    }
    long long v29 = 0u;
    long long v30 = 0u;
LABEL_5:
    _s7SwiftUI7BindingVyAA14TextFieldStateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v9, MEMORY[0x1E4FBB718]);
    char v10 = AGCompareValues();
    _sypSgWOhTm_7((uint64_t)&v29, (unint64_t *)&lazy cache variable for type metadata for Any?, v9);
    _sypSgWOhTm_7((uint64_t)&v31, (unint64_t *)&lazy cache variable for type metadata for Any?, v9);

    if ((v10 & 1) == 0)
    {
      uint64_t v24 = 0;
      goto LABEL_39;
    }
  }
  int64_t v15 = v13 + 5;
  if (v15 < v27)
  {
    unint64_t v14 = *(void *)(v26 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        int64_t v8 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          break;
        }
        if (v8 >= v27) {
          goto LABEL_38;
        }
        unint64_t v14 = *(void *)(v26 + 8 * v8);
        ++v15;
        if (v14) {
          goto LABEL_25;
        }
      }
LABEL_41:
      __break(1u);
    }
    int64_t v8 = v15;
    goto LABEL_25;
  }
LABEL_38:
  uint64_t v24 = 1;
LABEL_39:
  swift_release();
  return v24;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);

  uint64_t v3 = a3;
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(a3 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v7 = 0;
    unint64_t v16 = v3;
    id v17 = v4;
    while (v6)
    {
      unint64_t v18 = v5;
      uint64_t v9 = *(void *)(v4 + v7 + 48);
      int64_t v8 = *(void *)(v4 + v7 + 56);
      char v10 = v3 + v7;
      unint64_t v11 = *(void *)(v3 + v7 + 32);
      unint64_t v12 = *(void *)(v10 + 48);
      int64_t v13 = *(void *)(v10 + 56);
      char v19 = *(uint64_t (**)(uint64_t))(**(void **)(v4 + v7 + 32) + 112);
      swift_retain();
      swift_retain();
      outlined copy of Text.LineStyle?(v9, v8);
      swift_retain();
      swift_retain();
      swift_retain();
      outlined copy of Text.LineStyle?(v12, v13);
      swift_retain();
      LOBYTE(v19) = v19(v11);
      swift_release();
      swift_release();
      outlined consume of Text.LineStyle?(v9, v8);
      swift_release();
      swift_release();
      swift_release();
      outlined consume of Text.LineStyle?(v12, v13);
      swift_release();
      if ((v19 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v14 = 0;
        goto LABEL_10;
      }
      v7 += 56;
      --v6;
      uint64_t v4 = v17;
      --v5;
      uint64_t v3 = v16;
      if (v18 == 1) {
        break;
      }
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v14 = 1;
LABEL_10:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t specialized VerticalTextField.updateVerticalSize(_:in:text:measureText:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6)
{
  LOBYTE(v24) = a3 & 1;
  LOBYTE(v26) = a5 & 1;
  *(double *)&uint64_t result = COERCE_DOUBLE(_ProposedSize.width.getter());
  if ((v10 & 1) == 0)
  {
    if (a6)
    {
      objc_msgSend(v6, sel_sizeThatFits_, *(double *)&result, 1.79769313e308, a2, v24, a4, v26);
      double v12 = v11;
      objc_msgSend(v6, sel_contentSize);
      if (v13 <= 1.79769313e308) {
        double v14 = v13;
      }
      else {
        double v14 = 1.79769313e308;
      }
      if (v12 > v14) {
        double v15 = v12;
      }
      else {
        double v15 = v14;
      }
      *(double *)&uint64_t result = COERCE_DOUBLE(_ProposedSize.height.getter());
      double v17 = *(double *)&result;
      if (v15 <= *(double *)&result || (v16 & 1) != 0) {
        double v17 = v15;
      }
      *(double *)(a1 + 8) = v17;
    }
    char v19 = (double *)&v6[OBJC_IVAR____TtC7SwiftUI16VerticalTextView_upperLimit];
    if ((v6[OBJC_IVAR____TtC7SwiftUI16VerticalTextView_upperLimit + 8] & 1) == 0)
    {
      double v20 = *v19;
      if (*v19 >= *(double *)(a1 + 8)) {
        double v20 = *(double *)(a1 + 8);
      }
      *(double *)(a1 + 8) = v20;
    }
    id v21 = (double *)&v6[OBJC_IVAR____TtC7SwiftUI16VerticalTextView_lowerLimit];
    if ((v6[OBJC_IVAR____TtC7SwiftUI16VerticalTextView_lowerLimit + 8] & 1) == 0)
    {
      double v22 = *v21;
      if (*(double *)(a1 + 8) > *v21) {
        double v22 = *(double *)(a1 + 8);
      }
      *(double *)(a1 + 8) = v22;
    }
  }
  return result;
}

uint64_t specialized PlatformTextFieldCoordinator.textFieldDidBeginEditing(_:)(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment);
  if (v2 == 1) {
    goto LABEL_7;
  }
  if (*(void *)(v1 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment + 8))
  {
    _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey, MEMORY[0x1E4F40930]);
    outlined copy of EnvironmentValues?(v2);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey);
    swift_retain();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release();
  }
  else
  {
    _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey, MEMORY[0x1E4F40930]);
    outlined copy of EnvironmentValues?(v2);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey);
    swift_retain();
    PropertyList.subscript.getter();
  }
  swift_release();
  uint64_t Strong = swift_weakLoadStrong();
  _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WeakBox<FocusBridge>);
  uint64_t result = outlined consume of EnvironmentValues?(v2);
  if (!Strong || (char v4 = *(unsigned char *)(Strong + 177), result = swift_release(), (v4 & 1) == 0))
  {
LABEL_7:
    MEMORY[0x1F4188790](result);
    MEMORY[0x1F4188790](v5);
    return static Update.dispatchImmediately<A>(_:)();
  }
  return result;
}

void specialized PlatformTextFieldCoordinator.textFieldDidEndEditing(_:reason:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment);
  if (v3 == 1) {
    goto LABEL_7;
  }
  if (*(void *)(v1 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment + 8))
  {
    _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey, MEMORY[0x1E4F40930]);
    outlined copy of EnvironmentValues?(v3);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey);
    swift_retain();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release();
  }
  else
  {
    _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey, MEMORY[0x1E4F40930]);
    outlined copy of EnvironmentValues?(v3);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey);
    swift_retain();
    PropertyList.subscript.getter();
  }
  swift_release();
  uint64_t Strong = swift_weakLoadStrong();
  _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for WeakBox<FocusBridge>);
  a1 = outlined consume of EnvironmentValues?(v3);
  if (!Strong || (char v5 = *(unsigned char *)(Strong + 177), a1 = swift_release(), (v5 & 1) == 0))
  {
LABEL_7:
    *(unsigned char *)(v2 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isUserEditing) = 0;
    MEMORY[0x1F4188790](a1);
    MEMORY[0x1F4188790](v6);
    static Update.dispatchImmediately<A>(_:)();
    PlatformTextFieldCoordinator.updateToDisplayTextIfNeeded()();
  }
}

uint64_t specialized UIKitTextInput.shouldChangeText(in:text:replacement:validator:)(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>(a7, (uint64_t)&v18, (uint64_t (*)(void))type metadata accessor for TextInputValidation?);
  if (v19)
  {
    outlined init with take of OptionalBinaryInteger(&v18, (uint64_t)v20);
    double v11 = (uint64_t (*)(uint64_t))*__swift_project_boxed_opaque_existential_1(v20, v20[3]);
    unint64_t v12 = Range<>.init(_:in:)();
    if (v14)
    {
      char v16 = 1;
    }
    else
    {
      uint64_t v15 = specialized StringProtocol.replacingCharacters<A, B>(in:with:)(v12, v13, a5, a6, a3, a4);
      char v16 = v11(v15);
      swift_bridgeObjectRelease();
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)&v18, (uint64_t (*)(void))type metadata accessor for TextInputValidation?);
    char v16 = 1;
  }
  return v16 & 1;
}

uint64_t specialized PlatformTextFieldCoordinator.textViewDidBeginEditing(_:)(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment);
  if (v2 == 1) {
    goto LABEL_7;
  }
  if (*(void *)(v1 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment + 8))
  {
    _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey, MEMORY[0x1E4F40930]);
    outlined copy of EnvironmentValues?(v2);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey);
    swift_retain();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release();
  }
  else
  {
    _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey, MEMORY[0x1E4F40930]);
    outlined copy of EnvironmentValues?(v2);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey);
    swift_retain();
    PropertyList.subscript.getter();
  }
  swift_release();
  uint64_t Strong = swift_weakLoadStrong();
  _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WeakBox<FocusBridge>);
  uint64_t result = outlined consume of EnvironmentValues?(v2);
  if (!Strong || (char v4 = *(unsigned char *)(Strong + 177), result = swift_release(), (v4 & 1) == 0))
  {
LABEL_7:
    MEMORY[0x1F4188790](result);
    MEMORY[0x1F4188790](v5);
    return static Update.dispatchImmediately<A>(_:)();
  }
  return result;
}

void specialized PlatformTextFieldCoordinator.textViewDidEndEditing(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment);
  if (v3 == 1) {
    goto LABEL_7;
  }
  if (*(void *)(v1 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment + 8))
  {
    _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey, MEMORY[0x1E4F40930]);
    outlined copy of EnvironmentValues?(v3);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey);
    swift_retain();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release();
  }
  else
  {
    _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey, MEMORY[0x1E4F40930]);
    outlined copy of EnvironmentValues?(v3);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey);
    swift_retain();
    PropertyList.subscript.getter();
  }
  swift_release();
  uint64_t Strong = swift_weakLoadStrong();
  _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for WeakBox<FocusBridge>);
  a1 = outlined consume of EnvironmentValues?(v3);
  if (!Strong || (char v5 = *(unsigned char *)(Strong + 177), a1 = swift_release(), (v5 & 1) == 0))
  {
LABEL_7:
    *(unsigned char *)(v2 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isUserEditing) = 0;
    MEMORY[0x1F4188790](a1);
    MEMORY[0x1F4188790](v6);
    static Update.dispatchImmediately<A>(_:)();
    PlatformTextFieldCoordinator.updateToDisplayTextIfNeeded()();
  }
}

uint64_t partial apply for closure #1 in PlatformTextFieldCoordinator.didEndEditing()()
{
  return closure #1 in PlatformTextFieldCoordinator.didEndEditing()(*(void *)(v0 + 16));
}

uint64_t partial apply for closure #1 in PlatformTextFieldCoordinator.didBeginEditing()()
{
  return closure #1 in PlatformTextFieldCoordinator.didBeginEditing()(*(void *)(v0 + 16));
}

uint64_t outlined init with copy of PlatformTextFieldCoordinator.FieldStorage?(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI7BindingVyAA14TextFieldStateVGMaTm_0(0, &lazy cache variable for type metadata for PlatformTextFieldCoordinator.FieldStorage?, (uint64_t)&type metadata for PlatformTextFieldCoordinator.FieldStorage, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for WeakBox<VerticalTextView>(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t outlined init with take of WeakBox<VerticalTextView>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void *outlined release of Text.ResolvedProperties(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  uint64_t v3 = a1[8];
  uint64_t v4 = a1[9];
  uint64_t v5 = a1[10];
  uint64_t v6 = a1[11];
  uint64_t v7 = a1[12];
  uint64_t v9 = (void *)a1[16];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of ResolvedTextSuffix(v2, v3, v4, v5, v6, v7);
  swift_bridgeObjectRelease();

  return a1;
}

void *outlined consume of ResolvedTextSuffix(void *result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a6 & 0x8000000000000000) == 0)
  {
    outlined consume of Text.Layout.Line.Line(result, a2, a3 & 1);
    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

void outlined consume of Text.Layout.Line.Line(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    swift_release();
  }
}

uint64_t *partial apply for closure #1 in PlatformTextFieldCoordinator.presentEditMenu(with:)@<X0>(void *a1@<X8>)
{
  return closure #1 in PlatformTextFieldCoordinator.presentEditMenu(with:)(*(void *)(v1 + 16), a1);
}

uint64_t sub_187B802BC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed TextSelection) -> (@out PlatformItemList)(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed TextSelection) -> (@out PlatformItemList)(a1, *(void (**)(uint64_t *__return_ptr))(v1 + 16));
}

uint64_t partial apply for closure #2 in PlatformTextFieldCoordinator.presentEditMenu(with:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #2 in PlatformTextFieldCoordinator.presentEditMenu(with:)(*(uint64_t (**)(char *))(v1 + 16), *(void *)(v1 + 32), a1);
}

uint64_t outlined assign with copy of TextSelection.Indices(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TextSelection.Indices(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void type metadata accessor for WeakBox<InputAccessoryGenerator>(uint64_t a1)
{
}

uint64_t outlined init with take of PlatformItem.PrimaryContent?(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI7BindingVyAA14TextFieldStateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void _s7SwiftUI7BindingVyAA14TextFieldStateVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined init with copy of PlatformTextFieldCoordinator.FieldStorage(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a1 + 2;
  }
  BOOL v4 = v3 == 1;
  uint64_t result = swift_unknownObjectWeakCopyInit();
  *(unsigned char *)(a2 + 8) = v4;
  return result;
}

uint64_t outlined assign with take of PlatformTextFieldCoordinator.FieldStorage?(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI7BindingVyAA14TextFieldStateVGMaTm_0(0, &lazy cache variable for type metadata for PlatformTextFieldCoordinator.FieldStorage?, (uint64_t)&type metadata for PlatformTextFieldCoordinator.FieldStorage, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for SystemTextFieldConfiguration(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = a2[3];
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    *(unsigned char *)(a1 + 33) = *((unsigned char *)a2 + 33);
    uint64_t v9 = a2[8];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v43 = a3;
    if (v9)
    {
      uint64_t v10 = a2[5];
      uint64_t v11 = a2[6];
      char v12 = *((unsigned char *)a2 + 56);
      outlined copy of Text.Storage(v10, v11, v12);
      *(void *)(a1 + 40) = v10;
      *(void *)(a1 + 48) = v11;
      *(unsigned char *)(a1 + 56) = v12;
      *(void *)(a1 + 64) = v9;
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v13 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 56) = v13;
    }
    uint64_t v14 = a2[9];
    uint64_t v15 = a2[10];
    uint64_t v16 = a2[11];
    uint64_t v17 = a2[12];
    uint64_t v18 = a2[13];
    uint64_t v19 = a2[14];
    uint64_t v21 = a2[15];
    uint64_t v20 = a2[16];
    uint64_t v44 = a2[17];
    uint64_t v45 = a2[18];
    uint64_t v46 = a2[19];
    uint64_t v47 = a2[20];
    int __dsta = (void *)a2[21];
    int v50 = *((_DWORD *)a2 + 44);
    char v52 = *((unsigned char *)a2 + 180);
    outlined copy of StateOrBinding<TextFieldState>(v14, v15, v16, v17, v18, v19, v21, v20, v44, v45, v46, v47, (uint64_t)__dsta, v50, v52);
    *(void *)(a1 + 72) = v14;
    *(void *)(a1 + 80) = v15;
    *(void *)(a1 + 88) = v16;
    *(void *)(a1 + 96) = v17;
    *(void *)(a1 + 104) = v18;
    *(void *)(a1 + 112) = v19;
    *(void *)(a1 + 120) = v21;
    *(void *)(a1 + 128) = v20;
    *(void *)(a1 + 136) = v44;
    *(void *)(a1 + 144) = v45;
    *(void *)(a1 + 152) = v46;
    *(void *)(a1 + 160) = v47;
    *(void *)(a1 + 168) = __dsta;
    *(_DWORD *)(a1 + 176) = v50;
    *(unsigned char *)(a1 + 180) = v52;
    _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
    uint64_t v23 = *(int *)(v22 + 56);
    uint64_t v24 = (void *)(a1 + v23);
    uint64_t v25 = (uint64_t *)((char *)a2 + v23);
    type metadata accessor for Binding<TextSelection?>(0);
    uint64_t v27 = v26;
    uint64_t v28 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v28 + 48))(v25, 1, v26))
    {
      type metadata accessor for Binding<TextSelection?>?(0);
      memcpy(v24, v25, *(void *)(*(void *)(v29 - 8) + 64));
      uint64_t v30 = v43;
    }
    else
    {
      uint64_t v51 = v28;
      uint64_t v31 = v25[1];
      *uint64_t v24 = *v25;
      v24[1] = v31;
      uint64_t v32 = *(int *)(v27 + 32);
      uint64_t v53 = v24;
      __dst = (char *)v24 + v32;
      uint64_t v33 = (char *)v25 + v32;
      uint64_t v34 = type metadata accessor for TextSelection(0);
      uint64_t v35 = *(void *)(v34 - 8);
      long long v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
      swift_retain();
      swift_retain();
      if (v36(v33, 1, v34))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v33, *(void *)(*(void *)(v37 - 8) + 64));
        uint64_t v30 = v43;
        long long v38 = v53;
      }
      else
      {
        uint64_t v39 = type metadata accessor for TextSelection.Indices(0);
        long long v40 = v33;
        uint64_t v30 = v43;
        long long v38 = v53;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, const void *, uint64_t))(*(void *)(v41 - 8) + 16))(__dst, v40, v41);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v40, *(void *)(*(void *)(v39 - 8) + 64));
        }
        __dst[*(int *)(v34 + 20)] = *((unsigned char *)v40 + *(int *)(v34 + 20));
        (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(__dst, 0, 1, v34);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v38, 0, 1, v27);
    }
    *(void *)(a1 + *(int *)(v30 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v30 + 20));
  }
  return a1;
}

uint64_t initializeWithCopy for SystemTextFieldConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v8 = *(void *)(a2 + 64);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v42 = a3;
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 40);
    uint64_t v10 = *(void *)(a2 + 48);
    char v11 = *(unsigned char *)(a2 + 56);
    outlined copy of Text.Storage(v9, v10, v11);
    *(void *)(a1 + 40) = v9;
    *(void *)(a1 + 48) = v10;
    *(unsigned char *)(a1 + 56) = v11;
    *(void *)(a1 + 64) = v8;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v12;
  }
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  uint64_t v16 = *(void *)(a2 + 96);
  uint64_t v17 = *(void *)(a2 + 104);
  uint64_t v18 = *(void *)(a2 + 112);
  uint64_t v20 = *(void *)(a2 + 120);
  uint64_t v19 = *(void *)(a2 + 128);
  uint64_t v43 = *(void *)(a2 + 136);
  uint64_t v44 = *(void *)(a2 + 144);
  uint64_t v45 = *(void *)(a2 + 152);
  uint64_t v46 = *(void *)(a2 + 160);
  int __dsta = *(void **)(a2 + 168);
  int v49 = *(_DWORD *)(a2 + 176);
  char v51 = *(unsigned char *)(a2 + 180);
  outlined copy of StateOrBinding<TextFieldState>(v13, v14, v15, v16, v17, v18, v20, v19, v43, v44, v45, v46, (uint64_t)__dsta, v49, v51);
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v17;
  *(void *)(a1 + 112) = v18;
  *(void *)(a1 + 120) = v20;
  *(void *)(a1 + 128) = v19;
  *(void *)(a1 + 136) = v43;
  *(void *)(a1 + 144) = v44;
  *(void *)(a1 + 152) = v45;
  *(void *)(a1 + 160) = v46;
  *(void *)(a1 + 168) = __dsta;
  *(_DWORD *)(a1 + 176) = v49;
  *(unsigned char *)(a1 + 180) = v51;
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v22 = *(int *)(v21 + 56);
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (void *)(a2 + v22);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v26 = v25;
  uint64_t v27 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v25))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64));
    uint64_t v29 = v42;
  }
  else
  {
    uint64_t v50 = v27;
    uint64_t v30 = v24[1];
    void *v23 = *v24;
    v23[1] = v30;
    uint64_t v31 = *(int *)(v26 + 32);
    char v52 = v23;
    __dst = (char *)v23 + v31;
    uint64_t v32 = (char *)v24 + v31;
    uint64_t v33 = type metadata accessor for TextSelection(0);
    uint64_t v34 = *(void *)(v33 - 8);
    uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
    swift_retain();
    swift_retain();
    if (v35(v32, 1, v33))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(__dst, v32, *(void *)(*(void *)(v36 - 8) + 64));
      uint64_t v29 = v42;
      uint64_t v37 = v52;
    }
    else
    {
      uint64_t v38 = type metadata accessor for TextSelection.Indices(0);
      uint64_t v39 = v32;
      uint64_t v29 = v42;
      uint64_t v37 = v52;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, const void *, uint64_t))(*(void *)(v40 - 8) + 16))(__dst, v39, v40);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(__dst, v39, *(void *)(*(void *)(v38 - 8) + 64));
      }
      __dst[*(int *)(v33 + 20)] = *((unsigned char *)v39 + *(int *)(v33 + 20));
      (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(__dst, 0, 1, v33);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v50 + 56))(v37, 0, 1, v26);
  }
  *(void *)(a1 + *(int *)(v29 + 20)) = *(void *)(a2 + *(int *)(v29 + 20));
  return a1;
}

uint64_t assignWithCopy for SystemTextFieldConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v6 = (_OWORD *)(a1 + 40);
  uint64_t v7 = (_OWORD *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 64);
  uint64_t v77 = a3;
  if (*(void *)(a1 + 64))
  {
    if (v8)
    {
      uint64_t v9 = *(void *)(a2 + 40);
      uint64_t v10 = *(void *)(a2 + 48);
      char v11 = *(unsigned char *)(a2 + 56);
      outlined copy of Text.Storage(v9, v10, v11);
      uint64_t v12 = *(void *)(a1 + 40);
      uint64_t v13 = *(void *)(a1 + 48);
      char v14 = *(unsigned char *)(a1 + 56);
      *(void *)(a1 + 40) = v9;
      *(void *)(a1 + 48) = v10;
      *(unsigned char *)(a1 + 56) = v11;
      outlined consume of Text.Storage(v12, v13, v14);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 40);
      long long v18 = *(_OWORD *)(a2 + 56);
      *uint64_t v6 = *v7;
      *(_OWORD *)(a1 + 56) = v18;
    }
  }
  else if (v8)
  {
    uint64_t v15 = *(void *)(a2 + 40);
    uint64_t v16 = *(void *)(a2 + 48);
    char v17 = *(unsigned char *)(a2 + 56);
    outlined copy of Text.Storage(v15, v16, v17);
    *(void *)(a1 + 40) = v15;
    *(void *)(a1 + 48) = v16;
    *(unsigned char *)(a1 + 56) = v17;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v19 = *(_OWORD *)(a2 + 56);
    *uint64_t v6 = *v7;
    *(_OWORD *)(a1 + 56) = v19;
  }
  uint64_t v20 = *(void *)(a2 + 72);
  uint64_t v21 = *(void *)(a2 + 80);
  uint64_t v22 = *(void *)(a2 + 88);
  uint64_t v23 = *(void *)(a2 + 96);
  uint64_t v25 = *(void *)(a2 + 104);
  uint64_t v24 = *(void *)(a2 + 112);
  uint64_t v27 = *(void *)(a2 + 120);
  uint64_t v26 = *(void *)(a2 + 128);
  uint64_t v78 = *(void *)(a2 + 136);
  uint64_t v79 = *(void *)(a2 + 144);
  uint64_t v80 = *(void *)(a2 + 152);
  uint64_t v81 = *(void *)(a2 + 160);
  uint64_t v82 = *(void *)(a2 + 168);
  int __dsta = *(_DWORD *)(a2 + 176);
  char v86 = *(unsigned char *)(a2 + 180);
  outlined copy of StateOrBinding<TextFieldState>(v20, v21, v22, v23, v25, v24, v27, v26, v78, v79, v80, v81, v82, __dsta, v86);
  uint64_t v28 = *(void *)(a1 + 72);
  uint64_t v29 = *(void *)(a1 + 80);
  uint64_t v30 = *(void *)(a1 + 88);
  uint64_t v31 = *(void *)(a1 + 96);
  uint64_t v32 = *(void *)(a1 + 104);
  uint64_t v33 = *(void *)(a1 + 112);
  uint64_t v34 = *(void *)(a1 + 120);
  uint64_t v35 = *(void *)(a1 + 128);
  long long v36 = *(_OWORD *)(a1 + 136);
  long long v37 = *(_OWORD *)(a1 + 152);
  uint64_t v38 = *(void *)(a1 + 168);
  int v39 = *(_DWORD *)(a1 + 176);
  char v40 = *(unsigned char *)(a1 + 180);
  *(void *)(a1 + 72) = v20;
  *(void *)(a1 + 80) = v21;
  *(void *)(a1 + 88) = v22;
  *(void *)(a1 + 96) = v23;
  *(void *)(a1 + 104) = v25;
  *(void *)(a1 + 112) = v24;
  uint64_t v41 = a2;
  *(void *)(a1 + 120) = v27;
  *(void *)(a1 + 128) = v26;
  *(void *)(a1 + 136) = v78;
  *(void *)(a1 + 144) = v79;
  *(void *)(a1 + 152) = v80;
  *(void *)(a1 + 160) = v81;
  *(void *)(a1 + 168) = v82;
  *(_DWORD *)(a1 + 176) = __dsta;
  *(unsigned char *)(a1 + 180) = v86;
  outlined consume of StateOrBinding<TextFieldState>(v28, v29, v30, v31, v32, v33, v34, v35, v36, *((uint64_t *)&v36 + 1), v37, *((uint64_t *)&v37 + 1), v38, v39, v40);
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v43 = *(int *)(v42 + 56);
  uint64_t v44 = (char *)(a1 + v43);
  uint64_t v45 = (char *)(a2 + v43);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v47 = v46;
  uint64_t v48 = *(void *)(v46 - 8);
  int v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48);
  LODWORD(v26) = v49(v44, 1, v46);
  int v50 = v49(v45, 1, v47);
  if (!v26)
  {
    if (!v50)
    {
      *(void *)uint64_t v44 = *(void *)v45;
      swift_retain();
      swift_release();
      *((void *)v44 + 1) = *((void *)v45 + 1);
      swift_retain();
      swift_release();
      uint64_t v60 = *(int *)(v47 + 32);
      uint64_t v61 = &v44[v60];
      uint64_t v62 = &v45[v60];
      uint64_t v63 = type metadata accessor for TextSelection(0);
      uint64_t v64 = *(void *)(v63 - 8);
      uint64_t v65 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v64 + 48);
      int v66 = v65(v61, 1, v63);
      int v67 = v65(v62, 1, v63);
      if (v66)
      {
        if (!v67)
        {
          uint64_t v68 = type metadata accessor for TextSelection.Indices(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 16))(v61, v62, v69);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v61, v62, *(void *)(*(void *)(v68 - 8) + 64));
          }
          v61[*(int *)(v63 + 20)] = v62[*(int *)(v63 + 20)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
          goto LABEL_16;
        }
      }
      else
      {
        if (!v67)
        {
          if (a1 != v41)
          {
            _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v61, type metadata accessor for TextSelection.Indices);
            uint64_t v75 = type metadata accessor for TextSelection.Indices(0);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 16))(v61, v62, v76);
              swift_storeEnumTagMultiPayload();
            }
            else
            {
              memcpy(v61, v62, *(void *)(*(void *)(v75 - 8) + 64));
            }
          }
          v61[*(int *)(v63 + 20)] = v62[*(int *)(v63 + 20)];
          goto LABEL_16;
        }
        _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v61, type metadata accessor for TextSelection);
      }
      type metadata accessor for TextSelection?(0);
      size_t v56 = *(void *)(*(void *)(v73 - 8) + 64);
      uint64_t v57 = v61;
      uint64_t v58 = v62;
LABEL_15:
      memcpy(v57, v58, v56);
LABEL_16:
      uint64_t v59 = v77;
      goto LABEL_29;
    }
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v44, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
LABEL_14:
    type metadata accessor for Binding<TextSelection?>?(0);
    size_t v56 = *(void *)(*(void *)(v55 - 8) + 64);
    uint64_t v57 = v44;
    uint64_t v58 = v45;
    goto LABEL_15;
  }
  if (v50) {
    goto LABEL_14;
  }
  *(void *)uint64_t v44 = *(void *)v45;
  *((void *)v44 + 1) = *((void *)v45 + 1);
  uint64_t v51 = *(int *)(v47 + 32);
  __dst = &v44[v51];
  uint64_t v87 = &v45[v51];
  uint64_t v52 = type metadata accessor for TextSelection(0);
  uint64_t v83 = *(void *)(v52 - 8);
  uint64_t v53 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48);
  swift_retain();
  swift_retain();
  if (v53(v87, 1, v52))
  {
    type metadata accessor for TextSelection?(0);
    memcpy(__dst, v87, *(void *)(*(void *)(v54 - 8) + 64));
    uint64_t v41 = a2;
  }
  else
  {
    uint64_t v70 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      uint64_t v72 = v87;
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v71 - 8) + 16))(__dst, v87, v71);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      uint64_t v72 = v87;
      memcpy(__dst, v87, *(void *)(*(void *)(v70 - 8) + 64));
    }
    uint64_t v41 = a2;
    __dst[*(int *)(v52 + 20)] = v72[*(int *)(v52 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(__dst, 0, 1, v52);
  }
  uint64_t v59 = v77;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v44, 0, 1, v47);
LABEL_29:
  *(void *)(a1 + *(int *)(v59 + 20)) = *(void *)(v41 + *(int *)(v59 + 20));
  return a1;
}

uint64_t initializeWithTake for SystemTextFieldConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 165) = *(_OWORD *)(a2 + 165);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v8 = *(int *)(v7 + 56);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v11))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    uint64_t v15 = v10[1];
    void *v9 = *v10;
    v9[1] = v15;
    uint64_t v16 = *(int *)(v12 + 32);
    char v17 = (char *)v9 + v16;
    long long v18 = (char *)v10 + v16;
    uint64_t v19 = type metadata accessor for TextSelection(0);
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      uint64_t v25 = a3;
      uint64_t v22 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v17, v18, v23);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v17, v18, *(void *)(*(void *)(v22 - 8) + 64));
      }
      v17[*(int *)(v19 + 20)] = v18[*(int *)(v19 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      a3 = v25;
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
  }
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for SystemTextFieldConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  if (*(void *)(a1 + 64))
  {
    uint64_t v7 = *(void *)(a2 + 64);
    if (v7)
    {
      char v8 = *(unsigned char *)(a2 + 56);
      uint64_t v9 = *(void *)(a1 + 40);
      uint64_t v10 = *(void *)(a1 + 48);
      char v11 = *(unsigned char *)(a1 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(unsigned char *)(a1 + 56) = v8;
      outlined consume of Text.Storage(v9, v10, v11);
      *(void *)(a1 + 64) = v7;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 40);
  }
  long long v12 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v12;
LABEL_6:
  uint64_t v13 = *(void *)(a2 + 168);
  int v14 = *(_DWORD *)(a2 + 176);
  char v15 = *(unsigned char *)(a2 + 180);
  uint64_t v16 = *(void *)(a1 + 72);
  uint64_t v17 = *(void *)(a1 + 80);
  uint64_t v18 = *(void *)(a1 + 88);
  uint64_t v19 = *(void *)(a1 + 96);
  uint64_t v20 = *(void *)(a1 + 104);
  uint64_t v21 = *(void *)(a1 + 112);
  uint64_t v22 = *(void *)(a1 + 120);
  uint64_t v23 = *(void *)(a1 + 128);
  long long v24 = *(_OWORD *)(a1 + 136);
  long long v25 = *(_OWORD *)(a1 + 152);
  uint64_t v26 = *(void *)(a1 + 168);
  int v27 = *(_DWORD *)(a1 + 176);
  char v28 = *(unsigned char *)(a1 + 180);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = v13;
  *(_DWORD *)(a1 + 176) = v14;
  *(unsigned char *)(a1 + 180) = v15;
  outlined consume of StateOrBinding<TextFieldState>(v16, v17, v18, v19, v20, v21, v22, v23, v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26, v27, v28);
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v30 = *(int *)(v29 + 56);
  uint64_t v31 = (char *)(a1 + v30);
  uint64_t v32 = (char *)(a2 + v30);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v34 = v33;
  uint64_t v35 = *(void *)(v33 - 8);
  long long v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  int v37 = v36(v31, 1, v33);
  int v38 = v36(v32, 1, v34);
  if (v37)
  {
    if (!v38)
    {
      uint64_t v39 = *((void *)v32 + 1);
      *(void *)uint64_t v31 = *(void *)v32;
      *((void *)v31 + 1) = v39;
      uint64_t v40 = *(int *)(v34 + 32);
      uint64_t v41 = &v31[v40];
      uint64_t v42 = &v32[v40];
      uint64_t v43 = type metadata accessor for TextSelection(0);
      uint64_t v44 = *(void *)(v43 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
      }
      else
      {
        uint64_t v67 = a3;
        uint64_t v61 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 32))(v41, v42, v62);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v41, v42, *(void *)(*(void *)(v61 - 8) + 64));
        }
        a3 = v67;
        v41[*(int *)(v43 + 20)] = v42[*(int *)(v43 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v31, 0, 1, v34);
      goto LABEL_26;
    }
    goto LABEL_12;
  }
  if (v38)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
LABEL_12:
    type metadata accessor for Binding<TextSelection?>?(0);
    size_t v47 = *(void *)(*(void *)(v46 - 8) + 64);
    uint64_t v48 = v31;
    int v49 = v32;
LABEL_13:
    memcpy(v48, v49, v47);
    goto LABEL_26;
  }
  uint64_t v50 = a3;
  *(void *)uint64_t v31 = *(void *)v32;
  swift_release();
  *((void *)v31 + 1) = *((void *)v32 + 1);
  swift_release();
  uint64_t v51 = *(int *)(v34 + 32);
  uint64_t v52 = &v31[v51];
  uint64_t v53 = &v32[v51];
  uint64_t v54 = type metadata accessor for TextSelection(0);
  uint64_t v55 = *(void *)(v54 - 8);
  size_t v56 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v55 + 48);
  int v57 = v56(v52, 1, v54);
  int v58 = v56(v53, 1, v54);
  a3 = v50;
  if (v57)
  {
    if (!v58)
    {
      uint64_t v59 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 32))(v52, v53, v60);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v52, v53, *(void *)(*(void *)(v59 - 8) + 64));
      }
      v52[*(int *)(v54 + 20)] = v53[*(int *)(v54 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
      goto LABEL_26;
    }
    goto LABEL_22;
  }
  if (v58)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v52, type metadata accessor for TextSelection);
LABEL_22:
    type metadata accessor for TextSelection?(0);
    size_t v47 = *(void *)(*(void *)(v63 - 8) + 64);
    uint64_t v48 = v52;
    int v49 = v53;
    goto LABEL_13;
  }
  if (a1 != a2)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v52, type metadata accessor for TextSelection.Indices);
    uint64_t v65 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 32))(v52, v53, v66);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v52, v53, *(void *)(*(void *)(v65 - 8) + 64));
    }
  }
  v52[*(int *)(v54 + 20)] = v53[*(int *)(v54 + 20)];
LABEL_26:
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemTextFieldConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_2_0);
}

uint64_t storeEnumTagSinglePayload for SystemTextFieldConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_2_0);
}

void type metadata completion function for SystemTextFieldConfiguration()
{
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t initializeBufferWithCopyOfBuffer for SystemTextField(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for SystemTextFieldConfiguration(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  uint64_t v6 = *a2;
  *(void *)a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = v6 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = a2[3];
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    *(unsigned char *)(a1 + 33) = *((unsigned char *)a2 + 33);
    uint64_t v8 = a2[8];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v42 = v4;
    if (v8)
    {
      uint64_t v9 = a2[5];
      uint64_t v10 = a2[6];
      char v11 = *((unsigned char *)a2 + 56);
      outlined copy of Text.Storage(v9, v10, v11);
      *(void *)(a1 + 40) = v9;
      *(void *)(a1 + 48) = v10;
      *(unsigned char *)(a1 + 56) = v11;
      *(void *)(a1 + 64) = v8;
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v12 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 56) = v12;
    }
    uint64_t v13 = a2[9];
    uint64_t v14 = a2[10];
    uint64_t v15 = a2[11];
    uint64_t v16 = a2[12];
    uint64_t v17 = a2[13];
    uint64_t v18 = a2[14];
    uint64_t v20 = a2[15];
    uint64_t v19 = a2[16];
    uint64_t v43 = a2[17];
    uint64_t v44 = a2[18];
    uint64_t v45 = a2[19];
    uint64_t v46 = a2[20];
    int __dsta = (void *)a2[21];
    int v49 = *((_DWORD *)a2 + 44);
    char v51 = *((unsigned char *)a2 + 180);
    outlined copy of StateOrBinding<TextFieldState>(v13, v14, v15, v16, v17, v18, v20, v19, v43, v44, v45, v46, (uint64_t)__dsta, v49, v51);
    *(void *)(a1 + 72) = v13;
    *(void *)(a1 + 80) = v14;
    *(void *)(a1 + 88) = v15;
    *(void *)(a1 + 96) = v16;
    *(void *)(a1 + 104) = v17;
    *(void *)(a1 + 112) = v18;
    *(void *)(a1 + 120) = v20;
    *(void *)(a1 + 128) = v19;
    *(void *)(a1 + 136) = v43;
    *(void *)(a1 + 144) = v44;
    *(void *)(a1 + 152) = v45;
    *(void *)(a1 + 160) = v46;
    *(void *)(a1 + 168) = __dsta;
    *(_DWORD *)(a1 + 176) = v49;
    *(unsigned char *)(a1 + 180) = v51;
    _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
    uint64_t v22 = *(int *)(v21 + 56);
    uint64_t v23 = (void *)(a1 + v22);
    long long v24 = (uint64_t *)((char *)a2 + v22);
    type metadata accessor for Binding<TextSelection?>(0);
    uint64_t v26 = v25;
    uint64_t v27 = *(void *)(v25 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v25))
    {
      type metadata accessor for Binding<TextSelection?>?(0);
      memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64));
      uint64_t v29 = v42;
    }
    else
    {
      uint64_t v50 = v27;
      uint64_t v30 = v24[1];
      void *v23 = *v24;
      v23[1] = v30;
      uint64_t v31 = *(int *)(v26 + 32);
      uint64_t v52 = v23;
      __dst = (char *)v23 + v31;
      uint64_t v32 = (char *)v24 + v31;
      uint64_t v33 = type metadata accessor for TextSelection(0);
      uint64_t v34 = *(void *)(v33 - 8);
      uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
      swift_retain();
      swift_retain();
      if (v35(v32, 1, v33))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v32, *(void *)(*(void *)(v36 - 8) + 64));
        uint64_t v29 = v42;
        int v37 = v52;
      }
      else
      {
        uint64_t v38 = type metadata accessor for TextSelection.Indices(0);
        uint64_t v39 = v32;
        uint64_t v29 = v42;
        int v37 = v52;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, const void *, uint64_t))(*(void *)(v40 - 8) + 16))(__dst, v39, v40);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v39, *(void *)(*(void *)(v38 - 8) + 64));
        }
        __dst[*(int *)(v33 + 20)] = *((unsigned char *)v39 + *(int *)(v33 + 20));
        (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(__dst, 0, 1, v33);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v50 + 56))(v37, 0, 1, v26);
    }
    *(void *)(a1 + *(int *)(v29 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v29 + 20));
  }
  return a1;
}

uint64_t initializeWithCopy for SystemTextField(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v6 = *(void *)(a2 + 64);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 40);
    uint64_t v8 = *(void *)(a2 + 48);
    char v9 = *(unsigned char *)(a2 + 56);
    outlined copy of Text.Storage(v7, v8, v9);
    *(void *)(a1 + 40) = v7;
    *(void *)(a1 + 48) = v8;
    *(unsigned char *)(a1 + 56) = v9;
    *(void *)(a1 + 64) = v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v10;
  }
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  uint64_t v13 = *(void *)(a2 + 88);
  uint64_t v14 = *(void *)(a2 + 96);
  uint64_t v15 = *(void *)(a2 + 104);
  uint64_t v16 = *(void *)(a2 + 112);
  uint64_t v17 = *(void *)(a2 + 120);
  uint64_t v18 = *(void *)(a2 + 128);
  uint64_t v39 = *(void *)(a2 + 136);
  uint64_t v40 = *(void *)(a2 + 144);
  uint64_t v41 = *(void *)(a2 + 152);
  uint64_t v42 = *(void *)(a2 + 160);
  uint64_t v43 = *(void *)(a2 + 168);
  int __dsta = *(_DWORD *)(a2 + 176);
  char v47 = *(unsigned char *)(a2 + 180);
  outlined copy of StateOrBinding<TextFieldState>(v11, v12, v13, v14, v15, v16, v17, v18, v39, v40, v41, v42, v43, __dsta, v47);
  *(void *)(a1 + 72) = v11;
  *(void *)(a1 + 80) = v12;
  *(void *)(a1 + 88) = v13;
  *(void *)(a1 + 96) = v14;
  *(void *)(a1 + 104) = v15;
  *(void *)(a1 + 112) = v16;
  *(void *)(a1 + 120) = v17;
  *(void *)(a1 + 128) = v18;
  *(void *)(a1 + 136) = v39;
  *(void *)(a1 + 144) = v40;
  *(void *)(a1 + 152) = v41;
  *(void *)(a1 + 160) = v42;
  *(void *)(a1 + 168) = v43;
  *(_DWORD *)(a1 + 176) = __dsta;
  *(unsigned char *)(a1 + 180) = v47;
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v20 = *(int *)(v19 + 56);
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v24 = v23;
  uint64_t v25 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v23))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v21, v22, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    uint64_t v27 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v27;
    uint64_t v28 = *(int *)(v24 + 32);
    uint64_t v48 = v21;
    __dst = (char *)v21 + v28;
    uint64_t v29 = (char *)v22 + v28;
    uint64_t v30 = type metadata accessor for TextSelection(0);
    uint64_t v44 = *(void *)(v30 - 8);
    uint64_t v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
    swift_retain();
    uint64_t v32 = v29;
    swift_retain();
    if (v31(v29, 1, v30))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(__dst, v29, *(void *)(*(void *)(v33 - 8) + 64));
      uint64_t v34 = v48;
    }
    else
    {
      uint64_t v35 = type metadata accessor for TextSelection.Indices(0);
      uint64_t v34 = v48;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, const void *, uint64_t))(*(void *)(v36 - 8) + 16))(__dst, v32, v36);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(__dst, v32, *(void *)(*(void *)(v35 - 8) + 64));
      }
      __dst[*(int *)(v30 + 20)] = *((unsigned char *)v32 + *(int *)(v30 + 20));
      (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(__dst, 0, 1, v30);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v34, 0, 1, v24);
  }
  uint64_t v37 = type metadata accessor for SystemTextFieldConfiguration(0);
  *(void *)(a1 + *(int *)(v37 + 20)) = *(void *)(a2 + *(int *)(v37 + 20));
  return a1;
}

uint64_t assignWithCopy for SystemTextField(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v4 = (_OWORD *)(a1 + 40);
  uint64_t v5 = (_OWORD *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 64);
  if (*(void *)(a1 + 64))
  {
    if (v6)
    {
      uint64_t v7 = *(void *)(a2 + 40);
      uint64_t v8 = *(void *)(a2 + 48);
      char v9 = *(unsigned char *)(a2 + 56);
      outlined copy of Text.Storage(v7, v8, v9);
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v11 = *(void *)(a1 + 48);
      char v12 = *(unsigned char *)(a1 + 56);
      *(void *)(a1 + 40) = v7;
      *(void *)(a1 + 48) = v8;
      *(unsigned char *)(a1 + 56) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 40);
      long long v16 = *(_OWORD *)(a2 + 56);
      *uint64_t v4 = *v5;
      *(_OWORD *)(a1 + 56) = v16;
    }
  }
  else if (v6)
  {
    uint64_t v13 = *(void *)(a2 + 40);
    uint64_t v14 = *(void *)(a2 + 48);
    char v15 = *(unsigned char *)(a2 + 56);
    outlined copy of Text.Storage(v13, v14, v15);
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v14;
    *(unsigned char *)(a1 + 56) = v15;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v17 = *(_OWORD *)(a2 + 56);
    *uint64_t v4 = *v5;
    *(_OWORD *)(a1 + 56) = v17;
  }
  uint64_t v18 = *(void *)(a2 + 72);
  uint64_t v19 = *(void *)(a2 + 80);
  uint64_t v20 = *(void *)(a2 + 88);
  uint64_t v21 = *(void *)(a2 + 96);
  uint64_t v22 = *(void *)(a2 + 104);
  uint64_t v23 = *(void *)(a2 + 112);
  uint64_t v85 = a2;
  uint64_t v24 = *(void *)(a2 + 120);
  uint64_t v25 = *(void *)(a2 + 128);
  uint64_t v26 = *(void *)(a2 + 136);
  uint64_t v77 = *(void *)(v85 + 144);
  uint64_t v78 = *(void *)(v85 + 152);
  uint64_t v79 = *(void *)(v85 + 160);
  uint64_t v80 = *(void *)(v85 + 168);
  int __dsta = *(_DWORD *)(v85 + 176);
  char v83 = *(unsigned char *)(v85 + 180);
  outlined copy of StateOrBinding<TextFieldState>(v18, v19, v20, v21, v22, v23, v24, v25, v26, v77, v78, v79, v80, __dsta, v83);
  uint64_t v27 = *(void *)(a1 + 72);
  uint64_t v28 = *(void *)(a1 + 80);
  uint64_t v29 = *(void *)(a1 + 88);
  uint64_t v30 = *(void *)(a1 + 96);
  uint64_t v31 = *(void *)(a1 + 104);
  uint64_t v32 = *(void *)(a1 + 112);
  uint64_t v33 = *(void *)(a1 + 120);
  uint64_t v34 = *(void *)(a1 + 128);
  long long v35 = *(_OWORD *)(a1 + 136);
  long long v36 = *(_OWORD *)(a1 + 152);
  uint64_t v37 = *(void *)(a1 + 168);
  int v38 = *(_DWORD *)(a1 + 176);
  char v39 = *(unsigned char *)(a1 + 180);
  *(void *)(a1 + 72) = v18;
  *(void *)(a1 + 80) = v19;
  *(void *)(a1 + 88) = v20;
  *(void *)(a1 + 96) = v21;
  *(void *)(a1 + 104) = v22;
  *(void *)(a1 + 112) = v23;
  *(void *)(a1 + 120) = v24;
  *(void *)(a1 + 128) = v25;
  uint64_t v40 = v85;
  *(void *)(a1 + 136) = v26;
  *(void *)(a1 + 144) = v77;
  *(void *)(a1 + 152) = v78;
  *(void *)(a1 + 160) = v79;
  *(void *)(a1 + 168) = v80;
  *(_DWORD *)(a1 + 176) = __dsta;
  *(unsigned char *)(a1 + 180) = v83;
  outlined consume of StateOrBinding<TextFieldState>(v27, v28, v29, v30, v31, v32, v33, v34, v35, *((uint64_t *)&v35 + 1), v36, *((uint64_t *)&v36 + 1), v37, v38, v39);
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v42 = *(int *)(v41 + 56);
  uint64_t v43 = (char *)(a1 + v42);
  uint64_t v44 = (char *)(v85 + v42);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v46 = v45;
  uint64_t v47 = *(void *)(v45 - 8);
  uint64_t v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48);
  LODWORD(v20) = v48(v43, 1, v45);
  int v49 = v48(v44, 1, v46);
  if (v20)
  {
    if (!v49)
    {
      *(void *)uint64_t v43 = *(void *)v44;
      *((void *)v43 + 1) = *((void *)v44 + 1);
      uint64_t v50 = *(int *)(v46 + 32);
      __dst = &v43[v50];
      uint64_t v84 = &v44[v50];
      uint64_t v51 = type metadata accessor for TextSelection(0);
      uint64_t v52 = *(void *)(v51 - 8);
      uint64_t v53 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48);
      swift_retain();
      swift_retain();
      if (v53(v84, 1, v51))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v84, *(void *)(*(void *)(v54 - 8) + 64));
        uint64_t v40 = v85;
      }
      else
      {
        uint64_t v69 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          uint64_t v71 = v84;
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v70 - 8) + 16))(__dst, v84, v70);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          uint64_t v71 = v84;
          memcpy(__dst, v84, *(void *)(*(void *)(v69 - 8) + 64));
        }
        uint64_t v40 = v85;
        __dst[*(int *)(v51 + 20)] = v71[*(int *)(v51 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(__dst, 0, 1, v51);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v43, 0, 1, v46);
      goto LABEL_28;
    }
    goto LABEL_14;
  }
  if (v49)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v43, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
LABEL_14:
    type metadata accessor for Binding<TextSelection?>?(0);
    size_t v56 = *(void *)(*(void *)(v55 - 8) + 64);
    int v57 = v43;
    int v58 = v44;
LABEL_15:
    memcpy(v57, v58, v56);
    goto LABEL_28;
  }
  *(void *)uint64_t v43 = *(void *)v44;
  swift_retain();
  swift_release();
  *((void *)v43 + 1) = *((void *)v44 + 1);
  swift_retain();
  swift_release();
  uint64_t v59 = *(int *)(v46 + 32);
  uint64_t v60 = &v43[v59];
  uint64_t v61 = &v44[v59];
  uint64_t v62 = type metadata accessor for TextSelection(0);
  uint64_t v63 = *(void *)(v62 - 8);
  uint64_t v64 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v63 + 48);
  int v65 = v64(v60, 1, v62);
  int v66 = v64(v61, 1, v62);
  if (v65)
  {
    if (!v66)
    {
      uint64_t v67 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 16))(v60, v61, v68);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v60, v61, *(void *)(*(void *)(v67 - 8) + 64));
      }
      v60[*(int *)(v62 + 20)] = v61[*(int *)(v62 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
      goto LABEL_28;
    }
    goto LABEL_24;
  }
  if (v66)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v60, type metadata accessor for TextSelection);
LABEL_24:
    type metadata accessor for TextSelection?(0);
    size_t v56 = *(void *)(*(void *)(v72 - 8) + 64);
    int v57 = v60;
    int v58 = v61;
    goto LABEL_15;
  }
  if (a1 != v85)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v60, type metadata accessor for TextSelection.Indices);
    uint64_t v75 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 16))(v60, v61, v76);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v60, v61, *(void *)(*(void *)(v75 - 8) + 64));
    }
  }
  v60[*(int *)(v62 + 20)] = v61[*(int *)(v62 + 20)];
LABEL_28:
  uint64_t v73 = type metadata accessor for SystemTextFieldConfiguration(0);
  *(void *)(a1 + *(int *)(v73 + 20)) = *(void *)(v40 + *(int *)(v73 + 20));
  return a1;
}

uint64_t initializeWithTake for SystemTextField(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 165) = *(_OWORD *)(a2 + 165);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v6 = *(int *)(v5 + 56);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v9))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = v8[1];
    *uint64_t v7 = *v8;
    v7[1] = v13;
    uint64_t v14 = *(int *)(v10 + 32);
    char v15 = (char *)v7 + v14;
    long long v16 = (char *)v8 + v14;
    uint64_t v17 = type metadata accessor for TextSelection(0);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v20 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v15, v16, v21);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
      }
      v15[*(int *)(v17 + 20)] = v16[*(int *)(v17 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
  }
  uint64_t v22 = type metadata accessor for SystemTextFieldConfiguration(0);
  *(void *)(a1 + *(int *)(v22 + 20)) = *(void *)(a2 + *(int *)(v22 + 20));
  return a1;
}

uint64_t assignWithTake for SystemTextField(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  if (*(void *)(a1 + 64))
  {
    uint64_t v5 = *(void *)(a2 + 64);
    if (v5)
    {
      char v6 = *(unsigned char *)(a2 + 56);
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v8 = *(void *)(a1 + 48);
      char v9 = *(unsigned char *)(a1 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(unsigned char *)(a1 + 56) = v6;
      outlined consume of Text.Storage(v7, v8, v9);
      *(void *)(a1 + 64) = v5;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 40);
  }
  long long v10 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v10;
LABEL_6:
  uint64_t v11 = *(void *)(a2 + 168);
  int v12 = *(_DWORD *)(a2 + 176);
  char v13 = *(unsigned char *)(a2 + 180);
  uint64_t v14 = *(void *)(a1 + 72);
  uint64_t v15 = *(void *)(a1 + 80);
  uint64_t v16 = *(void *)(a1 + 88);
  uint64_t v17 = *(void *)(a1 + 96);
  uint64_t v18 = *(void *)(a1 + 104);
  uint64_t v19 = *(void *)(a1 + 112);
  uint64_t v20 = *(void *)(a1 + 120);
  uint64_t v21 = *(void *)(a1 + 128);
  long long v22 = *(_OWORD *)(a1 + 136);
  long long v23 = *(_OWORD *)(a1 + 152);
  uint64_t v24 = *(void *)(a1 + 168);
  int v25 = *(_DWORD *)(a1 + 176);
  char v26 = *(unsigned char *)(a1 + 180);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = v11;
  *(_DWORD *)(a1 + 176) = v12;
  *(unsigned char *)(a1 + 180) = v13;
  outlined consume of StateOrBinding<TextFieldState>(v14, v15, v16, v17, v18, v19, v20, v21, v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, v25, v26);
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v28 = *(int *)(v27 + 56);
  uint64_t v29 = (char *)(a1 + v28);
  uint64_t v30 = (char *)(a2 + v28);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v32 = v31;
  uint64_t v33 = *(void *)(v31 - 8);
  uint64_t v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
  int v35 = v34(v29, 1, v31);
  int v36 = v34(v30, 1, v32);
  if (v35)
  {
    if (!v36)
    {
      uint64_t v37 = *((void *)v30 + 1);
      *(void *)uint64_t v29 = *(void *)v30;
      *((void *)v29 + 1) = v37;
      uint64_t v38 = *(int *)(v32 + 32);
      char v39 = &v29[v38];
      uint64_t v40 = &v30[v38];
      uint64_t v41 = type metadata accessor for TextSelection(0);
      uint64_t v42 = *(void *)(v41 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
      }
      else
      {
        uint64_t v58 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 32))(v39, v40, v59);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v39, v40, *(void *)(*(void *)(v58 - 8) + 64));
        }
        v39[*(int *)(v41 + 20)] = v40[*(int *)(v41 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v29, 0, 1, v32);
      goto LABEL_26;
    }
    goto LABEL_12;
  }
  if (v36)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
LABEL_12:
    type metadata accessor for Binding<TextSelection?>?(0);
    size_t v45 = *(void *)(*(void *)(v44 - 8) + 64);
    uint64_t v46 = v29;
    uint64_t v47 = v30;
LABEL_13:
    memcpy(v46, v47, v45);
    goto LABEL_26;
  }
  *(void *)uint64_t v29 = *(void *)v30;
  swift_release();
  *((void *)v29 + 1) = *((void *)v30 + 1);
  swift_release();
  uint64_t v48 = *(int *)(v32 + 32);
  int v49 = &v29[v48];
  uint64_t v50 = &v30[v48];
  uint64_t v51 = type metadata accessor for TextSelection(0);
  uint64_t v52 = *(void *)(v51 - 8);
  uint64_t v53 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 48);
  int v54 = v53(v49, 1, v51);
  int v55 = v53(v50, 1, v51);
  if (v54)
  {
    if (!v55)
    {
      uint64_t v56 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 32))(v49, v50, v57);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v49, v50, *(void *)(*(void *)(v56 - 8) + 64));
      }
      v49[*(int *)(v51 + 20)] = v50[*(int *)(v51 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
      goto LABEL_26;
    }
    goto LABEL_22;
  }
  if (v55)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v49, type metadata accessor for TextSelection);
LABEL_22:
    type metadata accessor for TextSelection?(0);
    size_t v45 = *(void *)(*(void *)(v60 - 8) + 64);
    uint64_t v46 = v49;
    uint64_t v47 = v50;
    goto LABEL_13;
  }
  if (a1 != a2)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v49, type metadata accessor for TextSelection.Indices);
    uint64_t v63 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 32))(v49, v50, v64);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v49, v50, *(void *)(*(void *)(v63 - 8) + 64));
    }
  }
  v49[*(int *)(v51 + 20)] = v50[*(int *)(v51 + 20)];
LABEL_26:
  uint64_t v61 = type metadata accessor for SystemTextFieldConfiguration(0);
  *(void *)(a1 + *(int *)(v61 + 20)) = *(void *)(a2 + *(int *)(v61 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemTextField(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187B83CD8);
}

uint64_t sub_187B83CD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SystemTextFieldConfiguration(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for SystemTextField(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187B83D58);
}

uint64_t sub_187B83D58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SystemTextFieldConfiguration(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for SystemTextField()
{
  uint64_t result = type metadata accessor for SystemTextFieldConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SystemTextField, _AlignmentLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SystemTextField, _AlignmentLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SystemTextField, _AlignmentLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<SystemTextField, _AlignmentLayout>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SystemTextField, _AlignmentLayout>, _FixedSizeLayout>, type metadata accessor for ModifiedContent<SystemTextField, _AlignmentLayout>);
    lazy protocol witness table accessor for type ModifiedContent<SystemTextField, _AlignmentLayout> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SystemTextField, _AlignmentLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in SystemTextField()
{
  return &protocol witness table for SystemTextField;
}

void type metadata accessor for _GraphInputs.SelectionBasedStorageKey<TextSelection>(uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for ResolvedSystemTextField(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvedSystemTextField);
}

unint64_t lazy protocol witness table accessor for type SystemTextField.MakeRepresentable and conformance SystemTextField.MakeRepresentable()
{
  unint64_t result = lazy protocol witness table cache variable for type SystemTextField.MakeRepresentable and conformance SystemTextField.MakeRepresentable;
  if (!lazy protocol witness table cache variable for type SystemTextField.MakeRepresentable and conformance SystemTextField.MakeRepresentable)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemTextField.MakeRepresentable and conformance SystemTextField.MakeRepresentable);
  }
  return result;
}

void type metadata accessor for WeakSelectionBasedStorage<TextSelection>?(uint64_t a1)
{
}

void type metadata accessor for WeakSelectionBasedStorage<TextSelection>(uint64_t a1)
{
}

void type metadata accessor for _GraphInputs.SelectionBasedStorageKey<TextSelection>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for TextSelection(255);
    uint64_t v7 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextSelection and conformance TextSelection, (void (*)(uint64_t))type metadata accessor for TextSelection);
    unint64_t v8 = a3(a1, v6, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

__n128 __swift_memcpy36_4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for SystemTextField.MakeRepresentable(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 36)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SystemTextField.MakeRepresentable(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 36) = v3;
  return result;
}

void *type metadata accessor for SystemTextField.MakeRepresentable()
{
  return &unk_1ED41BED8;
}

unint64_t initializeBufferWithCopyOfBuffer for ResolvedSystemTextField(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    unint64_t v19 = v18 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    char v8 = *(unsigned char *)(a2 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(unsigned char *)(a1 + 8) = v8;
    uint64_t v56 = a3;
    uint64_t v57 = a2;
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = a1 + v9;
    uint64_t v11 = a2 + v9;
    uint64_t v12 = *(void *)(v11 + 8);
    *(void *)uint64_t v10 = *(void *)v11;
    *(void *)(v10 + 8) = v12;
    uint64_t v13 = *(void *)(v11 + 24);
    *(void *)(v10 + 16) = *(void *)(v11 + 16);
    *(void *)(v10 + 24) = v13;
    *(unsigned char *)(v10 + 32) = *(unsigned char *)(v11 + 32);
    *(unsigned char *)(v10 + 33) = *(unsigned char *)(v11 + 33);
    uint64_t v14 = *(void *)(v11 + 64);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    unint64_t v58 = a1;
    if (v14)
    {
      uint64_t v15 = *(void *)(v11 + 40);
      uint64_t v16 = *(void *)(v11 + 48);
      char v17 = *(unsigned char *)(v11 + 56);
      outlined copy of Text.Storage(v15, v16, v17);
      *(void *)(v10 + 40) = v15;
      *(void *)(v10 + 48) = v16;
      *(unsigned char *)(v10 + 56) = v17;
      *(void *)(v10 + 64) = v14;
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v20 = *(_OWORD *)(v11 + 56);
      *(_OWORD *)(v10 + 40) = *(_OWORD *)(v11 + 40);
      *(_OWORD *)(v10 + 56) = v20;
    }
    uint64_t v21 = *(void *)(v11 + 72);
    uint64_t v22 = *(void *)(v11 + 80);
    uint64_t v23 = *(void *)(v11 + 88);
    uint64_t v24 = *(void *)(v11 + 96);
    uint64_t v25 = *(void *)(v11 + 104);
    uint64_t v26 = *(void *)(v11 + 112);
    uint64_t v28 = *(void *)(v11 + 120);
    uint64_t v27 = *(void *)(v11 + 128);
    uint64_t v59 = *(void *)(v11 + 136);
    uint64_t v60 = *(void *)(v11 + 144);
    uint64_t v61 = *(void *)(v11 + 152);
    uint64_t v62 = *(void *)(v11 + 160);
    __srca = *(void **)(v11 + 168);
    int v66 = *(_DWORD *)(v11 + 176);
    char v68 = *(unsigned char *)(v11 + 180);
    outlined copy of StateOrBinding<TextFieldState>(v21, v22, v23, v24, v25, v26, v28, v27, v59, v60, v61, v62, (uint64_t)__srca, v66, v68);
    *(void *)(v10 + 72) = v21;
    *(void *)(v10 + 80) = v22;
    *(void *)(v10 + 88) = v23;
    *(void *)(v10 + 96) = v24;
    *(void *)(v10 + 104) = v25;
    *(void *)(v10 + 112) = v26;
    *(void *)(v10 + 120) = v28;
    *(void *)(v10 + 128) = v27;
    *(void *)(v10 + 136) = v59;
    *(void *)(v10 + 144) = v60;
    *(void *)(v10 + 152) = v61;
    *(void *)(v10 + 160) = v62;
    *(void *)(v10 + 168) = __srca;
    *(_DWORD *)(v10 + 176) = v66;
    *(unsigned char *)(v10 + 180) = v68;
    _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
    uint64_t v30 = *(int *)(v29 + 56);
    uint64_t v31 = (void *)(v10 + v30);
    uint64_t v32 = (void *)(v11 + v30);
    type metadata accessor for Binding<TextSelection?>(0);
    uint64_t v34 = v33;
    uint64_t v35 = *(void *)(v33 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v35 + 48))(v32, 1, v33))
    {
      type metadata accessor for Binding<TextSelection?>?(0);
      memcpy(v31, v32, *(void *)(*(void *)(v36 - 8) + 64));
      uint64_t v37 = v57;
      unint64_t v19 = v58;
      uint64_t v38 = v56;
    }
    else
    {
      uint64_t v39 = v32[1];
      void *v31 = *v32;
      v31[1] = v39;
      uint64_t v40 = *(int *)(v34 + 32);
      uint64_t v67 = (char *)v31 + v40;
      uint64_t v69 = v31;
      uint64_t v41 = (char *)v32 + v40;
      uint64_t v42 = type metadata accessor for TextSelection(0);
      uint64_t v43 = *(void *)(v42 - 8);
      uint64_t v44 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v43 + 48);
      size_t v45 = v41;
      uint64_t v46 = v42;
      swift_retain();
      swift_retain();
      if (v44(v45, 1, v46))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v67, v45, *(void *)(*(void *)(v47 - 8) + 64));
        uint64_t v37 = v57;
        unint64_t v19 = v58;
        uint64_t v38 = v56;
      }
      else
      {
        uint64_t v63 = v43;
        __src = (void *)v45;
        uint64_t v48 = type metadata accessor for TextSelection.Indices(0);
        uint64_t v37 = v57;
        unint64_t v19 = v58;
        uint64_t v38 = v56;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, void *, uint64_t))(*(void *)(v49 - 8) + 16))(v67, __src, v49);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v67, __src, *(void *)(*(void *)(v48 - 8) + 64));
        }
        v67[*(int *)(v46 + 20)] = *((unsigned char *)__src + *(int *)(v46 + 20));
        (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(v67, 0, 1, v46);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(v69, 0, 1, v34);
    }
    uint64_t v50 = type metadata accessor for SystemTextFieldConfiguration(0);
    *(void *)(v10 + *(int *)(v50 + 20)) = *(void *)(v11 + *(int *)(v50 + 20));
    uint64_t v51 = *(int *)(v38 + 24);
    uint64_t v52 = (_OWORD *)(v19 + v51);
    uint64_t v53 = (_OWORD *)(v37 + v51);
    long long v54 = v53[1];
    *uint64_t v52 = *v53;
    v52[1] = v54;
  }
  return v19;
}

uint64_t destroy for ResolvedSystemTextField(uint64_t a1, uint64_t a2)
{
  outlined consume of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v4 + 64))
  {
    outlined consume of Text.Storage(*(void *)(v4 + 40), *(void *)(v4 + 48), *(unsigned char *)(v4 + 56));
    swift_bridgeObjectRelease();
  }
  outlined consume of StateOrBinding<TextFieldState>(*(void *)(v4 + 72), *(void *)(v4 + 80), *(void *)(v4 + 88), *(void *)(v4 + 96), *(void *)(v4 + 104), *(void *)(v4 + 112), *(void *)(v4 + 120), *(void *)(v4 + 128), *(void *)(v4 + 136), *(void *)(v4 + 144), *(void *)(v4 + 152), *(void *)(v4 + 160), *(void *)(v4 + 168), *(_DWORD *)(v4 + 176), *(unsigned char *)(v4 + 180));
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v6 = v4 + *(int *)(v5 + 56);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v8 = v7;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    swift_release();
    swift_release();
    uint64_t v10 = v6 + *(int *)(v8 + 32);
    uint64_t v11 = type metadata accessor for TextSelection(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11);
    if (!result)
    {
      type metadata accessor for TextSelection.Indices(0);
      uint64_t result = swift_getEnumCaseMultiPayload();
      if (result == 1)
      {
        _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
        return v13(v10, v12);
      }
    }
  }
  return result;
}

uint64_t initializeWithCopy for ResolvedSystemTextField(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  uint64_t v54 = a3;
  uint64_t v55 = a2;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = *(void *)(v10 + 8);
  *(void *)uint64_t v9 = *(void *)v10;
  *(void *)(v9 + 8) = v11;
  uint64_t v12 = *(void *)(v10 + 24);
  *(void *)(v9 + 16) = *(void *)(v10 + 16);
  *(void *)(v9 + 24) = v12;
  *(unsigned char *)(v9 + 32) = *(unsigned char *)(v10 + 32);
  *(unsigned char *)(v9 + 33) = *(unsigned char *)(v10 + 33);
  uint64_t v13 = *(void *)(v10 + 64);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v56 = a1;
  if (v13)
  {
    uint64_t v14 = *(void *)(v10 + 40);
    uint64_t v15 = *(void *)(v10 + 48);
    char v16 = *(unsigned char *)(v10 + 56);
    outlined copy of Text.Storage(v14, v15, v16);
    *(void *)(v9 + 40) = v14;
    *(void *)(v9 + 48) = v15;
    *(unsigned char *)(v9 + 56) = v16;
    *(void *)(v9 + 64) = v13;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v17 = *(_OWORD *)(v10 + 56);
    *(_OWORD *)(v9 + 40) = *(_OWORD *)(v10 + 40);
    *(_OWORD *)(v9 + 56) = v17;
  }
  uint64_t v18 = *(void *)(v10 + 72);
  uint64_t v19 = *(void *)(v10 + 80);
  uint64_t v20 = *(void *)(v10 + 88);
  uint64_t v21 = *(void *)(v10 + 96);
  uint64_t v22 = *(void *)(v10 + 104);
  uint64_t v23 = *(void *)(v10 + 112);
  uint64_t v25 = *(void *)(v10 + 120);
  uint64_t v24 = *(void *)(v10 + 128);
  uint64_t v57 = *(void *)(v10 + 136);
  uint64_t v58 = *(void *)(v10 + 144);
  uint64_t v59 = *(void *)(v10 + 152);
  uint64_t v60 = *(void *)(v10 + 160);
  __srca = *(void **)(v10 + 168);
  int v64 = *(_DWORD *)(v10 + 176);
  char v66 = *(unsigned char *)(v10 + 180);
  outlined copy of StateOrBinding<TextFieldState>(v18, v19, v20, v21, v22, v23, v25, v24, v57, v58, v59, v60, (uint64_t)__srca, v64, v66);
  *(void *)(v9 + 72) = v18;
  *(void *)(v9 + 80) = v19;
  *(void *)(v9 + 88) = v20;
  *(void *)(v9 + 96) = v21;
  *(void *)(v9 + 104) = v22;
  *(void *)(v9 + 112) = v23;
  *(void *)(v9 + 120) = v25;
  *(void *)(v9 + 128) = v24;
  *(void *)(v9 + 136) = v57;
  *(void *)(v9 + 144) = v58;
  *(void *)(v9 + 152) = v59;
  *(void *)(v9 + 160) = v60;
  *(void *)(v9 + 168) = __srca;
  *(_DWORD *)(v9 + 176) = v64;
  *(unsigned char *)(v9 + 180) = v66;
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v27 = *(int *)(v26 + 56);
  uint64_t v28 = (void *)(v9 + v27);
  uint64_t v29 = (void *)(v10 + v27);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v31 = v30;
  uint64_t v32 = *(void *)(v30 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v32 + 48))(v29, 1, v30))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v28, v29, *(void *)(*(void *)(v33 - 8) + 64));
    uint64_t v35 = v55;
    uint64_t v34 = v56;
    uint64_t v36 = v54;
  }
  else
  {
    uint64_t v37 = v29[1];
    *uint64_t v28 = *v29;
    v28[1] = v37;
    uint64_t v38 = *(int *)(v31 + 32);
    int v65 = (char *)v28 + v38;
    uint64_t v67 = v28;
    uint64_t v39 = (char *)v29 + v38;
    uint64_t v40 = type metadata accessor for TextSelection(0);
    uint64_t v41 = *(void *)(v40 - 8);
    uint64_t v42 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v41 + 48);
    uint64_t v43 = v39;
    uint64_t v44 = v40;
    swift_retain();
    swift_retain();
    if (v42(v43, 1, v44))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v65, v43, *(void *)(*(void *)(v45 - 8) + 64));
      uint64_t v35 = v55;
      uint64_t v34 = v56;
      uint64_t v36 = v54;
    }
    else
    {
      uint64_t v61 = v41;
      __src = (void *)v43;
      uint64_t v46 = type metadata accessor for TextSelection.Indices(0);
      uint64_t v35 = v55;
      uint64_t v34 = v56;
      uint64_t v36 = v54;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, void *, uint64_t))(*(void *)(v47 - 8) + 16))(v65, __src, v47);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v65, __src, *(void *)(*(void *)(v46 - 8) + 64));
      }
      v65[*(int *)(v44 + 20)] = *((unsigned char *)__src + *(int *)(v44 + 20));
      (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(v65, 0, 1, v44);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(v67, 0, 1, v31);
  }
  uint64_t v48 = type metadata accessor for SystemTextFieldConfiguration(0);
  *(void *)(v9 + *(int *)(v48 + 20)) = *(void *)(v10 + *(int *)(v48 + 20));
  uint64_t v49 = *(int *)(v36 + 24);
  uint64_t v50 = (_OWORD *)(v34 + v49);
  uint64_t v51 = (_OWORD *)(v35 + v49);
  long long v52 = v51[1];
  *uint64_t v50 = *v51;
  v50[1] = v52;
  return v34;
}

uint64_t assignWithCopy for ResolvedSystemTextField(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v91 = a2;
  uint64_t v92 = a1;
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  swift_retain();
  swift_release();
  *(void *)(v11 + 8) = *(void *)(v12 + 8);
  swift_retain();
  swift_release();
  *(void *)(v11 + 16) = *(void *)(v12 + 16);
  *(void *)(v11 + 24) = *(void *)(v12 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v11 + 32) = *(unsigned char *)(v12 + 32);
  *(unsigned char *)(v11 + 33) = *(unsigned char *)(v12 + 33);
  uint64_t v13 = (_OWORD *)(v11 + 40);
  uint64_t v14 = (_OWORD *)(v12 + 40);
  uint64_t v15 = *(void *)(v12 + 64);
  uint64_t v93 = a3;
  if (*(void *)(v11 + 64))
  {
    if (v15)
    {
      uint64_t v16 = *(void *)(v12 + 40);
      uint64_t v17 = *(void *)(v12 + 48);
      char v18 = *(unsigned char *)(v12 + 56);
      outlined copy of Text.Storage(v16, v17, v18);
      uint64_t v19 = *(void *)(v11 + 40);
      uint64_t v20 = *(void *)(v11 + 48);
      char v21 = *(unsigned char *)(v11 + 56);
      *(void *)(v11 + 40) = v16;
      *(void *)(v11 + 48) = v17;
      *(unsigned char *)(v11 + 56) = v18;
      outlined consume of Text.Storage(v19, v20, v21);
      *(void *)(v11 + 64) = *(void *)(v12 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(v11 + 40);
      long long v25 = *(_OWORD *)(v12 + 56);
      _OWORD *v13 = *v14;
      *(_OWORD *)(v11 + 56) = v25;
    }
  }
  else if (v15)
  {
    uint64_t v22 = *(void *)(v12 + 40);
    uint64_t v23 = *(void *)(v12 + 48);
    char v24 = *(unsigned char *)(v12 + 56);
    outlined copy of Text.Storage(v22, v23, v24);
    *(void *)(v11 + 40) = v22;
    *(void *)(v11 + 48) = v23;
    *(unsigned char *)(v11 + 56) = v24;
    *(void *)(v11 + 64) = *(void *)(v12 + 64);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v26 = *(_OWORD *)(v12 + 56);
    _OWORD *v13 = *v14;
    *(_OWORD *)(v11 + 56) = v26;
  }
  uint64_t v27 = *(void *)(v12 + 72);
  uint64_t v28 = *(void *)(v12 + 80);
  uint64_t v29 = *(void *)(v12 + 88);
  uint64_t v30 = *(void *)(v12 + 96);
  uint64_t v32 = *(void *)(v12 + 104);
  uint64_t v31 = *(void *)(v12 + 112);
  uint64_t v34 = *(void *)(v12 + 120);
  uint64_t v33 = *(void *)(v12 + 128);
  uint64_t v94 = *(void *)(v12 + 136);
  uint64_t v95 = *(void *)(v12 + 144);
  uint64_t v96 = *(void *)(v12 + 152);
  uint64_t v97 = *(void *)(v12 + 160);
  uint64_t v99 = *(void *)(v12 + 168);
  int v101 = *(_DWORD *)(v12 + 176);
  char v103 = *(unsigned char *)(v12 + 180);
  outlined copy of StateOrBinding<TextFieldState>(v27, v28, v29, v30, v32, v31, v34, v33, v94, v95, v96, v97, v99, v101, v103);
  uint64_t v35 = *(void *)(v11 + 72);
  uint64_t v36 = *(void *)(v11 + 80);
  uint64_t v37 = *(void *)(v11 + 88);
  uint64_t v38 = *(void *)(v11 + 96);
  uint64_t v39 = *(void *)(v11 + 104);
  uint64_t v40 = *(void *)(v11 + 112);
  uint64_t v41 = *(void *)(v11 + 120);
  uint64_t v42 = *(void *)(v11 + 128);
  long long v43 = *(_OWORD *)(v11 + 136);
  long long v44 = *(_OWORD *)(v11 + 152);
  uint64_t v45 = *(void *)(v11 + 168);
  int v46 = *(_DWORD *)(v11 + 176);
  char v47 = *(unsigned char *)(v11 + 180);
  *(void *)(v11 + 72) = v27;
  *(void *)(v11 + 80) = v28;
  *(void *)(v11 + 88) = v29;
  *(void *)(v11 + 96) = v30;
  *(void *)(v11 + 104) = v32;
  *(void *)(v11 + 112) = v31;
  uint64_t v48 = v12;
  *(void *)(v11 + 120) = v34;
  *(void *)(v11 + 128) = v33;
  *(void *)(v11 + 136) = v94;
  *(void *)(v11 + 144) = v95;
  *(void *)(v11 + 152) = v96;
  *(void *)(v11 + 160) = v97;
  *(void *)(v11 + 168) = v99;
  *(_DWORD *)(v11 + 176) = v101;
  *(unsigned char *)(v11 + 180) = v103;
  outlined consume of StateOrBinding<TextFieldState>(v35, v36, v37, v38, v39, v40, v41, v42, v43, *((uint64_t *)&v43 + 1), v44, *((uint64_t *)&v44 + 1), v45, v46, v47);
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v50 = *(int *)(v49 + 56);
  uint64_t v51 = (char *)(v11 + v50);
  long long v52 = (char *)(v12 + v50);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v54 = v53;
  uint64_t v55 = *(void *)(v53 - 8);
  uint64_t v56 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v55 + 48);
  LODWORD(v33) = v56(v51, 1, v53);
  int v57 = v56(v52, 1, v54);
  if (!v33)
  {
    if (!v57)
    {
      *(void *)uint64_t v51 = *(void *)v52;
      swift_retain();
      swift_release();
      *((void *)v51 + 1) = *((void *)v52 + 1);
      swift_retain();
      swift_release();
      uint64_t v71 = *(int *)(v54 + 32);
      uint64_t v72 = &v51[v71];
      uint64_t v73 = &v52[v71];
      uint64_t v74 = type metadata accessor for TextSelection(0);
      uint64_t v75 = *(void *)(v74 - 8);
      uint64_t v76 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v75 + 48);
      int v77 = v76(v72, 1, v74);
      int v78 = v76(v73, 1, v74);
      if (v77)
      {
        if (!v78)
        {
          uint64_t v79 = type metadata accessor for TextSelection.Indices(0);
          uint64_t v65 = v91;
          uint64_t v64 = v92;
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v80 - 8) + 16))(v72, v73, v80);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v72, v73, *(void *)(*(void *)(v79 - 8) + 64));
          }
          v72[*(int *)(v74 + 20)] = v73[*(int *)(v74 + 20)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v75 + 56))(v72, 0, 1, v74);
          goto LABEL_16;
        }
      }
      else
      {
        if (!v78)
        {
          uint64_t v65 = v91;
          uint64_t v64 = v92;
          if (v92 != v91)
          {
            _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v72, type metadata accessor for TextSelection.Indices);
            uint64_t v89 = type metadata accessor for TextSelection.Indices(0);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v90 - 8) + 16))(v72, v73, v90);
              swift_storeEnumTagMultiPayload();
            }
            else
            {
              memcpy(v72, v73, *(void *)(*(void *)(v89 - 8) + 64));
            }
          }
          v72[*(int *)(v74 + 20)] = v73[*(int *)(v74 + 20)];
          goto LABEL_16;
        }
        _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v72, type metadata accessor for TextSelection);
      }
      type metadata accessor for TextSelection?(0);
      size_t v68 = *(void *)(*(void *)(v83 - 8) + 64);
      uint64_t v69 = v72;
      uint64_t v70 = v73;
LABEL_15:
      memcpy(v69, v70, v68);
      uint64_t v65 = v91;
      uint64_t v64 = v92;
LABEL_16:
      uint64_t v66 = v93;
      goto LABEL_29;
    }
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v51, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
LABEL_14:
    type metadata accessor for Binding<TextSelection?>?(0);
    size_t v68 = *(void *)(*(void *)(v67 - 8) + 64);
    uint64_t v69 = v51;
    uint64_t v70 = v52;
    goto LABEL_15;
  }
  if (v57) {
    goto LABEL_14;
  }
  *(void *)uint64_t v51 = *(void *)v52;
  *((void *)v51 + 1) = *((void *)v52 + 1);
  uint64_t v58 = *(int *)(v54 + 32);
  uint64_t v104 = &v51[v58];
  uint64_t v59 = &v52[v58];
  uint64_t v60 = type metadata accessor for TextSelection(0);
  uint64_t v100 = *(void *)(v60 - 8);
  uint64_t v61 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48);
  uint64_t v62 = v60;
  swift_retain();
  swift_retain();
  uint64_t v102 = v62;
  if (v61(v59, 1, v62))
  {
    type metadata accessor for TextSelection?(0);
    memcpy(v104, v59, *(void *)(*(void *)(v63 - 8) + 64));
    uint64_t v65 = v91;
    uint64_t v64 = v92;
    uint64_t v66 = v93;
    uint64_t v48 = v12;
  }
  else
  {
    uint64_t v81 = type metadata accessor for TextSelection.Indices(0);
    uint64_t v98 = v59;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v82 - 8) + 16))(v104, v59, v82);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v104, v59, *(void *)(*(void *)(v81 - 8) + 64));
    }
    uint64_t v65 = v91;
    uint64_t v64 = v92;
    uint64_t v48 = v12;
    v104[*(int *)(v102 + 20)] = v98[*(int *)(v102 + 20)];
    (*(void (**)(char *, void, uint64_t))(v100 + 56))(v104, 0, 1);
    uint64_t v66 = v93;
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v51, 0, 1, v54);
LABEL_29:
  uint64_t v84 = type metadata accessor for SystemTextFieldConfiguration(0);
  *(void *)(v11 + *(int *)(v84 + 20)) = *(void *)(v48 + *(int *)(v84 + 20));
  uint64_t v85 = *(int *)(v66 + 24);
  char v86 = (_DWORD *)(v64 + v85);
  uint64_t v87 = (_DWORD *)(v65 + v85);
  _DWORD *v86 = *v87;
  v86[1] = v87[1];
  v86[2] = v87[2];
  v86[3] = v87[3];
  v86[4] = v87[4];
  v86[5] = v87[5];
  v86[6] = v87[6];
  v86[7] = v87[7];
  return v64;
}

uint64_t initializeWithTake for ResolvedSystemTextField(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  long long v9 = *(_OWORD *)(a2 + v6 + 16);
  *(_OWORD *)uint64_t v7 = *(_OWORD *)(a2 + v6);
  *(_OWORD *)(v7 + 16) = v9;
  *(unsigned char *)(v7 + 32) = *(unsigned char *)(a2 + v6 + 32);
  *(unsigned char *)(v7 + 33) = *(unsigned char *)(a2 + v6 + 33);
  *(_OWORD *)(v7 + 40) = *(_OWORD *)(a2 + v6 + 40);
  *(_OWORD *)(v7 + 56) = *(_OWORD *)(a2 + v6 + 56);
  long long v10 = *(_OWORD *)(a2 + v6 + 72);
  long long v11 = *(_OWORD *)(a2 + v6 + 88);
  *(_OWORD *)(v7 + 104) = *(_OWORD *)(a2 + v6 + 104);
  *(_OWORD *)(v7 + 88) = v11;
  *(_OWORD *)(v7 + 72) = v10;
  long long v12 = *(_OWORD *)(a2 + v6 + 120);
  long long v13 = *(_OWORD *)(a2 + v6 + 136);
  long long v14 = *(_OWORD *)(a2 + v6 + 152);
  *(_OWORD *)(v7 + 165) = *(_OWORD *)(a2 + v6 + 165);
  *(_OWORD *)(v7 + 152) = v14;
  *(_OWORD *)(v7 + 136) = v13;
  *(_OWORD *)(v7 + 120) = v12;
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v16 = *(int *)(v15 + 56);
  uint64_t v17 = (void *)(v7 + v16);
  char v18 = (void *)(v8 + v16);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v20 = v19;
  uint64_t v21 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48))(v18, 1, v19))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v17, v18, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    uint64_t v23 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v23;
    uint64_t v24 = *(int *)(v20 + 32);
    __dst = (char *)v17 + v24;
    uint64_t v39 = v3;
    long long v25 = (char *)v18 + v24;
    uint64_t v26 = type metadata accessor for TextSelection(0);
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(__dst, v25, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      uint64_t v37 = v27;
      uint64_t v29 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(__dst, v25, v30);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(__dst, v25, *(void *)(*(void *)(v29 - 8) + 64));
      }
      __dst[*(int *)(v26 + 20)] = v25[*(int *)(v26 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(__dst, 0, 1, v26);
    }
    uint64_t v3 = v39;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v17, 0, 1, v20);
  }
  uint64_t v31 = type metadata accessor for SystemTextFieldConfiguration(0);
  *(void *)(v7 + *(int *)(v31 + 20)) = *(void *)(v8 + *(int *)(v31 + 20));
  uint64_t v32 = *(int *)(v3 + 24);
  uint64_t v33 = (_OWORD *)(a1 + v32);
  uint64_t v34 = (_OWORD *)(a2 + v32);
  long long v35 = v34[1];
  *uint64_t v33 = *v34;
  v33[1] = v35;
  return a1;
}

uint64_t assignWithTake for ResolvedSystemTextField(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = (uint64_t)a2 + v10;
  *(void *)(a1 + v10) = *(uint64_t *)((char *)a2 + v10);
  swift_release();
  *(void *)(v11 + 8) = *(void *)(v12 + 8);
  swift_release();
  uint64_t v13 = *(void *)(v12 + 24);
  *(void *)(v11 + 16) = *(void *)(v12 + 16);
  *(void *)(v11 + 24) = v13;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v11 + 32) = *(unsigned char *)(v12 + 32);
  *(unsigned char *)(v11 + 33) = *(unsigned char *)(v12 + 33);
  uint64_t v79 = a3;
  uint64_t v80 = a2;
  if (*(void *)(v11 + 64))
  {
    if (*(void *)(v12 + 64))
    {
      char v14 = *(unsigned char *)(v12 + 56);
      uint64_t v15 = *(void *)(v11 + 40);
      uint64_t v16 = *(void *)(v11 + 48);
      char v17 = *(unsigned char *)(v11 + 56);
      *(_OWORD *)(v11 + 40) = *(_OWORD *)(v12 + 40);
      *(unsigned char *)(v11 + 56) = v14;
      outlined consume of Text.Storage(v15, v16, v17);
      *(void *)(v11 + 64) = *(void *)(v12 + 64);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(v11 + 40);
  }
  long long v18 = *(_OWORD *)(v12 + 56);
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(v12 + 40);
  *(_OWORD *)(v11 + 56) = v18;
LABEL_6:
  uint64_t v19 = *(void *)(v12 + 168);
  int v20 = *(_DWORD *)(v12 + 176);
  char v21 = *(unsigned char *)(v12 + 180);
  uint64_t v22 = *(void *)(v11 + 72);
  uint64_t v23 = *(void *)(v11 + 80);
  uint64_t v24 = *(void *)(v11 + 88);
  uint64_t v25 = *(void *)(v11 + 96);
  uint64_t v26 = *(void *)(v11 + 104);
  uint64_t v27 = *(void *)(v11 + 112);
  uint64_t v28 = *(void *)(v11 + 120);
  uint64_t v29 = *(void *)(v11 + 128);
  long long v30 = *(_OWORD *)(v11 + 136);
  long long v31 = *(_OWORD *)(v11 + 152);
  uint64_t v32 = *(void *)(v11 + 168);
  int v33 = *(_DWORD *)(v11 + 176);
  char v34 = *(unsigned char *)(v11 + 180);
  *(_OWORD *)(v11 + 72) = *(_OWORD *)(v12 + 72);
  *(_OWORD *)(v11 + 88) = *(_OWORD *)(v12 + 88);
  *(_OWORD *)(v11 + 104) = *(_OWORD *)(v12 + 104);
  *(_OWORD *)(v11 + 120) = *(_OWORD *)(v12 + 120);
  *(_OWORD *)(v11 + 136) = *(_OWORD *)(v12 + 136);
  *(_OWORD *)(v11 + 152) = *(_OWORD *)(v12 + 152);
  *(void *)(v11 + 168) = v19;
  *(_DWORD *)(v11 + 176) = v20;
  *(unsigned char *)(v11 + 180) = v21;
  outlined consume of StateOrBinding<TextFieldState>(v22, v23, v24, v25, v26, v27, v28, v29, v30, *((uint64_t *)&v30 + 1), v31, *((uint64_t *)&v31 + 1), v32, v33, v34);
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v36 = *(int *)(v35 + 56);
  uint64_t v37 = (char *)(v11 + v36);
  uint64_t v38 = (char *)(v12 + v36);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v40 = v39;
  uint64_t v41 = *(void *)(v39 - 8);
  uint64_t v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48);
  int v43 = v42(v37, 1, v39);
  int v44 = v42(v38, 1, v40);
  if (!v43)
  {
    if (!v44)
    {
      *(void *)uint64_t v37 = *(void *)v38;
      swift_release();
      *((void *)v37 + 1) = *((void *)v38 + 1);
      swift_release();
      uint64_t v58 = *(int *)(v40 + 32);
      uint64_t v59 = &v37[v58];
      uint64_t v60 = &v38[v58];
      uint64_t v61 = type metadata accessor for TextSelection(0);
      uint64_t v62 = *(void *)(v61 - 8);
      uint64_t v63 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v62 + 48);
      int v64 = v63(v59, 1, v61);
      int v65 = v63(v60, 1, v61);
      if (v64)
      {
        if (!v65)
        {
          uint64_t v66 = type metadata accessor for TextSelection.Indices(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 32))(v59, v60, v67);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v59, v60, *(void *)(*(void *)(v66 - 8) + 64));
          }
          v59[*(int *)(v61 + 20)] = v60[*(int *)(v61 + 20)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v65)
        {
          uint64_t v56 = v80;
          if ((uint64_t *)a1 != v80)
          {
            _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v59, type metadata accessor for TextSelection.Indices);
            uint64_t v76 = type metadata accessor for TextSelection.Indices(0);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v77 - 8) + 32))(v59, v60, v77);
              swift_storeEnumTagMultiPayload();
            }
            else
            {
              memcpy(v59, v60, *(void *)(*(void *)(v76 - 8) + 64));
            }
          }
          v59[*(int *)(v61 + 20)] = v60[*(int *)(v61 + 20)];
          goto LABEL_15;
        }
        _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v59, type metadata accessor for TextSelection);
      }
      type metadata accessor for TextSelection?(0);
      size_t v53 = *(void *)(*(void *)(v69 - 8) + 64);
      uint64_t v54 = v59;
      uint64_t v55 = v60;
LABEL_13:
      memcpy(v54, v55, v53);
LABEL_14:
      uint64_t v56 = v80;
LABEL_15:
      uint64_t v57 = v79;
      goto LABEL_28;
    }
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v37, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
LABEL_12:
    type metadata accessor for Binding<TextSelection?>?(0);
    size_t v53 = *(void *)(*(void *)(v52 - 8) + 64);
    uint64_t v54 = v37;
    uint64_t v55 = v38;
    goto LABEL_13;
  }
  if (v44) {
    goto LABEL_12;
  }
  uint64_t v45 = *((void *)v38 + 1);
  *(void *)uint64_t v37 = *(void *)v38;
  *((void *)v37 + 1) = v45;
  uint64_t v46 = *(int *)(v40 + 32);
  char v47 = &v37[v46];
  uint64_t v48 = &v38[v46];
  uint64_t v49 = type metadata accessor for TextSelection(0);
  uint64_t v50 = *(void *)(v49 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
  {
    type metadata accessor for TextSelection?(0);
    memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
  }
  else
  {
    uint64_t v78 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 32))(v47, v48, v68);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v47, v48, *(void *)(*(void *)(v78 - 8) + 64));
    }
    v47[*(int *)(v49 + 20)] = v48[*(int *)(v49 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
  }
  uint64_t v57 = v79;
  uint64_t v56 = v80;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v37, 0, 1, v40);
LABEL_28:
  uint64_t v70 = type metadata accessor for SystemTextFieldConfiguration(0);
  *(void *)(v11 + *(int *)(v70 + 20)) = *(void *)(v12 + *(int *)(v70 + 20));
  uint64_t v71 = *(int *)(v57 + 24);
  uint64_t v72 = (_OWORD *)(a1 + v71);
  uint64_t v73 = (_OWORD *)((char *)v56 + v71);
  long long v74 = v73[1];
  *uint64_t v72 = *v73;
  v72[1] = v74;
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedSystemTextField(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187B86094);
}

uint64_t sub_187B86094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1) {
      return (v4 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for SystemTextFieldConfiguration(0);
    char v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ResolvedSystemTextField(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187B86150);
}

uint64_t sub_187B86150(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 8) = -(char)a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for SystemTextFieldConfiguration(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for ResolvedSystemTextField()
{
  uint64_t result = type metadata accessor for SystemTextFieldConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedSystemTextField()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187B862B4()
{
  unint64_t v1 = (int *)(type metadata accessor for ResolvedSystemTextField(0) - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  outlined consume of Environment<Bool>.Content(*(void *)v2, *(unsigned char *)(v2 + 8));
  uint64_t v3 = v2 + v1[7];
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v3 + 64))
  {
    outlined consume of Text.Storage(*(void *)(v3 + 40), *(void *)(v3 + 48), *(unsigned char *)(v3 + 56));
    swift_bridgeObjectRelease();
  }
  outlined consume of StateOrBinding<TextFieldState>(*(void *)(v3 + 72), *(void *)(v3 + 80), *(void *)(v3 + 88), *(void *)(v3 + 96), *(void *)(v3 + 104), *(void *)(v3 + 112), *(void *)(v3 + 120), *(void *)(v3 + 128), *(void *)(v3 + 136), *(void *)(v3 + 144), *(void *)(v3 + 152), *(void *)(v3 + 160), *(void *)(v3 + 168), *(_DWORD *)(v3 + 176), *(unsigned char *)(v3 + 180));
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v5 = v3 + *(int *)(v4 + 56);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v7 = v6;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    swift_release();
    swift_release();
    uint64_t v8 = v5 + *(int *)(v7 + 32);
    uint64_t v9 = type metadata accessor for TextSelection(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
    {
      type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v8, v10);
      }
    }
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ResolvedSystemTextField.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ResolvedSystemTextField.adaptorView(label:)(a1, a2);
}

uint64_t sub_187B865AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  return keypath_get_86Tm(a1, a2, MEMORY[0x1E4F40108], a3);
}

uint64_t sub_187B865C4()
{
  return EnvironmentValues.disableLinkColor.setter();
}

uint64_t type metadata accessor for PlatformTextFieldAdaptor(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, type metadata singleton initialization cache for PlatformTextFieldAdaptor);
}

uint64_t type metadata accessor for TextViewAdaptor(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for TextViewAdaptor);
}

void type metadata accessor for ModifiedContent<TextViewAdaptor, _PaddingLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>(uint64_t a1)
{
}

void type metadata accessor for _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>()
{
  if (!lazy cache variable for type metadata for _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>)
  {
    type metadata accessor for StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?(255);
    lazy protocol witness table accessor for type StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>? and conformance <A> A?(&lazy protocol witness table cache variable for type StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>? and conformance <A> A?, type metadata accessor for StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?, (void (*)(void))lazy protocol witness table accessor for type StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView> and conformance StrokeShapeView<A, B, C>);
    unint64_t v0 = type metadata accessor for _BackgroundModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>);
    }
  }
}

void type metadata accessor for StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?(uint64_t a1)
{
}

void type metadata accessor for StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>()
{
  if (!lazy cache variable for type metadata for StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>)
  {
    lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle();
    unint64_t v0 = type metadata accessor for StrokeShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView> and conformance StrokeShapeView<A, B, C>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView> and conformance StrokeShapeView<A, B, C>, (void (*)(uint64_t))type metadata accessor for StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4(255);
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void type metadata accessor for _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>()
{
  if (!lazy cache variable for type metadata for _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>)
  {
    type metadata accessor for _ShapeView<RoundedRectangle, Color>?(255);
    lazy protocol witness table accessor for type StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>? and conformance <A> A?(&lazy protocol witness table cache variable for type _ShapeView<RoundedRectangle, Color>? and conformance <A> A?, type metadata accessor for _ShapeView<RoundedRectangle, Color>?, (void (*)(void))lazy protocol witness table accessor for type _ShapeView<RoundedRectangle, Color> and conformance _ShapeView<A, B>);
    unint64_t v0 = type metadata accessor for _BackgroundModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>);
    }
  }
}

void type metadata accessor for _ShapeView<RoundedRectangle, Color>?(uint64_t a1)
{
}

void type metadata accessor for _ShapeView<RoundedRectangle, Color>()
{
  if (!lazy cache variable for type metadata for _ShapeView<RoundedRectangle, Color>)
  {
    lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<RoundedRectangle, Color>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>? and conformance <A> A?(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _ShapeView<RoundedRectangle, Color> and conformance _ShapeView<A, B>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ShapeView<RoundedRectangle, Color> and conformance _ShapeView<A, B>, (void (*)(uint64_t))type metadata accessor for _ShapeView<RoundedRectangle, Color>);
}

uint64_t sub_187B86AF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  return keypath_get_86Tm(a1, a2, MEMORY[0x1E4F40100], a3);
}

uint64_t keypath_get_86Tm@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X3>, unsigned char *a4@<X8>)
{
  uint64_t result = a3(a1, a2);
  *a4 = result & 1;
  return result;
}

uint64_t sub_187B86B4C()
{
  return EnvironmentValues.isVisionEnabled.setter();
}

uint64_t initializeBufferWithCopyOfBuffer for PlatformTextFieldAdaptor(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = a2[3];
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    *(unsigned char *)(a1 + 33) = *((unsigned char *)a2 + 33);
    uint64_t v9 = a2[8];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v100 = a3;
    if (v9)
    {
      uint64_t v10 = a2[5];
      uint64_t v11 = a2[6];
      char v12 = *((unsigned char *)a2 + 56);
      outlined copy of Text.Storage(v10, v11, v12);
      *(void *)(a1 + 40) = v10;
      *(void *)(a1 + 48) = v11;
      *(unsigned char *)(a1 + 56) = v12;
      *(void *)(a1 + 64) = a2[8];
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v13 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 56) = v13;
    }
    uint64_t v14 = a2[9];
    uint64_t v15 = a2[10];
    uint64_t v16 = a2[11];
    uint64_t v17 = a2[12];
    uint64_t v18 = a2[13];
    uint64_t v19 = a2[14];
    uint64_t v21 = a2[15];
    uint64_t v20 = a2[16];
    uint64_t v91 = a2[17];
    uint64_t v92 = a2[18];
    uint64_t v93 = a2[19];
    uint64_t v94 = a2[20];
    uint64_t v95 = a2[21];
    int __dsta = *((_DWORD *)a2 + 44);
    char v98 = *((unsigned char *)a2 + 180);
    outlined copy of StateOrBinding<TextFieldState>(v14, v15, v16, v17, v18, v19, v21, v20, v91, v92, v93, v94, v95, __dsta, v98);
    *(void *)(a1 + 72) = v14;
    *(void *)(a1 + 80) = v15;
    *(void *)(a1 + 88) = v16;
    *(void *)(a1 + 96) = v17;
    *(void *)(a1 + 104) = v18;
    *(void *)(a1 + 112) = v19;
    *(void *)(a1 + 120) = v21;
    *(void *)(a1 + 128) = v20;
    *(void *)(a1 + 136) = v91;
    *(void *)(a1 + 144) = v92;
    *(void *)(a1 + 152) = v93;
    *(void *)(a1 + 160) = v94;
    *(void *)(a1 + 168) = v95;
    *(_DWORD *)(a1 + 176) = __dsta;
    *(unsigned char *)(a1 + 180) = v98;
    _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
    uint64_t v23 = *(int *)(v22 + 56);
    uint64_t v24 = (void *)(a1 + v23);
    uint64_t v99 = a2;
    uint64_t v25 = (uint64_t *)((char *)a2 + v23);
    type metadata accessor for Binding<TextSelection?>(0);
    uint64_t v27 = v26;
    uint64_t v28 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v28 + 48))(v25, 1, v26))
    {
      type metadata accessor for Binding<TextSelection?>?(0);
      memcpy(v24, v25, *(void *)(*(void *)(v29 - 8) + 64));
      uint64_t v30 = v100;
    }
    else
    {
      uint64_t v31 = v25[1];
      *uint64_t v24 = *v25;
      v24[1] = v31;
      uint64_t v32 = *(int *)(v27 + 32);
      __dst = (char *)v24 + v32;
      int v33 = (char *)v25 + v32;
      uint64_t v34 = type metadata accessor for TextSelection(0);
      uint64_t v35 = *(void *)(v34 - 8);
      uint64_t v36 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48);
      uint64_t v37 = v33;
      uint64_t v38 = v34;
      swift_retain();
      swift_retain();
      if (v36(v37, 1, v38))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v37, *(void *)(*(void *)(v39 - 8) + 64));
      }
      else
      {
        uint64_t v40 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, const void *, uint64_t))(*(void *)(v41 - 8) + 16))(__dst, v37, v41);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v37, *(void *)(*(void *)(v40 - 8) + 64));
        }
        __dst[*(int *)(v38 + 20)] = *((unsigned char *)v37 + *(int *)(v38 + 20));
        (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(__dst, 0, 1, v38);
      }
      uint64_t v30 = v100;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v24, 0, 1, v27);
    }
    uint64_t v42 = type metadata accessor for SystemTextFieldConfiguration(0);
    *(void *)(a1 + *(int *)(v42 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v42 + 20));
    uint64_t v43 = *(int *)(v30 + 20);
    uint64_t v44 = a1 + v43;
    uint64_t v45 = (uint64_t)a2 + v43;
    uint64_t v46 = *(uint64_t *)((char *)a2 + v43);
    uint64_t v47 = *(uint64_t *)((char *)a2 + v43 + 8);
    *(void *)uint64_t v44 = v46;
    *(void *)(v44 + 8) = v47;
    *(_DWORD *)(v44 + 16) = *(_DWORD *)(v45 + 16);
    uint64_t v48 = *(void **)(v45 + 24);
    swift_bridgeObjectRetain();
    if (v48 == (void *)1)
    {
      long long v49 = *(_OWORD *)(v45 + 200);
      *(_OWORD *)(v44 + 184) = *(_OWORD *)(v45 + 184);
      *(_OWORD *)(v44 + 200) = v49;
      *(_OWORD *)(v44 + 216) = *(_OWORD *)(v45 + 216);
      *(void *)(v44 + 232) = *(void *)(v45 + 232);
      long long v50 = *(_OWORD *)(v45 + 136);
      *(_OWORD *)(v44 + 120) = *(_OWORD *)(v45 + 120);
      *(_OWORD *)(v44 + 136) = v50;
      long long v51 = *(_OWORD *)(v45 + 168);
      *(_OWORD *)(v44 + 152) = *(_OWORD *)(v45 + 152);
      *(_OWORD *)(v44 + 168) = v51;
      long long v52 = *(_OWORD *)(v45 + 72);
      *(_OWORD *)(v44 + 56) = *(_OWORD *)(v45 + 56);
      *(_OWORD *)(v44 + 72) = v52;
      long long v53 = *(_OWORD *)(v45 + 104);
      *(_OWORD *)(v44 + 88) = *(_OWORD *)(v45 + 88);
      *(_OWORD *)(v44 + 104) = v53;
      long long v54 = *(_OWORD *)(v45 + 40);
      *(_OWORD *)(v44 + 24) = *(_OWORD *)(v45 + 24);
      *(_OWORD *)(v44 + 40) = v54;
    }
    else
    {
      uint64_t v55 = *(void **)(v45 + 32);
      uint64_t v56 = *(void **)(v45 + 40);
      *(void *)(v44 + 24) = v48;
      *(void *)(v44 + 32) = v55;
      *(void *)(v44 + 40) = v56;
      uint64_t v57 = (_OWORD *)(v44 + 48);
      uint64_t v58 = (_OWORD *)(v45 + 48);
      unint64_t v59 = *(void *)(v45 + 168);
      id v60 = v48;
      id v61 = v55;
      id v62 = v56;
      if (v59 >> 1 == 4294967294)
      {
        long long v63 = *(_OWORD *)(v45 + 192);
        *(_OWORD *)(v44 + 176) = *(_OWORD *)(v45 + 176);
        *(_OWORD *)(v44 + 192) = v63;
        *(_OWORD *)(v44 + 208) = *(_OWORD *)(v45 + 208);
        *(_DWORD *)(v44 + 223) = *(_DWORD *)(v45 + 223);
        long long v64 = *(_OWORD *)(v45 + 128);
        *(_OWORD *)(v44 + 112) = *(_OWORD *)(v45 + 112);
        *(_OWORD *)(v44 + 128) = v64;
        long long v65 = *(_OWORD *)(v45 + 160);
        *(_OWORD *)(v44 + 144) = *(_OWORD *)(v45 + 144);
        *(_OWORD *)(v44 + 160) = v65;
        long long v66 = *(_OWORD *)(v45 + 64);
        *uint64_t v57 = *v58;
        *(_OWORD *)(v44 + 64) = v66;
        long long v67 = *(_OWORD *)(v45 + 96);
        *(_OWORD *)(v44 + 80) = *(_OWORD *)(v45 + 80);
        *(_OWORD *)(v44 + 96) = v67;
        uint64_t v30 = v100;
      }
      else
      {
        int v68 = *(unsigned __int8 *)(v45 + 56);
        if (v68 == 255)
        {
          *(void *)uint64_t v57 = *(void *)v58;
          *(unsigned char *)(v44 + 56) = *(unsigned char *)(v45 + 56);
        }
        else
        {
          uint64_t v69 = *(void **)(v45 + 48);
          outlined copy of GraphicsImage.Contents(v69, *(unsigned char *)(v45 + 56));
          *(void *)(v44 + 48) = v69;
          *(unsigned char *)(v44 + 56) = v68;
          unint64_t v59 = *(void *)(v45 + 168);
        }
        uint64_t v30 = v100;
        *(void *)(v44 + 64) = *(void *)(v45 + 64);
        *(_OWORD *)(v44 + 72) = *(_OWORD *)(v45 + 72);
        *(unsigned char *)(v44 + 88) = *(unsigned char *)(v45 + 88);
        *(_OWORD *)(v44 + 92) = *(_OWORD *)(v45 + 92);
        *(unsigned char *)(v44 + 108) = *(unsigned char *)(v45 + 108);
        long long v70 = *(_OWORD *)(v45 + 128);
        *(_OWORD *)(v44 + 112) = *(_OWORD *)(v45 + 112);
        *(_OWORD *)(v44 + 128) = v70;
        *(_WORD *)(v44 + 144) = *(_WORD *)(v45 + 144);
        *(unsigned char *)(v44 + 146) = *(unsigned char *)(v45 + 146);
        *(unsigned char *)(v44 + 147) = *(unsigned char *)(v45 + 147);
        if (v59 >> 1 == 0xFFFFFFFF)
        {
          long long v71 = *(_OWORD *)(v45 + 168);
          *(_OWORD *)(v44 + 152) = *(_OWORD *)(v45 + 152);
          *(_OWORD *)(v44 + 168) = v71;
        }
        else
        {
          uint64_t v72 = *(void *)(v45 + 152);
          uint64_t v73 = *(void *)(v45 + 160);
          uint64_t v74 = *(void *)(v45 + 176);
          outlined copy of AccessibilityImageLabel(v72, v73, v59);
          *(void *)(v44 + 152) = v72;
          *(void *)(v44 + 160) = v73;
          *(void *)(v44 + 168) = v59;
          *(void *)(v44 + 176) = v74;
        }
        uint64_t v75 = *(void *)(v45 + 192);
        *(void *)(v44 + 184) = *(void *)(v45 + 184);
        *(void *)(v44 + 192) = v75;
        *(_WORD *)(v44 + 200) = *(_WORD *)(v45 + 200);
        *(_DWORD *)(v44 + 204) = *(_DWORD *)(v45 + 204);
        *(unsigned char *)(v44 + 208) = *(unsigned char *)(v45 + 208);
        uint64_t v76 = *(void **)(v45 + 216);
        *(void *)(v44 + 216) = v76;
        *(_WORD *)(v44 + 224) = *(_WORD *)(v45 + 224);
        *(unsigned char *)(v44 + 226) = *(unsigned char *)(v45 + 226);
        swift_unknownObjectRetain();
        swift_retain();
        id v77 = v76;
      }
      *(unsigned char *)(v44 + 227) = *(unsigned char *)(v45 + 227);
      *(void *)(v44 + 232) = *(void *)(v45 + 232);
      swift_retain();
    }
    uint64_t v78 = *(void *)(v45 + 288);
    if (v78 == 1)
    {
      long long v79 = *(_OWORD *)(v45 + 256);
      *(_OWORD *)(v44 + 240) = *(_OWORD *)(v45 + 240);
      *(_OWORD *)(v44 + 256) = v79;
      long long v80 = *(_OWORD *)(v45 + 288);
      *(_OWORD *)(v44 + 272) = *(_OWORD *)(v45 + 272);
      *(_OWORD *)(v44 + 288) = v80;
    }
    else
    {
      *(_OWORD *)(v44 + 240) = *(_OWORD *)(v45 + 240);
      *(void *)(v44 + 256) = *(void *)(v45 + 256);
      uint64_t v81 = (_OWORD *)(v44 + 264);
      uint64_t v82 = (_OWORD *)(v45 + 264);
      if (v78)
      {
        uint64_t v83 = *(void *)(v45 + 296);
        *(void *)(v44 + 288) = v78;
        *(void *)(v44 + 296) = v83;
        (**(void (***)(_OWORD *, _OWORD *))(v78 - 8))(v81, v82);
      }
      else
      {
        long long v84 = *(_OWORD *)(v45 + 280);
        *uint64_t v81 = *v82;
        *(_OWORD *)(v44 + 280) = v84;
        *(void *)(v44 + 296) = *(void *)(v45 + 296);
      }
    }
    *(void *)(v44 + 304) = *(void *)(v45 + 304);
    *(unsigned char *)(v44 + 312) = *(unsigned char *)(v45 + 312);
    uint64_t v85 = *(void *)(v45 + 328);
    *(void *)(v44 + 320) = *(void *)(v45 + 320);
    *(void *)(v44 + 328) = v85;
    uint64_t v86 = *(int *)(v30 + 24);
    uint64_t v87 = a1 + v86;
    uint64_t v88 = (uint64_t)v99 + v86;
    *(unsigned char *)(v87 + 32) = *(unsigned char *)(v88 + 32);
    long long v89 = *(_OWORD *)(v88 + 16);
    *(_OWORD *)uint64_t v87 = *(_OWORD *)v88;
    *(_OWORD *)(v87 + 16) = v89;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for PlatformTextFieldAdaptor(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 64))
  {
    outlined consume of Text.Storage(*(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
    swift_bridgeObjectRelease();
  }
  outlined consume of StateOrBinding<TextFieldState>(*(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144), *(void *)(a1 + 152), *(void *)(a1 + 160), *(void *)(a1 + 168), *(_DWORD *)(a1 + 176), *(unsigned char *)(a1 + 180));
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v5 = a1 + *(int *)(v4 + 56);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v7 = v6;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    swift_release();
    swift_release();
    uint64_t v8 = v5 + *(int *)(v7 + 32);
    uint64_t v9 = type metadata accessor for TextSelection(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
    {
      type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v8, v10);
      }
    }
  }
  uint64_t v11 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  char v12 = *(void **)(v11 + 24);
  if (v12 != (void *)1)
  {

    uint64_t v13 = *(void *)(v11 + 168);
    unint64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
    if ((v13 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      int v15 = *(unsigned __int8 *)(v11 + 56);
      if (v15 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(v11 + 48), v15);
        uint64_t v13 = *(void *)(v11 + 168);
        unint64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v14 != 0x1FFFFFFFELL) {
        outlined consume of AccessibilityImageLabel(*(void *)(v11 + 152), *(void *)(v11 + 160), v13);
      }
      swift_unknownObjectRelease();
      swift_release();
    }
    swift_release();
  }
  if (*(void *)(v11 + 288) >= 2uLL) {
    __swift_destroy_boxed_opaque_existential_1(v11 + 264);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PlatformTextFieldAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v7 = *(void *)(a2 + 64);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    uint64_t v8 = *(void *)(a2 + 40);
    uint64_t v9 = *(void *)(a2 + 48);
    char v10 = *(unsigned char *)(a2 + 56);
    outlined copy of Text.Storage(v8, v9, v10);
    *(void *)(a1 + 40) = v8;
    *(void *)(a1 + 48) = v9;
    *(unsigned char *)(a1 + 56) = v10;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v11;
  }
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a2 + 80);
  uint64_t v14 = *(void *)(a2 + 88);
  uint64_t v15 = *(void *)(a2 + 96);
  uint64_t v16 = *(void *)(a2 + 104);
  uint64_t v17 = *(void *)(a2 + 112);
  uint64_t v19 = *(void *)(a2 + 120);
  uint64_t v18 = *(void *)(a2 + 128);
  uint64_t v88 = *(void *)(a2 + 136);
  uint64_t v89 = *(void *)(a2 + 144);
  uint64_t v90 = *(void *)(a2 + 152);
  uint64_t v91 = *(void *)(a2 + 160);
  int __dsta = *(void **)(a2 + 168);
  int v94 = *(_DWORD *)(a2 + 176);
  char v95 = *(unsigned char *)(a2 + 180);
  outlined copy of StateOrBinding<TextFieldState>(v12, v13, v14, v15, v16, v17, v19, v18, v88, v89, v90, v91, (uint64_t)__dsta, v94, v95);
  *(void *)(a1 + 72) = v12;
  *(void *)(a1 + 80) = v13;
  *(void *)(a1 + 88) = v14;
  *(void *)(a1 + 96) = v15;
  *(void *)(a1 + 104) = v16;
  *(void *)(a1 + 112) = v17;
  *(void *)(a1 + 120) = v19;
  *(void *)(a1 + 128) = v18;
  *(void *)(a1 + 136) = v88;
  *(void *)(a1 + 144) = v89;
  *(void *)(a1 + 152) = v90;
  *(void *)(a1 + 160) = v91;
  *(void *)(a1 + 168) = __dsta;
  *(_DWORD *)(a1 + 176) = v94;
  *(unsigned char *)(a1 + 180) = v95;
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v21 = *(int *)(v20 + 56);
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v96 = a2;
  uint64_t v23 = (void *)(a2 + v21);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v25 = v24;
  uint64_t v26 = *(void *)(v24 - 8);
  uint64_t v27 = a1;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v26 + 48))(v23, 1, v24))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v22, v23, *(void *)(*(void *)(v28 - 8) + 64));
    uint64_t v29 = a3;
  }
  else
  {
    uint64_t v30 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v30;
    uint64_t v31 = *(int *)(v25 + 32);
    __dst = (char *)v22 + v31;
    uint64_t v32 = (char *)v23 + v31;
    uint64_t v33 = type metadata accessor for TextSelection(0);
    uint64_t v34 = *(void *)(v33 - 8);
    uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
    swift_retain();
    swift_retain();
    if (v35(v32, 1, v33))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(__dst, v32, *(void *)(*(void *)(v36 - 8) + 64));
      uint64_t v27 = a1;
      uint64_t v29 = a3;
    }
    else
    {
      uint64_t v37 = type metadata accessor for TextSelection.Indices(0);
      uint64_t v29 = a3;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16))(__dst, v32, v38);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(__dst, v32, *(void *)(*(void *)(v37 - 8) + 64));
      }
      __dst[*(int *)(v33 + 20)] = v32[*(int *)(v33 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(__dst, 0, 1, v33);
      uint64_t v27 = a1;
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v22, 0, 1, v25);
  }
  uint64_t v39 = type metadata accessor for SystemTextFieldConfiguration(0);
  *(void *)(v27 + *(int *)(v39 + 20)) = *(void *)(v96 + *(int *)(v39 + 20));
  uint64_t v40 = *(int *)(v29 + 20);
  uint64_t v41 = v27 + v40;
  uint64_t v42 = v96 + v40;
  uint64_t v43 = *(void *)(v96 + v40);
  uint64_t v44 = *(void *)(v96 + v40 + 8);
  *(void *)uint64_t v41 = v43;
  *(void *)(v41 + 8) = v44;
  *(_DWORD *)(v41 + 16) = *(_DWORD *)(v42 + 16);
  uint64_t v45 = *(void **)(v42 + 24);
  swift_bridgeObjectRetain();
  if (v45 == (void *)1)
  {
    long long v46 = *(_OWORD *)(v42 + 200);
    *(_OWORD *)(v41 + 184) = *(_OWORD *)(v42 + 184);
    *(_OWORD *)(v41 + 200) = v46;
    *(_OWORD *)(v41 + 216) = *(_OWORD *)(v42 + 216);
    *(void *)(v41 + 232) = *(void *)(v42 + 232);
    long long v47 = *(_OWORD *)(v42 + 136);
    *(_OWORD *)(v41 + 120) = *(_OWORD *)(v42 + 120);
    *(_OWORD *)(v41 + 136) = v47;
    long long v48 = *(_OWORD *)(v42 + 168);
    *(_OWORD *)(v41 + 152) = *(_OWORD *)(v42 + 152);
    *(_OWORD *)(v41 + 168) = v48;
    long long v49 = *(_OWORD *)(v42 + 72);
    *(_OWORD *)(v41 + 56) = *(_OWORD *)(v42 + 56);
    *(_OWORD *)(v41 + 72) = v49;
    long long v50 = *(_OWORD *)(v42 + 104);
    *(_OWORD *)(v41 + 88) = *(_OWORD *)(v42 + 88);
    *(_OWORD *)(v41 + 104) = v50;
    long long v51 = *(_OWORD *)(v42 + 40);
    *(_OWORD *)(v41 + 24) = *(_OWORD *)(v42 + 24);
    *(_OWORD *)(v41 + 40) = v51;
  }
  else
  {
    long long v52 = *(void **)(v42 + 32);
    long long v53 = *(void **)(v42 + 40);
    *(void *)(v41 + 24) = v45;
    *(void *)(v41 + 32) = v52;
    *(void *)(v41 + 40) = v53;
    long long v54 = (_OWORD *)(v41 + 48);
    uint64_t v55 = (_OWORD *)(v42 + 48);
    unint64_t v56 = *(void *)(v42 + 168);
    id v57 = v45;
    id v58 = v52;
    id v59 = v53;
    if (v56 >> 1 == 4294967294)
    {
      long long v60 = *(_OWORD *)(v42 + 192);
      *(_OWORD *)(v41 + 176) = *(_OWORD *)(v42 + 176);
      *(_OWORD *)(v41 + 192) = v60;
      *(_OWORD *)(v41 + 208) = *(_OWORD *)(v42 + 208);
      *(_DWORD *)(v41 + 223) = *(_DWORD *)(v42 + 223);
      long long v61 = *(_OWORD *)(v42 + 128);
      *(_OWORD *)(v41 + 112) = *(_OWORD *)(v42 + 112);
      *(_OWORD *)(v41 + 128) = v61;
      long long v62 = *(_OWORD *)(v42 + 160);
      *(_OWORD *)(v41 + 144) = *(_OWORD *)(v42 + 144);
      *(_OWORD *)(v41 + 160) = v62;
      long long v63 = *(_OWORD *)(v42 + 64);
      _OWORD *v54 = *v55;
      *(_OWORD *)(v41 + 64) = v63;
      long long v64 = *(_OWORD *)(v42 + 96);
      *(_OWORD *)(v41 + 80) = *(_OWORD *)(v42 + 80);
      *(_OWORD *)(v41 + 96) = v64;
      uint64_t v29 = a3;
    }
    else
    {
      int v65 = *(unsigned __int8 *)(v42 + 56);
      if (v65 == 255)
      {
        *(void *)long long v54 = *(void *)v55;
        *(unsigned char *)(v41 + 56) = *(unsigned char *)(v42 + 56);
      }
      else
      {
        long long v66 = *(void **)(v42 + 48);
        outlined copy of GraphicsImage.Contents(v66, *(unsigned char *)(v42 + 56));
        *(void *)(v41 + 48) = v66;
        *(unsigned char *)(v41 + 56) = v65;
        unint64_t v56 = *(void *)(v42 + 168);
      }
      uint64_t v29 = a3;
      *(void *)(v41 + 64) = *(void *)(v42 + 64);
      *(_OWORD *)(v41 + 72) = *(_OWORD *)(v42 + 72);
      *(unsigned char *)(v41 + 88) = *(unsigned char *)(v42 + 88);
      *(_OWORD *)(v41 + 92) = *(_OWORD *)(v42 + 92);
      *(unsigned char *)(v41 + 108) = *(unsigned char *)(v42 + 108);
      long long v67 = *(_OWORD *)(v42 + 128);
      *(_OWORD *)(v41 + 112) = *(_OWORD *)(v42 + 112);
      *(_OWORD *)(v41 + 128) = v67;
      *(_WORD *)(v41 + 144) = *(_WORD *)(v42 + 144);
      *(unsigned char *)(v41 + 146) = *(unsigned char *)(v42 + 146);
      *(unsigned char *)(v41 + 147) = *(unsigned char *)(v42 + 147);
      if (v56 >> 1 == 0xFFFFFFFF)
      {
        long long v68 = *(_OWORD *)(v42 + 168);
        *(_OWORD *)(v41 + 152) = *(_OWORD *)(v42 + 152);
        *(_OWORD *)(v41 + 168) = v68;
      }
      else
      {
        uint64_t v69 = *(void *)(v42 + 152);
        uint64_t v70 = *(void *)(v42 + 160);
        uint64_t v71 = *(void *)(v42 + 176);
        outlined copy of AccessibilityImageLabel(v69, v70, v56);
        *(void *)(v41 + 152) = v69;
        *(void *)(v41 + 160) = v70;
        *(void *)(v41 + 168) = v56;
        *(void *)(v41 + 176) = v71;
      }
      uint64_t v72 = *(void *)(v42 + 192);
      *(void *)(v41 + 184) = *(void *)(v42 + 184);
      *(void *)(v41 + 192) = v72;
      *(_WORD *)(v41 + 200) = *(_WORD *)(v42 + 200);
      *(_DWORD *)(v41 + 204) = *(_DWORD *)(v42 + 204);
      *(unsigned char *)(v41 + 208) = *(unsigned char *)(v42 + 208);
      uint64_t v73 = *(void **)(v42 + 216);
      *(void *)(v41 + 216) = v73;
      *(_WORD *)(v41 + 224) = *(_WORD *)(v42 + 224);
      *(unsigned char *)(v41 + 226) = *(unsigned char *)(v42 + 226);
      swift_unknownObjectRetain();
      swift_retain();
      id v74 = v73;
    }
    *(unsigned char *)(v41 + 227) = *(unsigned char *)(v42 + 227);
    *(void *)(v41 + 232) = *(void *)(v42 + 232);
    swift_retain();
  }
  uint64_t v75 = *(void *)(v42 + 288);
  if (v75 == 1)
  {
    long long v76 = *(_OWORD *)(v42 + 256);
    *(_OWORD *)(v41 + 240) = *(_OWORD *)(v42 + 240);
    *(_OWORD *)(v41 + 256) = v76;
    long long v77 = *(_OWORD *)(v42 + 288);
    *(_OWORD *)(v41 + 272) = *(_OWORD *)(v42 + 272);
    *(_OWORD *)(v41 + 288) = v77;
  }
  else
  {
    *(_OWORD *)(v41 + 240) = *(_OWORD *)(v42 + 240);
    *(void *)(v41 + 256) = *(void *)(v42 + 256);
    uint64_t v78 = (_OWORD *)(v41 + 264);
    long long v79 = (_OWORD *)(v42 + 264);
    if (v75)
    {
      uint64_t v80 = *(void *)(v42 + 296);
      *(void *)(v41 + 288) = v75;
      *(void *)(v41 + 296) = v80;
      (**(void (***)(_OWORD *, _OWORD *))(v75 - 8))(v78, v79);
    }
    else
    {
      long long v81 = *(_OWORD *)(v42 + 280);
      _OWORD *v78 = *v79;
      *(_OWORD *)(v41 + 280) = v81;
      *(void *)(v41 + 296) = *(void *)(v42 + 296);
    }
  }
  *(void *)(v41 + 304) = *(void *)(v42 + 304);
  *(unsigned char *)(v41 + 312) = *(unsigned char *)(v42 + 312);
  uint64_t v82 = *(void *)(v42 + 328);
  *(void *)(v41 + 320) = *(void *)(v42 + 320);
  *(void *)(v41 + 328) = v82;
  uint64_t v83 = *(int *)(v29 + 24);
  uint64_t v84 = v27 + v83;
  uint64_t v85 = v96 + v83;
  *(unsigned char *)(v84 + 32) = *(unsigned char *)(v85 + 32);
  long long v86 = *(_OWORD *)(v85 + 16);
  *(_OWORD *)uint64_t v84 = *(_OWORD *)v85;
  *(_OWORD *)(v84 + 16) = v86;
  swift_bridgeObjectRetain();
  return v27;
}

void *assignWithCopy for PlatformTextFieldAdaptor(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1;
  *a1 = *a2;
  swift_retain();
  swift_release();
  v5[1] = a2[1];
  swift_retain();
  swift_release();
  void v5[2] = a2[2];
  void v5[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)v5 + 32) = *((unsigned char *)a2 + 32);
  *((unsigned char *)v5 + 33) = *((unsigned char *)a2 + 33);
  uint64_t v6 = v5 + 5;
  uint64_t v7 = a2 + 5;
  uint64_t v8 = a2[8];
  uint64_t v246 = a3;
  if (v5[8])
  {
    if (v8)
    {
      uint64_t v9 = a2[5];
      uint64_t v10 = a2[6];
      char v11 = *((unsigned char *)a2 + 56);
      outlined copy of Text.Storage(v9, v10, v11);
      uint64_t v12 = v5[5];
      uint64_t v13 = v5[6];
      char v14 = *((unsigned char *)v5 + 56);
      v5[5] = v9;
      v5[6] = v10;
      *((unsigned char *)v5 + 56) = v11;
      outlined consume of Text.Storage(v12, v13, v14);
      unsigned char v5[8] = a2[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text((uint64_t)(v5 + 5));
      long long v18 = *(_OWORD *)(a2 + 7);
      *uint64_t v6 = *v7;
      *(_OWORD *)(v5 + 7) = v18;
    }
  }
  else if (v8)
  {
    uint64_t v15 = a2[5];
    uint64_t v16 = a2[6];
    char v17 = *((unsigned char *)a2 + 56);
    outlined copy of Text.Storage(v15, v16, v17);
    v5[5] = v15;
    v5[6] = v16;
    *((unsigned char *)v5 + 56) = v17;
    unsigned char v5[8] = a2[8];
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v19 = *(_OWORD *)(a2 + 7);
    *uint64_t v6 = *v7;
    *(_OWORD *)(v5 + 7) = v19;
  }
  uint64_t v20 = a2[9];
  uint64_t v21 = a2[10];
  uint64_t v22 = a2[12];
  uint64_t v24 = a2[13];
  uint64_t v23 = a2[14];
  uint64_t v25 = a2;
  uint64_t v27 = a2[15];
  uint64_t v26 = a2[16];
  uint64_t v236 = a2[17];
  uint64_t v237 = a2[18];
  uint64_t v238 = a2[19];
  uint64_t v239 = a2[20];
  uint64_t v240 = a2[21];
  int __dsta = *((_DWORD *)a2 + 44);
  char v244 = *((unsigned char *)a2 + 180);
  uint64_t v28 = a2[11];
  outlined copy of StateOrBinding<TextFieldState>(v20, v21, v28, v22, v24, v23, v27, v26, v236, v237, v238, v239, v240, __dsta, v244);
  uint64_t v29 = v5[9];
  uint64_t v30 = v5[10];
  uint64_t v31 = v5[11];
  uint64_t v32 = v5[12];
  uint64_t v33 = v5[13];
  uint64_t v34 = v5[14];
  uint64_t v35 = v5[15];
  uint64_t v36 = v5[16];
  long long v37 = *(_OWORD *)(v5 + 17);
  long long v38 = *(_OWORD *)(v5 + 19);
  uint64_t v39 = v5[21];
  int v40 = *((_DWORD *)v5 + 44);
  char v41 = *((unsigned char *)v5 + 180);
  v5[9] = v20;
  v5[10] = v21;
  v5[11] = v28;
  v5[12] = v22;
  void v5[13] = v24;
  v5[14] = v23;
  v5[15] = v27;
  unsigned char v5[16] = v26;
  v5[17] = v236;
  v5[18] = v237;
  v5[19] = v238;
  v5[20] = v239;
  v5[21] = v240;
  *((_DWORD *)v5 + 44) = __dsta;
  *((unsigned char *)v5 + 180) = v244;
  outlined consume of StateOrBinding<TextFieldState>(v29, v30, v31, v32, v33, v34, v35, v36, v37, *((uint64_t *)&v37 + 1), v38, *((uint64_t *)&v38 + 1), v39, v40, v41);
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v43 = *(int *)(v42 + 56);
  uint64_t v44 = (void *)((char *)v5 + v43);
  v245 = v25;
  uint64_t v45 = (void *)((char *)v25 + v43);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v47 = v46;
  uint64_t v48 = *(void *)(v46 - 8);
  long long v49 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v48 + 48);
  LODWORD(v26) = v49(v44, 1, v46);
  int v50 = v49(v45, 1, v47);
  if (v26)
  {
    uint64_t v51 = v246;
    if (!v50)
    {
      v241 = v5;
      *uint64_t v44 = *v45;
      v44[1] = v45[1];
      uint64_t v52 = *(int *)(v47 + 32);
      __dst = (char *)v44 + v52;
      long long v53 = (char *)v45 + v52;
      uint64_t v54 = type metadata accessor for TextSelection(0);
      uint64_t v55 = *(void *)(v54 - 8);
      unint64_t v56 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48);
      id v57 = v53;
      swift_retain();
      swift_retain();
      if (v56(v53, 1, v54))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v53, *(void *)(*(void *)(v58 - 8) + 64));
        uint64_t v51 = v246;
      }
      else
      {
        uint64_t v71 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 16))(__dst, v53, v72);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v53, *(void *)(*(void *)(v71 - 8) + 64));
        }
        uint64_t v5 = v241;
        uint64_t v51 = v246;
        __dst[*(int *)(v54 + 20)] = v57[*(int *)(v54 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(__dst, 0, 1, v54);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v48 + 56))(v44, 0, 1, v47);
      goto LABEL_27;
    }
LABEL_14:
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v44, v45, *(void *)(*(void *)(v59 - 8) + 64));
LABEL_27:
    long long v68 = v245;
    goto LABEL_28;
  }
  uint64_t v51 = v246;
  if (v50)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v44, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
    goto LABEL_14;
  }
  *uint64_t v44 = *v45;
  swift_retain();
  swift_release();
  v44[1] = v45[1];
  swift_retain();
  swift_release();
  uint64_t v60 = *(int *)(v47 + 32);
  long long v61 = (char *)v44 + v60;
  long long v62 = (char *)v45 + v60;
  uint64_t v63 = type metadata accessor for TextSelection(0);
  uint64_t v64 = *(void *)(v63 - 8);
  int v65 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v64 + 48);
  int v66 = v65(v61, 1, v63);
  int v67 = v65(v62, 1, v63);
  long long v68 = v245;
  if (v66)
  {
    if (!v67)
    {
      uint64_t v69 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v70 - 8) + 16))(v61, v62, v70);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v61, v62, *(void *)(*(void *)(v69 - 8) + 64));
      }
      v61[*(int *)(v63 + 20)] = v62[*(int *)(v63 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
      goto LABEL_28;
    }
LABEL_23:
    type metadata accessor for TextSelection?(0);
    memcpy(v61, v62, *(void *)(*(void *)(v73 - 8) + 64));
    goto LABEL_28;
  }
  if (v67)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v61, type metadata accessor for TextSelection);
    goto LABEL_23;
  }
  if (v5 != v245)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v61, type metadata accessor for TextSelection.Indices);
    uint64_t v182 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v183 - 8) + 16))(v61, v62, v183);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v61, v62, *(void *)(*(void *)(v182 - 8) + 64));
    }
  }
  v61[*(int *)(v63 + 20)] = v62[*(int *)(v63 + 20)];
LABEL_28:
  uint64_t v74 = type metadata accessor for SystemTextFieldConfiguration(0);
  *(void *)((char *)v5 + *(int *)(v74 + 20)) = *(void *)((char *)v68 + *(int *)(v74 + 20));
  uint64_t v75 = *(int *)(v51 + 20);
  long long v76 = (char *)v5 + v75;
  uint64_t v77 = (uint64_t)v68 + v75;
  *(void *)((char *)v5 + v75) = *(void *)((char *)v68 + v75);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v76 + 1) = *(void *)(v77 + 8);
  *((_DWORD *)v76 + 4) = *(_DWORD *)(v77 + 16);
  uint64_t v78 = v76 + 24;
  long long v79 = (void *)*((void *)v76 + 3);
  long long v81 = (_OWORD *)(v77 + 24);
  uint64_t v80 = *(void **)(v77 + 24);
  if (v79 == (void *)1)
  {
    if (v80 == (void *)1)
    {
      long long v82 = *(_OWORD *)(v77 + 40);
      _OWORD *v78 = *v81;
      *(_OWORD *)(v76 + 40) = v82;
      long long v83 = *(_OWORD *)(v77 + 56);
      long long v84 = *(_OWORD *)(v77 + 72);
      long long v85 = *(_OWORD *)(v77 + 104);
      *(_OWORD *)(v76 + 88) = *(_OWORD *)(v77 + 88);
      *(_OWORD *)(v76 + 104) = v85;
      *(_OWORD *)(v76 + 56) = v83;
      *(_OWORD *)(v76 + 72) = v84;
      long long v86 = *(_OWORD *)(v77 + 120);
      long long v87 = *(_OWORD *)(v77 + 136);
      long long v88 = *(_OWORD *)(v77 + 168);
      *(_OWORD *)(v76 + 152) = *(_OWORD *)(v77 + 152);
      *(_OWORD *)(v76 + 168) = v88;
      *(_OWORD *)(v76 + 120) = v86;
      *(_OWORD *)(v76 + 136) = v87;
      long long v89 = *(_OWORD *)(v77 + 184);
      long long v90 = *(_OWORD *)(v77 + 200);
      long long v91 = *(_OWORD *)(v77 + 216);
      *((void *)v76 + 29) = *(void *)(v77 + 232);
      *(_OWORD *)(v76 + 200) = v90;
      *(_OWORD *)(v76 + 216) = v91;
      *(_OWORD *)(v76 + 184) = v89;
    }
    else
    {
      *((void *)v76 + 3) = v80;
      uint64_t v102 = *(void **)(v77 + 32);
      *((void *)v76 + 4) = v102;
      char v103 = *(void **)(v77 + 40);
      *((void *)v76 + 5) = v103;
      uint64_t v104 = v76 + 48;
      uint64_t v105 = (id *)(v77 + 48);
      unint64_t v106 = *(void *)(v77 + 168);
      id v107 = v80;
      id v108 = v102;
      id v109 = v103;
      if (v106 >> 1 == 4294967294)
      {
        long long v110 = *(_OWORD *)v105;
        long long v111 = *(_OWORD *)(v77 + 64);
        long long v112 = *(_OWORD *)(v77 + 96);
        *((_OWORD *)v76 + 5) = *(_OWORD *)(v77 + 80);
        *((_OWORD *)v76 + 6) = v112;
        _OWORD *v104 = v110;
        *((_OWORD *)v76 + 4) = v111;
        long long v113 = *(_OWORD *)(v77 + 112);
        long long v114 = *(_OWORD *)(v77 + 128);
        long long v115 = *(_OWORD *)(v77 + 160);
        *((_OWORD *)v76 + 9) = *(_OWORD *)(v77 + 144);
        *((_OWORD *)v76 + 10) = v115;
        *((_OWORD *)v76 + 7) = v113;
        *((_OWORD *)v76 + 8) = v114;
        long long v116 = *(_OWORD *)(v77 + 176);
        long long v117 = *(_OWORD *)(v77 + 192);
        long long v118 = *(_OWORD *)(v77 + 208);
        *(_DWORD *)(v76 + 223) = *(_DWORD *)(v77 + 223);
        *((_OWORD *)v76 + 12) = v117;
        *((_OWORD *)v76 + 13) = v118;
        *((_OWORD *)v76 + 11) = v116;
      }
      else
      {
        int v138 = *(unsigned __int8 *)(v77 + 56);
        if (v138 == 255)
        {
          id v155 = *v105;
          v76[56] = *(unsigned char *)(v77 + 56);
          *(void *)uint64_t v104 = v155;
        }
        else
        {
          id v139 = *v105;
          outlined copy of GraphicsImage.Contents(*v105, *(unsigned char *)(v77 + 56));
          *((void *)v76 + 6) = v139;
          v76[56] = v138;
        }
        *((void *)v76 + 8) = *(void *)(v77 + 64);
        *(_OWORD *)(v76 + 72) = *(_OWORD *)(v77 + 72);
        v76[88] = *(unsigned char *)(v77 + 88);
        long long v156 = *(_OWORD *)(v77 + 92);
        v76[108] = *(unsigned char *)(v77 + 108);
        *(_OWORD *)(v76 + 92) = v156;
        long long v157 = *(_OWORD *)(v77 + 112);
        long long v158 = *(_OWORD *)(v77 + 128);
        v76[144] = *(unsigned char *)(v77 + 144);
        *((_OWORD *)v76 + 7) = v157;
        *((_OWORD *)v76 + 8) = v158;
        v76[145] = *(unsigned char *)(v77 + 145);
        v76[146] = *(unsigned char *)(v77 + 146);
        v76[147] = *(unsigned char *)(v77 + 147);
        unint64_t v159 = *(void *)(v77 + 168);
        if (v159 >> 1 == 0xFFFFFFFF)
        {
          long long v160 = *(_OWORD *)(v77 + 168);
          *(_OWORD *)(v76 + 152) = *(_OWORD *)(v77 + 152);
          *(_OWORD *)(v76 + 168) = v160;
        }
        else
        {
          uint64_t v161 = *(void *)(v77 + 152);
          uint64_t v162 = *(void *)(v77 + 160);
          uint64_t v163 = v51;
          uint64_t v164 = *(void *)(v77 + 176);
          outlined copy of AccessibilityImageLabel(v161, v162, *(void *)(v77 + 168));
          *((void *)v76 + 19) = v161;
          *((void *)v76 + 20) = v162;
          *((void *)v76 + 21) = v159;
          *((void *)v76 + 22) = v164;
          uint64_t v51 = v163;
        }
        *((void *)v76 + 23) = *(void *)(v77 + 184);
        *((void *)v76 + 24) = *(void *)(v77 + 192);
        v76[200] = *(unsigned char *)(v77 + 200);
        v76[201] = *(unsigned char *)(v77 + 201);
        int v165 = *(_DWORD *)(v77 + 204);
        v76[208] = *(unsigned char *)(v77 + 208);
        *((_DWORD *)v76 + 51) = v165;
        uint64_t v166 = *(void **)(v77 + 216);
        *((void *)v76 + 27) = v166;
        *((_WORD *)v76 + 112) = *(_WORD *)(v77 + 224);
        v76[226] = *(unsigned char *)(v77 + 226);
        swift_unknownObjectRetain();
        swift_retain();
        id v167 = v166;
      }
      v76[227] = *(unsigned char *)(v77 + 227);
      *((void *)v76 + 29) = *(void *)(v77 + 232);
      swift_retain();
    }
  }
  else if (v80 == (void *)1)
  {
    outlined destroy of PlatformItem.PrimaryContent((uint64_t)(v76 + 24));
    long long v92 = *(_OWORD *)(v77 + 40);
    _OWORD *v78 = *v81;
    *(_OWORD *)(v76 + 40) = v92;
    long long v93 = *(_OWORD *)(v77 + 104);
    long long v95 = *(_OWORD *)(v77 + 56);
    long long v94 = *(_OWORD *)(v77 + 72);
    *(_OWORD *)(v76 + 88) = *(_OWORD *)(v77 + 88);
    *(_OWORD *)(v76 + 104) = v93;
    *(_OWORD *)(v76 + 56) = v95;
    *(_OWORD *)(v76 + 72) = v94;
    long long v96 = *(_OWORD *)(v77 + 168);
    long long v98 = *(_OWORD *)(v77 + 120);
    long long v97 = *(_OWORD *)(v77 + 136);
    *(_OWORD *)(v76 + 152) = *(_OWORD *)(v77 + 152);
    *(_OWORD *)(v76 + 168) = v96;
    *(_OWORD *)(v76 + 120) = v98;
    *(_OWORD *)(v76 + 136) = v97;
    long long v100 = *(_OWORD *)(v77 + 200);
    long long v99 = *(_OWORD *)(v77 + 216);
    long long v101 = *(_OWORD *)(v77 + 184);
    *((void *)v76 + 29) = *(void *)(v77 + 232);
    *(_OWORD *)(v76 + 200) = v100;
    *(_OWORD *)(v76 + 216) = v99;
    *(_OWORD *)(v76 + 184) = v101;
  }
  else
  {
    *((void *)v76 + 3) = v80;
    id v119 = v80;

    int v120 = (void *)*((void *)v76 + 4);
    uint64_t v121 = *(void **)(v77 + 32);
    *((void *)v76 + 4) = v121;
    id v122 = v121;

    uint64_t v123 = (void *)*((void *)v76 + 5);
    char v124 = *(void **)(v77 + 40);
    *((void *)v76 + 5) = v124;
    id v125 = v124;

    BOOL v126 = v76 + 48;
    int v127 = (long long *)(v77 + 48);
    unint64_t v128 = *(void *)(v77 + 168) & 0xFFFFFFFFFFFFFFFELL;
    if (*((void *)v76 + 21) >> 1 == 4294967294)
    {
      if (v128 == 0x1FFFFFFFCLL)
      {
        long long v129 = *v127;
        long long v130 = *(_OWORD *)(v77 + 64);
        long long v131 = *(_OWORD *)(v77 + 96);
        *((_OWORD *)v76 + 5) = *(_OWORD *)(v77 + 80);
        *((_OWORD *)v76 + 6) = v131;
        _OWORD *v126 = v129;
        *((_OWORD *)v76 + 4) = v130;
        long long v132 = *(_OWORD *)(v77 + 112);
        long long v133 = *(_OWORD *)(v77 + 128);
        long long v134 = *(_OWORD *)(v77 + 160);
        *((_OWORD *)v76 + 9) = *(_OWORD *)(v77 + 144);
        *((_OWORD *)v76 + 10) = v134;
        *((_OWORD *)v76 + 7) = v132;
        *((_OWORD *)v76 + 8) = v133;
        long long v135 = *(_OWORD *)(v77 + 176);
        long long v136 = *(_OWORD *)(v77 + 192);
        long long v137 = *(_OWORD *)(v77 + 208);
        *(_DWORD *)(v76 + 223) = *(_DWORD *)(v77 + 223);
        *((_OWORD *)v76 + 12) = v136;
        *((_OWORD *)v76 + 13) = v137;
        *((_OWORD *)v76 + 11) = v135;
      }
      else
      {
        int v149 = *(unsigned __int8 *)(v77 + 56);
        if (v149 == 255)
        {
          id v168 = *(void **)v127;
          v76[56] = *(unsigned char *)(v77 + 56);
          *(void *)BOOL v126 = v168;
        }
        else
        {
          int v150 = *(void **)v127;
          outlined copy of GraphicsImage.Contents(v150, *(unsigned char *)(v77 + 56));
          *((void *)v76 + 6) = v150;
          v76[56] = v149;
        }
        *((void *)v76 + 8) = *(void *)(v77 + 64);
        *(_OWORD *)(v76 + 72) = *(_OWORD *)(v77 + 72);
        v76[88] = *(unsigned char *)(v77 + 88);
        long long v169 = *(_OWORD *)(v77 + 92);
        v76[108] = *(unsigned char *)(v77 + 108);
        *(_OWORD *)(v76 + 92) = v169;
        long long v170 = *(_OWORD *)(v77 + 112);
        long long v171 = *(_OWORD *)(v77 + 128);
        v76[144] = *(unsigned char *)(v77 + 144);
        *((_OWORD *)v76 + 7) = v170;
        *((_OWORD *)v76 + 8) = v171;
        v76[145] = *(unsigned char *)(v77 + 145);
        v76[146] = *(unsigned char *)(v77 + 146);
        v76[147] = *(unsigned char *)(v77 + 147);
        unint64_t v172 = *(void *)(v77 + 168);
        if (v172 >> 1 == 0xFFFFFFFF)
        {
          long long v173 = *(_OWORD *)(v77 + 168);
          *(_OWORD *)(v76 + 152) = *(_OWORD *)(v77 + 152);
          *(_OWORD *)(v76 + 168) = v173;
        }
        else
        {
          uint64_t v174 = *(void *)(v77 + 152);
          uint64_t v175 = *(void *)(v77 + 160);
          uint64_t v176 = v51;
          uint64_t v177 = *(void *)(v77 + 176);
          outlined copy of AccessibilityImageLabel(v174, v175, *(void *)(v77 + 168));
          *((void *)v76 + 19) = v174;
          *((void *)v76 + 20) = v175;
          *((void *)v76 + 21) = v172;
          *((void *)v76 + 22) = v177;
          uint64_t v51 = v176;
        }
        *((void *)v76 + 23) = *(void *)(v77 + 184);
        *((void *)v76 + 24) = *(void *)(v77 + 192);
        v76[200] = *(unsigned char *)(v77 + 200);
        v76[201] = *(unsigned char *)(v77 + 201);
        int v178 = *(_DWORD *)(v77 + 204);
        v76[208] = *(unsigned char *)(v77 + 208);
        *((_DWORD *)v76 + 51) = v178;
        id v179 = *(void **)(v77 + 216);
        *((void *)v76 + 27) = v179;
        *((_WORD *)v76 + 112) = *(_WORD *)(v77 + 224);
        v76[226] = *(unsigned char *)(v77 + 226);
        swift_unknownObjectRetain();
        swift_retain();
        id v180 = v179;
      }
    }
    else if (v128 == 0x1FFFFFFFCLL)
    {
      outlined destroy of Image.Resolved((uint64_t)(v76 + 48));
      long long v140 = *(_OWORD *)(v77 + 96);
      long long v142 = *v127;
      long long v141 = *(_OWORD *)(v77 + 64);
      *((_OWORD *)v76 + 5) = *(_OWORD *)(v77 + 80);
      *((_OWORD *)v76 + 6) = v140;
      _OWORD *v126 = v142;
      *((_OWORD *)v76 + 4) = v141;
      long long v143 = *(_OWORD *)(v77 + 160);
      long long v145 = *(_OWORD *)(v77 + 112);
      long long v144 = *(_OWORD *)(v77 + 128);
      *((_OWORD *)v76 + 9) = *(_OWORD *)(v77 + 144);
      *((_OWORD *)v76 + 10) = v143;
      *((_OWORD *)v76 + 7) = v145;
      *((_OWORD *)v76 + 8) = v144;
      long long v147 = *(_OWORD *)(v77 + 192);
      long long v146 = *(_OWORD *)(v77 + 208);
      long long v148 = *(_OWORD *)(v77 + 176);
      *(_DWORD *)(v76 + 223) = *(_DWORD *)(v77 + 223);
      *((_OWORD *)v76 + 12) = v147;
      *((_OWORD *)v76 + 13) = v146;
      *((_OWORD *)v76 + 11) = v148;
    }
    else
    {
      int v151 = *(unsigned __int8 *)(v77 + 56);
      if (v76[56] == 255)
      {
        if (v151 == 255)
        {
          long long v185 = *(void **)v127;
          v76[56] = *(unsigned char *)(v77 + 56);
          *(void *)BOOL v126 = v185;
        }
        else
        {
          uint64_t v181 = *(void **)v127;
          outlined copy of GraphicsImage.Contents(v181, *(unsigned char *)(v77 + 56));
          *((void *)v76 + 6) = v181;
          v76[56] = v151;
        }
      }
      else if (v151 == 255)
      {
        outlined destroy of GraphicsImage.Contents((uint64_t)(v76 + 48));
        char v184 = *(unsigned char *)(v77 + 56);
        *(void *)BOOL v126 = *(void *)v127;
        v76[56] = v184;
      }
      else
      {
        int v152 = *(void **)v127;
        outlined copy of GraphicsImage.Contents(v152, *(unsigned char *)(v77 + 56));
        id v153 = (void *)*((void *)v76 + 6);
        *((void *)v76 + 6) = v152;
        char v154 = v76[56];
        v76[56] = v151;
        outlined consume of GraphicsImage.Contents(v153, v154);
      }
      *((void *)v76 + 8) = *(void *)(v77 + 64);
      *((void *)v76 + 9) = *(void *)(v77 + 72);
      *((void *)v76 + 10) = *(void *)(v77 + 80);
      v76[88] = *(unsigned char *)(v77 + 88);
      long long v186 = *(_OWORD *)(v77 + 92);
      v76[108] = *(unsigned char *)(v77 + 108);
      *(_OWORD *)(v76 + 92) = v186;
      long long v187 = *(_OWORD *)(v77 + 112);
      long long v188 = *(_OWORD *)(v77 + 128);
      v76[144] = *(unsigned char *)(v77 + 144);
      *((_OWORD *)v76 + 7) = v187;
      *((_OWORD *)v76 + 8) = v188;
      v76[145] = *(unsigned char *)(v77 + 145);
      v76[146] = *(unsigned char *)(v77 + 146);
      v76[147] = *(unsigned char *)(v77 + 147);
      uint64_t v189 = v76 + 152;
      uint64_t v190 = (_OWORD *)(v77 + 152);
      uint64_t v191 = *(void *)(v77 + 168);
      unint64_t v192 = v191 & 0xFFFFFFFFFFFFFFFELL;
      if (*((void *)v76 + 21) >> 1 == 0xFFFFFFFFLL)
      {
        if (v192 == 0x1FFFFFFFELL)
        {
          long long v193 = *(_OWORD *)(v77 + 168);
          *uint64_t v189 = *v190;
          *(_OWORD *)(v76 + 168) = v193;
        }
        else
        {
          uint64_t v195 = *(void *)(v77 + 152);
          uint64_t v196 = *(void *)(v77 + 160);
          uint64_t v197 = v51;
          uint64_t v198 = *(void *)(v77 + 176);
          outlined copy of AccessibilityImageLabel(v195, v196, *(void *)(v77 + 168));
          *((void *)v76 + 19) = v195;
          *((void *)v76 + 20) = v196;
          *((void *)v76 + 21) = v191;
          *((void *)v76 + 22) = v198;
          uint64_t v51 = v197;
        }
      }
      else if (v192 == 0x1FFFFFFFELL)
      {
        outlined destroy of AccessibilityImageLabel((uint64_t)(v76 + 152));
        long long v194 = *(_OWORD *)(v77 + 168);
        *uint64_t v189 = *v190;
        *(_OWORD *)(v76 + 168) = v194;
      }
      else
      {
        uint64_t v199 = *(void *)(v77 + 152);
        uint64_t v200 = *(void *)(v77 + 160);
        uint64_t v201 = v51;
        uint64_t v202 = *(void *)(v77 + 176);
        outlined copy of AccessibilityImageLabel(v199, v200, *(void *)(v77 + 168));
        uint64_t v203 = *((void *)v76 + 19);
        uint64_t v204 = *((void *)v76 + 20);
        uint64_t v205 = *((void *)v76 + 21);
        *((void *)v76 + 19) = v199;
        *((void *)v76 + 20) = v200;
        *((void *)v76 + 21) = v191;
        *((void *)v76 + 22) = v202;
        uint64_t v51 = v201;
        outlined consume of AccessibilityImageLabel(v203, v204, v205);
      }
      *((void *)v76 + 23) = *(void *)(v77 + 184);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *((void *)v76 + 24) = *(void *)(v77 + 192);
      swift_retain();
      swift_release();
      v76[200] = *(unsigned char *)(v77 + 200);
      v76[201] = *(unsigned char *)(v77 + 201);
      int v206 = *(_DWORD *)(v77 + 204);
      v76[208] = *(unsigned char *)(v77 + 208);
      *((_DWORD *)v76 + 51) = v206;
      uint64_t v207 = (void *)*((void *)v76 + 27);
      v208 = *(void **)(v77 + 216);
      *((void *)v76 + 27) = v208;
      id v209 = v208;

      *((_WORD *)v76 + 112) = *(_WORD *)(v77 + 224);
      v76[226] = *(unsigned char *)(v77 + 226);
    }
    v76[227] = *(unsigned char *)(v77 + 227);
    *((void *)v76 + 29) = *(void *)(v77 + 232);
    swift_retain();
    swift_release();
  }
  uint64_t v210 = (long long *)(v76 + 240);
  long long v211 = (long long *)(v77 + 240);
  uint64_t v212 = *((void *)v76 + 36);
  uint64_t v213 = *(void *)(v77 + 288);
  if (v212 == 1)
  {
    if (v213 == 1)
    {
      long long v214 = *v211;
      long long v215 = *(_OWORD *)(v77 + 256);
      long long v216 = *(_OWORD *)(v77 + 288);
      *((_OWORD *)v76 + 17) = *(_OWORD *)(v77 + 272);
      *((_OWORD *)v76 + 18) = v216;
LABEL_79:
      *uint64_t v210 = v214;
      v210[1] = v215;
      goto LABEL_91;
    }
    *((void *)v76 + 30) = *(void *)(v77 + 240);
    *((void *)v76 + 31) = *(void *)(v77 + 248);
    *((void *)v76 + 32) = *(void *)(v77 + 256);
    uint64_t v220 = v76 + 264;
    uint64_t v221 = (long long *)(v77 + 264);
    uint64_t v222 = *(void *)(v77 + 288);
    if (v222)
    {
      *((void *)v76 + 36) = v222;
      *((void *)v76 + 37) = *(void *)(v77 + 296);
      (**(void (***)(_OWORD *, long long *))(v222 - 8))(v220, v221);
    }
    else
    {
      long long v225 = *v221;
      long long v226 = *(_OWORD *)(v77 + 280);
      *((void *)v76 + 37) = *(void *)(v77 + 296);
      *uint64_t v220 = v225;
      *(_OWORD *)(v76 + 280) = v226;
    }
  }
  else
  {
    if (v213 == 1)
    {
      outlined destroy of PlatformItem.SelectionContent((uint64_t)(v76 + 240));
      long long v217 = *(_OWORD *)(v77 + 288);
      long long v219 = *v211;
      long long v218 = *(_OWORD *)(v77 + 256);
      *((_OWORD *)v76 + 17) = *(_OWORD *)(v77 + 272);
      *((_OWORD *)v76 + 18) = v217;
      *uint64_t v210 = v219;
      *((_OWORD *)v76 + 16) = v218;
      goto LABEL_91;
    }
    *((_DWORD *)v76 + 60) = *(_DWORD *)(v77 + 240);
    *((_DWORD *)v76 + 61) = *(_DWORD *)(v77 + 244);
    *((_DWORD *)v76 + 62) = *(_DWORD *)(v77 + 248);
    *((_DWORD *)v76 + 63) = *(_DWORD *)(v77 + 252);
    *((void *)v76 + 32) = *(void *)(v77 + 256);
    uint64_t v210 = (long long *)(v76 + 264);
    long long v223 = (long long *)(v77 + 264);
    uint64_t v224 = *(void *)(v77 + 288);
    if (!v212)
    {
      if (v224)
      {
        *((void *)v76 + 36) = v224;
        *((void *)v76 + 37) = *(void *)(v77 + 296);
        (**(void (***)(uint64_t, uint64_t))(v224 - 8))((uint64_t)(v76 + 264), v77 + 264);
        goto LABEL_91;
      }
      long long v214 = *v223;
      long long v215 = *(_OWORD *)(v77 + 280);
      *((void *)v76 + 37) = *(void *)(v77 + 296);
      goto LABEL_79;
    }
    if (v224)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)v76 + 33, (uint64_t *)(v77 + 264));
    }
    else
    {
      outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent((uint64_t)(v76 + 264));
      uint64_t v227 = *(void *)(v77 + 296);
      long long v228 = *(_OWORD *)(v77 + 280);
      *uint64_t v210 = *v223;
      *(_OWORD *)(v76 + 280) = v228;
      *((void *)v76 + 37) = v227;
    }
  }
LABEL_91:
  uint64_t v229 = *(void *)(v77 + 304);
  v76[312] = *(unsigned char *)(v77 + 312);
  *((void *)v76 + 38) = v229;
  *((void *)v76 + 40) = *(void *)(v77 + 320);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_DWORD *)v76 + 82) = *(_DWORD *)(v77 + 328);
  *((_DWORD *)v76 + 83) = *(_DWORD *)(v77 + 332);
  uint64_t v230 = *(int *)(v51 + 24);
  uint64_t v231 = (char *)v5 + v230;
  uint64_t v232 = (long long *)((char *)v68 + v230);
  long long v233 = *v232;
  long long v234 = v232[1];
  v231[32] = *((unsigned char *)v232 + 32);
  *(_OWORD *)uint64_t v231 = v233;
  *((_OWORD *)v231 + 1) = v234;
  return v5;
}

uint64_t initializeWithTake for PlatformTextFieldAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 165) = *(_OWORD *)(a2 + 165);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v8 = *(int *)(v7 + 56);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v11))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    uint64_t v15 = v10[1];
    void *v9 = *v10;
    v9[1] = v15;
    uint64_t v16 = *(int *)(v12 + 32);
    char v17 = (char *)v9 + v16;
    long long v18 = (char *)v10 + v16;
    uint64_t v19 = type metadata accessor for TextSelection(0);
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      uint64_t v29 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v17, v18, v22);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v17, v18, *(void *)(*(void *)(v29 - 8) + 64));
      }
      v17[*(int *)(v19 + 20)] = v18[*(int *)(v19 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
  }
  uint64_t v23 = type metadata accessor for SystemTextFieldConfiguration(0);
  *(void *)(a1 + *(int *)(v23 + 20)) = *(void *)(a2 + *(int *)(v23 + 20));
  memcpy((void *)(a1 + *(int *)(a3 + 20)), (const void *)(a2 + *(int *)(a3 + 20)), 0x150uLL);
  uint64_t v24 = *(int *)(a3 + 24);
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  long long v27 = *(_OWORD *)(v26 + 16);
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
  *(_OWORD *)(v25 + 16) = v27;
  *(unsigned char *)(v25 + 32) = *(unsigned char *)(v26 + 32);
  return a1;
}

uint64_t assignWithTake for PlatformTextFieldAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  if (*(void *)(a1 + 64))
  {
    if (*(void *)(a2 + 64))
    {
      char v7 = *(unsigned char *)(a2 + 56);
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v9 = *(void *)(a1 + 48);
      char v10 = *(unsigned char *)(a1 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(unsigned char *)(a1 + 56) = v7;
      outlined consume of Text.Storage(v8, v9, v10);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 40);
  }
  long long v11 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v11;
LABEL_6:
  uint64_t v12 = *(void *)(a2 + 168);
  int v13 = *(_DWORD *)(a2 + 176);
  char v14 = *(unsigned char *)(a2 + 180);
  uint64_t v15 = *(void *)(a1 + 72);
  uint64_t v16 = *(void *)(a1 + 80);
  uint64_t v17 = *(void *)(a1 + 88);
  uint64_t v18 = *(void *)(a1 + 96);
  uint64_t v19 = *(void *)(a1 + 104);
  uint64_t v20 = *(void *)(a1 + 112);
  uint64_t v21 = *(void *)(a1 + 120);
  uint64_t v22 = *(void *)(a1 + 128);
  long long v23 = *(_OWORD *)(a1 + 136);
  long long v24 = *(_OWORD *)(a1 + 152);
  uint64_t v25 = *(void *)(a1 + 168);
  int v26 = *(_DWORD *)(a1 + 176);
  char v27 = *(unsigned char *)(a1 + 180);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = v12;
  *(_DWORD *)(a1 + 176) = v13;
  *(unsigned char *)(a1 + 180) = v14;
  outlined consume of StateOrBinding<TextFieldState>(v15, v16, v17, v18, v19, v20, v21, v22, v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25, v26, v27);
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v29 = *(int *)(v28 + 56);
  uint64_t v30 = (char *)(a1 + v29);
  uint64_t v31 = (char *)(a2 + v29);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v33 = v32;
  uint64_t v34 = *(void *)(v32 - 8);
  uint64_t v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  int v36 = v35(v30, 1, v32);
  int v37 = v35(v31, 1, v33);
  if (v36)
  {
    if (!v37)
    {
      uint64_t v38 = *((void *)v31 + 1);
      *(void *)uint64_t v30 = *(void *)v31;
      *((void *)v30 + 1) = v38;
      uint64_t v39 = *(int *)(v33 + 32);
      int v40 = &v30[v39];
      char v41 = &v31[v39];
      uint64_t v42 = type metadata accessor for TextSelection(0);
      uint64_t v43 = *(void *)(v42 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
      }
      else
      {
        uint64_t v108 = a3;
        uint64_t v60 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 32))(v40, v41, v61);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v40, v41, *(void *)(*(void *)(v60 - 8) + 64));
        }
        a3 = v108;
        v40[*(int *)(v42 + 20)] = v41[*(int *)(v42 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v30, 0, 1, v33);
      goto LABEL_26;
    }
    goto LABEL_12;
  }
  if (v37)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v30, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
LABEL_12:
    type metadata accessor for Binding<TextSelection?>?(0);
    size_t v46 = *(void *)(*(void *)(v45 - 8) + 64);
    uint64_t v47 = v30;
    uint64_t v48 = v31;
LABEL_13:
    memcpy(v47, v48, v46);
    goto LABEL_26;
  }
  uint64_t v49 = a3;
  *(void *)uint64_t v30 = *(void *)v31;
  swift_release();
  *((void *)v30 + 1) = *((void *)v31 + 1);
  swift_release();
  uint64_t v50 = *(int *)(v33 + 32);
  uint64_t v51 = &v30[v50];
  uint64_t v52 = &v31[v50];
  uint64_t v53 = type metadata accessor for TextSelection(0);
  uint64_t v54 = *(void *)(v53 - 8);
  uint64_t v55 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
  int v56 = v55(v51, 1, v53);
  int v57 = v55(v52, 1, v53);
  a3 = v49;
  if (v56)
  {
    if (!v57)
    {
      uint64_t v58 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 32))(v51, v52, v59);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v51, v52, *(void *)(*(void *)(v58 - 8) + 64));
      }
      v51[*(int *)(v53 + 20)] = v52[*(int *)(v53 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
      goto LABEL_26;
    }
    goto LABEL_22;
  }
  if (v57)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v51, type metadata accessor for TextSelection);
LABEL_22:
    type metadata accessor for TextSelection?(0);
    size_t v46 = *(void *)(*(void *)(v62 - 8) + 64);
    uint64_t v47 = v51;
    uint64_t v48 = v52;
    goto LABEL_13;
  }
  if (a1 != a2)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v51, type metadata accessor for TextSelection.Indices);
    uint64_t v87 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v88 - 8) + 32))(v51, v52, v88);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v51, v52, *(void *)(*(void *)(v87 - 8) + 64));
    }
  }
  v51[*(int *)(v53 + 20)] = v52[*(int *)(v53 + 20)];
LABEL_26:
  uint64_t v63 = type metadata accessor for SystemTextFieldConfiguration(0);
  *(void *)(a1 + *(int *)(v63 + 20)) = *(void *)(a2 + *(int *)(v63 + 20));
  uint64_t v64 = *(int *)(a3 + 20);
  uint64_t v65 = a1 + v64;
  uint64_t v66 = a2 + v64;
  *(void *)(a1 + v64) = *(void *)(a2 + v64);
  swift_bridgeObjectRelease();
  *(void *)(v65 + 8) = *(void *)(v66 + 8);
  *(_DWORD *)(v65 + 16) = *(_DWORD *)(v66 + 16);
  int v67 = *(void **)(v65 + 24);
  uint64_t v68 = *(void *)(v66 + 24);
  if (v67 == (void *)1)
  {
LABEL_29:
    long long v69 = *(_OWORD *)(v66 + 200);
    *(_OWORD *)(v65 + 184) = *(_OWORD *)(v66 + 184);
    *(_OWORD *)(v65 + 200) = v69;
    *(_OWORD *)(v65 + 216) = *(_OWORD *)(v66 + 216);
    *(void *)(v65 + 232) = *(void *)(v66 + 232);
    long long v70 = *(_OWORD *)(v66 + 136);
    *(_OWORD *)(v65 + 120) = *(_OWORD *)(v66 + 120);
    *(_OWORD *)(v65 + 136) = v70;
    long long v71 = *(_OWORD *)(v66 + 168);
    *(_OWORD *)(v65 + 152) = *(_OWORD *)(v66 + 152);
    *(_OWORD *)(v65 + 168) = v71;
    long long v72 = *(_OWORD *)(v66 + 72);
    *(_OWORD *)(v65 + 56) = *(_OWORD *)(v66 + 56);
    *(_OWORD *)(v65 + 72) = v72;
    long long v73 = *(_OWORD *)(v66 + 104);
    *(_OWORD *)(v65 + 88) = *(_OWORD *)(v66 + 88);
    *(_OWORD *)(v65 + 104) = v73;
    long long v74 = *(_OWORD *)(v66 + 40);
    *(_OWORD *)(v65 + 24) = *(_OWORD *)(v66 + 24);
    *(_OWORD *)(v65 + 40) = v74;
    goto LABEL_51;
  }
  if (v68 == 1)
  {
    outlined destroy of PlatformItem.PrimaryContent(v65 + 24);
    goto LABEL_29;
  }
  *(void *)(v65 + 24) = v68;

  uint64_t v75 = *(void **)(v65 + 32);
  *(void *)(v65 + 32) = *(void *)(v66 + 32);

  long long v76 = *(void **)(v65 + 40);
  *(void *)(v65 + 40) = *(void *)(v66 + 40);

  uint64_t v77 = (void *)(v65 + 48);
  uint64_t v78 = (void *)(v66 + 48);
  if (*(void *)(v65 + 168) >> 1 == 4294967294) {
    goto LABEL_33;
  }
  if (*(void *)(v66 + 168) >> 1 != 4294967294)
  {
    int v84 = *(unsigned __int8 *)(v65 + 56);
    if (v84 != 255)
    {
      int v85 = *(unsigned __int8 *)(v66 + 56);
      if (v85 != 255)
      {
        long long v86 = *(void **)(v65 + 48);
        *(void *)(v65 + 48) = *v78;
        *(unsigned char *)(v65 + 56) = v85;
        outlined consume of GraphicsImage.Contents(v86, v84);
        goto LABEL_44;
      }
      outlined destroy of GraphicsImage.Contents(v65 + 48);
    }
    *uint64_t v77 = *v78;
    *(unsigned char *)(v65 + 56) = *(unsigned char *)(v66 + 56);
LABEL_44:
    *(_OWORD *)(v65 + 64) = *(_OWORD *)(v66 + 64);
    *(void *)(v65 + 80) = *(void *)(v66 + 80);
    *(unsigned char *)(v65 + 88) = *(unsigned char *)(v66 + 88);
    *(_OWORD *)(v65 + 92) = *(_OWORD *)(v66 + 92);
    *(unsigned char *)(v65 + 108) = *(unsigned char *)(v66 + 108);
    long long v89 = *(_OWORD *)(v66 + 128);
    *(_OWORD *)(v65 + 112) = *(_OWORD *)(v66 + 112);
    *(_OWORD *)(v65 + 128) = v89;
    *(unsigned char *)(v65 + 144) = *(unsigned char *)(v66 + 144);
    *(unsigned char *)(v65 + 145) = *(unsigned char *)(v66 + 145);
    unint64_t v90 = *(void *)(v65 + 168);
    *(_WORD *)(v65 + 146) = *(_WORD *)(v66 + 146);
    if (v90 >> 1 != 0xFFFFFFFF)
    {
      unint64_t v91 = *(void *)(v66 + 168);
      if (v91 >> 1 != 0xFFFFFFFF)
      {
        uint64_t v93 = *(void *)(v66 + 176);
        uint64_t v94 = *(void *)(v65 + 152);
        uint64_t v95 = *(void *)(v65 + 160);
        *(_OWORD *)(v65 + 152) = *(_OWORD *)(v66 + 152);
        *(void *)(v65 + 168) = v91;
        *(void *)(v65 + 176) = v93;
        outlined consume of AccessibilityImageLabel(v94, v95, v90);
        goto LABEL_49;
      }
      outlined destroy of AccessibilityImageLabel(v65 + 152);
    }
    long long v92 = *(_OWORD *)(v66 + 168);
    *(_OWORD *)(v65 + 152) = *(_OWORD *)(v66 + 152);
    *(_OWORD *)(v65 + 168) = v92;
LABEL_49:
    *(void *)(v65 + 184) = *(void *)(v66 + 184);
    swift_unknownObjectRelease();
    *(void *)(v65 + 192) = *(void *)(v66 + 192);
    swift_release();
    *(unsigned char *)(v65 + 200) = *(unsigned char *)(v66 + 200);
    *(unsigned char *)(v65 + 201) = *(unsigned char *)(v66 + 201);
    *(_DWORD *)(v65 + 204) = *(_DWORD *)(v66 + 204);
    *(unsigned char *)(v65 + 208) = *(unsigned char *)(v66 + 208);
    long long v96 = *(void **)(v65 + 216);
    *(void *)(v65 + 216) = *(void *)(v66 + 216);

    *(_WORD *)(v65 + 224) = *(_WORD *)(v66 + 224);
    *(unsigned char *)(v65 + 226) = *(unsigned char *)(v66 + 226);
    goto LABEL_50;
  }
  outlined destroy of Image.Resolved(v65 + 48);
LABEL_33:
  long long v79 = *(_OWORD *)(v66 + 192);
  *(_OWORD *)(v65 + 176) = *(_OWORD *)(v66 + 176);
  *(_OWORD *)(v65 + 192) = v79;
  *(_OWORD *)(v65 + 208) = *(_OWORD *)(v66 + 208);
  *(_DWORD *)(v65 + 223) = *(_DWORD *)(v66 + 223);
  long long v80 = *(_OWORD *)(v66 + 128);
  *(_OWORD *)(v65 + 112) = *(_OWORD *)(v66 + 112);
  *(_OWORD *)(v65 + 128) = v80;
  long long v81 = *(_OWORD *)(v66 + 160);
  *(_OWORD *)(v65 + 144) = *(_OWORD *)(v66 + 144);
  *(_OWORD *)(v65 + 160) = v81;
  long long v82 = *(_OWORD *)(v66 + 64);
  *(_OWORD *)uint64_t v77 = *(_OWORD *)v78;
  *(_OWORD *)(v65 + 64) = v82;
  long long v83 = *(_OWORD *)(v66 + 96);
  *(_OWORD *)(v65 + 80) = *(_OWORD *)(v66 + 80);
  *(_OWORD *)(v65 + 96) = v83;
LABEL_50:
  *(unsigned char *)(v65 + 227) = *(unsigned char *)(v66 + 227);
  *(void *)(v65 + 232) = *(void *)(v66 + 232);
  swift_release();
LABEL_51:
  uint64_t v97 = *(void *)(v65 + 288);
  if (v97 == 1)
  {
LABEL_54:
    long long v99 = *(_OWORD *)(v66 + 256);
    *(_OWORD *)(v65 + 240) = *(_OWORD *)(v66 + 240);
    *(_OWORD *)(v65 + 256) = v99;
    long long v100 = *(_OWORD *)(v66 + 288);
    *(_OWORD *)(v65 + 272) = *(_OWORD *)(v66 + 272);
    *(_OWORD *)(v65 + 288) = v100;
    goto LABEL_60;
  }
  uint64_t v98 = *(void *)(v66 + 288);
  if (v98 == 1)
  {
    outlined destroy of PlatformItem.SelectionContent(v65 + 240);
    goto LABEL_54;
  }
  *(_OWORD *)(v65 + 240) = *(_OWORD *)(v66 + 240);
  *(void *)(v65 + 256) = *(void *)(v66 + 256);
  if (v97)
  {
    uint64_t v101 = v65 + 264;
    if (v98) {
      __swift_destroy_boxed_opaque_existential_1(v101);
    }
    else {
      outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent(v101);
    }
  }
  long long v102 = *(_OWORD *)(v66 + 280);
  *(_OWORD *)(v65 + 264) = *(_OWORD *)(v66 + 264);
  *(_OWORD *)(v65 + 280) = v102;
  *(void *)(v65 + 296) = *(void *)(v66 + 296);
LABEL_60:
  *(void *)(v65 + 304) = *(void *)(v66 + 304);
  *(unsigned char *)(v65 + 312) = *(unsigned char *)(v66 + 312);
  *(void *)(v65 + 320) = *(void *)(v66 + 320);
  swift_bridgeObjectRelease();
  *(void *)(v65 + 328) = *(void *)(v66 + 328);
  uint64_t v103 = *(int *)(a3 + 24);
  uint64_t v104 = a1 + v103;
  uint64_t v105 = a2 + v103;
  *(unsigned char *)(v104 + 32) = *(unsigned char *)(v105 + 32);
  long long v106 = *(_OWORD *)(v105 + 16);
  *(_OWORD *)uint64_t v104 = *(_OWORD *)v105;
  *(_OWORD *)(v104 + 16) = v106;
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformTextFieldAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_93Tm);
}

uint64_t storeEnumTagSinglePayload for PlatformTextFieldAdaptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_94Tm);
}

uint64_t type metadata completion function for PlatformTextFieldAdaptor()
{
  uint64_t result = type metadata accessor for SystemTextFieldConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for TextViewAdaptor(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = a2[3];
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    *(unsigned char *)(a1 + 33) = *((unsigned char *)a2 + 33);
    uint64_t v9 = a2[8];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v105 = a3;
    if (v9)
    {
      uint64_t v10 = a2[5];
      uint64_t v11 = a2[6];
      char v12 = *((unsigned char *)a2 + 56);
      outlined copy of Text.Storage(v10, v11, v12);
      *(void *)(a1 + 40) = v10;
      *(void *)(a1 + 48) = v11;
      *(unsigned char *)(a1 + 56) = v12;
      *(void *)(a1 + 64) = a2[8];
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v13 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 56) = v13;
    }
    uint64_t v14 = a2[9];
    uint64_t v15 = a2[10];
    uint64_t v16 = a2[11];
    uint64_t v17 = a2[12];
    uint64_t v18 = a2[13];
    uint64_t v19 = a2[14];
    uint64_t v21 = a2[15];
    uint64_t v20 = a2[16];
    uint64_t v95 = a2[17];
    uint64_t v96 = a2[18];
    uint64_t v97 = a2[19];
    uint64_t v98 = a2[20];
    uint64_t v99 = a2[21];
    int __dsta = *((_DWORD *)a2 + 44);
    char v103 = *((unsigned char *)a2 + 180);
    outlined copy of StateOrBinding<TextFieldState>(v14, v15, v16, v17, v18, v19, v21, v20, v95, v96, v97, v98, v99, __dsta, v103);
    *(void *)(a1 + 72) = v14;
    *(void *)(a1 + 80) = v15;
    *(void *)(a1 + 88) = v16;
    *(void *)(a1 + 96) = v17;
    *(void *)(a1 + 104) = v18;
    *(void *)(a1 + 112) = v19;
    *(void *)(a1 + 120) = v21;
    *(void *)(a1 + 128) = v20;
    *(void *)(a1 + 136) = v95;
    *(void *)(a1 + 144) = v96;
    *(void *)(a1 + 152) = v97;
    *(void *)(a1 + 160) = v98;
    *(void *)(a1 + 168) = v99;
    *(_DWORD *)(a1 + 176) = __dsta;
    *(unsigned char *)(a1 + 180) = v103;
    _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
    uint64_t v23 = *(int *)(v22 + 56);
    long long v24 = (void *)(a1 + v23);
    uint64_t v25 = (uint64_t *)((char *)a2 + v23);
    type metadata accessor for Binding<TextSelection?>(0);
    uint64_t v27 = v26;
    uint64_t v28 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v28 + 48))(v25, 1, v26))
    {
      type metadata accessor for Binding<TextSelection?>?(0);
      memcpy(v24, v25, *(void *)(*(void *)(v29 - 8) + 64));
      uint64_t v30 = v105;
    }
    else
    {
      uint64_t v31 = v25[1];
      *long long v24 = *v25;
      v24[1] = v31;
      uint64_t v32 = *(int *)(v27 + 32);
      __dst = (char *)v24 + v32;
      uint64_t v104 = v24;
      uint64_t v33 = (char *)v25 + v32;
      uint64_t v34 = type metadata accessor for TextSelection(0);
      uint64_t v100 = *(void *)(v34 - 8);
      uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48);
      swift_retain();
      swift_retain();
      if (v35(v33, 1, v34))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v33, *(void *)(*(void *)(v36 - 8) + 64));
        uint64_t v30 = v105;
        int v37 = v104;
      }
      else
      {
        uint64_t v38 = type metadata accessor for TextSelection.Indices(0);
        uint64_t v39 = v33;
        int v37 = v104;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, const void *, uint64_t))(*(void *)(v40 - 8) + 16))(__dst, v39, v40);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v39, *(void *)(*(void *)(v38 - 8) + 64));
        }
        __dst[*(int *)(v34 + 20)] = *((unsigned char *)v39 + *(int *)(v34 + 20));
        (*(void (**)(char *, void, uint64_t, uint64_t))(v100 + 56))(__dst, 0, 1, v34);
        uint64_t v30 = v105;
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v37, 0, 1, v27);
    }
    uint64_t v41 = type metadata accessor for SystemTextFieldConfiguration(0);
    *(void *)(a1 + *(int *)(v41 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v41 + 20));
    uint64_t v42 = v30[5];
    uint64_t v43 = a1 + v42;
    uint64_t v44 = (uint64_t)a2 + v42;
    uint64_t v45 = *(uint64_t *)((char *)a2 + v42);
    uint64_t v46 = *(uint64_t *)((char *)a2 + v42 + 8);
    *(void *)uint64_t v43 = v45;
    *(void *)(v43 + 8) = v46;
    *(_DWORD *)(v43 + 16) = *(_DWORD *)(v44 + 16);
    uint64_t v47 = *(void **)(v44 + 24);
    swift_bridgeObjectRetain();
    if (v47 == (void *)1)
    {
      long long v48 = *(_OWORD *)(v44 + 200);
      *(_OWORD *)(v43 + 184) = *(_OWORD *)(v44 + 184);
      *(_OWORD *)(v43 + 200) = v48;
      *(_OWORD *)(v43 + 216) = *(_OWORD *)(v44 + 216);
      *(void *)(v43 + 232) = *(void *)(v44 + 232);
      long long v49 = *(_OWORD *)(v44 + 136);
      *(_OWORD *)(v43 + 120) = *(_OWORD *)(v44 + 120);
      *(_OWORD *)(v43 + 136) = v49;
      long long v50 = *(_OWORD *)(v44 + 168);
      *(_OWORD *)(v43 + 152) = *(_OWORD *)(v44 + 152);
      *(_OWORD *)(v43 + 168) = v50;
      long long v51 = *(_OWORD *)(v44 + 72);
      *(_OWORD *)(v43 + 56) = *(_OWORD *)(v44 + 56);
      *(_OWORD *)(v43 + 72) = v51;
      long long v52 = *(_OWORD *)(v44 + 104);
      *(_OWORD *)(v43 + 88) = *(_OWORD *)(v44 + 88);
      *(_OWORD *)(v43 + 104) = v52;
      long long v53 = *(_OWORD *)(v44 + 40);
      *(_OWORD *)(v43 + 24) = *(_OWORD *)(v44 + 24);
      *(_OWORD *)(v43 + 40) = v53;
    }
    else
    {
      uint64_t v54 = *(void **)(v44 + 32);
      uint64_t v55 = *(void **)(v44 + 40);
      *(void *)(v43 + 24) = v47;
      *(void *)(v43 + 32) = v54;
      *(void *)(v43 + 40) = v55;
      int v56 = (_OWORD *)(v43 + 48);
      int v57 = (_OWORD *)(v44 + 48);
      unint64_t v58 = *(void *)(v44 + 168);
      id v59 = v47;
      id v60 = v54;
      id v61 = v55;
      if (v58 >> 1 == 4294967294)
      {
        long long v62 = *(_OWORD *)(v44 + 192);
        *(_OWORD *)(v43 + 176) = *(_OWORD *)(v44 + 176);
        *(_OWORD *)(v43 + 192) = v62;
        *(_OWORD *)(v43 + 208) = *(_OWORD *)(v44 + 208);
        *(_DWORD *)(v43 + 223) = *(_DWORD *)(v44 + 223);
        long long v63 = *(_OWORD *)(v44 + 128);
        *(_OWORD *)(v43 + 112) = *(_OWORD *)(v44 + 112);
        *(_OWORD *)(v43 + 128) = v63;
        long long v64 = *(_OWORD *)(v44 + 160);
        *(_OWORD *)(v43 + 144) = *(_OWORD *)(v44 + 144);
        *(_OWORD *)(v43 + 160) = v64;
        long long v65 = *(_OWORD *)(v44 + 64);
        _OWORD *v56 = *v57;
        *(_OWORD *)(v43 + 64) = v65;
        long long v66 = *(_OWORD *)(v44 + 96);
        *(_OWORD *)(v43 + 80) = *(_OWORD *)(v44 + 80);
        *(_OWORD *)(v43 + 96) = v66;
        uint64_t v30 = v105;
      }
      else
      {
        int v67 = *(unsigned __int8 *)(v44 + 56);
        if (v67 == 255)
        {
          *(void *)int v56 = *(void *)v57;
          *(unsigned char *)(v43 + 56) = *(unsigned char *)(v44 + 56);
        }
        else
        {
          uint64_t v68 = *(void **)(v44 + 48);
          outlined copy of GraphicsImage.Contents(v68, *(unsigned char *)(v44 + 56));
          *(void *)(v43 + 48) = v68;
          *(unsigned char *)(v43 + 56) = v67;
          unint64_t v58 = *(void *)(v44 + 168);
        }
        uint64_t v30 = v105;
        *(void *)(v43 + 64) = *(void *)(v44 + 64);
        *(_OWORD *)(v43 + 72) = *(_OWORD *)(v44 + 72);
        *(unsigned char *)(v43 + 88) = *(unsigned char *)(v44 + 88);
        *(_OWORD *)(v43 + 92) = *(_OWORD *)(v44 + 92);
        *(unsigned char *)(v43 + 108) = *(unsigned char *)(v44 + 108);
        long long v69 = *(_OWORD *)(v44 + 128);
        *(_OWORD *)(v43 + 112) = *(_OWORD *)(v44 + 112);
        *(_OWORD *)(v43 + 128) = v69;
        *(_WORD *)(v43 + 144) = *(_WORD *)(v44 + 144);
        *(unsigned char *)(v43 + 146) = *(unsigned char *)(v44 + 146);
        *(unsigned char *)(v43 + 147) = *(unsigned char *)(v44 + 147);
        if (v58 >> 1 == 0xFFFFFFFF)
        {
          long long v70 = *(_OWORD *)(v44 + 168);
          *(_OWORD *)(v43 + 152) = *(_OWORD *)(v44 + 152);
          *(_OWORD *)(v43 + 168) = v70;
        }
        else
        {
          uint64_t v71 = *(void *)(v44 + 152);
          uint64_t v72 = *(void *)(v44 + 160);
          uint64_t v73 = *(void *)(v44 + 176);
          outlined copy of AccessibilityImageLabel(v71, v72, v58);
          *(void *)(v43 + 152) = v71;
          *(void *)(v43 + 160) = v72;
          *(void *)(v43 + 168) = v58;
          *(void *)(v43 + 176) = v73;
        }
        uint64_t v74 = *(void *)(v44 + 192);
        *(void *)(v43 + 184) = *(void *)(v44 + 184);
        *(void *)(v43 + 192) = v74;
        *(_WORD *)(v43 + 200) = *(_WORD *)(v44 + 200);
        *(_DWORD *)(v43 + 204) = *(_DWORD *)(v44 + 204);
        *(unsigned char *)(v43 + 208) = *(unsigned char *)(v44 + 208);
        uint64_t v75 = *(void **)(v44 + 216);
        *(void *)(v43 + 216) = v75;
        *(_WORD *)(v43 + 224) = *(_WORD *)(v44 + 224);
        *(unsigned char *)(v43 + 226) = *(unsigned char *)(v44 + 226);
        swift_unknownObjectRetain();
        swift_retain();
        id v76 = v75;
      }
      *(unsigned char *)(v43 + 227) = *(unsigned char *)(v44 + 227);
      *(void *)(v43 + 232) = *(void *)(v44 + 232);
      swift_retain();
    }
    uint64_t v77 = *(void *)(v44 + 288);
    if (v77 == 1)
    {
      long long v78 = *(_OWORD *)(v44 + 256);
      *(_OWORD *)(v43 + 240) = *(_OWORD *)(v44 + 240);
      *(_OWORD *)(v43 + 256) = v78;
      long long v79 = *(_OWORD *)(v44 + 288);
      *(_OWORD *)(v43 + 272) = *(_OWORD *)(v44 + 272);
      *(_OWORD *)(v43 + 288) = v79;
    }
    else
    {
      *(_OWORD *)(v43 + 240) = *(_OWORD *)(v44 + 240);
      *(void *)(v43 + 256) = *(void *)(v44 + 256);
      long long v80 = (_OWORD *)(v43 + 264);
      long long v81 = (_OWORD *)(v44 + 264);
      if (v77)
      {
        uint64_t v82 = *(void *)(v44 + 296);
        *(void *)(v43 + 288) = v77;
        *(void *)(v43 + 296) = v82;
        (**(void (***)(_OWORD *, _OWORD *))(v77 - 8))(v80, v81);
      }
      else
      {
        long long v83 = *(_OWORD *)(v44 + 280);
        *long long v80 = *v81;
        *(_OWORD *)(v43 + 280) = v83;
        *(void *)(v43 + 296) = *(void *)(v44 + 296);
      }
    }
    *(void *)(v43 + 304) = *(void *)(v44 + 304);
    *(unsigned char *)(v43 + 312) = *(unsigned char *)(v44 + 312);
    uint64_t v84 = *(void *)(v44 + 328);
    *(void *)(v43 + 320) = *(void *)(v44 + 320);
    *(void *)(v43 + 328) = v84;
    uint64_t v85 = v30[6];
    uint64_t v86 = v30[7];
    uint64_t v87 = (_OWORD *)(a1 + v85);
    uint64_t v88 = (_OWORD *)((char *)a2 + v85);
    long long v89 = v88[1];
    *uint64_t v87 = *v88;
    v87[1] = v89;
    uint64_t v90 = a1 + v86;
    uint64_t v91 = (uint64_t)a2 + v86;
    uint64_t v92 = *(uint64_t *)((char *)a2 + v86);
    char v93 = *(unsigned char *)(v91 + 8);
    swift_bridgeObjectRetain();
    outlined copy of Environment<Bool>.Content(v92, v93);
    *(void *)uint64_t v90 = v92;
    *(unsigned char *)(v90 + 8) = v93;
  }
  return a1;
}

uint64_t destroy for TextViewAdaptor(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 64))
  {
    outlined consume of Text.Storage(*(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
    swift_bridgeObjectRelease();
  }
  outlined consume of StateOrBinding<TextFieldState>(*(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144), *(void *)(a1 + 152), *(void *)(a1 + 160), *(void *)(a1 + 168), *(_DWORD *)(a1 + 176), *(unsigned char *)(a1 + 180));
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v5 = a1 + *(int *)(v4 + 56);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v7 = v6;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    swift_release();
    swift_release();
    uint64_t v8 = v5 + *(int *)(v7 + 32);
    uint64_t v9 = type metadata accessor for TextSelection(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
    {
      type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v8, v10);
      }
    }
  }
  uint64_t v11 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  char v12 = *(void **)(v11 + 24);
  if (v12 != (void *)1)
  {

    uint64_t v13 = *(void *)(v11 + 168);
    unint64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
    if ((v13 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      int v15 = *(unsigned __int8 *)(v11 + 56);
      if (v15 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(v11 + 48), v15);
        uint64_t v13 = *(void *)(v11 + 168);
        unint64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v14 != 0x1FFFFFFFELL) {
        outlined consume of AccessibilityImageLabel(*(void *)(v11 + 152), *(void *)(v11 + 160), v13);
      }
      swift_unknownObjectRelease();
      swift_release();
    }
    swift_release();
  }
  if (*(void *)(v11 + 288) >= 2uLL) {
    __swift_destroy_boxed_opaque_existential_1(v11 + 264);
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = a1 + *(int *)(a2 + 28);
  uint64_t v17 = *(void *)v16;
  char v18 = *(unsigned char *)(v16 + 8);

  return outlined consume of Environment<Bool>.Content(v17, v18);
}

uint64_t initializeWithCopy for TextViewAdaptor(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v7 = *(void *)(a2 + 64);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    uint64_t v8 = *(void *)(a2 + 40);
    uint64_t v9 = *(void *)(a2 + 48);
    char v10 = *(unsigned char *)(a2 + 56);
    outlined copy of Text.Storage(v8, v9, v10);
    *(void *)(a1 + 40) = v8;
    *(void *)(a1 + 48) = v9;
    *(unsigned char *)(a1 + 56) = v10;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v11;
  }
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a2 + 80);
  uint64_t v14 = *(void *)(a2 + 88);
  uint64_t v15 = *(void *)(a2 + 96);
  uint64_t v16 = *(void *)(a2 + 104);
  uint64_t v17 = *(void *)(a2 + 112);
  uint64_t v19 = *(void *)(a2 + 120);
  uint64_t v18 = *(void *)(a2 + 128);
  uint64_t v92 = *(void *)(a2 + 136);
  uint64_t v93 = *(void *)(a2 + 144);
  uint64_t v94 = *(void *)(a2 + 152);
  uint64_t v95 = *(void *)(a2 + 160);
  int __dsta = *(void **)(a2 + 168);
  int v98 = *(_DWORD *)(a2 + 176);
  char v99 = *(unsigned char *)(a2 + 180);
  outlined copy of StateOrBinding<TextFieldState>(v12, v13, v14, v15, v16, v17, v19, v18, v92, v93, v94, v95, (uint64_t)__dsta, v98, v99);
  *(void *)(a1 + 72) = v12;
  *(void *)(a1 + 80) = v13;
  *(void *)(a1 + 88) = v14;
  *(void *)(a1 + 96) = v15;
  *(void *)(a1 + 104) = v16;
  *(void *)(a1 + 112) = v17;
  *(void *)(a1 + 120) = v19;
  *(void *)(a1 + 128) = v18;
  *(void *)(a1 + 136) = v92;
  *(void *)(a1 + 144) = v93;
  *(void *)(a1 + 152) = v94;
  *(void *)(a1 + 160) = v95;
  *(void *)(a1 + 168) = __dsta;
  *(_DWORD *)(a1 + 176) = v98;
  *(unsigned char *)(a1 + 180) = v99;
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v21 = *(int *)(v20 + 56);
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v100 = a2;
  uint64_t v23 = (void *)(a2 + v21);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v25 = v24;
  uint64_t v26 = *(void *)(v24 - 8);
  uint64_t v27 = a1;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v26 + 48))(v23, 1, v24))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v22, v23, *(void *)(*(void *)(v28 - 8) + 64));
    uint64_t v29 = a3;
  }
  else
  {
    uint64_t v30 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v30;
    uint64_t v31 = *(int *)(v25 + 32);
    __dst = (char *)v22 + v31;
    uint64_t v32 = (char *)v23 + v31;
    uint64_t v33 = type metadata accessor for TextSelection(0);
    uint64_t v34 = *(void *)(v33 - 8);
    uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
    swift_retain();
    swift_retain();
    if (v35(v32, 1, v33))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(__dst, v32, *(void *)(*(void *)(v36 - 8) + 64));
      uint64_t v27 = a1;
      uint64_t v29 = a3;
    }
    else
    {
      uint64_t v37 = type metadata accessor for TextSelection.Indices(0);
      uint64_t v29 = a3;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16))(__dst, v32, v38);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(__dst, v32, *(void *)(*(void *)(v37 - 8) + 64));
      }
      __dst[*(int *)(v33 + 20)] = v32[*(int *)(v33 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(__dst, 0, 1, v33);
      uint64_t v27 = a1;
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v22, 0, 1, v25);
  }
  uint64_t v39 = type metadata accessor for SystemTextFieldConfiguration(0);
  *(void *)(v27 + *(int *)(v39 + 20)) = *(void *)(v100 + *(int *)(v39 + 20));
  uint64_t v40 = v29[5];
  uint64_t v41 = v27 + v40;
  uint64_t v42 = v100 + v40;
  uint64_t v43 = *(void *)(v100 + v40);
  uint64_t v44 = *(void *)(v100 + v40 + 8);
  *(void *)uint64_t v41 = v43;
  *(void *)(v41 + 8) = v44;
  *(_DWORD *)(v41 + 16) = *(_DWORD *)(v42 + 16);
  uint64_t v45 = *(void **)(v42 + 24);
  swift_bridgeObjectRetain();
  if (v45 == (void *)1)
  {
    long long v46 = *(_OWORD *)(v42 + 200);
    *(_OWORD *)(v41 + 184) = *(_OWORD *)(v42 + 184);
    *(_OWORD *)(v41 + 200) = v46;
    *(_OWORD *)(v41 + 216) = *(_OWORD *)(v42 + 216);
    *(void *)(v41 + 232) = *(void *)(v42 + 232);
    long long v47 = *(_OWORD *)(v42 + 136);
    *(_OWORD *)(v41 + 120) = *(_OWORD *)(v42 + 120);
    *(_OWORD *)(v41 + 136) = v47;
    long long v48 = *(_OWORD *)(v42 + 168);
    *(_OWORD *)(v41 + 152) = *(_OWORD *)(v42 + 152);
    *(_OWORD *)(v41 + 168) = v48;
    long long v49 = *(_OWORD *)(v42 + 72);
    *(_OWORD *)(v41 + 56) = *(_OWORD *)(v42 + 56);
    *(_OWORD *)(v41 + 72) = v49;
    long long v50 = *(_OWORD *)(v42 + 104);
    *(_OWORD *)(v41 + 88) = *(_OWORD *)(v42 + 88);
    *(_OWORD *)(v41 + 104) = v50;
    long long v51 = *(_OWORD *)(v42 + 40);
    *(_OWORD *)(v41 + 24) = *(_OWORD *)(v42 + 24);
    *(_OWORD *)(v41 + 40) = v51;
  }
  else
  {
    long long v52 = *(void **)(v42 + 32);
    long long v53 = *(void **)(v42 + 40);
    *(void *)(v41 + 24) = v45;
    *(void *)(v41 + 32) = v52;
    *(void *)(v41 + 40) = v53;
    uint64_t v54 = (_OWORD *)(v41 + 48);
    uint64_t v55 = (_OWORD *)(v42 + 48);
    unint64_t v56 = *(void *)(v42 + 168);
    id v57 = v45;
    id v58 = v52;
    id v59 = v53;
    if (v56 >> 1 == 4294967294)
    {
      long long v60 = *(_OWORD *)(v42 + 192);
      *(_OWORD *)(v41 + 176) = *(_OWORD *)(v42 + 176);
      *(_OWORD *)(v41 + 192) = v60;
      *(_OWORD *)(v41 + 208) = *(_OWORD *)(v42 + 208);
      *(_DWORD *)(v41 + 223) = *(_DWORD *)(v42 + 223);
      long long v61 = *(_OWORD *)(v42 + 128);
      *(_OWORD *)(v41 + 112) = *(_OWORD *)(v42 + 112);
      *(_OWORD *)(v41 + 128) = v61;
      long long v62 = *(_OWORD *)(v42 + 160);
      *(_OWORD *)(v41 + 144) = *(_OWORD *)(v42 + 144);
      *(_OWORD *)(v41 + 160) = v62;
      long long v63 = *(_OWORD *)(v42 + 64);
      _OWORD *v54 = *v55;
      *(_OWORD *)(v41 + 64) = v63;
      long long v64 = *(_OWORD *)(v42 + 96);
      *(_OWORD *)(v41 + 80) = *(_OWORD *)(v42 + 80);
      *(_OWORD *)(v41 + 96) = v64;
      uint64_t v29 = a3;
    }
    else
    {
      int v65 = *(unsigned __int8 *)(v42 + 56);
      if (v65 == 255)
      {
        *(void *)uint64_t v54 = *(void *)v55;
        *(unsigned char *)(v41 + 56) = *(unsigned char *)(v42 + 56);
      }
      else
      {
        long long v66 = *(void **)(v42 + 48);
        outlined copy of GraphicsImage.Contents(v66, *(unsigned char *)(v42 + 56));
        *(void *)(v41 + 48) = v66;
        *(unsigned char *)(v41 + 56) = v65;
        unint64_t v56 = *(void *)(v42 + 168);
      }
      uint64_t v29 = a3;
      *(void *)(v41 + 64) = *(void *)(v42 + 64);
      *(_OWORD *)(v41 + 72) = *(_OWORD *)(v42 + 72);
      *(unsigned char *)(v41 + 88) = *(unsigned char *)(v42 + 88);
      *(_OWORD *)(v41 + 92) = *(_OWORD *)(v42 + 92);
      *(unsigned char *)(v41 + 108) = *(unsigned char *)(v42 + 108);
      long long v67 = *(_OWORD *)(v42 + 128);
      *(_OWORD *)(v41 + 112) = *(_OWORD *)(v42 + 112);
      *(_OWORD *)(v41 + 128) = v67;
      *(_WORD *)(v41 + 144) = *(_WORD *)(v42 + 144);
      *(unsigned char *)(v41 + 146) = *(unsigned char *)(v42 + 146);
      *(unsigned char *)(v41 + 147) = *(unsigned char *)(v42 + 147);
      if (v56 >> 1 == 0xFFFFFFFF)
      {
        long long v68 = *(_OWORD *)(v42 + 168);
        *(_OWORD *)(v41 + 152) = *(_OWORD *)(v42 + 152);
        *(_OWORD *)(v41 + 168) = v68;
      }
      else
      {
        uint64_t v69 = *(void *)(v42 + 152);
        uint64_t v70 = *(void *)(v42 + 160);
        uint64_t v71 = *(void *)(v42 + 176);
        outlined copy of AccessibilityImageLabel(v69, v70, v56);
        *(void *)(v41 + 152) = v69;
        *(void *)(v41 + 160) = v70;
        *(void *)(v41 + 168) = v56;
        *(void *)(v41 + 176) = v71;
      }
      uint64_t v72 = *(void *)(v42 + 192);
      *(void *)(v41 + 184) = *(void *)(v42 + 184);
      *(void *)(v41 + 192) = v72;
      *(_WORD *)(v41 + 200) = *(_WORD *)(v42 + 200);
      *(_DWORD *)(v41 + 204) = *(_DWORD *)(v42 + 204);
      *(unsigned char *)(v41 + 208) = *(unsigned char *)(v42 + 208);
      uint64_t v73 = *(void **)(v42 + 216);
      *(void *)(v41 + 216) = v73;
      *(_WORD *)(v41 + 224) = *(_WORD *)(v42 + 224);
      *(unsigned char *)(v41 + 226) = *(unsigned char *)(v42 + 226);
      swift_unknownObjectRetain();
      swift_retain();
      id v74 = v73;
    }
    *(unsigned char *)(v41 + 227) = *(unsigned char *)(v42 + 227);
    *(void *)(v41 + 232) = *(void *)(v42 + 232);
    swift_retain();
  }
  uint64_t v75 = *(void *)(v42 + 288);
  if (v75 == 1)
  {
    long long v76 = *(_OWORD *)(v42 + 256);
    *(_OWORD *)(v41 + 240) = *(_OWORD *)(v42 + 240);
    *(_OWORD *)(v41 + 256) = v76;
    long long v77 = *(_OWORD *)(v42 + 288);
    *(_OWORD *)(v41 + 272) = *(_OWORD *)(v42 + 272);
    *(_OWORD *)(v41 + 288) = v77;
  }
  else
  {
    *(_OWORD *)(v41 + 240) = *(_OWORD *)(v42 + 240);
    *(void *)(v41 + 256) = *(void *)(v42 + 256);
    long long v78 = (_OWORD *)(v41 + 264);
    long long v79 = (_OWORD *)(v42 + 264);
    if (v75)
    {
      uint64_t v80 = *(void *)(v42 + 296);
      *(void *)(v41 + 288) = v75;
      *(void *)(v41 + 296) = v80;
      (**(void (***)(_OWORD *, _OWORD *))(v75 - 8))(v78, v79);
    }
    else
    {
      long long v81 = *(_OWORD *)(v42 + 280);
      _OWORD *v78 = *v79;
      *(_OWORD *)(v41 + 280) = v81;
      *(void *)(v41 + 296) = *(void *)(v42 + 296);
    }
  }
  *(void *)(v41 + 304) = *(void *)(v42 + 304);
  *(unsigned char *)(v41 + 312) = *(unsigned char *)(v42 + 312);
  uint64_t v82 = *(void *)(v42 + 328);
  *(void *)(v41 + 320) = *(void *)(v42 + 320);
  *(void *)(v41 + 328) = v82;
  uint64_t v83 = v29[6];
  uint64_t v84 = v29[7];
  uint64_t v85 = (_OWORD *)(v27 + v83);
  uint64_t v86 = (_OWORD *)(v100 + v83);
  long long v87 = v86[1];
  *uint64_t v85 = *v86;
  v85[1] = v87;
  uint64_t v88 = v27 + v84;
  uint64_t v89 = *(void *)(v100 + v84);
  char v90 = *(unsigned char *)(v100 + v84 + 8);
  swift_bridgeObjectRetain();
  outlined copy of Environment<Bool>.Content(v89, v90);
  *(void *)uint64_t v88 = v89;
  *(unsigned char *)(v88 + 8) = v90;
  return v27;
}

void *assignWithCopy for TextViewAdaptor(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a1;
  *a1 = *a2;
  swift_retain();
  swift_release();
  v5[1] = a2[1];
  swift_retain();
  swift_release();
  void v5[2] = a2[2];
  void v5[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)v5 + 32) = *((unsigned char *)a2 + 32);
  *((unsigned char *)v5 + 33) = *((unsigned char *)a2 + 33);
  uint64_t v6 = v5 + 5;
  uint64_t v7 = a2 + 5;
  uint64_t v8 = a2[8];
  v251 = a3;
  if (v5[8])
  {
    if (v8)
    {
      uint64_t v9 = a2[5];
      uint64_t v10 = a2[6];
      char v11 = *((unsigned char *)a2 + 56);
      outlined copy of Text.Storage(v9, v10, v11);
      uint64_t v12 = v5[5];
      uint64_t v13 = v5[6];
      char v14 = *((unsigned char *)v5 + 56);
      v5[5] = v9;
      v5[6] = v10;
      *((unsigned char *)v5 + 56) = v11;
      outlined consume of Text.Storage(v12, v13, v14);
      unsigned char v5[8] = a2[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text((uint64_t)(v5 + 5));
      long long v18 = *(_OWORD *)(a2 + 7);
      *uint64_t v6 = *v7;
      *(_OWORD *)(v5 + 7) = v18;
    }
  }
  else if (v8)
  {
    uint64_t v15 = a2[5];
    uint64_t v16 = a2[6];
    char v17 = *((unsigned char *)a2 + 56);
    outlined copy of Text.Storage(v15, v16, v17);
    v5[5] = v15;
    v5[6] = v16;
    *((unsigned char *)v5 + 56) = v17;
    unsigned char v5[8] = a2[8];
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v19 = *(_OWORD *)(a2 + 7);
    *uint64_t v6 = *v7;
    *(_OWORD *)(v5 + 7) = v19;
  }
  uint64_t v20 = a2[9];
  uint64_t v21 = a2[10];
  uint64_t v22 = a2[12];
  uint64_t v24 = a2[13];
  uint64_t v23 = a2[14];
  uint64_t v25 = a2;
  uint64_t v27 = a2[15];
  uint64_t v26 = a2[16];
  uint64_t v241 = a2[17];
  uint64_t v242 = a2[18];
  uint64_t v243 = a2[19];
  uint64_t v244 = a2[20];
  uint64_t v245 = a2[21];
  int __dsta = *((_DWORD *)a2 + 44);
  char v249 = *((unsigned char *)a2 + 180);
  uint64_t v28 = a2[11];
  outlined copy of StateOrBinding<TextFieldState>(v20, v21, v28, v22, v24, v23, v27, v26, v241, v242, v243, v244, v245, __dsta, v249);
  uint64_t v29 = v5[9];
  uint64_t v30 = v5[10];
  uint64_t v31 = v5[11];
  uint64_t v32 = v5[12];
  uint64_t v33 = v5[13];
  uint64_t v34 = v5[14];
  uint64_t v35 = v5[15];
  uint64_t v36 = v5[16];
  long long v37 = *(_OWORD *)(v5 + 17);
  long long v38 = *(_OWORD *)(v5 + 19);
  uint64_t v39 = v5[21];
  int v40 = *((_DWORD *)v5 + 44);
  char v41 = *((unsigned char *)v5 + 180);
  v5[9] = v20;
  v5[10] = v21;
  v5[11] = v28;
  v5[12] = v22;
  void v5[13] = v24;
  v5[14] = v23;
  v5[15] = v27;
  unsigned char v5[16] = v26;
  v5[17] = v241;
  v5[18] = v242;
  v5[19] = v243;
  v5[20] = v244;
  v5[21] = v245;
  *((_DWORD *)v5 + 44) = __dsta;
  *((unsigned char *)v5 + 180) = v249;
  outlined consume of StateOrBinding<TextFieldState>(v29, v30, v31, v32, v33, v34, v35, v36, v37, *((uint64_t *)&v37 + 1), v38, *((uint64_t *)&v38 + 1), v39, v40, v41);
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v43 = *(int *)(v42 + 56);
  uint64_t v44 = (void *)((char *)v5 + v43);
  v250 = v25;
  uint64_t v45 = (void *)((char *)v25 + v43);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v47 = v46;
  uint64_t v48 = *(void *)(v46 - 8);
  long long v49 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v48 + 48);
  LODWORD(v26) = v49(v44, 1, v46);
  int v50 = v49(v45, 1, v47);
  if (v26)
  {
    long long v51 = v251;
    if (!v50)
    {
      uint64_t v246 = v5;
      *uint64_t v44 = *v45;
      v44[1] = v45[1];
      uint64_t v52 = *(int *)(v47 + 32);
      __dst = (char *)v44 + v52;
      long long v53 = (char *)v45 + v52;
      uint64_t v54 = type metadata accessor for TextSelection(0);
      uint64_t v55 = *(void *)(v54 - 8);
      unint64_t v56 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48);
      id v57 = v53;
      swift_retain();
      swift_retain();
      if (v56(v53, 1, v54))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v53, *(void *)(*(void *)(v58 - 8) + 64));
        long long v51 = v251;
      }
      else
      {
        uint64_t v71 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 16))(__dst, v53, v72);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v53, *(void *)(*(void *)(v71 - 8) + 64));
        }
        uint64_t v5 = v246;
        long long v51 = v251;
        __dst[*(int *)(v54 + 20)] = v57[*(int *)(v54 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(__dst, 0, 1, v54);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v48 + 56))(v44, 0, 1, v47);
      goto LABEL_27;
    }
LABEL_14:
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v44, v45, *(void *)(*(void *)(v59 - 8) + 64));
LABEL_27:
    long long v68 = v250;
    goto LABEL_28;
  }
  long long v51 = v251;
  if (v50)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v44, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
    goto LABEL_14;
  }
  *uint64_t v44 = *v45;
  swift_retain();
  swift_release();
  v44[1] = v45[1];
  swift_retain();
  swift_release();
  uint64_t v60 = *(int *)(v47 + 32);
  long long v61 = (char *)v44 + v60;
  long long v62 = (char *)v45 + v60;
  uint64_t v63 = type metadata accessor for TextSelection(0);
  uint64_t v64 = *(void *)(v63 - 8);
  int v65 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v64 + 48);
  int v66 = v65(v61, 1, v63);
  int v67 = v65(v62, 1, v63);
  long long v68 = v250;
  if (v66)
  {
    if (!v67)
    {
      uint64_t v69 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v70 - 8) + 16))(v61, v62, v70);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v61, v62, *(void *)(*(void *)(v69 - 8) + 64));
      }
      v61[*(int *)(v63 + 20)] = v62[*(int *)(v63 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
      goto LABEL_28;
    }
LABEL_23:
    type metadata accessor for TextSelection?(0);
    memcpy(v61, v62, *(void *)(*(void *)(v73 - 8) + 64));
    goto LABEL_28;
  }
  if (v67)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v61, type metadata accessor for TextSelection);
    goto LABEL_23;
  }
  if (v5 != v250)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v61, type metadata accessor for TextSelection.Indices);
    uint64_t v182 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v183 - 8) + 16))(v61, v62, v183);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v61, v62, *(void *)(*(void *)(v182 - 8) + 64));
    }
  }
  v61[*(int *)(v63 + 20)] = v62[*(int *)(v63 + 20)];
LABEL_28:
  uint64_t v74 = type metadata accessor for SystemTextFieldConfiguration(0);
  *(void *)((char *)v5 + *(int *)(v74 + 20)) = *(void *)((char *)v68 + *(int *)(v74 + 20));
  uint64_t v75 = v51[5];
  long long v76 = (char *)v5 + v75;
  uint64_t v77 = (uint64_t)v68 + v75;
  *(void *)((char *)v5 + v75) = *(void *)((char *)v68 + v75);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v76 + 1) = *(void *)(v77 + 8);
  *((_DWORD *)v76 + 4) = *(_DWORD *)(v77 + 16);
  long long v78 = v76 + 24;
  long long v79 = (void *)*((void *)v76 + 3);
  long long v81 = (_OWORD *)(v77 + 24);
  uint64_t v80 = *(void **)(v77 + 24);
  if (v79 == (void *)1)
  {
    if (v80 == (void *)1)
    {
      long long v82 = *(_OWORD *)(v77 + 40);
      _OWORD *v78 = *v81;
      *(_OWORD *)(v76 + 40) = v82;
      long long v83 = *(_OWORD *)(v77 + 56);
      long long v84 = *(_OWORD *)(v77 + 72);
      long long v85 = *(_OWORD *)(v77 + 104);
      *(_OWORD *)(v76 + 88) = *(_OWORD *)(v77 + 88);
      *(_OWORD *)(v76 + 104) = v85;
      *(_OWORD *)(v76 + 56) = v83;
      *(_OWORD *)(v76 + 72) = v84;
      long long v86 = *(_OWORD *)(v77 + 120);
      long long v87 = *(_OWORD *)(v77 + 136);
      long long v88 = *(_OWORD *)(v77 + 168);
      *(_OWORD *)(v76 + 152) = *(_OWORD *)(v77 + 152);
      *(_OWORD *)(v76 + 168) = v88;
      *(_OWORD *)(v76 + 120) = v86;
      *(_OWORD *)(v76 + 136) = v87;
      long long v89 = *(_OWORD *)(v77 + 184);
      long long v90 = *(_OWORD *)(v77 + 200);
      long long v91 = *(_OWORD *)(v77 + 216);
      *((void *)v76 + 29) = *(void *)(v77 + 232);
      *(_OWORD *)(v76 + 200) = v90;
      *(_OWORD *)(v76 + 216) = v91;
      *(_OWORD *)(v76 + 184) = v89;
    }
    else
    {
      *((void *)v76 + 3) = v80;
      long long v102 = *(void **)(v77 + 32);
      *((void *)v76 + 4) = v102;
      char v103 = *(void **)(v77 + 40);
      *((void *)v76 + 5) = v103;
      uint64_t v104 = v76 + 48;
      uint64_t v105 = (id *)(v77 + 48);
      unint64_t v106 = *(void *)(v77 + 168);
      id v107 = v80;
      id v108 = v102;
      id v109 = v103;
      if (v106 >> 1 == 4294967294)
      {
        long long v110 = *(_OWORD *)v105;
        long long v111 = *(_OWORD *)(v77 + 64);
        long long v112 = *(_OWORD *)(v77 + 96);
        *((_OWORD *)v76 + 5) = *(_OWORD *)(v77 + 80);
        *((_OWORD *)v76 + 6) = v112;
        _OWORD *v104 = v110;
        *((_OWORD *)v76 + 4) = v111;
        long long v113 = *(_OWORD *)(v77 + 112);
        long long v114 = *(_OWORD *)(v77 + 128);
        long long v115 = *(_OWORD *)(v77 + 160);
        *((_OWORD *)v76 + 9) = *(_OWORD *)(v77 + 144);
        *((_OWORD *)v76 + 10) = v115;
        *((_OWORD *)v76 + 7) = v113;
        *((_OWORD *)v76 + 8) = v114;
        long long v116 = *(_OWORD *)(v77 + 176);
        long long v117 = *(_OWORD *)(v77 + 192);
        long long v118 = *(_OWORD *)(v77 + 208);
        *(_DWORD *)(v76 + 223) = *(_DWORD *)(v77 + 223);
        *((_OWORD *)v76 + 12) = v117;
        *((_OWORD *)v76 + 13) = v118;
        *((_OWORD *)v76 + 11) = v116;
      }
      else
      {
        int v138 = *(unsigned __int8 *)(v77 + 56);
        if (v138 == 255)
        {
          id v155 = *v105;
          v76[56] = *(unsigned char *)(v77 + 56);
          *(void *)uint64_t v104 = v155;
        }
        else
        {
          id v139 = *v105;
          outlined copy of GraphicsImage.Contents(*v105, *(unsigned char *)(v77 + 56));
          *((void *)v76 + 6) = v139;
          v76[56] = v138;
        }
        *((void *)v76 + 8) = *(void *)(v77 + 64);
        *(_OWORD *)(v76 + 72) = *(_OWORD *)(v77 + 72);
        v76[88] = *(unsigned char *)(v77 + 88);
        long long v156 = *(_OWORD *)(v77 + 92);
        v76[108] = *(unsigned char *)(v77 + 108);
        *(_OWORD *)(v76 + 92) = v156;
        long long v157 = *(_OWORD *)(v77 + 112);
        long long v158 = *(_OWORD *)(v77 + 128);
        v76[144] = *(unsigned char *)(v77 + 144);
        *((_OWORD *)v76 + 7) = v157;
        *((_OWORD *)v76 + 8) = v158;
        v76[145] = *(unsigned char *)(v77 + 145);
        v76[146] = *(unsigned char *)(v77 + 146);
        v76[147] = *(unsigned char *)(v77 + 147);
        unint64_t v159 = *(void *)(v77 + 168);
        if (v159 >> 1 == 0xFFFFFFFF)
        {
          long long v160 = *(_OWORD *)(v77 + 168);
          *(_OWORD *)(v76 + 152) = *(_OWORD *)(v77 + 152);
          *(_OWORD *)(v76 + 168) = v160;
        }
        else
        {
          uint64_t v161 = *(void *)(v77 + 152);
          uint64_t v162 = *(void *)(v77 + 160);
          uint64_t v163 = v51;
          uint64_t v164 = *(void *)(v77 + 176);
          outlined copy of AccessibilityImageLabel(v161, v162, *(void *)(v77 + 168));
          *((void *)v76 + 19) = v161;
          *((void *)v76 + 20) = v162;
          *((void *)v76 + 21) = v159;
          *((void *)v76 + 22) = v164;
          long long v51 = v163;
        }
        *((void *)v76 + 23) = *(void *)(v77 + 184);
        *((void *)v76 + 24) = *(void *)(v77 + 192);
        v76[200] = *(unsigned char *)(v77 + 200);
        v76[201] = *(unsigned char *)(v77 + 201);
        int v165 = *(_DWORD *)(v77 + 204);
        v76[208] = *(unsigned char *)(v77 + 208);
        *((_DWORD *)v76 + 51) = v165;
        uint64_t v166 = *(void **)(v77 + 216);
        *((void *)v76 + 27) = v166;
        *((_WORD *)v76 + 112) = *(_WORD *)(v77 + 224);
        v76[226] = *(unsigned char *)(v77 + 226);
        swift_unknownObjectRetain();
        swift_retain();
        id v167 = v166;
      }
      v76[227] = *(unsigned char *)(v77 + 227);
      *((void *)v76 + 29) = *(void *)(v77 + 232);
      swift_retain();
    }
  }
  else if (v80 == (void *)1)
  {
    outlined destroy of PlatformItem.PrimaryContent((uint64_t)(v76 + 24));
    long long v92 = *(_OWORD *)(v77 + 40);
    _OWORD *v78 = *v81;
    *(_OWORD *)(v76 + 40) = v92;
    long long v93 = *(_OWORD *)(v77 + 104);
    long long v95 = *(_OWORD *)(v77 + 56);
    long long v94 = *(_OWORD *)(v77 + 72);
    *(_OWORD *)(v76 + 88) = *(_OWORD *)(v77 + 88);
    *(_OWORD *)(v76 + 104) = v93;
    *(_OWORD *)(v76 + 56) = v95;
    *(_OWORD *)(v76 + 72) = v94;
    long long v96 = *(_OWORD *)(v77 + 168);
    long long v98 = *(_OWORD *)(v77 + 120);
    long long v97 = *(_OWORD *)(v77 + 136);
    *(_OWORD *)(v76 + 152) = *(_OWORD *)(v77 + 152);
    *(_OWORD *)(v76 + 168) = v96;
    *(_OWORD *)(v76 + 120) = v98;
    *(_OWORD *)(v76 + 136) = v97;
    long long v100 = *(_OWORD *)(v77 + 200);
    long long v99 = *(_OWORD *)(v77 + 216);
    long long v101 = *(_OWORD *)(v77 + 184);
    *((void *)v76 + 29) = *(void *)(v77 + 232);
    *(_OWORD *)(v76 + 200) = v100;
    *(_OWORD *)(v76 + 216) = v99;
    *(_OWORD *)(v76 + 184) = v101;
  }
  else
  {
    *((void *)v76 + 3) = v80;
    id v119 = v80;

    int v120 = (void *)*((void *)v76 + 4);
    uint64_t v121 = *(void **)(v77 + 32);
    *((void *)v76 + 4) = v121;
    id v122 = v121;

    uint64_t v123 = (void *)*((void *)v76 + 5);
    char v124 = *(void **)(v77 + 40);
    *((void *)v76 + 5) = v124;
    id v125 = v124;

    BOOL v126 = v76 + 48;
    int v127 = (long long *)(v77 + 48);
    unint64_t v128 = *(void *)(v77 + 168) & 0xFFFFFFFFFFFFFFFELL;
    if (*((void *)v76 + 21) >> 1 == 4294967294)
    {
      if (v128 == 0x1FFFFFFFCLL)
      {
        long long v129 = *v127;
        long long v130 = *(_OWORD *)(v77 + 64);
        long long v131 = *(_OWORD *)(v77 + 96);
        *((_OWORD *)v76 + 5) = *(_OWORD *)(v77 + 80);
        *((_OWORD *)v76 + 6) = v131;
        _OWORD *v126 = v129;
        *((_OWORD *)v76 + 4) = v130;
        long long v132 = *(_OWORD *)(v77 + 112);
        long long v133 = *(_OWORD *)(v77 + 128);
        long long v134 = *(_OWORD *)(v77 + 160);
        *((_OWORD *)v76 + 9) = *(_OWORD *)(v77 + 144);
        *((_OWORD *)v76 + 10) = v134;
        *((_OWORD *)v76 + 7) = v132;
        *((_OWORD *)v76 + 8) = v133;
        long long v135 = *(_OWORD *)(v77 + 176);
        long long v136 = *(_OWORD *)(v77 + 192);
        long long v137 = *(_OWORD *)(v77 + 208);
        *(_DWORD *)(v76 + 223) = *(_DWORD *)(v77 + 223);
        *((_OWORD *)v76 + 12) = v136;
        *((_OWORD *)v76 + 13) = v137;
        *((_OWORD *)v76 + 11) = v135;
      }
      else
      {
        int v149 = *(unsigned __int8 *)(v77 + 56);
        if (v149 == 255)
        {
          id v168 = *(void **)v127;
          v76[56] = *(unsigned char *)(v77 + 56);
          *(void *)BOOL v126 = v168;
        }
        else
        {
          int v150 = *(void **)v127;
          outlined copy of GraphicsImage.Contents(v150, *(unsigned char *)(v77 + 56));
          *((void *)v76 + 6) = v150;
          v76[56] = v149;
        }
        *((void *)v76 + 8) = *(void *)(v77 + 64);
        *(_OWORD *)(v76 + 72) = *(_OWORD *)(v77 + 72);
        v76[88] = *(unsigned char *)(v77 + 88);
        long long v169 = *(_OWORD *)(v77 + 92);
        v76[108] = *(unsigned char *)(v77 + 108);
        *(_OWORD *)(v76 + 92) = v169;
        long long v170 = *(_OWORD *)(v77 + 112);
        long long v171 = *(_OWORD *)(v77 + 128);
        v76[144] = *(unsigned char *)(v77 + 144);
        *((_OWORD *)v76 + 7) = v170;
        *((_OWORD *)v76 + 8) = v171;
        v76[145] = *(unsigned char *)(v77 + 145);
        v76[146] = *(unsigned char *)(v77 + 146);
        v76[147] = *(unsigned char *)(v77 + 147);
        unint64_t v172 = *(void *)(v77 + 168);
        if (v172 >> 1 == 0xFFFFFFFF)
        {
          long long v173 = *(_OWORD *)(v77 + 168);
          *(_OWORD *)(v76 + 152) = *(_OWORD *)(v77 + 152);
          *(_OWORD *)(v76 + 168) = v173;
        }
        else
        {
          uint64_t v174 = *(void *)(v77 + 152);
          uint64_t v175 = *(void *)(v77 + 160);
          uint64_t v176 = v51;
          uint64_t v177 = *(void *)(v77 + 176);
          outlined copy of AccessibilityImageLabel(v174, v175, *(void *)(v77 + 168));
          *((void *)v76 + 19) = v174;
          *((void *)v76 + 20) = v175;
          *((void *)v76 + 21) = v172;
          *((void *)v76 + 22) = v177;
          long long v51 = v176;
        }
        *((void *)v76 + 23) = *(void *)(v77 + 184);
        *((void *)v76 + 24) = *(void *)(v77 + 192);
        v76[200] = *(unsigned char *)(v77 + 200);
        v76[201] = *(unsigned char *)(v77 + 201);
        int v178 = *(_DWORD *)(v77 + 204);
        v76[208] = *(unsigned char *)(v77 + 208);
        *((_DWORD *)v76 + 51) = v178;
        id v179 = *(void **)(v77 + 216);
        *((void *)v76 + 27) = v179;
        *((_WORD *)v76 + 112) = *(_WORD *)(v77 + 224);
        v76[226] = *(unsigned char *)(v77 + 226);
        swift_unknownObjectRetain();
        swift_retain();
        id v180 = v179;
      }
    }
    else if (v128 == 0x1FFFFFFFCLL)
    {
      outlined destroy of Image.Resolved((uint64_t)(v76 + 48));
      long long v140 = *(_OWORD *)(v77 + 96);
      long long v142 = *v127;
      long long v141 = *(_OWORD *)(v77 + 64);
      *((_OWORD *)v76 + 5) = *(_OWORD *)(v77 + 80);
      *((_OWORD *)v76 + 6) = v140;
      _OWORD *v126 = v142;
      *((_OWORD *)v76 + 4) = v141;
      long long v143 = *(_OWORD *)(v77 + 160);
      long long v145 = *(_OWORD *)(v77 + 112);
      long long v144 = *(_OWORD *)(v77 + 128);
      *((_OWORD *)v76 + 9) = *(_OWORD *)(v77 + 144);
      *((_OWORD *)v76 + 10) = v143;
      *((_OWORD *)v76 + 7) = v145;
      *((_OWORD *)v76 + 8) = v144;
      long long v147 = *(_OWORD *)(v77 + 192);
      long long v146 = *(_OWORD *)(v77 + 208);
      long long v148 = *(_OWORD *)(v77 + 176);
      *(_DWORD *)(v76 + 223) = *(_DWORD *)(v77 + 223);
      *((_OWORD *)v76 + 12) = v147;
      *((_OWORD *)v76 + 13) = v146;
      *((_OWORD *)v76 + 11) = v148;
    }
    else
    {
      int v151 = *(unsigned __int8 *)(v77 + 56);
      if (v76[56] == 255)
      {
        if (v151 == 255)
        {
          long long v185 = *(void **)v127;
          v76[56] = *(unsigned char *)(v77 + 56);
          *(void *)BOOL v126 = v185;
        }
        else
        {
          uint64_t v181 = *(void **)v127;
          outlined copy of GraphicsImage.Contents(v181, *(unsigned char *)(v77 + 56));
          *((void *)v76 + 6) = v181;
          v76[56] = v151;
        }
      }
      else if (v151 == 255)
      {
        outlined destroy of GraphicsImage.Contents((uint64_t)(v76 + 48));
        char v184 = *(unsigned char *)(v77 + 56);
        *(void *)BOOL v126 = *(void *)v127;
        v76[56] = v184;
      }
      else
      {
        int v152 = *(void **)v127;
        outlined copy of GraphicsImage.Contents(v152, *(unsigned char *)(v77 + 56));
        id v153 = (void *)*((void *)v76 + 6);
        *((void *)v76 + 6) = v152;
        char v154 = v76[56];
        v76[56] = v151;
        outlined consume of GraphicsImage.Contents(v153, v154);
      }
      *((void *)v76 + 8) = *(void *)(v77 + 64);
      *((void *)v76 + 9) = *(void *)(v77 + 72);
      *((void *)v76 + 10) = *(void *)(v77 + 80);
      v76[88] = *(unsigned char *)(v77 + 88);
      long long v186 = *(_OWORD *)(v77 + 92);
      v76[108] = *(unsigned char *)(v77 + 108);
      *(_OWORD *)(v76 + 92) = v186;
      long long v187 = *(_OWORD *)(v77 + 112);
      long long v188 = *(_OWORD *)(v77 + 128);
      v76[144] = *(unsigned char *)(v77 + 144);
      *((_OWORD *)v76 + 7) = v187;
      *((_OWORD *)v76 + 8) = v188;
      v76[145] = *(unsigned char *)(v77 + 145);
      v76[146] = *(unsigned char *)(v77 + 146);
      v76[147] = *(unsigned char *)(v77 + 147);
      uint64_t v189 = v76 + 152;
      uint64_t v190 = (_OWORD *)(v77 + 152);
      uint64_t v191 = *(void *)(v77 + 168);
      unint64_t v192 = v191 & 0xFFFFFFFFFFFFFFFELL;
      if (*((void *)v76 + 21) >> 1 == 0xFFFFFFFFLL)
      {
        if (v192 == 0x1FFFFFFFELL)
        {
          long long v193 = *(_OWORD *)(v77 + 168);
          *uint64_t v189 = *v190;
          *(_OWORD *)(v76 + 168) = v193;
        }
        else
        {
          uint64_t v195 = *(void *)(v77 + 152);
          uint64_t v196 = *(void *)(v77 + 160);
          uint64_t v197 = v51;
          uint64_t v198 = *(void *)(v77 + 176);
          outlined copy of AccessibilityImageLabel(v195, v196, *(void *)(v77 + 168));
          *((void *)v76 + 19) = v195;
          *((void *)v76 + 20) = v196;
          *((void *)v76 + 21) = v191;
          *((void *)v76 + 22) = v198;
          long long v51 = v197;
        }
      }
      else if (v192 == 0x1FFFFFFFELL)
      {
        outlined destroy of AccessibilityImageLabel((uint64_t)(v76 + 152));
        long long v194 = *(_OWORD *)(v77 + 168);
        *uint64_t v189 = *v190;
        *(_OWORD *)(v76 + 168) = v194;
      }
      else
      {
        uint64_t v199 = *(void *)(v77 + 152);
        uint64_t v200 = *(void *)(v77 + 160);
        uint64_t v201 = v51;
        uint64_t v202 = *(void *)(v77 + 176);
        outlined copy of AccessibilityImageLabel(v199, v200, *(void *)(v77 + 168));
        uint64_t v203 = *((void *)v76 + 19);
        uint64_t v204 = *((void *)v76 + 20);
        uint64_t v205 = *((void *)v76 + 21);
        *((void *)v76 + 19) = v199;
        *((void *)v76 + 20) = v200;
        *((void *)v76 + 21) = v191;
        *((void *)v76 + 22) = v202;
        long long v51 = v201;
        outlined consume of AccessibilityImageLabel(v203, v204, v205);
      }
      *((void *)v76 + 23) = *(void *)(v77 + 184);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *((void *)v76 + 24) = *(void *)(v77 + 192);
      swift_retain();
      swift_release();
      v76[200] = *(unsigned char *)(v77 + 200);
      v76[201] = *(unsigned char *)(v77 + 201);
      int v206 = *(_DWORD *)(v77 + 204);
      v76[208] = *(unsigned char *)(v77 + 208);
      *((_DWORD *)v76 + 51) = v206;
      uint64_t v207 = (void *)*((void *)v76 + 27);
      v208 = *(void **)(v77 + 216);
      *((void *)v76 + 27) = v208;
      id v209 = v208;

      *((_WORD *)v76 + 112) = *(_WORD *)(v77 + 224);
      v76[226] = *(unsigned char *)(v77 + 226);
    }
    v76[227] = *(unsigned char *)(v77 + 227);
    *((void *)v76 + 29) = *(void *)(v77 + 232);
    swift_retain();
    swift_release();
  }
  uint64_t v210 = (long long *)(v76 + 240);
  long long v211 = (long long *)(v77 + 240);
  uint64_t v212 = *((void *)v76 + 36);
  uint64_t v213 = *(void *)(v77 + 288);
  if (v212 == 1)
  {
    if (v213 == 1)
    {
      long long v214 = *v211;
      long long v215 = *(_OWORD *)(v77 + 256);
      long long v216 = *(_OWORD *)(v77 + 288);
      *((_OWORD *)v76 + 17) = *(_OWORD *)(v77 + 272);
      *((_OWORD *)v76 + 18) = v216;
LABEL_79:
      *uint64_t v210 = v214;
      v210[1] = v215;
      goto LABEL_91;
    }
    *((void *)v76 + 30) = *(void *)(v77 + 240);
    *((void *)v76 + 31) = *(void *)(v77 + 248);
    *((void *)v76 + 32) = *(void *)(v77 + 256);
    uint64_t v220 = v76 + 264;
    uint64_t v221 = (long long *)(v77 + 264);
    uint64_t v222 = *(void *)(v77 + 288);
    if (v222)
    {
      *((void *)v76 + 36) = v222;
      *((void *)v76 + 37) = *(void *)(v77 + 296);
      (**(void (***)(_OWORD *, long long *))(v222 - 8))(v220, v221);
    }
    else
    {
      long long v225 = *v221;
      long long v226 = *(_OWORD *)(v77 + 280);
      *((void *)v76 + 37) = *(void *)(v77 + 296);
      *uint64_t v220 = v225;
      *(_OWORD *)(v76 + 280) = v226;
    }
  }
  else
  {
    if (v213 == 1)
    {
      outlined destroy of PlatformItem.SelectionContent((uint64_t)(v76 + 240));
      long long v217 = *(_OWORD *)(v77 + 288);
      long long v219 = *v211;
      long long v218 = *(_OWORD *)(v77 + 256);
      *((_OWORD *)v76 + 17) = *(_OWORD *)(v77 + 272);
      *((_OWORD *)v76 + 18) = v217;
      *uint64_t v210 = v219;
      *((_OWORD *)v76 + 16) = v218;
      goto LABEL_91;
    }
    *((_DWORD *)v76 + 60) = *(_DWORD *)(v77 + 240);
    *((_DWORD *)v76 + 61) = *(_DWORD *)(v77 + 244);
    *((_DWORD *)v76 + 62) = *(_DWORD *)(v77 + 248);
    *((_DWORD *)v76 + 63) = *(_DWORD *)(v77 + 252);
    *((void *)v76 + 32) = *(void *)(v77 + 256);
    uint64_t v210 = (long long *)(v76 + 264);
    long long v223 = (long long *)(v77 + 264);
    uint64_t v224 = *(void *)(v77 + 288);
    if (!v212)
    {
      if (v224)
      {
        *((void *)v76 + 36) = v224;
        *((void *)v76 + 37) = *(void *)(v77 + 296);
        (**(void (***)(uint64_t, uint64_t))(v224 - 8))((uint64_t)(v76 + 264), v77 + 264);
        goto LABEL_91;
      }
      long long v214 = *v223;
      long long v215 = *(_OWORD *)(v77 + 280);
      *((void *)v76 + 37) = *(void *)(v77 + 296);
      goto LABEL_79;
    }
    if (v224)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)v76 + 33, (uint64_t *)(v77 + 264));
    }
    else
    {
      outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent((uint64_t)(v76 + 264));
      uint64_t v227 = *(void *)(v77 + 296);
      long long v228 = *(_OWORD *)(v77 + 280);
      *uint64_t v210 = *v223;
      *(_OWORD *)(v76 + 280) = v228;
      *((void *)v76 + 37) = v227;
    }
  }
LABEL_91:
  uint64_t v229 = *(void *)(v77 + 304);
  v76[312] = *(unsigned char *)(v77 + 312);
  *((void *)v76 + 38) = v229;
  *((void *)v76 + 40) = *(void *)(v77 + 320);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_DWORD *)v76 + 82) = *(_DWORD *)(v77 + 328);
  *((_DWORD *)v76 + 83) = *(_DWORD *)(v77 + 332);
  uint64_t v230 = v51[6];
  uint64_t v231 = (_DWORD *)((char *)v5 + v230);
  uint64_t v232 = (_DWORD *)((char *)v68 + v230);
  _DWORD *v231 = *v232;
  v231[1] = v232[1];
  v231[2] = v232[2];
  v231[3] = v232[3];
  v231[4] = v232[4];
  v231[5] = v232[5];
  v231[6] = v232[6];
  v231[7] = v232[7];
  uint64_t v233 = v51[7];
  long long v234 = (char *)v5 + v233;
  uint64_t v235 = (uint64_t)v68 + v233;
  uint64_t v236 = *(void *)v235;
  char v237 = *(unsigned char *)(v235 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v235, v237);
  uint64_t v238 = *(void *)v234;
  char v239 = v234[8];
  *(void *)long long v234 = v236;
  v234[8] = v237;
  outlined consume of Environment<Bool>.Content(v238, v239);
  return v5;
}

uint64_t initializeWithTake for TextViewAdaptor(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 165) = *(_OWORD *)(a2 + 165);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v8 = *(int *)(v7 + 56);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v11))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    uint64_t v15 = v10[1];
    void *v9 = *v10;
    v9[1] = v15;
    uint64_t v16 = *(int *)(v12 + 32);
    char v17 = (char *)v9 + v16;
    long long v18 = (char *)v10 + v16;
    uint64_t v19 = type metadata accessor for TextSelection(0);
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      uint64_t v32 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v17, v18, v22);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v17, v18, *(void *)(*(void *)(v32 - 8) + 64));
      }
      v17[*(int *)(v19 + 20)] = v18[*(int *)(v19 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
  }
  uint64_t v23 = type metadata accessor for SystemTextFieldConfiguration(0);
  *(void *)(a1 + *(int *)(v23 + 20)) = *(void *)(a2 + *(int *)(v23 + 20));
  memcpy((void *)(a1 + a3[5]), (const void *)(a2 + a3[5]), 0x150uLL);
  uint64_t v24 = a3[6];
  uint64_t v25 = a3[7];
  uint64_t v26 = (_OWORD *)(a1 + v24);
  uint64_t v27 = (_OWORD *)(a2 + v24);
  long long v28 = v27[1];
  *uint64_t v26 = *v27;
  v26[1] = v28;
  uint64_t v29 = a1 + v25;
  uint64_t v30 = a2 + v25;
  *(void *)uint64_t v29 = *(void *)v30;
  *(unsigned char *)(v29 + 8) = *(unsigned char *)(v30 + 8);
  return a1;
}

uint64_t assignWithTake for TextViewAdaptor(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  if (*(void *)(a1 + 64))
  {
    if (*(void *)(a2 + 64))
    {
      char v7 = *(unsigned char *)(a2 + 56);
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v9 = *(void *)(a1 + 48);
      char v10 = *(unsigned char *)(a1 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(unsigned char *)(a1 + 56) = v7;
      outlined consume of Text.Storage(v8, v9, v10);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 40);
  }
  long long v11 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v11;
LABEL_6:
  uint64_t v12 = *(void *)(a2 + 168);
  int v13 = *(_DWORD *)(a2 + 176);
  char v14 = *(unsigned char *)(a2 + 180);
  uint64_t v15 = *(void *)(a1 + 72);
  uint64_t v16 = *(void *)(a1 + 80);
  uint64_t v17 = *(void *)(a1 + 88);
  uint64_t v18 = *(void *)(a1 + 96);
  uint64_t v19 = *(void *)(a1 + 104);
  uint64_t v20 = *(void *)(a1 + 112);
  uint64_t v21 = *(void *)(a1 + 120);
  uint64_t v22 = *(void *)(a1 + 128);
  long long v23 = *(_OWORD *)(a1 + 136);
  long long v24 = *(_OWORD *)(a1 + 152);
  uint64_t v25 = *(void *)(a1 + 168);
  int v26 = *(_DWORD *)(a1 + 176);
  char v27 = *(unsigned char *)(a1 + 180);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = v12;
  *(_DWORD *)(a1 + 176) = v13;
  *(unsigned char *)(a1 + 180) = v14;
  outlined consume of StateOrBinding<TextFieldState>(v15, v16, v17, v18, v19, v20, v21, v22, v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25, v26, v27);
  _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v29 = *(int *)(v28 + 56);
  uint64_t v30 = (char *)(a1 + v29);
  uint64_t v31 = (char *)(a2 + v29);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v33 = v32;
  uint64_t v34 = *(void *)(v32 - 8);
  uint64_t v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  int v36 = v35(v30, 1, v32);
  int v37 = v35(v31, 1, v33);
  if (v36)
  {
    if (!v37)
    {
      uint64_t v38 = *((void *)v31 + 1);
      *(void *)uint64_t v30 = *(void *)v31;
      *((void *)v30 + 1) = v38;
      uint64_t v39 = *(int *)(v33 + 32);
      int v40 = &v30[v39];
      char v41 = &v31[v39];
      uint64_t v42 = type metadata accessor for TextSelection(0);
      uint64_t v43 = *(void *)(v42 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
      }
      else
      {
        long long v114 = a3;
        uint64_t v60 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 32))(v40, v41, v61);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v40, v41, *(void *)(*(void *)(v60 - 8) + 64));
        }
        a3 = v114;
        v40[*(int *)(v42 + 20)] = v41[*(int *)(v42 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v30, 0, 1, v33);
      goto LABEL_26;
    }
    goto LABEL_12;
  }
  if (v37)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v30, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
LABEL_12:
    type metadata accessor for Binding<TextSelection?>?(0);
    size_t v46 = *(void *)(*(void *)(v45 - 8) + 64);
    uint64_t v47 = v30;
    uint64_t v48 = v31;
LABEL_13:
    memcpy(v47, v48, v46);
    goto LABEL_26;
  }
  long long v49 = a3;
  *(void *)uint64_t v30 = *(void *)v31;
  swift_release();
  *((void *)v30 + 1) = *((void *)v31 + 1);
  swift_release();
  uint64_t v50 = *(int *)(v33 + 32);
  long long v51 = &v30[v50];
  uint64_t v52 = &v31[v50];
  uint64_t v53 = type metadata accessor for TextSelection(0);
  uint64_t v54 = *(void *)(v53 - 8);
  uint64_t v55 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
  int v56 = v55(v51, 1, v53);
  int v57 = v55(v52, 1, v53);
  a3 = v49;
  if (v56)
  {
    if (!v57)
    {
      uint64_t v58 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 32))(v51, v52, v59);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v51, v52, *(void *)(*(void *)(v58 - 8) + 64));
      }
      v51[*(int *)(v53 + 20)] = v52[*(int *)(v53 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
      goto LABEL_26;
    }
    goto LABEL_22;
  }
  if (v57)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v51, type metadata accessor for TextSelection);
LABEL_22:
    type metadata accessor for TextSelection?(0);
    size_t v46 = *(void *)(*(void *)(v62 - 8) + 64);
    uint64_t v47 = v51;
    uint64_t v48 = v52;
    goto LABEL_13;
  }
  if (a1 != a2)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_1((uint64_t)v51, type metadata accessor for TextSelection.Indices);
    uint64_t v87 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v88 - 8) + 32))(v51, v52, v88);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v51, v52, *(void *)(*(void *)(v87 - 8) + 64));
    }
  }
  v51[*(int *)(v53 + 20)] = v52[*(int *)(v53 + 20)];
LABEL_26:
  uint64_t v63 = type metadata accessor for SystemTextFieldConfiguration(0);
  *(void *)(a1 + *(int *)(v63 + 20)) = *(void *)(a2 + *(int *)(v63 + 20));
  uint64_t v64 = a3[5];
  uint64_t v65 = a1 + v64;
  uint64_t v66 = a2 + v64;
  *(void *)(a1 + v64) = *(void *)(a2 + v64);
  swift_bridgeObjectRelease();
  *(void *)(v65 + 8) = *(void *)(v66 + 8);
  *(_DWORD *)(v65 + 16) = *(_DWORD *)(v66 + 16);
  int v67 = *(void **)(v65 + 24);
  uint64_t v68 = *(void *)(v66 + 24);
  if (v67 == (void *)1)
  {
LABEL_29:
    long long v69 = *(_OWORD *)(v66 + 200);
    *(_OWORD *)(v65 + 184) = *(_OWORD *)(v66 + 184);
    *(_OWORD *)(v65 + 200) = v69;
    *(_OWORD *)(v65 + 216) = *(_OWORD *)(v66 + 216);
    *(void *)(v65 + 232) = *(void *)(v66 + 232);
    long long v70 = *(_OWORD *)(v66 + 136);
    *(_OWORD *)(v65 + 120) = *(_OWORD *)(v66 + 120);
    *(_OWORD *)(v65 + 136) = v70;
    long long v71 = *(_OWORD *)(v66 + 168);
    *(_OWORD *)(v65 + 152) = *(_OWORD *)(v66 + 152);
    *(_OWORD *)(v65 + 168) = v71;
    long long v72 = *(_OWORD *)(v66 + 72);
    *(_OWORD *)(v65 + 56) = *(_OWORD *)(v66 + 56);
    *(_OWORD *)(v65 + 72) = v72;
    long long v73 = *(_OWORD *)(v66 + 104);
    *(_OWORD *)(v65 + 88) = *(_OWORD *)(v66 + 88);
    *(_OWORD *)(v65 + 104) = v73;
    long long v74 = *(_OWORD *)(v66 + 40);
    *(_OWORD *)(v65 + 24) = *(_OWORD *)(v66 + 24);
    *(_OWORD *)(v65 + 40) = v74;
    goto LABEL_51;
  }
  if (v68 == 1)
  {
    outlined destroy of PlatformItem.PrimaryContent(v65 + 24);
    goto LABEL_29;
  }
  *(void *)(v65 + 24) = v68;

  uint64_t v75 = *(void **)(v65 + 32);
  *(void *)(v65 + 32) = *(void *)(v66 + 32);

  long long v76 = *(void **)(v65 + 40);
  *(void *)(v65 + 40) = *(void *)(v66 + 40);

  uint64_t v77 = (void *)(v65 + 48);
  long long v78 = (void *)(v66 + 48);
  if (*(void *)(v65 + 168) >> 1 == 4294967294) {
    goto LABEL_33;
  }
  if (*(void *)(v66 + 168) >> 1 != 4294967294)
  {
    int v84 = *(unsigned __int8 *)(v65 + 56);
    if (v84 != 255)
    {
      int v85 = *(unsigned __int8 *)(v66 + 56);
      if (v85 != 255)
      {
        long long v86 = *(void **)(v65 + 48);
        *(void *)(v65 + 48) = *v78;
        *(unsigned char *)(v65 + 56) = v85;
        outlined consume of GraphicsImage.Contents(v86, v84);
        goto LABEL_44;
      }
      outlined destroy of GraphicsImage.Contents(v65 + 48);
    }
    *uint64_t v77 = *v78;
    *(unsigned char *)(v65 + 56) = *(unsigned char *)(v66 + 56);
LABEL_44:
    *(_OWORD *)(v65 + 64) = *(_OWORD *)(v66 + 64);
    *(void *)(v65 + 80) = *(void *)(v66 + 80);
    *(unsigned char *)(v65 + 88) = *(unsigned char *)(v66 + 88);
    *(_OWORD *)(v65 + 92) = *(_OWORD *)(v66 + 92);
    *(unsigned char *)(v65 + 108) = *(unsigned char *)(v66 + 108);
    long long v89 = *(_OWORD *)(v66 + 128);
    *(_OWORD *)(v65 + 112) = *(_OWORD *)(v66 + 112);
    *(_OWORD *)(v65 + 128) = v89;
    *(unsigned char *)(v65 + 144) = *(unsigned char *)(v66 + 144);
    *(unsigned char *)(v65 + 145) = *(unsigned char *)(v66 + 145);
    unint64_t v90 = *(void *)(v65 + 168);
    *(_WORD *)(v65 + 146) = *(_WORD *)(v66 + 146);
    if (v90 >> 1 != 0xFFFFFFFF)
    {
      unint64_t v91 = *(void *)(v66 + 168);
      if (v91 >> 1 != 0xFFFFFFFF)
      {
        uint64_t v93 = *(void *)(v66 + 176);
        uint64_t v94 = *(void *)(v65 + 152);
        uint64_t v95 = *(void *)(v65 + 160);
        *(_OWORD *)(v65 + 152) = *(_OWORD *)(v66 + 152);
        *(void *)(v65 + 168) = v91;
        *(void *)(v65 + 176) = v93;
        outlined consume of AccessibilityImageLabel(v94, v95, v90);
        goto LABEL_49;
      }
      outlined destroy of AccessibilityImageLabel(v65 + 152);
    }
    long long v92 = *(_OWORD *)(v66 + 168);
    *(_OWORD *)(v65 + 152) = *(_OWORD *)(v66 + 152);
    *(_OWORD *)(v65 + 168) = v92;
LABEL_49:
    *(void *)(v65 + 184) = *(void *)(v66 + 184);
    swift_unknownObjectRelease();
    *(void *)(v65 + 192) = *(void *)(v66 + 192);
    swift_release();
    *(unsigned char *)(v65 + 200) = *(unsigned char *)(v66 + 200);
    *(unsigned char *)(v65 + 201) = *(unsigned char *)(v66 + 201);
    *(_DWORD *)(v65 + 204) = *(_DWORD *)(v66 + 204);
    *(unsigned char *)(v65 + 208) = *(unsigned char *)(v66 + 208);
    long long v96 = *(void **)(v65 + 216);
    *(void *)(v65 + 216) = *(void *)(v66 + 216);

    *(_WORD *)(v65 + 224) = *(_WORD *)(v66 + 224);
    *(unsigned char *)(v65 + 226) = *(unsigned char *)(v66 + 226);
    goto LABEL_50;
  }
  outlined destroy of Image.Resolved(v65 + 48);
LABEL_33:
  long long v79 = *(_OWORD *)(v66 + 192);
  *(_OWORD *)(v65 + 176) = *(_OWORD *)(v66 + 176);
  *(_OWORD *)(v65 + 192) = v79;
  *(_OWORD *)(v65 + 208) = *(_OWORD *)(v66 + 208);
  *(_DWORD *)(v65 + 223) = *(_DWORD *)(v66 + 223);
  long long v80 = *(_OWORD *)(v66 + 128);
  *(_OWORD *)(v65 + 112) = *(_OWORD *)(v66 + 112);
  *(_OWORD *)(v65 + 128) = v80;
  long long v81 = *(_OWORD *)(v66 + 160);
  *(_OWORD *)(v65 + 144) = *(_OWORD *)(v66 + 144);
  *(_OWORD *)(v65 + 160) = v81;
  long long v82 = *(_OWORD *)(v66 + 64);
  *(_OWORD *)uint64_t v77 = *(_OWORD *)v78;
  *(_OWORD *)(v65 + 64) = v82;
  long long v83 = *(_OWORD *)(v66 + 96);
  *(_OWORD *)(v65 + 80) = *(_OWORD *)(v66 + 80);
  *(_OWORD *)(v65 + 96) = v83;
LABEL_50:
  *(unsigned char *)(v65 + 227) = *(unsigned char *)(v66 + 227);
  *(void *)(v65 + 232) = *(void *)(v66 + 232);
  swift_release();
LABEL_51:
  uint64_t v97 = *(void *)(v65 + 288);
  if (v97 == 1)
  {
LABEL_54:
    long long v99 = *(_OWORD *)(v66 + 256);
    *(_OWORD *)(v65 + 240) = *(_OWORD *)(v66 + 240);
    *(_OWORD *)(v65 + 256) = v99;
    long long v100 = *(_OWORD *)(v66 + 288);
    *(_OWORD *)(v65 + 272) = *(_OWORD *)(v66 + 272);
    *(_OWORD *)(v65 + 288) = v100;
    goto LABEL_60;
  }
  uint64_t v98 = *(void *)(v66 + 288);
  if (v98 == 1)
  {
    outlined destroy of PlatformItem.SelectionContent(v65 + 240);
    goto LABEL_54;
  }
  *(_OWORD *)(v65 + 240) = *(_OWORD *)(v66 + 240);
  *(void *)(v65 + 256) = *(void *)(v66 + 256);
  if (v97)
  {
    uint64_t v101 = v65 + 264;
    if (v98) {
      __swift_destroy_boxed_opaque_existential_1(v101);
    }
    else {
      outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent(v101);
    }
  }
  long long v102 = *(_OWORD *)(v66 + 280);
  *(_OWORD *)(v65 + 264) = *(_OWORD *)(v66 + 264);
  *(_OWORD *)(v65 + 280) = v102;
  *(void *)(v65 + 296) = *(void *)(v66 + 296);
LABEL_60:
  *(void *)(v65 + 304) = *(void *)(v66 + 304);
  *(unsigned char *)(v65 + 312) = *(unsigned char *)(v66 + 312);
  *(void *)(v65 + 320) = *(void *)(v66 + 320);
  swift_bridgeObjectRelease();
  *(void *)(v65 + 328) = *(void *)(v66 + 328);
  uint64_t v103 = a3[6];
  uint64_t v104 = a3[7];
  uint64_t v105 = (_OWORD *)(a1 + v103);
  unint64_t v106 = (_OWORD *)(a2 + v103);
  long long v107 = v106[1];
  *uint64_t v105 = *v106;
  v105[1] = v107;
  uint64_t v108 = a1 + v104;
  id v109 = (uint64_t *)(a2 + v104);
  uint64_t v110 = *v109;
  LOBYTE(v109) = *((unsigned char *)v109 + 8);
  uint64_t v111 = *(void *)v108;
  char v112 = *(unsigned char *)(v108 + 8);
  *(void *)uint64_t v108 = v110;
  *(unsigned char *)(v108 + 8) = (_BYTE)v109;
  outlined consume of Environment<Bool>.Content(v111, v112);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextViewAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187B8CD48);
}

uint64_t __swift_get_extra_inhabitant_index_93Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SystemTextFieldConfiguration(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for TextViewAdaptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187B8CE20);
}

uint64_t __swift_store_extra_inhabitant_index_94Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for SystemTextFieldConfiguration(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for TextViewAdaptor()
{
  uint64_t result = type metadata accessor for SystemTextFieldConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_UNKNOWN **sub_187B8CF88()
{
  return &protocol witness table for PlatformItemsReader<A, B, C>;
}

double PencilHoverPose.location.getter()
{
  return *(double *)v0;
}

double PencilHoverPose.anchor.getter()
{
  return *(double *)(v0 + 16);
}

double PencilHoverPose.zDistance.getter()
{
  return *(double *)(v0 + 32);
}

double PencilHoverPose.altitude.getter()
{
  return *(double *)(v0 + 40);
}

double PencilHoverPose.azimuth.getter()
{
  return *(double *)(v0 + 48);
}

double PencilHoverPose.roll.getter()
{
  return *(double *)(v0 + 56);
}

void PencilHoverPose.hash(into:)()
{
  Swift::UInt64 v1 = v0[1];
  Swift::UInt64 v2 = v0[4];
  Swift::UInt64 v3 = v0[5];
  Swift::UInt64 v4 = v0[6];
  Swift::UInt64 v5 = v0[7];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = *v0;
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = v1;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  UnitPoint.hash(into:)();
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v8 = v2;
  }
  else {
    Swift::UInt64 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v9 = v3;
  }
  else {
    Swift::UInt64 v9 = 0;
  }
  Hasher._combine(_:)(v9);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = v4;
  }
  else {
    Swift::UInt64 v10 = 0;
  }
  Hasher._combine(_:)(v10);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v11 = v5;
  }
  else {
    Swift::UInt64 v11 = 0;
  }
  Hasher._combine(_:)(v11);
}

Swift::Int PencilHoverPose.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PencilHoverPose()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PencilHoverPose()
{
  return Hasher._finalize()();
}

uint64_t specialized static PencilHoverPose.== infix(_:_:)(float64x2_t *a1, float64x2_t *a2)
{
  if (a1->f64[0] == a2->f64[0] && a1->f64[1] == a2->f64[1]) {
    char v3 = vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(a1[2], a2[2]), (int32x4_t)vceqq_f64(a1[3], a2[3]))), 0xFuLL))) & static UnitPoint.== infix(_:_:)();
  }
  else {
    char v3 = 0;
  }
  return v3 & 1;
}

unint64_t lazy protocol witness table accessor for type PencilHoverPose and conformance PencilHoverPose()
{
  unint64_t result = lazy protocol witness table cache variable for type PencilHoverPose and conformance PencilHoverPose;
  if (!lazy protocol witness table cache variable for type PencilHoverPose and conformance PencilHoverPose)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PencilHoverPose and conformance PencilHoverPose);
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilHoverPose()
{
  return &type metadata for PencilHoverPose;
}

void *initializeBufferWithCopyOfBuffer for SearchToolbarItem(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    Swift::UInt64 v6 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    Swift::UInt64 v6 = a1;
    a1[1] = a2[1];
    _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_2(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
    uint64_t v8 = *(int *)(v7 + 32);
    Swift::UInt64 v9 = (char *)v6 + v8;
    Swift::UInt64 v10 = (char *)a2 + v8;
    char *v9 = *((unsigned char *)a2 + v8);
    v9[1] = *((unsigned char *)a2 + v8 + 1);
    *((_WORD *)v9 + 1) = *(_WORD *)((char *)a2 + v8 + 2);
    v9[8] = *((unsigned char *)a2 + v8 + 8);
    *((_DWORD *)v9 + 1) = *(_DWORD *)((char *)a2 + v8 + 4);
    Swift::UInt64 v11 = (int *)type metadata accessor for SearchFieldState(0);
    uint64_t v12 = v11[9];
    uint64_t v61 = &v9[v12];
    int v13 = &v10[v12];
    uint64_t v14 = type metadata accessor for AttributedString();
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    swift_retain();
    swift_retain();
    v15(v61, v13, v14);
    v9[v11[10]] = v10[v11[10]];
    uint64_t v16 = v11[11];
    uint64_t v17 = &v9[v16];
    uint64_t v18 = &v10[v16];
    _DWORD v17[4] = v18[4];
    *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
    uint64_t v19 = (int *)type metadata accessor for SearchFieldConfiguration(0);
    uint64_t v20 = v19[6];
    uint64_t v21 = (char *)v6 + v20;
    uint64_t v22 = (char *)a2 + v20;
    int v23 = v22[8];
    if (v23 == 255)
    {
      *(void *)uint64_t v21 = *(void *)v22;
      unsigned char v21[8] = v22[8];
    }
    else
    {
      char v24 = v23 & 1;
      uint64_t v25 = *(void *)v22;
      outlined copy of PlatformItemCollection.Storage(*(void *)v22, v23 & 1);
      *(void *)uint64_t v21 = v25;
      unsigned char v21[8] = v24;
    }
    *((unsigned char *)v6 + v19[7]) = *((unsigned char *)a2 + v19[7]);
    uint64_t v26 = v19[8];
    char v27 = (char *)v6 + v26;
    uint64_t v28 = (char *)a2 + v26;
    uint64_t v29 = *(void *)((char *)a2 + v26);
    uint64_t v30 = *(void *)((char *)a2 + v26 + 8);
    char v31 = *((unsigned char *)a2 + v26 + 16);
    outlined copy of Text.Storage(v29, v30, v31);
    *(void *)char v27 = v29;
    *((void *)v27 + 1) = v30;
    v27[16] = v31;
    uint64_t v32 = a3[5];
    uint64_t v33 = a3[6];
    char v34 = *((unsigned char *)a2 + v32);
    *((void *)v27 + 3) = *((void *)v28 + 3);
    *((unsigned char *)v6 + v32) = v34;
    uint64_t v35 = (char *)v6 + v33;
    int v36 = (char *)a2 + v33;
    uint64_t v37 = *(void *)((char *)a2 + v33);
    swift_bridgeObjectRetain();
    if (v37)
    {
      uint64_t v38 = *((void *)v36 + 1);
      *(void *)uint64_t v35 = v37;
      *((void *)v35 + 1) = v38;
      *((_DWORD *)v35 + 4) = *((_DWORD *)v36 + 4);
      uint64_t v39 = (void *)*((void *)v36 + 4);
      *((void *)v35 + 3) = *((void *)v36 + 3);
      *((void *)v35 + 4) = v39;
      *((void *)v35 + 5) = *((void *)v36 + 5);
      *((_DWORD *)v35 + 12) = *((_DWORD *)v36 + 12);
      *((void *)v35 + 7) = *((void *)v36 + 7);
      *((_OWORD *)v35 + 4) = *((_OWORD *)v36 + 4);
      *((void *)v35 + 10) = *((void *)v36 + 10);
      id v40 = v39;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v41 = *((_OWORD *)v36 + 3);
      *((_OWORD *)v35 + 2) = *((_OWORD *)v36 + 2);
      *((_OWORD *)v35 + 3) = v41;
      *((_OWORD *)v35 + 4) = *((_OWORD *)v36 + 4);
      *((void *)v35 + 10) = *((void *)v36 + 10);
      long long v42 = *((_OWORD *)v36 + 1);
      *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
      *((_OWORD *)v35 + 1) = v42;
    }
    uint64_t v43 = a3[7];
    uint64_t v44 = (char *)v6 + v43;
    uint64_t v45 = (char *)a2 + v43;
    if (*(void *)v45)
    {
      uint64_t v46 = *((void *)v45 + 1);
      *(void *)uint64_t v44 = *(void *)v45;
      *((void *)v44 + 1) = v46;
      *((_DWORD *)v44 + 4) = *((_DWORD *)v45 + 4);
      uint64_t v47 = (void *)*((void *)v45 + 4);
      *((void *)v44 + 3) = *((void *)v45 + 3);
      *((void *)v44 + 4) = v47;
      *((void *)v44 + 5) = *((void *)v45 + 5);
      *((_DWORD *)v44 + 12) = *((_DWORD *)v45 + 12);
      *((void *)v44 + 7) = *((void *)v45 + 7);
      *((_OWORD *)v44 + 4) = *((_OWORD *)v45 + 4);
      *((void *)v44 + 10) = *((void *)v45 + 10);
      id v48 = v47;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v49 = *((_OWORD *)v45 + 3);
      *((_OWORD *)v44 + 2) = *((_OWORD *)v45 + 2);
      *((_OWORD *)v44 + 3) = v49;
      *((_OWORD *)v44 + 4) = *((_OWORD *)v45 + 4);
      *((void *)v44 + 10) = *((void *)v45 + 10);
      long long v50 = *((_OWORD *)v45 + 1);
      *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
      *((_OWORD *)v44 + 1) = v50;
    }
    uint64_t v51 = a3[9];
    *((unsigned char *)v6 + a3[8]) = *((unsigned char *)a2 + a3[8]);
    uint64_t v52 = (char *)v6 + v51;
    uint64_t v53 = (char *)a2 + v51;
    if (*(void *)v53)
    {
      uint64_t v54 = *((void *)v53 + 1);
      *(void *)uint64_t v52 = *(void *)v53;
      *((void *)v52 + 1) = v54;
      *((_DWORD *)v52 + 4) = *((_DWORD *)v53 + 4);
      uint64_t v55 = (void *)*((void *)v53 + 4);
      *((void *)v52 + 3) = *((void *)v53 + 3);
      *((void *)v52 + 4) = v55;
      *((void *)v52 + 5) = *((void *)v53 + 5);
      *((_DWORD *)v52 + 12) = *((_DWORD *)v53 + 12);
      *((void *)v52 + 7) = *((void *)v53 + 7);
      *((_OWORD *)v52 + 4) = *((_OWORD *)v53 + 4);
      *((void *)v52 + 10) = *((void *)v53 + 10);
      id v56 = v55;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v57 = *((_OWORD *)v53 + 3);
      *((_OWORD *)v52 + 2) = *((_OWORD *)v53 + 2);
      *((_OWORD *)v52 + 3) = v57;
      *((_OWORD *)v52 + 4) = *((_OWORD *)v53 + 4);
      *((void *)v52 + 10) = *((void *)v53 + 10);
      long long v58 = *((_OWORD *)v53 + 1);
      *(_OWORD *)uint64_t v52 = *(_OWORD *)v53;
      *((_OWORD *)v52 + 1) = v58;
    }
  }
  return v6;
}

uint64_t outlined destroy of BoundInputsView(uint64_t a1)
{
  return a1;
}

void *initializeWithTake for SearchToolbarItem(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_2(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v8 = *(int *)(v7 + 32);
  Swift::UInt64 v9 = (char *)a1 + v8;
  Swift::UInt64 v10 = (char *)a2 + v8;
  char *v9 = *((unsigned char *)a2 + v8);
  v9[1] = *((unsigned char *)a2 + v8 + 1);
  *((_WORD *)v9 + 1) = *(_WORD *)((char *)a2 + v8 + 2);
  v9[8] = *((unsigned char *)a2 + v8 + 8);
  *((_DWORD *)v9 + 1) = *(_DWORD *)((char *)a2 + v8 + 4);
  Swift::UInt64 v11 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v12 = v11[9];
  int v13 = &v9[v12];
  uint64_t v14 = &v10[v12];
  uint64_t v15 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  v9[v11[10]] = v10[v11[10]];
  uint64_t v16 = v11[11];
  uint64_t v17 = &v9[v16];
  uint64_t v18 = &v10[v16];
  _DWORD v17[4] = v18[4];
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  uint64_t v19 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v20 = v19[6];
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  *(void *)uint64_t v21 = *(void *)v22;
  unsigned char v21[8] = v22[8];
  *((unsigned char *)a1 + v19[7]) = *((unsigned char *)a2 + v19[7]);
  uint64_t v23 = v19[8];
  char v24 = (_OWORD *)((char *)a1 + v23);
  uint64_t v25 = (_OWORD *)((char *)a2 + v23);
  long long v26 = v25[1];
  *char v24 = *v25;
  v24[1] = v26;
  uint64_t v27 = a3[6];
  *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
  uint64_t v28 = (char *)a1 + v27;
  uint64_t v29 = (char *)a2 + v27;
  long long v30 = *((_OWORD *)v29 + 1);
  *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
  *((_OWORD *)v28 + 1) = v30;
  *((void *)v28 + 10) = *((void *)v29 + 10);
  long long v31 = *((_OWORD *)v29 + 4);
  long long v32 = *((_OWORD *)v29 + 2);
  *((_OWORD *)v28 + 3) = *((_OWORD *)v29 + 3);
  *((_OWORD *)v28 + 4) = v31;
  *((_OWORD *)v28 + 2) = v32;
  uint64_t v33 = a3[7];
  uint64_t v34 = a3[8];
  uint64_t v35 = (char *)a1 + v33;
  int v36 = (char *)a2 + v33;
  long long v37 = *((_OWORD *)v36 + 1);
  *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
  *((_OWORD *)v35 + 1) = v37;
  *((void *)v35 + 10) = *((void *)v36 + 10);
  long long v38 = *((_OWORD *)v36 + 4);
  long long v39 = *((_OWORD *)v36 + 2);
  *((_OWORD *)v35 + 3) = *((_OWORD *)v36 + 3);
  *((_OWORD *)v35 + 4) = v38;
  *((_OWORD *)v35 + 2) = v39;
  *((unsigned char *)a1 + v34) = *((unsigned char *)a2 + v34);
  uint64_t v40 = a3[9];
  long long v41 = (char *)a1 + v40;
  long long v42 = (char *)a2 + v40;
  long long v43 = *((_OWORD *)v42 + 3);
  *((_OWORD *)v41 + 2) = *((_OWORD *)v42 + 2);
  *((_OWORD *)v41 + 3) = v43;
  *((_OWORD *)v41 + 4) = *((_OWORD *)v42 + 4);
  *((void *)v41 + 10) = *((void *)v42 + 10);
  long long v44 = *((_OWORD *)v42 + 1);
  *(_OWORD *)long long v41 = *(_OWORD *)v42;
  *((_OWORD *)v41 + 1) = v44;
  return a1;
}