uint64_t UICollectionViewListCoordinatorBase.recordInitialTransactionIfNeeded(_:)(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned char *v12;
  uint64_t v13;
  uint64_t result;
  char *v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned char v21[24];

  v2 = v1;
  v4 = (void *)MEMORY[0x1E4FBC8C8];
  v5 = type metadata accessor for ShadowSectionCollection();
  v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  v8 = &v21[-v7];
  v9 = type metadata accessor for ShadowListDataSource();
  v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  v12 = &v21[-v11];
  v13 = Transaction.animationIgnoringTransitionPhase.getter();
  result = swift_release();
  if (v13)
  {
    v15 = (char *)v2 + *(void *)((*v4 & *v2) + 0x88);
    swift_beginAccess();
    (*(void (**)(unsigned char *, char *, uint64_t))(v10 + 16))(v12, v15, v9);
    ShadowListDataSource.sectionIDs.getter((uint64_t)v8);
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v12, v9);
    swift_getWitnessTable();
    v16 = Collection.isEmpty.getter();
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
    v17 = *(void *)((*v4 & *v2) + 0xE8);
    v18 = *((unsigned char *)v2 + v17);
    *((unsigned char *)v2 + v17) = (v16 & 1) == 0;
    UICollectionViewListCoordinatorBase.initialLayoutAnimationPhase.didset(v18);
    v19 = (void *)((char *)v2 + *(void *)((*v4 & *v2) + 0xA0));
    swift_beginAccess();
    v20 = *v19;
    *v19 = a1;
    outlined consume of Transaction?(v20);
    return swift_retain();
  }
  return result;
}

uint64_t UICollectionViewListCoordinatorBase.setupSizeThatFitsCallback(in:)()
{
  v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = *MEMORY[0x1E4FBC8C8] & *v0;
  uint64_t v3 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v4 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = *(void *)(v2 + 96);
  *(_OWORD *)(v5 + 24) = *(_OWORD *)(v2 + 104);
  *(void *)(v5 + 40) = *(void *)(v2 + 120);
  *(void *)(v5 + 48) = v3;
  *(void *)(v5 + 56) = v4;
  v6 = (void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x98));
  uint64_t v7 = *v6;
  uint64_t *v6 = (uint64_t)partial apply for closure #1 in UICollectionViewListCoordinatorBase.setupSizeThatFitsCallback(in:);
  v6[1] = v5;

  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v7);
}

uint64_t specialized UICollectionViewListCoordinatorBase.collectionView.setter()
{
  return swift_unknownObjectWeakAssign();
}

id UICollectionViewListCoordinator.createLayout(_:)(uint64_t *a1)
{
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v1;
  uint64_t v4 = type metadata accessor for ShadowListDataSource();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&aBlock[-1] - v6;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  v10 = (void *)swift_allocObject();
  v10[2] = v1;
  v10[3] = v8;
  v10[4] = v9;
  v11 = (char *)v1 + *(void *)(v3 + 136);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v11, v4);
  swift_retain();
  v1;
  swift_retain();
  char v12 = ShadowListDataSource.hasGlobalHeader.getter(v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  id v13 = UICollectionViewListCoordinator.layoutConfiguration(hasGlobalHeader:)(v12 & 1);
  id v14 = objc_allocWithZone(MEMORY[0x1E4FB1580]);
  aBlock[4] = partial apply for closure #1 in UICollectionViewListCoordinator.createLayout(_:);
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Int, @guaranteed NSCollectionLayoutEnvironment) -> (@owned NSCollectionLayoutSection?);
  aBlock[3] = &block_descriptor_10_0;
  v15 = _Block_copy(aBlock);
  id v16 = objc_msgSend(v14, sel_initWithSectionProvider_configuration_, v15, v13);

  _Block_release(v15);
  swift_release();
  return v16;
}

id UICollectionViewListCoordinator.layoutConfiguration(hasGlobalHeader:)(char a1)
{
  swift_getObjectType();
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1588]), sel_init);
  uint64_t v13 = MEMORY[0x1E4FBC860];
  if (a1)
  {
    uint64_t v3 = self;
    id v4 = objc_msgSend(v3, sel_fractionalWidthDimension_, 1.0);
    if (one-time initialization token for tableHeaderMinHeight != -1) {
      swift_once();
    }
    id v5 = objc_msgSend(v3, sel_absoluteDimension_, *(double *)&static ListMetrics.tableHeaderMinHeight);
    id v6 = objc_msgSend(self, sel_sizeWithWidthDimension_heightDimension_, v4, v5);

    unint64_t v7 = static UICollectionViewListCoordinatorBase.globalHeaderKind.getter();
    uint64_t v8 = (void *)MEMORY[0x18C115780](v7);
    swift_bridgeObjectRelease();
    id v9 = objc_msgSend(self, sel_boundarySupplementaryItemWithLayoutSize_elementKind_alignment_, v6, v8, 1);

    objc_msgSend(v9, sel_setZIndex_, 199);
    objc_msgSend(v9, sel_setPinToVisibleBounds_, 1);
    objc_msgSend(v9, sel_setExtendsBoundary_, 0);
    id v10 = v9;
    MEMORY[0x18C115B40]();
    if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSCollectionLayoutBoundarySupplementaryItem);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_setBoundarySupplementaryItems_, isa);

  return v2;
}

void *UICollectionViewListCoordinator.createCollectionView(_:)(uint64_t a1)
{
  swift_getObjectType();
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  id v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UpdateCoalescingCollectionView(0)), sel_initWithFrame_collectionViewLayout_, a1, 0.0, 0.0, 0.0, 0.0);
  id v5 = v4;
  id v6 = (char *)v1 + *(void *)((*v3 & *v1) + 0xF0);
  if (v6[9] == 1 && __PAIR128__(v6[8], *(void *)v6) >= 2) {
    objc_msgSend(v4, sel__setShouldDeriveVisibleBoundsFromContainingScrollView_, 1);
  }
  objc_msgSend(v5, sel_setAlwaysBounceVertical_, 1);
  swift_getAssociatedTypeWitness();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v8 = (void *)*MEMORY[0x1E4FB2770];
  uint64_t v9 = static UITableViewListCoordinator.headerReuseIdentifier.getter();
  uint64_t v11 = v10;
  id v12 = v8;
  uint64_t v13 = (void *)MEMORY[0x18C115780](v9, v11);
  swift_bridgeObjectRelease();
  objc_msgSend(v5, sel_registerClass_forSupplementaryViewOfKind_withReuseIdentifier_, ObjCClassFromMetadata, v12, v13);

  id v14 = (void *)*MEMORY[0x1E4FB2760];
  uint64_t v15 = static UITableViewListCoordinator.headerReuseIdentifier.getter();
  uint64_t v17 = v16;
  id v18 = v14;
  v19 = (void *)MEMORY[0x18C115780](v15, v17);
  swift_bridgeObjectRelease();
  objc_msgSend(v5, sel_registerClass_forSupplementaryViewOfKind_withReuseIdentifier_, ObjCClassFromMetadata, v18, v19);

  type metadata accessor for TableGlobalHeader();
  uint64_t v20 = swift_getObjCClassFromMetadata();
  unint64_t v21 = static UICollectionViewListCoordinatorBase.globalHeaderKind.getter();
  v22 = (void *)MEMORY[0x18C115780](v21);
  swift_bridgeObjectRelease();
  unint64_t v23 = static UICollectionViewListCoordinatorBase.globalHeaderKind.getter();
  v24 = (void *)MEMORY[0x18C115780](v23);
  swift_bridgeObjectRelease();
  objc_msgSend(v5, sel_registerClass_forSupplementaryViewOfKind_withReuseIdentifier_, v20, v22, v24);

  return v5;
}

unint64_t static UICollectionViewListCoordinatorBase.globalHeaderKind.getter()
{
  return 0xD000000000000011;
}

uint64_t static UITableViewListCoordinator.headerReuseIdentifier.getter()
{
  return 0x646165487473694CLL;
}

id UpdateCoalescingCollectionView.init(frame:collectionViewLayout:)(void *a1, double a2, double a3, double a4, double a5)
{
  uint64_t v11 = (uint64_t *)&v5[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_safeAreaTransitionState];
  type metadata accessor for FalseSafeAreaTransitionState();
  uint64_t v12 = swift_allocObject();
  uint64_t *v11 = v12;
  v11[1] = (uint64_t)&protocol witness table for FalseSafeAreaTransitionState;
  *(void *)&v5[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_helper] = 0;
  uint64_t v13 = &v5[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_cachedIdealSize];
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0;
  v13[16] = 1;
  v5[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_isLazyStackBehaviorEnabled] = 0;
  id v14 = &v5[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_visibleCellsUpdate];
  *id v14 = 0;
  *((void *)v14 + 1) = 0;
  *(void *)&v5[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_postUpdateInvalidations] = MEMORY[0x1E4FBC860];
  *(_DWORD *)&v5[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_ignoreGraphUpdates] = 0;
  *(unsigned char *)(v12 + 16) = 0;
  v5[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingGraphUpdate] = 0;
  v5[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingScrollTarget] = 0;
  uint64_t v15 = &v5[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingDeselectedItem];
  uint64_t v16 = type metadata accessor for IndexPath();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  uint64_t v17 = OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView__lastUpdateSeed;
  type metadata accessor for MutableBox<UInt32>();
  uint64_t v18 = swift_allocObject();
  *(_DWORD *)(v18 + 16) = 0;
  *(void *)&v5[v17] = v18;
  *(void *)&v5[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_bridgedState] = 0;
  *(void *)&v5[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_phaseState] = 0;
  *(void *)&v5[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView__layoutContainer + 8] = 0;
  swift_unknownObjectWeakInit();
  v21.receiver = v5;
  v21.super_class = (Class)type metadata accessor for UpdateCoalescingCollectionView(0);
  id v19 = objc_msgSendSuper2(&v21, sel_initWithFrame_collectionViewLayout_, a1, a2, a3, a4, a5);
  objc_msgSend(v19, sel__setShouldSkipForcedLayoutBeforeBatchUpdates_, 1);

  return v19;
}

uint64_t type metadata accessor for TableGlobalHeader()
{
  return self;
}

void type metadata accessor for MutableBox<UInt32>()
{
  if (!lazy cache variable for type metadata for MutableBox<UInt32>)
  {
    unint64_t v0 = type metadata accessor for MutableBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<UInt32>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<DisclosureIndicator_PhoneTV, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<DisclosureIndicator_PhoneTV, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<DisclosureIndicator_PhoneTV, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<DisclosureIndicator_PhoneTV, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<DisclosureIndicator_PhoneTV, AccessibilityAttachmentModifier>, (uint64_t)&unk_1ED44EFD0, (uint64_t)&type metadata for AccessibilityAttachmentModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type DisclosureIndicator_PhoneTV and conformance DisclosureIndicator_PhoneTV();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<DisclosureIndicator_PhoneTV, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisclosureIndicator_PhoneTV and conformance DisclosureIndicator_PhoneTV()
{
  unint64_t result = lazy protocol witness table cache variable for type DisclosureIndicator_PhoneTV and conformance DisclosureIndicator_PhoneTV;
  if (!lazy protocol witness table cache variable for type DisclosureIndicator_PhoneTV and conformance DisclosureIndicator_PhoneTV)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisclosureIndicator_PhoneTV and conformance DisclosureIndicator_PhoneTV);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<StaticIf<DisclosureIndicatorDifferentiatesWithoutColor, ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>>, _ForegroundStyleModifier<DisclosureIndicatorShapeStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<DisclosureIndicatorDifferentiatesWithoutColor, ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>>, _ForegroundStyleModifier<DisclosureIndicatorShapeStyle>>, _PaddingLayout>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<StaticIf<DisclosureIndicatorDifferentiatesWithoutColor, ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>>, _ForegroundStyleModifier<DisclosureIndicatorShapeStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<StaticIf<DisclosureIndicatorDifferentiatesWithoutColor, ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>>, _ForegroundStyleModifier<DisclosureIndicatorShapeStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<StaticIf<DisclosureIndicatorDifferentiatesWithoutColor, ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>>, _ForegroundStyleModifier<DisclosureIndicatorShapeStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<StaticIf<DisclosureIndicatorDifferentiatesWithoutColor, ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>>, _ForegroundStyleModifier<DisclosureIndicatorShapeStyle>>();
    lazy protocol witness table accessor for type StaticIf<DisclosureIndicatorDifferentiatesWithoutColor, ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>> and conformance <> StaticIf<A, B, C>();
    lazy protocol witness table accessor for type _ForegroundStyleModifier<DisclosureIndicatorShapeStyle> and conformance _ForegroundStyleModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<StaticIf<DisclosureIndicatorDifferentiatesWithoutColor, ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>>, _ForegroundStyleModifier<DisclosureIndicatorShapeStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<StaticIf<DisclosureIndicatorDifferentiatesWithoutColor, ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>>, _ForegroundStyleModifier<DisclosureIndicatorShapeStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<StaticIf<DisclosureIndicatorDifferentiatesWithoutColor, ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>>, _ForegroundStyleModifier<DisclosureIndicatorShapeStyle>>)
  {
    type metadata accessor for StaticIf<DisclosureIndicatorDifferentiatesWithoutColor, ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>>();
    type metadata accessor for ModifiedContent<DisclosureIndicator_PhoneTV, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for _ForegroundStyleModifier<DisclosureIndicatorShapeStyle>, (uint64_t)&unk_1ED455AD8, (uint64_t)&protocol witness table for DisclosureIndicatorShapeStyle, MEMORY[0x1E4F40E20]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<StaticIf<DisclosureIndicatorDifferentiatesWithoutColor, ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>>, _ForegroundStyleModifier<DisclosureIndicatorShapeStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<DisclosureIndicator_PhoneTV, AccessibilityAttachmentModifier>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for StaticIf<DisclosureIndicatorDifferentiatesWithoutColor, ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>>()
{
  if (!lazy cache variable for type metadata for StaticIf<DisclosureIndicatorDifferentiatesWithoutColor, ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>>)
  {
    type metadata accessor for ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>>();
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>();
    lazy protocol witness table accessor for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<DisclosureIndicatorDifferentiatesWithoutColor, ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StaticIf<DisclosureIndicatorDifferentiatesWithoutColor, ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<DisclosureIndicatorDifferentiatesWithoutColor, ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<DisclosureIndicatorDifferentiatesWithoutColor, ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<DisclosureIndicatorDifferentiatesWithoutColor, ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>>();
    lazy protocol witness table accessor for type ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<DisclosureIndicatorDifferentiatesWithoutColor, ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ForegroundStyleModifier<DisclosureIndicatorShapeStyle> and conformance _ForegroundStyleModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ForegroundStyleModifier<DisclosureIndicatorShapeStyle> and conformance _ForegroundStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type _ForegroundStyleModifier<DisclosureIndicatorShapeStyle> and conformance _ForegroundStyleModifier<A>)
  {
    type metadata accessor for ModifiedContent<DisclosureIndicator_PhoneTV, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for _ForegroundStyleModifier<DisclosureIndicatorShapeStyle>, (uint64_t)&unk_1ED455AD8, (uint64_t)&protocol witness table for DisclosureIndicatorShapeStyle, MEMORY[0x1E4F40E20]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ForegroundStyleModifier<DisclosureIndicatorShapeStyle> and conformance _ForegroundStyleModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>>();
    lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>> and conformance <> StaticIf<A, B, C>();
    lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<SymbolVariants> and conformance _EnvironmentKeyTransformModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>>)
  {
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>();
    _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<SymbolVariants>, MEMORY[0x1E4F3FA20], MEMORY[0x1E4F41280]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>>);
    }
  }
}

double PlainDividerStyle.makeBody(configuration:)@<D0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  char v5 = a2 & 1;
  outlined copy of Environment<Bool>.Content(a1, a2 & 1);
  specialized Environment.wrappedValue.getter(a1, v5);
  outlined consume of Environment<Bool>.Content(a1, v5);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(_WORD *)a3 = 256;
  *(void *)(a3 + 8) = v7;
  *(unsigned char *)(a3 + 16) = v8;
  *(void *)(a3 + 24) = v9;
  *(unsigned char *)(a3 + 32) = v10;
  double result = *(double *)&v11;
  *(_OWORD *)(a3 + 40) = v11;
  return result;
}

double OutsetByRowInsetsIfNecessary.body(content:)@<D0>(uint64_t a1@<X8>)
{
  char v3 = *(unsigned char *)(v1 + 81);
  uint64_t v4 = *(void *)(v1 + 72);
  char v5 = *(unsigned char *)(v1 + 80);
  outlined copy of Environment<Bool>.Content(v4, v5);
  double v25 = specialized Environment.wrappedValue.getter(v4, v5);
  outlined consume of Environment<Bool>.Content(v4, v5);
  double v6 = *(double *)v1;
  double v7 = *(double *)(v1 + 8);
  double v9 = *(double *)(v1 + 16);
  double v8 = *(double *)(v1 + 24);
  long long v10 = *(_OWORD *)(v1 + 48);
  v26[0] = *(_OWORD *)(v1 + 32);
  v26[1] = v10;
  char v27 = *(unsigned char *)(v1 + 64);
  outlined init with take of Environment<EdgeInsets>.Content((uint64_t)v26, (uint64_t)v28);
  outlined retain of Environment<EdgeInsets>.Content((uint64_t)v28, (void (*)(void, void, void, void, void))outlined copy of Environment<HoverEffectContext?>.Content);
  double v11 = specialized Environment.wrappedValue.getter();
  double v13 = v12;
  double v15 = v14;
  double v17 = v16;
  outlined retain of Environment<EdgeInsets>.Content((uint64_t)v26, (void (*)(void, void, void, void, void))outlined consume of Environment<HoverEffectContext?>.Content);
  EdgeInsets.vertical.getter();
  double v19 = v25 - v18;
  if (v6 >= v11) {
    double v20 = v11;
  }
  else {
    double v20 = v6;
  }
  if (v7 >= v13) {
    double v21 = v13;
  }
  else {
    double v21 = v7;
  }
  if (v9 >= v15) {
    double v22 = v15;
  }
  else {
    double v22 = v9;
  }
  if (v8 >= v17) {
    double v23 = v17;
  }
  else {
    double v23 = v8;
  }
  *(unsigned char *)a1 = v3;
  *(double *)(a1 + 8) = v19;
  *(double *)(a1 + 16) = v11 - v20;
  double result = v17 - v23;
  *(double *)(a1 + 24) = v13 - v21;
  *(double *)(a1 + 32) = v15 - v22;
  *(double *)(a1 + 40) = v17 - v23;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance DisclosureIndicator_PhoneTV@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  char v6 = *(unsigned char *)(v1 + 24);
  char v7 = *(unsigned char *)(v1 + 25);
  LOBYTE(v30) = v4;
  LOBYTE(v25) = v6;
  closure #1 in DisclosureIndicator_PhoneTV.body.getter(v3, v4, (uint64_t)&v30);
  LOBYTE(v25) = v4;
  DisclosureIndicator_PhoneTV.chevron.getter((uint64_t)&v25);
  uint64_t v24 = v26;
  char v23 = v27;
  uint64_t v8 = v29;
  uint64_t v22 = v28;
  uint64_t v9 = v31;
  char v10 = v32;
  uint64_t v11 = v33;
  uint64_t v12 = v34;
  uint64_t v13 = v36;
  long long v19 = v30;
  long long v20 = v35;
  long long v21 = v25;
  outlined copy of Environment<Bool>.Content(v5, v6);
  specialized Environment.wrappedValue.getter(v5, v6);
  outlined consume of Environment<Bool>.Content(v5, v6);
  uint64_t result = EdgeInsets.init(_all:)();
  *(_OWORD *)a1 = v19;
  *(void *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = v12;
  *(_OWORD *)(a1 + 48) = v20;
  *(void *)(a1 + 64) = v13;
  *(_OWORD *)(a1 + 72) = v21;
  *(void *)(a1 + 88) = v24;
  *(unsigned char *)(a1 + 96) = v23;
  *(void *)(a1 + 104) = v22;
  *(void *)(a1 + 112) = v8;
  *(unsigned char *)(a1 + 120) = v7;
  *(unsigned char *)(a1 + 128) = 1;
  *(void *)(a1 + 136) = v15;
  *(void *)(a1 + 144) = v16;
  *(void *)(a1 + 152) = v17;
  *(void *)(a1 + 160) = v18;
  *(unsigned char *)(a1 + 168) = 0;
  return result;
}

double specialized Environment.wrappedValue.getter(uint64_t a1, char a2)
{
  if (a2) {
    return *(double *)&a1;
  }
  swift_retain();
  os_log_type_t v3 = static os_log_type_t.fault.getter();
  char v4 = static Log.runtimeIssuesLog.getter();
  os_log_type_t v5 = v3;
  if (os_log_type_enabled(v4, v3))
  {
    char v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v9 = v7;
    *(_DWORD *)char v6 = 136315138;
    uint64_t v10 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x74616F6C464743, 0xE700000000000000, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1872C6000, v4, v5, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18C119C60](v7, -1, -1);
    MEMORY[0x18C119C60](v6, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  outlined consume of Environment<Bool>.Content(a1, 0);
  swift_release();
  swift_release();
  return *(double *)&v10;
}

uint64_t DisclosureIndicator_PhoneTV.chevron.getter@<X0>(uint64_t a1@<X8>)
{
  _s7SwiftUI16ImageProviderBoxCyAA0C0V05NamedcD0VGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E4F41508], MEMORY[0x1E4F3FCE0]);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = 0x2E6E6F7276656863;
  *(void *)(v2 + 24) = 0xEF64726177726F66;
  *(_DWORD *)(v2 + 32) = 0;
  *(unsigned char *)(v2 + 36) = 1;
  *(_OWORD *)(v2 + 40) = xmmword_18834C6B0;
  *(_OWORD *)(v2 + 56) = xmmword_1883E7100;
  *(_OWORD *)(v2 + 72) = xmmword_18834C6D0;
  *(unsigned char *)(v2 + 88) = 0;
  uint64_t KeyPath = swift_getKeyPath();
  swift_retain_n();
  static Font.Weight.semibold.getter();
  uint64_t v4 = static Font.system(_:design:weight:)();
  uint64_t v5 = swift_getKeyPath();
  uint64_t result = swift_release();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = KeyPath;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v4;
  return result;
}

double closure #1 in DisclosureIndicator_PhoneTV.body.getter@<D0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  _s7SwiftUI16ImageProviderBoxCyAA0C0V05NamedcD0VGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E4F41508], MEMORY[0x1E4F3FCE0]);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = 0x2E6E6F7276656863;
  *(void *)(v6 + 24) = 0xEF64726177726F66;
  *(_DWORD *)(v6 + 32) = 0;
  *(unsigned char *)(v6 + 36) = 1;
  *(_OWORD *)(v6 + 40) = xmmword_18834C6B0;
  *(_OWORD *)(v6 + 56) = xmmword_1883E7100;
  *(_OWORD *)(v6 + 72) = xmmword_18834C6D0;
  *(unsigned char *)(v6 + 88) = 0;
  swift_getKeyPath();
  LOBYTE(v9) = 6;
  swift_retain_n();
  static Font.Weight.semibold.getter();
  static Font.system(_:design:weight:)();
  swift_getKeyPath();
  swift_release();
  a2 &= 1u;
  outlined copy of Environment<Bool>.Content(a1, a2);
  char v7 = specialized Environment.wrappedValue.getter(a1, a2);
  outlined consume of Environment<Bool>.Content(a1, a2);
  if (v7)
  {
    static SymbolVariants.circle.getter();
    SymbolVariants.fill.getter();
  }
  else
  {
    static SymbolVariants.none.getter();
  }
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>();
  lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>> and conformance <> StaticIf<A, B, C>();
  View.symbolVariant(_:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release_n();
  double result = *(double *)&v9;
  *(_OWORD *)a3 = v9;
  *(void *)(a3 + 16) = v10;
  *(unsigned char *)(a3 + 24) = v11;
  *(void *)(a3 + 32) = v12;
  *(void *)(a3 + 40) = v13;
  *(_OWORD *)(a3 + 48) = v14;
  *(void *)(a3 + 64) = v15;
  return result;
}

void type metadata accessor for ImageProviderBox<Image.NamedImageProvider>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void _s7SwiftUI16ImageProviderBoxCyAA0C0V05NamedcD0VGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void _s7SwiftUI16ImageProviderBoxCyAA0C0V05NamedcD0VGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void _s7SwiftUI16ImageProviderBoxCyAA0C0V05NamedcD0VGMaTm_2(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void type metadata accessor for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>()
{
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>)
  {
    type metadata accessor for ModifiedContent<DisclosureIndicator_PhoneTV, AccessibilityAttachmentModifier>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<VisionInterfaceIdiom>, MEMORY[0x1E4F406D0], MEMORY[0x1E4F406C8], MEMORY[0x1E4F40C60]);
    type metadata accessor for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>();
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<VisionInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t outlined init with take of Environment<EdgeInsets>.Content(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Environment<EdgeInsets>.Content();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for Environment<EdgeInsets>.Content()
{
  if (!lazy cache variable for type metadata for Environment<EdgeInsets>.Content)
  {
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Environment<EdgeInsets>.Content);
    }
  }
}

unint64_t lazy protocol witness table accessor for type InterfaceIdiomPredicate<VisionInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type InterfaceIdiomPredicate<VisionInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>;
  if (!lazy protocol witness table cache variable for type InterfaceIdiomPredicate<VisionInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>)
  {
    type metadata accessor for InterfaceIdiomPredicate<VisionInterfaceIdiom>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<VisionInterfaceIdiom>, MEMORY[0x1E4F406D0], MEMORY[0x1E4F406C8], MEMORY[0x1E4F40C60]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InterfaceIdiomPredicate<VisionInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type Image.NamedImageProvider and conformance Image.NamedImageProvider;
  if (!lazy protocol witness table cache variable for type Image.NamedImageProvider and conformance Image.NamedImageProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.NamedImageProvider and conformance Image.NamedImageProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<SymbolVariants> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<SymbolVariants> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<SymbolVariants> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyTransformModifier<SymbolVariants>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<SymbolVariants>, MEMORY[0x1E4F3FA20], MEMORY[0x1E4F41280]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<SymbolVariants> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

void type metadata accessor for _EnvironmentKeyTransformModifier<SymbolVariants>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI32_EnvironmentKeyTransformModifierVyAA14SymbolVariantsVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>();
    lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_5(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>);
    }
  }
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for [SwiftUIAnySortComparator](255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_0(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    type metadata accessor for Font?(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v5 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_1(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for AccessibilityValueStorage?(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_2(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v5 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_3(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    _s7SwiftUI23GaugeStyleConfigurationV17CurrentValueLabelVSgMaTm_0(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v5 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_4(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<EdgeInsets>(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v5 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_5(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    _s7SwiftUI28StyleContextAcceptsPredicateVyAA04MenucD0VGMaTm_1(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v5 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_6(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for _ContiguousArrayStorage<Bool>(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_7(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    _sSiSgMaTm_0(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v5 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Text.Case?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Text.Case?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    _s7SwiftUI7BindingVySbGMaTm_6(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v5 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>)
  {
    _s7SwiftUI28StyleContextAcceptsPredicateVyAA04MenucD0VGMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>, MEMORY[0x1E4F41528], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>, MEMORY[0x1E4F41528]);
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Image.Scale> and conformance _EnvironmentKeyWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_1(255, a3, a4, MEMORY[0x1E4F411E8]);
    unint64_t v5 = type metadata accessor for ModifiedContent();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t assignWithCopy for ContentConfigurationBasedRootEnvironment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  uint64_t v6 = (uint64_t *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 72);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  unint64_t v9 = (uint64_t *)(a2 + 72);
  uint64_t v8 = *(void *)(a2 + 72);
  if (v7 == 1)
  {
    if (v8 == 1)
    {
      uint64_t v10 = *v9;
      *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
      uint64_t *v6 = v10;
    }
    else
    {
      *(void *)(a1 + 72) = v8;
      *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
      swift_retain();
    }
  }
  else if (v8 == 1)
  {
    outlined destroy of ListItemTint(a1 + 72);
    char v11 = *(unsigned char *)(a2 + 80);
    uint64_t *v6 = *v9;
    *(unsigned char *)(a1 + 80) = v11;
  }
  else
  {
    *(void *)(a1 + 72) = v8;
    swift_retain();
    swift_release();
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  }
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)(a1 + v12);
  long long v14 = (void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for UICellConfigurationState();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v13, v14, v15);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_13;
  }
  if (v19)
  {
LABEL_13:
    type metadata accessor for UICellConfigurationState?(0);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v13, v14, v15);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

ValueMetadata *type metadata accessor for _TextFieldStyleLabel()
{
  return &type metadata for _TextFieldStyleLabel;
}

void one-time initialization function for idealSizeOptions()
{
  uint64_t v0 = unk_1ED45DA50;
  if ((unk_1ED45DA50 & ~qword_1ED45DA48) == 0) {
    uint64_t v0 = 0;
  }
  static UIHostingControllerSizingOptions.idealSizeOptions = v0 | qword_1ED45DA48;
}

void *assignWithCopy for CoreSheetPresentationModifier(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v5 = (unint64_t)a2 + 15;
  *a1 = v6;
  uint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 15;
  *uint64_t v7 = *(void *)(v5 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  unint64_t v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if (*(void *)v9 < 0xFFFFFFFFuLL)
  {
    if (v11 >= 0xFFFFFFFF)
    {
      uint64_t v13 = *(void *)(v10 + 8);
      *(void *)unint64_t v9 = v11;
      *(void *)(v9 + 8) = v13;
      swift_retain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v11 >= 0xFFFFFFFF)
    {
      uint64_t v12 = *(void *)(v10 + 8);
      *(void *)unint64_t v9 = v11;
      *(void *)(v9 + 8) = v12;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
LABEL_8:
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  *(unsigned char *)(v9 + 17) = *(unsigned char *)(v10 + 17);
  unint64_t v14 = (v9 + 25) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v10 + 25) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = *(void *)(v15 + 24);
  if (*(void *)(v14 + 24) < 0xFFFFFFFFuLL)
  {
    if (v16 >= 0xFFFFFFFF)
    {
      *(void *)(v14 + 24) = v16;
      *(void *)(v14 + 32) = *(void *)(v15 + 32);
      (**(void (***)(unint64_t, unint64_t))(v16 - 8))((v9 + 25) & 0xFFFFFFFFFFFFFFF8, v15);
      goto LABEL_15;
    }
LABEL_14:
    long long v18 = *(_OWORD *)v15;
    long long v19 = *(_OWORD *)(v15 + 16);
    *(void *)(v14 + 32) = *(void *)(v15 + 32);
    *(_OWORD *)unint64_t v14 = v18;
    *(_OWORD *)(v14 + 16) = v19;
    goto LABEL_15;
  }
  uint64_t v17 = (uint64_t *)((v9 + 25) & 0xFFFFFFFFFFFFFFF8);
  if (v16 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    goto LABEL_14;
  }
  __swift_assign_boxed_opaque_existential_1(v17, (uint64_t *)v15);
LABEL_15:
  uint64_t v20 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v21 = v20 + 24;
  uint64_t v22 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v23 = (v14 + v22 + 40) & ~v22;
  uint64_t v24 = (v15 + v22 + 40) & ~v22;
  (*(void (**)(uint64_t, uint64_t))(v20 + 24))(v23, v24);
  *(unsigned char *)(v23 + *(void *)(v21 + 40)) = *(unsigned char *)(v24 + *(void *)(v21 + 40));
  return a1;
}

void type metadata completion function for BarEnvironmentViewModel()
{
  type metadata accessor for Published<Visibility>(319, &lazy cache variable for type metadata for Published<Visibility>, MEMORY[0x1E4F3F3F0], MEMORY[0x1E4F1AC70]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Published<ColorScheme?>();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t BarEnvironmentViewModel.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7SwiftUI23BarEnvironmentViewModel__visibility;
  type metadata accessor for Published<Visibility>(0, &lazy cache variable for type metadata for Published<Visibility>, MEMORY[0x1E4F3F3F0], MEMORY[0x1E4F1AC70]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC7SwiftUI23BarEnvironmentViewModel__colorScheme;
  type metadata accessor for Published<ColorScheme?>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocClassInstance();
}

void type metadata accessor for Published<ColorScheme?>()
{
  if (!lazy cache variable for type metadata for Published<ColorScheme?>)
  {
    type metadata accessor for Published<Visibility>(255, (unint64_t *)&lazy cache variable for type metadata for ColorScheme?, MEMORY[0x1E4F3F468], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<ColorScheme?>);
    }
  }
}

void specialized ControlWidgetTemplateModifier.controlBodyError()()
{
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  v0._object = (void *)0x8000000188340F30;
  v0._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v0);
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall MergedDocumentIntroAccessory._resolve(into:)(SwiftUI::_ResolvedDocumentIntroAccessory *into)
{
  uint64_t v2 = v1;
  (*(void (**)(SwiftUI::_ResolvedDocumentIntroAccessory *, void))(*(void *)(v1 + 32) + 48))(into, *(void *)(v1 + 16));
  (*(void (**)(SwiftUI::_ResolvedDocumentIntroAccessory *, void))(*(void *)(v2 + 40) + 48))(into, *(void *)(v2 + 24));
}

uint64_t getEnumTagSinglePayload for _DocumentIntroAccessoryItem(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 17) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 > 0xFE) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 17) & ~v6);
      }
      unsigned int v15 = *((unsigned __int8 *)a1 + 16);
      if (v15 >= 2) {
        return v15 - 1;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

uint64_t destroy for ButtonToggleStyle(uint64_t a1)
{
  outlined consume of Environment<Color?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8));

  return swift_release();
}

uint64_t protocol witness for static StyleableView.defaultStyleModifier.getter in conformance ResolvedLabeledContent@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultStyleModifier != -1) {
    swift_once();
  }
  uint64_t v2 = static ResolvedLabeledContent.defaultStyleModifier;
  char v3 = byte_1E90FBCB0;
  *(void *)a1 = static ResolvedLabeledContent.defaultStyleModifier;
  *(unsigned char *)(a1 + 8) = v3;

  return outlined copy of Environment<Bool>.Content(v2, v3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AccessibilityRepresentationModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityTraitsModifier<A>.ChildModifier@<D0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return static AccessibilityViewModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, WitnessTable, a6);
}

uint64_t key path getter for EnvironmentValues.toolbarCustomizationBehavior : EnvironmentValues@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path getter for EnvironmentValues.toolbarCustomizationOptions : EnvironmentValues@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

void *one-time initialization function for visualDidChangeNotifications()
{
  uint64_t result = closure #1 in variable initialization expression of static AccessibilityCore.UserSettings.visualDidChangeNotifications();
  static AccessibilityCore.UserSettings.visualDidChangeNotifications = (uint64_t)result;
  return result;
}

void *closure #1 in variable initialization expression of static AccessibilityCore.UserSettings.visualDidChangeNotifications()
{
  type metadata accessor for _ContiguousArrayStorage<(String, Any)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<NSNotificationName>, (uint64_t (*)(uint64_t))type metadata accessor for NSNotificationName, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  uint64_t v1 = (void **)MEMORY[0x1E4FB24C0];
  *(_OWORD *)(inited + 16) = xmmword_1883B07A0;
  uint64_t v2 = *v1;
  char v3 = (void *)*MEMORY[0x1E4FB24A8];
  *(void *)(inited + 32) = *v1;
  *(void *)(inited + 40) = v3;
  uint64_t v4 = (void *)*MEMORY[0x1E4FB2498];
  unsigned int v5 = (void *)*MEMORY[0x1E4FB2450];
  *(void *)(inited + 48) = *MEMORY[0x1E4FB2498];
  *(void *)(inited + 56) = v5;
  uint64_t v6 = (void *)*MEMORY[0x1E4FB2438];
  unsigned int v7 = (void *)*MEMORY[0x1E4FB2428];
  int v8 = (void **)MEMORY[0x1E4FB2490];
  *(void *)(inited + 64) = *MEMORY[0x1E4FB2438];
  *(void *)(inited + 72) = v7;
  uint64_t v9 = *v8;
  *(void *)(inited + 80) = *v8;
  char v10 = (void *)*MEMORY[0x1E4FB91D0];
  if (!*MEMORY[0x1E4FB91D0]) {
    __break(1u);
  }
  int v11 = (void *)inited;
  *(void *)(inited + 88) = v10;
  uint64_t v12 = (void *)*MEMORY[0x1E4FB2C60];
  id v13 = v10;
  id v14 = v2;
  id v15 = v3;
  id v16 = v4;
  id v17 = v5;
  id v18 = v6;
  id v19 = v7;
  id v20 = v9;
  id v21 = v12;
  uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)1, 9, 1, v11);
  result[2] = 9;
  result[12] = v21;
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<(String, Any)>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t initializeWithCopy for ToolbarPlacementEnvironment(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v3;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

void *one-time initialization function for windowMap()
{
  uint64_t result = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  static UIHostingKeyboardTrackingElement.windowMap = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, &lazy cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label);
    lazy protocol witness table accessor for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label);
    lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    type metadata accessor for AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>(255, a3, a4, (uint64_t)&type metadata for DetachedGeometryModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t v5 = type metadata accessor for ModifiedContent();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>(255, a2, a3, (uint64_t)&type metadata for DetachedGeometryModifier, MEMORY[0x1E4F3FBA0]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t implicit closure #2 in LazyLayoutViewCache.init<A>(layout:list:inputs:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

unint64_t lazy protocol witness table accessor for type ScrollTargetRole.SetLayout and conformance ScrollTargetRole.SetLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollTargetRole.SetLayout and conformance ScrollTargetRole.SetLayout;
  if (!lazy protocol witness table cache variable for type ScrollTargetRole.SetLayout and conformance ScrollTargetRole.SetLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollTargetRole.SetLayout and conformance ScrollTargetRole.SetLayout);
  }
  return result;
}

uint64_t SheetBridge.present(_:from:animated:existingPresentedVC:isPreempting:)(uint64_t a1, UIViewController *a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  unint64_t v6 = v5;
  unint64_t v40 = __PAIR64__(a5, a3);
  unint64_t v8 = (void *)(*MEMORY[0x1E4FBC8C8] & *v5);
  if (a4)
  {
    uint64_t v9 = *(void **)(a4 + direct field offset for UIHostingController.host);
    uint64_t v10 = *(void *)a1;
    int v11 = (void *)((char *)v9 + *(void *)((*v9 & *MEMORY[0x1E4FBC8C8]) + 0x60));
    swift_beginAccess();
    void *v11 = v10;
    swift_retain_n();
    uint64_t v12 = v9;
    swift_release();
    type metadata accessor for PresentationHostingController<AnyView>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    swift_release_n();
  }
  id v13 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for willPresent != -1) {
    swift_once();
  }
  objc_msgSend(v13, sel_postNotificationName_object_, static SheetInspectorBridgeNotifications.willPresent, 0, v40);

  MEMORY[0x1F4188790](v14);
  type metadata accessor for PresentationHostingController<AnyView>(0, &lazy cache variable for type metadata for PresentationHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PresentationHostingController);
  static Update.ensure<A>(_:)();
  id v15 = v45;
  uint64_t v16 = direct field offset for UIHostingController.host;
  id v17 = *(void **)&v45[direct field offset for UIHostingController.host];
  id v18 = (void *)MEMORY[0x1E4FBC8C8];
  *(void *)((char *)v17 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v17) + 0x198) + 8) = &protocol witness table for SheetBridge<A, B>;
  swift_unknownObjectWeakAssign();
  uint64_t v19 = *(void *)(a1 + 96);
  uint64_t v20 = *(void *)((char *)v17 + *(void *)((*v18 & *v17) + 0x68));
  uint64_t v21 = *(void *)(v20 + 152);
  *(void *)(v20 + 152) = *(void *)(a1 + 88);
  *(void *)(v20 + 160) = v19;
  swift_retain();
  uint64_t v22 = v17;
  swift_retain();
  outlined consume of EnvironmentValues?(v21);
  if (MEMORY[0x18C119DF0](v20 + 24))
  {
    swift_getObjectType();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    swift_unknownObjectRelease();
  }
  else
  {
  }
  swift_retain();
  swift_retain();
  EnvironmentValues.explicitPreferredColorScheme.getter();
  swift_release();
  swift_release();
  if (LOBYTE(v44[0]) != 2)
  {
    uint64_t v23 = *(void **)&v15[v16];
    uint64_t v24 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v23) + 0xD8);
    uint64_t v25 = *((unsigned __int8 *)v23 + v24);
    *((unsigned char *)v23 + v24) = v44[0];
    uint64_t v26 = v15;
    char v27 = v23;
    specialized _UIHostingView.didChangeColorScheme(from:)(v25);
  }
  uint64_t v28 = v8[10];
  uint64_t v29 = v8[11];
  uint64_t v31 = v8[12];
  uint64_t v30 = v8[13];
  signed __int8 v32 = *(unsigned char *)(a1 + 72);
  *(void *)v44 = v6;
  uint64_t v33 = type metadata accessor for SheetBridge();
  PresentationHostingController.setupSheet<A>(for:presenter:placement:)((uint64_t)v44, a2, v32, v33, (uint64_t)&protocol witness table for SheetBridge<A, B>);
  v44[0] = *(_DWORD *)((char *)v6 + direct field offset for SheetBridge.seed);
  swift_beginAccess();
  if (v42) {
    PresentationState.presentPreemptingDismissal(_:presentedVC:presentationSeed:)(a1, v15, v44);
  }
  else {
    PresentationState.present(_:presentedVC:presentationSeed:)(a1, v15, v44);
  }
  swift_endAccess();
  uint64_t v34 = swift_allocObject();
  swift_unknownObjectWeakInit();
  int v35 = *(_DWORD *)((char *)v6 + direct field offset for SheetBridge.seed);
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = v28;
  *(void *)(v36 + 24) = v29;
  *(void *)(v36 + 32) = v31;
  *(void *)(v36 + 40) = v30;
  *(void *)(v36 + 48) = v34;
  *(unsigned char *)(v36 + 56) = v42 & 1;
  *(void *)(v36 + 64) = a2;
  *(unsigned char *)(v36 + 72) = v41 & 1;
  *(_DWORD *)(v36 + 76) = v35;
  *(void *)(v36 + 80) = v15;
  v37 = v15;
  swift_retain();
  v38 = a2;
  static Update.enqueueAction(_:)();

  swift_release();
  return swift_release();
}

uint64_t PresentationHostingController.setupSheet<A>(for:presenter:placement:)(uint64_t a1, UIViewController *a2, signed __int8 a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = v5;
  v5[direct field offset for PresentationHostingController.presentingBridgeKind] = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(a4, a5) & 1;
  type metadata accessor for (PresentationOptionsPreference, Bool)();
  static Update.ensure<A>(_:)();
  v9.value = v43;
  long long v49 = v41;
  v50[0] = *(_OWORD *)v42;
  *(_OWORD *)((char *)v50 + 9) = *(_OWORD *)&v42[9];
  *(_OWORD *)&v45[16] = v37;
  long long v46 = v38;
  long long v47 = v39;
  long long v48 = v40;
  long long v44 = v35;
  *(_OWORD *)v45 = v36;
  uint64_t v10 = qword_1883BB938[a3];
  UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)(a2, 1);
  id v11 = objc_msgSend(v5, sel__preferredTransition);

  if (!v11) {
    PresentationHostingController.prepareModalPresentationStyle(_:presentationOptions:)(v10, (uint64_t)&v44);
  }
  id v12 = objc_msgSend(v6, sel_presentationController);
  if (v12)
  {
    id v13 = v12;
    self;
    id v14 = (id)swift_dynamicCastObjCClass();
    if (v14) {
      goto LABEL_8;
    }
  }
  id v15 = objc_msgSend(v6, sel_popoverPresentationController);
  if (!v15) {
    return outlined destroy of PresentationOptionsPreference((uint64_t)&v44);
  }
  uint64_t v16 = v15;
  id v14 = objc_msgSend(v15, sel_adaptiveSheetPresentationController);

  if (!v14) {
    return outlined destroy of PresentationOptionsPreference((uint64_t)&v44);
  }
LABEL_8:
  PresentationHostingController.setWantsFullScreen(placement:sheetController:)(a3, v14);
  id v17 = v14;
  PresentationHostingController.configureSizingOptions(for:sheetController:)((uint64_t)&v44, v14);

  if (static SemanticFeature.isEnabled.getter())
  {
    outlined init with copy of PresentationSizing?((uint64_t)&v49, (uint64_t)&v32);
    if (v33)
    {
      outlined init with take of OptionalBinaryInteger(&v32, (uint64_t)&v35);
    }
    else
    {
      *((void *)&v36 + 1) = &type metadata for AutomaticPresentationSizing;
      *(void *)&long long v37 = &protocol witness table for AutomaticPresentationSizing;
      outlined destroy of PresentationSizing?((uint64_t)&v32);
    }
  }
  else
  {
    *(void *)&long long v37 = 0;
    long long v35 = 0u;
    long long v36 = 0u;
  }
  PresentationHostingController.updatePreferredContentSizeIfNeeded(presenter:sizing:)(a2, (uint64_t)&v35);
  outlined destroy of PresentationSizing?((uint64_t)&v35);
  BOOL v18 = PresentationHostingController.shouldIgnoreDetentsConfiguration.getter();
  outlined init with copy of PresentationOptionsPreference((uint64_t)&v44, (uint64_t)&v35);
  if (v18)
  {
    outlined destroy of PresentationOptionsPreference((uint64_t)&v35);
    outlined init with copy of PresentationOptionsPreference((uint64_t)&v44, (uint64_t)&v32);
  }
  else
  {
    uint64_t v19 = *(void *)(v35 + 16);
    outlined destroy of PresentationOptionsPreference((uint64_t)&v35);
    outlined init with copy of PresentationOptionsPreference((uint64_t)&v44, (uint64_t)&v32);
    if (v19)
    {
      uint64_t v20 = v34;
      outlined destroy of PresentationOptionsPreference((uint64_t)&v32);
      if ((v20 | 2) != 2) {
        PresentationHostingController.configureDetents(of:using:)((uint64_t)v17, (uint64_t)&v44);
      }
      goto LABEL_19;
    }
  }
  outlined destroy of PresentationOptionsPreference((uint64_t)&v32);
LABEL_19:
  if (*(void *)v45)
  {
    Swift::UInt v29 = *((void *)&v44 + 1);
    unint64_t v30 = *(void *)v45;
    long long v31 = *(_OWORD *)&v45[8];
    type metadata accessor for RemoteSheetContainerVCKey.Storage?(0, &lazy cache variable for type metadata for Binding<PresentationDetent>, (uint64_t)&type metadata for PresentationDetent, MEMORY[0x1E4F41638]);
    MEMORY[0x18C113DA0](&v27);
    Swift::UInt v21 = v27;
    unint64_t v22 = v28;
    if (specialized Set.contains(_:)(v27, v28, v44))
    {
      Swift::UInt v29 = v21;
      unint64_t v30 = v22;
      id v23 = PresentationDetent.uiSheetDetentId.getter();
      objc_msgSend(v17, sel_setSelectedDetentIdentifier_, v23);
    }
    else
    {
      MEMORY[0x18C112B90](0xD000000000000052, 0x8000000188333910);
    }
  }
  outlined init with copy of PresentationOptionsPreference((uint64_t)&v44, (uint64_t)&v29);
  uint64_t v24 = (uint64_t)&v6[direct field offset for PresentationHostingController.lastPresentationOptions];
  swift_beginAccess();
  outlined assign with take of PresentationOptionsPreference?((uint64_t)&v29, v24);
  swift_endAccess();
  if (MEMORY[0x18C119DF0](&v6[direct field offset for PresentationHostingController.delegate]))
  {
    uint64_t v25 = swift_dynamicCastObjCProtocolConditional();
    if (!v25) {
      swift_unknownObjectRelease();
    }
  }
  else
  {
    uint64_t v25 = 0;
  }
  objc_msgSend(v17, sel_setDelegate_, v25);
  swift_unknownObjectRelease();
  PresentationHostingController.setBackgroundTransparency(preferenceValue:)(v9);

  return outlined destroy of PresentationOptionsPreference((uint64_t)&v44);
}

uint64_t outlined init with copy of PresentationOptionsPreference(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for PresentationOptionsPreference(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  if (v5)
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 24);
    *uint64_t v4 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v6;
  }
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  unint64_t v7 = *(void *)(a2 + 48);
  if (v7 >= 2)
  {
    if (v7 != 2)
    {
      *(void *)(a1 + 48) = v7;
      id v8 = (id)v7;
      goto LABEL_9;
    }
    unint64_t v7 = 2;
  }
  *(void *)(a1 + 48) = v7;
LABEL_9:
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_WORD *)(a1 + 57) = *(_WORD *)(a2 + 57);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  Swift::Bool_optional v9 = (_OWORD *)(a1 + 96);
  uint64_t v10 = (_OWORD *)(a2 + 96);
  uint64_t v11 = *(void *)(a2 + 120);
  if (v11)
  {
    uint64_t v12 = *(void *)(a2 + 128);
    *(void *)(a1 + 120) = v11;
    *(void *)(a1 + 128) = v12;
    (**(void (***)(_OWORD *, _OWORD *))(v11 - 8))(v9, v10);
  }
  else
  {
    long long v13 = *(_OWORD *)(a2 + 112);
    *Swift::Bool_optional v9 = *v10;
    *(_OWORD *)(a1 + 112) = v13;
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
  }
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  return a1;
}

uint64_t outlined destroy of PresentationOptionsPreference(uint64_t a1)
{
  return a1;
}

id PresentationHostingController.configureSizingOptions(for:sheetController:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  if (objc_msgSend(v2, sel_modalPresentationStyle) == (id)7)
  {
    v14[0] = qword_1ED456A58;
    return (id)UIHostingController.sizingOptions.setter(v14);
  }
  if (*(unsigned char *)(a1 + 136) == 1)
  {
    v14[0] = qword_1ED456A08;
    id result = (id)UIHostingController.sizingOptions.setter(v14);
    if (a2)
    {
      return objc_msgSend(a2, sel_setPrefersPageSizing_, 0);
    }
    return result;
  }
  id v7 = objc_msgSend(v2, sel_modalPresentationStyle);
  outlined init with copy of PresentationOptionsPreference(a1, (uint64_t)v14);
  if (v7 == (id)2)
  {
    if (static SemanticFeature.isEnabled.getter())
    {
      outlined init with copy of PresentationSizing?((uint64_t)&v15, (uint64_t)&v9);
      if (v10)
      {
        outlined init with take of OptionalBinaryInteger(&v9, (uint64_t)&v11);
      }
      else
      {
        *((void *)&v12 + 1) = &type metadata for AutomaticPresentationSizing;
        long long v13 = &protocol witness table for AutomaticPresentationSizing;
        outlined destroy of PresentationSizing?((uint64_t)&v9);
      }
    }
    else
    {
      long long v13 = 0;
      long long v11 = 0u;
      long long v12 = 0u;
    }
    outlined destroy of PresentationOptionsPreference((uint64_t)v14);
    uint64_t v8 = *((void *)&v12 + 1);
    outlined destroy of PresentationSizing?((uint64_t)&v11);
    if (!v8)
    {
      *(void *)&long long v11 = qword_1ED456A30;
      goto LABEL_29;
    }
  }
  else
  {
    outlined destroy of PresentationOptionsPreference((uint64_t)v14);
  }
  if (static SemanticFeature.isEnabled.getter())
  {
    outlined init with copy of PresentationSizing?(a1 + 96, (uint64_t)&v9);
    if (v10)
    {
      outlined init with take of OptionalBinaryInteger(&v9, (uint64_t)&v11);
    }
    else
    {
      *((void *)&v12 + 1) = &type metadata for AutomaticPresentationSizing;
      long long v13 = &protocol witness table for AutomaticPresentationSizing;
      outlined destroy of PresentationSizing?((uint64_t)&v9);
    }
    outlined destroy of PresentationSizing?((uint64_t)&v11);
    *(void *)&long long v11 = 0;
LABEL_29:
    id result = (id)UIHostingController.sizingOptions.setter((uint64_t *)&v11);
    if (a2) {
      return objc_msgSend(a2, sel_setPrefersPageSizing_, 0);
    }
    return result;
  }
  long long v13 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  outlined destroy of PresentationSizing?((uint64_t)&v11);
  if (static SemanticFeature.isEnabled.getter())
  {
    outlined init with copy of PresentationSizing?(a1 + 96, (uint64_t)&v9);
    if (v10)
    {
      outlined init with take of OptionalBinaryInteger(&v9, (uint64_t)&v11);
    }
    else
    {
      *((void *)&v12 + 1) = &type metadata for AutomaticPresentationSizing;
      long long v13 = &protocol witness table for AutomaticPresentationSizing;
      outlined destroy of PresentationSizing?((uint64_t)&v9);
    }
    return (id)outlined destroy of PresentationSizing?((uint64_t)&v11);
  }
  else
  {
    long long v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
    outlined destroy of PresentationSizing?((uint64_t)&v11);
    id result = objc_msgSend(v3, sel_modalPresentationStyle);
    if (result == (id)1)
    {
      *(void *)&long long v11 = 0;
      id result = (id)UIHostingController.sizingOptions.setter((uint64_t *)&v11);
      if (a2) {
        return objc_msgSend(a2, sel_setPrefersPageSizing_, 1);
      }
    }
  }
  return result;
}

uint64_t outlined destroy of PresentationSizing?(uint64_t a1)
{
  type metadata accessor for PresentationSizing?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PresentationSizing?()
{
  if (!lazy cache variable for type metadata for PresentationSizing?)
  {
    type metadata accessor for PresentationSizing();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?);
    }
  }
}

uint64_t outlined init with copy of PresentationSizing?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PresentationSizing?(0, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (uint64_t)&lazy cache variable for type metadata for PresentationSizing, (uint64_t)&protocol descriptor for PresentationSizing, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CVarArg);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for PresentationSizing?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    a5(255, a3, a4);
    unint64_t v6 = type metadata accessor for Optional();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t UIHostingController.sizingOptions.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)((char *)v1 + direct field offset for UIHostingController.sizingOptions);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *uint64_t v3 = v2;
  uint64_t v6 = v4;
  return (*(uint64_t (**)(uint64_t *))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x3B0))(&v6);
}

Swift::Void __swiftcall PresentationHostingController.sizingOptionsDidChange(from:)(SwiftUI::UIHostingControllerSizingOptions from)
{
  uint64_t v2 = v1;
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *(void *)v1;
  uint64_t v4 = *(void *)from.rawValue;
  uint64_t v5 = (double *)&v1[direct field offset for PresentationHostingController.observedSize];
  uint64_t v6 = *(void *)&v1[direct field offset for PresentationHostingController.observedSize];
  uint64_t v7 = *(void *)&v1[direct field offset for PresentationHostingController.observedSize + 8];
  char v8 = v1[direct field offset for PresentationHostingController.observedSize + 16];
  uint64_t v34 = v1;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFSo6CGSizeV_s5NeverOytTg5((void (*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in PresentationHostingController.sizingOptionsDidChange(from:), (uint64_t)v33, v6, v7, v8);
  id v9 = objc_msgSend(v1, sel_presentingViewController);
  if (!v9) {
    goto LABEL_15;
  }
  uint64_t v10 = v9;
  long long v11 = &v1[direct field offset for PresentationHostingController.lastPresentationOptions];
  swift_beginAccess();
  if (!*(void *)v11)
  {
    long long v48 = 0;
    long long v46 = 0u;
    long long v47 = 0u;
LABEL_13:

    outlined destroy of PresentationSizing?((uint64_t)&v46);
LABEL_15:
    v38[0] = v4;
    UIHostingController.sizingOptionsDidChange(from:)((SwiftUI::UIHostingControllerSizingOptions)v38);
    return;
  }
  outlined init with copy of PresentationOptionsPreference((uint64_t)v11, (uint64_t)v38);
  if (static SemanticFeature.isEnabled.getter())
  {
    outlined init with copy of PresentationSizing?((uint64_t)&v42, (uint64_t)&v35);
    if (v37)
    {
      outlined init with take of OptionalBinaryInteger(&v35, (uint64_t)&v46);
    }
    else
    {
      *((void *)&v47 + 1) = &type metadata for AutomaticPresentationSizing;
      long long v48 = &protocol witness table for AutomaticPresentationSizing;
      outlined destroy of PresentationSizing?((uint64_t)&v35);
    }
  }
  else
  {
    long long v48 = 0;
    long long v46 = 0u;
    long long v47 = 0u;
  }
  outlined destroy of PresentationOptionsPreference((uint64_t)v38);
  if (!*((void *)&v47 + 1)) {
    goto LABEL_13;
  }
  outlined init with take of OptionalBinaryInteger(&v46, (uint64_t)v49);
  if ((PresentationHostingController.shouldUsePresentationSizing.getter() & 1) == 0)
  {

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
    goto LABEL_15;
  }
  id v12 = objc_msgSend(v2, sel_traitCollection);
  id v13 = objc_msgSend(v12, sel_userInterfaceIdiom);

  UIUserInterfaceIdiom.idiom.getter((uint64_t)v13, (uint64_t)&v46);
  uint64_t v14 = v46;
  if ((void)v46)
  {
    uint64_t v15 = *((void *)&v46 + 1);
    v38[0] = v46;
  }
  else
  {
    static _GraphInputs.defaultInterfaceIdiom.getter();
    uint64_t v14 = v38[0];
    uint64_t v15 = v38[1];
  }
  id v16 = v10;
  id v17 = objc_msgSend(v16, sel_presentingViewController);
  BOOL v18 = v16;
  if (v17)
  {
    uint64_t v19 = v16;
    do
    {
      BOOL v18 = v17;

      id v17 = objc_msgSend(v18, sel_presentingViewController);
      uint64_t v19 = v18;
    }
    while (v17);
  }
  id v20 = objc_msgSend(v18, sel_parentViewController);
  if (v20)
  {
    do
    {
      Swift::UInt v21 = v20;

      id v20 = objc_msgSend(v21, sel_parentViewController);
      BOOL v18 = v21;
    }
    while (v20);
  }
  else
  {
    Swift::UInt v21 = v18;
  }
  id v22 = objc_msgSend(v21, sel_view);

  if (v22)
  {
    uint64_t v23 = *(void *)&v2[direct field offset for PresentationHostingController.lastColumnCount];
    outlined init with copy of TableColumnList((uint64_t)v49, (uint64_t)v38);
    v38[5] = v22;
    v38[6] = v23;
    v38[7] = 0;
    v38[8] = 0;
    char v39 = 1;
    uint64_t v40 = 0;
    char v41 = 1;
    uint64_t v42 = 0;
    char v43 = 1;
    uint64_t v44 = v14;
    uint64_t v45 = v15;
    specialized UIHostingController.host.getter();
    specialized UIHostingController.host.getter();
    uint64_t v24 = *(void *)(v3 + 984);
    uint64_t v25 = *(void *)(v3 + 992);
    type metadata accessor for _UIHostingView();
    *((void *)&v46 + 1) = swift_getWitnessTable();
    swift_unknownObjectWeakInit();
    id v26 = v22;
    specialized SheetSizing.sheetSizeThatFits<A>(host:subview:)((uint64_t)&v46);
    double v28 = v27;
    double v30 = v29;
    outlined destroy of weak FallbackResponderProvider?((uint64_t)&v46);
    PresentationHostingController.preferredContentSize.setter(v28, v30);
    *uint64_t v5 = v28;
    v5[1] = v30;
    *((unsigned char *)v5 + 16) = 0;
    specialized UIHostingController.host.getter();
    specialized _UIHostingView.viewGraph.getter();
    swift_retain();
    _ProposedSize.init(width:height:)();
    *(void *)&long long v35 = v46;
    BYTE8(v35) = BYTE8(v46);
    uint64_t v36 = v47;
    LOBYTE(v37) = BYTE8(v47);
    uint64_t v31 = swift_allocObject();
    swift_unknownObjectWeakInit();
    long long v32 = (void *)swift_allocObject();
    v32[2] = v24;
    v32[3] = v25;
    v32[4] = v31;
    v32[5] = v14;
    v32[6] = v15;
    swift_beginAccess();
    type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
    ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)();
    swift_endAccess();

    swift_release();
    swift_release();
    outlined destroy of SheetSizing((uint64_t)v38);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  }
  else
  {
    __break(1u);
  }
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFSo6CGSizeV_s5NeverOytTg5(void (*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5 = a5 & 1;
  if ((a5 & 1) == 0)
  {
    v7[0] = a3;
    v7[1] = a4;
    a1(&v8, v7);
  }
  return v5;
}

void type metadata accessor for (PresentationOptionsPreference, Bool)()
{
  if (!lazy cache variable for type metadata for (PresentationOptionsPreference, Bool))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (PresentationOptionsPreference, Bool));
    }
  }
}

uint64_t outlined assign with take of PresentationOptionsPreference?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for RemoteSheetContainerVCKey.Storage?(0, (unint64_t *)&lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void PresentationHostingController.updatePreferredContentSizeIfNeeded(presenter:sizing:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (objc_msgSend(v3, sel_modalPresentationStyle) != (id)2) {
    return;
  }
  id v6 = objc_msgSend(v3, sel_traitCollection);
  id v7 = objc_msgSend(v6, sel_horizontalSizeClass);

  if (v7 != (id)2) {
    return;
  }
  outlined init with copy of PresentationSizing?(a2, (uint64_t)&v39);
  if (!v40)
  {
    id v9 = &v3[direct field offset for PresentationHostingController.lastPresentationOptions];
    swift_beginAccess();
    if (*(void *)v9)
    {
      outlined init with copy of PresentationOptionsPreference((uint64_t)v9, (uint64_t)v31);
      if (static SemanticFeature.isEnabled.getter())
      {
        outlined init with copy of PresentationSizing?((uint64_t)&v35, (uint64_t)&v29);
        if (v30)
        {
          outlined init with take of OptionalBinaryInteger(&v29, (uint64_t)&v41);
        }
        else
        {
          *((void *)&v42 + 1) = &type metadata for AutomaticPresentationSizing;
          char v43 = &protocol witness table for AutomaticPresentationSizing;
          outlined destroy of PresentationSizing?((uint64_t)&v29);
        }
      }
      else
      {
        char v43 = 0;
        long long v41 = 0u;
        long long v42 = 0u;
      }
      outlined destroy of PresentationOptionsPreference((uint64_t)v31);
    }
    else
    {
      char v43 = 0;
      long long v41 = 0u;
      long long v42 = 0u;
    }
    outlined destroy of PresentationSizing?((uint64_t)&v39);
    if (*((void *)&v42 + 1)) {
      goto LABEL_5;
    }
LABEL_33:
    outlined destroy of PresentationSizing?((uint64_t)&v41);
    return;
  }
  outlined init with take of OptionalBinaryInteger(&v39, (uint64_t)&v41);
  if (!*((void *)&v42 + 1)) {
    goto LABEL_33;
  }
LABEL_5:
  outlined init with take of OptionalBinaryInteger(&v41, (uint64_t)v44);
  if (a1)
  {
    uint64_t v8 = a1;
  }
  else
  {
    id v10 = objc_msgSend(v3, sel_presentingViewController);
    if (!v10)
    {
LABEL_29:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
      return;
    }
    uint64_t v8 = v10;
  }
  id v11 = a1;
  if ((PresentationHostingController.shouldUsePresentationSizing.getter() & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);

    return;
  }
  id v12 = objc_msgSend(v3, sel_traitCollection);
  id v13 = objc_msgSend(v12, sel_userInterfaceIdiom);

  UIUserInterfaceIdiom.idiom.getter((uint64_t)v13, (uint64_t)&v41);
  uint64_t v14 = v41;
  if ((void)v41)
  {
    uint64_t v15 = *((void *)&v41 + 1);
    v31[0] = v41;
  }
  else
  {
    static _GraphInputs.defaultInterfaceIdiom.getter();
    uint64_t v14 = v31[0];
    uint64_t v15 = v31[1];
  }
  id v16 = v8;
  id v17 = objc_msgSend(v16, sel_presentingViewController);
  BOOL v18 = v16;
  if (v17)
  {
    uint64_t v19 = v16;
    do
    {
      BOOL v18 = v17;

      id v17 = objc_msgSend(v18, sel_presentingViewController);
      uint64_t v19 = v18;
    }
    while (v17);
  }
  id v20 = objc_msgSend(v18, sel_parentViewController);
  if (v20)
  {
    do
    {
      Swift::UInt v21 = v20;

      id v20 = objc_msgSend(v21, sel_parentViewController);
      BOOL v18 = v21;
    }
    while (v20);
  }
  else
  {
    Swift::UInt v21 = v18;
  }
  id v22 = objc_msgSend(v21, sel_view);

  if (v22)
  {
    uint64_t v23 = *(void *)&v3[direct field offset for PresentationHostingController.lastColumnCount];
    outlined init with copy of TableColumnList((uint64_t)v44, (uint64_t)v31);
    v31[5] = v22;
    v31[6] = v23;
    v31[7] = 0;
    v31[8] = 0;
    char v32 = 1;
    uint64_t v33 = 0;
    char v34 = 1;
    uint64_t v35 = 0;
    char v36 = 1;
    uint64_t v37 = v14;
    uint64_t v38 = v15;
    specialized UIHostingController.host.getter();
    specialized UIHostingController.host.getter();
    type metadata accessor for _UIHostingView();
    *((void *)&v41 + 1) = swift_getWitnessTable();
    swift_unknownObjectWeakInit();
    id v24 = v22;
    specialized SheetSizing.sheetSizeThatFits<A>(host:subview:)((uint64_t)&v41);
    double v26 = v25;
    double v28 = v27;
    outlined destroy of weak FallbackResponderProvider?((uint64_t)&v41);
    PresentationHostingController.preferredContentSize.setter(v26, v28);

    outlined destroy of SheetSizing((uint64_t)v31);
    goto LABEL_29;
  }
  __break(1u);
}

BOOL PresentationHostingController.shouldIgnoreDetentsConfiguration.getter()
{
  id v1 = objc_msgSend(v0, sel_traitCollection);
  id v2 = objc_msgSend(v1, sel_horizontalSizeClass);

  if (v2 != (id)2) {
    return 0;
  }
  id v3 = objc_msgSend(v0, sel_traitCollection);
  id v4 = objc_msgSend(v3, sel_verticalSizeClass);

  return v4 == (id)2;
}

Swift::Void __swiftcall PresentationHostingController.setBackgroundTransparency(preferenceValue:)(Swift::Bool_optional preferenceValue)
{
  int value = preferenceValue.value;
  specialized UIHostingController.host.getter();
  BOOL v3 = _UIHostingView.wantsTransparentBackground.getter();
  id v4 = (void *)specialized UIHostingController.host.getter();
  char v5 = *(unsigned char *)(v1 + direct field offset for PresentationHostingController.presentationWantsTransparentBackground);
  id v6 = v4;
  _UIHostingView.setWantsTransparentBackground(for:_:)(4, v5);

  if (value != 2)
  {
    id v7 = (id)specialized UIHostingController.host.getter();
    _UIHostingView.setWantsTransparentBackground(for:_:)(8, value & 1);
  }
  specialized UIHostingController.host.getter();
  if (v3 != _UIHostingView.wantsTransparentBackground.getter())
  {
    uint64_t v8 = (void *)specialized UIHostingController.host.getter();
    type metadata accessor for _UIHostingView();
    id v9 = v8;
    swift_getWitnessTable();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
}

void specialized closure #2 in ContainerBackgroundBridge.preferencesDidChange(_:)(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = Strong;
    id v4 = (void *)MEMORY[0x18C119DF0](Strong + 64);
    uint64_t v5 = *(void *)(v3 + 72);
    swift_release();
    if (v4)
    {
      uint64_t ObjectType = swift_getObjectType();
      unint64_t v7 = type metadata accessor for ContainerBackgroundHost();
      (*(void (**)(void *__return_ptr, unint64_t, unint64_t, uint64_t))(*(void *)(v5 + 8)
                                                                                                + 16))(v10, v7, v7, ObjectType);

      if (v10[0])
      {
        uint64_t v8 = v10[1];
        uint64_t v9 = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 8))(8, v1, v9, v8);
        swift_unknownObjectRelease();
      }
    }
  }
}

void _UIHostingView.setWantsTransparentBackground(for:_:)(int a1, char a2)
{
  uint64_t v3 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x88);
  int v4 = *(_DWORD *)((char *)v2 + v3);
  if ((v4 & a1) != 0) {
    int v5 = ~a1;
  }
  else {
    int v5 = -1;
  }
  int v6 = v5 & v4;
  if ((v4 & a1) == a1) {
    int v7 = 0;
  }
  else {
    int v7 = a1;
  }
  int v8 = v7 | v4;
  if ((a2 & 1) == 0) {
    int v8 = v6;
  }
  *(_DWORD *)((char *)v2 + v3) = v8;
  _UIHostingView.transparentBackgroundReasons.didset(v4);
}

void _UIHostingView.transparentBackgroundReasons.didset(int a1)
{
  if ((a1 == 0) == (*(_DWORD *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x88)) != 0)) {
    _UIHostingView.updateBackgroundColor()();
  }
}

unint64_t type metadata accessor for ContainerBackgroundHost()
{
  unint64_t result = lazy cache variable for type metadata for ContainerBackgroundHost;
  if (!lazy cache variable for type metadata for ContainerBackgroundHost)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ContainerBackgroundHost);
  }
  return result;
}

void PresentationHostingController.setWantsFullScreen(placement:sheetController:)(unsigned __int8 a1, id a2)
{
  int v2 = a1;
  id v3 = objc_msgSend(a2, sel__setWantsFullScreen_, a1 == 4);
  if (v2 == 4)
  {
    MEMORY[0x1F4188790](v3);
    type metadata accessor for RemoteSheetContainerVCKey.Storage?(0, (unint64_t *)&lazy cache variable for type metadata for Bool?, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB718]);
    static Update.ensure<A>(_:)();
    char v4 = v5;
  }
  else
  {
    char v4 = 2;
  }
  specialized PresentationHostingController.updateFullScreenInteractiveDismissIfNeeded(disabled:)(v4);
}

void SheetBridge.update(presentation:in:transaction:)(uint64_t a1, char *a2)
{
  uint64_t v4 = swift_retain();
  specialized UIHostingController.setRootView(_:transaction:)(v4);
  swift_release();
  uint64_t v5 = direct field offset for UIHostingController.host;
  int v6 = *(void **)&a2[direct field offset for UIHostingController.host];
  uint64_t v7 = *(void *)(a1 + 96);
  int v8 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v9 = *(void *)((char *)v6 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v6) + 0x68));
  uint64_t v10 = *(void *)(v9 + 152);
  *(void *)(v9 + 152) = *(void *)(a1 + 88);
  *(void *)(v9 + 160) = v7;
  swift_retain();
  id v11 = v6;
  swift_retain();
  outlined consume of EnvironmentValues?(v10);
  if (MEMORY[0x18C119DF0](v9 + 24))
  {
    swift_getObjectType();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    swift_unknownObjectRelease();
  }
  else
  {
  }
  if (*(unsigned char *)(*(void *)&a2[v5] + *(void *)((*v8 & **(void **)&a2[v5]) + 0xD8)) == 2)
  {
    swift_retain();
    swift_retain();
    EnvironmentValues.explicitPreferredColorScheme.getter();
    swift_release();
    swift_release();
    if (v17 != 2)
    {
      id v12 = *(void **)&a2[v5];
      uint64_t v13 = *(void *)((*v8 & *v12) + 0xD8);
      uint64_t v14 = *((unsigned __int8 *)v12 + v13);
      *((unsigned char *)v12 + v13) = v17;
      uint64_t v15 = a2;
      id v16 = v12;
      specialized _UIHostingView.didChangeColorScheme(from:)(v14);
    }
  }
  specialized PresentationHostingController.updateFullScreenInteractiveDismissIfNeeded(disabled:)(a2[direct field offset for PresentationHostingController.lastInteractiveDismissDisabled]);
}

void specialized PresentationHostingController.updateFullScreenInteractiveDismissIfNeeded(disabled:)(char a1)
{
  id v3 = objc_msgSend(v1, sel_presentationController);
  if (!v3)
  {
LABEL_4:
    id v6 = objc_msgSend(v1, sel_popoverPresentationController);
    if (!v6) {
      return;
    }
    uint64_t v7 = v6;
    id v8 = objc_msgSend(v6, sel_adaptiveSheetPresentationController);

    uint64_t v5 = v8;
    if (!v8) {
      return;
    }
    goto LABEL_6;
  }
  uint64_t v4 = v3;
  self;
  uint64_t v5 = (void *)swift_dynamicCastObjCClass();
  if (!v5)
  {

    goto LABEL_4;
  }
LABEL_6:
  id v9 = v5;
  if (((a1 & 1) == 0) != objc_msgSend(v5, sel__allowsInteractiveDismissWhenFullScreen)) {
    objc_msgSend(v9, sel__setAllowsInteractiveDismissWhenFullScreen_, (a1 & 1) == 0);
  }
}

id PresentationHostingController.prepareModalPresentationStyle(_:presentationOptions:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 8 || a1 == 5) {
    objc_msgSend(v2, sel_setModalPresentationCapturesStatusBarAppearance_, 1);
  }
  objc_msgSend(v2, sel_setModalPresentationStyle_, a1);
  id result = objc_msgSend(v2, sel_modalPresentationStyle);
  if (result == (id)7 || result == (id)2)
  {
    MEMORY[0x1F4188790](result);
    static Update.ensure<A>(_:)();
    return PresentationHostingController.configureSizingOptions(for:sheetController:)(a2, 0);
  }
  return result;
}

Swift::Void __swiftcall UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)(UIViewController *pushingFrom, Swift::Bool enablePreemption)
{
  id v3 = v2;
  uint64_t v6 = *MEMORY[0x1E4FBC8C8] & *v2;
  UIHostingController.transitionContent.getter(&v22);
  if (v25)
  {
    uint64_t v7 = v22;
    id v8 = [(UIViewController *)pushingFrom view];
    if (v8)
    {
      id v9 = v8;
      MEMORY[0x1F4188790](v8);
      v20[2] = v7;
      v20[3] = &v21;
      id v11 = _sSo6UIViewC7SwiftUIE20firstDescendantWhereyABSgSbABXEF05_sSo6a2C7B103UIE15firstDescendant6ofType9predicatexSgxm_SbxXEtlFSbABXEfU_AC34MatchedTransitionSourceMarkingViewC_Tg5xSbRi_zRi0_zlyAC0stuvW0CIsgnd_Tf1cn_nTf4ng_n(v10, _sSo6UIViewC7SwiftUIE28_findMatchedTransitionSource2id2inAC0efG11MarkingViewCSgx_AC9NamespaceV2IDVtSHRzlFSbAHXEfU_s11AnyHashableV_TG5TA_0, (uint64_t)v20);
      type metadata accessor for MatchedTransitionSourceMarkingView();
      id v12 = (void *)swift_dynamicCastClass();

      if (!v12) {
      id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1F88]), sel_init);
      }
      objc_msgSend(v13, sel_set_popPreemptsPushInSwiftUIEnabled_, enablePreemption);
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIViewControllerTransition);
      uint64_t v14 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v15 = swift_allocObject();
      swift_unknownObjectWeakInit();
      id v16 = (void *)swift_allocObject();
      v16[2] = *(void *)(v6 + 80);
      v16[3] = *(void *)(v6 + 88);
      v16[4] = v14;
      v16[5] = v15;
      v16[6] = v12;
      id v17 = v12;
      id v18 = v13;
      swift_retain();
      swift_retain();
      uint64_t v19 = (void *)static UIViewControllerTransition.zoom(options:sourceViewProvider:)();

      swift_release();
      swift_release();
      swift_release();
      objc_msgSend(v3, sel_setPreferredTransition_, v19);

      UIHostingController.configureBackgroundForZoom()();
      outlined destroy of AnyHashable((uint64_t)&v21);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    objc_msgSend(v2, sel_setPreferredTransition_, 0);
  }
}

id specialized UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)(void *a1, char a2)
{
  id v3 = v2;
  uint64_t v6 = *(void **)&v2[direct field offset for UIHostingController.host];
  type metadata accessor for _UIHostingView<AnyView>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  id v7 = v6;
  ViewRendererHost.preferenceValue<A>(_:)();

  if ((void)v25 == 1)
  {
    _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_0((uint64_t)&v23, (unint64_t *)&lazy cache variable for type metadata for _NavigationTransitionOutputs?, (uint64_t)&type metadata for _NavigationTransitionOutputs, MEMORY[0x1E4FBB718]);
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    return objc_msgSend(v2, sel_setPreferredTransition_, 0);
  }
  outlined init with copy of _NavigationTransitionOutputs.Content((uint64_t)&v23, (uint64_t)&v22);
  outlined destroy of _NavigationTransitionOutputs((uint64_t)&v23);
  outlined init with take of _NavigationTransitionOutputs.Content((uint64_t)&v22, (uint64_t)&v23);
  if (!(void)v25) {
    return objc_msgSend(v2, sel_setPreferredTransition_, 0);
  }
  uint64_t v8 = v23;
  id result = objc_msgSend(a1, sel_view, *((void *)&v23 + 1), v24, v25);
  if (result)
  {
    uint64_t v10 = result;
    MEMORY[0x1F4188790](result);
    v21[2] = v8;
    v21[3] = &v22;
    id v12 = _sSo6UIViewC7SwiftUIE20firstDescendantWhereyABSgSbABXEF05_sSo6a2C7B103UIE15firstDescendant6ofType9predicatexSgxm_SbxXEtlFSbABXEfU_AC34MatchedTransitionSourceMarkingViewC_Tg5xSbRi_zRi0_zlyAC0stuvW0CIsgnd_Tf1cn_nTf4ng_n(v11, partial apply for specialized closure #1 in UIView._findMatchedTransitionSource<A>(id:in:), (uint64_t)v21);
    type metadata accessor for MatchedTransitionSourceMarkingView();
    id v13 = (void *)swift_dynamicCastClass();

    if (!v13) {
    id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1F88]), sel_init);
    }
    objc_msgSend(v14, sel_set_popPreemptsPushInSwiftUIEnabled_, a2 & 1);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIViewControllerTransition);
    uint64_t v15 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v16 = swift_allocObject();
    swift_unknownObjectWeakInit();
    id v17 = (void *)swift_allocObject();
    v17[2] = v15;
    v17[3] = v16;
    v17[4] = v13;
    id v18 = v13;
    id v19 = v14;
    swift_retain();
    swift_retain();
    id v20 = (void *)static UIViewControllerTransition.zoom(options:sourceViewProvider:)();

    swift_release();
    swift_release();
    swift_release();
    objc_msgSend(v3, sel_setPreferredTransition_, v20);

    specialized UIHostingController.configureBackgroundForZoom()();
    return (id)outlined destroy of AnyHashable((uint64_t)&v22);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id _sSo6UIViewC7SwiftUIE20firstDescendantWhereyABSgSbABXEF05_sSo6a2C7B103UIE15firstDescendant6ofType9predicatexSgxm_SbxXEtlFSbABXEfU_AC34MatchedTransitionSourceMarkingViewC_Tg5xSbRi_zRi0_zlyAC0stuvW0CIsgnd_Tf1cn_nTf4ng_nTm(void *a1, uint64_t (*a2)(uint64_t *), uint64_t a3, void (*a4)(void), uint64_t (*a5)(id, uint64_t (*)(void), uint64_t))
{
  a4(0);
  uint64_t v9 = swift_dynamicCastClass();
  if (v9 && (v21 = v9, id v10 = a1, v11 = a2(&v21), v10, (v11 & 1) != 0))
  {
    id v12 = v10;
  }
  else
  {
    id v13 = objc_msgSend(a1, sel_subviews);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v14 >> 62) {
      goto LABEL_17;
    }
    uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v15)
    {
      uint64_t v16 = 4;
      while (1)
      {
        id v17 = (v14 & 0xC000000000000001) != 0
            ? (id)MEMORY[0x18C117680](v16 - 4, v14)
            : *(id *)(v14 + 8 * v16);
        id v18 = v17;
        uint64_t v19 = v16 - 3;
        if (__OFADD__(v16 - 4, 1)) {
          break;
        }
        id v10 = (id)a5(v17, (uint64_t (*)(void))a2, a3);

        if (v10)
        {
          swift_bridgeObjectRelease();
          return v10;
        }
        ++v16;
        if (v19 == v15) {
          goto LABEL_13;
        }
      }
      __break(1u);
LABEL_17:
      swift_bridgeObjectRetain();
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return 0;
  }
  return v10;
}

id _sSo6UIViewC7SwiftUIE20firstDescendantWhereyABSgSbABXEF05_sSo6a2C7B103UIE15firstDescendant6ofType9predicatexSgxm_SbxXEtlFSbABXEfU_AC34MatchedTransitionSourceMarkingViewC_Tg5xSbRi_zRi0_zlyAC0stuvW0CIsgnd_Tf1cn_nTf4ng_n(void *a1, uint64_t (*a2)(uint64_t *), uint64_t a3)
{
  return _sSo6UIViewC7SwiftUIE20firstDescendantWhereyABSgSbABXEF05_sSo6a2C7B103UIE15firstDescendant6ofType9predicatexSgxm_SbxXEtlFSbABXEfU_AC34MatchedTransitionSourceMarkingViewC_Tg5xSbRi_zRi0_zlyAC0stuvW0CIsgnd_Tf1cn_nTf4ng_nTm(a1, a2, a3, (void (*)(void))type metadata accessor for MatchedTransitionSourceMarkingView, (uint64_t (*)(id, uint64_t (*)(void), uint64_t))_sSo6UIViewC7SwiftUIE20firstDescendantWhereyABSgSbABXEF05_sSo6a2C7B103UIE15firstDescendant6ofType9predicatexSgxm_SbxXEtlFSbABXEfU_AC34MatchedTransitionSourceMarkingViewC_Tg5xSbRi_zRi0_zlyAC0stuvW0CIsgnd_Tf1cn_nTf4ng_n);
}

uint64_t protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance _JSONUnkeyedDecodingContainer()
{
  return specialized _JSONUnkeyedDecodingContainer.decode(_:)((uint64_t (*)(long long *))specialized __DictionaryDecoder.unbox(_:as:), MEMORY[0x1E4FBC358]);
}

{
  return specialized _JSONUnkeyedDecodingContainer.decode(_:)((uint64_t (*)(long long *))specialized __DictionaryDecoder.unbox(_:as:), MEMORY[0x1E4FBC450]);
}

{
  return specialized _JSONUnkeyedDecodingContainer.decode(_:)((uint64_t (*)(long long *))specialized __DictionaryDecoder.unbox(_:as:), MEMORY[0x1E4FBC0F8]);
}

{
  return specialized _JSONUnkeyedDecodingContainer.decode(_:)() & 1;
}

{
  return specialized _JSONUnkeyedDecodingContainer.decode(_:)();
}

{
  return specialized _JSONUnkeyedDecodingContainer.decode(_:)();
}

{
  return specialized _JSONUnkeyedDecodingContainer.decode(_:)();
}

{
  return specialized _JSONUnkeyedDecodingContainer.decode(_:)();
}

{
  return specialized _JSONUnkeyedDecodingContainer.decode(_:)((uint64_t (*)(long long *))specialized __DictionaryDecoder.unbox(_:as:), MEMORY[0x1E4FBC098]);
}

{
  return specialized _JSONUnkeyedDecodingContainer.decode(_:)();
}

{
  return specialized _JSONUnkeyedDecodingContainer.decode(_:)();
}

{
  return UnkeyedDecodingContainer.decode(_:)();
}

{
  return specialized _JSONUnkeyedDecodingContainer.decode(_:)();
}

{
  return specialized _JSONUnkeyedDecodingContainer.decode(_:)();
}

{
  return specialized _JSONUnkeyedDecodingContainer.decode(_:)();
}

{
  return UnkeyedDecodingContainer.decode(_:)();
}

uint64_t specialized _JSONUnkeyedDecodingContainer.decode(_:)(uint64_t (*a1)(long long *), uint64_t a2)
{
  uint64_t v5 = v2;
  uint64_t v6 = v2[1];
  uint64_t v7 = v2[3];
  if (v7 >= *(void *)(v6 + 16))
  {
    uint64_t v20 = type metadata accessor for DecodingError();
    swift_allocError();
    long long v22 = v21;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    void *v22 = a2;
    uint64_t v23 = *v2;
    swift_beginAccess();
    uint64_t v24 = *(void *)(v23 + 136);
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18834BB80;
    uint64_t v26 = v5[3];
    v45[1] = 0xE600000000000000;
    v41[0] = v26;
    swift_bridgeObjectRetain();
    v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    *(void *)(inited + 56) = &unk_1ED468578;
    *(void *)(inited + 64) = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    uint64_t v28 = swift_allocObject();
    *(void *)(inited + 32) = v28;
    *(void *)(v28 + 16) = 0x207865646E49;
    *(void *)(v28 + 24) = 0xE600000000000000;
    *(void *)(v28 + 32) = v26;
    *(unsigned char *)(v28 + 40) = 0;
    v45[0] = v24;
    id v18 = v45;
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v20 - 8) + 104))(v22, *MEMORY[0x1E4FBBA80], v20);
    swift_willThrow();
    return (uint64_t)v18;
  }
  uint64_t v8 = (void *)*v2;
  *(void *)&long long v42 = 0x207865646E49;
  *((void *)&v42 + 1) = 0xE600000000000000;
  v45[0] = v7;
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  id v10 = v8 + 17;
  swift_beginAccess();
  char v11 = (void *)v8[17];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8[17] = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    void *v10 = v11;
  }
  unint64_t v14 = v11[2];
  unint64_t v13 = v11[3];
  if (v14 >= v13 >> 1)
  {
    char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v11);
    void *v10 = v11;
  }
  char v43 = &unk_1ED468578;
  unint64_t v15 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  unint64_t v44 = v15;
  uint64_t v16 = swift_allocObject();
  *(void *)&long long v42 = v16;
  *(void *)(v16 + 16) = 0x207865646E49;
  *(void *)(v16 + 24) = 0xE600000000000000;
  *(void *)(v16 + 32) = v7;
  *(unsigned char *)(v16 + 40) = 0;
  v11[2] = v14 + 1;
  uint64_t result = outlined init with take of OptionalBinaryInteger(&v42, (uint64_t)&v11[5 * v14 + 4]);
  if (v7 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((unint64_t)v7 >= *(void *)(v6 + 16))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  outlined init with copy of Any(v6 + 32 * v7 + 32, (uint64_t)&v42);
  id v18 = v8;
  uint64_t v19 = a1(&v42);
  if (v3)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v42);
LABEL_15:
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v5);
    return (uint64_t)v18;
  }
  id v18 = (void *)v19;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v42);
  if (((unsigned __int16)v18 & 0x100) != 0)
  {
    uint64_t v40 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v33 = v32;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v33 = a2;
    swift_beginAccess();
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    uint64_t v34 = swift_initStackObject();
    *(_OWORD *)(v34 + 16) = xmmword_18834BB80;
    uint64_t v46 = v5[3];
    uint64_t v35 = v46;
    swift_bridgeObjectRetain();
    v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    *(void *)(v34 + 56) = &unk_1ED468578;
    *(void *)(v34 + 64) = v15;
    uint64_t v37 = swift_allocObject();
    *(void *)(v34 + 32) = v37;
    *(void *)(v37 + 16) = 0x207865646E49;
    *(void *)(v37 + 24) = 0xE600000000000000;
    *(void *)(v37 + 32) = v35;
    *(unsigned char *)(v37 + 40) = 0;
    specialized Array.append<A>(contentsOf:)(v34);
    v41[0] = 0;
    v41[1] = 0xE000000000000000;
    id v18 = v41;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void))(*(void *)(v40 - 8) + 104))(v33, *MEMORY[0x1E4FBBA80]);
    swift_willThrow();
    goto LABEL_15;
  }
  uint64_t v29 = v5[3];
  BOOL v30 = __OFADD__(v29, 1);
  uint64_t v31 = v29 + 1;
  if (!v30)
  {
    v5[3] = v31;
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v5);
    return (uint64_t)v18;
  }
LABEL_19:
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  void *v10;
  void *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v40;
  void v41[2];
  long long v42;
  void *v43;
  unint64_t v44;
  void v45[3];
  uint64_t v46;

  uint64_t v5 = v2;
  uint64_t v6 = v2[1];
  uint64_t v7 = v2[3];
  if (v7 >= *(void *)(v6 + 16))
  {
    uint64_t v20 = type metadata accessor for DecodingError();
    swift_allocError();
    long long v22 = v21;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    void *v22 = a2;
    uint64_t v23 = *v2;
    swift_beginAccess();
    uint64_t v24 = *(void *)(v23 + 136);
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18834BB80;
    uint64_t v26 = v5[3];
    v45[1] = 0xE600000000000000;
    v41[0] = v26;
    swift_bridgeObjectRetain();
    v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    *(void *)(inited + 56) = &unk_1ED468578;
    *(void *)(inited + 64) = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    uint64_t v28 = swift_allocObject();
    *(void *)(inited + 32) = v28;
    *(void *)(v28 + 16) = 0x207865646E49;
    *(void *)(v28 + 24) = 0xE600000000000000;
    *(void *)(v28 + 32) = v26;
    *(unsigned char *)(v28 + 40) = 0;
    v45[0] = v24;
    id v18 = v45;
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v20 - 8) + 104))(v22, *MEMORY[0x1E4FBBA80], v20);
    swift_willThrow();
    return (uint64_t)v18;
  }
  uint64_t v8 = (void *)*v2;
  *(void *)&long long v42 = 0x207865646E49;
  *((void *)&v42 + 1) = 0xE600000000000000;
  v45[0] = v7;
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  id v10 = v8 + 17;
  swift_beginAccess();
  char v11 = (void *)v8[17];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8[17] = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    void *v10 = v11;
  }
  unint64_t v14 = v11[2];
  unint64_t v13 = v11[3];
  if (v14 >= v13 >> 1)
  {
    char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v11);
    void *v10 = v11;
  }
  char v43 = &unk_1ED468578;
  unint64_t v15 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  unint64_t v44 = v15;
  uint64_t v16 = swift_allocObject();
  *(void *)&long long v42 = v16;
  *(void *)(v16 + 16) = 0x207865646E49;
  *(void *)(v16 + 24) = 0xE600000000000000;
  *(void *)(v16 + 32) = v7;
  *(unsigned char *)(v16 + 40) = 0;
  v11[2] = v14 + 1;
  uint64_t result = outlined init with take of OptionalBinaryInteger(&v42, (uint64_t)&v11[5 * v14 + 4]);
  if (v7 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((unint64_t)v7 >= *(void *)(v6 + 16))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  outlined init with copy of Any(v6 + 32 * v7 + 32, (uint64_t)&v42);
  id v18 = v8;
  uint64_t v19 = a1(&v42);
  if (v3)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v42);
LABEL_15:
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v5);
    return (uint64_t)v18;
  }
  id v18 = (void *)v19;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v42);
  if ((v18 & 0x10000) != 0)
  {
    uint64_t v40 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v33 = v32;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v33 = a2;
    swift_beginAccess();
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    uint64_t v34 = swift_initStackObject();
    *(_OWORD *)(v34 + 16) = xmmword_18834BB80;
    uint64_t v46 = v5[3];
    uint64_t v35 = v46;
    swift_bridgeObjectRetain();
    v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    *(void *)(v34 + 56) = &unk_1ED468578;
    *(void *)(v34 + 64) = v15;
    uint64_t v37 = swift_allocObject();
    *(void *)(v34 + 32) = v37;
    *(void *)(v37 + 16) = 0x207865646E49;
    *(void *)(v37 + 24) = 0xE600000000000000;
    *(void *)(v37 + 32) = v35;
    *(unsigned char *)(v37 + 40) = 0;
    specialized Array.append<A>(contentsOf:)(v34);
    v41[0] = 0;
    v41[1] = 0xE000000000000000;
    id v18 = v41;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void))(*(void *)(v40 - 8) + 104))(v33, *MEMORY[0x1E4FBBA80]);
    swift_willThrow();
    goto LABEL_15;
  }
  uint64_t v29 = v5[3];
  BOOL v30 = __OFADD__(v29, 1);
  uint64_t v31 = v29 + 1;
  if (!v30)
  {
    v5[3] = v31;
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v5);
    return (uint64_t)v18;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t UIHostingController.transitionContent.getter@<X0>(_OWORD *a1@<X8>)
{
  int v2 = (void *)specialized UIHostingController.host.getter();
  type metadata accessor for _UIHostingView();
  id v3 = v2;
  swift_getWitnessTable();
  ViewRendererHost.preferenceValue<A>(_:)();

  if (v5[4] == 1)
  {
    uint64_t result = outlined destroy of _NavigationTransitionOutputs?((uint64_t)v5);
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  else
  {
    outlined init with copy of _NavigationTransitionOutputs.Content((uint64_t)v5, (uint64_t)v6);
    outlined destroy of _NavigationTransitionOutputs((uint64_t)v5);
    return outlined init with take of _NavigationTransitionOutputs.Content((uint64_t)v6, (uint64_t)a1);
  }
  return result;
}

uint64_t outlined destroy of _NavigationTransitionOutputs(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of _NavigationTransitionOutputs.Content(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for _NavigationTransitionStyleOutputs.Content(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 32);
  if (v3 < 0xFFFFFFFF)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    uint64_t v4 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v3;
    *(void *)(a1 + 40) = v4;
    (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a1 + 8, a2 + 8);
  }
  return a1;
}

uint64_t outlined init with take of _NavigationTransitionOutputs.Content(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t PresentationState.presentPreemptingDismissal(_:presentedVC:presentationSeed:)(uint64_t a1, void *a2, int *a3)
{
  int v6 = *a3;
  outlined init with copy of PresentationState.Base(v3, (uint64_t)&v10);
  switch(v15)
  {
    case 2:
    case 3:
    case 5:

      uint64_t v7 = (id *)&v11;
      goto LABEL_6;
    case 4:
    case 6:
      goto LABEL_5;
    case 7:

      goto LABEL_7;
    case 8:

      outlined destroy of SheetPreference((uint64_t)&v14);
      goto LABEL_5;
    case 9:
      outlined destroy of PresentationState.Base((uint64_t)&v10);
      goto LABEL_7;
    case 10:
      goto LABEL_7;
    default:

LABEL_5:
      uint64_t v7 = &v10;
LABEL_6:
      outlined destroy of SheetPreference((uint64_t)v7);
LABEL_7:
      outlined init with copy of SheetPreference(a1, (uint64_t)&v10);
      id v12 = a2;
      int v13 = v6;
      char v15 = 0;
      id v8 = a2;
      PresentationState.base.willset((uint64_t)&v10);
      return outlined assign with take of PresentationState.Base((uint64_t)&v10, v3);
  }
}

uint64_t outlined assign with take of PresentationState.Base(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t assignWithTake for PresentationState.Base(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 233);
    if (v4 >= 0xA) {
      unsigned int v4 = *(_DWORD *)a1 + 10;
    }
    switch(v4)
    {
      case 0u:
      case 1u:
        swift_release();
        if (*(void *)(a1 + 8)) {
          swift_release();
        }
        if (*(void *)(a1 + 56)) {
          __swift_destroy_boxed_opaque_existential_1(a1 + 32);
        }
        swift_release();
        swift_release();
        swift_release();

        break;
      case 2u:
      case 3u:
      case 5u:

        swift_release();
        if (*(void *)(a1 + 16)) {
          swift_release();
        }
        if (*(void *)(a1 + 64)) {
          __swift_destroy_boxed_opaque_existential_1(a1 + 40);
        }
        goto LABEL_29;
      case 4u:
      case 6u:
      case 9u:
        swift_release();
        if (*(void *)(a1 + 8)) {
          swift_release();
        }
        if (*(void *)(a1 + 56)) {
          __swift_destroy_boxed_opaque_existential_1(a1 + 32);
        }
        goto LABEL_29;
      case 7u:

        break;
      case 8u:
        swift_release();
        if (*(void *)(a1 + 8)) {
          swift_release();
        }
        if (*(void *)(a1 + 56)) {
          __swift_destroy_boxed_opaque_existential_1(a1 + 32);
        }
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        if (*(void *)(a1 + 136)) {
          swift_release();
        }
        if (*(void *)(a1 + 184)) {
          __swift_destroy_boxed_opaque_existential_1(a1 + 160);
        }
LABEL_29:
        swift_release();
        swift_release();
        swift_release();
        break;
      default:
        break;
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 233);
    if (v5 >= 0xA) {
      unsigned int v5 = *(_DWORD *)a2 + 10;
    }
    switch(v5)
    {
      case 0u:
        long long v6 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v6;
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
        long long v7 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v7;
        long long v8 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v8;
        *(unsigned char *)(a1 + 233) = 0;
        return a1;
      case 1u:
        long long v16 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v16;
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
        long long v17 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v17;
        long long v18 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v18;
        char v19 = 1;
        goto LABEL_44;
      case 2u:
        long long v20 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v20;
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
        long long v21 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v21;
        long long v22 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v22;
        char v19 = 2;
        goto LABEL_44;
      case 3u:
        long long v23 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v23;
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
        long long v24 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v24;
        long long v25 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v25;
        char v19 = 3;
        goto LABEL_44;
      case 4u:
        long long v26 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v26;
        *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
        long long v27 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v27;
        long long v28 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v28;
        char v19 = 4;
        goto LABEL_44;
      case 5u:
        long long v29 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v29;
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
        long long v30 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v30;
        long long v31 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v31;
        char v19 = 5;
        goto LABEL_44;
      case 6u:
        long long v32 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v32;
        *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
        long long v33 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v33;
        long long v34 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v34;
        char v19 = 6;
        goto LABEL_44;
      case 7u:
        *(void *)a1 = *(void *)a2;
        char v19 = 7;
        goto LABEL_44;
      case 8u:
        long long v35 = *(_OWORD *)(a2 + 208);
        *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
        *(_OWORD *)(a1 + 208) = v35;
        *(_OWORD *)(a1 + 217) = *(_OWORD *)(a2 + 217);
        long long v36 = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(a1 + 144) = v36;
        long long v37 = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 176) = v37;
        long long v38 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v38;
        long long v39 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 112) = v39;
        long long v40 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v40;
        long long v41 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v41;
        char v19 = 8;
        goto LABEL_44;
      case 9u:
        long long v42 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v42;
        *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
        long long v43 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v43;
        long long v44 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v44;
        char v19 = 9;
LABEL_44:
        *(unsigned char *)(a1 + 233) = v19;
        break;
      default:
        long long v9 = *(_OWORD *)(a2 + 208);
        *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
        *(_OWORD *)(a1 + 208) = v9;
        *(_OWORD *)(a1 + 218) = *(_OWORD *)(a2 + 218);
        long long v10 = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(a1 + 144) = v10;
        long long v11 = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 176) = v11;
        long long v12 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v12;
        long long v13 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 112) = v13;
        long long v14 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v14;
        long long v15 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v15;
        break;
    }
  }
  return a1;
}

uint64_t specialized _UIHostingView.didChangeColorScheme(from:)(uint64_t result)
{
  int v2 = (void *)MEMORY[0x1E4FBC8C8];
  int v3 = *((unsigned __int8 *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0xD8));
  if (result == 2)
  {
    if (v3 == 2) {
      return result;
    }
  }
  else if (v3 != 2 && ((v3 ^ result) & 1) == 0)
  {
    return result;
  }
  unsigned int v5 = (void *)MEMORY[0x18C119DF0]((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0xC0));
  if (v5)
  {
    long long v6 = v5;
    uint64_t v7 = 1;
    if (v3) {
      uint64_t v7 = 2;
    }
    if (v3 == 2) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = v7;
    }
    objc_msgSend(v5, sel_setOverrideUserInterfaceStyle_, v8);
    uint64_t v9 = *(void *)((char *)v1 + *(void *)((*v2 & *v1) + 0x130));
    swift_retain();
    unsigned __int8 v10 = objc_msgSend(v6, sel_isBeingPresented);
    uint64_t result = MEMORY[0x18C119DF0](v9 + 40);
    if (!result)
    {
      __break(1u);
      return result;
    }
    long long v11 = (void *)result;
    uint64_t v12 = swift_allocObject();
    long long v13 = (void *)MEMORY[0x18C119DF0]((char *)v11 + *(void *)((*v2 & *v11) + 0xC0));

    swift_unknownObjectWeakInit();
    uint64_t v14 = swift_allocObject();
    *(unsigned char *)(v14 + 16) = v10;
    *(void *)(v14 + 24) = partial apply for specialized closure #1 in UIKitStatusBarBridge.updateStatusBar(isAnimated:shouldDefer:);
    *(void *)(v14 + 32) = v12;
    swift_retain_n();
    onNextMainRunLoop(do:)();

    swift_release();
    swift_release();
    swift_release_n();
  }
  _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesV02__E14_searchStorage33_01524358DA8FEB8BCC0A94C08F00494ALLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
}

unint64_t lazy protocol witness table accessor for type Group<GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>>> and conformance <A> Group<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Group<GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>>> and conformance <A> Group<A>;
  if (!lazy protocol witness table cache variable for type Group<GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>>> and conformance <A> Group<A>)
  {
    type metadata accessor for TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>(255, &lazy cache variable for type metadata for Group<GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>>>, (uint64_t (*)(uint64_t))type metadata accessor for GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>>, MEMORY[0x1E4F414E8]);
    lazy protocol witness table accessor for type GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>> and conformance GroupElementsOfContent<A, B>(&lazy protocol witness table cache variable for type GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>> and conformance GroupElementsOfContent<A, B>, (void (*)(uint64_t))type metadata accessor for GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Group<GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>>> and conformance <A> Group<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>(255, &lazy cache variable for type metadata for ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, &lazy cache variable for type metadata for HStack<SubviewsCollectionSlice>, MEMORY[0x1E4F40CC8], MEMORY[0x1E4F40CC0]);
    lazy protocol witness table accessor for type HStack<SubviewsCollectionSlice> and conformance HStack<A>();
    lazy protocol witness table accessor for type GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>> and conformance GroupElementsOfContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Color?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>>()
{
  if (!lazy cache variable for type metadata for GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>>)
  {
    unint64_t v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F414E8];
    type metadata accessor for TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>(255, &lazy cache variable for type metadata for Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>, MEMORY[0x1E4F414E8]);
    type metadata accessor for TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>(255, &lazy cache variable for type metadata for Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>, (uint64_t (*)(uint64_t))type metadata accessor for GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>, v0);
    lazy protocol witness table accessor for type Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>> and conformance <A> Group<A>();
    lazy protocol witness table accessor for type Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>> and conformance <A> Group<A>();
    unint64_t v1 = type metadata accessor for GroupElementsOfContent();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>>);
    }
  }
}

uint64_t protocol witness for View.body.getter in conformance LeadingTrailingLabeledContentStyle_Phone._Body()
{
  long long v1 = *(_OWORD *)(v0 + 80);
  v10[4] = *(_OWORD *)(v0 + 64);
  v10[5] = v1;
  v10[6] = *(_OWORD *)(v0 + 96);
  char v11 = *(unsigned char *)(v0 + 112);
  long long v2 = *(_OWORD *)(v0 + 16);
  v10[0] = *(_OWORD *)v0;
  v10[1] = v2;
  long long v3 = *(_OWORD *)(v0 + 48);
  void v10[2] = *(_OWORD *)(v0 + 32);
  v10[3] = v3;
  uint64_t v4 = swift_allocObject();
  long long v5 = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v4 + 80) = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v4 + 96) = v5;
  *(_OWORD *)(v4 + 112) = *(_OWORD *)(v0 + 96);
  *(unsigned char *)(v4 + 128) = *(unsigned char *)(v0 + 112);
  long long v6 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)v0;
  *(_OWORD *)(v4 + 32) = v6;
  long long v7 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v4 + 64) = v7;
  outlined retain of LeadingTrailingLabeledContentStyle_Phone._Body((uint64_t)v10);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F414E8];
  type metadata accessor for TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>(0, &lazy cache variable for type metadata for Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>, MEMORY[0x1E4F414E8]);
  type metadata accessor for TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>(0, &lazy cache variable for type metadata for Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>, (uint64_t (*)(uint64_t))type metadata accessor for GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>, v8);
  lazy protocol witness table accessor for type Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>> and conformance <A> Group<A>();
  lazy protocol witness table accessor for type Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>> and conformance <A> Group<A>();
  return Group.init<A, B>(subviews:transform:)();
}

unint64_t lazy protocol witness table accessor for type Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>> and conformance <A> Group<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>> and conformance <A> Group<A>;
  if (!lazy protocol witness table cache variable for type Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>> and conformance <A> Group<A>)
  {
    type metadata accessor for TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>(255, &lazy cache variable for type metadata for Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>, MEMORY[0x1E4F414E8]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>> and conformance <A> Group<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>> and conformance <A> Group<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>> and conformance <A> Group<A>;
  if (!lazy protocol witness table cache variable for type Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>> and conformance <A> Group<A>)
  {
    type metadata accessor for TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>(255, &lazy cache variable for type metadata for Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>, (uint64_t (*)(uint64_t))type metadata accessor for GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>, MEMORY[0x1E4F414E8]);
    lazy protocol witness table accessor for type GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>> and conformance GroupElementsOfContent<A, B>(&lazy protocol witness table cache variable for type GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>> and conformance GroupElementsOfContent<A, B>, (void (*)(uint64_t))type metadata accessor for GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>> and conformance <A> Group<A>);
  }
  return result;
}

void *closure #3 in closure #2 in LeadingTrailingLabeledContentStyle_Phone._Body.body.getter@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v14 = static HorizontalAlignment.leading.getter();
  uint64_t v39 = static VerticalAlignment.firstTextLineCenter.getter();
  uint64_t v40 = v14;
  uint64_t v41 = a1;
  long long v42 = a5;
  if (a2)
  {
    uint64_t v15 = *(void *)(a3 + 88);
    char v16 = *(unsigned char *)(a3 + 96);
    outlined retain of LeadingTrailingLabeledContentStyle_Phone._Body(a3);
    outlined copy of Environment<Bool>.Content(v15, v16);
    char v17 = specialized Environment.wrappedValue.getter(v15, v16);
    outlined consume of Environment<Bool>.Content(v15, v16);
    outlined release of LeadingTrailingLabeledContentStyle_Phone._Body(a3);
    if ((v17 & 1) == 0)
    {
      long long v18 = *(_OWORD *)(a3 + 24);
      __dst[0] = *(_OWORD *)(a3 + 8);
      __dst[1] = v18;
      *(_OWORD *)((char *)&__dst[1] + 9) = *(_OWORD *)(a3 + 33);
      outlined retain of LeadingTrailingLabeledContentStyle_Phone._Body(a3);
      _s7SwiftUI21ViewInputFlagModifierVyAA41ListLabeledContentPrefersHorizontalLayoutVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ScaledMetric<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x1E4FBC958], MEMORY[0x1E4F3F620]);
      ScaledMetric.wrappedValue.getter();
      uint64_t v19 = *(void *)(a3 + 56);
      uint64_t v20 = *(unsigned __int8 *)(a3 + 64);
      int v21 = *(unsigned __int8 *)(a3 + 65);
      outlined retain of LeadingTrailingLabeledContentStyle_Phone._Body(a3);
      outlined copy of Environment<CGFloat?>.Content(v19, v20, v21);
      specialized Environment.wrappedValue.getter(v19, v20 | (v21 << 8));
      outlined consume of Environment<CGFloat?>.Content(v19, v20, v21);
      outlined release of LeadingTrailingLabeledContentStyle_Phone._Body(a3);
      outlined release of LeadingTrailingLabeledContentStyle_Phone._Body(a3);
    }
  }
  uint64_t v22 = *(void *)(a3 + 88);
  char v23 = *(unsigned char *)(a3 + 96);
  outlined retain of LeadingTrailingLabeledContentStyle_Phone._Body(a3);
  outlined copy of Environment<Bool>.Content(v22, v23);
  char v24 = specialized Environment.wrappedValue.getter(v22, v23);
  outlined consume of Environment<Bool>.Content(v22, v23);
  if (v24)
  {
    char v25 = 1;
    if ((*(unsigned char *)(a3 + 1) & 1) == 0)
    {
      __dst[0] = (unint64_t)static HorizontalAlignment.leading.getter();
      LOBYTE(__dst[1]) = 1;
      lazy protocol witness table accessor for type VStackLayout and conformance VStackLayout();
      goto LABEL_9;
    }
  }
  else
  {
    char v25 = *(unsigned char *)(a3 + 1);
  }
  __dst[0] = xmmword_1883ADDB0;
  LOBYTE(__dst[1]) = v25;
  lazy protocol witness table accessor for type LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout and conformance LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout();
LABEL_9:
  uint64_t v26 = AnyLayout.init<A>(_:)();
  outlined release of LeadingTrailingLabeledContentStyle_Phone._Body(a3);
  *(void *)&__dst[0] = v26;
  swift_retain();
  closure #1 in closure #3 in closure #2 in LeadingTrailingLabeledContentStyle_Phone._Body.body.getter(a4 & 1, a3, v42, v41, (uint64_t)__dst + 8);
  swift_release();
  EdgeInsets.init(_all:)();
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  outlined init with copy of _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>((uint64_t)__dst, (uint64_t)__src, (uint64_t (*)(void))type metadata accessor for _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>);
  LOBYTE(__src[45]) = 2;
  __src[46] = v28;
  __src[47] = v30;
  __src[48] = v32;
  __src[49] = v34;
  LOBYTE(__src[50]) = 0;
  outlined destroy of _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>((uint64_t)__dst, (uint64_t (*)(void))type metadata accessor for _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>);
  if (a4)
  {
    uint64_t v36 = v39;
    uint64_t v35 = v40;
  }
  else
  {
    uint64_t v35 = static Alignment.leading.getter();
    uint64_t v36 = v37;
  }
  closure #2 in closure #3 in closure #2 in LeadingTrailingLabeledContentStyle_Phone._Body.body.getter(a2 & 1, a6, a3, (uint64_t)&__dst[25] + 8);
  *((void *)&__dst[36] + 1) = v35;
  *(void *)&__dst[37] = v36;
  memcpy(__dst, __src, 0x191uLL);
  return memcpy(a7, __dst, 0x258uLL);
}

uint64_t outlined retain of LeadingTrailingLabeledContentStyle_Phone._Body(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  char v3 = *(unsigned char *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 56);
  char v5 = *(unsigned char *)(a1 + 65);
  uint64_t v6 = *(void *)(a1 + 72);
  char v7 = *(unsigned char *)(a1 + 81);
  uint64_t v12 = *(void *)(a1 + 88);
  char v8 = *(unsigned char *)(a1 + 96);
  uint64_t v14 = *(void *)(a1 + 104);
  char v13 = *(unsigned char *)(a1 + 112);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 80);
  outlined copy of Environment<Bool>.Content(*(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  outlined copy of Environment<Bool>.Content(v2, v3);
  outlined copy of Environment<CGFloat?>.Content(v4, v9, v5);
  outlined copy of Environment<ListItemTint?>.Content(v6, v10, v7);
  outlined copy of Environment<Bool>.Content(v12, v8);
  outlined copy of Environment<Bool>.Content(v14, v13);
  return a1;
}

uint64_t outlined release of LeadingTrailingLabeledContentStyle_Phone._Body(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  char v3 = *(unsigned char *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 56);
  char v5 = *(unsigned char *)(a1 + 65);
  uint64_t v6 = *(void *)(a1 + 72);
  char v7 = *(unsigned char *)(a1 + 81);
  uint64_t v12 = *(void *)(a1 + 88);
  char v8 = *(unsigned char *)(a1 + 96);
  uint64_t v14 = *(void *)(a1 + 104);
  char v13 = *(unsigned char *)(a1 + 112);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 80);
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  outlined consume of Environment<Bool>.Content(v2, v3);
  outlined consume of Environment<CGFloat?>.Content(v4, v9, v5);
  outlined consume of Environment<ListItemTint?>.Content(v6, v10, v7);
  outlined consume of Environment<Bool>.Content(v12, v8);
  outlined consume of Environment<Bool>.Content(v14, v13);
  return a1;
}

__n128 closure #2 in closure #3 in closure #2 in LeadingTrailingLabeledContentStyle_Phone._Body.body.getter@<Q0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a1)
  {
    long long v29 = (unint64_t)static VerticalAlignment.center.getter();
    LOBYTE(v30[0]) = 1;
    outlined init with copy of SubviewsCollectionSlice(a2, (uint64_t)v30 + 8);
    uint64_t v7 = *(void *)(a3 + 72);
    uint64_t v8 = *(unsigned __int8 *)(a3 + 80);
    int v9 = *(unsigned __int8 *)(a3 + 81);
    outlined retain of LeadingTrailingLabeledContentStyle_Phone._Body(a3);
    outlined copy of Environment<ListItemTint?>.Content(v7, v8, v9);
    specialized Environment.wrappedValue.getter(v7, v8 | (v9 << 8), (uint64_t)v27);
    outlined consume of Environment<ListItemTint?>.Content(v7, v8, v9);
    uint64_t v10 = v27[0];
    if (v27[0] == 1)
    {
      static Color.accentColor.getter();
    }
    else
    {
      static Color.secondary.getter();
      if (v10) {
        swift_release();
      }
    }
    outlined release of LeadingTrailingLabeledContentStyle_Phone._Body(a3);
    uint64_t v12 = MEMORY[0x1E4F40CC8];
    uint64_t v13 = MEMORY[0x1E4F40CC0];
    uint64_t v14 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x1E4F415B8];
    type metadata accessor for LabelGroup<LabeledContentStyleConfiguration.Label>(0, &lazy cache variable for type metadata for HStack<SubviewsCollectionSlice>, MEMORY[0x1E4F40CC8], MEMORY[0x1E4F40CC0], MEMORY[0x1E4F415B8]);
    lazy protocol witness table accessor for type HStack<SubviewsCollectionSlice> and conformance HStack<A>();
    View.defaultForegroundColor(_:)();
    swift_release();
    outlined destroy of VStack<SubviewsCollection>((uint64_t)&v29, &lazy cache variable for type metadata for HStack<SubviewsCollectionSlice>, v12, v13, v14);
    long long v15 = *(_OWORD *)(a3 + 80);
    long long v32 = *(_OWORD *)(a3 + 64);
    long long v33 = v15;
    long long v34 = *(_OWORD *)(a3 + 96);
    LOBYTE(v35) = *(unsigned char *)(a3 + 112);
    long long v16 = *(_OWORD *)(a3 + 16);
    long long v29 = *(_OWORD *)a3;
    v30[0] = v16;
    __n128 v17 = *(__n128 *)(a3 + 48);
    v30[1] = *(_OWORD *)(a3 + 32);
    __n128 v31 = v17;
    LeadingTrailingLabeledContentStyle_Phone._Body.imageScale.getter(v25);
    char v18 = v25[0];
    uint64_t KeyPath = swift_getKeyPath();
    outlined init with copy of ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>((uint64_t)v26, (uint64_t)v27);
    v27[14] = KeyPath;
    char v28 = v18;
    outlined destroy of ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>((uint64_t)v26);
    long long v20 = *(_OWORD *)(a3 + 24);
    long long v29 = *(_OWORD *)(a3 + 8);
    v30[0] = v20;
    *(_OWORD *)((char *)v30 + 9) = *(_OWORD *)(a3 + 33);
    _s7SwiftUI21ViewInputFlagModifierVyAA41ListLabeledContentPrefersHorizontalLayoutVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ScaledMetric<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x1E4FBC958], MEMORY[0x1E4F3F620]);
    ScaledMetric.wrappedValue.getter();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    outlined init with copy of _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>((uint64_t)v27, (uint64_t)&v29, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>);
    long long v36 = v26[0];
    long long v37 = v26[1];
    long long v38 = v26[2];
    outlined destroy of _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>);
    long long v21 = v37;
    *(_OWORD *)(a4 + 128) = v36;
    *(_OWORD *)(a4 + 144) = v21;
    *(_OWORD *)(a4 + 160) = v38;
    long long v22 = v33;
    *(_OWORD *)(a4 + 64) = v32;
    *(_OWORD *)(a4 + 80) = v22;
    long long v23 = v35;
    *(_OWORD *)(a4 + 96) = v34;
    *(_OWORD *)(a4 + 112) = v23;
    long long v24 = v30[0];
    *(_OWORD *)a4 = v29;
    *(_OWORD *)(a4 + 16) = v24;
    __n128 result = v31;
    *(_OWORD *)(a4 + 32) = v30[1];
    *(__n128 *)(a4 + 48) = result;
  }
  else
  {
    result.n128_u64[0] = 0;
    *(_OWORD *)(a4 + 144) = 0u;
    *(_OWORD *)(a4 + 160) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_OWORD *)(a4 + 128) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)a4 = 0u;
  }
  return result;
}

void type metadata accessor for ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for ViewInputFlagModifier();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void _s7SwiftUI21ViewInputFlagModifierVyAA41ListLabeledContentPrefersHorizontalLayoutVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type HStack<SubviewsCollectionSlice> and conformance HStack<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type HStack<SubviewsCollectionSlice> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<SubviewsCollectionSlice> and conformance HStack<A>)
  {
    type metadata accessor for LabelGroup<LabeledContentStyleConfiguration.Label>(255, &lazy cache variable for type metadata for HStack<SubviewsCollectionSlice>, MEMORY[0x1E4F40CC8], MEMORY[0x1E4F40CC0], MEMORY[0x1E4F415B8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<SubviewsCollectionSlice> and conformance HStack<A>);
  }
  return result;
}

uint64_t closure #1 in closure #3 in closure #2 in LeadingTrailingLabeledContentStyle_Phone._Body.body.getter@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (a1)
  {
    long long v9 = *(_OWORD *)(a2 + 24);
    v24[0] = *(_OWORD *)(a2 + 8);
    v24[1] = v9;
    *(_OWORD *)((char *)&v24[1] + 9) = *(_OWORD *)(a2 + 33);
    outlined retain of LeadingTrailingLabeledContentStyle_Phone._Body(a2);
    _s7SwiftUI21ViewInputFlagModifierVyAA41ListLabeledContentPrefersHorizontalLayoutVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ScaledMetric<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x1E4FBC958], MEMORY[0x1E4F3F620]);
    uint64_t v19 = a5;
    uint64_t v10 = a4;
    ScaledMetric.wrappedValue.getter();
    uint64_t v11 = *(void *)(a2 + 56);
    uint64_t v12 = *(unsigned __int8 *)(a2 + 64);
    int v13 = *(unsigned __int8 *)(a2 + 65);
    outlined retain of LeadingTrailingLabeledContentStyle_Phone._Body(a2);
    outlined copy of Environment<CGFloat?>.Content(v11, v12, v13);
    specialized Environment.wrappedValue.getter(v11, v12 | (v13 << 8));
    uint64_t v14 = v11;
    a4 = v10;
    a5 = v19;
    outlined consume of Environment<CGFloat?>.Content(v14, v12, v13);
    outlined release of LeadingTrailingLabeledContentStyle_Phone._Body(a2);
    outlined release of LeadingTrailingLabeledContentStyle_Phone._Body(a2);
  }
  if (*a3 == a3[1])
  {
    memset(v24, 0, 256);
  }
  else
  {
    v24[0] = (unint64_t)static HorizontalAlignment.leading.getter();
    LOBYTE(v24[1]) = 1;
    closure #1 in closure #1 in closure #1 in closure #3 in closure #2 in LeadingTrailingLabeledContentStyle_Phone._Body.body.getter(a3, (uint64_t)&v24[1] + 8);
  }
  long long v22 = (unint64_t)static HorizontalAlignment.leading.getter();
  LOBYTE(v23[0]) = 1;
  outlined init with copy of SubviewsCollection(a4, (uint64_t)v23 + 8);
  static Color.secondary.getter();
  uint64_t v15 = MEMORY[0x1E4F40330];
  uint64_t v16 = MEMORY[0x1E4F40328];
  __n128 v17 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x1E4F415E8];
  type metadata accessor for LabelGroup<LabeledContentStyleConfiguration.Label>(0, &lazy cache variable for type metadata for VStack<SubviewsCollection>, MEMORY[0x1E4F40330], MEMORY[0x1E4F40328], MEMORY[0x1E4F415E8]);
  lazy protocol witness table accessor for type VStack<SubviewsCollection> and conformance VStack<A>();
  View.defaultForegroundColor(_:)();
  swift_release();
  outlined destroy of VStack<SubviewsCollection>((uint64_t)&v22, &lazy cache variable for type metadata for VStack<SubviewsCollection>, v15, v16, v17);
  v23[1] = v21[2];
  v23[2] = v21[3];
  v23[3] = v21[4];
  v23[4] = v21[5];
  long long v22 = v21[0];
  v23[0] = v21[1];
  outlined init with copy of _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>((uint64_t)v24, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?);
  outlined init with copy of _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>((uint64_t)&v22, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>);
  outlined init with copy of _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>((uint64_t)v21, a5, (uint64_t (*)(void))type metadata accessor for VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?);
  outlined init with copy of _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>((uint64_t)v20, a5 + 256, (uint64_t (*)(void))type metadata accessor for ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>);
  outlined destroy of _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>((uint64_t)&v22, (uint64_t (*)(void))type metadata accessor for ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>);
  outlined destroy of _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?);
  outlined destroy of _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>);
  return outlined destroy of _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?);
}

uint64_t outlined destroy of _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)
  {
    type metadata accessor for LabelGroup<LabeledContentStyleConfiguration.Label>(255, &lazy cache variable for type metadata for VStack<SubviewsCollection>, MEMORY[0x1E4F40330], MEMORY[0x1E4F40328], MEMORY[0x1E4F415E8]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>)
  {
    type metadata accessor for ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>(255, &lazy cache variable for type metadata for ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, &lazy cache variable for type metadata for HStack<SubviewsCollectionSlice>, MEMORY[0x1E4F40CC8], MEMORY[0x1E4F40CC0]);
    _s7SwiftUI5ColorVSgMaTm_2(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>, MEMORY[0x1E4F41528], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>);
    }
  }
}

void type metadata accessor for _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>()
{
  if (!lazy cache variable for type metadata for _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>)
  {
    _s7SwiftUI21ViewInputFlagModifierVyAA41ListLabeledContentPrefersHorizontalLayoutVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _LayoutRoot<AnyLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyLayout and conformance AnyLayout, MEMORY[0x1E4F417E0], MEMORY[0x1E4F3F598]);
    type metadata accessor for TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>(255);
    lazy protocol witness table accessor for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>();
    unint64_t v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>);
    }
  }
}

uint64_t outlined destroy of VStack<SubviewsCollection>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  type metadata accessor for LabelGroup<LabeledContentStyleConfiguration.Label>(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

void type metadata accessor for LabelGroup<LabeledContentStyleConfiguration.Label>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type VStack<SubviewsCollection> and conformance VStack<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type VStack<SubviewsCollection> and conformance VStack<A>;
  if (!lazy protocol witness table cache variable for type VStack<SubviewsCollection> and conformance VStack<A>)
  {
    type metadata accessor for LabelGroup<LabeledContentStyleConfiguration.Label>(255, &lazy cache variable for type metadata for VStack<SubviewsCollection>, MEMORY[0x1E4F40330], MEMORY[0x1E4F40328], MEMORY[0x1E4F415E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VStack<SubviewsCollection> and conformance VStack<A>);
  }
  return result;
}

uint64_t LeadingTrailingLabeledContentStyle_Phone._Body.imageScale.getter@<X0>(char *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v18 = v2;
  char v16 = *(unsigned char *)(v1 + 32);
  char v17 = *(unsigned char *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 56);
  uint64_t v5 = *(unsigned __int8 *)(v1 + 64);
  char v6 = *(unsigned char *)(v1 + 65);
  uint64_t v7 = *(void *)(v1 + 72);
  uint64_t v8 = *(unsigned __int8 *)(v1 + 80);
  char v9 = *(unsigned char *)(v1 + 81);
  char v19 = *(unsigned char *)(v1 + 96);
  uint64_t v10 = *(void *)(v1 + 104);
  char v11 = *(unsigned char *)(v1 + 112);
  uint64_t v12 = *(void *)(v1 + 88);
  outlined copy of Environment<Bool>.Content(v2, v17);
  outlined copy of Environment<Bool>.Content(v3, v16);
  outlined copy of Environment<CGFloat?>.Content(v4, v5, v6);
  outlined copy of Environment<ListItemTint?>.Content(v7, v8, v9);
  outlined copy of Environment<Bool>.Content(v12, v19);
  outlined copy of Environment<Bool>.Content(v10, v11);
  outlined copy of Environment<Bool>.Content(v10, v11);
  specialized Environment.wrappedValue.getter(v10, v11, &v21);
  outlined consume of Environment<Bool>.Content(v10, v11);
  outlined consume of Environment<Bool>.Content(v18, v17);
  outlined consume of Environment<Bool>.Content(v3, v16);
  outlined consume of Environment<CGFloat?>.Content(v4, v5, v6);
  outlined consume of Environment<ListItemTint?>.Content(v7, v8, v9);
  outlined consume of Environment<Bool>.Content(v12, v19);
  uint64_t result = outlined consume of Environment<Bool>.Content(v10, v11);
  if (v21 > 8u)
  {
    char v14 = 0;
  }
  else
  {
    outlined copy of Environment<Bool>.Content(v18, v17);
    outlined copy of Environment<Bool>.Content(v3, v16);
    outlined copy of Environment<CGFloat?>.Content(v4, v5, v6);
    outlined copy of Environment<ListItemTint?>.Content(v7, v8, v9);
    outlined copy of Environment<Bool>.Content(v12, v19);
    outlined copy of Environment<Bool>.Content(v10, v11);
    outlined copy of Environment<Bool>.Content(v10, v11);
    specialized Environment.wrappedValue.getter(v10, v11, &v20);
    outlined consume of Environment<Bool>.Content(v10, v11);
    outlined consume of Environment<Bool>.Content(v18, v17);
    outlined consume of Environment<Bool>.Content(v3, v16);
    outlined consume of Environment<CGFloat?>.Content(v4, v5, v6);
    outlined consume of Environment<ListItemTint?>.Content(v7, v8, v9);
    outlined consume of Environment<Bool>.Content(v12, v19);
    uint64_t result = outlined consume of Environment<Bool>.Content(v10, v11);
    if (v20 >= 7u) {
      char v14 = 1;
    }
    else {
      char v14 = 2;
    }
  }
  *a1 = v14;
  return result;
}

unint64_t lazy protocol witness table accessor for type LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout and conformance LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout and conformance LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout;
  if (!lazy protocol witness table cache variable for type LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout and conformance LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout and conformance LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout and conformance LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout;
  if (!lazy protocol witness table cache variable for type LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout and conformance LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout and conformance LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout);
  }
  return result;
}

uint64_t outlined destroy of ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>(0, &lazy cache variable for type metadata for ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, &lazy cache variable for type metadata for HStack<SubviewsCollectionSlice>, MEMORY[0x1E4F40CC8], MEMORY[0x1E4F40CC0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>(0, &lazy cache variable for type metadata for ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, &lazy cache variable for type metadata for HStack<SubviewsCollectionSlice>, MEMORY[0x1E4F40CC8], MEMORY[0x1E4F40CC0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  if (!*a2)
  {
    type metadata accessor for LabelGroup<LabeledContentStyleConfiguration.Label>(255, a3, a4, a5, MEMORY[0x1E4F415B8]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>();
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>> and conformance GroupElementsOfContent<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _UnaryViewAdaptor<StaticIf<ListLabeledContentPrefersHorizontalLayout, LeadingTrailingLabeledContentStyle_Phone._Body, LeadingTrailingLabeledContentStyle_Phone._Body>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4();
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Color?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>);
    }
  }
}

void type metadata accessor for TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>(uint64_t a1)
{
}

void type metadata accessor for GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>()
{
  if (!lazy cache variable for type metadata for GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for GroupElementsOfContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?)
  {
    type metadata accessor for ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>)
  {
    type metadata accessor for ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>();
    _s7SwiftUI21ViewInputFlagModifierVyAA41ListLabeledContentPrefersHorizontalLayoutVGMaTm_0(255, &lazy cache variable for type metadata for ViewInputFlagModifier<MultiViewLabel>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultiViewLabel and conformance MultiViewLabel, (uint64_t)&type metadata for MultiViewLabel, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>);
    }
  }
}

void type metadata accessor for LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>()
{
  if (!lazy cache variable for type metadata for LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>(255);
    lazy protocol witness table accessor for type GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>> and conformance GroupElementsOfContent<A, B>(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)> and conformance TupleView<A>, type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>);
    unint64_t v0 = type metadata accessor for LabelGroup();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>);
    }
  }
}

uint64_t type metadata accessor for LabelGroup()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type StaticIf<ListLabeledContentPrefersHorizontalLayout, LeadingTrailingLabeledContentStyle_Phone._Body, LeadingTrailingLabeledContentStyle_Phone._Body> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<ListLabeledContentPrefersHorizontalLayout, LeadingTrailingLabeledContentStyle_Phone._Body, LeadingTrailingLabeledContentStyle_Phone._Body> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<ListLabeledContentPrefersHorizontalLayout, LeadingTrailingLabeledContentStyle_Phone._Body, LeadingTrailingLabeledContentStyle_Phone._Body> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<ListLabeledContentPrefersHorizontalLayout, LeadingTrailingLabeledContentStyle_Phone._Body, LeadingTrailingLabeledContentStyle_Phone._Body>();
    lazy protocol witness table accessor for type LeadingTrailingLabeledContentStyle_Phone._Body and conformance LeadingTrailingLabeledContentStyle_Phone._Body();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<ListLabeledContentPrefersHorizontalLayout, LeadingTrailingLabeledContentStyle_Phone._Body, LeadingTrailingLabeledContentStyle_Phone._Body> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void type metadata accessor for StaticIf<ListLabeledContentPrefersHorizontalLayout, LeadingTrailingLabeledContentStyle_Phone._Body, LeadingTrailingLabeledContentStyle_Phone._Body>()
{
  if (!lazy cache variable for type metadata for StaticIf<ListLabeledContentPrefersHorizontalLayout, LeadingTrailingLabeledContentStyle_Phone._Body, LeadingTrailingLabeledContentStyle_Phone._Body>)
  {
    lazy protocol witness table accessor for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<ListLabeledContentPrefersHorizontalLayout, LeadingTrailingLabeledContentStyle_Phone._Body, LeadingTrailingLabeledContentStyle_Phone._Body>);
    }
  }
}

void type metadata accessor for (VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)()
{
  if (!lazy cache variable for type metadata for (VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>))
  {
    type metadata accessor for VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?(255);
    type metadata accessor for ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>));
    }
  }
}

void type metadata accessor for VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>()
{
  if (!lazy cache variable for type metadata for VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>)
  {
    type metadata accessor for LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>();
    lazy protocol witness table accessor for type GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>> and conformance GroupElementsOfContent<A, B>(&lazy protocol witness table cache variable for type LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>> and conformance LabelGroup<A>, (void (*)(uint64_t))type metadata accessor for LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>);
    unint64_t v0 = type metadata accessor for VStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type LeadingTrailingLabeledContentStyle_Phone._Body and conformance LeadingTrailingLabeledContentStyle_Phone._Body()
{
  unint64_t result = lazy protocol witness table cache variable for type LeadingTrailingLabeledContentStyle_Phone._Body and conformance LeadingTrailingLabeledContentStyle_Phone._Body;
  if (!lazy protocol witness table cache variable for type LeadingTrailingLabeledContentStyle_Phone._Body and conformance LeadingTrailingLabeledContentStyle_Phone._Body)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeadingTrailingLabeledContentStyle_Phone._Body and conformance LeadingTrailingLabeledContentStyle_Phone._Body);
  }
  return result;
}

void type metadata accessor for _UnaryViewAdaptor<StaticIf<ListLabeledContentPrefersHorizontalLayout, LeadingTrailingLabeledContentStyle_Phone._Body, LeadingTrailingLabeledContentStyle_Phone._Body>>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>? and conformance <A> A?)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for (ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice))
  {
    type metadata accessor for ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice));
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>();
    lazy protocol witness table accessor for type ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Image.Scale> and conformance _EnvironmentKeyWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>();
    lazy protocol witness table accessor for type ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>();
    lazy protocol witness table accessor for type LabelStyleWritingModifier<TitleAndIconLabelStyle> and conformance LabelStyleWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>)
  {
    _s7SwiftUI21ViewInputFlagModifierVyAA41ListLabeledContentPrefersHorizontalLayoutVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<TitleAndIconLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle, (uint64_t)&type metadata for TitleAndIconLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type LabelStyleWritingModifier<TitleAndIconLabelStyle> and conformance LabelStyleWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LabelStyleWritingModifier<TitleAndIconLabelStyle> and conformance LabelStyleWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type LabelStyleWritingModifier<TitleAndIconLabelStyle> and conformance LabelStyleWritingModifier<A>)
  {
    type metadata accessor for LabelStyleWritingModifier<TitleAndIconLabelStyle>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<TitleAndIconLabelStyle> and conformance LabelStyleWritingModifier<A>);
  }
  return result;
}

uint64_t type metadata completion function for ContextMenuResponderBase()
{
  return type metadata completion function for ContextMenuResponder();
}

uint64_t type metadata accessor for ContextMenuResponderBase(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ContextMenuResponderBase);
}

void static _FlipForRTLEffect._makeView(modifier:inputs:body:)(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, double *a4@<X8>)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2[2];
  int v10 = *((_DWORD *)a2 + 20);
  LODWORD(v17) = *a1;
  type metadata accessor for _GraphValue<_FlipForRTLEffect>();
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[4];
  long long v14 = *(_OWORD *)(a2 + 7);
  long long v15 = *(_OWORD *)(a2 + 5);
  uint64_t v13 = a2[9];
  _GraphValue.value.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type Child and conformance Child();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  uint64_t v17 = v7;
  int v18 = v8;
  uint64_t v19 = v9;
  uint64_t v20 = v11;
  uint64_t v21 = v12;
  long long v22 = v15;
  long long v23 = v14;
  uint64_t v24 = v13;
  int v25 = v10;
  static _LayoutDirectionBehaviorEffect._makeView(modifier:inputs:body:)(&v16, (uint64_t)&v17, a3, a4);
}

unint64_t lazy protocol witness table accessor for type Child and conformance Child()
{
  unint64_t result = lazy protocol witness table cache variable for type Child and conformance Child;
  if (!lazy protocol witness table cache variable for type Child and conformance Child)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Child and conformance Child);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Child and conformance Child;
  if (!lazy protocol witness table cache variable for type Child and conformance Child)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Child and conformance Child);
  }
  return result;
}

double static _LayoutDirectionBehaviorEffect._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, double *a4@<X8>)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  int v18 = *a1;
  unint64_t v4 = *(void *)a2;
  unint64_t v28 = *(void *)(a2 + 16);
  uint64_t v31 = *(void *)(a2 + 40);
  unint64_t v20 = *(void *)(a2 + 48);
  unsigned int v21 = *(_DWORD *)(a2 + 32);
  unsigned int v22 = *(_DWORD *)(a2 + 68);
  unsigned int v25 = *(_DWORD *)(a2 + 72);
  int v29 = *(_DWORD *)(a2 + 80);
  unsigned int v30 = *(_DWORD *)(a2 + 60);
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  unsigned int v32 = *(_DWORD *)(a2 + 24);
  unsigned int v26 = *(_DWORD *)(a2 + 64);
  unsigned int v27 = *(_DWORD *)(a2 + 28);
  unsigned int v17 = *(_DWORD *)(a2 + 36);
  unsigned int v23 = *(_DWORD *)(a2 + 56);
  unsigned int v24 = *(_DWORD *)(a2 + 76);
  swift_getKeyPath();
  unsigned int v15 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  unint64_t v44 = v4;
  unsigned int v45 = v5;
  unint64_t v46 = v28;
  *(void *)&long long v47 = __PAIR64__(v27, v32);
  *((void *)&v47 + 1) = __PAIR64__(v17, v21);
  uint64_t v48 = v31;
  unint64_t v49 = v20;
  *(void *)&long long v50 = __PAIR64__(v30, v23);
  *((void *)&v50 + 1) = __PAIR64__(v22, v26);
  unint64_t v51 = __PAIR64__(v24, v25);
  int v52 = v29;
  type metadata accessor for _GraphValue<_LayoutDirectionBehaviorEffect>();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphValue.value.getter();
  _ViewInputs.environment.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type FlipForRTLEnvironment and conformance FlipForRTLEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.environment.setter();
  _GraphValue.value.getter();
  _ViewInputs.animatedSize()();
  _ViewInputs.animatedPosition()();
  _ViewInputs.transform.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type FlipForRTLTransform and conformance FlipForRTLTransform();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.transform.setter();
  _GraphValue.value.getter();
  _ViewInputs.position.getter();
  _ViewInputs.size.getter();
  swift_getKeyPath();
  _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type FlipForRTLFrame and conformance FlipForRTLFrame();
  Attribute.init<A>(body:value:flags:update:)();
  AGGraphCreateOffsetAttribute2();
  _ViewInputs.position.setter();
  AGGraphCreateOffsetAttribute2();
  _ViewInputs.size.setter();
  _GraphValue.value.getter();
  _ViewInputs.containerPosition.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type FlipForRTLContainerPosition and conformance FlipForRTLContainerPosition();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.containerPosition.setter();
  unint64_t v35 = v4;
  unint64_t v36 = __PAIR64__(v15, v5);
  unint64_t v37 = v28;
  long long v38 = v47;
  uint64_t v39 = v31;
  unint64_t v40 = v20;
  long long v41 = v50;
  unint64_t v42 = __PAIR64__(v24, v25);
  int v43 = v29;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v6 = swift_bridgeObjectRetain();
  a3(&v33, v6, &v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unint64_t v35 = v20;
  LODWORD(v36) = v23;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    _DisplayList_Identity.init()();
    unsigned int v12 = v35;
    unint64_t v35 = v4;
    LODWORD(v36) = v5;
    unint64_t v37 = v28;
    *(void *)&long long v38 = __PAIR64__(v27, v32);
    *((void *)&v38 + 1) = __PAIR64__(v17, v21);
    uint64_t v39 = v31;
    unint64_t v40 = v20;
    *(void *)&long long v41 = __PAIR64__(v30, v23);
    *((void *)&v41 + 1) = __PAIR64__(v22, v26);
    unint64_t v42 = __PAIR64__(v24, v25);
    int v43 = v29;
    _ViewInputs.pushIdentity(_:)();
    LODWORD(v35) = v18;
    unsigned int v19 = _GraphValue.value.getter();
    unint64_t v35 = v4;
    LODWORD(v36) = v5;
    unint64_t v37 = v28;
    *(void *)&long long v38 = __PAIR64__(v27, v32);
    *((void *)&v38 + 1) = __PAIR64__(v17, v21);
    uint64_t v39 = v31;
    unint64_t v40 = v20;
    *(void *)&long long v41 = __PAIR64__(v30, v23);
    *((void *)&v41 + 1) = __PAIR64__(v22, v26);
    unint64_t v42 = __PAIR64__(v24, v25);
    int v43 = v29;
    unsigned int v16 = _ViewInputs.animatedPosition()();
    unint64_t v35 = v4;
    LODWORD(v36) = v5;
    unint64_t v37 = v28;
    *(void *)&long long v38 = __PAIR64__(v27, v32);
    *((void *)&v38 + 1) = __PAIR64__(v17, v21);
    uint64_t v39 = v31;
    unint64_t v40 = v20;
    *(void *)&long long v41 = __PAIR64__(v30, v23);
    *((void *)&v41 + 1) = __PAIR64__(v22, v26);
    unint64_t v42 = __PAIR64__(v24, v25);
    int v43 = v29;
    unsigned int v11 = _ViewInputs.animatedSize()();
    unint64_t v35 = v4;
    LODWORD(v36) = v5;
    unint64_t v37 = v28;
    *(void *)&long long v38 = __PAIR64__(v27, v32);
    *((void *)&v38 + 1) = __PAIR64__(v17, v21);
    uint64_t v39 = v31;
    unint64_t v40 = v20;
    *(void *)&long long v41 = __PAIR64__(v30, v23);
    *((void *)&v41 + 1) = __PAIR64__(v22, v26);
    unint64_t v42 = __PAIR64__(v24, v25);
    int v43 = v29;
    unsigned int v7 = _ViewInputs.containerPosition.getter();
    unint64_t v35 = v33;
    unint64_t v36 = *(void *)&v34;
    uint64_t v8 = _ViewOutputs.subscript.getter();
    int v9 = *MEMORY[0x1E4F4E7A0];
    if ((v8 & 0x100000000) == 0) {
      int v9 = v8;
    }
    unint64_t v35 = __PAIR64__(v19, v12);
    unint64_t v36 = __PAIR64__(v11, v16);
    unint64_t v37 = __PAIR64__(v7, v15);
    LODWORD(v38) = v9;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type FlipForRTLDisplayList and conformance FlipForRTLDisplayList();
    Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v35) = 0;
    _ViewOutputs.subscript.setter();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)a4 = v33;
  double result = v34;
  a4[1] = v34;
  return result;
}

unint64_t lazy protocol witness table accessor for type FlipForRTLContainerPosition and conformance FlipForRTLContainerPosition()
{
  unint64_t result = lazy protocol witness table cache variable for type FlipForRTLContainerPosition and conformance FlipForRTLContainerPosition;
  if (!lazy protocol witness table cache variable for type FlipForRTLContainerPosition and conformance FlipForRTLContainerPosition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlipForRTLContainerPosition and conformance FlipForRTLContainerPosition);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FlipForRTLContainerPosition and conformance FlipForRTLContainerPosition;
  if (!lazy protocol witness table cache variable for type FlipForRTLContainerPosition and conformance FlipForRTLContainerPosition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlipForRTLContainerPosition and conformance FlipForRTLContainerPosition);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FlipForRTLEnvironment and conformance FlipForRTLEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type FlipForRTLEnvironment and conformance FlipForRTLEnvironment;
  if (!lazy protocol witness table cache variable for type FlipForRTLEnvironment and conformance FlipForRTLEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlipForRTLEnvironment and conformance FlipForRTLEnvironment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FlipForRTLEnvironment and conformance FlipForRTLEnvironment;
  if (!lazy protocol witness table cache variable for type FlipForRTLEnvironment and conformance FlipForRTLEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlipForRTLEnvironment and conformance FlipForRTLEnvironment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FlipForRTLDisplayList and conformance FlipForRTLDisplayList()
{
  unint64_t result = lazy protocol witness table cache variable for type FlipForRTLDisplayList and conformance FlipForRTLDisplayList;
  if (!lazy protocol witness table cache variable for type FlipForRTLDisplayList and conformance FlipForRTLDisplayList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlipForRTLDisplayList and conformance FlipForRTLDisplayList);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FlipForRTLDisplayList and conformance FlipForRTLDisplayList;
  if (!lazy protocol witness table cache variable for type FlipForRTLDisplayList and conformance FlipForRTLDisplayList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlipForRTLDisplayList and conformance FlipForRTLDisplayList);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FlipForRTLTransform and conformance FlipForRTLTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type FlipForRTLTransform and conformance FlipForRTLTransform;
  if (!lazy protocol witness table cache variable for type FlipForRTLTransform and conformance FlipForRTLTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlipForRTLTransform and conformance FlipForRTLTransform);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FlipForRTLTransform and conformance FlipForRTLTransform;
  if (!lazy protocol witness table cache variable for type FlipForRTLTransform and conformance FlipForRTLTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlipForRTLTransform and conformance FlipForRTLTransform);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FlipForRTLFrame and conformance FlipForRTLFrame()
{
  unint64_t result = lazy protocol witness table cache variable for type FlipForRTLFrame and conformance FlipForRTLFrame;
  if (!lazy protocol witness table cache variable for type FlipForRTLFrame and conformance FlipForRTLFrame)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlipForRTLFrame and conformance FlipForRTLFrame);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FlipForRTLFrame and conformance FlipForRTLFrame;
  if (!lazy protocol witness table cache variable for type FlipForRTLFrame and conformance FlipForRTLFrame)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlipForRTLFrame and conformance FlipForRTLFrame);
  }
  return result;
}

void type metadata accessor for _GraphValue<_LayoutDirectionBehaviorEffect>()
{
  if (!lazy cache variable for type metadata for _GraphValue<_LayoutDirectionBehaviorEffect>)
  {
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<_LayoutDirectionBehaviorEffect>);
    }
  }
}

void type metadata accessor for _GraphValue<_FlipForRTLEffect>()
{
  if (!lazy cache variable for type metadata for _GraphValue<_FlipForRTLEffect>)
  {
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<_FlipForRTLEffect>);
    }
  }
}

void *initializeWithCopy for SearchFieldConfiguration.Data(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, MEMORY[0x1E4F273A8], MEMORY[0x1E4F41638]);
  uint64_t v8 = *(int *)(v7 + 32);
  int v9 = (char *)a1 + v8;
  int v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for AttributedString();
  unsigned int v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_retain();
  swift_retain();
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 20);
  long long v14 = (char *)a1 + v13;
  unsigned int v15 = (char *)a2 + v13;
  uint64_t v16 = *(void *)((char *)a2 + v13);
  uint64_t v17 = *(void *)((char *)a2 + v13 + 8);
  LOBYTE(v9) = *((unsigned char *)a2 + v13 + 16);
  outlined copy of Text.Storage(v16, v17, (char)v9);
  *(void *)long long v14 = v16;
  *((void *)v14 + 1) = v17;
  v14[16] = (char)v9;
  *((void *)v14 + 3) = *((void *)v15 + 3);
  uint64_t v18 = *(int *)(a3 + 24);
  unsigned int v19 = (char *)a1 + v18;
  unint64_t v20 = (char *)a2 + v18;
  int v21 = *((unsigned __int8 *)a2 + v18 + 8);
  swift_bridgeObjectRetain();
  if (v21 == 255)
  {
    *(void *)unsigned int v19 = *(void *)v20;
    v19[8] = v20[8];
  }
  else
  {
    char v22 = v21 & 1;
    uint64_t v23 = *(void *)v20;
    outlined copy of PlatformItemCollection.Storage(v23, v22);
    *(void *)unsigned int v19 = v23;
    v19[8] = v22;
  }
  return a1;
}

uint64_t type metadata completion function for NavigationBridge_PhoneTV()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata completion function for SheetPresentationModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ToolbarModifier(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 >= a2)
  {
LABEL_26:
    if (v5 > 0x7FFFFFFE)
    {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))((result + v6 + 16) & ~v6);
    }
    else
    {
      unint64_t v16 = *(void *)(result + 8);
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      if ((v16 + 1) >= 2) {
        return v16;
      }
      else {
        return 0;
      }
    }
  }
  else
  {
    unint64_t v8 = ((*(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) + ((v6 + 16) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 24;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *(unsigned __int8 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 3:
        __break(1u);
        return result;
      case 4:
        int v14 = *(_DWORD *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
LABEL_22:
        int v15 = v14 - 1;
        if (v10)
        {
          int v15 = 0;
          LODWORD(v10) = *(_DWORD *)result;
        }
        uint64_t result = v7 + (v10 | v15) + 1;
        break;
      default:
        goto LABEL_26;
    }
  }
  return result;
}

uint64_t AnyNavigationPath.HomogeneousBoxBase.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 192) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 232));

  return swift_deallocClassInstance();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance OnScrollGeometryChangeModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance LazyVGrid<A>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t base witness table accessor for _AttributeBody in AccessibilityRepresentationModifier<A>.BridgedAttachment()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in AccessibilityRepresentationModifier<A>.ProxyModifier()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in NavigationBackgroundReaderModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in HostingContentViewRootModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in PlatformFallbackButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in ConditionallyBorderedStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in NavigationCommonModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in NavigationColumnModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ButtonStyle.Body : View in PlainButtonStyleBase()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for CustomHoverEffect.Body : CustomHoverEffect in AutomaticHoverEffect()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in PlainButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance UpdateEnvironmentToAllowedBehaviors(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  void v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance UpdateEnvironmentToAllowedBehaviors()
{
  lazy protocol witness table accessor for type UpdateEnvironmentToAllowedBehaviors and conformance UpdateEnvironmentToAllowedBehaviors();

  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

unint64_t lazy protocol witness table accessor for type UpdateEnvironmentToAllowedBehaviors and conformance UpdateEnvironmentToAllowedBehaviors()
{
  unint64_t result = lazy protocol witness table cache variable for type UpdateEnvironmentToAllowedBehaviors and conformance UpdateEnvironmentToAllowedBehaviors;
  if (!lazy protocol witness table cache variable for type UpdateEnvironmentToAllowedBehaviors and conformance UpdateEnvironmentToAllowedBehaviors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UpdateEnvironmentToAllowedBehaviors and conformance UpdateEnvironmentToAllowedBehaviors);
  }
  return result;
}

id UIHostingController.__allocating_init(rootView:)(objc_class *a1)
{
  id v3 = specialized UIHostingController.__allocating_init(rootView:)(a1);
  (*(void (**)(objc_class *))(*(void *)(*(void *)(v1 + 80) - 8) + 8))(a1);
  return v3;
}

id specialized UIHostingController.__allocating_init(rootView:)(objc_class *a1)
{
  id v2 = objc_allocWithZone((Class)type metadata accessor for UIHostingController());
  return specialized UIHostingController.init(rootView:)(a1);
}

void @objc UIKitBarItemHost.willMove(toSuperview:)(void *a1, uint64_t a2, UIView_optional *a3)
{
  long long v5 = a3;
  id v6 = a1;
  UIKitBarItemHost.willMove(toSuperview:)(a3);
}

Swift::Void __swiftcall UIKitBarItemHost.willMove(toSuperview:)(UIView_optional *toSuperview)
{
  id v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v5 = *MEMORY[0x1E4FBC8C8] & *v2;
  v8.receiver = v2;
  v8.super_class = ObjectType;
  [(UIView_optional *)&v8 willMoveToSuperview:toSuperview];
  if (toSuperview)
  {
    UIKitBarItemHost.initializeSize()();
    specialized _UIHostingView.viewGraph.getter();
    swift_retain();
    static _ProposedSize.unspecified.getter();
    uint64_t v6 = swift_allocObject();
    swift_unknownObjectWeakInit();
    unsigned int v7 = (void *)swift_allocObject();
    void v7[2] = *(void *)(v5 + 1600);
    v7[3] = *(void *)(v5 + 1608);
    v7[4] = v6;
    swift_beginAccess();
    _s7SwiftUI16UIKitBarItemHostCyAA0dE4ViewVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ViewGraphGeometryObservers<SizeThatFitsMeasurer>, (uint64_t (*)(void))lazy protocol witness table accessor for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer, MEMORY[0x1E4F40688], MEMORY[0x1E4F40F80]);
    ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)();
    swift_endAccess();
    swift_release();
    swift_release();
    specialized _UIHostingView.viewGraph.getter();
    swift_retain();
    static _ProposedSize.unspecified.getter();
    swift_beginAccess();
    ViewGraphGeometryObservers.resetObserver(for:)();
  }
  else
  {
    specialized _UIHostingView.viewGraph.getter();
    swift_beginAccess();
    _s7SwiftUI16UIKitBarItemHostCyAA0dE4ViewVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ViewGraphGeometryObservers<SizeThatFitsMeasurer>, (uint64_t (*)(void))lazy protocol witness table accessor for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer, MEMORY[0x1E4F40688], MEMORY[0x1E4F40F80]);
    swift_retain();
    ViewGraphGeometryObservers.removeAll()();
  }
  swift_endAccess();
  swift_release();
}

id specialized static UIKitBarButtonItem.makeGroupItem(item:context:)(uint64_t a1, void *a2, int a3)
{
  uint64_t v6 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1F4188790](v6);
  objc_super v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _ViewList_View(a1 + 104, (uint64_t)v25);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  _s7SwiftUI16PlatformItemListV0D0VWObTm_2((uint64_t)v24, (uint64_t)&v31, (uint64_t (*)(void))type metadata accessor for WeakBox<UIBarButtonItem>);
  v27[2] = v25[2];
  v27[3] = v25[3];
  v27[4] = v25[4];
  uint64_t v28 = v26;
  v27[0] = v25[0];
  v27[1] = v25[1];
  char v29 = a3;
  char v30 = 0;
  outlined init with copy of BarItemView((uint64_t)v27, (uint64_t)v25);
  _s7SwiftUI16UIKitBarItemHostCyAA0dE4ViewVGMaTm_0(0, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost);
  uint64_t v10 = (char *)objc_allocWithZone(v9);
  unsigned int v11 = (void *)MEMORY[0x1E4FBC8C8];
  unsigned int v12 = &v10[*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v10) + 0x650)];
  *(void *)unsigned int v12 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *((void *)v12 + 1) = 0;
  outlined init with copy of BarItemView((uint64_t)v25, (uint64_t)v24);
  uint64_t v13 = (void *)specialized _UIHostingView.init(rootView:)((uint64_t)v24);
  int v14 = (void *)((char *)v13 + *(void *)((*v11 & *v13) + 0xB8));
  swift_beginAccess();
  uint64_t v15 = *v14;
  *int v14 = 0;
  if (v15)
  {
    __int16 v16 = word_1ED42A452;
    if (((unsigned __int16)word_1ED42A452 & ~(unsigned __int16)word_1ED42A450) == 0) {
      __int16 v16 = 0;
    }
    v23[7] = v16 | word_1ED42A450;
    _s7SwiftUI16UIKitBarItemHostCyAA0dE4ViewVGMaTm_0(0, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  outlined destroy of BarItemView((uint64_t)v25);
  swift_weakLoadStrong();
  swift_retain();
  ViewGraph.preferenceBridge.setter();
  swift_release();
  _s7SwiftUI16PlatformItemListV0D0VWOcTm_3(a1, (uint64_t)v8, type metadata accessor for ToolbarStorage.Item);
  id v17 = objc_allocWithZone((Class)type metadata accessor for UIKitBarButtonItem(0));
  id v18 = a2;
  unsigned int v19 = v13;
  id v20 = specialized UIKitBarButtonItem.init(item:context:host:)((uint64_t)v8, (uint64_t)v18, a3, v19);

  lazy protocol witness table accessor for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost);
  CGSize v21 = ViewRendererHost.idealSize()();
  objc_msgSend(v19, sel_setBounds_, 0.0, 0.0, v21.width, v21.height);
  ViewRendererHost.updateViewGraph<A>(body:)();
  UIKitBarButtonItem.updatePlatformItem(_:)(*(uint64_t *)&v25[0]);

  swift_bridgeObjectRelease();
  outlined destroy of BarItemView((uint64_t)v27);
  return v20;
}

void @objc _UIHostingView.bounds.setter(void *a1, double a2, double a3, double a4, double a5)
{
  id v9 = a1;
  _UIHostingView.frame.setter((SEL *)&selRef_bounds, (SEL *)&selRef_setBounds_, a2, a3, a4, a5);
}

uint64_t outlined destroy of BarItemView(uint64_t a1)
{
  return a1;
}

uint64_t destroy for BarItemView(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_unknownObjectWeakDestroy();
}

uint64_t type metadata accessor for UIKitBarButtonItem(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitBarButtonItem);
}

id specialized UIKitBarButtonItem.init(item:context:host:)(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v5 = v4;
  char v29 = a4;
  int v28 = a3;
  uint64_t v31 = a2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  unsigned int v27 = type metadata accessor for ToolbarStorage.Item;
  uint64_t v26 = MEMORY[0x1E4FBB718];
  type metadata accessor for ToolbarStorage.Item?(0, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v7 - 8);
  id v9 = (char *)&v24 - v8;
  uint64_t v10 = (uint64_t)&v5[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_item];
  uint64_t v11 = type metadata accessor for ToolbarStorage.Item(0);
  unsigned int v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  v12(v10, 1, 1, v11);
  uint64_t v13 = (uint64_t)&v5[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_listView];
  *(_OWORD *)uint64_t v13 = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(void *)(v13 + 80) = 0;
  uint64_t v25 = OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_edge;
  v5[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_edge] = 2;
  *(void *)&v5[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_menuDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  int v14 = &v5[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_platformItem];
  uint64_t v15 = type metadata accessor for PlatformItemList.Item();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  uint64_t v16 = OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_hasOwnMenuSection;
  v5[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_hasOwnMenuSection] = 0;
  _s7SwiftUI16PlatformItemListV0D0VWOcTm_3(a1, (uint64_t)v9, type metadata accessor for ToolbarStorage.Item);
  v12((uint64_t)v9, 0, 1, v11);
  swift_beginAccess();
  id v17 = v5;
  outlined assign with take of _ViewList_View?((uint64_t)v9, v10, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.Item?, (uint64_t)v27, v26, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ToolbarStorage.Item?);
  swift_endAccess();
  uint64_t v39 = 0;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v34 = 0u;
  swift_beginAccess();
  outlined assign with take of _ViewList_View?((uint64_t)&v34, v13, (uint64_t)&lazy cache variable for type metadata for _ViewList_View?, MEMORY[0x1E4F3F308], MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ToolbarItemPlacement.Role?);
  swift_endAccess();
  LOBYTE(v10) = v28;
  v5[v25] = v28;
  id v18 = v29;
  *(void *)&v17[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_host] = v29;
  v5[v16] = *(unsigned char *)(a1 + *(int *)(v11 + 60));
  id v19 = v18;

  v43.receiver = v17;
  v43.super_class = ObjectType;
  id v20 = objc_msgSendSuper2(&v43, sel_init);
  outlined init with copy of _ViewList_View(a1 + 104, (uint64_t)v32);
  swift_unknownObjectWeakInit();
  uint64_t v21 = swift_unknownObjectWeakAssign();
  _s7SwiftUI16PlatformItemListV0D0VWObTm_2(v21, (uint64_t)&v42, (uint64_t (*)(void))type metadata accessor for WeakBox<UIBarButtonItem>);
  long long v36 = v32[2];
  long long v37 = v32[3];
  long long v38 = v32[4];
  uint64_t v39 = v33;
  long long v34 = v32[0];
  long long v35 = v32[1];
  char v40 = v10;
  char v41 = 0;
  id v22 = v20;
  UIKitBarButtonItem.initialize(rootView:context:)((uint64_t)&v34);

  outlined destroy of (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)(a1, type metadata accessor for ToolbarStorage.Item);
  outlined destroy of BarItemView((uint64_t)&v34);
  return v22;
}

uint64_t UIKitBarButtonItem.initialize(rootView:context:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_host;
  uint64_t v5 = *(void **)(v2 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_host);
  uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
  *(void *)((char *)v5 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v5) + 0x198) + 8) = &protocol witness table for UIKitBarButtonItem;
  swift_unknownObjectWeakAssign();
  outlined init with copy of BarItemView(a1, (uint64_t)v21);
  outlined init with copy of BarItemView((uint64_t)v21, (uint64_t)v20);
  uint64_t v7 = (uint64_t)v5 + *(void *)((*v6 & *v5) + 0x60);
  swift_beginAccess();
  uint64_t v8 = v5;
  outlined assign with take of BarItemView((uint64_t)v20, v7);
  swift_endAccess();
  v20[0] = 1;
  _s7SwiftUI16UIKitBarItemHostCyAA0dE4ViewVGMaTm_0(0, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  outlined destroy of BarItemView((uint64_t)v21);

  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  _s7SwiftUI16UIKitBarItemHostCyAA0dE4ViewVGMaTm_0(0, &lazy cache variable for type metadata for UIKitInspectorV3Bridge<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitInspectorV3Bridge);
  uint64_t v10 = (char *)objc_msgSend(objc_allocWithZone(v9), sel_init);
  swift_unknownObjectWeakAssign();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  swift_unknownObjectWeakAssign();
  swift_unknownObjectWeakAssign();
  uint64_t v11 = &v10[direct field offset for UIKitInspectorV3Bridge.overrideArrowDirections];
  *(void *)uint64_t v11 = 3;
  v11[8] = 0;
  unsigned int v12 = *(void **)(v2 + v4);
  uint64_t v13 = *(void *)((*v6 & *v12) + 0x108);
  int v14 = *(void **)((char *)v12 + v13);
  *(void *)((char *)v12 + v13) = v10;
  uint64_t v15 = v10;

  _s7SwiftUI16UIKitBarItemHostCyAA0dE4ViewVGMaTm_0(0, &lazy cache variable for type metadata for SharingActivityPickerBridge<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SharingActivityPickerBridge);
  swift_allocObject();
  uint64_t v16 = specialized SharingActivityPickerBridge.init()();
  swift_unknownObjectWeakAssign();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  swift_unknownObjectWeakAssign();
  swift_unknownObjectWeakAssign();
  *(void *)(v16 + 24) = 3;
  *(unsigned char *)(v16 + 32) = 0;
  *(void *)(*(void *)(v2 + v4) + *(void *)((*v6 & **(void **)(v2 + v4)) + 0x120)) = v16;
  swift_retain();
  swift_release();
  id v17 = *(id *)(v2 + v4);
  id v18 = specialized _UIHostingView.sheetBridge.getter();

  if (v18)
  {
    swift_unknownObjectWeakAssign();
  }
  return swift_release();
}

uint64_t outlined init with copy of BarItemView(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for BarItemView(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v5 = *(void **)(a2 + 80);
  *(void *)(a1 + 80) = v5;
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  swift_retain();
  swift_bridgeObjectRetain();
  id v6 = v5;
  swift_unknownObjectWeakCopyInit();
  return a1;
}

uint64_t specialized UIHostingController._commonInit()(uint64_t (*a1)(void), unint64_t *a2, void (*a3)(uint64_t), uint64_t (*a4)(void), void (*a5)(void), uint64_t (*a6)(void), void (*a7)(void))
{
  unsigned int v12 = v7;
  uint64_t v13 = direct field offset for UIHostingController.host;
  int v14 = *(void **)&v7[direct field offset for UIHostingController.host];
  uint64_t v15 = (void *)MEMORY[0x1E4FBC8C8];
  swift_unknownObjectWeakAssign();
  id v16 = v14;
  id v17 = v12;
  specialized _UIHostingView.updateBackgroundColor()(a1);

  MEMORY[0x18C113CA0]();
  uint64_t v18 = *(void *)&v17[direct field offset for UIHostingController.dialogBridge];
  swift_unknownObjectWeakAssign();
  uint64_t v19 = _s7SwiftUI10TestIDViewVyAA4ViewPAAE14truePreferenceyQrqd__mAA0G3KeyRd__Sb5ValueRtd__lFQOyAA01_C3AppV04RootE0V_AA030HostingGestureOverlayAuthorityH0VQo_AK04rootE10IdentifierQrvpZQOy_Qo_GACyxq_GAadAWlTm_0(a2, a3);
  *(void *)(v18 + 32) = v19;
  swift_unknownObjectWeakAssign();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  if (*(void *)&v17[direct field offset for UIHostingController.alwaysOnBridge])
  {
    swift_unknownObjectWeakAssign();
    swift_retain();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    swift_release();
  }
  *(void *)(*(void *)&v17[direct field offset for UIHostingController.fileImportExportBridge]
            + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_host
            + 8) = v19;
  swift_unknownObjectWeakAssign();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  uint64_t ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(void))(ObjectType + 1200))() & 1) == 0)
  {
    id v21 = objc_msgSend(objc_allocWithZone((Class)a4(0)), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    id v22 = *(void **)&v12[v13];
    uint64_t v23 = *(void *)((*v15 & *v22) + 0x108);
    uint64_t v24 = *(void **)((char *)v22 + v23);
    *(void *)((char *)v22 + v23) = v21;
  }
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  uint64_t v25 = (char **)&v17[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker];
  swift_beginAccess();
  uint64_t v26 = *v25;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v25 = v26;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v26 + 2) + 1, 1, v26);
    *uint64_t v25 = v26;
  }
  unint64_t v29 = *((void *)v26 + 2);
  unint64_t v28 = *((void *)v26 + 3);
  if (v29 >= v28 >> 1)
  {
    uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v29 + 1, 1, v26);
    *uint64_t v25 = v26;
  }
  *((void *)v26 + 2) = v29 + 1;
  char v30 = &v26[24 * v29];
  *((void *)v30 + 4) = &type metadata for ScreenEdgesSystemGestureKey;
  *((void *)v30 + 5) = &protocol witness table for ScreenEdgesSystemGestureKey;
  *((_DWORD *)v30 + 12) = -1;
  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  uint64_t v31 = (char **)&v17[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker];
  swift_beginAccess();
  unsigned int v32 = *v31;
  char v33 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v31 = v32;
  if ((v33 & 1) == 0)
  {
    unsigned int v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v32 + 2) + 1, 1, v32);
    *uint64_t v31 = v32;
  }
  unint64_t v35 = *((void *)v32 + 2);
  unint64_t v34 = *((void *)v32 + 3);
  if (v35 >= v34 >> 1)
  {
    unsigned int v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1, v32);
    *uint64_t v31 = v32;
  }
  *((void *)v32 + 2) = v35 + 1;
  long long v36 = &v32[24 * v35];
  *((void *)v36 + 4) = &type metadata for PersistentSystemOverlaysKey;
  *((void *)v36 + 5) = &protocol witness table for PersistentSystemOverlaysKey;
  *((_DWORD *)v36 + 12) = -1;
  swift_release();
  if (one-time initialization token for isEnabled != -1) {
    swift_once();
  }
  long long v37 = (void *)MEMORY[0x1E4FBC8C8];
  if (static ValidTestCasesFeature.isEnabled == 1)
  {
    type metadata accessor for PPTTestBridge();
    uint64_t v38 = swift_allocObject();
    *(void *)(v38 + 24) = 0;
    swift_unknownObjectWeakInit();
    *(unsigned char *)(v38 + 32) = 0;
    *(_OWORD *)(v38 + 40) = xmmword_18834BB90;
    *(void *)(v38 + 64) = 0;
    *(void *)(v38 + 72) = 0;
    *(void *)(v38 + 56) = 0;
    *(_DWORD *)(v38 + 80) = 0;
    uint64_t v39 = direct field offset for UIHostingController.testBridge;
    *(void *)&v17[direct field offset for UIHostingController.testBridge] = v38;
    swift_release();
    uint64_t v40 = *(void *)&v17[v39];
    if (v40)
    {
      *(void *)(v40 + 24) = v19;
      swift_unknownObjectWeakAssign();
    }
  }
  uint64_t v41 = *(void *)&v17[direct field offset for UIHostingController.backgroundBridge];
  swift_unknownObjectWeakAssign();
  *(void *)(v41 + 72) = v19;
  swift_unknownObjectWeakAssign();
  if (*(unsigned char *)(v41 + 137) != 5)
  {
    uint64_t v42 = swift_retain();
    ContainerBackgroundKind.Builtin.addPreference(to:)(v42);
    swift_release();
  }
  a5(0);
  swift_allocObject();
  uint64_t v43 = a6();
  swift_unknownObjectWeakAssign();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  *(void *)(*(void *)&v12[v13] + *(void *)((*v37 & **(void **)&v12[v13]) + 0x120)) = v43;
  swift_retain();
  swift_release();
  a7(0);
  uint64_t v44 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_DWORD *)(v44 + 24) = -1;
  swift_unknownObjectWeakAssign();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  *(void *)(*(void *)&v12[v13] + *(void *)((*v37 & **(void **)&v12[v13]) + 0x128)) = v44;
  swift_retain();
  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  swift_release();
  swift_release();
  return static Update.end()();
}

id @objc UIKitInspectorV3Bridge.init()()
{
  return UIKitInspectorV3Bridge.init()();
}

id UIKitInspectorV3Bridge.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  uint64_t v2 = &v0[direct field offset for UIKitInspectorV3Bridge.overrideArrowDirections];
  *(void *)uint64_t v2 = 0;
  v2[8] = 1;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(void *)&v0[direct field offset for UIKitInspectorV3Bridge.delayedPopoverPreferences] = 0;
  id v3 = &v0[direct field offset for UIKitInspectorV3Bridge.activePresentation];
  *(_OWORD *)id v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((void *)v3 + 4) = 0;
  v3[40] = 3;
  *(void *)&v0[direct field offset for UIKitInspectorV3Bridge.activeInspectorAnchor] = 0;
  v0[direct field offset for UIKitInspectorV3Bridge.dismissingReason] = 2;
  *(void *)&v0[direct field offset for UIKitInspectorV3Bridge.$__lazy_storage_$_popoverPresentationDelegate] = 0;
  *(void *)&v0[direct field offset for UIKitInspectorV3Bridge.presentedVC] = 0;
  *(_DWORD *)&v0[direct field offset for UIKitInspectorV3Bridge.inspectorSeed] = 0;
  *(_DWORD *)&v0[direct field offset for UIKitInspectorV3Bridge.anchorSeed] = 0;
  *(_DWORD *)&v0[direct field offset for UIKitInspectorV3Bridge.popoverSeed] = 0;
  *(_DWORD *)&v0[direct field offset for UIKitInspectorV3Bridge.backgroundSeed] = 0;
  *(_DWORD *)&v0[direct field offset for UIKitInspectorV3Bridge.presentationDetentsSeed] = 0;
  uint64_t v4 = MEMORY[0x1E4FBC868];
  *(void *)&v0[direct field offset for UIKitInspectorV3Bridge.lastInspectorValues] = MEMORY[0x1E4FBC868];
  *(void *)&v0[direct field offset for UIKitInspectorV3Bridge.lastAnchorValues] = v4;
  uint64_t v5 = &v0[direct field offset for UIKitInspectorV3Bridge.lastPopoverPresentation];
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  *((_OWORD *)v5 + 2) = 0u;
  *((_OWORD *)v5 + 3) = 0u;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  *((_OWORD *)v5 + 6) = 0u;
  *(void *)(v5 + 110) = 0;
  v0[direct field offset for UIKitInspectorV3Bridge.wasBackgrounded] = 0;
  v7.receiver = v0;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, sel_init);
}

void type metadata accessor for SharingActivityPickerBridge<ModifiedContent<AnyView, RootModifier>>()
{
  if (!lazy cache variable for type metadata for SharingActivityPickerBridge<ModifiedContent<AnyView, RootModifier>>)
  {
    type metadata accessor for UIHostingController<AnyView>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for RootModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, (uint64_t)&type metadata for RootModifier, (void (*)(void))lazy protocol witness table accessor for type RootModifier and conformance RootModifier);
    unint64_t v0 = type metadata accessor for SharingActivityPickerBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SharingActivityPickerBridge<ModifiedContent<AnyView, RootModifier>>);
    }
  }
}

void type metadata accessor for ShareConfigurationBridge<ModifiedContent<AnyView, RootModifier>>()
{
  if (!lazy cache variable for type metadata for ShareConfigurationBridge<ModifiedContent<AnyView, RootModifier>>)
  {
    type metadata accessor for UIHostingController<AnyView>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for RootModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, (uint64_t)&type metadata for RootModifier, (void (*)(void))lazy protocol witness table accessor for type RootModifier and conformance RootModifier);
    unint64_t v0 = type metadata accessor for ShareConfigurationBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShareConfigurationBridge<ModifiedContent<AnyView, RootModifier>>);
    }
  }
}

void type metadata accessor for UIKitInspectorV3Bridge<ModifiedContent<AnyView, RootModifier>>()
{
  if (!lazy cache variable for type metadata for UIKitInspectorV3Bridge<ModifiedContent<AnyView, RootModifier>>)
  {
    type metadata accessor for UIHostingController<AnyView>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for RootModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, (uint64_t)&type metadata for RootModifier, (void (*)(void))lazy protocol witness table accessor for type RootModifier and conformance RootModifier);
    unint64_t v0 = type metadata accessor for UIKitInspectorV3Bridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitInspectorV3Bridge<ModifiedContent<AnyView, RootModifier>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, unint64_t *a2, uint64_t a3, void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for UIHostingController<AnyView>(255, a2, MEMORY[0x1E4F41618], a3, MEMORY[0x1E4F3FBA0]);
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI10TestIDViewVyAA4ViewPAAE14truePreferenceyQrqd__mAA0G3KeyRd__Sb5ValueRtd__lFQOyAA01_C3AppV04RootE0V_AA030HostingGestureOverlayAuthorityH0VQo_AK04rootE10IdentifierQrvpZQOy_Qo_GACyxq_GAadAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *specialized _UIHostingView.sheetBridge.getter()
{
  return specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
}

{
  return specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
}

uint64_t outlined assign with take of BarItemView(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t assignWithTake for BarItemView(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  id v6 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);

  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  swift_unknownObjectWeakTakeAssign();
  return a1;
}

Swift::Void __swiftcall UIKitBarItemHost.initializeSize()()
{
  swift_getObjectType();
  swift_getWitnessTable();
  CGSize v1 = ViewRendererHost.idealSize()();

  objc_msgSend(v0, sel_setBounds_, 0.0, 0.0, v1.width, v1.height);
}

id UIHostingController.init(rootView:)(objc_class *a1)
{
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v1;
  id v4 = specialized UIHostingController.init(rootView:)(a1);
  (*(void (**)(objc_class *))(*(void *)(*(void *)(v3 + 80) - 8) + 8))(a1);
  return v4;
}

id specialized UIHostingController.init(_hostingView:)(void *a1)
{
  *(void *)&v1[direct field offset for UIHostingController.allowedBehaviors] = 0;
  *(void *)&v1[direct field offset for UIHostingController.requiredBridges] = 0;
  uint64_t v3 = (uint64_t)&v1[direct field offset for UIHostingController.overrides];
  long long v19 = xmmword_18834C6B0;
  uint64_t v20 = 0;
  char v21 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  char v22 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v19, v3);
  *(void *)&v1[direct field offset for UIHostingController.customTabItem] = 0;
  *(void *)&v1[direct field offset for UIHostingController.toolbarBridge] = 0;
  *(void *)&v1[direct field offset for UIHostingController.inspectorBridgeV5] = 0;
  *(void *)&v1[direct field offset for UIHostingController.barAppearanceBridge] = 0;
  uint64_t v4 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  uint64_t v5 = swift_allocObject();
  id v6 = v1;
  uint64_t v7 = specialized UIKitDialogBridge.init()(v5);
  swift_release();
  *(void *)&v1[v4] = v7;
  *(void *)&v6[direct field offset for UIHostingController.testBridge] = 0;
  *(void *)&v6[direct field offset for UIHostingController.contentScrollViewBridge] = 0;
  uint64_t v8 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  uint64_t v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = -1;
  *(void *)&v6[v8] = v9;
  *(void *)&v6[direct field offset for UIHostingController.alwaysOnBridge] = 0;
  uint64_t v10 = direct field offset for UIHostingController.fileImportExportBridge;
  *(void *)&v6[v10] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)&v6[direct field offset for UIHostingController.deferredEdges] = 256;
  uint64_t v11 = MEMORY[0x1E4FBC860];
  *(void *)&v6[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker] = MEMORY[0x1E4FBC860];
  unsigned int v12 = &v6[direct field offset for UIHostingController.persistentSystemOverlays];
  *(_WORD *)unsigned int v12 = 512;
  v12[2] = 3;
  *(void *)&v6[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker] = v11;
  v6[direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController] = 0;
  v6[direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController] = 0;
  uint64_t v13 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(void *)&v6[v13] = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(void *)&v6[direct field offset for UIHostingController.navigationBridge] = 0;
  *(void *)&v6[direct field offset for UIHostingController.keyboardShortcutBridge] = 0;
  *(void *)&v6[direct field offset for UIHostingController.sizingOptions] = 0;
  *(void *)&v6[direct field offset for UIHostingController.host] = a1;
  id v14 = a1;

  type metadata accessor for _SetStorage<ObjectIdentifier>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for UIHostingController);
  v18.receiver = v6;
  v18.super_class = v15;
  id v16 = objc_msgSendSuper2(&v18, sel_initWithNibName_bundle_, 0, 0);
  specialized UIHostingController._commonInit()();

  return v16;
}

id specialized UIHostingController.init(rootView:)(objc_class *a1)
{
  uint64_t v2 = v1;
  *(void *)&v1[direct field offset for UIHostingController.allowedBehaviors] = 0;
  *(void *)&v1[direct field offset for UIHostingController.requiredBridges] = 0;
  uint64_t v4 = (uint64_t)&v1[direct field offset for UIHostingController.overrides];
  long long v18 = xmmword_18834C6B0;
  uint64_t v19 = 0;
  char v20 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  char v21 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v18, v4);
  *(void *)&v2[direct field offset for UIHostingController.customTabItem] = 0;
  *(void *)&v2[direct field offset for UIHostingController.toolbarBridge] = 0;
  *(void *)&v2[direct field offset for UIHostingController.inspectorBridgeV5] = 0;
  *(void *)&v2[direct field offset for UIHostingController.barAppearanceBridge] = 0;
  uint64_t v5 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = v2;
  uint64_t v8 = specialized UIKitDialogBridge.init()(v6);
  swift_release();
  *(void *)&v2[v5] = v8;
  *(void *)&v7[direct field offset for UIHostingController.testBridge] = 0;
  *(void *)&v7[direct field offset for UIHostingController.contentScrollViewBridge] = 0;
  uint64_t v9 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + 16) = -1;
  *(void *)&v7[v9] = v10;
  *(void *)&v7[direct field offset for UIHostingController.alwaysOnBridge] = 0;
  uint64_t v11 = direct field offset for UIHostingController.fileImportExportBridge;
  *(void *)&v7[v11] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)&v7[direct field offset for UIHostingController.deferredEdges] = 256;
  uint64_t v12 = MEMORY[0x1E4FBC860];
  *(void *)&v7[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker] = MEMORY[0x1E4FBC860];
  uint64_t v13 = &v7[direct field offset for UIHostingController.persistentSystemOverlays];
  *(_WORD *)uint64_t v13 = 512;
  v13[2] = 3;
  *(void *)&v7[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker] = v12;
  v7[direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController] = 0;
  v7[direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController] = 0;
  uint64_t v14 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(void *)&v7[v14] = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(void *)&v7[direct field offset for UIHostingController.navigationBridge] = 0;
  *(void *)&v7[direct field offset for UIHostingController.keyboardShortcutBridge] = 0;
  *(void *)&v7[direct field offset for UIHostingController.sizingOptions] = 0;
  type metadata accessor for _UIHostingView();
  *(void *)&v7[direct field offset for UIHostingController.host] = specialized _UIHostingView.__allocating_init(rootView:)(a1);

  v17.receiver = v7;
  v17.super_class = (Class)type metadata accessor for UIHostingController();
  id v15 = [(objc_class *)&v17 initWithNibName:0 bundle:0];
  UIHostingController._commonInit()();

  return v15;
}

uint64_t type metadata accessor for ContainerBackgroundBridge()
{
  return self;
}

uint64_t ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(char a1)
{
  swift_unknownObjectWeakInit();
  *(void *)(v1 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 56) = 0;
  *(unsigned char *)(v1 + 60) = 1;
  *(void *)(v1 + 72) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v1 + 80) = 0;
  *(void *)(v1 + 88) = 0;
  *(void *)(v1 + 96) = 0;
  *(void *)(v1 + 104) = 1;
  *(void *)(v1 + 120) = 0;
  *(void *)(v1 + 128) = 0;
  *(void *)(v1 + 112) = 0;
  *(_WORD *)(v1 + 136) = 1280;
  *(unsigned char *)(v1 + 40) = a1;
  return v1;
}

uint64_t type metadata accessor for ModernNavigationBridge()
{
  return self;
}

uint64_t type metadata accessor for FileImportExportBridge(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for FileImportExportBridge);
}

uint64_t type metadata accessor for UIKitDialogBridge()
{
  uint64_t result = type metadata singleton initialization cache for UIKitDialogBridge;
  if (!type metadata singleton initialization cache for UIKitDialogBridge) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t specialized UIKitDialogBridge.init()(uint64_t a1)
{
  swift_unknownObjectWeakInit();
  *(void *)(a1 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(_DWORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = 2;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  swift_retain();
  EnvironmentValues.init()();
  uint64_t v2 = a1 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_lastActionContext;
  uint64_t v3 = type metadata accessor for DialogActionContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *(void *)(a1 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_lastPlatformItemList) = 0;
  uint64_t v4 = a1 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_actionsChangeDetector;
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 4) = 1;
  return a1;
}

uint64_t type metadata accessor for DialogActionContext(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for DialogActionContext);
}

uint64_t storeEnumTagSinglePayload for DialogActionContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187BBE198);
}

void type metadata accessor for _SetStorage<ObjectIdentifier>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t specialized UIHostingController._commonInit()()
{
  return specialized UIHostingController._commonInit()(specialized _UIHostingView.updateBackgroundColor(), (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for UIKitInspectorV3Bridge<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], &lazy cache variable for type metadata for SharingActivityPickerBridge<AnyView>, specialized SharingActivityPickerBridge.init(), &lazy cache variable for type metadata for ShareConfigurationBridge<AnyView>);
}

{
  char *v0;
  char *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  Class v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  char **v15;
  char *v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char **v21;
  char *v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;

  uint64_t v1 = v0;
  uint64_t v2 = direct field offset for UIHostingController.host;
  uint64_t v3 = *(void **)&v0[direct field offset for UIHostingController.host];
  uint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  swift_unknownObjectWeakAssign();
  uint64_t v5 = v3;
  unint64_t v6 = v1;
  specialized _UIHostingView.updateBackgroundColor()();

  MEMORY[0x18C113CA0]();
  uint64_t v7 = *(void *)&v6[direct field offset for UIHostingController.dialogBridge];
  swift_unknownObjectWeakAssign();
  uint64_t v8 = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>> and conformance _UIHostingView<A>();
  *(void *)(v7 + 32) = v8;
  swift_unknownObjectWeakAssign();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  if (*(void *)&v6[direct field offset for UIHostingController.alwaysOnBridge])
  {
    swift_unknownObjectWeakAssign();
    swift_retain();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    swift_release();
  }
  unint64_t v35 = v8;
  *(void *)(*(void *)&v6[direct field offset for UIHostingController.fileImportExportBridge]
            + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_host
            + 8) = v8;
  swift_unknownObjectWeakAssign();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  uint64_t ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(void))(ObjectType + 1200))() & 1) == 0)
  {
    type metadata accessor for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>(0, &lazy cache variable for type metadata for UIKitInspectorV3Bridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))type metadata accessor for UIKitInspectorV3Bridge);
    uint64_t v11 = objc_msgSend(objc_allocWithZone(v10), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    uint64_t v12 = *(void **)&v1[v2];
    uint64_t v13 = *(void *)((*v4 & *v12) + 0x108);
    uint64_t v14 = *(void **)((char *)v12 + v13);
    *(void *)((char *)v12 + v13) = v11;
  }
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  id v15 = (char **)&v6[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker];
  swift_beginAccess();
  id v16 = *v15;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  objc_class *v15 = v16;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v16 + 2) + 1, 1, v16);
    objc_class *v15 = v16;
  }
  uint64_t v19 = *((void *)v16 + 2);
  long long v18 = *((void *)v16 + 3);
  if (v19 >= v18 >> 1)
  {
    id v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v19 + 1, 1, v16);
    objc_class *v15 = v16;
  }
  *((void *)v16 + 2) = v19 + 1;
  char v20 = &v16[24 * v19];
  *((void *)v20 + 4) = &type metadata for ScreenEdgesSystemGestureKey;
  *((void *)v20 + 5) = &protocol witness table for ScreenEdgesSystemGestureKey;
  *((_DWORD *)v20 + 12) = -1;
  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  char v21 = (char **)&v6[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker];
  swift_beginAccess();
  char v22 = *v21;
  uint64_t v23 = swift_isUniquelyReferenced_nonNull_native();
  *char v21 = v22;
  if ((v23 & 1) == 0)
  {
    char v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v22 + 2) + 1, 1, v22);
    *char v21 = v22;
  }
  uint64_t v25 = *((void *)v22 + 2);
  uint64_t v24 = *((void *)v22 + 3);
  if (v25 >= v24 >> 1)
  {
    char v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25 + 1, 1, v22);
    *char v21 = v22;
  }
  *((void *)v22 + 2) = v25 + 1;
  uint64_t v26 = &v22[24 * v25];
  *((void *)v26 + 4) = &type metadata for PersistentSystemOverlaysKey;
  *((void *)v26 + 5) = &protocol witness table for PersistentSystemOverlaysKey;
  *((_DWORD *)v26 + 12) = -1;
  swift_release();
  if (one-time initialization token for isEnabled != -1) {
    swift_once();
  }
  if (static ValidTestCasesFeature.isEnabled == 1)
  {
    type metadata accessor for PPTTestBridge();
    unsigned int v27 = swift_allocObject();
    *(void *)(v27 + 24) = 0;
    swift_unknownObjectWeakInit();
    *(unsigned char *)(v27 + 32) = 0;
    *(_OWORD *)(v27 + 40) = xmmword_18834BB90;
    *(void *)(v27 + 64) = 0;
    *(void *)(v27 + 72) = 0;
    *(void *)(v27 + 56) = 0;
    *(_DWORD *)(v27 + 80) = 0;
    unint64_t v28 = direct field offset for UIHostingController.testBridge;
    *(void *)&v6[direct field offset for UIHostingController.testBridge] = v27;
    swift_release();
    unint64_t v29 = *(void *)&v6[v28];
    if (v29)
    {
      *(void *)(v29 + 24) = v35;
      swift_unknownObjectWeakAssign();
    }
  }
  char v30 = *(void *)&v6[direct field offset for UIHostingController.backgroundBridge];
  swift_unknownObjectWeakAssign();
  *(void *)(v30 + 72) = v35;
  swift_unknownObjectWeakAssign();
  if (*(unsigned char *)(v30 + 137) != 5)
  {
    uint64_t v31 = swift_retain();
    ContainerBackgroundKind.Builtin.addPreference(to:)(v31);
    swift_release();
  }
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>(0, &lazy cache variable for type metadata for SharingActivityPickerBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))type metadata accessor for SharingActivityPickerBridge);
  swift_allocObject();
  unsigned int v32 = specialized SharingActivityPickerBridge.init()();
  swift_unknownObjectWeakAssign();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  *(void *)(*(void *)&v1[v2] + *(void *)((*v4 & **(void **)&v1[v2]) + 0x120)) = v32;
  swift_retain();
  swift_release();
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>(0, &lazy cache variable for type metadata for ShareConfigurationBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))type metadata accessor for ShareConfigurationBridge);
  char v33 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_DWORD *)(v33 + 24) = -1;
  swift_unknownObjectWeakAssign();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  *(void *)(*(void *)&v1[v2] + *(void *)((*v4 & **(void **)&v1[v2]) + 0x128)) = v33;
  swift_retain();
  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  swift_release();
  swift_release();
  return static Update.end()();
}

void type metadata accessor for UIHostingController<AnyView>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t specialized SharingActivityPickerBridge.init()()
{
  swift_unknownObjectWeakInit();
  *(void *)(v0 + 24) = 0;
  *(unsigned char *)(v0 + 32) = 1;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  _s7SwiftUI33SharingActivityPickerPresentation33_ED8966F32E79CAE8636A59B86DBA4A31LLVSgWOi0_((uint64_t)v2);
  outlined init with take of SharingActivityPickerPresentation?((uint64_t)v2, v0 + 56, (uint64_t)&lazy cache variable for type metadata for SharingActivityPickerPresentation?, (uint64_t)&type metadata for SharingActivityPickerPresentation, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ToolbarItemPlacement.Role?);
  *(void *)(v0 + 208) = 0;
  *(_DWORD *)(v0 + 216) = 0;
  *(void *)(v0 + 224) = 0;
  *(unsigned char *)(v0 + 232) = 0;
  return v0;
}

uint64_t outlined init with take of SharingActivityPickerPresentation?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

void type metadata accessor for ToolbarItemPlacement.Role?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

ValueMetadata *type metadata accessor for ToolbarCustomizationBehavior()
{
  return &type metadata for ToolbarCustomizationBehavior;
}

Swift::Void __swiftcall AppSceneDelegate.scene(_:willConnectTo:options:)(UIScene *_, UISceneSession willConnectTo, UISceneConnectionOptions options)
{
  uint64_t v4 = v3;
  Class isa = willConnectTo.super.isa;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v160 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  v182 = (char *)&v160 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v181 = type metadata accessor for DispatchTime();
  uint64_t v184 = *(void *)(v181 - 8);
  MEMORY[0x1F4188790](v181);
  v180 = (char *)&v160 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  v183 = (char *)&v160 - v17;
  MEMORY[0x18C113CA0](v16);
  if (*(void *)(v4 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_window)
    || (uint64_t v172 = OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_window,
        self,
        (uint64_t v18 = swift_dynamicCastObjCClass()) == 0)
    || (uint64_t v19 = static AppGraph.shared) == 0)
  {
    static Update.end()();
    return;
  }
  uint64_t v166 = v18;
  uint64_t v176 = v8;
  uint64_t v177 = v12;
  uint64_t v174 = v11;
  v175 = v10;
  char v20 = _;
  uint64_t v163 = v19;
  swift_retain();
  AppSceneDelegate.appDelegate.getter();
  char v22 = v21;
  uint64_t v23 = *(void **)&v21[OBJC_IVAR____TtC7SwiftUI11AppDelegate_fallbackDelegate];
  swift_unknownObjectRetain();

  Class v24 = isa;
  if (v23)
  {
    if (!objc_msgSend(v23, sel_respondsToSelector_, sel_application_configurationForConnectingSceneSession_options_)|| (objc_msgSend(v23, sel_respondsToSelector_, sel_application_configurationForConnectingSceneSession_options_) & 1) == 0|| (uint64_t v25 = self, swift_unknownObjectRetain(), v26 = objc_msgSend(v25, sel_sharedApplication), v27 = objc_msgSend(v23, sel_application_configurationForConnectingSceneSession_options_, v26, v24, options.super.isa), v26, swift_unknownObjectRelease(),
          !v27))
    {
      swift_unknownObjectRelease();
      goto LABEL_18;
    }
    if (!objc_msgSend(v27, sel_delegateClass)) {
      goto LABEL_78;
    }
    uint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    id v29 = objc_msgSend(v27, sel_sceneDelegate);
    if (swift_conformsToProtocol2()) {
      uint64_t v30 = ObjCClassMetadata;
    }
    else {
      uint64_t v30 = 0;
    }
    if (v30)
    {
      project #1 <A>(_:) in AppSceneDelegate.scene(_:willConnectTo:options:)(ObjCClassMetadata, v4);
      swift_unknownObjectRelease();
LABEL_78:
      swift_unknownObjectRelease();

      goto LABEL_18;
    }
    id v173 = v27;
    lazy protocol witness table accessor for type ObservableObjectDescriptor and conformance ObservableObjectDescriptor();
    static ProtocolDescriptor.conformance(of:)();
    if ((void)v192)
    {
      uint64_t v171 = (uint64_t)v20;
      uint64_t ObjectType = (void *)swift_getObjectType();
      v195 = 0;
      *(void *)&long long v192 = v29;
      swift_unknownObjectRetain();
      char v20 = (UIScene *)v171;
      MakeObservableObjectDelegateBox.visit<A>(type:)();
      *(void *)(v4 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneDelegateBox) = v195;
      swift_retain();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();

      swift_release();
      outlined destroy of MakeObservableObjectDelegateBox((uint64_t)&v192);
    }
    else
    {
      type metadata accessor for FallbackDelegateBox<NSObject>(0, &lazy cache variable for type metadata for FallbackDelegateBox<NSObject>, (unint64_t *)&lazy cache variable for type metadata for NSObject, 0x1E4FBA8A8, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for FallbackDelegateBox);
      uint64_t v159 = swift_allocObject();
      *(void *)(v159 + 16) = v29;
      *(unsigned char *)(v159 + 24) = 1;
      *(void *)(v4 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneDelegateBox) = v159;
      swift_unknownObjectRelease();

      swift_release();
    }
  }
LABEL_18:
  uint64_t v200 = 0;
  uint64_t v201 = 0;
  unsigned __int8 v202 = -1;
  id v31 = [(objc_class *)v24 stateRestorationActivity];
  uint64_t v178 = v7;
  if (!v31)
  {
LABEL_28:
    uint64_t v35 = MEMORY[0x1E4FBC868];
    goto LABEL_29;
  }
  unsigned int v32 = v31;
  id v33 = objc_msgSend(v31, sel_userInfo);
  if (!v33)
  {

    goto LABEL_28;
  }
  unint64_t v34 = v33;
  uint64_t v35 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v185 = 0xD000000000000019;
  unint64_t v186 = 0x8000000188325FA0;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v35 + 16) && (unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v192), (v37 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v35 + 56) + 32 * v36, (uint64_t)&v188);
  }
  else
  {
    long long v188 = 0u;
    long long v189 = 0u;
  }

  outlined destroy of AnyHashable((uint64_t)&v192);
  if (*((void *)&v189 + 1))
  {
    if (swift_dynamicCast())
    {
      uint64_t v38 = v185;
      uint64_t v39 = v186;
      outlined consume of SceneID?(v200, v201, v202);
      uint64_t v200 = v38;
      uint64_t v201 = v39;
      unsigned __int8 v202 = 0;
    }
  }
  else
  {
    outlined destroy of RootEnvironmentModifier?((uint64_t)&v188, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
  }
LABEL_29:
  type metadata accessor for SceneStorageValues();
  uint64_t v40 = (void *)swift_allocObject();
  swift_bridgeObjectRetain();
  v40[3] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  v40[6] = 0;
  swift_unknownObjectWeakInit();
  v40[2] = v35;
  v40[4] = *(void *)(v35 + 16);
  *(void *)(v4 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneStorageValues) = v40;
  swift_release();
  type metadata accessor for SceneBridge();
  swift_allocObject();
  uint64_t v41 = v20;
  uint64_t v42 = (void *)SceneBridge.init()();
  uint64_t v43 = (objc_class *)v166;
  swift_unknownObjectWeakAssign();
  v162 = v41;

  *(void *)(v4 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneBridge) = v42;
  id v173 = v42;
  swift_retain();
  swift_release();
  id v44 = [(objc_class *)options.super.isa URLContexts];
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext);
  lazy protocol witness table accessor for type UIScene and conformance NSObject(&lazy protocol witness table cache variable for type UIOpenURLContext and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext);
  uint64_t v45 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v185 = v45;
  MEMORY[0x1F4188790](v46);
  *(&v160 - 8) = (objc_class *)v4;
  *(&v160 - 7) = (objc_class *)&v200;
  *(&v160 - 6) = (objc_class *)v35;
  *(&v160 - 5) = options.super.isa;
  *(&v160 - 4) = (objc_class *)&v185;
  *(&v160 - 3) = v24;
  *(&v160 - 2) = v43;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIWindow);
  static Update.ensure<A>(_:)();
  swift_bridgeObjectRelease();
  uint64_t v171 = v192;
  id v47 = [(objc_class *)v24 userInfo];
  if (v47)
  {
    uint64_t v48 = v47;
    uint64_t v49 = MEMORY[0x1E4FBC840] + 8;
    uint64_t v50 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v199 = v50;
    unint64_t v51 = (uint64_t *)(v4 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID);
    int v52 = *(unsigned __int8 *)(v4 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID + 16);
    if (v52 == 255)
    {
      specialized Dictionary._Variant.removeValue(forKey:)(0xD000000000000019, 0x8000000188325FA0, &v192);
      outlined destroy of RootEnvironmentModifier?((uint64_t)&v192, (unint64_t *)&lazy cache variable for type metadata for Any?, v49);
      v55 = v173;
      if (v199)
      {
LABEL_38:
        Class v56 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v54 = *v51;
      uint64_t v53 = v51[1];
      v55 = v173;
      if (v52)
      {
        *(void *)&long long v192 = _typeName(_:qualified:)();
        *((void *)&v192 + 1) = v57;
        v58._countAndFlagsBits = 45;
        v58._object = (void *)0xE100000000000000;
        String.append(_:)(v58);
        LOBYTE(v188) = v53;
        v59._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v59);
        swift_bridgeObjectRelease();
        outlined consume of SceneID?(v54, v53, v52);
        uint64_t v53 = *((void *)&v192 + 1);
        uint64_t v54 = v192;
        uint64_t v50 = v199;
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      uint64_t ObjectType = (void *)MEMORY[0x1E4FBB1A0];
      *(void *)&long long v192 = v54;
      *((void *)&v192 + 1) = v53;
      outlined init with take of Any(&v192, &v188);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v187 = v50;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v188, 0xD000000000000019, 0x8000000188325FA0, isUniquelyReferenced_nonNull_native);
      uint64_t v61 = v187;
      uint64_t v199 = v187;
      swift_bridgeObjectRelease();
      if (v61) {
        goto LABEL_38;
      }
    }
    Class v56 = 0;
LABEL_39:
    [(objc_class *)v24 setUserInfo:v56];

    goto LABEL_40;
  }
  [(objc_class *)v24 setUserInfo:0];
  swift_bridgeObjectRelease();
  v55 = v173;
LABEL_40:
  id v62 = [(objc_class *)v24 userInfo];
  if (v62)
  {
    v63 = v62;
    uint64_t v64 = MEMORY[0x1E4FBC840] + 8;
    v65 = (void *)MEMORY[0x1E4FBB1A0];
    uint64_t v66 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v199 = v66;
    if (*(void *)(v4 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_presentationDataType))
    {
      makeStableTypeData(_:)();
      long long v188 = v192;
      LODWORD(v189) = v193;
      uint64_t v67 = StrongHash.description.getter();
      uint64_t ObjectType = v65;
      *(void *)&long long v192 = v67;
      *((void *)&v192 + 1) = v68;
      outlined init with take of Any(&v192, &v188);
      char v69 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v187 = v66;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v188, 0xD00000000000001BLL, 0x800000018832B230, v69);
      uint64_t v70 = v187;
      uint64_t v199 = v187;
      swift_bridgeObjectRelease();
    }
    else
    {
      specialized Dictionary._Variant.removeValue(forKey:)(0xD00000000000001BLL, 0x800000018832B230, &v192);
      outlined destroy of RootEnvironmentModifier?((uint64_t)&v192, (unint64_t *)&lazy cache variable for type metadata for Any?, v64);
      uint64_t v70 = v199;
    }
    v71 = (void *)v171;
    if (v70)
    {
      v72.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }
    else
    {
      v72.super.Class isa = 0;
    }
    [(objc_class *)v24 setUserInfo:v72.super.isa];
  }
  else
  {
    [(objc_class *)v24 setUserInfo:0];
    swift_bridgeObjectRelease();
    v71 = (void *)v171;
  }
  v73 = (uint64_t *)(v4 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_rawPresentationDataValue);
  unint64_t v74 = *(void *)(v4 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_rawPresentationDataValue + 8);
  if (v74 >> 60 != 15)
  {
    uint64_t v75 = *v73;
    outlined copy of Data._Representation(*v73, *(void *)(v4 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_rawPresentationDataValue + 8));
    id v76 = [(objc_class *)v24 userInfo];
    if (v76)
    {
      v77 = v76;
      uint64_t v171 = MEMORY[0x1E4FBC840] + 8;
      uint64_t v78 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t ObjectType = (void *)MEMORY[0x1E4F277C0];
      *(void *)&long long v192 = v75;
      *((void *)&v192 + 1) = v74;
      outlined init with take of Any(&v192, &v188);
      outlined copy of Data._Representation(v75, v74);
      char v79 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v199 = v78;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v188, 0xD00000000000001CLL, 0x800000018832B210, v79);
      uint64_t v80 = v199;
      swift_bridgeObjectRelease();
      if (v80)
      {
        v81.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
      }
      else
      {
        v81.super.Class isa = 0;
      }
      [(objc_class *)v24 setUserInfo:v81.super.isa];
      outlined consume of Data?(v75, v74);
    }
    else
    {
      [(objc_class *)v24 setUserInfo:0];
      outlined consume of Data?(v75, v74);
      swift_bridgeObjectRelease();
    }
  }
  id v82 = objc_msgSend(v71, sel_rootViewController);
  uint64_t v83 = swift_unknownObjectWeakAssign();
  v84 = (void *)v55[10];
  if (v84)
  {
    uint64_t v85 = MEMORY[0x18C119DF0](v83);
    if (v85)
    {
      v86 = (void *)v85;
      id v87 = v84;
      objc_msgSend(v86, sel_setUserActivity_, v87);
      v88 = (void *)v55[10];
      v55[10] = 0;

      objc_msgSend(v87, sel_becomeCurrent);
      id v82 = v86;
    }
  }
  v89 = v180;

  v90 = *(void **)(v4 + v172);
  *(void *)(v4 + v172) = v71;
  id v91 = v71;

  objc_msgSend(v91, sel_makeKeyAndVisible);
  AppSceneDelegate.sceneItem()(&v192);
  uint64_t v92 = v197;
  uint64_t v93 = v198;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined destroy of SceneList.Item((uint64_t)&v192);
  uint64_t v94 = *(void *)(v92 + 16);
  uint64_t v165 = v4;
  id v161 = v91;
  if (v94)
  {
    swift_bridgeObjectRetain();
    uint64_t v95 = v92 + 40;
    do
    {
      specialized _do #1 <A>(_:) in handleConnectionOptionsCallbacks #1 (_:) in AppSceneDelegate.scene(_:willConnectTo:options:)(*(void *)(v95 - 8), (uint64_t)options.super.isa, v93, *(void *)(v95 - 8));
      v95 += 16;
      --v94;
    }
    while (v94);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v96 = v178;
  v97 = v183;
  uint64_t v98 = v184;
  swift_bridgeObjectRelease();
  uint64_t v172 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v168 = (void (*)(void, void))static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  MEMORY[0x18C115270](v89, 0.1);
  v164 = *(void (**)(char *, uint64_t))(v98 + 8);
  v164(v89, v181);
  v99 = (UISceneConnectionOptions *)swift_allocObject();
  v99[2].super.Class isa = (Class)v173;
  v99[3].super.Class isa = options.super.isa;
  v195 = partial apply for closure #2 in AppSceneDelegate.scene(_:willConnectTo:options:);
  uint64_t v196 = (uint64_t)v99;
  *(void *)&long long v192 = MEMORY[0x1E4F143A8];
  *((void *)&v192 + 1) = 1107296256;
  v193 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t ObjectType = &block_descriptor_8;
  v100 = _Block_copy(&v192);
  swift_retain();
  v101 = options.super.isa;
  swift_release();
  v102 = v182;
  static DispatchQoS.unspecified.getter();
  *(void *)&long long v192 = MEMORY[0x1E4FBC860];
  uint64_t v103 = lazy protocol witness table accessor for type SceneBridge and conformance SceneBridge((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  type metadata accessor for PPTTestHost?(0, (unint64_t *)&lazy cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E4FBCB00], MEMORY[0x1E4FBB320]);
  uint64_t v105 = v104;
  unint64_t v106 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  v107 = v175;
  unint64_t v169 = v106;
  uint64_t v170 = v105;
  uint64_t v171 = v103;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v108 = v168;
  MEMORY[0x18C116850](v97, v102, v107, v100);
  _Block_release(v100);

  uint64_t v109 = v176 + 8;
  v168 = *(void (**)(void, void))(v176 + 8);
  v168(v107, v96);
  uint64_t v110 = v177 + 8;
  v167 = *(void (**)(char *, uint64_t))(v177 + 8);
  v167(v102, v174);
  uint64_t v111 = v181;
  uint64_t v184 = v98 + 8;
  v112 = v164;
  v164(v97, v181);
  v160 = v101;
  id v113 = [(objc_class *)v101 userActivities];
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSUserActivity);
  lazy protocol witness table accessor for type UIScene and conformance NSObject(&lazy protocol witness table cache variable for type NSUserActivity and conformance NSObject, &lazy cache variable for type metadata for NSUserActivity);
  uint64_t v114 = v178;
  uint64_t v115 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  v116 = (void *)specialized Collection.first.getter(v115);
  v117 = v112;
  swift_bridgeObjectRelease();
  uint64_t v176 = v109;
  if (v116)
  {
    uint64_t v177 = static OS_dispatch_queue.main.getter();
    v118 = v180;
    static DispatchTime.now()();
    MEMORY[0x18C115270](v118, 0.1);
    v112(v118, v111);
    uint64_t v119 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v120 = swift_allocObject();
    *(void *)(v120 + 16) = v116;
    *(void *)(v120 + 24) = v119;
    v195 = partial apply for closure #3 in AppSceneDelegate.scene(_:willConnectTo:options:);
    uint64_t v196 = v120;
    *(void *)&long long v192 = MEMORY[0x1E4F143A8];
    *((void *)&v192 + 1) = 1107296256;
    v193 = thunk for @escaping @callee_guaranteed () -> ();
    uint64_t ObjectType = &block_descriptor_83;
    v121 = v112;
    v122 = _Block_copy(&v192);
    id v123 = v116;
    swift_release();
    v124 = v182;
    static DispatchQoS.unspecified.getter();
    *(void *)&long long v192 = MEMORY[0x1E4FBC860];
    v125 = v175;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    v126 = v183;
    v127 = (void *)v177;
    MEMORY[0x18C116850](v183, v124, v125, v122);
    v128 = v122;
    v117 = v121;
    uint64_t v111 = v181;
    _Block_release(v128);

    v168(v125, v114);
    v167(v124, v174);
    v117(v126, v111);
  }
  uint64_t v177 = v110;
  uint64_t v129 = swift_bridgeObjectRetain();
  v130 = (void *)specialized Collection.first.getter(v129);
  swift_bridgeObjectRelease();
  uint64_t v131 = v165;
  if (v130)
  {
    v132 = (void *)static OS_dispatch_queue.main.getter();
    v133 = v180;
    static DispatchTime.now()();
    MEMORY[0x18C115270](v133, 0.1);
    v117(v133, v111);
    uint64_t v134 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v135 = swift_allocObject();
    *(void *)(v135 + 16) = v130;
    *(void *)(v135 + 24) = v134;
    v195 = partial apply for closure #4 in AppSceneDelegate.scene(_:willConnectTo:options:);
    uint64_t v196 = v135;
    *(void *)&long long v192 = MEMORY[0x1E4F143A8];
    *((void *)&v192 + 1) = 1107296256;
    v193 = thunk for @escaping @callee_guaranteed () -> ();
    uint64_t ObjectType = &block_descriptor_76;
    v136 = _Block_copy(&v192);
    id v137 = v130;
    swift_release();
    v138 = v182;
    static DispatchQoS.unspecified.getter();
    *(void *)&long long v192 = MEMORY[0x1E4FBC860];
    v139 = v175;
    uint64_t v140 = v178;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    v141 = v183;
    MEMORY[0x18C116850](v183, v138, v139, v136);
    _Block_release(v136);

    v168(v139, v140);
    v167(v138, v174);
    v164(v141, v181);
  }
  uint64_t v142 = v163;
  GraphHost.addPreference<A>(_:)();
  specialized AppGraph.addObserver(_:)(v131, v142);
  uint64_t v143 = *(void *)(v131 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneDelegateBox);
  v144 = v182;
  uint64_t v145 = MEMORY[0x1E4FBC860];
  v146 = v162;
  uint64_t v147 = v178;
  if (v143)
  {
    v148 = *(uint64_t (**)(uint64_t))(*(void *)v143 + 80);
    uint64_t v149 = swift_retain();
    uint64_t v150 = v148(v149);
    uint64_t v147 = v178;
    v151 = (void *)v150;
    swift_release();
    if (v151)
    {
      v191 = &unk_1ED4DD6D0;
      if (swift_dynamicCastObjCProtocolConditional())
      {
        v190 = &unk_1ED4DD8F0;
        v152 = (void *)swift_dynamicCastObjCProtocolConditional();
        if (v152)
        {
          v153 = v152;
          if (objc_msgSend(v152, sel_respondsToSelector_, sel_scene_willConnectToSession_options_)) {
            objc_msgSend(v153, sel_scene_willConnectToSession_options_, v146, isa, v160);
          }
        }
      }
    }
  }
  v154 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v155 = swift_allocObject();
  *(void *)(v155 + 16) = v166;
  v195 = partial apply for closure #5 in AppSceneDelegate.scene(_:willConnectTo:options:);
  uint64_t v196 = v155;
  *(void *)&long long v192 = MEMORY[0x1E4F143A8];
  *((void *)&v192 + 1) = 1107296256;
  v193 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t ObjectType = &block_descriptor_67;
  v156 = _Block_copy(&v192);
  v157 = v146;
  swift_release();
  static DispatchQoS.unspecified.getter();
  *(void *)&long long v192 = v145;
  v158 = v175;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x18C116870](0, v144, v158, v156);
  _Block_release(v156);

  v168(v158, v147);
  v167(v144, v174);
  if ((static AppSceneDelegate.hasConnectedFirstScene & 1) == 0) {
    static AppSceneDelegate.hasConnectedFirstScene = 1;
  }
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of SceneID?(v200, v201, v202);
  static Update.end()();
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    type metadata accessor for _ContiguousArrayStorage<(index: Int, element: TabCustomizationID, id: TabCustomizationID)>(255, (unint64_t *)&lazy cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E4FBCB00], MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type UIScene and conformance NSObject(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for NSObject(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void _UIHostingView.colorScheme.setter(unsigned char *a1)
{
  uint64_t v2 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0xD8);
  unsigned __int8 v3 = *((unsigned char *)v1 + v2);
  *((unsigned char *)v1 + v2) = *a1;
  unsigned __int8 v4 = v3;
  _UIHostingView.didChangeColorScheme(from:)(&v4);
}

void _UIHostingView.didChangeColorScheme(from:)(unsigned __int8 *a1)
{
  int v1 = *a1;
  _UIHostingView.colorScheme.getter(&v2);
  if (v1 == 2)
  {
    if (v2 == 2) {
      return;
    }
LABEL_6:
    _UIHostingView.viewController.getter();
  }
  if (v2 == 2 || ((v2 ^ v1) & 1) != 0) {
    goto LABEL_6;
  }
}

uint64_t RootViewDelegate.hostingView<A>(_:willUpdate:)(void *a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4FBC8C8] & *a1;
  _UIHostingView.colorScheme.getter(&v9);
  EnvironmentValues.explicitPreferredColorScheme.setter();
  uint64_t result = MEMORY[0x18C119DF0](v2 + 24);
  if (result)
  {
    uint64_t v7 = *(void *)(v2 + 32);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, uint64_t, void, void, uint64_t, uint64_t))(v7 + 16))(a1, a2, *(void *)(v5 + 80), *(void *)(v5 + 88), ObjectType, v7);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t @objc UIHostingController.preferredStatusBarStyle.getter(void *a1)
{
  id v1 = a1;
  uint64_t v2 = UIHostingController.preferredStatusBarStyle.getter();

  return v2;
}

uint64_t UIHostingController._preferredStatusBarStyle.getter()
{
  uint64_t v0 = (void *)specialized UIHostingController.barAppearanceBridge.getter();
  if (v0)
  {
    id v1 = v0;
    uint64_t v2 = BarAppearanceBridge.uiPreferredStatusBarStyle.getter();
    char v4 = v3;

    if ((v4 & 1) == 0) {
      return v2;
    }
  }
  id v6 = (id)specialized UIHostingController.host.getter();
  uint64_t v7 = _UIHostingView.preferredStatusBarStyle.getter();

  return v7;
}

uint64_t _UIHostingView.preferredStatusBarStyle.getter()
{
  _UIHostingView.colorScheme.getter(&v5);
  char v0 = v5;
  if (v5 == 2) {
    return 0;
  }
  BOOL IsInvertColorsEnabled = UIAccessibilityIsInvertColorsEnabled();
  uint64_t v3 = 3;
  if (v0) {
    uint64_t v3 = 1;
  }
  uint64_t v4 = 3;
  if ((v0 & 1) == 0) {
    uint64_t v4 = 1;
  }
  if (IsInvertColorsEnabled) {
    return v4;
  }
  else {
    return v3;
  }
}

id @objc UIHostingController.childForStatusBarStyle.getter(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)UIHostingController.childForStatusBarStyle.getter();

  return v2;
}

unint64_t UIHostingController._childForStatusBarStyle.getter()
{
  unint64_t v1 = v0;
  specialized UIHostingController.host.getter();
  _UIHostingView.colorScheme.getter(&v15);
  if (v15 != 2) {
    return 0;
  }
  uint64_t v2 = (void *)specialized UIHostingController.barAppearanceBridge.getter();
  if (v2)
  {
    id v3 = v2;
    BOOL HasStatusBar = BarAppearanceBridge.uiHasStatusBarOpinion.getter();

    if (HasStatusBar) {
      return 0;
    }
  }
  specialized UIHostingController.host.getter();
  if ((_UIHostingView.shouldDeferToChildViewControllerForStatusBar.getter() & 1) == 0) {
    return 0;
  }
  id v5 = objc_msgSend((id)v1, sel_childViewControllers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v6 >> 62))
  {
    uint64_t v7 = *(char **)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      goto LABEL_13;
    }
LABEL_7:
    uint64_t v8 = v7 - 1;
    if (__OFSUB__(v7, 1))
    {
      __break(1u);
    }
    else if ((v6 & 0xC000000000000001) == 0)
    {
      if (((unint64_t)v8 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if ((unint64_t)v8 < *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        char v9 = (char *)*(id *)(v6 + 8 * (void)v8 + 32);
LABEL_12:
        uint64_t v7 = v9;
        goto LABEL_13;
      }
      __break(1u);
      goto LABEL_28;
    }
    char v9 = (char *)MEMORY[0x18C117680](v8, v6);
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = (char *)_CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v7) {
    goto LABEL_7;
  }
LABEL_13:
  swift_bridgeObjectRelease();
  id v10 = objc_msgSend(v7, sel_childViewControllerForStatusBarStyle);

  if (v10) {
    return (unint64_t)v10;
  }
  id v11 = objc_msgSend((id)v1, sel_childViewControllers);
  unint64_t v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v1 >> 62))
  {
    uint64_t v12 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v12) {
      goto LABEL_16;
    }
    goto LABEL_29;
  }
LABEL_28:
  swift_bridgeObjectRetain();
  uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v12)
  {
LABEL_29:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_16:
  unint64_t result = v12 - 1;
  if (__OFSUB__(v12, 1))
  {
    __break(1u);
    goto LABEL_33;
  }
  if ((v1 & 0xC000000000000001) != 0)
  {
LABEL_33:
    id v14 = (id)MEMORY[0x18C117680](result, v1);
    goto LABEL_21;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v14 = *(id *)(v1 + 8 * result + 32);
LABEL_21:
    id v10 = v14;
    swift_bridgeObjectRelease();
    return (unint64_t)v10;
  }
  __break(1u);
  return result;
}

void _UIHostingView.colorScheme.getter(unsigned char *a1@<X8>)
{
  *a1 = *((unsigned char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0xD8));
}

void protocol witness for UIHostingViewDelegate.hostingView<A>(_:willUpdate:) in conformance AppSceneDelegate(uint64_t a1, uint64_t a2)
{
}

void specialized AppSceneDelegate.hostingView<A>(_:willUpdate:)(uint64_t a1)
{
  AppSceneDelegate.appDelegate.getter();
  id v3 = *(void **)&v2[OBJC_IVAR____TtC7SwiftUI11AppDelegate_mainMenuController];
  if (v3)
  {
    id v5 = v2;
    id v4 = v3;

    UIKitMainMenuController.documentCommands()();
    type metadata accessor for EnvironmentPropertyKey<SceneSessionKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DocumentCommandsKey>, (uint64_t)&type metadata for EnvironmentValues.DocumentCommandsKey, (uint64_t)&protocol witness table for EnvironmentValues.DocumentCommandsKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneSessionKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DocumentCommandsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DocumentCommandsKey>, (uint64_t)&type metadata for EnvironmentValues.DocumentCommandsKey, (uint64_t)&protocol witness table for EnvironmentValues.DocumentCommandsKey);
    swift_bridgeObjectRetain();
    swift_retain();
    PropertyList.subscript.setter();
    if (*(void *)(a1 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();

      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    swift_release();
  }
  else
  {
  }
}

void AppSceneDelegate.appDelegate.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate____lazy_storage___appDelegate;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate____lazy_storage___appDelegate);
  if (v2) {
    goto LABEL_4;
  }
  id v3 = objc_msgSend(self, sel_sharedApplication);
  id v4 = objc_msgSend(v3, sel_delegate);

  if (v4)
  {
    type metadata accessor for AppDelegate();
    uint64_t v5 = swift_dynamicCastClassUnconditional();
    unint64_t v6 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v5;
    swift_unknownObjectRetain();

    uint64_t v2 = 0;
LABEL_4:
    id v7 = v2;
    return;
  }
  __break(1u);
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  id v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    unint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    return outlined init with take of Any(a1, v19);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  id v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *id v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *id v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, void (*a2)(void))
{
  if (!*(void *)(a1 + 16))
  {
    id v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  a2(0);
  id v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v6 = *(v5 - 2);
    uint64_t v7 = *(v5 - 1);
    uint64_t v8 = *v5;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if (v10) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v11 = v6;
    v11[1] = v7;
    *(void *)(v3[7] + 8 * result) = v8;
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t specialized AppGraph.addObserver(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 192);
  swift_beginAccess();
  uint64_t v5 = swift_bridgeObjectRetain();
  *(void *)(a2 + 192) = specialized _NativeSet.filter(_:)(v5);
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  uint64_t v19 = a1;
  uint64_t v6 = MEMORY[0x1E4FBC838];
  uint64_t v7 = MEMORY[0x1E4FBC838] + 8;
  _ss11AnyHashableVSgWObTm_1((uint64_t)v18, (uint64_t)v20, &lazy cache variable for type metadata for HashableWeakBox<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4F3FB58]);
  swift_beginAccess();
  uint64_t v8 = *(void *)(a2 + 192);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v21);
  Swift::Int v9 = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  unint64_t v11 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
  {
    uint64_t v12 = ~v10;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of HashableWeakBox<Swift.AnyObject>(*(void *)(v8 + 48) + 16 * v11, (uint64_t)v18);
      uint64_t v13 = v19;
      Swift::UInt v14 = v21;
      outlined destroy of HashableWeakBox<Swift.AnyObject>((uint64_t)v18, &lazy cache variable for type metadata for HashableWeakBox<Swift.AnyObject>, v7, MEMORY[0x1E4F3FB58]);
      if (v13 == v14) {
        break;
      }
      unint64_t v11 = (v11 + 1) & v12;
      if (((*(void *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    outlined init with copy of HashableWeakBox<Swift.AnyObject>((uint64_t)v20, (uint64_t)v18);
    uint64_t v17 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v18, v11, isUniquelyReferenced_nonNull_native);
    *uint64_t v4 = v17;
  }
  swift_bridgeObjectRelease();
  outlined destroy of HashableWeakBox<Swift.AnyObject>((uint64_t)v20, &lazy cache variable for type metadata for HashableWeakBox<Swift.AnyObject>, v6 + 8, MEMORY[0x1E4F3FB58]);
  return swift_endAccess();
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  v9[1] = *MEMORY[0x1E4F143B8];
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    bzero((char *)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    uint64_t v6 = specialized closure #1 in _NativeSet.filter(_:)((uint64_t)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v4, v2);
    swift_release();
    if (v1) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    uint64_t v6 = specialized closure #1 in _NativeSet.filter(_:)((uint64_t)v7, v4, v2);
    swift_release();
    MEMORY[0x18C119C60](v7, -1, -1);
  }
  return v6;
}

uint64_t specialized closure #1 in _NativeSet.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = (unint64_t *)result;
  int64_t v4 = 0;
  uint64_t v5 = a3 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v10 = MEMORY[0x1E4FBC838] + 8;
  while (1)
  {
    if (v8)
    {
      unint64_t v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v12 = v11 | (v4 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v9) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v5 + 8 * v14);
    ++v4;
    if (!v15)
    {
      int64_t v4 = v14 + 1;
      if (v14 + 1 >= v9) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v5 + 8 * v4);
      if (!v15)
      {
        int64_t v4 = v14 + 2;
        if (v14 + 2 >= v9) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v5 + 8 * v4);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v15 - 1) & v15;
    unint64_t v12 = __clz(__rbit64(v15)) + (v4 << 6);
LABEL_5:
    outlined init with copy of HashableWeakBox<Swift.AnyObject>(*(void *)(a3 + 48) + 16 * v12, (uint64_t)v20);
    uint64_t v13 = MEMORY[0x18C119DF0](v20);
    swift_unknownObjectRelease();
    unint64_t result = outlined destroy of HashableWeakBox<Swift.AnyObject>((uint64_t)v20, &lazy cache variable for type metadata for HashableWeakBox<Swift.AnyObject>, v10, MEMORY[0x1E4F3FB58]);
    if (v13)
    {
      *(unint64_t *)((char *)v19 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v21++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        return specialized _NativeSet.extractSubset(using:count:)(v19, a2, v21, a3);
      }
    }
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v9) {
    goto LABEL_24;
  }
  unint64_t v15 = *(void *)(v5 + 8 * v16);
  if (v15)
  {
    int64_t v4 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v4 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v4 >= v9) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v5 + 8 * v4);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3)
  {
    swift_release();
    return MEMORY[0x1E4FBC870];
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  type metadata accessor for _SetStorage<HashableWeakBox<Swift.AnyObject>>();
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v6 = result;
  unint64_t v28 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 56;
  uint64_t v13 = MEMORY[0x1E4FBC838] + 8;
  while (1)
  {
    if (v10)
    {
      unint64_t v14 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v15 = v14 | (v11 << 6);
    }
    else
    {
      uint64_t v16 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v16 >= a2)
      {
LABEL_37:
        swift_release();
        return v6;
      }
      unint64_t v17 = v28[v16];
      ++v11;
      if (!v17)
      {
        uint64_t v11 = v16 + 1;
        if (v16 + 1 >= a2) {
          goto LABEL_37;
        }
        unint64_t v17 = v28[v11];
        if (!v17)
        {
          uint64_t v11 = v16 + 2;
          if (v16 + 2 >= a2) {
            goto LABEL_37;
          }
          unint64_t v17 = v28[v11];
          if (!v17)
          {
            uint64_t v18 = v16 + 3;
            if (v18 >= a2) {
              goto LABEL_37;
            }
            unint64_t v17 = v28[v18];
            if (!v17)
            {
              while (1)
              {
                uint64_t v11 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= a2) {
                  goto LABEL_37;
                }
                unint64_t v17 = v28[v11];
                ++v18;
                if (v17) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v18;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v17 - 1) & v17;
      unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
    }
    outlined init with copy of HashableWeakBox<Swift.AnyObject>(*(void *)(a4 + 48) + 16 * v15, (uint64_t)v29);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v30);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v25 = v21 == v24;
        if (v21 == v24) {
          unint64_t v21 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(void *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    uint64_t result = _ss11AnyHashableVSgWObTm_1((uint64_t)v29, *(void *)(v6 + 48) + 16 * v22, &lazy cache variable for type metadata for HashableWeakBox<Swift.AnyObject>, v13, MEMORY[0x1E4F3FB58]);
    ++*(void *)(v6 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t *v29;

  int64_t v4 = a4;
  if (!a3)
  {
    int64_t v9 = MEMORY[0x1E4FBC870];
LABEL_36:
    swift_release();
    return v9;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  type metadata accessor for _SetStorage<UIOpenURLContext>();
  uint64_t result = static _SetStorage.allocate(capacity:)();
  int64_t v9 = result;
  id v29 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      uint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    unint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_39;
    }
    if (v15 >= a2) {
      goto LABEL_36;
    }
    uint64_t v16 = v29[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_36;
      }
      uint64_t v16 = v29[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= a2) {
          goto LABEL_36;
        }
        uint64_t v16 = v29[v11];
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(v9 + 40);
    uint64_t v19 = *(id *)(*(void *)(v4 + 48) + 8 * v14);
    uint64_t result = NSObject._rawHashValue(seed:)(v18);
    unint64_t v20 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      char v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v24 = 0;
      BOOL v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        uint64_t v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        id v27 = *(void *)(v12 + 8 * v22);
      }
      while (v27 == -1);
      char v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(void *)(*(void *)(v9 + 48) + 8 * v23) = v19;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  unint64_t v17 = v15 + 3;
  if (v17 >= a2) {
    goto LABEL_36;
  }
  uint64_t v16 = v29[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_36;
    }
    uint64_t v16 = v29[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::UInt v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t *v30;
  _OWORD v31[2];
  uint64_t v32;
  long long v33;
  long long v34;
  uint64_t v35;
  unsigned char v36[48];

  if (a3)
  {
    uint64_t v5 = a3;
    if (*(void *)(a4 + 16) != a3)
    {
      type metadata accessor for _SetStorage<ToolbarPlacement.Role>();
      int64_t v9 = static _SetStorage.allocate(capacity:)();
      uint64_t v6 = v9;
      Swift::UInt v30 = a1;
      if (a2 < 1) {
        unint64_t v10 = 0;
      }
      else {
        unint64_t v10 = *a1;
      }
      uint64_t v11 = 0;
      uint64_t v12 = v9 + 56;
      while (1)
      {
        if (v10)
        {
          uint64_t v13 = __clz(__rbit64(v10));
          v10 &= v10 - 1;
          unint64_t v14 = v13 | (v11 << 6);
        }
        else
        {
          unint64_t v15 = v11 + 1;
          if (__OFADD__(v11, 1)) {
            goto LABEL_50;
          }
          if (v15 >= a2) {
            goto LABEL_47;
          }
          uint64_t v16 = v30[v15];
          ++v11;
          if (!v16)
          {
            uint64_t v11 = v15 + 1;
            if (v15 + 1 >= a2) {
              goto LABEL_47;
            }
            uint64_t v16 = v30[v11];
            if (!v16)
            {
              uint64_t v11 = v15 + 2;
              if (v15 + 2 >= a2) {
                goto LABEL_47;
              }
              uint64_t v16 = v30[v11];
              if (!v16)
              {
                unint64_t v17 = v15 + 3;
                if (v17 >= a2) {
                  goto LABEL_47;
                }
                uint64_t v16 = v30[v17];
                if (!v16)
                {
                  while (1)
                  {
                    uint64_t v11 = v17 + 1;
                    if (__OFADD__(v17, 1)) {
                      goto LABEL_51;
                    }
                    if (v11 >= a2) {
                      goto LABEL_47;
                    }
                    uint64_t v16 = v30[v11];
                    ++v17;
                    if (v16) {
                      goto LABEL_24;
                    }
                  }
                }
                uint64_t v11 = v17;
              }
            }
          }
LABEL_24:
          unint64_t v10 = (v16 - 1) & v16;
          unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
        }
        outlined init with copy of ToolbarPlacement.Role(*(void *)(a4 + 48) + 40 * v14, (uint64_t)v36);
        Hasher.init(_seed:)();
        outlined init with copy of ToolbarPlacement.Role((uint64_t)v36, (uint64_t)&v33);
        switch(*((void *)&v34 + 1))
        {
          case 0:
            uint64_t v18 = 0;
            goto LABEL_34;
          case 1:
            uint64_t v18 = 1;
            goto LABEL_34;
          case 2:
            uint64_t v18 = 2;
            goto LABEL_34;
          case 3:
            uint64_t v18 = 3;
            goto LABEL_34;
          case 4:
            uint64_t v18 = 4;
            goto LABEL_34;
          case 5:
            uint64_t v18 = 5;
            goto LABEL_34;
          case 6:
            uint64_t v18 = 7;
LABEL_34:
            Hasher._combine(_:)(v18);
            break;
          default:
            v31[0] = v33;
            v31[1] = v34;
            unsigned int v32 = v35;
            Hasher._combine(_:)(6uLL);
            AnyHashable.hash(into:)();
            outlined destroy of AnyHashable((uint64_t)v31);
            break;
        }
        uint64_t v19 = Hasher._finalize()();
        unint64_t v20 = -1 << *(unsigned char *)(v6 + 32);
        unint64_t v21 = v19 & ~v20;
        unint64_t v22 = v21 >> 6;
        if (((-1 << v21) & ~*(void *)(v12 + 8 * (v21 >> 6))) != 0)
        {
          char v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
          goto LABEL_45;
        }
        unint64_t v24 = 0;
        BOOL v25 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
            JUMPOUT(0x187D25A8CLL);
          }
          uint64_t v26 = v22 == v25;
          if (v22 == v25) {
            unint64_t v22 = 0;
          }
          v24 |= v26;
          id v27 = *(void *)(v12 + 8 * v22);
        }
        while (v27 == -1);
        char v23 = __clz(__rbit64(~v27)) + (v22 << 6);
LABEL_45:
        *(void *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
        outlined init with take of ToolbarPlacement.Role((uint64_t)v36, *(void *)(v6 + 48) + 40 * v23);
        ++*(void *)(v6 + 16);
        if (__OFSUB__(v5--, 1)) {
          goto LABEL_49;
        }
        if (!v5)
        {
LABEL_47:
          swift_release();
          return v6;
        }
      }
    }
    return a4;
  }
  else
  {
    swift_release();
    return MEMORY[0x1E4FBC870];
  }
}

void type metadata accessor for _SetStorage<HashableWeakBox<Swift.AnyObject>>()
{
  if (!lazy cache variable for type metadata for _SetStorage<HashableWeakBox<Swift.AnyObject>>)
  {
    type metadata accessor for _ContiguousArrayStorage<AppPreview>(255, &lazy cache variable for type metadata for HashableWeakBox<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4F3FB58]);
    lazy protocol witness table accessor for type HashableWeakBox<Swift.AnyObject> and conformance HashableWeakBox<A>();
    unint64_t v0 = type metadata accessor for _SetStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<HashableWeakBox<Swift.AnyObject>>);
    }
  }
}

uint64_t outlined destroy of HashableWeakBox<Swift.AnyObject>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  type metadata accessor for _ContiguousArrayStorage<AppPreview>(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t _s7SwiftUI15HashableWeakBoxVyyXlGWOhTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_3(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

unint64_t lazy protocol witness table accessor for type HashableWeakBox<Swift.AnyObject> and conformance HashableWeakBox<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type HashableWeakBox<Swift.AnyObject> and conformance HashableWeakBox<A>;
  if (!lazy protocol witness table cache variable for type HashableWeakBox<Swift.AnyObject> and conformance HashableWeakBox<A>)
  {
    type metadata accessor for _ContiguousArrayStorage<AppPreview>(255, &lazy cache variable for type metadata for HashableWeakBox<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4F3FB58]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HashableWeakBox<Swift.AnyObject> and conformance HashableWeakBox<A>);
  }
  return result;
}

uint64_t SceneBridge.init()()
{
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *(void *)(v0 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(unsigned char *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(_DWORD *)(v0 + 48) = -1;
  unint64_t v2 = specialized Dictionary.init(dictionaryLiteral:)(v1);
  *(void *)(v0 + 56) = v1;
  *(void *)(v0 + 64) = v2;
  *(void *)(v0 + 72) = -1;
  *(void *)(v0 + 80) = 0;
  swift_weakInit();
  *(void *)(v0 + 96) = 0;
  *(void *)(v0 + 104) = 0;
  *(_DWORD *)(v0 + 120) = 0;
  *(void *)(v0 + 112) = 0;
  *(unsigned char *)(v0 + 124) = 1;
  *(_DWORD *)(v0 + 128) = 0;
  *(unsigned char *)(v0 + 132) = 1;
  *(void *)(v0 + 144) = 0;
  *(void *)(v0 + 152) = 0;
  *(void *)(v0 + 136) = 0;
  *(_WORD *)(v0 + 160) = 256;
  *(void *)(v0 + 168) = specialized Dictionary.init(dictionaryLiteral:)(v1);
  swift_unknownObjectWeakAssign();
  return v0;
}

uint64_t static App.main()(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1);
  static Semantics.v6.getter();
  if (isLinkedOnOrAfter(_:)() & 1) == 0 || (AGTypeID.isValueType.getter())
  {
    (*(void (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
    runApp<A>(_:)();
  }
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x6C63206120736920;
  v5._object = (void *)0xEC0000002E737361;
  String.append(_:)(v5);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void runApp<A>(_:)()
{
  static Update.ensure<A>(_:)();
  type metadata accessor for AppDelegate();
  uint64_t v0 = (char **)MEMORY[0x18C117520]();
  closure #1 in KitRendererCommon(_:)(v0);
}

uint64_t type metadata accessor for AppDelegate()
{
  return self;
}

void closure #1 in KitRendererCommon(_:)(char **a1)
{
  int v2 = static CommandLine.argc.getter();
  type metadata accessor for SwiftUIApplication();
  uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  Swift::String v4 = NSStringFromClass(ObjCClassFromMetadata);
  if (!v4)
  {
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v4 = (NSString *)MEMORY[0x18C115780](v5);
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (objc_class *)swift_getObjCClassFromMetadata();
  uint64_t v7 = NSStringFromClass(v6);
  if (!v7)
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = (NSString *)MEMORY[0x18C115780](v8);
    swift_bridgeObjectRelease();
  }
  int v9 = UIApplicationMain(v2, a1, v4, v7);

  exit(v9);
}

uint64_t type metadata accessor for SwiftUIApplication()
{
  return self;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  void *v6 = a2;
  v6[1] = a3;
  uint64_t result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<String, Any>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<String, Any>)
  {
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, Any>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ObservableObjectDescriptor and conformance ObservableObjectDescriptor()
{
  unint64_t result = lazy protocol witness table cache variable for type ObservableObjectDescriptor and conformance ObservableObjectDescriptor;
  if (!lazy protocol witness table cache variable for type ObservableObjectDescriptor and conformance ObservableObjectDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ObservableObjectDescriptor and conformance ObservableObjectDescriptor);
  }
  return result;
}

uint64_t UIApplicationDelegateAdaptor.init(_:)()
{
  type metadata accessor for FallbackDelegateBox();
  static AppGraph.delegateBox = FallbackDelegateBox.__allocating_init(_:)(0);

  return swift_release();
}

uint64_t type metadata accessor for FallbackDelegateBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t FallbackDelegateBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  uint64_t v3 = a1;
  if (!a1) {
    uint64_t v3 = *(void *)(*(void *)result + 104);
  }
  *(void *)(result + 16) = v3;
  *(unsigned char *)(result + 24) = a1 != 0;
  return result;
}

uint64_t destroy for NavigationStackStyledCore.NavigationStackRepresentableRoot(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (a1 + 31) & 0xFFFFFFFFFFFFFFF8;
  swift_weakDestroy();
  swift_release();
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (v3 + *(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

void one-time initialization function for defaults()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F1CB18]);
  uint64_t v1 = (void *)MEMORY[0x18C115780](0xD000000000000011, 0x8000000188327A80);
  id v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (!v2) {
    id v2 = objc_msgSend(self, sel_standardUserDefaults);
  }
  static EnableKeyboardTrackingElement.defaults = (uint64_t)v2;
}

{
  id v0;
  void *v1;
  void *v2;

  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CB18]), sel_init);
  uint64_t v1 = (void *)MEMORY[0x18C115780](0xD000000000000011, 0x8000000188327A80);
  objc_msgSend(v0, sel_addSuiteNamed_, v1);

  id v2 = (void *)MEMORY[0x18C115780](0x6C7070612E6D6F63, 0xEF74694B49552E65);
  objc_msgSend(v0, sel_addSuiteNamed_, v2);

  static VisualizeViews.defaults = (uint64_t)v0;
}

uint64_t ToolbarSearchFieldStyle.Implementation.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v90 = a1;
  type metadata accessor for ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>();
  uint64_t v86 = v2;
  MEMORY[0x1F4188790](v2);
  v88 = (char *)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v4 - 8);
  NSDictionary v72 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v78 = (char *)&v72 - v7;
  type metadata accessor for ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>(0);
  uint64_t v81 = v8;
  MEMORY[0x1F4188790](v8);
  id v82 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = type metadata accessor for ToolbarSearchFieldStyle.Implementation();
  uint64_t v10 = *(void *)(v93 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x1F4188790](v93);
  uint64_t v77 = (uint64_t)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v76 = (uint64_t)&v72 - v13;
  MEMORY[0x1F4188790](v14);
  uint64_t v74 = (uint64_t)&v72 - v15;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v72 - v17;
  uint64_t v92 = (uint64_t)&v72 - v17;
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (uint64_t)&v72 - v20;
  type metadata accessor for StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryVie();
  uint64_t v75 = v22 - 8;
  MEMORY[0x1F4188790](v22 - 8);
  id v91 = (BOOL *)&v72 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedC(0);
  uint64_t v79 = v24;
  MEMORY[0x1F4188790](v24);
  uint64_t v83 = (uint64_t)&v72 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.Se, type metadata accessor for ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedC, (void (*)(uint64_t))type metadata accessor for LazyPlatformItemWriter<LazySearchSuggestionsKey, SearchFieldConfiguration.Suggestions?>);
  uint64_t v80 = v26;
  MEMORY[0x1F4188790](v26);
  uint64_t v87 = (uint64_t)&v72 - v27;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.S();
  uint64_t v84 = v28;
  MEMORY[0x1F4188790](v28);
  uint64_t v85 = (uint64_t)&v72 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SearchFieldConfiguration(v1, v21, (uint64_t (*)(void))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  outlined init with copy of SearchFieldConfiguration(v21, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  uint64_t v30 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v31 = (v30 + 16) & ~v30;
  uint64_t v73 = v31 + v11;
  uint64_t v32 = swift_allocObject();
  _s7SwiftUI24SearchFieldConfigurationVWObTm_0(v21, v32 + v31, (uint64_t (*)(void))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  LOBYTE(v21) = *(unsigned char *)(v1 + *(int *)(v93 + 28));
  uint64_t v89 = v1;
  uint64_t v33 = v1;
  uint64_t v34 = v74;
  outlined init with copy of SearchFieldConfiguration(v33, v74, (uint64_t (*)(void))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  uint64_t v35 = swift_allocObject();
  *(void *)(v35 + 16) = partial apply for closure #1 in ToolbarSearchFieldStyle.Implementation.body.getter;
  *(void *)(v35 + 24) = v32;
  _s7SwiftUI24SearchFieldConfigurationVWObTm_0(v34, v35 + ((v30 + 32) & ~v30), (uint64_t (*)(void))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  unint64_t v36 = v91;
  uint64_t v37 = v92;
  *id v91 = (v21 & 1) == 0;
  *((void *)v36 + 1) = partial apply for specialized closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.customScopeBarReader<A>(_:);
  *((void *)v36 + 2) = v35;
  uint64_t v38 = v76;
  uint64_t v39 = (uint64_t)&v36[*(int *)(v75 + 60)];
  memset(v96, 0, sizeof(v96));
  uint64_t v97 = 0;
  outlined init with copy of SearchFieldConfiguration(v37, v76, (uint64_t (*)(void))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  uint64_t v40 = v77;
  outlined init with copy of SearchFieldConfiguration(v38, v77, (uint64_t (*)(void))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  unint64_t v41 = (v73 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v42 = swift_allocObject();
  _s7SwiftUI24SearchFieldConfigurationVWObTm_0(v38, v42 + v31, (uint64_t (*)(void))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  uint64_t v43 = v42 + v41;
  uint64_t v44 = (uint64_t)v78;
  outlined init with take of BoundInputsView?((uint64_t)v96, v43);
  specialized closure #1 in ToolbarSearchFieldStyle.Implementation.customAccessoryReader<A>(_:)(v37, (uint64_t)partial apply for closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.body.getter, v42, v39);
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v46 = v45;
  MEMORY[0x18C113DA0]();
  LODWORD(v31) = *(unsigned __int8 *)(v44 + 1);
  _s7SwiftUI16SearchFieldStateVWOhTm_1(v44, type metadata accessor for SearchFieldState);
  if (v31 == 1)
  {
    id v47 = v72;
    MEMORY[0x18C113DA0](v46);
    char v48 = *v47 & 1;
    _s7SwiftUI16SearchFieldStateVWOhTm_1((uint64_t)v47, type metadata accessor for SearchFieldState);
  }
  else
  {
    char v48 = 2;
  }
  type metadata accessor for StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>();
  uint64_t v50 = v39 + *(int *)(v49 + 52);
  uint64_t v51 = v86;
  int v52 = v88;
  uint64_t v53 = &v88[*(int *)(v86 + 48)];
  *(void *)uint64_t v53 = 0;
  *((void *)v53 + 1) = 0;
  *((void *)v53 + 2) = 0;
  *int v52 = 0;
  v52[1] = 0;
  uint64_t v54 = (uint64_t)v52 + *(int *)(v51 + 44);
  outlined init with take of BoundInputsView?((uint64_t)v96, (uint64_t)v95);
  outlined init with take of BoundInputsView?((uint64_t)v96, (uint64_t)v94);
  ToolbarSearchFieldStyle.Implementation.searchToolbarContent(customScopeBar:customAccessory:)((uint64_t)v95, (uint64_t)v94, v54);
  v55 = v82;
  outlined init with copy of SearchFieldConfiguration((uint64_t)v52, (uint64_t)&v82[*(int *)(v81 + 36)], (uint64_t (*)(void))type metadata accessor for ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>);
  char *v55 = v48;
  _s7SwiftUI16SearchFieldStateVWOhTm_1((uint64_t)v52, (uint64_t (*)(void))type metadata accessor for ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>);
  _s7SwiftUI24SearchFieldConfigurationVWObTm_0((uint64_t)v55, v50, (uint64_t (*)(void))type metadata accessor for ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>);
  swift_release();
  _s7SwiftUI16SearchFieldStateVWOhTm_1(v40, (uint64_t (*)(void))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  _s7SwiftUI16SearchFieldStateVWOhTm_1(v92, (uint64_t (*)(void))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  uint64_t v56 = type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v57 = v89;
  char v58 = *(unsigned char *)(v89 + *(int *)(v56 + 28));
  uint64_t v59 = (uint64_t)v91;
  uint64_t v60 = v83;
  outlined init with copy of SearchFieldConfiguration((uint64_t)v91, v83, (uint64_t (*)(void))type metadata accessor for StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryVie);
  uint64_t v61 = v60 + *(int *)(v79 + 36);
  *(unsigned char *)uint64_t v61 = v58 ^ 1;
  *(void *)(v61 + 8) = &type metadata for LazySearchScopesKey;
  *(unsigned char *)(v61 + 16) = v58;
  _s7SwiftUI16SearchFieldStateVWOhTm_1(v59, (uint64_t (*)(void))type metadata accessor for StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryVie);
  MEMORY[0x18C113DA0](v46);
  LOBYTE(v59) = *(unsigned char *)(v44 + 1);
  _s7SwiftUI16SearchFieldStateVWOhTm_1(v44, type metadata accessor for SearchFieldState);
  MEMORY[0x18C113DA0](v46);
  char v62 = *(unsigned char *)(v44 + 1);
  _s7SwiftUI16SearchFieldStateVWOhTm_1(v44, type metadata accessor for SearchFieldState);
  uint64_t v63 = v87;
  outlined init with copy of SearchFieldConfiguration(v60, v87, (uint64_t (*)(void))type metadata accessor for ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedC);
  uint64_t v64 = v63 + *(int *)(v80 + 36);
  *(unsigned char *)uint64_t v64 = (v59 & 1) == 0;
  *(void *)(v64 + 8) = &type metadata for LazySearchSuggestionsKey;
  *(unsigned char *)(v64 + 16) = v62;
  _s7SwiftUI16SearchFieldStateVWOhTm_1(v60, (uint64_t (*)(void))type metadata accessor for ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedC);
  uint64_t v65 = v57 + *(int *)(v93 + 24);
  uint64_t v66 = *(void *)v65;
  uint64_t v67 = *(unsigned __int8 *)(v65 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v65, *(unsigned char *)(v65 + 8));
  LODWORD(v59) = specialized Environment.wrappedValue.getter(v66, v67);
  outlined consume of Environment<Bool?>.Content(v66, v67);
  uint64_t v68 = swift_allocObject();
  *(unsigned char *)(v68 + 16) = v59 == 4;
  *(unsigned char *)(v68 + 17) = 1;
  uint64_t v69 = v85;
  outlined init with copy of ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAcces(v63, v85);
  uint64_t v70 = (void *)(v69 + *(int *)(v84 + 36));
  *uint64_t v70 = partial apply for closure #1 in View.transformToolbarRole(_:isEnabled:);
  v70[1] = v68;
  outlined destroy of ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, (v63);
  return _s7SwiftUI24SearchFieldConfigurationVWObTm_0(v69, v90, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.S);
}

uint64_t outlined init with copy of SearchFieldConfiguration(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI24SearchFieldConfigurationVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI24SearchFieldConfigurationVWOcTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI24SearchFieldConfigurationVWOcTm_2(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void *initializeWithCopy for SearchFieldConfiguration(void *a1, void *a2, int *a3)
{
  uint64_t v31 = a2[1];
  *a1 = *a2;
  a1[1] = v31;
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v6 = *(int *)(v5 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *uint64_t v7 = *((unsigned char *)a2 + v6);
  v7[1] = *((unsigned char *)a2 + v6 + 1);
  *((_WORD *)v7 + 1) = *(_WORD *)((char *)a2 + v6 + 2);
  v7[8] = *((unsigned char *)a2 + v6 + 8);
  *((_DWORD *)v7 + 1) = *(_DWORD *)((char *)a2 + v6 + 4);
  uint64_t v9 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v10 = v9[9];
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = type metadata accessor for AttributedString();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
  swift_retain();
  swift_retain();
  v14(v11, v12, v13);
  v7[v9[10]] = v8[v9[10]];
  uint64_t v15 = v9[11];
  uint64_t v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  v16[4] = v17[4];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  uint64_t v18 = a3[6];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  int v21 = v20[8];
  if (v21 == 255)
  {
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
  }
  else
  {
    char v22 = v21 & 1;
    uint64_t v23 = *(void *)v20;
    outlined copy of PlatformItemCollection.Storage(*(void *)v20, v21 & 1);
    *(void *)uint64_t v19 = v23;
    v19[8] = v22;
  }
  uint64_t v24 = a3[8];
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  uint64_t v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  uint64_t v27 = *(void *)((char *)a2 + v24);
  uint64_t v28 = *((void *)v26 + 1);
  char v29 = v26[16];
  outlined copy of Text.Storage(v27, v28, v29);
  *(void *)uint64_t v25 = v27;
  *((void *)v25 + 1) = v28;
  v25[16] = v29;
  *((void *)v25 + 3) = *((void *)v26 + 3);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t type metadata accessor for ToolbarSearchFieldStyle.Implementation()
{
  uint64_t result = type metadata singleton initialization cache for ToolbarSearchFieldStyle.Implementation;
  if (!type metadata singleton initialization cache for ToolbarSearchFieldStyle.Implementation) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *initializeWithCopy for ToolbarModifier(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  uint64_t v7 = *(void *)(v5 - 8) + 16;
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 16) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 16) & ~v8;
  swift_bridgeObjectRetain();
  v6(v9, v10, v5);
  uint64_t v11 = *(void *)(v7 + 48) + 7;
  unint64_t v12 = (v11 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v11 + v10) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v13 + 8) < 0xFFFFFFFFuLL)
  {
    long long v14 = *(_OWORD *)v13;
    *(void *)(v12 + 16) = *(void *)(v13 + 16);
    *(_OWORD *)unint64_t v12 = v14;
  }
  else
  {
    *(void *)unint64_t v12 = *(void *)v13;
    *(void *)(v12 + 8) = *(void *)(v13 + 8);
    *(void *)(v12 + 16) = *(void *)(v13 + 16);
    swift_retain();
    swift_retain();
  }
  return a1;
}

uint64_t initializeWithCopy for ToolbarItemGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 40) == 1)
  {
    long long v6 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v6;
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
    *(unsigned char *)(a1 + 40) = 1;
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (v10 + 41 + a1) & ~v10;
  uint64_t v12 = (v10 + 41 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v11, v12);
  *(unsigned char *)(*(void *)(v9 + 48) + v11) = *(unsigned char *)(*(void *)(v9 + 48) + v12);
  return a1;
}

void type metadata accessor for ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void *initializeWithCopy for UIKitSearchBarAdaptor(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *uint64_t v8 = *((unsigned char *)a2 + v7);
  v8[1] = *((unsigned char *)a2 + v7 + 1);
  *((_WORD *)v8 + 1) = *(_WORD *)((char *)a2 + v7 + 2);
  v8[8] = *((unsigned char *)a2 + v7 + 8);
  *((_DWORD *)v8 + 1) = *(_DWORD *)((char *)a2 + v7 + 4);
  uint64_t v10 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v11 = v10[9];
  uint64_t v32 = &v8[v11];
  uint64_t v12 = &v9[v11];
  uint64_t v13 = type metadata accessor for AttributedString();
  long long v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
  swift_retain();
  swift_retain();
  v14(v32, v12, v13);
  v8[v10[10]] = v9[v10[10]];
  uint64_t v15 = v10[11];
  uint64_t v16 = &v8[v15];
  uint64_t v17 = &v9[v15];
  v16[4] = v17[4];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  uint64_t v18 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v19 = v18[6];
  uint64_t v20 = (char *)a1 + v19;
  int v21 = (char *)a2 + v19;
  int v22 = v21[8];
  if (v22 == 255)
  {
    *(void *)uint64_t v20 = *(void *)v21;
    unsigned char v20[8] = v21[8];
  }
  else
  {
    char v23 = v22 & 1;
    uint64_t v24 = *(void *)v21;
    outlined copy of PlatformItemCollection.Storage(*(void *)v21, v22 & 1);
    *(void *)uint64_t v20 = v24;
    unsigned char v20[8] = v23;
  }
  *((unsigned char *)a1 + v18[7]) = *((unsigned char *)a2 + v18[7]);
  uint64_t v25 = v18[8];
  uint64_t v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  uint64_t v28 = *(void *)((char *)a2 + v25);
  uint64_t v29 = *(void *)((char *)a2 + v25 + 8);
  char v30 = *((unsigned char *)a2 + v25 + 16);
  outlined copy of Text.Storage(v28, v29, v30);
  *(void *)uint64_t v26 = v28;
  *((void *)v26 + 1) = v29;
  v26[16] = v30;
  *((void *)v26 + 3) = *((void *)v27 + 3);
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t UIKitSearchBarCoordinator.updateSearchBar(_:to:in:)(unsigned __int8 *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v85 = a2;
  type metadata accessor for SearchFieldConfiguration?(0);
  MEMORY[0x1F4188790](v7 - 8);
  id v82 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
  uint64_t v80 = *(void *)(v9 - 8);
  uint64_t v81 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v74 = (uint64_t)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>?(0);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v79 = (uint64_t)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v78 = (char *)&v74 - v14;
  uint64_t v15 = type metadata accessor for SearchAttributedString();
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v77);
  uint64_t v19 = (char *)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for SearchEnvironmentProperties(0);
  double v20 = MEMORY[0x1F4188790](v83);
  int v22 = (char *)&v74 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *a3;
  uint64_t v24 = a3[1];
  uint64_t v75 = OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_isViewUpdating;
  *(unsigned char *)(v4 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_isViewUpdating) = 1;
  id v25 = objc_msgSend(a1, sel_searchTextField, v20);
  specialized UIKitTextInput.update(in:)(v23, v24);
  specialized UIKitTextInputTraits.updateTraits(in:)(v23, v24);
  specialized UITextInputTraits_Private.updatePrivateTraits(in:)(v23, v24);
  *(void *)&v90[0] = v23;
  *((void *)&v90[0] + 1) = v24;
  EnvironmentValues.effectiveFont.getter();
  *(void *)&v90[0] = v23;
  *((void *)&v90[0] + 1) = v24;
  uint64_t v26 = (void *)Font.platformFont(in:)();
  swift_release();
  objc_msgSend(v25, sel_setFont_, v26);

  *(void *)&v90[0] = v23;
  *((void *)&v90[0] + 1) = v24;
  swift_retain();
  swift_retain();
  uint64_t v27 = specialized NSTextAlignment.init(in:)();
  id v84 = v25;
  objc_msgSend(v25, sel_setTextAlignment_, v27);
  *(void *)&v90[0] = v23;
  *((void *)&v90[0] + 1) = v24;
  specialized UIKitSearchBarCoordinator.updateTextColor(_:in:)(a1, v90);
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>, (uint64_t)&type metadata for EnvironmentValues.__Key_searchStorage, (uint64_t)&protocol witness table for EnvironmentValues.__Key_searchStorage, MEMORY[0x1E4F40930]);
  unint64_t v28 = lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  if (v24)
  {
    swift_retain_n();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    swift_retain();
    swift_retain();
    PropertyList.subscript.getter();
    swift_release();
  }
  swift_release_n();
  unint64_t v76 = v28;
  if (*(void *)&v90[0])
  {
    SearchEnvironmentStorage.properties.getter((uint64_t)v22);
    swift_release();
    outlined init with copy of PlatformItemList.Item((uint64_t)&v22[*(int *)(v83 + 28)], (uint64_t)&v86, (uint64_t (*)(void))type metadata accessor for Binding<PlatformSearchPopoverAnchor?>?);
    outlined destroy of PlatformItemList.Item((uint64_t)v22, type metadata accessor for SearchEnvironmentProperties);
    if (v87)
    {
      outlined init with take of SearchFieldConfiguration((uint64_t)&v86, (uint64_t)v90, (uint64_t (*)(void))type metadata accessor for Binding<PlatformSearchPopoverAnchor?>);
      id v29 = v84;
      specialized Binding<A>.apply(_:)();

      char v30 = (uint64_t (*)(void))type metadata accessor for Binding<PlatformSearchPopoverAnchor?>;
      uint64_t v31 = (uint64_t *)v90;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v86 = 0;
    uint64_t v87 = 0;
    char v89 = 0;
    uint64_t v88 = 0;
  }
  char v30 = (uint64_t (*)(void))type metadata accessor for Binding<PlatformSearchPopoverAnchor?>?;
  uint64_t v31 = &v86;
LABEL_9:
  outlined destroy of PlatformItemList.Item((uint64_t)v31, v30);
  unsigned int v32 = objc_msgSend(a1, sel__isEnabled);
  *(void *)&v90[0] = v23;
  *((void *)&v90[0] + 1) = v24;
  if (v32 != (EnvironmentValues.isEnabled.getter() & 1))
  {
    *(void *)&v90[0] = v23;
    *((void *)&v90[0] + 1) = v24;
    objc_msgSend(a1, sel__setEnabled_, EnvironmentValues.isEnabled.getter() & 1);
  }
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v33 = v85;
  MEMORY[0x18C113DA0]();
  uint64_t v34 = &v19[*(int *)(v77 + 36)];
  uint64_t v35 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16))(v17, v34, v35);
  outlined destroy of PlatformItemList.Item((uint64_t)v19, type metadata accessor for SearchFieldState);
  Swift::tuple_OpaquePointer_String v91 = SearchAttributedString.splitIntoTokensAndText()();
  rawValue = v91._0._rawValue;
  uint64_t countAndFlagsBits = v91._1._countAndFlagsBits;
  object = v91._1._object;
  outlined destroy of PlatformItemList.Item((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SearchAttributedString);
  *(void *)&v90[0] = v23;
  *((void *)&v90[0] + 1) = v24;
  UIKitSearchBarCoordinator.updateTextIfNeeded(_:text:in:)(a1, countAndFlagsBits, (uint64_t)object, (void **)v90);
  swift_bridgeObjectRelease();
  uint64_t v39 = type metadata accessor for SearchFieldConfiguration(0);
  UIKitSearchBarCoordinator.updateTokensIfNeeded(_:tokens:platformTokens:)((uint64_t)a1, (uint64_t)rawValue, *(void *)(v33 + *(int *)(v39 + 24)), *(unsigned char *)(v33 + *(int *)(v39 + 24) + 8));
  swift_bridgeObjectRelease();
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>, (uint64_t)&type metadata for EnvironmentValues.__Key_searchStorage, (uint64_t)&protocol witness table for EnvironmentValues.__Key_searchStorage, MEMORY[0x1E4F40930]);
  swift_retain();
  if (v24)
  {
    swift_retain_n();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    swift_retain();
    swift_retain();
    PropertyList.subscript.getter();
    swift_release();
  }
  uint64_t v41 = v80;
  uint64_t v40 = v81;
  uint64_t v42 = (uint64_t)v78;
  swift_release_n();
  if (*(void *)&v90[0])
  {
    SearchEnvironmentStorage.properties.getter((uint64_t)v22);
    swift_release();
    outlined init with copy of PlatformItemList.Item((uint64_t)&v22[*(int *)(v83 + 24)], v42, (uint64_t (*)(void))type metadata accessor for Binding<(TextSelection?, VersionSeed)>?);
    outlined destroy of PlatformItemList.Item((uint64_t)v22, type metadata accessor for SearchEnvironmentProperties);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v42, 1, 1, v40);
  }
  uint64_t v43 = v4 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_selection;
  swift_beginAccess();
  outlined assign with take of Binding<(TextSelection?, VersionSeed)>?(v42, v43, (uint64_t (*)(void))type metadata accessor for Binding<(TextSelection?, VersionSeed)>?);
  swift_endAccess();
  uint64_t v44 = v43;
  uint64_t v45 = v79;
  outlined init with copy of PlatformItemList.Item(v44, v79, (uint64_t (*)(void))type metadata accessor for Binding<(TextSelection?, VersionSeed)>?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v45, 1, v40) == 1)
  {
    uint64_t v46 = type metadata accessor for Binding<(TextSelection?, VersionSeed)>?;
    uint64_t v47 = v45;
  }
  else
  {
    uint64_t v48 = v74;
    outlined init with take of SearchFieldConfiguration(v45, v74, (uint64_t (*)(void))type metadata accessor for Binding<(TextSelection?, VersionSeed)>);
    UIKitSearchBarCoordinator.updateTextSelectionIfNeeded(_:selection:)(a1);
    uint64_t v46 = type metadata accessor for Binding<(TextSelection?, VersionSeed)>;
    uint64_t v47 = v48;
  }
  outlined destroy of PlatformItemList.Item(v47, (uint64_t (*)(void))v46);
  *(void *)&v90[0] = v23;
  *((void *)&v90[0] + 1) = v24;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  default argument 2 of Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
  uint64_t v49 = (void *)Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
  uint64_t v50 = v49;
  uint64_t v51 = v39;
  if (v49)
  {
    id v52 = objc_msgSend(v49, sel_string);

    uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v50 = v54;
  }
  else
  {
    uint64_t v53 = 0;
  }
  id v55 = objc_msgSend(a1, sel_placeholder);
  if (v55)
  {
    uint64_t v56 = v55;
    uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v59 = v58;

    if (!v50)
    {
      uint64_t v61 = 0;
      uint64_t v60 = v75;
LABEL_34:
      swift_bridgeObjectRelease();
      objc_msgSend(a1, sel_setPlaceholder_, v61);

      goto LABEL_35;
    }
    uint64_t v60 = v75;
    if (v57 == v53 && v50 == v59)
    {
      swift_bridgeObjectRelease();
LABEL_32:
      swift_bridgeObjectRelease();
      goto LABEL_35;
    }
    char v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v62) {
      goto LABEL_32;
    }
LABEL_33:
    uint64_t v61 = (void *)MEMORY[0x18C115780](v53, v50);
    goto LABEL_34;
  }
  uint64_t v60 = v75;
  if (v50) {
    goto LABEL_33;
  }
LABEL_35:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey>, (uint64_t)&type metadata for EnvironmentValues.TriggerSubmissionKey, (uint64_t)&protocol witness table for EnvironmentValues.TriggerSubmissionKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  if (v24)
  {
    swift_retain_n();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    swift_retain();
    swift_retain();
    PropertyList.subscript.getter();
    swift_release();
  }
  swift_release_n();
  uint64_t v63 = *(void *)(v4 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_triggerSubmission);
  *(_OWORD *)(v4 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_triggerSubmission) = v90[0];
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v63);
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchTextClearAction>, (uint64_t)&type metadata for EnvironmentValues.__Key_searchTextClearAction, (uint64_t)&protocol witness table for EnvironmentValues.__Key_searchTextClearAction, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_searchTextClearAction> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  if (v24)
  {
    swift_retain_n();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    swift_retain();
    swift_retain();
    PropertyList.subscript.getter();
    swift_release();
  }
  swift_release_n();
  uint64_t v64 = *(void *)(v4 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_clearAction);
  *(_OWORD *)(v4 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_clearAction) = v90[0];
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v64);
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFieldPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFieldPlacementKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  if (v24)
  {
    swift_retain_n();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
    swift_release_n();
    *(unsigned char *)(v4 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_placement) = v90[0];
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSearchVibrancyEnabledKey>, (uint64_t)&type metadata for EnvironmentValues.IsSearchVibrancyEnabledKey, (uint64_t)&protocol witness table for EnvironmentValues.IsSearchVibrancyEnabledKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsSearchVibrancyEnabledKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    swift_retain();
    swift_retain();
    PropertyList.subscript.getter();
    swift_release();
    swift_release_n();
    *(unsigned char *)(v4 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_placement) = v90[0];
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSearchVibrancyEnabledKey>, (uint64_t)&type metadata for EnvironmentValues.IsSearchVibrancyEnabledKey, (uint64_t)&protocol witness table for EnvironmentValues.IsSearchVibrancyEnabledKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsSearchVibrancyEnabledKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain();
    PropertyList.subscript.getter();
    swift_release();
  }
  swift_release_n();
  int v65 = LOBYTE(v90[0]);
  uint64_t v66 = OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_ensureVibrancy;
  int v67 = a1[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_ensureVibrancy];
  a1[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_ensureVibrancy] = v90[0];
  uint64_t v68 = (uint64_t)v82;
  if (v65 != v67)
  {
    if (v65) {
      uint64_t v69 = 2;
    }
    else {
      uint64_t v69 = 0;
    }
    objc_msgSend(a1, sel__setOverrideUserInterfaceRenderingMode_, v69);
    if (a1[v66]) {
      uint64_t v70 = 1;
    }
    else {
      uint64_t v70 = -1;
    }
    objc_msgSend(a1, sel__setOverrideVibrancyTrait_, v70);
  }
  uint64_t v71 = v85;
  UIKitSearchBarCoordinator.updateIsFirstResponder(_:to:)((uint64_t)a1, v85);

  *(unsigned char *)(v4 + v60) = 0;
  outlined init with copy of PlatformItemList.Item(v71, v68, type metadata accessor for SearchFieldConfiguration);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v68, 0, 1, v51);
  uint64_t v72 = v4 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_configuration;
  swift_beginAccess();
  outlined assign with take of Binding<(TextSelection?, VersionSeed)>?(v68, v72, (uint64_t (*)(void))type metadata accessor for SearchFieldConfiguration?);
  uint64_t result = swift_endAccess();
  *(unsigned char *)(v4 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_needsStateRestoration) = 0;
  return result;
}

uint64_t storeEnumTagSinglePayload for SearchFieldConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_188281D18);
}

uint64_t outlined assign with take of SearchFieldConfiguration?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ToolbarStorage.SearchItem?(0, &lazy cache variable for type metadata for SearchFieldConfiguration?, type metadata accessor for SearchFieldConfiguration, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for SearchAttributedString()
{
  uint64_t result = type metadata singleton initialization cache for SearchAttributedString;
  if (!type metadata singleton initialization cache for SearchAttributedString) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void specialized UITextInputTraits_Private.updatePrivateTraits(in:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputDictation.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputDictation.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  unsigned int v3 = v4 | (v5 << 16);
  if (v4 != 2)
  {
    if (objc_msgSend(v2, sel_respondsToSelector_, sel_forceEnableDictation))
    {
      if (((v3 ^ objc_msgSend(v2, sel_forceEnableDictation)) & 1) == 0)
      {
LABEL_10:
        if ((objc_msgSend(v2, sel_respondsToSelector_, sel_forceDisableDictation) & 1) == 0)
        {
          if (v4)
          {
LABEL_16:
            if (objc_msgSend(v2, sel_respondsToSelector_, sel_forceSpellingDictation))
            {
              if (objc_msgSend(v2, sel_forceSpellingDictation) == (unsigned __int16)(v4 & 0x100) >> 8)
              {
LABEL_21:
                if (objc_msgSend(v2, sel_respondsToSelector_, sel_preferOnlineDictation))
                {
                  if (objc_msgSend(v2, sel_preferOnlineDictation) == (v3 & 0x10000) >> 16) {
                    return;
                  }
                }
                else if ((v3 & 0x10000) == 0)
                {
                  return;
                }
                _UITextInputTraitSetPreferOnlineDictation(v2, HIWORD(v3) & 1);
                return;
              }
            }
            else if ((v4 & 0x100) == 0)
            {
              goto LABEL_21;
            }
            _UITextInputTraitSetForceSpellingDictation(v2, (v3 >> 8) & 1);
            goto LABEL_21;
          }
LABEL_15:
          _UITextInputTraitSetForceDisableDictation(v2, (v4 & 1) == 0);
          goto LABEL_16;
        }
LABEL_14:
        if ((v3 ^ objc_msgSend(v2, sel_forceDisableDictation))) {
          goto LABEL_16;
        }
        goto LABEL_15;
      }
    }
    else if ((v4 & 1) == 0)
    {
      if ((objc_msgSend(v2, sel_respondsToSelector_, sel_forceDisableDictation) & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_14;
    }
    _UITextInputTraitSetForceEnableDictation(v2, v4 & 1);
    goto LABEL_10;
  }
}

void UIKitSearchBarCoordinator.updateIsFirstResponder(_:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v43 = a2;
  uint64_t v40 = a1;
  type metadata accessor for SearchFieldConfiguration?(0);
  MEMORY[0x1F4188790](v3 - 8);
  unsigned __int8 v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v42);
  uint64_t v39 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v38 = (char *)&v37 - v8;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (unsigned __int8 *)&v37 - v10;
  uint64_t v12 = type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v37 - v17;
  uint64_t v19 = v2 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_configuration;
  swift_beginAccess();
  double v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  if (v20(v19, 1, v12))
  {
    BOOL v41 = 0;
  }
  else
  {
    outlined init with copy of PlatformItemList.Item(v19, (uint64_t)v18, type metadata accessor for SearchFieldConfiguration);
    type metadata accessor for Binding<SearchFieldState>(0);
    MEMORY[0x18C113DA0]();
    outlined destroy of PlatformItemList.Item((uint64_t)v18, type metadata accessor for SearchFieldConfiguration);
    BOOL v41 = *v11 != 2;
    outlined destroy of PlatformItemList.Item((uint64_t)v11, type metadata accessor for SearchFieldState);
  }
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v22 = v21;
  MEMORY[0x18C113DA0]();
  int v23 = *v11;
  outlined destroy of PlatformItemList.Item((uint64_t)v11, type metadata accessor for SearchFieldState);
  outlined init with copy of PlatformItemList.Item(v19, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SearchFieldConfiguration?);
  if (v20((uint64_t)v5, 1, v12) == 1)
  {
    outlined destroy of PlatformItemList.Item((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SearchFieldConfiguration?);
    MEMORY[0x18C113DA0](v22);
    int v24 = v11[*(int *)(v42 + 44) + 4];
    outlined destroy of PlatformItemList.Item((uint64_t)v11, type metadata accessor for SearchFieldState);
  }
  else
  {
    outlined init with take of SearchFieldConfiguration((uint64_t)v5, (uint64_t)v15, type metadata accessor for SearchFieldConfiguration);
    uint64_t v25 = (uint64_t)v38;
    int v26 = v23;
    MEMORY[0x18C113DA0](v22);
    uint64_t v27 = v42;
    int v28 = *(_DWORD *)(v25 + *(int *)(v42 + 44));
    outlined destroy of PlatformItemList.Item(v25, type metadata accessor for SearchFieldState);
    uint64_t v29 = (uint64_t)v39;
    MEMORY[0x18C113DA0](v22);
    outlined destroy of PlatformItemList.Item((uint64_t)v15, type metadata accessor for SearchFieldConfiguration);
    uint64_t v30 = v29 + *(int *)(v27 + 44);
    int v31 = *(_DWORD *)v30;
    int v32 = *(unsigned __int8 *)(v30 + 4);
    outlined destroy of PlatformItemList.Item(v29, type metadata accessor for SearchFieldState);
    if (v28 == v31) {
      int v33 = 2;
    }
    else {
      int v33 = v32;
    }
    BOOL v34 = v31 == -1;
    int v23 = v26;
    if (v34) {
      int v33 = v32;
    }
    if (v28 == -1) {
      int v24 = v32;
    }
    else {
      int v24 = v33;
    }
  }
  BOOL v35 = v41;
  int v36 = v23 == 2 || v41;
  if (v24) {
    int v36 = 0;
  }
  if (v36 != 1) {
    goto LABEL_24;
  }
  if (v23 != 2) {
    BOOL v35 = 0;
  }
  if (v35 || v24 != 2) {
LABEL_24:
  }
    UIKitSearchBar.enqueueFirstResponderUpdate(_:)(v36 != 1);
}

uint64_t getEnumTagSinglePayload for SearchFieldConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_188281C24);
}

void type metadata accessor for SearchFieldConfiguration?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined init with copy of Binding<SearchFieldState>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  type metadata accessor for CollectionOfOne<Hashable>(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t UIKitSearchBarCoordinator.updateTokensIfNeeded(_:tokens:platformTokens:)(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 != 255)
  {
    unsigned __int8 v5 = (void *)result;
    MEMORY[0x1F4188790](result);
    uint64_t v6 = swift_bridgeObjectRetain();
    uint64_t v7 = specialized Sequence.compactMap<A>(_:)(v6, (void (*)(unsigned char *__return_ptr, uint64_t, _OWORD *))partial apply for closure #1 in UIKitSearchBarCoordinator.updateTokensIfNeeded(_:tokens:platformTokens:));
    swift_bridgeObjectRelease();
    uint64_t v8 = OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_oldTokens;
    uint64_t v9 = *(void *)(v4 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_oldTokens);
    swift_bridgeObjectRetain();
    char v10 = specialized static Array<A>.== infix(_:_:)((uint64_t)v7, v9);
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0
      || *(unsigned char *)(v4 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_needsStateRestoration) == 1)
    {
      id v11 = objc_msgSend(v5, sel_searchTextField);
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI25UIKitSearchBarCoordinatorC0G5Token33_9E78780A6F2626BA9019200B48F4A36BLLVG_So08UISearchJ0Cs5NeverOTg503_s7d4UI25fghi27C20updateTokensIfNeeded33_9klmnopq28BLL_6tokens08platformH0ySo08r13E0C_SayAA8AnyJ103VGAA22PlatformItemCollectionVSgtFSo0tV0CAC0dV0AELLVcfu0_32f4ab76087b16d1a59a180d4ecf7049ccAsQTf3nnnpk_nTf1cn_n((uint64_t)v7);
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UISearchToken);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v11, sel_setTokens_, isa);

LABEL_5:
      *(void *)(v4 + v8) = v7;
      return swift_bridgeObjectRelease();
    }
    uint64_t result = *(void *)(v4 + v8);
    unint64_t v13 = *(void *)(result + 16);
    if (!v13) {
      goto LABEL_5;
    }
    if (v13 <= *((void *)v7 + 2))
    {
      unint64_t v14 = 0;
      uint64_t v15 = 96;
      while (1)
      {
        uint64_t v16 = *(void *)(v4 + v8);
        if (v14 >= *(void *)(v16 + 16)) {
          break;
        }
        uint64_t v17 = *(void **)&v7[v15];
        id v18 = *(id *)(v16 + v15);
        id v19 = objc_msgSend(v17, sel_representedObject);
        if (v19)
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
          __swift_project_boxed_opaque_existential_1(v20, v20[3]);
          id v19 = (id)_bridgeAnythingToObjectiveC<A>(_:)();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
        }
        ++v14;
        objc_msgSend(v18, sel_setRepresentedObject_, v19);

        uint64_t result = swift_unknownObjectRelease();
        v15 += 72;
        if (v13 == v14) {
          goto LABEL_5;
        }
      }
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

void UIKitSearchBarCoordinator.updateTextIfNeeded(_:text:in:)(void *a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = *a4;
  uint64_t v7 = (uint64_t)a4[1];
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey>, (uint64_t)&type metadata for EnvironmentValues.SearchSuffixKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchSuffixKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v7)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  uint64_t v9 = v39;
  uint64_t v10 = v40;
  uint64_t v11 = v41;
  uint64_t v12 = (uint64_t *)(v5 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_oldSuffix);
  uint64_t v35 = v38;
  long long v13 = *(_OWORD *)(v5 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_oldSuffix + 16);
  v37[0] = *(_OWORD *)(v5 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_oldSuffix);
  v37[1] = v13;
  int v14 = MEMORY[0x18C112FB0](&v38, v37);
  uint64_t v15 = (void *)(v5 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_oldText);
  uint64_t v16 = *(void *)(v5 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_oldText + 8);
  if (!v16) {
    goto LABEL_13;
  }
  if (*v15 == a2 && v16 == a3)
  {
    if ((v14 & 1) == 0)
    {
LABEL_13:
      id v18 = objc_allocWithZone(MEMORY[0x1E4F28E48]);
      swift_bridgeObjectRetain();
      id v19 = (void *)MEMORY[0x18C115780](a2, a3);
      swift_bridgeObjectRelease();
      id v20 = objc_msgSend(v18, sel_initWithString_, v19);

      goto LABEL_14;
    }
  }
  else if ((_stringCompareWithSmolCheck(_:_:expecting:)() & v14 & 1) == 0)
  {
    goto LABEL_13;
  }
  if (*(unsigned char *)(v5 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_needsStateRestoration) == 1) {
    goto LABEL_13;
  }
  id v20 = 0;
LABEL_14:
  uint64_t v34 = a3;
  if (v10 < 0)
  {
    BOOL v22 = v10 != 0x8000000000000000 || v11 | v9 | v35;
    outlined consume of Text.Suffix.Storage(v22, 0, 0x8000000000000000);
    uint64_t v21 = 0;
    if (!v20) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v38 = (uint64_t)v8;
    uint64_t v39 = v7;
    v37[0] = 0uLL;
    outlined copy of Text.Suffix.Storage(v35, v9, v10);
    default argument 2 of Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
    uint64_t v21 = (void *)Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
    outlined consume of Text.Storage(v35, v9, v10 & 1);
    swift_bridgeObjectRelease();
    if (!v20) {
      goto LABEL_28;
    }
  }
  uint64_t v38 = (uint64_t)v8;
  uint64_t v39 = v7;
  id v23 = v20;
  if (EnvironmentValues.foregroundColor.getter())
  {
    uint64_t v24 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
    uint64_t v25 = swift_retain();
    id v26 = UIColor.init(_:)(v25);
    uint64_t v41 = v24;
    uint64_t v38 = (uint64_t)v26;
    NSMutableAttributedString.addUniformAttribute(_:value:)();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
  }
  if (v21) {
    objc_msgSend(v23, sel_appendAttributedString_, v21);
  }
  id v27 = objc_msgSend(a1, sel_searchField);
  if (v27)
  {
    int v28 = v27;
    id v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28B18]), sel_initWithAttributedString_, v23);
    objc_msgSend(v28, sel_setAttributedText_, v29);

    a3 = v34;
LABEL_28:

    void *v15 = a2;
    v15[1] = a3;
    swift_bridgeObjectRelease();
    uint64_t v30 = *v12;
    uint64_t v31 = v12[1];
    uint64_t v32 = v12[2];
    *uint64_t v12 = v35;
    v12[1] = v9;
    v12[2] = v10;
    v12[3] = v11;
    swift_bridgeObjectRetain();
    outlined consume of Text.Suffix.Storage(v30, v31, v32);
    return;
  }

  __break(1u);
}

uint64_t outlined consume of Text.Suffix.Storage(uint64_t result, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x8000000000000000) == 0)
  {
    outlined consume of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void specialized UIKitSearchBarCoordinator.updateTextColor(_:in:)(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *(void *)&long long v29 = *a2;
  *((void *)&v29 + 1) = v3;
  uint64_t v4 = EnvironmentValues.foregroundColor.getter();
  if (v4)
  {
    uint64_t v5 = v4;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey>, (uint64_t)&type metadata for EnvironmentValues.SearchSuffixKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchSuffixKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    if (v3)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    if ((v30 & 0x8000000000000000) != 0)
    {
      BOOL v8 = (void)v30 != 0x8000000000000000
        || (*((void *)&v30 + 1) | *((void *)&v29 + 1) | (unint64_t)v29) != 0;
      outlined consume of Text.Suffix.Storage(v8, 0, 0x8000000000000000);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
      id v6 = UIColor.init(_:)(v5);
      goto LABEL_15;
    }
    outlined consume of Text.Storage(v29, *((uint64_t *)&v29 + 1), v30 & 1);
    swift_release();
    swift_bridgeObjectRelease();
  }
  id v6 = 0;
LABEL_15:
  id v9 = objc_msgSend(a1, sel_searchTextField);
  id v10 = (id)*MEMORY[0x1E4FB0700];
  id v11 = objc_msgSend(v9, sel_defaultTextAttributes);
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(v12 + 16) && (unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10), (v14 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v12 + 56) + 32 * v13, (uint64_t)&v29);
  }
  else
  {
    long long v29 = 0u;
    long long v30 = 0u;
  }

  swift_bridgeObjectRelease();
  if (!*((void *)&v30 + 1))
  {
    outlined destroy of AccessibilityValueStorage?((uint64_t)&v29, (unint64_t *)&lazy cache variable for type metadata for Any?);
    if (v6) {
      goto LABEL_28;
    }
    uint64_t v16 = 0;
LABEL_34:

    return;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  uint64_t v15 = *(void **)&v27[0];
  if (swift_dynamicCast()) {
    uint64_t v16 = *(void **)&v27[0];
  }
  else {
    uint64_t v16 = 0;
  }
  if (!v6) {
    goto LABEL_34;
  }
  if (v16)
  {
    id v17 = v6;
    id v18 = v16;
    char v19 = static NSObject.== infix(_:_:)();

    if (v19)
    {

      return;
    }
    goto LABEL_29;
  }
LABEL_28:
  id v17 = v6;
  uint64_t v15 = 0;
LABEL_29:
  *((void *)&v30 + 1) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  *(void *)&long long v29 = v17;
  id v20 = v17;
  id v21 = v9;
  id v22 = v10;
  id v23 = objc_msgSend(v21, sel_defaultTextAttributes);
  uint64_t v24 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v28 = v24;
  if (*((void *)&v30 + 1))
  {
    outlined init with take of Any(&v29, v27);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v27, v22, isUniquelyReferenced_nonNull_native);
    uint64_t v28 = v24;

    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of AccessibilityValueStorage?((uint64_t)&v29, (unint64_t *)&lazy cache variable for type metadata for Any?);
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v22, v27);

    outlined destroy of AccessibilityValueStorage?((uint64_t)v27, (unint64_t *)&lazy cache variable for type metadata for Any?);
  }
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v21, sel_setDefaultTextAttributes_, isa);
}

void type metadata accessor for NSAttributedStringKey(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey()
{
  unint64_t result = lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey;
  if (!lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey)
  {
    type metadata accessor for NSAttributedStringKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey);
  }
  return result;
}

Swift::tuple_OpaquePointer_String __swiftcall SearchAttributedString.splitIntoTokensAndText()()
{
  type metadata accessor for Slice<AttributedString.CharacterView>();
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v66 = (char *)&v61 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  MEMORY[0x1F4188790](v3 - 8);
  int v65 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for AttributedString.CharacterView();
  char v62 = *(void (***)(char *, uint64_t))(v64 - 8);
  MEMORY[0x1F4188790](v64);
  uint64_t v63 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AttributedString.Runs.Run();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v86 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AttributedString.Runs.Run?(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v87 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for AttributedString.Runs.Index();
  uint64_t v85 = *(void *)(v84 - 8);
  MEMORY[0x1F4188790](v84);
  uint64_t v83 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  char v14 = (char *)&v61 - v13;
  uint64_t v15 = type metadata accessor for AttributedString.Runs();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  id v18 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexingIterator<AttributedString.Runs>(0);
  uint64_t v20 = v19 - 8;
  MEMORY[0x1F4188790](v19);
  id v22 = (char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v61 - v24;
  uint64_t v95 = 0;
  unint64_t v96 = 0xE000000000000000;
  uint64_t v67 = v0;
  AttributedString.runs.getter();
  id v26 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  uint64_t v74 = v16 + 16;
  uint64_t v73 = v26;
  v26(v22, v18, v15);
  uint64_t v81 = lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, MEMORY[0x1E4F27368]);
  dispatch thunk of Collection.startIndex.getter();
  id v27 = *(void (**)(char *, uint64_t))(v16 + 8);
  uint64_t v75 = v18;
  uint64_t v76 = v16 + 8;
  uint64_t v72 = v27;
  v27(v18, v15);
  uint64_t v28 = &v22[*(int *)(v20 + 44)];
  uint64_t v29 = v85;
  long long v30 = *(void (**)(char *, char *, uint64_t))(v85 + 32);
  id v82 = v14;
  v30(v28, v14, v84);
  outlined init with take of IndexingIterator<AttributedString.Runs>((uint64_t)v22, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for IndexingIterator<AttributedString.Runs>);
  uint64_t v31 = *(int *)(v20 + 44);
  uint64_t v78 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
  uint64_t v32 = &v25[v31];
  uint64_t v85 = v29 + 16;
  uint64_t v77 = (void (**)(char *, uint64_t))(v29 + 8);
  uint64_t v71 = (void (**)(char *))(v7 + 16);
  uint64_t v79 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
  uint64_t v70 = (unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  uint64_t v69 = (void (**)(char *, char *, uint64_t))(v7 + 32);
  uint64_t v68 = (void (**)(char *, uint64_t))(v7 + 8);
  ++v62;
  uint64_t v61 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v80 = v6;
  uint64_t v33 = v84;
  while (1)
  {
    uint64_t v34 = v82;
    v78(v82, v32, v33);
    uint64_t v35 = v32;
    int v36 = v83;
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView(&lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index, MEMORY[0x1E4F27358]);
    char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v38 = v15;
    uint64_t v39 = *v77;
    (*v77)(v36, v33);
    v39(v34, v33);
    if (v37) {
      break;
    }
    uint64_t v40 = (void (*)(_OWORD *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v41 = v87;
    uint64_t v42 = v80;
    (*v71)(v87);
    v40(v93, 0);
    uint64_t v43 = v75;
    v73(v75, v25, v38);
    uint64_t v44 = v42;
    dispatch thunk of Collection.formIndex(after:)();
    v72(v43, v38);
    (*v79)(v41, 0, 1, v42);
    if ((*v70)(v41, 1, v42) == 1) {
      goto LABEL_12;
    }
    uint64_t v32 = v35;
    uint64_t v15 = v38;
    (*v69)(v86, v87, v42);
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x1F4188790](KeyPath);
    *(&v61 - 2) = v46;
    swift_getKeyPath();
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute();
    AttributedString.Runs.Run.subscript.getter();
    swift_release();
    if (*((void *)&v89 + 1))
    {
      v93[2] = v90;
      v93[3] = v91;
      uint64_t v94 = v92;
      v93[0] = v88;
      v93[1] = v89;
      outlined init with copy of AnyToken((uint64_t)v93, (uint64_t)&v88);
      uint64_t v51 = v61;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v51 + 2) + 1, 1, v51);
      }
      unint64_t v53 = *((void *)v51 + 2);
      unint64_t v52 = *((void *)v51 + 3);
      if (v53 >= v52 >> 1) {
        uint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v52 > 1), v53 + 1, 1, v51);
      }
      *((void *)v51 + 2) = v53 + 1;
      uint64_t v61 = v51;
      uint64_t v54 = &v51[72 * v53];
      *((_OWORD *)v54 + 2) = v88;
      long long v55 = v89;
      long long v56 = v90;
      long long v57 = v91;
      *((void *)v54 + 12) = v92;
      *((_OWORD *)v54 + 4) = v56;
      *((_OWORD *)v54 + 5) = v57;
      *((_OWORD *)v54 + 3) = v55;
      outlined destroy of AnyToken((uint64_t)v93);
      (*v68)(v86, v44);
    }
    else
    {
      outlined destroy of AnyToken?((uint64_t)&v88);
      uint64_t v47 = v86;
      uint64_t v48 = v63;
      AttributedString.characters.getter();
      uint64_t v49 = (uint64_t)v65;
      AttributedString.Runs.Run.range.getter();
      AttributedString.CharacterView.subscript.getter();
      _ss16IndexingIteratorVy10Foundation16AttributedStringV4RunsVGWOhTm_1(v49, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
      (*v62)(v48, v64);
      v50._uint64_t countAndFlagsBits = String.init(_:)();
      String.append(_:)(v50);
      swift_bridgeObjectRelease();
      (*v68)(v47, v42);
    }
  }
  (*v79)(v87, 1, 1, v80);
LABEL_12:
  _ss16IndexingIteratorVy10Foundation16AttributedStringV4RunsVGWOhTm_1((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for IndexingIterator<AttributedString.Runs>);
  uint64_t v58 = v95;
  uint64_t v59 = (void *)v96;
  uint64_t v60 = v61;
  result._1._object = v59;
  result._1._uint64_t countAndFlagsBits = v58;
  result._0._rawValue = v60;
  return result;
}

uint64_t lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Slice<AttributedString.CharacterView>()
{
  if (!lazy cache variable for type metadata for Slice<AttributedString.CharacterView>)
  {
    type metadata accessor for AttributedString.CharacterView();
    lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, MEMORY[0x1E4F27270]);
    unint64_t v0 = type metadata accessor for Slice();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Slice<AttributedString.CharacterView>);
    }
  }
}

uint64_t outlined init with take of IndexingIterator<AttributedString.Runs>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

id specialized UIKitTextInputTraits.updateTraits(in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (a2)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<KeyboardTypeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
    swift_release_n();
    objc_msgSend(v3, sel_setKeyboardType_, v10);
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AutocorrectionTypeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AutocorrectionTypeKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<KeyboardTypeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
    swift_release_n();
    objc_msgSend(v3, sel_setKeyboardType_, v10);
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AutocorrectionTypeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AutocorrectionTypeKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  uint64_t v5 = 1;
  if ((v10 & 1) == 0) {
    uint64_t v5 = 2;
  }
  if (v10 == 2) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  objc_msgSend(v3, sel_setAutocorrectionType_, v6);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextContentTypeKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextContentTypeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextContentTypeKey>);
  swift_retain_n();
  if (a2)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if (v11)
  {
    uint64_t v7 = (void *)MEMORY[0x18C115780]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = 0;
  }
  objc_msgSend(v3, sel_setTextContentType_, v7);

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputAutocapitalizationKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputAutocapitalizationKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputAutocapitalizationKey>);
  swift_retain_n();
  if (a2)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  objc_msgSend(v3, sel_setAutocapitalizationType_, v10);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>);
  swift_retain_n();
  if (a2)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  id v8 = (id)qword_1883B5B98[(char)v10];
  if (objc_msgSend(v3, sel_returnKeyType) != v8) {
    objc_msgSend(v3, sel_setReturnKeyType_, v8);
  }
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>);
  swift_retain_n();
  if (a2)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return objc_msgSend(v3, sel_setWritingToolsBehavior_, qword_1883B5BE0[(char)v10]);
}

void type metadata accessor for AttributedString.Runs.Run?(uint64_t a1)
{
}

uint64_t outlined init with take of BoundInputsView?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for BoundInputsView?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

__n128 specialized closure #1 in ToolbarSearchFieldStyle.Implementation.customAccessoryReader<A>(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v28 = a3;
  uint64_t v25 = a2;
  uint64_t v7 = type metadata accessor for ToolbarSearchFieldStyle.Implementation();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *(int *)(v11 + 44);
  int v26 = *(unsigned __int8 *)(a1 + v27);
  outlined init with copy of SearchFieldConfiguration(a1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v25;
  *(void *)(v13 + 24) = a3;
  _s7SwiftUI24SearchFieldConfigurationVWObTm_0((uint64_t)v10, v13 + ((v12 + 32) & ~v12), (uint64_t (*)(void))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  outlined init with copy of SearchFieldConfiguration(a1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  uint64_t v14 = (v12 + 16) & ~v12;
  uint64_t v15 = swift_allocObject();
  _s7SwiftUI24SearchFieldConfigurationVWObTm_0((uint64_t)v10, v15 + v14, (uint64_t (*)(void))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  BOOL v30 = (v26 & 1) == 0;
  uint64_t v31 = partial apply for specialized closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.customAccessoryReader<A>(_:);
  uint64_t v32 = v13;
  uint64_t v33 = partial apply for implicit closure #2 in implicit closure #1 in closure #1 in ToolbarSearchFieldStyle.Implementation.customAccessoryReader<A>(_:);
  uint64_t v34 = v15;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  char v29 = *(unsigned char *)(a1 + v27);
  outlined init with copy of SearchFieldConfiguration(a1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  uint64_t v16 = swift_allocObject();
  _s7SwiftUI24SearchFieldConfigurationVWObTm_0((uint64_t)v10, v16 + v14, (uint64_t (*)(void))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
  type metadata accessor for ToolbarItemGroup<UIKitSearchBarAdaptor>(0, &lazy cache variable for type metadata for ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, MEMORY[0x1E4F40EE0], MEMORY[0x1E4F3FBA0]);
  lazy protocol witness table accessor for type ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>();
  swift_retain();
  View.onChange<A>(of:initial:_:)();
  swift_release();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v33);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v35);
  char v17 = v41;
  __n128 result = v39;
  long long v19 = v40;
  long long v20 = v43;
  long long v21 = v44;
  long long v22 = v38;
  long long v23 = v42;
  *(unsigned char *)a4 = v37;
  *(_OWORD *)(a4 + 8) = v22;
  *(__n128 *)(a4 + 24) = result;
  *(_OWORD *)(a4 + 40) = v19;
  *(unsigned char *)(a4 + 56) = v17;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v20;
  *(_OWORD *)(a4 + 96) = v21;
  return result;
}

uint64_t outlined destroy of ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, (uint64_t a1)
{
  type metadata accessor for ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.Se, type metadata accessor for ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedC, (void (*)(uint64_t))type metadata accessor for LazyPlatformItemWriter<LazySearchSuggestionsKey, SearchFieldConfiguration.Suggestions?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAcces(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.Se, type metadata accessor for ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedC, (void (*)(uint64_t))type metadata accessor for LazyPlatformItemWriter<LazySearchSuggestionsKey, SearchFieldConfiguration.Suggestions?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

Swift::Void __swiftcall UIKitSearchBar.enqueueFirstResponderUpdate(_:)(Swift::Bool a1)
{
  v1[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_pendingIsFirstResponder] = a1;
  id v7 = objc_msgSend(v1, sel__viewControllerForAncestor);
  if (v7 && (id v2 = objc_msgSend(v7, sel_transitionCoordinator)) != 0)
  {
    uint64_t v3 = v2;
    uint64_t v4 = swift_allocObject();
    swift_unknownObjectWeakInit();
    aBlock[4] = partial apply for closure #1 in UIKitSearchBar.enqueueFirstResponderUpdate(_:);
    aBlock[5] = v4;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
    aBlock[3] = &block_descriptor_9;
    uint64_t v5 = _Block_copy(aBlock);
    swift_release();
    objc_msgSend(v3, sel_animateAlongsideTransition_completion_, 0, v5);

    _Block_release(v5);
    swift_unknownObjectRelease();
  }
  else
  {
    id v6 = objc_msgSend(v1, sel_window);
    if (v6)
    {

      swift_allocObject();
      swift_unknownObjectWeakInit();
      swift_retain();
      static Update.enqueueAction(_:)();
      swift_release_n();
    }
  }
}

uint64_t View._onModifierKeysChanged(mask:initial:_:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = a1;
  char v8 = a2;
  uint64_t v9 = a3;
  uint64_t v10 = a4;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  return MEMORY[0x18C113660](&v7, a5, &type metadata for OnModifierKeysChangedModifier, a6);
}

uint64_t associated type witness table accessor for View.Body : View in List<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in NavigationSplitStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for EnvironmentalModifier.ResolvedModifier : ViewModifier in PopoverPresentationModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in PopoverPresentationModifier<A>.PopoverModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in DividerStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in NavigationLink<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in LabelGroup<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t specialized _JSONUnkeyedDecodingContainer.decode(_:)()
{
  id v2 = v0;
  uint64_t v3 = v0[1];
  uint64_t v4 = v0[3];
  if (v4 >= *(void *)(v3 + 16))
  {
    uint64_t v16 = type metadata accessor for DecodingError();
    swift_allocError();
    id v18 = v17;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *id v18 = MEMORY[0x1E4FBB3D0];
    uint64_t v19 = *v0;
    swift_beginAccess();
    uint64_t v20 = *(void *)(v19 + 136);
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18834BB80;
    uint64_t v22 = v2[3];
    unint64_t v40 = 0xE600000000000000;
    swift_bridgeObjectRetain();
    v23._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    *(void *)(inited + 56) = &unk_1ED468578;
    *(void *)(inited + 64) = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    uint64_t v24 = swift_allocObject();
    *(void *)(inited + 32) = v24;
    *(void *)(v24 + 16) = 0x207865646E49;
    *(void *)(v24 + 24) = 0xE600000000000000;
    *(void *)(v24 + 32) = v22;
    *(unsigned char *)(v24 + 40) = 0;
    uint64_t v39 = v20;
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v16 - 8) + 104))(v18, *MEMORY[0x1E4FBBA80], v16);
    return swift_willThrow();
  }
  uint64_t v5 = *v0;
  *(void *)&long long v36 = 0x207865646E49;
  *((void *)&v36 + 1) = 0xE600000000000000;
  uint64_t v39 = v4;
  v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)(v5 + 136);
  swift_beginAccess();
  char v8 = *(void **)(v5 + 136);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v5 + 136) = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    char v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    *uint64_t v7 = v8;
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    char v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v8);
    *uint64_t v7 = v8;
  }
  char v37 = &unk_1ED468578;
  unint64_t v12 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  unint64_t v38 = v12;
  uint64_t v13 = swift_allocObject();
  *(void *)&long long v36 = v13;
  *(void *)(v13 + 16) = 0x207865646E49;
  *(void *)(v13 + 24) = 0xE600000000000000;
  *(void *)(v13 + 32) = v4;
  *(unsigned char *)(v13 + 40) = 0;
  v8[2] = v11 + 1;
  uint64_t result = outlined init with take of OptionalBinaryInteger(&v36, (uint64_t)&v8[5 * v11 + 4]);
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  if ((unint64_t)v4 >= *(void *)(v3 + 16))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  outlined init with copy of Any(v3 + 32 * v4 + 32, (uint64_t)&v36);
  specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v36);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
    return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
  }
  char v25 = v15;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
  if (v25)
  {
    uint64_t v35 = type metadata accessor for DecodingError();
    swift_allocError();
    BOOL v30 = v29;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *BOOL v30 = MEMORY[0x1E4FBB3D0];
    swift_beginAccess();
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    uint64_t v31 = swift_initStackObject();
    *(_OWORD *)(v31 + 16) = xmmword_18834BB80;
    uint64_t v32 = v2[3];
    swift_bridgeObjectRetain();
    v33._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    *(void *)(v31 + 56) = &unk_1ED468578;
    *(void *)(v31 + 64) = v12;
    uint64_t v34 = swift_allocObject();
    *(void *)(v31 + 32) = v34;
    *(void *)(v34 + 16) = 0x207865646E49;
    *(void *)(v34 + 24) = 0xE600000000000000;
    *(void *)(v34 + 32) = v32;
    *(unsigned char *)(v34 + 40) = 0;
    specialized Array.append<A>(contentsOf:)(v31);
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void))(*(void *)(v35 - 8) + 104))(v30, *MEMORY[0x1E4FBBA80]);
    swift_willThrow();
    return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
  }
  uint64_t v26 = v2[3];
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    v2[3] = v28;
    return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  Swift::String v6;
  void *v7;
  void *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  void v36[2];
  long long v37;
  void *v38;
  unint64_t v39;
  void v40[3];
  uint64_t v41;

  id v2 = v0;
  uint64_t v3 = v0[1];
  uint64_t v4 = v0[3];
  if (v4 >= *(void *)(v3 + 16))
  {
    char v17 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v19 = v18;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    void *v19 = MEMORY[0x1E4FBC4C0];
    uint64_t v20 = *v0;
    swift_beginAccess();
    long long v21 = *(void *)(v20 + 136);
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18834BB80;
    Swift::String v23 = v2[3];
    v40[1] = 0xE600000000000000;
    v36[0] = v23;
    swift_bridgeObjectRetain();
    v24._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    *(void *)(inited + 56) = &unk_1ED468578;
    *(void *)(inited + 64) = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    char v25 = swift_allocObject();
    *(void *)(inited + 32) = v25;
    *(void *)(v25 + 16) = 0x207865646E49;
    *(void *)(v25 + 24) = 0xE600000000000000;
    *(void *)(v25 + 32) = v23;
    *(unsigned char *)(v25 + 40) = 0;
    v40[0] = v21;
    char v15 = (unint64_t)v40;
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v17 - 8) + 104))(v19, *MEMORY[0x1E4FBBA80], v17);
    swift_willThrow();
    return v15;
  }
  uint64_t v5 = (void *)*v0;
  *(void *)&char v37 = 0x207865646E49;
  *((void *)&v37 + 1) = 0xE600000000000000;
  v40[0] = v4;
  v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = v5 + 17;
  swift_beginAccess();
  char v8 = (void *)v5[17];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v5[17] = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    char v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    *uint64_t v7 = v8;
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    char v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v8);
    *uint64_t v7 = v8;
  }
  unint64_t v38 = &unk_1ED468578;
  unint64_t v12 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  uint64_t v39 = v12;
  uint64_t v13 = swift_allocObject();
  *(void *)&char v37 = v13;
  *(void *)(v13 + 16) = 0x207865646E49;
  *(void *)(v13 + 24) = 0xE600000000000000;
  *(void *)(v13 + 32) = v4;
  *(unsigned char *)(v13 + 40) = 0;
  v8[2] = v11 + 1;
  uint64_t result = outlined init with take of OptionalBinaryInteger(&v37, (uint64_t)&v8[5 * v11 + 4]);
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((unint64_t)v4 >= *(void *)(v3 + 16))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  outlined init with copy of Any(v3 + 32 * v4 + 32, (uint64_t)&v37);
  char v15 = (unint64_t)v5;
  specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v37, (SEL *)&selRef_unsignedIntValue, (SEL *)&selRef_initWithUnsignedInt_, 0x3233746E4955, (void *)0xE600000000000000);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v37);
LABEL_15:
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    return v15;
  }
  char v15 = (unint64_t)v16;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v37);
  if ((v15 & 0x100000000) != 0)
  {
    uint64_t v35 = type metadata accessor for DecodingError();
    swift_allocError();
    BOOL v30 = v29;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *BOOL v30 = MEMORY[0x1E4FBC4C0];
    swift_beginAccess();
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    uint64_t v31 = swift_initStackObject();
    *(_OWORD *)(v31 + 16) = xmmword_18834BB80;
    char v41 = v2[3];
    uint64_t v32 = v41;
    swift_bridgeObjectRetain();
    v33._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    *(void *)(v31 + 56) = &unk_1ED468578;
    *(void *)(v31 + 64) = v12;
    uint64_t v34 = swift_allocObject();
    *(void *)(v31 + 32) = v34;
    *(void *)(v34 + 16) = 0x207865646E49;
    *(void *)(v34 + 24) = 0xE600000000000000;
    *(void *)(v34 + 32) = v32;
    *(unsigned char *)(v34 + 40) = 0;
    specialized Array.append<A>(contentsOf:)(v31);
    v36[0] = 0;
    v36[1] = 0xE000000000000000;
    char v15 = (unint64_t)v36;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void))(*(void *)(v35 - 8) + 104))(v30, *MEMORY[0x1E4FBBA80]);
    swift_willThrow();
    goto LABEL_15;
  }
  uint64_t v26 = v2[3];
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    v2[3] = v28;
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    return v15;
  }
LABEL_19:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  Swift::String v6;
  void *v7;
  void *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  void v36[2];
  long long v37;
  void *v38;
  unint64_t v39;
  void v40[3];
  uint64_t v41;

  id v2 = v0;
  uint64_t v3 = v0[1];
  uint64_t v4 = v0[3];
  if (v4 >= *(void *)(v3 + 16))
  {
    char v17 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v19 = v18;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    void *v19 = MEMORY[0x1E4FBC150];
    uint64_t v20 = *v0;
    swift_beginAccess();
    long long v21 = *(void *)(v20 + 136);
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18834BB80;
    Swift::String v23 = v2[3];
    v40[1] = 0xE600000000000000;
    v36[0] = v23;
    swift_bridgeObjectRetain();
    v24._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    *(void *)(inited + 56) = &unk_1ED468578;
    *(void *)(inited + 64) = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    char v25 = swift_allocObject();
    *(void *)(inited + 32) = v25;
    *(void *)(v25 + 16) = 0x207865646E49;
    *(void *)(v25 + 24) = 0xE600000000000000;
    *(void *)(v25 + 32) = v23;
    *(unsigned char *)(v25 + 40) = 0;
    v40[0] = v21;
    char v15 = (unint64_t)v40;
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v17 - 8) + 104))(v19, *MEMORY[0x1E4FBBA80], v17);
    swift_willThrow();
    return v15;
  }
  uint64_t v5 = (void *)*v0;
  *(void *)&char v37 = 0x207865646E49;
  *((void *)&v37 + 1) = 0xE600000000000000;
  v40[0] = v4;
  v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = v5 + 17;
  swift_beginAccess();
  char v8 = (void *)v5[17];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v5[17] = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    char v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    *uint64_t v7 = v8;
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    char v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v8);
    *uint64_t v7 = v8;
  }
  unint64_t v38 = &unk_1ED468578;
  unint64_t v12 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  uint64_t v39 = v12;
  uint64_t v13 = swift_allocObject();
  *(void *)&char v37 = v13;
  *(void *)(v13 + 16) = 0x207865646E49;
  *(void *)(v13 + 24) = 0xE600000000000000;
  *(void *)(v13 + 32) = v4;
  *(unsigned char *)(v13 + 40) = 0;
  v8[2] = v11 + 1;
  uint64_t result = outlined init with take of OptionalBinaryInteger(&v37, (uint64_t)&v8[5 * v11 + 4]);
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((unint64_t)v4 >= *(void *)(v3 + 16))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  outlined init with copy of Any(v3 + 32 * v4 + 32, (uint64_t)&v37);
  char v15 = (unint64_t)v5;
  specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v37, (SEL *)&selRef_intValue, (SEL *)&selRef_initWithInt_, 0x3233746E49, (void *)0xE500000000000000);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v37);
LABEL_15:
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    return v15;
  }
  char v15 = (unint64_t)v16;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v37);
  if ((v15 & 0x100000000) != 0)
  {
    uint64_t v35 = type metadata accessor for DecodingError();
    swift_allocError();
    BOOL v30 = v29;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *BOOL v30 = MEMORY[0x1E4FBC150];
    swift_beginAccess();
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    uint64_t v31 = swift_initStackObject();
    *(_OWORD *)(v31 + 16) = xmmword_18834BB80;
    char v41 = v2[3];
    uint64_t v32 = v41;
    swift_bridgeObjectRetain();
    v33._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    *(void *)(v31 + 56) = &unk_1ED468578;
    *(void *)(v31 + 64) = v12;
    uint64_t v34 = swift_allocObject();
    *(void *)(v31 + 32) = v34;
    *(void *)(v34 + 16) = 0x207865646E49;
    *(void *)(v34 + 24) = 0xE600000000000000;
    *(void *)(v34 + 32) = v32;
    *(unsigned char *)(v34 + 40) = 0;
    specialized Array.append<A>(contentsOf:)(v31);
    v36[0] = 0;
    v36[1] = 0xE000000000000000;
    char v15 = (unint64_t)v36;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void))(*(void *)(v35 - 8) + 104))(v30, *MEMORY[0x1E4FBBA80]);
    swift_willThrow();
    goto LABEL_15;
  }
  uint64_t v26 = v2[3];
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    v2[3] = v28;
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    return v15;
  }
LABEL_19:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  Swift::String v6;
  void *v7;
  void *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  SEL *v15;
  SEL *v16;
  char v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t inited;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  void v38[2];
  long long v39;
  void *v40;
  unint64_t v41;
  void v42[3];
  uint64_t v43;

  id v2 = v0;
  uint64_t v3 = v0[1];
  uint64_t v4 = v0[3];
  if (v4 >= *(void *)(v3 + 16))
  {
    id v18 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v20 = v19;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v20 = MEMORY[0x1E4FBC1C8];
    long long v21 = *v0;
    swift_beginAccess();
    uint64_t v22 = *(void *)(v21 + 136);
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18834BB80;
    uint64_t v24 = v2[3];
    v42[1] = 0xE600000000000000;
    v38[0] = v24;
    swift_bridgeObjectRetain();
    v25._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    *(void *)(inited + 56) = &unk_1ED468578;
    *(void *)(inited + 64) = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    uint64_t v26 = swift_allocObject();
    *(void *)(inited + 32) = v26;
    *(void *)(v26 + 16) = 0x207865646E49;
    *(void *)(v26 + 24) = 0xE600000000000000;
    *(void *)(v26 + 32) = v24;
    *(unsigned char *)(v26 + 40) = 0;
    v42[0] = v22;
    char v15 = (SEL *)v42;
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x1E4FBBA80], v18);
    swift_willThrow();
    return (uint64_t)v15;
  }
  uint64_t v5 = (void *)*v0;
  *(void *)&uint64_t v39 = 0x207865646E49;
  *((void *)&v39 + 1) = 0xE600000000000000;
  v42[0] = v4;
  v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = v5 + 17;
  swift_beginAccess();
  char v8 = (void *)v5[17];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v5[17] = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    char v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    *uint64_t v7 = v8;
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    char v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v8);
    *uint64_t v7 = v8;
  }
  unint64_t v40 = &unk_1ED468578;
  unint64_t v12 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  char v41 = v12;
  uint64_t v13 = swift_allocObject();
  *(void *)&uint64_t v39 = v13;
  *(void *)(v13 + 16) = 0x207865646E49;
  *(void *)(v13 + 24) = 0xE600000000000000;
  *(void *)(v13 + 32) = v4;
  *(unsigned char *)(v13 + 40) = 0;
  v8[2] = v11 + 1;
  uint64_t result = outlined init with take of OptionalBinaryInteger(&v39, (uint64_t)&v8[5 * v11 + 4]);
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((unint64_t)v4 >= *(void *)(v3 + 16))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  outlined init with copy of Any(v3 + 32 * v4 + 32, (uint64_t)&v39);
  char v15 = (SEL *)v5;
  uint64_t v16 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v39, (SEL *)&selRef_longLongValue, (SEL *)&selRef_initWithLongLong_, 0x3436746E49, (void *)0xE500000000000000);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
LABEL_15:
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    return (uint64_t)v15;
  }
  char v15 = v16;
  BOOL v27 = v17;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
  if (v27)
  {
    char v37 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v32 = v31;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v32 = MEMORY[0x1E4FBC1C8];
    swift_beginAccess();
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    Swift::String v33 = swift_initStackObject();
    *(_OWORD *)(v33 + 16) = xmmword_18834BB80;
    long long v43 = v2[3];
    uint64_t v34 = v43;
    swift_bridgeObjectRetain();
    v35._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    *(void *)(v33 + 56) = &unk_1ED468578;
    *(void *)(v33 + 64) = v12;
    long long v36 = swift_allocObject();
    *(void *)(v33 + 32) = v36;
    *(void *)(v36 + 16) = 0x207865646E49;
    *(void *)(v36 + 24) = 0xE600000000000000;
    *(void *)(v36 + 32) = v34;
    *(unsigned char *)(v36 + 40) = 0;
    specialized Array.append<A>(contentsOf:)(v33);
    v38[0] = 0;
    v38[1] = 0xE000000000000000;
    char v15 = (SEL *)v38;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void))(*(void *)(v37 - 8) + 104))(v32, *MEMORY[0x1E4FBBA80]);
    swift_willThrow();
    goto LABEL_15;
  }
  uint64_t v28 = v2[3];
  char v29 = __OFADD__(v28, 1);
  BOOL v30 = v28 + 1;
  if (!v29)
  {
    v2[3] = v30;
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    return (uint64_t)v15;
  }
LABEL_19:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  Swift::String v6;
  void *v7;
  void *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t inited;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  void v38[2];
  long long v39;
  void *v40;
  unint64_t v41;
  void v42[3];
  uint64_t v43;

  id v2 = v0;
  uint64_t v3 = v0[1];
  uint64_t v4 = v0[3];
  if (v4 >= *(void *)(v3 + 16))
  {
    id v18 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v20 = v19;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v20 = MEMORY[0x1E4FBB1A0];
    long long v21 = *v0;
    swift_beginAccess();
    uint64_t v22 = *(void *)(v21 + 136);
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18834BB80;
    uint64_t v24 = v2[3];
    v42[1] = 0xE600000000000000;
    v38[0] = v24;
    swift_bridgeObjectRetain();
    v25._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    *(void *)(inited + 56) = &unk_1ED468578;
    *(void *)(inited + 64) = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    uint64_t v26 = swift_allocObject();
    *(void *)(inited + 32) = v26;
    *(void *)(v26 + 16) = 0x207865646E49;
    *(void *)(v26 + 24) = 0xE600000000000000;
    *(void *)(v26 + 32) = v24;
    *(unsigned char *)(v26 + 40) = 0;
    v42[0] = v22;
    char v15 = v42;
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x1E4FBBA80], v18);
    swift_willThrow();
    return (uint64_t)v15;
  }
  uint64_t v5 = (void *)*v0;
  *(void *)&uint64_t v39 = 0x207865646E49;
  *((void *)&v39 + 1) = 0xE600000000000000;
  v42[0] = v4;
  v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = v5 + 17;
  swift_beginAccess();
  char v8 = (void *)v5[17];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v5[17] = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    char v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    *uint64_t v7 = v8;
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    char v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v8);
    *uint64_t v7 = v8;
  }
  unint64_t v40 = &unk_1ED468578;
  unint64_t v12 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  char v41 = v12;
  uint64_t v13 = swift_allocObject();
  *(void *)&uint64_t v39 = v13;
  *(void *)(v13 + 16) = 0x207865646E49;
  *(void *)(v13 + 24) = 0xE600000000000000;
  *(void *)(v13 + 32) = v4;
  *(unsigned char *)(v13 + 40) = 0;
  v8[2] = v11 + 1;
  uint64_t result = outlined init with take of OptionalBinaryInteger(&v39, (uint64_t)&v8[5 * v11 + 4]);
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((unint64_t)v4 >= *(void *)(v3 + 16))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  outlined init with copy of Any(v3 + 32 * v4 + 32, (uint64_t)&v39);
  char v15 = v5;
  uint64_t v16 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v39);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
LABEL_10:
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    return (uint64_t)v15;
  }
  char v15 = (void *)v16;
  BOOL v27 = v17;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
  if (!v27)
  {
    char v37 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v32 = v31;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v32 = MEMORY[0x1E4FBB1A0];
    swift_beginAccess();
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    Swift::String v33 = swift_initStackObject();
    *(_OWORD *)(v33 + 16) = xmmword_18834BB80;
    long long v43 = v2[3];
    uint64_t v34 = v43;
    swift_bridgeObjectRetain();
    v35._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    *(void *)(v33 + 56) = &unk_1ED468578;
    *(void *)(v33 + 64) = v12;
    long long v36 = swift_allocObject();
    *(void *)(v33 + 32) = v36;
    *(void *)(v36 + 16) = 0x207865646E49;
    *(void *)(v36 + 24) = 0xE600000000000000;
    *(void *)(v36 + 32) = v34;
    *(unsigned char *)(v36 + 40) = 0;
    specialized Array.append<A>(contentsOf:)(v33);
    v38[0] = 0;
    v38[1] = 0xE000000000000000;
    char v15 = v38;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void))(*(void *)(v37 - 8) + 104))(v32, *MEMORY[0x1E4FBBA80]);
    swift_willThrow();
    goto LABEL_10;
  }
  uint64_t v28 = v2[3];
  char v29 = __OFADD__(v28, 1);
  BOOL v30 = v28 + 1;
  if (!v29)
  {
    v2[3] = v30;
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    return (uint64_t)v15;
  }
LABEL_19:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  void *v7;
  void *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  void *v15;
  char v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  char v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  void v37[2];
  long long v38;
  void *v39;
  unint64_t v40;
  void v41[3];
  uint64_t v42;

  id v2 = v0;
  uint64_t v3 = v0[1];
  uint64_t v4 = v0[3];
  if (v4 >= *(void *)(v3 + 16))
  {
    char v17 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v19 = v18;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    void *v19 = MEMORY[0x1E4FBB390];
    uint64_t v20 = *v0;
    swift_beginAccess();
    long long v21 = *(void *)(v20 + 136);
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18834BB80;
    Swift::String v23 = v2[3];
    v41[1] = 0xE600000000000000;
    v37[0] = v23;
    swift_bridgeObjectRetain();
    v24._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    *(void *)(inited + 56) = &unk_1ED468578;
    *(void *)(inited + 64) = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    char v25 = swift_allocObject();
    *(void *)(inited + 32) = v25;
    *(void *)(v25 + 16) = 0x207865646E49;
    *(void *)(v25 + 24) = 0xE600000000000000;
    *(void *)(v25 + 32) = v23;
    *(unsigned char *)(v25 + 40) = 0;
    v41[0] = v21;
    char v15 = v41;
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v17 - 8) + 104))(v19, *MEMORY[0x1E4FBBA80], v17);
    swift_willThrow();
    return v15 & 1;
  }
  uint64_t v5 = *v0;
  *(void *)&unint64_t v38 = 0x207865646E49;
  *((void *)&v38 + 1) = 0xE600000000000000;
  v41[0] = v4;
  v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)(v5 + 136);
  swift_beginAccess();
  char v8 = *(void **)(v5 + 136);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v5 + 136) = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    char v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    *uint64_t v7 = v8;
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    char v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v8);
    *uint64_t v7 = v8;
  }
  uint64_t v39 = &unk_1ED468578;
  unint64_t v12 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  unint64_t v40 = v12;
  uint64_t v13 = swift_allocObject();
  *(void *)&unint64_t v38 = v13;
  *(void *)(v13 + 16) = 0x207865646E49;
  *(void *)(v13 + 24) = 0xE600000000000000;
  *(void *)(v13 + 32) = v4;
  *(unsigned char *)(v13 + 40) = 0;
  v8[2] = v11 + 1;
  uint64_t result = outlined init with take of OptionalBinaryInteger(&v38, (uint64_t)&v8[5 * v11 + 4]);
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((unint64_t)v4 >= *(void *)(v3 + 16))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  outlined init with copy of Any(v3 + 32 * v4 + 32, (uint64_t)&v38);
  LOBYTE(v15) = v5;
  uint64_t v16 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v38);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
LABEL_13:
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    return v15 & 1;
  }
  uint64_t v26 = v16;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
  if (v26 == 2)
  {
    long long v36 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v28 = v27;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v28 = MEMORY[0x1E4FBB390];
    swift_beginAccess();
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    char v29 = swift_initStackObject();
    *(_OWORD *)(v29 + 16) = xmmword_18834BB80;
    long long v42 = v2[3];
    BOOL v30 = v42;
    swift_bridgeObjectRetain();
    v31._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    *(void *)(v29 + 56) = &unk_1ED468578;
    *(void *)(v29 + 64) = v12;
    uint64_t v32 = swift_allocObject();
    *(void *)(v29 + 32) = v32;
    *(void *)(v32 + 16) = 0x207865646E49;
    *(void *)(v32 + 24) = 0xE600000000000000;
    *(void *)(v32 + 32) = v30;
    *(unsigned char *)(v32 + 40) = 0;
    specialized Array.append<A>(contentsOf:)(v29);
    v37[0] = 0;
    v37[1] = 0xE000000000000000;
    char v15 = v37;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void))(*(void *)(v36 - 8) + 104))(v28, *MEMORY[0x1E4FBBA80]);
    swift_willThrow();
    goto LABEL_13;
  }
  Swift::String v33 = v2[3];
  uint64_t v34 = __OFADD__(v33, 1);
  uint64_t v35 = v33 + 1;
  if (!v34)
  {
    LOBYTE(v15) = v26 & 1;
    v2[3] = v35;
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    return v15 & 1;
  }
LABEL_19:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  Swift::String v6;
  void *v7;
  void *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  SEL *v15;
  SEL *v16;
  char v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t inited;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  void v38[2];
  long long v39;
  void *v40;
  unint64_t v41;
  void v42[3];
  uint64_t v43;

  id v2 = v0;
  uint64_t v3 = v0[1];
  uint64_t v4 = v0[3];
  if (v4 >= *(void *)(v3 + 16))
  {
    id v18 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v20 = v19;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v20 = MEMORY[0x1E4FBB550];
    long long v21 = *v0;
    swift_beginAccess();
    uint64_t v22 = *(void *)(v21 + 136);
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18834BB80;
    uint64_t v24 = v2[3];
    v42[1] = 0xE600000000000000;
    v38[0] = v24;
    swift_bridgeObjectRetain();
    v25._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    *(void *)(inited + 56) = &unk_1ED468578;
    *(void *)(inited + 64) = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    uint64_t v26 = swift_allocObject();
    *(void *)(inited + 32) = v26;
    *(void *)(v26 + 16) = 0x207865646E49;
    *(void *)(v26 + 24) = 0xE600000000000000;
    *(void *)(v26 + 32) = v24;
    *(unsigned char *)(v26 + 40) = 0;
    v42[0] = v22;
    char v15 = (SEL *)v42;
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x1E4FBBA80], v18);
    swift_willThrow();
    return (uint64_t)v15;
  }
  uint64_t v5 = (void *)*v0;
  *(void *)&uint64_t v39 = 0x207865646E49;
  *((void *)&v39 + 1) = 0xE600000000000000;
  v42[0] = v4;
  v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = v5 + 17;
  swift_beginAccess();
  char v8 = (void *)v5[17];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v5[17] = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    char v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    *uint64_t v7 = v8;
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    char v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v8);
    *uint64_t v7 = v8;
  }
  unint64_t v40 = &unk_1ED468578;
  unint64_t v12 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  char v41 = v12;
  uint64_t v13 = swift_allocObject();
  *(void *)&uint64_t v39 = v13;
  *(void *)(v13 + 16) = 0x207865646E49;
  *(void *)(v13 + 24) = 0xE600000000000000;
  *(void *)(v13 + 32) = v4;
  *(unsigned char *)(v13 + 40) = 0;
  v8[2] = v11 + 1;
  uint64_t result = outlined init with take of OptionalBinaryInteger(&v39, (uint64_t)&v8[5 * v11 + 4]);
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((unint64_t)v4 >= *(void *)(v3 + 16))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  outlined init with copy of Any(v3 + 32 * v4 + 32, (uint64_t)&v39);
  char v15 = (SEL *)v5;
  uint64_t v16 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v39, (SEL *)&selRef_integerValue, (SEL *)&selRef_initWithInteger_, 7630409, (void *)0xE300000000000000);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
LABEL_15:
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    return (uint64_t)v15;
  }
  char v15 = v16;
  BOOL v27 = v17;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
  if (v27)
  {
    char v37 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v32 = v31;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v32 = MEMORY[0x1E4FBB550];
    swift_beginAccess();
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    Swift::String v33 = swift_initStackObject();
    *(_OWORD *)(v33 + 16) = xmmword_18834BB80;
    long long v43 = v2[3];
    uint64_t v34 = v43;
    swift_bridgeObjectRetain();
    v35._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    *(void *)(v33 + 56) = &unk_1ED468578;
    *(void *)(v33 + 64) = v12;
    long long v36 = swift_allocObject();
    *(void *)(v33 + 32) = v36;
    *(void *)(v36 + 16) = 0x207865646E49;
    *(void *)(v36 + 24) = 0xE600000000000000;
    *(void *)(v36 + 32) = v34;
    *(unsigned char *)(v36 + 40) = 0;
    specialized Array.append<A>(contentsOf:)(v33);
    v38[0] = 0;
    v38[1] = 0xE000000000000000;
    char v15 = (SEL *)v38;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void))(*(void *)(v37 - 8) + 104))(v32, *MEMORY[0x1E4FBBA80]);
    swift_willThrow();
    goto LABEL_15;
  }
  uint64_t v28 = v2[3];
  char v29 = __OFADD__(v28, 1);
  BOOL v30 = v28 + 1;
  if (!v29)
  {
    v2[3] = v30;
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    return (uint64_t)v15;
  }
LABEL_19:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  Swift::String v6;
  void *v7;
  void *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  SEL *v15;
  SEL *v16;
  char v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t inited;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  void v38[2];
  long long v39;
  void *v40;
  unint64_t v41;
  void v42[3];
  uint64_t v43;

  id v2 = v0;
  uint64_t v3 = v0[1];
  uint64_t v4 = v0[3];
  if (v4 >= *(void *)(v3 + 16))
  {
    id v18 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v20 = v19;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v20 = MEMORY[0x1E4FBB808];
    long long v21 = *v0;
    swift_beginAccess();
    uint64_t v22 = *(void *)(v21 + 136);
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18834BB80;
    uint64_t v24 = v2[3];
    v42[1] = 0xE600000000000000;
    v38[0] = v24;
    swift_bridgeObjectRetain();
    v25._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    *(void *)(inited + 56) = &unk_1ED468578;
    *(void *)(inited + 64) = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    uint64_t v26 = swift_allocObject();
    *(void *)(inited + 32) = v26;
    *(void *)(v26 + 16) = 0x207865646E49;
    *(void *)(v26 + 24) = 0xE600000000000000;
    *(void *)(v26 + 32) = v24;
    *(unsigned char *)(v26 + 40) = 0;
    v42[0] = v22;
    char v15 = (SEL *)v42;
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x1E4FBBA80], v18);
    swift_willThrow();
    return (uint64_t)v15;
  }
  uint64_t v5 = (void *)*v0;
  *(void *)&uint64_t v39 = 0x207865646E49;
  *((void *)&v39 + 1) = 0xE600000000000000;
  v42[0] = v4;
  v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = v5 + 17;
  swift_beginAccess();
  char v8 = (void *)v5[17];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v5[17] = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    char v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    *uint64_t v7 = v8;
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    char v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v8);
    *uint64_t v7 = v8;
  }
  unint64_t v40 = &unk_1ED468578;
  unint64_t v12 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  char v41 = v12;
  uint64_t v13 = swift_allocObject();
  *(void *)&uint64_t v39 = v13;
  *(void *)(v13 + 16) = 0x207865646E49;
  *(void *)(v13 + 24) = 0xE600000000000000;
  *(void *)(v13 + 32) = v4;
  *(unsigned char *)(v13 + 40) = 0;
  v8[2] = v11 + 1;
  uint64_t result = outlined init with take of OptionalBinaryInteger(&v39, (uint64_t)&v8[5 * v11 + 4]);
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((unint64_t)v4 >= *(void *)(v3 + 16))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  outlined init with copy of Any(v3 + 32 * v4 + 32, (uint64_t)&v39);
  char v15 = (SEL *)v5;
  uint64_t v16 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v39, (SEL *)&selRef_unsignedIntegerValue, (SEL *)&selRef_initWithUnsignedInteger_, 1953384789, (void *)0xE400000000000000);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
LABEL_15:
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    return (uint64_t)v15;
  }
  char v15 = v16;
  BOOL v27 = v17;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
  if (v27)
  {
    char v37 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v32 = v31;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v32 = MEMORY[0x1E4FBB808];
    swift_beginAccess();
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    Swift::String v33 = swift_initStackObject();
    *(_OWORD *)(v33 + 16) = xmmword_18834BB80;
    long long v43 = v2[3];
    uint64_t v34 = v43;
    swift_bridgeObjectRetain();
    v35._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    *(void *)(v33 + 56) = &unk_1ED468578;
    *(void *)(v33 + 64) = v12;
    long long v36 = swift_allocObject();
    *(void *)(v33 + 32) = v36;
    *(void *)(v36 + 16) = 0x207865646E49;
    *(void *)(v36 + 24) = 0xE600000000000000;
    *(void *)(v36 + 32) = v34;
    *(unsigned char *)(v36 + 40) = 0;
    specialized Array.append<A>(contentsOf:)(v33);
    v38[0] = 0;
    v38[1] = 0xE000000000000000;
    char v15 = (SEL *)v38;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void))(*(void *)(v37 - 8) + 104))(v32, *MEMORY[0x1E4FBBA80]);
    swift_willThrow();
    goto LABEL_15;
  }
  uint64_t v28 = v2[3];
  char v29 = __OFADD__(v28, 1);
  BOOL v30 = v28 + 1;
  if (!v29)
  {
    v2[3] = v30;
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    return (uint64_t)v15;
  }
LABEL_19:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  Swift::String v6;
  void *v7;
  void *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  SEL *v15;
  SEL *v16;
  char v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t inited;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  void v38[2];
  long long v39;
  void *v40;
  unint64_t v41;
  void v42[3];
  uint64_t v43;

  id v2 = v0;
  uint64_t v3 = v0[1];
  uint64_t v4 = v0[3];
  if (v4 >= *(void *)(v3 + 16))
  {
    id v18 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v20 = v19;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v20 = MEMORY[0x1E4FBC538];
    long long v21 = *v0;
    swift_beginAccess();
    uint64_t v22 = *(void *)(v21 + 136);
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18834BB80;
    uint64_t v24 = v2[3];
    v42[1] = 0xE600000000000000;
    v38[0] = v24;
    swift_bridgeObjectRetain();
    v25._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    *(void *)(inited + 56) = &unk_1ED468578;
    *(void *)(inited + 64) = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    uint64_t v26 = swift_allocObject();
    *(void *)(inited + 32) = v26;
    *(void *)(v26 + 16) = 0x207865646E49;
    *(void *)(v26 + 24) = 0xE600000000000000;
    *(void *)(v26 + 32) = v24;
    *(unsigned char *)(v26 + 40) = 0;
    v42[0] = v22;
    char v15 = (SEL *)v42;
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x1E4FBBA80], v18);
    swift_willThrow();
    return (uint64_t)v15;
  }
  uint64_t v5 = (void *)*v0;
  *(void *)&uint64_t v39 = 0x207865646E49;
  *((void *)&v39 + 1) = 0xE600000000000000;
  v42[0] = v4;
  v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = v5 + 17;
  swift_beginAccess();
  char v8 = (void *)v5[17];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v5[17] = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    char v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    *uint64_t v7 = v8;
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    char v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v8);
    *uint64_t v7 = v8;
  }
  unint64_t v40 = &unk_1ED468578;
  unint64_t v12 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  char v41 = v12;
  uint64_t v13 = swift_allocObject();
  *(void *)&uint64_t v39 = v13;
  *(void *)(v13 + 16) = 0x207865646E49;
  *(void *)(v13 + 24) = 0xE600000000000000;
  *(void *)(v13 + 32) = v4;
  *(unsigned char *)(v13 + 40) = 0;
  v8[2] = v11 + 1;
  uint64_t result = outlined init with take of OptionalBinaryInteger(&v39, (uint64_t)&v8[5 * v11 + 4]);
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((unint64_t)v4 >= *(void *)(v3 + 16))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  outlined init with copy of Any(v3 + 32 * v4 + 32, (uint64_t)&v39);
  char v15 = (SEL *)v5;
  uint64_t v16 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v39, (SEL *)&selRef_unsignedLongLongValue, (SEL *)&selRef_initWithUnsignedLongLong_, 0x3436746E4955, (void *)0xE600000000000000);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
LABEL_15:
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    return (uint64_t)v15;
  }
  char v15 = v16;
  BOOL v27 = v17;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
  if (v27)
  {
    char v37 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v32 = v31;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v32 = MEMORY[0x1E4FBC538];
    swift_beginAccess();
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    Swift::String v33 = swift_initStackObject();
    *(_OWORD *)(v33 + 16) = xmmword_18834BB80;
    long long v43 = v2[3];
    uint64_t v34 = v43;
    swift_bridgeObjectRetain();
    v35._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    *(void *)(v33 + 56) = &unk_1ED468578;
    *(void *)(v33 + 64) = v12;
    long long v36 = swift_allocObject();
    *(void *)(v33 + 32) = v36;
    *(void *)(v36 + 16) = 0x207865646E49;
    *(void *)(v36 + 24) = 0xE600000000000000;
    *(void *)(v36 + 32) = v34;
    *(unsigned char *)(v36 + 40) = 0;
    specialized Array.append<A>(contentsOf:)(v33);
    v38[0] = 0;
    v38[1] = 0xE000000000000000;
    char v15 = (SEL *)v38;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void))(*(void *)(v37 - 8) + 104))(v32, *MEMORY[0x1E4FBBA80]);
    swift_willThrow();
    goto LABEL_15;
  }
  uint64_t v28 = v2[3];
  char v29 = __OFADD__(v28, 1);
  BOOL v30 = v28 + 1;
  if (!v29)
  {
    v2[3] = v30;
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    return (uint64_t)v15;
  }
LABEL_19:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  void *v7;
  void *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t inited;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  long long v36;
  void *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;

  id v2 = v0;
  uint64_t v3 = v0[1];
  uint64_t v4 = v0[3];
  if (v4 >= *(void *)(v3 + 16))
  {
    uint64_t v16 = type metadata accessor for DecodingError();
    swift_allocError();
    id v18 = v17;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *id v18 = MEMORY[0x1E4FBB470];
    uint64_t v19 = *v0;
    swift_beginAccess();
    uint64_t v20 = *(void *)(v19 + 136);
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18834BB80;
    uint64_t v22 = v2[3];
    unint64_t v40 = 0xE600000000000000;
    swift_bridgeObjectRetain();
    v23._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    *(void *)(inited + 56) = &unk_1ED468578;
    *(void *)(inited + 64) = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    uint64_t v24 = swift_allocObject();
    *(void *)(inited + 32) = v24;
    *(void *)(v24 + 16) = 0x207865646E49;
    *(void *)(v24 + 24) = 0xE600000000000000;
    *(void *)(v24 + 32) = v22;
    *(unsigned char *)(v24 + 40) = 0;
    uint64_t v39 = v20;
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v16 - 8) + 104))(v18, *MEMORY[0x1E4FBBA80], v16);
    return swift_willThrow();
  }
  uint64_t v5 = *v0;
  *(void *)&long long v36 = 0x207865646E49;
  *((void *)&v36 + 1) = 0xE600000000000000;
  uint64_t v39 = v4;
  v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)(v5 + 136);
  swift_beginAccess();
  char v8 = *(void **)(v5 + 136);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v5 + 136) = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    char v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    *uint64_t v7 = v8;
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    char v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v8);
    *uint64_t v7 = v8;
  }
  char v37 = &unk_1ED468578;
  unint64_t v12 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  unint64_t v38 = v12;
  uint64_t v13 = swift_allocObject();
  *(void *)&long long v36 = v13;
  *(void *)(v13 + 16) = 0x207865646E49;
  *(void *)(v13 + 24) = 0xE600000000000000;
  *(void *)(v13 + 32) = v4;
  *(unsigned char *)(v13 + 40) = 0;
  v8[2] = v11 + 1;
  uint64_t result = outlined init with take of OptionalBinaryInteger(&v36, (uint64_t)&v8[5 * v11 + 4]);
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  if ((unint64_t)v4 >= *(void *)(v3 + 16))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  outlined init with copy of Any(v3 + 32 * v4 + 32, (uint64_t)&v36);
  specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v36);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
    return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
  }
  char v25 = v15;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
  if ((v25 & 0x100000000) != 0)
  {
    uint64_t v35 = type metadata accessor for DecodingError();
    swift_allocError();
    BOOL v30 = v29;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *BOOL v30 = MEMORY[0x1E4FBB470];
    swift_beginAccess();
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    uint64_t v31 = swift_initStackObject();
    *(_OWORD *)(v31 + 16) = xmmword_18834BB80;
    uint64_t v32 = v2[3];
    swift_bridgeObjectRetain();
    v33._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    *(void *)(v31 + 56) = &unk_1ED468578;
    *(void *)(v31 + 64) = v12;
    uint64_t v34 = swift_allocObject();
    *(void *)(v31 + 32) = v34;
    *(void *)(v34 + 16) = 0x207865646E49;
    *(void *)(v34 + 24) = 0xE600000000000000;
    *(void *)(v34 + 32) = v32;
    *(unsigned char *)(v34 + 40) = 0;
    specialized Array.append<A>(contentsOf:)(v31);
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void))(*(void *)(v35 - 8) + 104))(v30, *MEMORY[0x1E4FBBA80]);
    swift_willThrow();
    return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
  }
  uint64_t v26 = v2[3];
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    v2[3] = v28;
    return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
  }
LABEL_18:
  __break(1u);
  return result;
}

double _DictionaryKeyedDecodingContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v55 = a4;
  uint64_t v56 = a2;
  uint64_t v10 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  char v15 = (char *)&v50 - v14;
  uint64_t v17 = v16;
  uint64_t v18 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v20 = *(void *)(a3 + 16);
  uint64_t v54 = a3;
  if (!v20 || (unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19), (v22 & 1) == 0))
  {
    long long v62 = 0u;
    long long v63 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v21, (uint64_t)&v62);
  swift_bridgeObjectRelease();
  if (!*((void *)&v63 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v62);
    uint64_t v52 = type metadata accessor for DecodingError();
    uint64_t v53 = swift_allocError();
    uint64_t v35 = v34;
    type metadata accessor for (CodingKey, DecodingError.Context)();
    uint64_t v51 = (void (*)(char *, uint64_t, uint64_t))((char *)v35 + *(int *)(v36 + 48));
    v35[3] = a5;
    v35[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v35);
    unint64_t v38 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v10 + 16);
    v38(boxed_opaque_existential_1, v17, a5);
    uint64_t v39 = v56;
    swift_beginAccess();
    *(void *)&long long v57 = 0;
    *((void *)&v57 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    unint64_t v60 = 0xD00000000000001DLL;
    unint64_t v61 = 0x8000000188330C20;
    uint64_t v58 = a5;
    uint64_t v59 = a6;
    unint64_t v40 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v57);
    v38(v40, v17, a5);
    uint64_t v41 = _DictionaryKeyedDecodingContainer._errorDescription(of:)(&v57, v39);
    long long v43 = v42;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v57);
    v44._uint64_t countAndFlagsBits = v41;
    v44._object = v43;
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._uint64_t countAndFlagsBits = 46;
    v45._object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void))(*(void *)(v52 - 8) + 104))(v35, *MEMORY[0x1E4FBBA68]);
    swift_willThrow();
    return v6;
  }
  outlined init with take of Any(&v62, &v57);
  uint64_t v51 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v52 = v10;
  v51(v15, v17, a5);
  uint64_t v23 = v56;
  uint64_t v24 = (uint64_t *)(v56 + 136);
  swift_beginAccess();
  char v25 = *(void **)(v23 + 136);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v23 + 136) = v25;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    char v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
    uint64_t *v24 = (uint64_t)v25;
  }
  unint64_t v28 = v25[2];
  unint64_t v27 = v25[3];
  uint64_t v29 = v52;
  if (v28 >= v27 >> 1) {
    uint64_t *v24 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v28 + 1, 1, v25);
  }
  v51(v12, (uint64_t)v15, a5);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, (uint64_t)v12, v24, a5, a6);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v15, a5);
  swift_endAccess();
  uint64_t v30 = v56;
  uint64_t v31 = v53;
  uint64_t v32 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v57);
  if (v31) {
    goto LABEL_15;
  }
  if (v33)
  {
    uint64_t v47 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v49 = v48;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v49 = MEMORY[0x1E4FBB3D0];
    *(void *)&long long v62 = 0;
    *((void *)&v62 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v47 - 8) + 104))(v49, *MEMORY[0x1E4FBBA80], v47);
    swift_willThrow();
LABEL_15:
    $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v30);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v57);
    return v6;
  }
  double v6 = *(double *)&v32;
  $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v30);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v57);
  return v6;
}

uint64_t closure #2 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = *MEMORY[0x1E4FBC8C8] & *a1;
  uint64_t v116 = type metadata accessor for IndexSet.Index();
  uint64_t v115 = *(void *)(v116 - 8);
  MEMORY[0x1F4188790](v116);
  v117 = (char *)&v113 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = type metadata accessor for IndexPath();
  uint64_t v128 = *(void *)(v134 - 8);
  MEMORY[0x1F4188790](v134);
  uint64_t v114 = (char *)&v113 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v131 = (char *)&v113 - v10;
  MEMORY[0x1F4188790](v11);
  v130 = (char *)&v113 - v12;
  _s10Foundation9IndexPathVSgMaTm_1(0, &lazy cache variable for type metadata for (source: IndexPath, destination: IndexPath)?, (uint64_t (*)(uint64_t))type metadata accessor for (source: IndexPath, destination: IndexPath), MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v13 - 8);
  v133 = (char *)&v113 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v135 = (uint64_t)&v113 - v16;
  uint64_t v17 = type metadata accessor for IndexSet();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v126 = v17;
  uint64_t v127 = v18;
  MEMORY[0x1F4188790](v17);
  v118 = (char *)&v113 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v124 = (char *)&v113 - v21;
  char v22 = *(void **)(v6 + 96);
  uint64_t v23 = *(v22 - 1);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&v113 - v25;
  uint64_t v27 = *(void *)(*(void *)(v6 + 112) + 8);
  uint64_t v28 = type metadata accessor for ShadowListDataSource();
  uint64_t v125 = *(void *)(v28 - 8);
  MEMORY[0x1F4188790](v28);
  uint64_t v30 = (char *)&v113 - v29;
  swift_beginAccess();
  ShadowListDataSource.updateBase(to:)(a2);
  swift_endAccess();
  disableFocusEventsForDeletedCells #1 <A, B>() in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(v5, a3);
  uint64_t v31 = UICollectionViewListCoordinatorBase.dragAndDropController.getter();
  (*(void (**)(char *, uint64_t, void *))(v23 + 16))(v26, a2, v22);
  id v132 = v22;
  uint64_t v129 = v27;
  ShadowListDataSource.init(_:)((uint64_t)v26, (uint64_t)v22, (uint64_t)v30);
  uint64_t v32 = (char *)v31 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v31) + 0x60);
  swift_beginAccess();
  uint64_t v33 = v126;
  uint64_t v34 = v124;
  uint64_t v35 = v127;
  uint64_t v36 = a3;
  (*(void (**)(char *, char *, uint64_t))(v125 + 40))(v32, v30, v28);
  swift_endAccess();

  uint64_t v37 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v5) + 0xB0);
  v121 = v5;
  unint64_t v38 = (char *)v5 + v37;
  swift_beginAccess();
  uint64_t v39 = v35 + 16;
  unint64_t v40 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
  v40(v34, v38, v33);
  LODWORD(v5) = IndexSet.isEmpty.getter();
  long long v43 = *(void (**)(char *, uint64_t))(v35 + 8);
  uint64_t v41 = v35 + 8;
  long long v42 = v43;
  v43(v34, v33);
  LODWORD(v125) = v5;
  if ((v5 & 1) == 0)
  {
    v40(v34, v38, v33);
    IndexSet._bridgeToObjectiveC()(v44);
    uint64_t v46 = v45;
    v42(v34, v33);
    objc_msgSend(v36, sel_deleteSections_, v46);
  }
  uint64_t v47 = v38;
  uint64_t v48 = type metadata accessor for ListCoreBatchUpdates();
  v40(v34, &v47[*(int *)(v48 + 36)], v33);
  char v49 = IndexSet.isEmpty.getter();
  v42(v34, v33);
  uint64_t v127 = v41;
  uint64_t v119 = v42;
  uint64_t v120 = v39;
  v122 = v40;
  if (v49)
  {
    char v50 = v125 ^ 1;
  }
  else
  {
    v40(v34, &v47[*(int *)(v48 + 36)], v33);
    IndexSet._bridgeToObjectiveC()(v51);
    uint64_t v53 = v52;
    v42(v34, v33);
    objc_msgSend(v36, sel_insertSections_, v53);

    char v50 = 1;
  }
  uint64_t v54 = (uint64_t)v133;
  uint64_t v125 = v48;
  uint64_t v55 = *(void *)&v47[*(int *)(v48 + 40)];
  uint64_t v56 = *(void *)(v55 + 16);
  long long v57 = v47;
  if (v56)
  {
    swift_bridgeObjectRetain();
    uint64_t v58 = (void *)(v55 + 40);
    do
    {
      objc_msgSend(v36, sel_moveSection_toSection_, *(v58 - 1), *v58);
      v58 += 2;
      --v56;
    }
    while (v56);
    swift_bridgeObjectRelease();
    char v50 = 1;
    long long v57 = v47;
  }
  uint64_t v59 = v125;
  if (*(void *)(*(void *)&v57[*(int *)(v125 + 44)] + 16))
  {
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v36, sel_deleteItemsAtIndexPaths_, isa);

    uint64_t v54 = (uint64_t)v133;
    char v50 = 1;
  }
  if (*(void *)(*(void *)&v57[*(int *)(v59 + 48)] + 16))
  {
    swift_bridgeObjectRetain();
    Class v61 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v36, sel_insertItemsAtIndexPaths_, v61);

    uint64_t v54 = (uint64_t)v133;
    char v50 = 1;
  }
  id v132 = v36;
  uint64_t v62 = *(int *)(v59 + 52);
  id v123 = v57;
  unint64_t v63 = *(void *)(*(void *)&v57[v62] + 16);
  uint64_t v64 = (void (**)(char *, uint64_t, uint64_t))(v128 + 32);
  int v65 = (uint64_t (**)(char *, uint64_t))(v128 + 8);
  uint64_t v129 = *(void *)&v57[v62];
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t i = 0;
  if (v63) {
    goto LABEL_16;
  }
LABEL_15:
  type metadata accessor for (source: IndexPath, destination: IndexPath)();
  uint64_t v69 = v68;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v54, 1, 1, v68);
  for (unint64_t i = v63; ; ++i)
  {
    uint64_t v78 = v135;
    _s7SwiftUI12SwipeActionsO5ValueVSgWObTm_0(v54, v135, (uint64_t)&lazy cache variable for type metadata for (source: IndexPath, destination: IndexPath)?, (uint64_t)type metadata accessor for (source: IndexPath, destination: IndexPath), MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s10Foundation9IndexPathVSgMaTm_1);
    type metadata accessor for (source: IndexPath, destination: IndexPath)();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 48))(v78, 1, v69) == 1) {
      break;
    }
    uint64_t v79 = v134;
    uint64_t v80 = v135;
    uint64_t v81 = *v64;
    id v82 = v130;
    (*v64)(v130, v135 + *(int *)(v69 + 48), v134);
    uint64_t v83 = v131;
    v81(v131, v80, v79);
    Class v84 = IndexPath._bridgeToObjectiveC()().super.isa;
    uint64_t v85 = *v65;
    (*v65)(v83, v79);
    Class v86 = IndexPath._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v132, sel_moveItemAtIndexPath_toIndexPath_, v84, v86);

    uint64_t v87 = v82;
    uint64_t v54 = (uint64_t)v133;
    uint64_t result = v85(v87, v79);
    char v50 = 1;
    if (i == v63) {
      goto LABEL_15;
    }
LABEL_16:
    if (i >= *(void *)(v129 + 16))
    {
      __break(1u);
      goto LABEL_33;
    }
    uint64_t v70 = v54;
    uint64_t v71 = v65;
    unint64_t v72 = v63;
    char v73 = v50;
    uint64_t v74 = v129;
    type metadata accessor for (source: IndexPath, destination: IndexPath)();
    uint64_t v69 = v75;
    uint64_t v76 = *(void *)(v75 - 8);
    uint64_t v77 = v74 + ((*(unsigned __int8 *)(v76 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80));
    char v50 = v73;
    unint64_t v63 = v72;
    int v65 = v71;
    uint64_t v54 = v70;
    _s7SwiftUI11MenuVisitor33_0F42DDF44729C152DA9EC9F6F4D00118LLV0C10StackGroupVWOcTm_0(v77 + *(void *)(v76 + 72) * i, v70, (uint64_t (*)(void))type metadata accessor for (source: IndexPath, destination: IndexPath));
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v76 + 56))(v70, 0, 1, v69);
  }
  swift_bridgeObjectRelease();
  uint64_t v88 = v126;
  long long v89 = v123;
  long long v90 = v122;
  if (v50) {
    return UICollectionViewListCoordinatorBase.clearDataSourceUpdates()();
  }
  long long v91 = v124;
  v122(v124, &v123[*(int *)(v125 + 56)], v126);
  char v92 = IndexSet.isEmpty.getter();
  v119(v91, v88);
  if (v92) {
    return UICollectionViewListCoordinatorBase.clearDataSourceUpdates()();
  }
  id v93 = v132;
  id v94 = objc_msgSend(v132, sel_collectionViewLayout);
  ObjCClassFromObject = (void *)swift_getObjCClassFromObject();

  objc_msgSend(ObjCClassFromObject, sel_invalidationContextClass);
  swift_getObjCClassMetadata();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UICollectionViewLayoutInvalidationContext);
  swift_dynamicCastMetatypeUnconditional();
  unint64_t v96 = (char *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  uint64_t v97 = v118;
  v90(v118, &v89[*(int *)(v125 + 56)], v88);
  uint64_t v98 = lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x1E4F27D00]);
  uint64_t v99 = dispatch thunk of Collection.count.getter();
  if (!v99)
  {
LABEL_30:
    v119(v97, v88);
    id v108 = (id)*MEMORY[0x1E4FB2770];
    Class v109 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v96, sel_invalidateSupplementaryElementsOfKind_atIndexPaths_, v108, v109);

    id v110 = (id)*MEMORY[0x1E4FB2760];
    Class v111 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v96, sel_invalidateSupplementaryElementsOfKind_atIndexPaths_, v110, v111);

    id v112 = objc_msgSend(v93, sel_collectionViewLayout);
    objc_msgSend(v112, sel_invalidateLayoutWithContext_, v96);

    return UICollectionViewListCoordinatorBase.clearDataSourceUpdates()();
  }
  uint64_t v100 = v99;
  v133 = v96;
  uint64_t v137 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v99 & ~(v99 >> 63), 0);
  uint64_t v101 = v137;
  v102 = v117;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if ((v100 & 0x8000000000000000) == 0)
  {
    uint64_t v103 = v114;
    uint64_t v135 = v98;
    do
    {
      uint64_t v104 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      v104(v136, 0);
      IndexPath.init(index:)();
      uint64_t v137 = v101;
      uint64_t v105 = v97;
      unint64_t v107 = *(void *)(v101 + 16);
      unint64_t v106 = *(void *)(v101 + 24);
      if (v107 >= v106 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v106 > 1, v107 + 1, 1);
        uint64_t v101 = v137;
      }
      *(void *)(v101 + 16) = v107 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v128 + 32))(v101+ ((*(unsigned __int8 *)(v128 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v128 + 80))+ *(void *)(v128 + 72) * v107, v103, v134);
      uint64_t v137 = v101;
      dispatch thunk of Collection.formIndex(after:)();
      --v100;
      uint64_t v97 = v105;
    }
    while (v100);
    (*(void (**)(char *, uint64_t))(v115 + 8))(v102, v116);
    id v93 = v132;
    unint64_t v96 = v133;
    goto LABEL_30;
  }
LABEL_33:
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, unint64_t *a5, unint64_t *a6, uint64_t a7)
{
  char v9 = (char)result;
  if (a3)
  {
    unint64_t v10 = a4[3];
    int64_t v11 = v10 >> 1;
    if ((uint64_t)(v10 >> 1) < a2)
    {
      if (v11 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v11 = a2;
      }
    }
  }
  else
  {
    int64_t v11 = a2;
  }
  uint64_t v12 = a4[2];
  if (v11 <= v12) {
    uint64_t v13 = a4[2];
  }
  else {
    uint64_t v13 = v11;
  }
  if (v13)
  {
    type metadata accessor for DropDelegate?(0, a5, a6, a7, MEMORY[0x1E4FBBE00]);
    uint64_t v14 = (void *)swift_allocObject();
    size_t v15 = _swift_stdlib_malloc_size_0(v14);
    v14[2] = v12;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
  }
  else
  {
    uint64_t v14 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v9)
  {
    if (v14 != a4 || v14 + 4 >= &a4[5 * v12 + 4]) {
      memmove(v14 + 4, a4 + 4, 40 * v12);
    }
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for ContainerBackgroundHost(0, a6);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t ShadowListDataSource.updateBase(to:)(uint64_t a1)
{
  uint64_t updated = type metadata accessor for ShadowListUpdateRecorder();

  return ShadowListUpdateRecorder.updateBase(to:)(a1, updated);
}

uint64_t disableFocusEventsForDeletedCells #1 <A, B>() in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(void *a1, void *a2)
{
  uint64_t v4 = (void *)(*MEMORY[0x1E4FBC8C8] & *a1);
  uint64_t v44 = type metadata accessor for IndexPath();
  uint64_t v5 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44);
  uint64_t v41 = (char *)v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10Foundation9IndexPathVSgMaTm_1(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v7 - 8);
  Swift::String v45 = (char *)v39 - v8;
  uint64_t v9 = type metadata accessor for IndexSet();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (char *)a1 + v4[22];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v13, v9);
  id v14 = a2;
  uint64_t v15 = specialized Sequence.flatMap<A>(_:)((uint64_t)v12, v14);
  id v52 = v14;

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v16 = v4[12];
  uint64_t v17 = *(void *)(v4[14] + 8);
  type metadata accessor for ListCoreBatchUpdates();
  uint64_t v55 = v15;
  uint64_t v18 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v18);
  uint64_t v19 = *(void *)(v55 + 16);
  v39[1] = v55;
  if (v19)
  {
    uint64_t v42 = v17;
    uint64_t v43 = v16;
    uint64_t v21 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v20 = v5 + 16;
    unint64_t v22 = v55 + ((*(unsigned __int8 *)(v20 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 64));
    uint64_t v23 = *(void *)(v20 + 56);
    uint64_t v53 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 40);
    char v49 = (unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 32);
    char v50 = v21;
    uint64_t v47 = (void (**)(char *, char *, uint64_t))(v20 + 16);
    uint64_t v48 = v23;
    uint64_t v51 = v20;
    uint64_t v46 = (void (**)(char *, uint64_t))(v20 - 8);
    uint64_t v24 = v41;
    uint64_t v25 = v44;
    uint64_t v26 = v45;
    v21(v45, v22, v44);
    while (1)
    {
      uint64_t v27 = *v53;
      (*v53)(v26, 0, 1, v25);
      if ((*v49)(v26, 1, v25) == 1) {
        return swift_bridgeObjectRelease();
      }
      (*v47)(v24, v26, v25);
      Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
      (*v46)(v24, v25);
      id v29 = objc_msgSend(v52, sel_cellForItemAtIndexPath_, isa);

      if (v29)
      {
        uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        if (!swift_dynamicCastUnknownClass())
        {

          uint64_t v26 = v45;
LABEL_4:
          uint64_t v25 = v44;
          goto LABEL_5;
        }
        uint64_t v31 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
        uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 56);
        id v33 = v29;
        uint64_t v34 = v32(AssociatedTypeWitness, v31);
        if (!v34)
        {

          uint64_t v24 = v41;
          uint64_t v26 = v45;
          goto LABEL_4;
        }
        uint64_t v35 = (void *)v34;
        id v40 = v33;
        specialized _UIHostingView.viewGraph.getter();
        swift_retain();
        GraphHost.environment.getter();
        swift_release();
        uint64_t v25 = v44;
        if (v56)
        {
          type metadata accessor for EnvironmentPropertyKey<FocusBridgeKey>();
          lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<FocusBridgeKey>);
          swift_retain_n();
          swift_retain_n();
          PropertyList.Tracker.value<A>(_:for:)();
          swift_release_n();
        }
        else
        {
          type metadata accessor for EnvironmentPropertyKey<FocusBridgeKey>();
          lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<FocusBridgeKey>);
          swift_retain_n();
          PropertyList.subscript.getter();
        }
        swift_release_n();
        uint64_t Strong = swift_weakLoadStrong();
        _s10Foundation9IndexPathVSgWOhTm_0((uint64_t)v54, &lazy cache variable for type metadata for WeakBox<FocusBridge>, (uint64_t (*)(uint64_t))type metadata accessor for FocusBridge, MEMORY[0x1E4F41720]);
        swift_release();
        swift_release();

        id v37 = v40;
        uint64_t v24 = v41;
        uint64_t v26 = v45;
        if (Strong)
        {
          *(unsigned char *)(Strong + 177) = 1;
          swift_release();
        }
      }
LABEL_5:
      v22 += v48;
      if (!--v19)
      {
        v27(v26, 1, 1, v25);
        return swift_bridgeObjectRelease();
      }
      v50(v26, v22, v25);
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v45, 1, 1, v44);
  return swift_bridgeObjectRelease();
}

uint64_t specialized static ToolbarContentKey.reduce(value:nextValue:)(uint64_t *a1, void (*a2)(void *__return_ptr))
{
  a2(v14);
  uint64_t v4 = v14[1];
  uint64_t v3 = v14[2];
  uint64_t v5 = v14[3];
  uint64_t v6 = v14[4];
  uint64_t v7 = a1[1];
  if (v7)
  {
    uint64_t v8 = *a1;
  }
  else
  {
    uint64_t v8 = v14[0];
    swift_bridgeObjectRetain();
    uint64_t v7 = v4;
  }
  *a1 = v8;
  a1[1] = v7;
  uint64_t v9 = a1[3];
  if (v9)
  {
    uint64_t v10 = a1[4];
    uint64_t v11 = a1[2];
  }
  else
  {
    outlined copy of Binding<NavigationSplitViewColumn>?(v3, v5);
    uint64_t v11 = v3;
    uint64_t v9 = v5;
    uint64_t v10 = v6;
  }
  a1[2] = v11;
  a1[3] = v9;
  a1[4] = v10;
  v14[0] = a1[5];
  uint64_t v12 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v12);
  swift_bridgeObjectRelease();
  outlined consume of Binding<NavigationSplitViewColumn>?(v3, v5);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  a1[5] = v14[0];
  return result;
}

uint64_t initializeWithCopy for ToolbarStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  if (v5)
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ToolbarKey(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(v3);
  ToolbarStorage.merge(_:options:)(v3, 1);
  return outlined release of ToolbarStorage((uint64_t)v3);
}

uint64_t closure #1 in ToolbarModifier.TransformToolbar.updateValue()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  char v8 = static SemanticFeature.isEnabled.getter();
  uint64_t v9 = 12;
  if (v8) {
    uint64_t v9 = 8;
  }
  uint64_t v10 = 14;
  if (v8) {
    uint64_t v10 = 10;
  }
  if (*(unsigned char *)(a1 + 48)) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t result = ToolbarStorage.merge(_:options:)(a2, v11);
  if (a4)
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a1 = a3;
    *(void *)(a1 + 8) = a4;
  }
  return result;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance PlatformItemList.Key(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

uint64_t ToolbarStorage.merge(_:options:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v55 = a2;
  uint64_t v4 = type metadata accessor for ToolbarStorage.Entry(0);
  uint64_t v53 = *(void *)(v4 - 8);
  uint64_t v54 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v49 - v8;
  uint64_t v10 = v2[1];
  if (v10)
  {
    uint64_t v11 = *v2;
  }
  else
  {
    uint64_t v11 = *a1;
    uint64_t v10 = swift_bridgeObjectRetain();
  }
  *id v2 = v11;
  v2[1] = v10;
  uint64_t v12 = v2[3];
  if (v12)
  {
    uint64_t v13 = v2[4];
    uint64_t v14 = v2[2];
  }
  else
  {
    uint64_t v14 = a1[2];
    uint64_t v12 = a1[3];
    uint64_t v13 = a1[4];
    outlined copy of Binding<NavigationSplitViewColumn>?(v14, v12);
  }
  v2[2] = v14;
  v2[3] = v12;
  uint64_t v51 = v2;
  v2[4] = v13;
  uint64_t v15 = MEMORY[0x1E4FBC860];
  Class v61 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v16 = a1[5];
  if ((v55 & 7) != 0)
  {
    uint64_t v59 = MEMORY[0x1E4FBC860];
    uint64_t v17 = *(void *)(v16 + 16);
    swift_bridgeObjectRetain();
    if (v17)
    {
      unint64_t v18 = (*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
      uint64_t v19 = *(void *)(v53 + 72);
      uint64_t v20 = v16 + v18;
      uint64_t v21 = MEMORY[0x1E4FBC860];
      do
      {
        outlined init with copy of ToolbarStorage.Entry(v20, (uint64_t)v9, type metadata accessor for ToolbarStorage.Entry);
        if (specialized isPlacementValid #1 (_:) in ToolbarStorage.merge(_:options:)((uint64_t)v9, v55, &v61))
        {
          _s7SwiftUI14ToolbarStorageV5EntryVWObTm_0((uint64_t)v9, (uint64_t)v6, type metadata accessor for ToolbarStorage.Entry);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v21 + 16) + 1, 1);
          }
          uint64_t v21 = v59;
          unint64_t v23 = *(void *)(v59 + 16);
          unint64_t v22 = *(void *)(v59 + 24);
          if (v23 >= v22 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
            uint64_t v21 = v59;
          }
          *(void *)(v21 + 16) = v23 + 1;
          _s7SwiftUI14ToolbarStorageV5EntryVWObTm_0((uint64_t)v6, v21 + v18 + v23 * v19, type metadata accessor for ToolbarStorage.Entry);
        }
        else
        {
          outlined destroy of ToolbarStorage.GroupItem.CollapsedContent((uint64_t)v9, type metadata accessor for ToolbarStorage.Entry);
        }
        v20 += v19;
        --v17;
      }
      while (v17);
      uint64_t v15 = v59;
    }
    swift_bridgeObjectRelease();
    uint64_t v16 = v15;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v24 = v51;
  if ((v55 & 4) != 0 && (swift_beginAccess(), (uint64_t v25 = *((void *)v61 + 2)) != 0))
  {
    char v49 = v61;
    uint64_t v50 = v16;
    uint64_t v26 = v24 + 5;
    uint64_t v27 = v61 + 32;
    uint64_t v28 = swift_bridgeObjectRetain();
    id v52 = v24 + 5;
    while (1)
    {
      MEMORY[0x1F4188790](v28);
      uint64_t v33 = specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t (*)(unint64_t))partial apply for closure #1 in ToolbarStorage.merge(_:options:));
      uint64_t v34 = (void *)*v26;
      int64_t v35 = *(void *)(*v26 + 16);
      int64_t v36 = v35 - v33;
      if (v35 < v33) {
        break;
      }
      uint64_t v37 = v33;
      if (v33 < 0) {
        goto LABEL_51;
      }
      uint64_t v38 = v33 - v35;
      uint64_t v39 = v33;
      if (__OFADD__(v35, v33 - v35)) {
        goto LABEL_52;
      }
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      long long v57 = v27;
      uint64_t v58 = v25;
      uint64_t v56 = &v49;
      if (!isUniquelyReferenced_nonNull_native || v39 > v34[3] >> 1)
      {
        if (v35 <= v39) {
          int64_t v41 = v35 - v36;
        }
        else {
          int64_t v41 = v35;
        }
        uint64_t v34 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v41, 1, v34);
      }
      uint64_t v42 = (char *)v34 + ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80));
      uint64_t v43 = *(void *)(v53 + 72);
      uint64_t v44 = v43 * v37;
      uint64_t v28 = swift_arrayDestroy();
      if (v35 != v37)
      {
        uint64_t v45 = v34[2] - v35;
        if (v45 < 0) {
          goto LABEL_54;
        }
        if (v44 < v43 * v35 || &v42[v43 * v37] >= &v42[v43 * v35 + v45 * v43])
        {
          uint64_t v28 = swift_arrayInitWithTakeFrontToBack();
        }
        else if (v44 != v43 * v35)
        {
          uint64_t v28 = swift_arrayInitWithTakeBackToFront();
        }
        uint64_t v29 = v34[2];
        BOOL v30 = __OFADD__(v29, v38);
        uint64_t v31 = v29 - v36;
        if (v30) {
          goto LABEL_53;
        }
        v34[2] = v31;
      }
      uint64_t v32 = v57;
      uint64_t v26 = v52;
      *id v52 = v34;
      uint64_t v27 = v32 + 48;
      uint64_t v25 = v58 - 1;
      if (v58 == 1)
      {
        swift_bridgeObjectRelease();
        uint64_t v16 = v50;
        uint64_t v24 = v51;
        goto LABEL_46;
      }
    }
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_46:
    uint64_t v47 = v24[5];
    if ((v55 & 8) != 0)
    {
      uint64_t v60 = v16;
    }
    else
    {
      uint64_t v60 = v24[5];
      uint64_t v47 = v16;
    }
    specialized Array.append<A>(contentsOf:)(v47);
    uint64_t result = swift_bridgeObjectRelease();
    v24[5] = v60;
  }
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v4 = *(void *)(result + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v9 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v6 + v4 <= *(void *)(v5 + 24) >> 1)
  {
    if (*(void *)(v9 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  uint64_t result = a2();
  uint64_t v5 = result;
  if (!*(void *)(v9 + 16))
  {
LABEL_10:
    if (!v4) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
LABEL_5:
  uint64_t v10 = (*(void *)(v5 + 24) >> 1) - *(void *)(v5 + 16);
  uint64_t result = a3(0);
  if (v10 < v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_11:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v3 = v5;
    return result;
  }
  uint64_t v11 = *(void *)(v5 + 16);
  BOOL v12 = __OFADD__(v11, v4);
  uint64_t v13 = v11 + v4;
  if (!v12)
  {
    *(void *)(v5 + 16) = v13;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.flatMap<A>(_:)(uint64_t a1, void *a2)
{
  id v52 = a2;
  uint64_t v64 = type metadata accessor for IndexPath();
  uint64_t v3 = *(void *)(v64 - 8);
  MEMORY[0x1F4188790](v64);
  uint64_t v5 = (char *)v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for IndexSet.Index();
  uint64_t v6 = *(void *)(v58 - 8);
  MEMORY[0x1F4188790](v58);
  uint64_t v56 = (char *)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v62 = (char *)v46 - v9;
  uint64_t v10 = type metadata accessor for IndexSet();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexingIterator<IndexSet>();
  uint64_t v15 = v14 - 8;
  double v16 = MEMORY[0x1F4188790](v14);
  unint64_t v18 = (char *)v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v49 = *(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16);
  v49(v13, a1, v10, v16);
  lazy protocol witness table accessor for type SystemSegmentItem and conformance SystemSegmentItem(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x1E4F27D00]);
  uint64_t v50 = v13;
  uint64_t v55 = v10;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v19 = v18;
  uint64_t v20 = &v18[*(int *)(v15 + 44)];
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  uint64_t v57 = v6 + 16;
  uint64_t v53 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v54 = v21;
  uint64_t v51 = v11 + 16;
  uint64_t v48 = (void (**)(char *, uint64_t))(v11 + 8);
  unint64_t v22 = v20;
  v46[2] = v3 + 32;
  uint64_t v47 = v18;
  uint64_t v59 = v20;
  uint64_t v60 = (void *)MEMORY[0x1E4FBC860];
  while (1)
  {
    uint64_t v23 = v58;
    v54(v62, v22, v58);
    lazy protocol witness table accessor for type SystemSegmentItem and conformance SystemSegmentItem(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x1E4F27D00]);
    uint64_t v24 = v55;
    uint64_t v25 = v56;
    uint64_t v26 = (uint64_t)v19;
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type SystemSegmentItem and conformance SystemSegmentItem((unint64_t *)&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, MEMORY[0x1E4F27CC8]);
    int v61 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v27 = *v53;
    (*v53)(v25, v23);
    v27(v62, v23);
    if (v61)
    {
      _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2(v26, (uint64_t (*)(void))type metadata accessor for IndexingIterator<IndexSet>);
      return (uint64_t)v60;
    }
    unint64_t v22 = v59;
    uint64_t v28 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v30 = *v29;
    v28(v63, 0);
    uint64_t v31 = v50;
    ((void (*)(char *, uint64_t, uint64_t))v49)(v50, v26, v24);
    dispatch thunk of Collection.formIndex(after:)();
    (*v48)(v31, v24);
    uint64_t result = (uint64_t)objc_msgSend(v52, sel_numberOfItemsInSection_, v30);
    if (result < 0) {
      break;
    }
    uint64_t v33 = result;
    if (result)
    {
      v63[0] = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, result, 0);
      uint64_t v34 = 0;
      uint64_t v35 = v63[0];
      do
      {
        MEMORY[0x18C10A8A0](v34, v30);
        v63[0] = v35;
        unint64_t v37 = *(void *)(v35 + 16);
        unint64_t v36 = *(void *)(v35 + 24);
        if (v37 >= v36 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
          uint64_t v35 = v63[0];
        }
        ++v34;
        *(void *)(v35 + 16) = v37 + 1;
        uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(v35+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v37, v5, v64);
      }
      while (v33 != v34);
      unint64_t v22 = v59;
    }
    else
    {
      uint64_t v35 = MEMORY[0x1E4FBC860];
    }
    uint64_t v38 = *(void *)(v35 + 16);
    uint64_t v39 = v60;
    int64_t v40 = v60[2];
    int64_t v41 = v40 + v38;
    if (__OFADD__(v40, v38)) {
      goto LABEL_27;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (!result || v41 > v39[3] >> 1)
    {
      if (v40 <= v41) {
        int64_t v42 = v40 + v38;
      }
      else {
        int64_t v42 = v40;
      }
      uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v42, 1, v39);
      uint64_t v39 = (void *)result;
    }
    uint64_t v19 = v47;
    if (*(void *)(v35 + 16))
    {
      if ((v39[3] >> 1) - v39[2] < v38) {
        goto LABEL_29;
      }
      uint64_t result = swift_arrayInitWithCopy();
      if (v38)
      {
        uint64_t v43 = v39[2];
        BOOL v44 = __OFADD__(v43, v38);
        uint64_t v45 = v43 + v38;
        if (v44) {
          goto LABEL_30;
        }
        void v39[2] = v45;
      }
    }
    else if (v38)
    {
      goto LABEL_28;
    }
    uint64_t v60 = v39;
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t lazy protocol witness table accessor for type SystemSegmentItem and conformance SystemSegmentItem(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of Binding<[SwiftUIAnySortComparator]>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for IndexingIterator<IndexSet>()
{
  if (!lazy cache variable for type metadata for IndexingIterator<IndexSet>)
  {
    type metadata accessor for IndexSet();
    lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x1E4F27D00]);
    unint64_t v0 = type metadata accessor for IndexingIterator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<IndexSet>);
    }
  }
}

uint64_t ShadowListUpdateRecorder.updateBase(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = ShadowListUpdateRecorder.hasUncommittedUpdates.getter();
  if (result)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 16);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for ListUpdate();
    type metadata accessor for Array();
    Array.removeAll(keepingCapacity:)(1);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(v2, a1, v6);
  }
  return result;
}

BOOL ShadowListUpdateRecorder.hasUncommittedUpdates.getter()
{
  return (Collection.isEmpty.getter() & 1) == 0;
}

uint64_t outlined init with take of SwipeActions.Value?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

uint64_t _s7SwiftUI12SwipeActionsO5ValueVSgWObTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

uint64_t lazy protocol witness table accessor for type IndexSet and conformance IndexSet(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t EnvironmentValues.supportsSystemDrag.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for _PreferenceWritingModifier<DragItemTimings.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SupportsSystemDragKey>, (uint64_t)&unk_1ED421DF8, (uint64_t)&protocol witness table for EnvironmentValues.SupportsSystemDragKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.PrefersFullSizeDragPreviewsKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SupportsSystemDragKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SupportsSystemDragKey>, (uint64_t)&unk_1ED421DF8, (uint64_t)&protocol witness table for EnvironmentValues.SupportsSystemDragKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for _PreferenceWritingModifier<DragItemTimings.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SupportsSystemDragKey>, (uint64_t)&unk_1ED421DF8, (uint64_t)&protocol witness table for EnvironmentValues.SupportsSystemDragKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.PrefersFullSizeDragPreviewsKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SupportsSystemDragKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SupportsSystemDragKey>, (uint64_t)&unk_1ED421DF8, (uint64_t)&protocol witness table for EnvironmentValues.SupportsSystemDragKey);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.prefersFullSizeDragPreviews.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for _PreferenceWritingModifier<DragItemTimings.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PrefersFullSizeDragPreviewsKey>, (uint64_t)&unk_1ED422290, (uint64_t)&protocol witness table for EnvironmentValues.PrefersFullSizeDragPreviewsKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.PrefersFullSizeDragPreviewsKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PrefersFullSizeDragPreviewsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PrefersFullSizeDragPreviewsKey>, (uint64_t)&unk_1ED422290, (uint64_t)&protocol witness table for EnvironmentValues.PrefersFullSizeDragPreviewsKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for _PreferenceWritingModifier<DragItemTimings.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PrefersFullSizeDragPreviewsKey>, (uint64_t)&unk_1ED422290, (uint64_t)&protocol witness table for EnvironmentValues.PrefersFullSizeDragPreviewsKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.PrefersFullSizeDragPreviewsKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PrefersFullSizeDragPreviewsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PrefersFullSizeDragPreviewsKey>, (uint64_t)&unk_1ED422290, (uint64_t)&protocol witness table for EnvironmentValues.PrefersFullSizeDragPreviewsKey);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

void type metadata accessor for _PreferenceWritingModifier<DragItemTimings.Key>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t EnvironmentValues.prefersFullSizeDragPreviews.setter()
{
  type metadata accessor for _PreferenceWritingModifier<DragItemTimings.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PrefersFullSizeDragPreviewsKey>, (uint64_t)&unk_1ED422290, (uint64_t)&protocol witness table for EnvironmentValues.PrefersFullSizeDragPreviewsKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.PrefersFullSizeDragPreviewsKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PrefersFullSizeDragPreviewsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PrefersFullSizeDragPreviewsKey>, (uint64_t)&unk_1ED422290, (uint64_t)&protocol witness table for EnvironmentValues.PrefersFullSizeDragPreviewsKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(int *a1)
{
  int v1 = *a1;
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = v1;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for closure #1 in BarItemModifier.Transform.value.getter;
  *(void *)(v3 + 24) = v2;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:), (void (*)(uint64_t))type metadata accessor for [ViewIdentity : ConfirmationDialog]);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  int v1;
  uint64_t v2;
  uint64_t v3;

  int v1 = *a1;
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = v1;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for closure #1 in PlatformItemListNamedImageRepresentable.NamedResolvedRule.value.getter;
  *(void *)(v3 + 24) = v2;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  AGGraphSetOutputValue();
  return swift_release();
}

{
  int v1;
  uint64_t v2;
  uint64_t v3;

  int v1 = *a1;
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = v1;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for closure #1 in AccessibilityLargeContentViewHitTestingTransform.value.getter;
  *(void *)(v3 + 24) = v2;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  AGGraphSetOutputValue();
  return swift_release();
}

{
  int v1;
  uint64_t v2;
  uint64_t v3;

  int v1 = *a1;
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = v1;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for specialized closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter;
  *(void *)(v3 + 24) = v2;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  AGGraphSetOutputValue();
  return swift_release();
}

{
  int v1;
  uint64_t v2;
  uint64_t v3;

  int v1 = *a1;
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = v1;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for specialized closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter;
  *(void *)(v3 + 24) = v2;
  type metadata accessor for (_:)(0, &lazy cache variable for type metadata for (_:));
  AGGraphSetOutputValue();
  return swift_release();
}

{
  int v1;
  uint64_t v2;
  uint64_t v3;

  int v1 = *a1;
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = v1;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for specialized closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter;
  *(void *)(v3 + 24) = v2;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:), (void (*)(uint64_t))type metadata accessor for [ViewResponder]);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  int v1;
  uint64_t v2;
  uint64_t v3;

  int v1 = *a1;
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = v1;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for specialized closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter;
  *(void *)(v3 + 24) = v2;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  AGGraphSetOutputValue();
  return swift_release();
}

{
  int v1;
  uint64_t v2;
  uint64_t v3;

  int v1 = *a1;
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = v1;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for closure #1 in TooltipModifier.TransformPlatformItems.value.getter;
  *(void *)(v3 + 24) = v2;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  AGGraphSetOutputValue();
  return swift_release();
}

{
  int v1;
  uint64_t v2;
  uint64_t v3;

  int v1 = *a1;
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = v1;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for closure #1 in PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform.value.getter;
  *(void *)(v3 + 24) = v2;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  AGGraphSetOutputValue();
  return swift_release();
}

{
  int v1;
  int v2;
  uint64_t v3;
  void (*v4)(char **);
  uint64_t Value;
  uint64_t v6;
  void *v7;
  char v8;
  uint64_t v9;

  int v1 = *a1;
  uint64_t v2 = a1[1];
  AGGraphGetValue();
  uint64_t v3 = 0;
  uint64_t v4 = (void (*)(char **))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  if ((EnvironmentValues.accessibilityEnabled.getter() & 1) != 0 && v1 != *MEMORY[0x1E4F4E7A0])
  {
    Value = AGGraphGetValue();
    unint64_t v6 = *(void *)Value;
    uint64_t v7 = *(void **)(Value + 8);
    uint64_t v8 = *(unsigned char *)(Value + 16);
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v6;
    *(void *)(v3 + 24) = v7;
    *(unsigned char *)(v3 + 32) = v8;
    *(_DWORD *)(v3 + 36) = v1;
    *(_DWORD *)(v3 + 40) = v2;
    outlined copy of AccessibilityAttachment.Tree(v6, v7, v8);
    uint64_t v4 = partial apply for closure #2 in PlatformItemListTransform.value.getter;
  }
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v4;
  *(void *)(v9 + 24) = v3;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  AGGraphSetOutputValue();
  return swift_release();
}

{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t (*v6)(uint64_t);
  uint64_t v7;

  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)AGGraphGetValue();
  if (v3 < 0)
  {
    unint64_t v6 = (unint64_t (*)(uint64_t))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v4 = a1[1];
    uint64_t v5 = swift_allocObject();
    *(_DWORD *)(v5 + 16) = v2;
    *(_DWORD *)(v5 + 20) = v4;
    *(void *)(v5 + 24) = v3;
    unint64_t v6 = partial apply for closure #2 in ContainerBackgroundModifier.CustomPreferenceValue.value.getter;
  }
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v6;
  *(void *)(v7 + 24) = v5;
  type metadata accessor for (_:)(0, &lazy cache variable for type metadata for (_:));
  AGGraphSetOutputValue();
  return swift_release();
}

{
  int v1;
  uint64_t v2;
  uint64_t v3;

  int v1 = *a1;
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = v1;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for closure #1 in AccessibilityAttachment.DeferredTransform.value.getter;
  *(void *)(v3 + 24) = v2;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  AGGraphSetOutputValue();
  return swift_release();
}

{
  int v2;
  uint64_t v3;
  uint64_t Value;
  long long v5;
  long long v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  uint64_t v2 = *a1;
  uint64_t v3 = swift_allocObject();
  Value = AGGraphGetValue();
  uint64_t v5 = *(_OWORD *)(Value + 8);
  unint64_t v6 = *(_OWORD *)(Value + 24);
  *(void *)(v3 + 16) = *(void *)Value;
  *(_OWORD *)(v3 + 24) = v5;
  *(_OWORD *)(v3 + 40) = v6;
  uint64_t v13 = *(void *)(a1 + 1);
  AGGraphGetValue();
  uint64_t v7 = swift_retain();
  *(double *)&uint64_t v8 = MEMORY[0x18C10C240](v7);
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v9, v8));
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v3;
  *(_DWORD *)(v10 + 24) = v2;
  *(void *)(v10 + 28) = v13;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = partial apply for closure #1 in FocusableFillerBoundsTransform.value.getter;
  *(void *)(v11 + 24) = v10;
  type metadata accessor for (_:)();
  AGGraphSetOutputValue();
  return swift_release();
}

uint64_t (*specialized ToolbarAppearanceModifier.PreferenceValue.value.getter(uint64_t a1))(void *a1)
{
  uint64_t v2 = specialized ToolbarAppearanceModifier.PreferenceValue.resolvedBars.getter();
  uint64_t v20 = 0;
  memset(v19, 0, sizeof(v19));
  char v3 = specialized Sequence<>.contains(_:)((uint64_t)v19, (uint64_t)v2);
  swift_bridgeObjectRelease();
  outlined destroy of ToolbarPlacement.Role((uint64_t)v19);
  uint64_t v4 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  if (v3)
  {
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    uint64_t v18 = Transaction.animation.getter();
    swift_release();
    AGGraphSetUpdate();
    uint64_t Value = AGGraphGetValue();
    char v6 = *(unsigned char *)Value;
    char v7 = *(unsigned char *)(Value + 24);
    uint64_t v8 = *(void *)(Value + 32);
    char v9 = *(unsigned char *)(Value + 40);
    uint64_t v10 = *(void *)(Value + 48);
    char v11 = *(unsigned char *)(Value + 56);
    uint64_t v13 = *(void *)(Value + 8);
    uint64_t v12 = *(void *)(Value + 16);
    __int16 v16 = *(_WORD *)(Value + 57);
    char v17 = *(unsigned char *)(Value + 59);
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = a1;
    *(unsigned char *)(v14 + 24) = v6;
    *(void *)(v14 + 32) = v12;
    *(unsigned char *)(v14 + 40) = v7;
    *(void *)(v14 + 48) = v8;
    *(unsigned char *)(v14 + 56) = v9;
    *(void *)(v14 + 64) = v10;
    *(unsigned char *)(v14 + 72) = v11;
    *(_WORD *)(v14 + 73) = v16;
    *(void *)(v14 + 80) = v13;
    *(void *)(v14 + 88) = v18;
    *(unsigned char *)(v14 + 96) = v17;
    swift_retain();
    swift_retain();
    return partial apply for specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter;
  }
  return (uint64_t (*)(void *))v4;
}

{
  char *v2;
  char v3;
  uint64_t (*v4)(void, void, void, void);
  uint64_t Value;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v16;
  char v17;
  uint64_t v18;
  void v19[3];
  long long v20;

  uint64_t v2 = specialized ToolbarAppearanceModifier.PreferenceValue.resolvedBars.getter();
  memset(v19, 0, sizeof(v19));
  uint64_t v20 = xmmword_18838AA10;
  char v3 = specialized Sequence<>.contains(_:)((uint64_t)v19, (uint64_t)v2);
  swift_bridgeObjectRelease();
  outlined destroy of ToolbarPlacement.Role((uint64_t)v19);
  uint64_t v4 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  if (v3)
  {
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    uint64_t v18 = Transaction.animation.getter();
    swift_release();
    AGGraphSetUpdate();
    uint64_t Value = AGGraphGetValue();
    char v6 = *(unsigned char *)Value;
    char v7 = *(unsigned char *)(Value + 24);
    uint64_t v8 = *(void *)(Value + 32);
    char v9 = *(unsigned char *)(Value + 40);
    uint64_t v10 = *(void *)(Value + 48);
    char v11 = *(unsigned char *)(Value + 56);
    uint64_t v13 = *(void *)(Value + 8);
    uint64_t v12 = *(void *)(Value + 16);
    __int16 v16 = *(_WORD *)(Value + 57);
    char v17 = *(unsigned char *)(Value + 59);
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = a1;
    *(unsigned char *)(v14 + 24) = v6;
    *(void *)(v14 + 32) = v12;
    *(unsigned char *)(v14 + 40) = v7;
    *(void *)(v14 + 48) = v8;
    *(unsigned char *)(v14 + 56) = v9;
    *(void *)(v14 + 64) = v10;
    *(unsigned char *)(v14 + 72) = v11;
    *(_WORD *)(v14 + 73) = v16;
    *(void *)(v14 + 80) = v13;
    *(void *)(v14 + 88) = v18;
    *(unsigned char *)(v14 + 96) = v17;
    swift_retain();
    swift_retain();
    return partial apply for specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter;
  }
  return (uint64_t (*)(void *))v4;
}

{
  char *v2;
  char v3;
  uint64_t (*v4)(void, void, void, void);
  uint64_t Value;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v16;
  char v17;
  uint64_t v18;
  void v19[3];
  long long v20;

  uint64_t v2 = specialized ToolbarAppearanceModifier.PreferenceValue.resolvedBars.getter();
  memset(v19, 0, sizeof(v19));
  uint64_t v20 = xmmword_18834FC50;
  char v3 = specialized Sequence<>.contains(_:)((uint64_t)v19, (uint64_t)v2);
  swift_bridgeObjectRelease();
  outlined destroy of ToolbarPlacement.Role((uint64_t)v19);
  uint64_t v4 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  if (v3)
  {
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    uint64_t v18 = Transaction.animation.getter();
    swift_release();
    AGGraphSetUpdate();
    uint64_t Value = AGGraphGetValue();
    char v6 = *(unsigned char *)Value;
    char v7 = *(unsigned char *)(Value + 24);
    uint64_t v8 = *(void *)(Value + 32);
    char v9 = *(unsigned char *)(Value + 40);
    uint64_t v10 = *(void *)(Value + 48);
    char v11 = *(unsigned char *)(Value + 56);
    uint64_t v13 = *(void *)(Value + 8);
    uint64_t v12 = *(void *)(Value + 16);
    __int16 v16 = *(_WORD *)(Value + 57);
    char v17 = *(unsigned char *)(Value + 59);
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = a1;
    *(unsigned char *)(v14 + 24) = v6;
    *(void *)(v14 + 32) = v12;
    *(unsigned char *)(v14 + 40) = v7;
    *(void *)(v14 + 48) = v8;
    *(unsigned char *)(v14 + 56) = v9;
    *(void *)(v14 + 64) = v10;
    *(unsigned char *)(v14 + 72) = v11;
    *(_WORD *)(v14 + 73) = v16;
    *(void *)(v14 + 80) = v13;
    *(void *)(v14 + 88) = v18;
    *(unsigned char *)(v14 + 96) = v17;
    swift_retain();
    swift_retain();
    return partial apply for specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter;
  }
  return (uint64_t (*)(void *))v4;
}

{
  char *v2;
  char v3;
  uint64_t (*v4)(void, void, void, void);
  uint64_t Value;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v16;
  char v17;
  uint64_t v18;
  void v19[3];
  long long v20;

  uint64_t v2 = specialized ToolbarAppearanceModifier.PreferenceValue.resolvedBars.getter();
  memset(v19, 0, sizeof(v19));
  uint64_t v20 = xmmword_188382680;
  char v3 = specialized Sequence<>.contains(_:)((uint64_t)v19, (uint64_t)v2);
  swift_bridgeObjectRelease();
  outlined destroy of ToolbarPlacement.Role((uint64_t)v19);
  uint64_t v4 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  if (v3)
  {
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    uint64_t v18 = Transaction.animation.getter();
    swift_release();
    AGGraphSetUpdate();
    uint64_t Value = AGGraphGetValue();
    char v6 = *(unsigned char *)Value;
    char v7 = *(unsigned char *)(Value + 24);
    uint64_t v8 = *(void *)(Value + 32);
    char v9 = *(unsigned char *)(Value + 40);
    uint64_t v10 = *(void *)(Value + 48);
    char v11 = *(unsigned char *)(Value + 56);
    uint64_t v13 = *(void *)(Value + 8);
    uint64_t v12 = *(void *)(Value + 16);
    __int16 v16 = *(_WORD *)(Value + 57);
    char v17 = *(unsigned char *)(Value + 59);
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = a1;
    *(unsigned char *)(v14 + 24) = v6;
    *(void *)(v14 + 32) = v12;
    *(unsigned char *)(v14 + 40) = v7;
    *(void *)(v14 + 48) = v8;
    *(unsigned char *)(v14 + 56) = v9;
    *(void *)(v14 + 64) = v10;
    *(unsigned char *)(v14 + 72) = v11;
    *(_WORD *)(v14 + 73) = v16;
    *(void *)(v14 + 80) = v13;
    *(void *)(v14 + 88) = v18;
    *(unsigned char *)(v14 + 96) = v17;
    swift_retain();
    swift_retain();
    return partial apply for specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter;
  }
  return (uint64_t (*)(void *))v4;
}

{
  char *v2;
  char v3;
  uint64_t (*v4)(void, void, void, void);
  uint64_t Value;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v16;
  char v17;
  uint64_t v18;
  void v19[3];
  long long v20;

  uint64_t v2 = specialized ToolbarAppearanceModifier.PreferenceValue.resolvedBars.getter();
  memset(v19, 0, sizeof(v19));
  uint64_t v20 = xmmword_18835ED10;
  char v3 = specialized Sequence<>.contains(_:)((uint64_t)v19, (uint64_t)v2);
  swift_bridgeObjectRelease();
  outlined destroy of ToolbarPlacement.Role((uint64_t)v19);
  uint64_t v4 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  if (v3)
  {
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    uint64_t v18 = Transaction.animation.getter();
    swift_release();
    AGGraphSetUpdate();
    uint64_t Value = AGGraphGetValue();
    char v6 = *(unsigned char *)Value;
    char v7 = *(unsigned char *)(Value + 24);
    uint64_t v8 = *(void *)(Value + 32);
    char v9 = *(unsigned char *)(Value + 40);
    uint64_t v10 = *(void *)(Value + 48);
    char v11 = *(unsigned char *)(Value + 56);
    uint64_t v13 = *(void *)(Value + 8);
    uint64_t v12 = *(void *)(Value + 16);
    __int16 v16 = *(_WORD *)(Value + 57);
    char v17 = *(unsigned char *)(Value + 59);
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = a1;
    *(unsigned char *)(v14 + 24) = v6;
    *(void *)(v14 + 32) = v12;
    *(unsigned char *)(v14 + 40) = v7;
    *(void *)(v14 + 48) = v8;
    *(unsigned char *)(v14 + 56) = v9;
    *(void *)(v14 + 64) = v10;
    *(unsigned char *)(v14 + 72) = v11;
    *(_WORD *)(v14 + 73) = v16;
    *(void *)(v14 + 80) = v13;
    *(void *)(v14 + 88) = v18;
    *(unsigned char *)(v14 + 96) = v17;
    swift_retain();
    swift_retain();
    return partial apply for specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter;
  }
  return (uint64_t (*)(void *))v4;
}

{
  char *v2;
  char v3;
  uint64_t (*v4)(void, void, void, void);
  uint64_t Value;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v16;
  char v17;
  uint64_t v18;
  void v19[3];
  long long v20;

  uint64_t v2 = specialized ToolbarAppearanceModifier.PreferenceValue.resolvedBars.getter();
  memset(v19, 0, sizeof(v19));
  uint64_t v20 = xmmword_188382670;
  char v3 = specialized Sequence<>.contains(_:)((uint64_t)v19, (uint64_t)v2);
  swift_bridgeObjectRelease();
  outlined destroy of ToolbarPlacement.Role((uint64_t)v19);
  uint64_t v4 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  if (v3)
  {
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    uint64_t v18 = Transaction.animation.getter();
    swift_release();
    AGGraphSetUpdate();
    uint64_t Value = AGGraphGetValue();
    char v6 = *(unsigned char *)Value;
    char v7 = *(unsigned char *)(Value + 24);
    uint64_t v8 = *(void *)(Value + 32);
    char v9 = *(unsigned char *)(Value + 40);
    uint64_t v10 = *(void *)(Value + 48);
    char v11 = *(unsigned char *)(Value + 56);
    uint64_t v13 = *(void *)(Value + 8);
    uint64_t v12 = *(void *)(Value + 16);
    __int16 v16 = *(_WORD *)(Value + 57);
    char v17 = *(unsigned char *)(Value + 59);
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = a1;
    *(unsigned char *)(v14 + 24) = v6;
    *(void *)(v14 + 32) = v12;
    *(unsigned char *)(v14 + 40) = v7;
    *(void *)(v14 + 48) = v8;
    *(unsigned char *)(v14 + 56) = v9;
    *(void *)(v14 + 64) = v10;
    *(unsigned char *)(v14 + 72) = v11;
    *(_WORD *)(v14 + 73) = v16;
    *(void *)(v14 + 80) = v13;
    *(void *)(v14 + 88) = v18;
    *(unsigned char *)(v14 + 96) = v17;
    swift_retain();
    swift_retain();
    return partial apply for specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter;
  }
  return (uint64_t (*)(void *))v4;
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(unint64_t *a1)
{
  int v1 = SearchToolbarItem.SearchTransform.value.getter(*a1);
  uint64_t v3 = v2;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v3;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:), type metadata accessor for ToolbarStorage.SearchItem?);
  AGGraphSetOutputValue();
  return swift_release();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = a3(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v3;
  *(void *)(v6 + 24) = v5;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:), (void (*)(uint64_t))type metadata accessor for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration]);
  AGGraphSetOutputValue();
  return swift_release();
}

uint64_t type metadata accessor for (_:)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result = *a2;
  if (!*a2)
  {
    a3(255);
    uint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a2;
  if (!*a2)
  {
    a3(255);
    uint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a2;
  if (!*a2)
  {
    type metadata accessor for UIView?();
    a3(255);
    uint64_t result = swift_getFunctionTypeMetadata1();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = a2 + 32;
  swift_bridgeObjectRetain();
  while (2)
  {
    outlined init with copy of ToolbarPlacement.Role(v4, (uint64_t)v15);
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v15, (uint64_t)v10);
    outlined init with copy of ToolbarPlacement.Role(a1, (uint64_t)&v12);
    switch(v11)
    {
      case 0:
        if (*((void *)&v13 + 1)) {
          goto LABEL_19;
        }
        goto LABEL_25;
      case 1:
        if (*((void *)&v13 + 1) == 1) {
          goto LABEL_25;
        }
        goto LABEL_19;
      case 2:
        if (*((void *)&v13 + 1) == 2) {
          goto LABEL_25;
        }
        goto LABEL_19;
      case 3:
        if (*((void *)&v13 + 1) == 3) {
          goto LABEL_25;
        }
        goto LABEL_19;
      case 4:
        if (*((void *)&v13 + 1) == 4) {
          goto LABEL_25;
        }
        goto LABEL_19;
      case 5:
        if (*((void *)&v13 + 1) == 5) {
          goto LABEL_25;
        }
        goto LABEL_19;
      case 6:
        if (*((void *)&v13 + 1) != 6) {
          goto LABEL_19;
        }
        goto LABEL_25;
      default:
        outlined init with copy of ToolbarPlacement.Role((uint64_t)v10, (uint64_t)v9);
        if (*((void *)&v13 + 1) < 7uLL)
        {
          outlined destroy of AnyHashable((uint64_t)v9);
LABEL_19:
          outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for (ToolbarPlacement.Role, ToolbarPlacement.Role));
          goto LABEL_20;
        }
        v7[0] = v12;
        v7[1] = v13;
        uint64_t v8 = v14;
        char v5 = MEMORY[0x18C1174E0](v9, v7);
        outlined destroy of AnyHashable((uint64_t)v7);
        outlined destroy of AnyHashable((uint64_t)v9);
        if ((v5 & 1) == 0)
        {
          outlined destroy of ToolbarPlacement.Role((uint64_t)v10);
LABEL_20:
          outlined destroy of ToolbarPlacement.Role((uint64_t)v15);
          v4 += 40;
          if (!--v2)
          {
            swift_bridgeObjectRelease();
            return 0;
          }
          continue;
        }
LABEL_25:
        outlined destroy of ToolbarPlacement.Role((uint64_t)v10);
        outlined destroy of ToolbarPlacement.Role((uint64_t)v15);
        swift_bridgeObjectRelease();
        return 1;
    }
  }
}

uint64_t outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t (*specialized ToolbarAppearanceModifier.PreferenceValue.value.getter(unint64_t a1))(void *a1)
{
  int v1 = a1;
  unint64_t v16 = HIDWORD(a1);
  AGGraphClearUpdate();
  AGGraphGetValue();
  swift_retain();
  uint64_t v15 = Transaction.animation.getter();
  swift_release();
  AGGraphSetUpdate();
  uint64_t Value = AGGraphGetValue();
  char v3 = *(unsigned char *)Value;
  char v4 = *(unsigned char *)(Value + 24);
  uint64_t v5 = *(void *)(Value + 32);
  char v6 = *(unsigned char *)(Value + 40);
  uint64_t v7 = *(void *)(Value + 48);
  char v8 = *(unsigned char *)(Value + 56);
  uint64_t v10 = *(void *)(Value + 8);
  uint64_t v9 = *(void *)(Value + 16);
  __int16 v13 = *(_WORD *)(Value + 57);
  char v14 = *(unsigned char *)(Value + 59);
  uint64_t v11 = swift_allocObject();
  *(_DWORD *)(v11 + 16) = v1;
  *(_DWORD *)(v11 + 20) = v16;
  *(unsigned char *)(v11 + 24) = v3;
  *(void *)(v11 + 32) = v9;
  *(unsigned char *)(v11 + 40) = v4;
  *(void *)(v11 + 48) = v5;
  *(unsigned char *)(v11 + 56) = v6;
  *(void *)(v11 + 64) = v7;
  *(unsigned char *)(v11 + 72) = v8;
  *(_WORD *)(v11 + 73) = v13;
  *(void *)(v11 + 80) = v10;
  *(void *)(v11 + 88) = v15;
  *(unsigned char *)(v11 + 96) = v14;
  swift_retain();
  swift_retain();
  return partial apply for specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter;
}

unsigned __int8 *assignWithTake for LazyState(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (a1 != a2)
  {
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    else {
      swift_release();
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v18 = 1;
    }
    else
    {
      char v18 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    a1[v7] = v18;
  }
  unint64_t v19 = *(void *)(v6 + 64);
  if (v19 <= 0x10) {
    unint64_t v19 = 16;
  }
  *(void *)((unint64_t)&a1[v19 + 8] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v19 + 8] & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance NavigationCommonTransformEnvironment(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance NavigationCommonTransformEnvironment()
{
  lazy protocol witness table accessor for type NavigationCommonTransformEnvironment and conformance NavigationCommonTransformEnvironment();

  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

unint64_t lazy protocol witness table accessor for type NavigationCommonTransformEnvironment and conformance NavigationCommonTransformEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationCommonTransformEnvironment and conformance NavigationCommonTransformEnvironment;
  if (!lazy protocol witness table cache variable for type NavigationCommonTransformEnvironment and conformance NavigationCommonTransformEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationCommonTransformEnvironment and conformance NavigationCommonTransformEnvironment);
  }
  return result;
}

uint64_t static _ViewListOutputs.mapKitUnaryViewList<A>(view:inputs:)()
{
  return static _ViewListOutputs.unaryViewList<A>(view:inputs:)();
}

double static PrimitiveButtonStyle<>.navigationLink.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_WORD *)(a1 + 168) = 511;
  return result;
}

uint64_t one-time initialization function for defaultValue()
{
  static Semantics.v4.getter();
  uint64_t result = isLinkedOnOrAfter(_:)();
  static ExpandedSplitViewKey.defaultuint64_t Value = (result & 1) == 0;
  return result;
}

{
  qword_1E90090A8 = 0;
  return swift_unknownObjectWeakInit();
}

{
  return OptionalEdgeInsets.init()();
}

{
  return swift_weakInit();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  static ScrollEnvironmentPropertiesKey.defaultuint64_t Value = 257;
  dword_1EB2E4FBC = 0;
  unk_1EB2E4F70 = 0u;
  unk_1EB2E4F80 = 0u;
  unk_1EB2E4F90 = 0u;
  unk_1EB2E4FA0 = 0u;
  unk_1EB2E4FAB = 0u;
  word_1EB2E4FC0 = 1;
  byte_1EB2E4FC8 = 0;
  qword_1EB2E4FD0 = 0;
  word_1EB2E4FD8 = 0;
  byte_1EB2E4FE0 = 0;
  qword_1EB2E4FE8 = 0;
  word_1EB2E4FF0 = 0;
  static EdgeInsets.zero.getter();
  qword_1EB2E4FF8 = v0;
  unk_1EB2E5000 = v1;
  qword_1EB2E5008 = v2;
  unk_1EB2E5010 = v3;
  uint64_t result = static EdgeInsets.zero.getter();
  qword_1EB2E5018 = v5;
  unk_1EB2E5020 = v6;
  qword_1EB2E5028 = v7;
  unk_1EB2E5030 = v8;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  int *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t, uint64_t);
  char *v10;
  long long v11;
  long long v12;
  _OWORD v14[4];

  uint64_t v0 = type metadata accessor for UIListContentConfiguration();
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = (int *)type metadata accessor for CellConfiguration();
  MEMORY[0x1F4188790](v3);
  long long v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_allocate_value_buffer(v6, static CellConfigurationKey.defaultValue);
  uint64_t v7 = __swift_project_value_buffer((uint64_t)v3, (uint64_t)static CellConfigurationKey.defaultValue);
  int v8 = type metadata accessor for UICellConfigurationState();
  unsigned int v9 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
  v9(v5, 1, 1, v8);
  v5[v3[7]] = 2;
  outlined destroy of UICellConfigurationState?((uint64_t)v5, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00]);
  v9(v5, 1, 1, v8);
  v5[v3[5]] = 0;
  static UIListContentConfiguration.cell()();
  specialized CellConfiguration.Values.init(_:)((uint64_t)v2, (uint64_t *)v14);
  uint64_t v10 = &v5[v3[9]];
  int v11 = v14[1];
  *(_OWORD *)uint64_t v10 = v14[0];
  *((_OWORD *)v10 + 1) = v11;
  int v12 = v14[3];
  *((_OWORD *)v10 + 2) = v14[2];
  *((_OWORD *)v10 + 3) = v12;
  v5[v3[6]] = 0;
  *(void *)&v5[v3[8]] = 0;
  return outlined init with take of CellConfiguration((uint64_t)v5, v7);
}

{
  return static Binding.constant(_:)();
}

{
  uint64_t vars8;

  swift_weakInit();

  return swift_weakAssign();
}

{
  uint64_t vars8;

  if (one-time initialization token for default != -1) {
    swift_once();
  }
  static SegmentedControlStyleKey.defaultuint64_t Value = static AnySegmentedControlStyle.default;

  return swift_retain();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  uint64_t v0 = type metadata accessor for TableColumnAlignment(0);
  __swift_allocate_value_buffer(v0, static TableColumnAlignment.Key.defaultValue);
  int v1 = __swift_project_value_buffer(v0, (uint64_t)static TableColumnAlignment.Key.defaultValue);
  uint64_t v2 = type metadata accessor for Locale.NumberingSystem();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(v1, 1, 5, v2);
}

{
  uint64_t result;
  unsigned char v1[216];

  _s7SwiftUI12PlatformItemV14PrimaryContentVSgWOi0_((uint64_t)v1);
  xmmword_1E90FBDA8 = 0u;
  unk_1E90FBDB8 = 0u;
  xmmword_1E90FBDC8 = 0u;
  unk_1E90FBDD8 = xmmword_18834FC50;
  static TabItem.TraitKey.defaultuint64_t Value = (uint64_t)&outlined read-only object #0 of one-time initialization function for defaultValue;
  unk_1E90FBCC0 = 0;
  dword_1E90FBCC8 = 0;
  uint64_t result = outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v1, (uint64_t)&unk_1E90FBCD0);
  qword_1E90FBDE8 = 0;
  byte_1E90FBDF0 = 1;
  qword_1E90FBDF8 = 0;
  unk_1E90FBE00 = 0;
  return result;
}

{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  uint64_t result;

  uint64_t v0 = self;
  int v1 = objc_msgSend(v0, sel_currentTraitCollection);
  uint64_t v2 = objc_msgSend(v1, sel_horizontalSizeClass);

  uint64_t v3 = objc_msgSend(v0, sel_currentTraitCollection);
  long long v4 = objc_msgSend(v3, sel_userInterfaceIdiom);

  uint64_t result = specialized SearchSuggestionsPlacement.Role.init(sizeClass:idiom:placement:)((uint64_t)v2, (uint64_t)v4, 2u);
  static EnvironmentValues.SearchSuggestionsPlacementKey.defaultuint64_t Value = (result == 2) | result & 1;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  _s10Foundation3URLVSgMaTm_7(0, &lazy cache variable for type metadata for DocumentConfiguration?, (void (*)(uint64_t))type metadata accessor for DocumentConfiguration);
  int v1 = v0;
  __swift_allocate_value_buffer(v0, static DocumentConfigurationEnvironmentKey.defaultValue);
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static DocumentConfigurationEnvironmentKey.defaultValue);
  uint64_t v3 = type metadata accessor for DocumentConfiguration();
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(v2, 1, 1, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  type metadata accessor for TabContextMenuKey.Storage?(0, &lazy cache variable for type metadata for TabContextMenuKey.Storage?, (void (*)(uint64_t))type metadata accessor for TabContextMenuKey.Storage);
  int v1 = v0;
  __swift_allocate_value_buffer(v0, static TabContextMenuKey.defaultValue);
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static TabContextMenuKey.defaultValue);
  uint64_t v3 = type metadata accessor for TabContextMenuKey.Storage(0);
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(v2, 1, 1, v3);
}

{
  return swift_weakInit();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  type metadata accessor for WidgetAuxiliaryViewMetadata?(0, &lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata?, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata);
  int v1 = v0;
  __swift_allocate_value_buffer(v0, static WidgetAuxiliaryCurvedContentKey.defaultValue);
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static WidgetAuxiliaryCurvedContentKey.defaultValue);
  uint64_t v3 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(v2, 1, 1, v3);
}

{
  uint64_t result;

  if (one-time initialization token for bottom != -1) {
    uint64_t result = swift_once();
  }
  static PositionKey.defaultuint64_t Value = static JindoTripleVStack.Position.bottom;
  qword_1E9000850 = qword_1E9000A30;
  byte_1E9000858 = byte_1E9000A38;
  qword_1E9000860 = qword_1E9000A40;
  byte_1E9000868 = byte_1E9000A48;
  return result;
}

{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  uint64_t result = static EdgeInsets.zero.getter();
  *(void *)&static ProminentHeaderStylingKey.defaultuint64_t Value = v1;
  *((void *)&static ProminentHeaderStylingKey.defaultValue + 1) = v2;
  qword_1E90373F0 = v3;
  unk_1E90373F8 = v4;
  qword_1E9037408 = 0;
  unk_1E9037410 = 0;
  qword_1E9037400 = 0;
  byte_1E9037418 = 0;
  qword_1E9037420 = 0x4024000000000000;
  qword_1E9037428 = 1;
  byte_1E9037430 = 0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  type metadata accessor for Binding<TabViewCustomization>?(0);
  int v1 = v0;
  __swift_allocate_value_buffer(v0, static TabViewCustomization.Key.defaultValue);
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static TabViewCustomization.Key.defaultValue);
  type metadata accessor for Binding<TabViewCustomization>(0);
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(v2, 1, 1, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, &lazy cache variable for type metadata for SearchFieldConfiguration.Data?, type metadata accessor for SearchFieldConfiguration.Data, MEMORY[0x1E4FBB718]);
  int v1 = v0;
  __swift_allocate_value_buffer(v0, static SearchFieldConfiguration.Key.defaultValue);
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static SearchFieldConfiguration.Key.defaultValue);
  uint64_t v3 = type metadata accessor for SearchFieldConfiguration.Data(0);
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(v2, 1, 1, v3);
}

{
  uint64_t vars8;

  swift_unknownObjectWeakInit();

  return swift_unknownObjectWeakAssign();
}

uint64_t closure #1 in View.inspector<A>(behavior:isPresented:content:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  int v44 = a8;
  uint64_t v45 = a7;
  uint64_t v46 = a2;
  uint64_t v43 = a6;
  int v42 = a5;
  uint64_t v47 = a9;
  uint64_t v40 = a4;
  uint64_t v41 = a11;
  uint64_t v38 = a15;
  uint64_t v39 = a10;
  uint64_t v35 = a14;
  uint64_t v37 = a13;
  type metadata accessor for IdentifiedPreferenceTransformModifier<InspectorStorage.PreferenceKey>(255, &lazy cache variable for type metadata for IdentifiedPreferenceTransformModifier<InspectorStorage.PreferenceKey>, (uint64_t)&type metadata for InspectorStorage.PreferenceKey, (uint64_t)&protocol witness table for InspectorStorage.PreferenceKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for IdentifiedPreferenceTransformModifier);
  uint64_t v36 = a12;
  uint64_t v17 = type metadata accessor for ModifiedContent();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v35 - v22;
  uint64_t v25 = *a1;
  uint64_t v24 = a1[1];
  uint64_t v26 = swift_allocObject();
  uint64_t v27 = v37;
  *(void *)(v26 + 16) = a12;
  *(void *)(v26 + 24) = v27;
  uint64_t v28 = v38;
  *(void *)(v26 + 32) = a14;
  *(void *)(v26 + 40) = v28;
  uint64_t v29 = v40;
  uint64_t v30 = v41;
  *(void *)(v26 + 48) = a3;
  *(void *)(v26 + 56) = v29;
  *(unsigned char *)(v26 + 64) = v42;
  uint64_t v31 = v45;
  *(void *)(v26 + 72) = v43;
  *(void *)(v26 + 80) = v31;
  *(unsigned char *)(v26 + 88) = v44;
  *(void *)(v26 + 96) = v39;
  *(void *)(v26 + 104) = v30;
  *(void *)(v26 + 112) = v25;
  *(void *)(v26 + 120) = v24;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v32 = v35;
  View.transformIdentifiedPreference<A>(_:transform:)((uint64_t)&type metadata for InspectorStorage.PreferenceKey, (uint64_t)partial apply for closure #1 in closure #1 in View.inspector<A>(behavior:isPresented:content:), v26, v36, (uint64_t)&type metadata for InspectorStorage.PreferenceKey, v35);
  swift_release();
  uint64_t v48 = v32;
  char v49 = &protocol witness table for IdentifiedPreferenceTransformModifier<A>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v20);
  uint64_t v33 = *(void (**)(char *, uint64_t))(v18 + 8);
  v33(v20, v17);
  static ViewBuilder.buildExpression<A>(_:)(v23);
  return ((uint64_t (*)(char *, uint64_t))v33)(v23, v17);
}

void type metadata accessor for IdentifiedPreferenceTransformModifier<InspectorStorage.PreferenceKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t _sypSgWOcTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for EmptyCollection<Character>(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t _sypSgWOcTm_1(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for [TableColumnCustomizationID](0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t _sypSgWOcTm_2(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for DropDestination?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void type metadata accessor for [TableColumnCustomizationID](uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t @objc ToolbarBridge.__ivar_destroyer(uint64_t a1)
{
  _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_0(a1 + direct field offset for ToolbarBridge.updateContext, (uint64_t)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext, (uint64_t (*)(void))type metadata accessor for AccessibilityValueStorage?);
  uint64_t v2 = *(void **)(a1 + direct field offset for ToolbarBridge.platformVended);
  uint64_t v3 = *(void **)(a1 + direct field offset for ToolbarBridge.platformVended + 8);
  long long v4 = *(void **)(a1 + direct field offset for ToolbarBridge.platformVended + 32);
  unint64_t v5 = *(void **)(a1 + direct field offset for ToolbarBridge.platformVended + 48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  outlined consume of ToolbarStorage?(*(void *)(a1 + direct field offset for ToolbarBridge.toolbarStorage), *(void *)(a1 + direct field offset for ToolbarBridge.toolbarStorage + 8), *(void *)(a1 + direct field offset for ToolbarBridge.toolbarStorage + 16), *(void *)(a1 + direct field offset for ToolbarBridge.toolbarStorage + 24), *(void *)(a1 + direct field offset for ToolbarBridge.toolbarStorage + 32), *(void *)(a1 + direct field offset for ToolbarBridge.toolbarStorage + 40));
  outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>(a1 + direct field offset for ToolbarBridge.searchItem, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
  swift_bridgeObjectRelease();
  outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>(a1 + direct field offset for ToolbarBridge.navigationProperties, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.NavigationProperties?);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t closure #3 in closure #1 in ToolbarBridge.preferencesDidChange(_:context:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v7 = *(_OWORD *)(a1 + 16);
  v51[0] = *(_OWORD *)a1;
  v51[1] = v7;
  long long v8 = *(_OWORD *)(a1 + 48);
  v51[2] = *(_OWORD *)(a1 + 32);
  v51[3] = v8;
  uint64_t v9 = *MEMORY[0x1E4FBC8C8] & *a2;
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 56);
  unsigned int v14 = (char *)a2 + direct field offset for ToolbarBridge.toolbarStorage;
  uint64_t v15 = *(void *)((char *)a2 + direct field offset for ToolbarBridge.toolbarStorage);
  uint64_t v16 = *(void *)((char *)a2 + direct field offset for ToolbarBridge.toolbarStorage + 8);
  uint64_t v17 = *(void *)((char *)a2 + direct field offset for ToolbarBridge.toolbarStorage + 16);
  uint64_t v18 = *(void *)((char *)a2 + direct field offset for ToolbarBridge.toolbarStorage + 24);
  uint64_t v20 = *(void *)((char *)a2 + direct field offset for ToolbarBridge.toolbarStorage + 32);
  uint64_t v19 = *(void *)((char *)a2 + direct field offset for ToolbarBridge.toolbarStorage + 40);
  *(_OWORD *)unsigned int v14 = v51[0];
  *((_OWORD *)v14 + 1) = v7;
  *((void *)v14 + 4) = v10;
  *((void *)v14 + 5) = v11;
  *((void *)v14 + 6) = v12;
  *((void *)v14 + 7) = v13;
  outlined retain of ToolbarStorage((uint64_t)v51);
  outlined consume of ToolbarStorage?(v15, v16, v17, v18, v20, v19);
  v43[0] = a4;
  uint64_t v21 = *(void *)(v9 + 80);
  uint64_t v22 = *(void *)(v9 + 88);
  ToolbarStrategy.makeBarContext(storage:preferences:)((uint64_t)v51, v43, v21, v22, (uint64_t)&v44);
  unsigned __int8 v23 = v44;
  char v24 = v45;
  char v25 = v46;
  char v26 = v47;
  unsigned __int8 v27 = v48;
  unsigned __int8 v28 = v49;
  int v29 = v50;
  uint64_t v30 = 256;
  if (!v45) {
    uint64_t v30 = 0;
  }
  uint64_t v31 = v30 | v44;
  uint64_t v32 = 0x10000;
  if (!v46) {
    uint64_t v32 = 0;
  }
  uint64_t v33 = 0x1000000;
  if (!v47) {
    uint64_t v33 = 0;
  }
  uint64_t v34 = v31 | v32 | v33;
  unint64_t v35 = v34 | ((unint64_t)v48 << 32) | ((unint64_t)v49 << 40);
  uint64_t v36 = (char *)a2 + direct field offset for ToolbarBridge.lastBarContext;
  *(_DWORD *)uint64_t v36 = v34;
  *((_WORD *)v36 + 2) = WORD2(v35);
  uint64_t v37 = 0x1000000000000;
  if (!v29) {
    uint64_t v37 = 0;
  }
  v36[6] = (v35 | v37) >> 48;
  unsigned __int8 v44 = v23;
  char v45 = v24;
  char v46 = v25;
  char v47 = v26;
  unsigned __int8 v48 = v27;
  unsigned __int8 v49 = v28;
  unsigned __int8 v50 = v29;
  outlined init with copy of Toolbar.UpdateContext(a5, (uint64_t)v43);
  ToolbarBridge.updateStorage(newStorage:barContext:updateContext:strategy:)(v51, &v44, (uint64_t)v43, a3);
  outlined destroy of Toolbar.UpdateContext((uint64_t)v43);
  *(void *)a6 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 96))(v21, v22);
  uint64_t result = swift_bridgeObjectRelease();
  *(unsigned char *)(a6 + 8) = 1;
  return result;
}

uint64_t outlined consume of ToolbarStorage?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6)
  {
    swift_bridgeObjectRelease();
    outlined consume of Binding<NavigationSplitViewColumn>?(a3, a4);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t ToolbarStrategy.makeBarContext(storage:preferences:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *a2;
  uint64_t v10 = MEMORY[0x1E4FBB1A0];
  uint64_t v11 = MEMORY[0x1E4FBB718];
  outlined init with take of String?(a1, (uint64_t)v21, (uint64_t)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s7SwiftUI7ToolbarO13UpdateContextVSgMaTm_0);
  outlined init with take of String?((uint64_t)v21, (uint64_t)v22, (uint64_t)&lazy cache variable for type metadata for String?, v10, v11, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s7SwiftUI7ToolbarO13UpdateContextVSgMaTm_0);
  BOOL v19 = v23 != 0;
  *(_DWORD *)uint64_t v20 = 0x1000000;
  *(_WORD *)&void v20[4] = 1;
  v18[2] = &v19;
  v18[3] = v9;
  v18[4] = a1;
  uint64_t result = ToolbarStrategy.withUpdate<A>(_:)((void (*)(void *, unsigned char *))partial apply for closure #1 in ToolbarStrategy.makeBarContext(storage:preferences:), (uint64_t)v18, a3, MEMORY[0x1E4FBC848] + 8, a4);
  char v13 = v20[0];
  char v14 = v20[1];
  char v15 = v20[2];
  __int16 v16 = *(_WORD *)&v20[3];
  char v17 = v20[5];
  *(unsigned char *)a5 = v19;
  *(unsigned char *)(a5 + 1) = v13;
  *(unsigned char *)(a5 + 2) = v14;
  *(unsigned char *)(a5 + 3) = v15;
  *(_WORD *)(a5 + 4) = v16;
  *(unsigned char *)(a5 + 6) = v17;
  return result;
}

uint64_t ToolbarStrategy.withUpdate<A>(_:)(void (*a1)(void *, unsigned char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a3, a5);
  if (v8)
  {
    uint64_t v9 = (void *)v8;
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a5 + 40))(v11, a3, a5);
    if (v11[11])
    {
      outlined init with take of Toolbar.UpdateContext((uint64_t)v11, (uint64_t)v12);
      a1(v9, v12);

      return outlined destroy of Toolbar.UpdateContext((uint64_t)v12);
    }

    _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_0((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext, (uint64_t (*)(void))type metadata accessor for AccessibilityValueStorage?);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id protocol witness for ToolbarStrategy.updater.getter in conformance UIKitToolbarStrategy()
{
  id v1 = *v0;
  id v2 = *v0;
  return v1;
}

uint64_t protocol witness for ToolbarStrategy.updateContext.getter in conformance UIKitToolbarStrategy@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of PushTarget?(v1 + 8, a1, &lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
}

uint64_t partial apply for closure #1 in ToolbarStrategy.makeBarContext(storage:preferences:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in ToolbarStrategy.makeBarContext(storage:preferences:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t closure #1 in ToolbarStrategy.makeBarContext(storage:preferences:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_WORD *)(a3 + 4) = *(_WORD *)(a2 + 80);
  uint64_t v7 = MEMORY[0x18C119DF0](a2 + 64);
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    if (UIViewController.hasOrWillHaveBackItem(overrides:)(a2))
    {
      char v9 = 1;
LABEL_9:

      goto LABEL_10;
    }
    id v10 = objc_msgSend(v8, sel_navigationItem);
    id v11 = objc_msgSend(v10, sel_leftBarButtonItems);

    if (!v11)
    {
      char v9 = 0;
      goto LABEL_9;
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
    unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    char v13 = specialized Sequence.first(where:)(v12);
    swift_bridgeObjectRelease();

    if (v13)
    {
      char v9 = 1;
      uint64_t v8 = v13;
      goto LABEL_9;
    }
  }
  char v9 = 0;
LABEL_10:
  *(unsigned char *)(a3 + 2) = v9;
  v41[0] = a4;
  PreferenceValues.subscript.getter();
  uint64_t v32 = a3;
  *(unsigned char *)(a3 + 1) = v42[0];
  uint64_t v14 = swift_bridgeObjectRetain();
  char v15 = specialized Sequence.compactMap<A>(_:)(v14);
  swift_bridgeObjectRelease();
  uint64_t v16 = specialized Set.init<A>(_:)((uint64_t)v15);
  swift_bridgeObjectRelease();
  uint64_t v17 = v16 + 56;
  uint64_t v18 = 1 << *(unsigned char *)(v16 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & *(void *)(v16 + 56);
  int64_t v21 = (unint64_t)(v18 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v23 = 0;
  while (1)
  {
    if (v20)
    {
      unint64_t v24 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v25 = v24 | (v23 << 6);
      goto LABEL_33;
    }
    int64_t v26 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v26 >= v21) {
      goto LABEL_38;
    }
    unint64_t v27 = *(void *)(v17 + 8 * v26);
    ++v23;
    if (!v27)
    {
      int64_t v23 = v26 + 1;
      if (v26 + 1 >= v21) {
        goto LABEL_38;
      }
      unint64_t v27 = *(void *)(v17 + 8 * v23);
      if (!v27)
      {
        int64_t v23 = v26 + 2;
        if (v26 + 2 >= v21) {
          goto LABEL_38;
        }
        unint64_t v27 = *(void *)(v17 + 8 * v23);
        if (!v27)
        {
          int64_t v23 = v26 + 3;
          if (v26 + 3 >= v21) {
            goto LABEL_38;
          }
          unint64_t v27 = *(void *)(v17 + 8 * v23);
          if (!v27)
          {
            int64_t v23 = v26 + 4;
            if (v26 + 4 >= v21) {
              goto LABEL_38;
            }
            unint64_t v27 = *(void *)(v17 + 8 * v23);
            if (!v27) {
              break;
            }
          }
        }
      }
    }
LABEL_32:
    unint64_t v20 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v23 << 6);
LABEL_33:
    outlined init with copy of ToolbarItemPlacement.Role(*(void *)(v16 + 48) + 48 * v25, (uint64_t)v42);
    outlined init with take of ToolbarItemPlacement.Role((uint64_t)v42, (uint64_t)v41);
    uint64_t v37 = 6;
    long long v38 = 0u;
    long long v39 = 0u;
    char v40 = 2;
    char v29 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v41, (uint64_t)&v37);
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v37);
    outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v41, (uint64_t)&v37);
    if (v29)
    {
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v37);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v41);
LABEL_37:
      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
      char v31 = 1;
LABEL_39:
      *(unsigned char *)(v32 + 3) = v31;
      return result;
    }
    uint64_t v33 = 22;
    long long v34 = 0u;
    long long v35 = 0u;
    char v36 = 2;
    char v30 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)&v37, (uint64_t)&v33);
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v33);
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v37);
    uint64_t result = outlined destroy of ToolbarItemPlacement.Role((uint64_t)v41);
    if (v30) {
      goto LABEL_37;
    }
  }
  int64_t v28 = v26 + 5;
  if (v28 >= v21)
  {
LABEL_38:
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
    char v31 = 0;
    goto LABEL_39;
  }
  unint64_t v27 = *(void *)(v17 + 8 * v28);
  if (v27)
  {
    int64_t v23 = v28;
    goto LABEL_32;
  }
  while (1)
  {
    int64_t v23 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v23 >= v21) {
      goto LABEL_38;
    }
    unint64_t v27 = *(void *)(v17 + 8 * v23);
    ++v28;
    if (v27) {
      goto LABEL_32;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

char *specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ToolbarStorage.GroupItem(0);
  MEMORY[0x1F4188790](v3 - 8);
  unsigned __int8 v44 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v40 = (uint64_t)v35 - v6;
  MEMORY[0x1F4188790](v7);
  char v9 = (char *)v35 - v8;
  uint64_t v10 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1F4188790](v10);
  unint64_t v12 = (char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  char v15 = (char *)v35 - v14;
  uint64_t v37 = type metadata accessor for ToolbarStorage.Item(0);
  uint64_t v36 = *(void *)(v37 - 8);
  MEMORY[0x1F4188790](v37);
  uint64_t v43 = (uint64_t)v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = *(void *)(a1 + 16);
  if (!v19) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  v35[2] = v1;
  unint64_t v20 = (char *)v35 - v18;
  uint64_t v21 = *(void *)(type metadata accessor for ToolbarStorage.Entry(0) - 8);
  uint64_t v22 = a1 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
  uint64_t v49 = *(void *)(v21 + 72);
  long long v38 = v9 + 16;
  long long v39 = v9;
  uint64_t v41 = v20 + 48;
  int v42 = v20;
  v35[1] = a1;
  swift_bridgeObjectRetain();
  int64_t v23 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v24 = (uint64_t)v44;
  while (1)
  {
    outlined init with copy of ToolbarStorage.Entry.Kind(v22, (uint64_t)v15, type metadata accessor for ToolbarStorage.Entry.Kind);
    if (swift_getEnumCaseMultiPayload()) {
      break;
    }
    uint64_t v30 = v43;
    outlined init with take of ToolbarStorage.NavigationProperties((uint64_t)v15, v43, type metadata accessor for ToolbarStorage.Item);
    uint64_t v31 = v30;
    uint64_t v28 = (uint64_t)v42;
    outlined init with take of ToolbarStorage.NavigationProperties(v31, (uint64_t)v42, type metadata accessor for ToolbarStorage.Item);
    outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v41, (uint64_t)v45);
    char v29 = type metadata accessor for ToolbarStorage.Item;
LABEL_14:
    outlined destroy of ToolbarStorage.NavigationProperties(v28, v29);
    if (v47 != 255)
    {
      outlined init with take of ToolbarItemPlacement.Role((uint64_t)v45, (uint64_t)v48);
      outlined init with take of ToolbarItemPlacement.Role((uint64_t)v48, (uint64_t)v45);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v23 + 2) + 1, 1, v23);
      }
      unint64_t v33 = *((void *)v23 + 2);
      unint64_t v32 = *((void *)v23 + 3);
      if (v33 >= v32 >> 1) {
        int64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v32 > 1), v33 + 1, 1, v23);
      }
      *((void *)v23 + 2) = v33 + 1;
      outlined init with take of ToolbarItemPlacement.Role((uint64_t)v45, (uint64_t)&v23[48 * v33 + 32]);
      uint64_t v24 = (uint64_t)v44;
      goto LABEL_5;
    }
LABEL_4:
    outlined destroy of PushTarget?((uint64_t)v45, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
LABEL_5:
    v22 += v49;
    if (!--v19) {
      goto LABEL_22;
    }
  }
  outlined destroy of ToolbarStorage.NavigationProperties((uint64_t)v15, type metadata accessor for ToolbarStorage.Entry.Kind);
  outlined init with copy of ToolbarStorage.Entry.Kind(v22, (uint64_t)v12, type metadata accessor for ToolbarStorage.Entry.Kind);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of ToolbarStorage.NavigationProperties((uint64_t)v12, type metadata accessor for ToolbarStorage.Entry.Kind);
    memset(v45, 0, sizeof(v45));
    uint64_t v46 = 0;
    unsigned __int8 v47 = -1;
    goto LABEL_4;
  }
  outlined init with take of ToolbarStorage.NavigationProperties((uint64_t)v12, v24, type metadata accessor for ToolbarStorage.GroupItem);
  unint64_t v25 = *(void **)(v24 + 72);
  if (v25[2] != 1)
  {
LABEL_12:
    uint64_t v26 = v40;
    outlined init with take of ToolbarStorage.NavigationProperties(v24, v40, type metadata accessor for ToolbarStorage.GroupItem);
    uint64_t v27 = v26;
    uint64_t v28 = (uint64_t)v39;
    outlined init with take of ToolbarStorage.NavigationProperties(v27, (uint64_t)v39, type metadata accessor for ToolbarStorage.GroupItem);
    outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v38, (uint64_t)v45);
    char v29 = type metadata accessor for ToolbarStorage.GroupItem;
    goto LABEL_14;
  }
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    if (!v25[2]) {
      goto LABEL_21;
    }
    goto LABEL_11;
  }
  unint64_t v25 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v25);
  if (v25[2])
  {
LABEL_11:
    *((unsigned char *)v25
    + ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))
    + *(int *)(v37 + 60)) = 1;
    *(void *)(v24 + 72) = v25;
    goto LABEL_12;
  }
LABEL_21:
  __break(1u);
LABEL_22:
  swift_bridgeObjectRelease();
  return v23;
}

{
  uint64_t v1;
  unsigned char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  void *v18;
  uint64_t v19;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v2 = (unsigned char *)(swift_bridgeObjectRetain() + 48);
  uint64_t v3 = (char *)MEMORY[0x1E4FBC860];
  do
  {
    uint64_t v4 = *((void *)v2 - 2);
    uint64_t v5 = (void *)*((void *)v2 - 1);
    uint64_t v6 = *v2;
    if (*v2)
    {
      if (v6 != 1) {
        goto LABEL_4;
      }
      outlined copy of AccessibilityAttachment.Tree(*((void *)v2 - 2), *((void **)v2 - 1), 1);
      uint64_t v7 = swift_bridgeObjectRetain();
      uint64_t v8 = specialized Sequence.compactMap<A>(_:)(v7);
      static AccessibilityAttachment.combine(_:)(v8, &v17);
      swift_bridgeObjectRelease();
      char v9 = v17;
      uint64_t v10 = v18;
    }
    else
    {
      outlined copy of AccessibilityAttachment.Tree(*((void *)v2 - 2), *((void **)v2 - 1), 0);
      uint64_t v11 = v5;
      swift_bridgeObjectRetain_n();
      unint64_t v12 = v11;
      char v9 = v4;
      uint64_t v10 = v5;
    }
    uint64_t v17 = v9;
    uint64_t v18 = v10;
    AccessibilityAttachment.mergedProperties.getter(&v19);
    outlined consume of AccessibilityAttachment?(v9, v10);
    outlined consume of AccessibilityAttachment.Tree(v4, v5, v6);
    outlined consume of AccessibilityAttachment.Tree(v4, v5, v6);
    uint64_t v13 = v19;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v3 + 2) + 1, 1, v3);
    }
    char v15 = *((void *)v3 + 2);
    uint64_t v14 = *((void *)v3 + 3);
    if (v15 >= v14 >> 1) {
      uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1, v3);
    }
    *((void *)v3 + 2) = v15 + 1;
    *(void *)&v3[8 * v15 + 32] = v13;
LABEL_4:
    v2 += 24;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

{
  uint64_t v1;
  unsigned char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11[2];

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v2 = (unsigned char *)(swift_bridgeObjectRetain() + 48);
  uint64_t v3 = (char *)MEMORY[0x1E4FBC860];
  do
  {
    uint64_t v5 = *((void *)v2 - 2);
    uint64_t v6 = (void *)*((void *)v2 - 1);
    if (*v2)
    {
      if (*v2 != 1) {
        goto LABEL_4;
      }
      outlined copy of AccessibilityAttachment.Tree(*((void *)v2 - 2), *((void **)v2 - 1), 1);
      uint64_t v7 = (void *)specialized Sequence.compactMap<A>(_:)(v5);
      static AccessibilityAttachment.combine(_:)(v7, v11);
      swift_bridgeObjectRelease();
      outlined consume of AccessibilityAttachment.Tree(v5, v6, 1);
      uint64_t v5 = v11[0];
      uint64_t v6 = (void *)v11[1];
    }
    else
    {
      outlined copy of AccessibilityAttachment.Tree(*((void *)v2 - 2), *((void **)v2 - 1), 0);
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v3 + 2) + 1, 1, v3);
    }
    char v9 = *((void *)v3 + 2);
    uint64_t v8 = *((void *)v3 + 3);
    if (v9 >= v8 >> 1) {
      uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1, v3);
    }
    *((void *)v3 + 2) = v9 + 1;
    uint64_t v4 = &v3[16 * v9];
    *((void *)v4 + 4) = v5;
    *((void *)v4 + 5) = v6;
LABEL_4:
    v2 += 24;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  long long v10;
  uint64_t v11;
  _OWORD v12[2];

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v4 = v2 + 104;
  uint64_t v5 = MEMORY[0x1E4FBC840];
  uint64_t v6 = MEMORY[0x1E4FBC840] + 8;
  do
  {
    _sypSgWOcTm_2(v4, (uint64_t)&v10, (unint64_t *)&lazy cache variable for type metadata for Any?, v6);
    if (v11)
    {
      outlined init with take of Any(&v10, v12);
      outlined init with take of Any(v12, &v10);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v3 + 2) + 1, 1, v3);
      }
      uint64_t v8 = *((void *)v3 + 2);
      uint64_t v7 = *((void *)v3 + 3);
      if (v8 >= v7 >> 1) {
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1, v3);
      }
      *((void *)v3 + 2) = v8 + 1;
      outlined init with take of Any(&v10, &v3[32 * v8 + 32]);
    }
    else
    {
      outlined destroy of DropDestination?((uint64_t)&v10, (unint64_t *)&lazy cache variable for type metadata for Any?, v5 + 8);
    }
    v4 += 112;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  int v5;
  char v6;
  unint64_t v7;
  unint64_t v8;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = 0;
  uint64_t v4 = (char *)MEMORY[0x1E4FBC860];
  do
  {
    uint64_t v5 = *(unsigned __int8 *)(a1 + v3 + 32);
    if (*(unsigned char *)(a1 + v3 + 32))
    {
      if (v5 == 5)
      {
        uint64_t v6 = 1;
      }
      else
      {
        if (v5 != 4) {
          goto LABEL_4;
        }
        uint64_t v6 = 0;
      }
    }
    else
    {
      uint64_t v6 = 2;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v4 + 2) + 1, 1, v4);
    }
    uint64_t v8 = *((void *)v4 + 2);
    uint64_t v7 = *((void *)v4 + 3);
    if (v8 >= v7 >> 1) {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1, v4);
    }
    *((void *)v4 + 2) = v8 + 1;
    v4[v8 + 32] = v6;
LABEL_4:
    ++v3;
  }
  while (v1 != v3);
  swift_bridgeObjectRelease();
  return v4;
}

{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  long long v10;
  uint64_t v11;
  _OWORD v12[2];

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v4 = v2 + 104;
  uint64_t v5 = MEMORY[0x1E4FBC840];
  uint64_t v6 = MEMORY[0x1E4FBC840] + 8;
  do
  {
    outlined init with copy of DropDestination?(v4, (uint64_t)&v10, (unint64_t *)&lazy cache variable for type metadata for Any?, v6);
    if (v11)
    {
      outlined init with take of Any(&v10, v12);
      outlined init with take of Any(v12, &v10);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v3 + 2) + 1, 1, v3);
      }
      uint64_t v8 = *((void *)v3 + 2);
      uint64_t v7 = *((void *)v3 + 3);
      if (v8 >= v7 >> 1) {
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1, v3);
      }
      *((void *)v3 + 2) = v8 + 1;
      outlined init with take of Any(&v10, &v3[32 * v8 + 32]);
    }
    else
    {
      _sypSgWOhTm_6((uint64_t)&v10, (unint64_t *)&lazy cache variable for type metadata for Any?, v5 + 8);
    }
    v4 += 112;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

{
  uint64_t v1;
  unsigned char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15[2];

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v2 = (unsigned char *)(swift_bridgeObjectRetain() + 48);
  uint64_t v3 = (char *)MEMORY[0x1E4FBC860];
  do
  {
    uint64_t v4 = *((void *)v2 - 2);
    uint64_t v5 = (void *)*((void *)v2 - 1);
    uint64_t v6 = *v2;
    if (*v2)
    {
      if (v6 != 1) {
        goto LABEL_4;
      }
      outlined copy of AccessibilityAttachment.Tree(*((void *)v2 - 2), *((void **)v2 - 1), 1);
      uint64_t v7 = swift_bridgeObjectRetain();
      uint64_t v8 = specialized Sequence.compactMap<A>(_:)(v7);
      static AccessibilityAttachment.combine(_:)(v8, v15);
      swift_bridgeObjectRelease();
      uint64_t v10 = v15[0];
      char v9 = (id)v15[1];
    }
    else
    {
      outlined copy of AccessibilityAttachment.Tree(*((void *)v2 - 2), *((void **)v2 - 1), 0);
      uint64_t v11 = v5;
      swift_bridgeObjectRetain_n();
      char v9 = v11;
      uint64_t v10 = v4;
    }

    outlined consume of AccessibilityAttachment.Tree(v4, v5, v6);
    outlined consume of AccessibilityAttachment.Tree(v4, v5, v6);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v3 + 2) + 1, 1, v3);
    }
    uint64_t v13 = *((void *)v3 + 2);
    unint64_t v12 = *((void *)v3 + 3);
    if (v13 >= v12 >> 1) {
      uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, v3);
    }
    *((void *)v3 + 2) = v13 + 1;
    *(void *)&v3[8 * v13 + 32] = v10;
LABEL_4:
    v2 += 24;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_OWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _OWORD v41[2];
  uint64_t v42;

  long long v34 = *(void *)(a1 + 16);
  if (v34)
  {
    unint64_t v33 = a1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v1 = 0;
    uint64_t v31 = (char *)MEMORY[0x1E4FBC860];
    unint64_t v32 = MEMORY[0x1E4FBC840] + 8;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v33 + 32 * v1);
      uint64_t v8 = *v6;
      uint64_t v7 = (void *)v6[1];
      char v9 = v6[2];
      uint64_t v10 = v6[3];
      outlined copy of AccessibilityActionKind.ActionKind(*v6, (uint64_t)v7, v9, v10);
      int v42 = v9;
      outlined copy of AccessibilityActionKind.ActionKind(v8, (uint64_t)v7, v9, v10);
      AccessibilityNode.attachment.getter(&v36);
      uint64_t v11 = v36;

      if (*(void *)(v11 + 16)
        && (unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey),
            (v13 & 1) != 0))
      {
        outlined init with copy of TableColumnList(*(void *)(v11 + 56) + 40 * v12, (uint64_t)&v36);
        char v15 = v39;
        uint64_t v14 = v40;
        __swift_project_boxed_opaque_existential_1(&v36, v39);
        uint64_t v16 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v14 + 8);
        swift_bridgeObjectRetain();
        v16(v41, v15, v14);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
      }
      else
      {
        memset(v41, 0, sizeof(v41));
        swift_bridgeObjectRetain();
      }
      type metadata accessor for AccessibilityNodeProxy?(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v32, MEMORY[0x1E4FBB718]);
      type metadata accessor for AccessibilityNodeProxy?(0, (unint64_t *)&lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction, MEMORY[0x1E4FBB320]);
      if (swift_dynamicCast())
      {
        uint64_t v17 = v36;
        swift_bridgeObjectRelease_n();
        uint64_t v18 = *(void *)(v17 + 16);
        if (!v18) {
          goto LABEL_3;
        }
      }
      else
      {
        uint64_t v36 = 0;
        if (one-time initialization token for defaultValue != -1) {
          swift_once();
        }
        uint64_t v17 = static AccessibilityProperties.ActionsKey.defaultValue;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        uint64_t v18 = *(void *)(v17 + 16);
        if (!v18)
        {
LABEL_3:
          swift_bridgeObjectRelease();
          uint64_t v2 = v42;
          outlined consume of AccessibilityActionKind.ActionKind(v8, (uint64_t)v7, v42, v10);
          uint64_t v3 = v8;
          uint64_t v4 = (uint64_t)v7;
          uint64_t v5 = v2;
          goto LABEL_4;
        }
      }
      long long v35 = v1;
      uint64_t v19 = (void *)(v17 + 32);
      swift_bridgeObjectRetain();
      while (1)
      {
        uint64_t v36 = v8;
        uint64_t v37 = v7;
        long long v38 = v42;
        long long v39 = v10;
        unint64_t v20 = v19[3];
        uint64_t v21 = v19[4];
        __swift_project_boxed_opaque_existential_1(v19, v20);
        uint64_t v22 = *(uint64_t (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v21 + 80);
        int64_t v23 = lazy protocol witness table accessor for type AccessibilityVoidAction and conformance AccessibilityVoidAction();
        if (v22(&v36, &type metadata for AccessibilityVoidAction, v23, v20, v21)) {
          break;
        }
        v19 += 6;
        if (!--v18)
        {
          swift_bridgeObjectRelease();
          uint64_t v1 = v35;
          goto LABEL_3;
        }
      }
      swift_bridgeObjectRelease_n();
      outlined consume of AccessibilityActionKind.ActionKind(v8, (uint64_t)v7, v42, v10);
      if (!v10)
      {
        uint64_t v24 = 0xE800000000000000;
        unint64_t v25 = 0x6574617669746361;
        uint64_t v1 = v35;
        goto LABEL_26;
      }
      uint64_t v1 = v35;
      if (v10 == 1)
      {
        uint64_t v24 = 0xE600000000000000;
        unint64_t v25 = 0x657061637365;
        goto LABEL_26;
      }
      if (v10 == 2)
      {
        uint64_t v24 = 0xE800000000000000;
        unint64_t v25 = 0x706154636967616DLL;
LABEL_26:
        outlined consume of AccessibilityActionKind.ActionKind(v8, (uint64_t)v7, v42, v10);
        if (swift_isUniquelyReferenced_nonNull_native()) {
          uint64_t v26 = v31;
        }
        else {
          uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v31 + 2) + 1, 1, v31);
        }
        uint64_t v28 = *((void *)v26 + 2);
        uint64_t v27 = *((void *)v26 + 3);
        if (v28 >= v27 >> 1) {
          uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v26);
        }
        *((void *)v26 + 2) = v28 + 1;
        uint64_t v31 = v26;
        char v29 = &v26[16 * v28];
        *((void *)v29 + 4) = v25;
        *((void *)v29 + 5) = v24;
        goto LABEL_5;
      }
      uint64_t v3 = v8;
      uint64_t v4 = (uint64_t)v7;
      uint64_t v5 = v42;
LABEL_4:
      outlined consume of AccessibilityActionKind.ActionKind(v3, v4, v5, v10);
LABEL_5:
      if (++v1 == v34)
      {
        swift_bridgeObjectRelease();
        return v31;
      }
    }
  }
  return (char *)MEMORY[0x1E4FBC860];
}

void ToolbarItemPlacement.Role.hash(into:)()
{
  outlined init with copy of ToolbarItemPlacement.Role(v0, (uint64_t)&v6);
  unsigned __int8 v1 = v6;
  if (v9)
  {
    if (v9 == 1)
    {
      v4[0] = v6;
      v4[1] = v7;
      uint64_t v5 = v8;
      Hasher._combine(_:)(0xEuLL);
      AnyHashable.hash(into:)();
      outlined destroy of AnyHashable((uint64_t)v4);
      return;
    }
    if (*((void *)&v7 + 1) | v8 | (unint64_t)v6 | (unint64_t)v7 | *((void *)&v6 + 1))
    {
      uint64_t v3 = *((void *)&v7 + 1) | v8 | v7 | *((void *)&v6 + 1);
      if ((void)v6 != 1 || v3)
      {
        if ((void)v6 != 2 || v3)
        {
          if ((void)v6 != 3 || v3)
          {
            if ((void)v6 != 4 || v3)
            {
              if ((void)v6 != 5 || v3)
              {
                if ((void)v6 != 6 || v3)
                {
                  if ((void)v6 != 7 || v3)
                  {
                    if ((void)v6 != 8 || v3)
                    {
                      if ((void)v6 != 9 || v3)
                      {
                        if ((void)v6 != 10 || v3)
                        {
                          if ((void)v6 != 11 || v3)
                          {
                            if ((void)v6 != 12 || v3)
                            {
                              if ((void)v6 != 13 || v3)
                              {
                                if ((void)v6 != 14 || v3)
                                {
                                  if ((void)v6 != 15 || v3)
                                  {
                                    if ((void)v6 != 16 || v3)
                                    {
                                      if ((void)v6 != 17 || v3)
                                      {
                                        if ((void)v6 != 18 || v3)
                                        {
                                          if ((void)v6 != 19 || v3)
                                          {
                                            if ((void)v6 != 20 || v3)
                                            {
                                              if ((void)v6 != 21 || v3)
                                              {
                                                if ((void)v6 != 22 || v3)
                                                {
                                                  if ((void)v6 != 23 || v3) {
                                                    Swift::UInt v2 = 26;
                                                  }
                                                  else {
                                                    Swift::UInt v2 = 25;
                                                  }
                                                }
                                                else
                                                {
                                                  Swift::UInt v2 = 24;
                                                }
                                              }
                                              else
                                              {
                                                Swift::UInt v2 = 23;
                                              }
                                            }
                                            else
                                            {
                                              Swift::UInt v2 = 22;
                                            }
                                          }
                                          else
                                          {
                                            Swift::UInt v2 = 21;
                                          }
                                        }
                                        else
                                        {
                                          Swift::UInt v2 = 20;
                                        }
                                      }
                                      else
                                      {
                                        Swift::UInt v2 = 19;
                                      }
                                    }
                                    else
                                    {
                                      Swift::UInt v2 = 18;
                                    }
                                  }
                                  else
                                  {
                                    Swift::UInt v2 = 17;
                                  }
                                }
                                else
                                {
                                  Swift::UInt v2 = 16;
                                }
                              }
                              else
                              {
                                Swift::UInt v2 = 15;
                              }
                            }
                            else
                            {
                              Swift::UInt v2 = 13;
                            }
                          }
                          else
                          {
                            Swift::UInt v2 = 12;
                          }
                        }
                        else
                        {
                          Swift::UInt v2 = 11;
                        }
                      }
                      else
                      {
                        Swift::UInt v2 = 10;
                      }
                    }
                    else
                    {
                      Swift::UInt v2 = 9;
                    }
                  }
                  else
                  {
                    Swift::UInt v2 = 8;
                  }
                }
                else
                {
                  Swift::UInt v2 = 7;
                }
              }
              else
              {
                Swift::UInt v2 = 6;
              }
            }
            else
            {
              Swift::UInt v2 = 5;
            }
          }
          else
          {
            Swift::UInt v2 = 4;
          }
        }
        else
        {
          Swift::UInt v2 = 2;
        }
      }
      else
      {
        Swift::UInt v2 = 1;
      }
    }
    else
    {
      Swift::UInt v2 = 0;
    }
  }
  else
  {
    Hasher._combine(_:)(3uLL);
    Swift::UInt v2 = v1;
  }
  Hasher._combine(_:)(v2);
}

uint64_t initializeWithCopy for NavigationStackStyledCore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(v8 + 16);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(void *)(v7 + 16) = v9;
  return a1;
}

uint64_t View.fileExporter(isPresented:document:contentTypes:defaultFilename:onCompletion:onCancellation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t (*a4)(void *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t (*a10)(void *), uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v43 = a7;
  uint64_t v44 = a8;
  uint64_t v41 = a4;
  uint64_t v42 = a6;
  uint64_t v40 = a5;
  uint64_t v48 = a9;
  uint64_t v49 = a15;
  uint64_t v47 = a14;
  type metadata accessor for FileExportOperation?(0);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v45 = (uint64_t)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FileDialogConfiguration<FileExportOperation.Key, FileExportOperation>();
  uint64_t v46 = v20;
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (uint64_t *)((char *)&v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v50 = a1;
  uint64_t v51 = a2;
  char v52 = a3;
  type metadata accessor for Binding<Bool>();
  uint64_t v24 = v23;
  unint64_t v25 = MEMORY[0x18C113DA0](&v53);
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  if (v53 == 1)
  {
    uint64_t v29 = v41(v25);
    uint64_t v27 = v30;
    uint64_t v28 = v31;
    if (v29)
    {
      uint64_t v26 = v29;
    }
    else
    {
      static os_log_type_t.fault.getter();
      unint64_t v32 = (void *)static Log.runtimeIssuesLog.getter();
      os_log(_:dso:log:_:_:)();

      uint64_t v26 = 0;
    }
  }
  uint64_t v50 = a1;
  uint64_t v51 = a2;
  char v52 = a3 & 1;
  MEMORY[0x18C113DA0](&v53, v24);
  if (v53 == 1)
  {
    uint64_t v40 = a12;
    uint64_t v41 = a10;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v39 = a2;
    char v33 = a3;
    uint64_t v34 = v42;
    swift_bridgeObjectRetain();
    uint64_t v35 = v44;
    swift_bridgeObjectRetain();
    outlined copy of AnyFileDocument?(v26);
    uint64_t v36 = v45;
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI15AnyFileDocumentV_s5NeverOAD0F15ExportOperationVTg503_s7c167UI4ViewPAAE12fileExporter33_0D2FEC310BB860AE9CC7C05B8D27ECEFLL11isPresented8document12contentTypes15defaultFilename12onCompletion0V12CancellationQrAA7BindingVySbG_AA15efg76VSgyXKSay22UniformTypeIdentifiers6UTTypeVGSSSgys6ResultOy10Foundation3URLVs5b13_pGcyyctFAA19fiJ8VAPXEfU_Say22UniformTypeIdentifiers6UTTypeVGSSSgAD7BindingVySbGs6ResultOy10Foundation3URLVsAC_pGIegn_Ieg_Tf1ncn_n(v26, v27, v28, v34, v43, v35, a1, v39, v45, v33 & 1, (uint64_t)v41, a11, v40, a13);
    outlined consume of AnyFileDocument?(v26);
  }
  else
  {
    uint64_t v37 = type metadata accessor for FileExportOperation(0);
    uint64_t v36 = v45;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v45, 1, 1, v37);
  }
  specialized FileDialogConfiguration.init(preferenceKey:operation:)(v36, (uint64_t (*)(void))type metadata accessor for FileDialogConfiguration<FileExportOperation.Key, FileExportOperation>, (uint64_t)&type metadata for FileExportOperation.Key, (uint64_t (*)(uint64_t, char *))outlined init with take of FileExportOperation?, v22);
  MEMORY[0x18C113660](v22, v47, v46, v49);
  outlined consume of AnyFileDocument?(v26);
  return _s7SwiftUI23FileDialogConfigurationVyAA0C15ExportOperationV3KeyVAEGWOhTm_0((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for FileDialogConfiguration<FileExportOperation.Key, FileExportOperation>);
}

uint64_t specialized FileDialogConfiguration.init(preferenceKey:operation:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t, char *)@<X3>, uint64_t *a5@<X8>)
{
  *a5 = swift_getKeyPath();
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3F4D8];
  type metadata accessor for _ContiguousArrayStorage<UTType>(0, &lazy cache variable for type metadata for Environment<URL?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for URL?, MEMORY[0x1E4F3F4D8]);
  swift_storeEnumTagMultiPayload();
  uint64_t v10 = (int *)a2(0);
  uint64_t v11 = (char *)a5 + v10[13];
  *(void *)uint64_t v11 = swift_getKeyPath();
  *((void *)v11 + 1) = 0;
  v11[16] = 0;
  unint64_t v12 = (char *)a5 + v10[14];
  *(void *)unint64_t v12 = swift_getKeyPath();
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *((void *)v12 + 3) = 0;
  v12[32] = 0;
  uint64_t v13 = (char *)a5 + v10[15];
  *(void *)uint64_t v13 = swift_getKeyPath();
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  *((void *)v13 + 3) = 0;
  v13[32] = 0;
  uint64_t v14 = (char *)a5 + v10[16];
  *(void *)uint64_t v14 = swift_getKeyPath();
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 2) = 0;
  *((void *)v14 + 3) = 0;
  v14[32] = 0;
  char v15 = (uint64_t *)((char *)a5 + v10[17]);
  uint64_t *v15 = swift_getKeyPath();
  type metadata accessor for _ContiguousArrayStorage<UTType>(0, &lazy cache variable for type metadata for Environment<Predicate<Pack{URL}>?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>?, v9);
  swift_storeEnumTagMultiPayload();
  uint64_t v16 = (char *)a5 + v10[18];
  *(void *)uint64_t v16 = swift_getKeyPath();
  v16[8] = 0;
  uint64_t v17 = (char *)a5 + v10[19];
  *(void *)uint64_t v17 = swift_getKeyPath();
  *((_WORD *)v17 + 4) = 0;
  *(uint64_t *)((char *)a5 + v10[20]) = a3;
  uint64_t v18 = (char *)a5 + v10[21];

  return a4(a1, v18);
}

uint64_t specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  int v7 = *(unsigned __int8 *)(a1 + 32);
  long long v8 = static RepresentableContextValues.current;
  long long v9 = xmmword_1EB2E8DA0;
  char v33 = byte_1EB2E8DB0;
  *(void *)&static RepresentableContextValues.current = *(void *)a1;
  *((void *)&static RepresentableContextValues.current + 1) = v4;
  *(void *)&xmmword_1EB2E8DA0 = v5;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v6;
  byte_1EB2E8DB0 = v7;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v5, v6, v7);
  swift_retain();
  swift_retain();
  uint64_t v29 = v5;
  uint64_t v10 = v5;
  uint64_t v11 = v6;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v10, v6, v7);
  outlined copy of RepresentableContextValues?(v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v33);
  outlined consume of RepresentableContextValues?(v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v33);
  uint64_t v12 = outlined init with copy of PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>(a2, (uint64_t)v36);
  uint64_t v13 = *(void **)(a1 + 40);
  char v31 = v7;
  uint64_t v32 = v11;
  uint64_t v27 = v13;
  if (v7 == 1)
  {
    MEMORY[0x1F4188790](v12);
    uint64_t v14 = v29;
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v29, v11, 1);
    outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>(a1);
    id v15 = v13;
    swift_retain();
    swift_retain();
    static Update.ensure<A>(_:)();
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v29, v11, 1);
    outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>(a1);
    uint64_t v16 = v34;
    uint64_t v11 = v35;
  }
  else
  {
    id v17 = v13;
    swift_retain();
    swift_retain();
    uint64_t v14 = v29;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v29, v11, 0);
    uint64_t v16 = v29;
  }
  uint64_t v18 = *(void *)&v37[84];
  uint64_t v19 = v38;
  char v20 = v39;
  swift_retain();
  swift_retain();
  outlined copy of Environment<Bool>.Content(v19, v20);
  char v21 = specialized Environment.wrappedValue.getter(v19, v20);
  outlined consume of Environment<Bool>.Content(v19, v20);
  type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_VariadicView_Children>, MEMORY[0x1E4F40A38], MEMORY[0x1E4FBBE00]);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_18834BB80;
  outlined init with copy of _VariadicView_Children((uint64_t)v37, v22 + 32);
  swift_retain();
  swift_retain();
  specialized NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)(a3, v16, v11, v4, v18, v21 & 1, v16, v11, v22);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release_n();
  swift_release_n();
  outlined destroy of PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>((uint64_t)v36);
  long long v23 = static RepresentableContextValues.current;
  long long v24 = xmmword_1EB2E8DA0;
  static RepresentableContextValues.current = v8;
  xmmword_1EB2E8DA0 = v9;
  char v25 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v33;
  outlined consume of RepresentableContextValues?(v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v14, v32, v31);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  long long v8;
  long long v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  long long v14;
  long long v15;
  char v16;
  uint64_t v19;
  char v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned char v28[248];

  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  int v7 = *(unsigned __int8 *)(a1 + 32);
  long long v8 = static RepresentableContextValues.current;
  long long v9 = xmmword_1EB2E8DA0;
  uint64_t v10 = byte_1EB2E8DB0;
  long long v23 = *(void *)a1;
  *(void *)&static RepresentableContextValues.current = *(void *)a1;
  *((void *)&static RepresentableContextValues.current + 1) = v4;
  uint64_t v22 = v4;
  uint64_t v19 = v5;
  *(void *)&xmmword_1EB2E8DA0 = v5;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v6;
  byte_1EB2E8DB0 = v7;
  outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  outlined copy of RepresentableContextValues?(v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v10);
  char v20 = v10;
  outlined consume of RepresentableContextValues?(v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v10);
  uint64_t v11 = outlined init with copy of PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>(a2, (uint64_t)v28);
  if (v7 == 1)
  {
    MEMORY[0x1F4188790](v11);
    outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
    uint64_t v12 = v22;
    swift_retain();
    swift_retain();
    static Update.ensure<A>(_:)();
    outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
    uint64_t v13 = v24;
    uint64_t v6 = v25;
  }
  else
  {
    uint64_t v12 = v22;
    swift_retain();
    swift_retain();
    uint64_t v13 = v19;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v19, v6, 0);
  }
  long long v24 = v12;
  char v25 = v13;
  uint64_t v26 = v6;
  uint64_t v27 = v23;
  CustomizableDocumentViewControllerRepresentable.updateUIViewController(_:context:)(a3, (uint64_t)&v24);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>((uint64_t)v28);
  uint64_t v14 = static RepresentableContextValues.current;
  id v15 = xmmword_1EB2E8DA0;
  static RepresentableContextValues.current = v8;
  xmmword_1EB2E8DA0 = v9;
  uint64_t v16 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v20;
  outlined consume of RepresentableContextValues?(v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16);
  return outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
}

void specialized closure #1 in PlatformViewChild.updateValue()(uint64_t a1)
{
  v125[22] = *MEMORY[0x1E4F143B8];
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  uint64_t Value = AGGraphGetValue();
  char v4 = v3;
  outlined init with copy of PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>(Value, (uint64_t)v125);
  uint64_t v5 = (unsigned int *)AGGraphGetValue();
  uint64_t v93 = v6;
  unsigned int v7 = *v5;
  long long v8 = (uint64_t *)AGGraphGetValue();
  uint64_t v10 = v9;
  uint64_t v12 = *v8;
  uint64_t v11 = v8[1];
  if (*(_DWORD *)(a1 + 28) == *MEMORY[0x1E4F4E7A0]
    || (uint64_t v13 = AGGraphGetValue(),
        char v15 = v14,
        uint64_t v16 = *(void *)v13,
        LODWORD(v87) = *(unsigned __int8 *)(v13 + 8),
        int v17 = *(_DWORD *)(v13 + 12),
        swift_retain(),
        uint64_t v91 = v16,
        v16 == 1))
  {
    LODWORD(v88) = 0;
    int v17 = 0;
    LODWORD(v87) = 0;
    uint64_t v91 = 0;
  }
  else
  {
    LODWORD(v88) = v15 & 1;
  }
  unsigned int v18 = v7 >> 1;
  int v19 = *(_DWORD *)(a1 + 88);
  LODWORD(v86) = v17;
  if (v7 >> 1 == v19)
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    unsigned int v20 = v7;
    uint64_t v21 = v10;
    v95[0] = *(_OWORD *)(a1 + 56);
    uint64_t v22 = v11;
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    long long v23 = *(void **)(a1 + 72);
    if (v23)
    {
      long long v24 = *(void **)(a1 + 80);
      if (v24)
      {

        *(void *)(a1 + 72) = 0;
        *(void *)(a1 + 80) = 0;
      }
    }
    *(_DWORD *)(a1 + 88) = v18;
    uint64_t v11 = v22;
    uint64_t v10 = v21;
    unsigned int v7 = v20;
  }
  v95[0] = *(_OWORD *)(a1 + 56);
  LODWORD(v94[0]) = v7;
  if (_DynamicPropertyBuffer.update(container:phase:)())
  {
    int v25 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>();
    int v25 = 1;
    if (AGGraphGetOutputValue() && (v4 & 1) == 0 && (v93 & 1) == 0) {
      int v25 = AGGraphCurrentAttributeWasModified();
    }
  }
  AGGraphClearUpdate();
  uint64_t v26 = specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(a1, (uint64_t)v125);
  swift_retain();
  AGGraphSetUpdate();
  uint64_t v118 = v12;
  uint64_t v119 = v11;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  uint64_t v27 = *(void **)(a1 + 80);
  uint64_t v89 = v11;
  uint64_t v90 = v12;
  if (v27)
  {
    LODWORD(v85) = v7;
    uint64_t v92 = v10;
    if (v10)
    {
      swift_retain();
      uint64_t v28 = v27;
      swift_retain();
      char v29 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if (v29)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        int v25 = 1;
      }
    }
    else
    {
      uint64_t v50 = v27;
    }
    if (specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>.UnarySubtreeSequence, (uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>.UnarySubtreeSequence))
    {
      *(void *)&v95[0] = 0;
      WORD4(v95[0]) = 1;
      type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v119)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    int v51 = v25;
    char v52 = v93 | v92;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    uint64_t v92 = *((void *)&v95[0] + 1);
    swift_retain();
    swift_retain();
    AGGraphClearUpdate();
    uint64_t v93 = *(void *)&v95[0];
    if (v52)
    {
      uint64_t v53 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v53, 0, v85, (uint64_t)closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)partial apply, (uint64_t)&unk_1ED478EF0, (uint64_t)closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)partial apply, (void (*)(void, uint64_t, uint64_t, uint64_t))specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:));
      swift_release();
    }
    if (v88)
    {
      uint64_t v54 = (char *)v27 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v27) + 0x90);
      *(void *)uint64_t v54 = v91;
      char v54[8] = (char)v87;
      *((_DWORD *)v54 + 3) = v86;
      swift_retain();
      swift_release();
      specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)(0);
    }
    AGGraphSetUpdate();
    uint64_t v55 = *(void **)(a1 + 72);
    if (!v55)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    id v56 = v55;

    uint64_t v120 = *(void *)(a1 + 40);
    uint64_t v121 = v26;
    *(void *)&long long v122 = v93;
    *((void *)&v122 + 1) = v92;
    char v123 = 0;
    id v124 = v56;
    swift_retain();
    if (!v51)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v93, v92, 0);

      goto LABEL_52;
    }
    uint64_t v88 = v26;
    swift_retain();
    id v87 = 0;
LABEL_42:
    type metadata accessor for ViewGraph();
    uint64_t v57 = MEMORY[0x18C114EE0]() + 200;
    swift_beginAccess();
    uint64_t v58 = MEMORY[0x18C119DF0](v57);
    uint64_t v59 = swift_release();
    if (v58)
    {
      swift_getObjectType();
      uint64_t v59 = swift_conformsToProtocol2();
      if (v59) {
        uint64_t v60 = v58;
      }
      else {
        uint64_t v60 = 0;
      }
      if (!v60) {
        uint64_t v59 = swift_unknownObjectRelease();
      }
    }
    Class v86 = v84;
    int v61 = *(_DWORD *)(a1 + 32);
    uint64_t v63 = *(void *)(a1 + 40);
    uint64_t v62 = *(void *)(a1 + 48);
    uint64_t v64 = *(void *)(a1 + 56);
    uint64_t v66 = *(void **)(a1 + 72);
    int v65 = *(void **)(a1 + 80);
    int v67 = *(_DWORD *)(a1 + 88);
    long long v68 = *(_OWORD *)(a1 + 16);
    long long v107 = *(_OWORD *)a1;
    long long v108 = v68;
    uint64_t v69 = *(void *)(a1 + 96);
    int v109 = v61;
    uint64_t v110 = v63;
    uint64_t v111 = v62;
    uint64_t v112 = v64;
    uint64_t v113 = *(void *)(a1 + 64);
    uint64_t v114 = v66;
    uint64_t v115 = v65;
    int v116 = v67;
    uint64_t v117 = v69;
    MEMORY[0x1F4188790](v59);
    uint64_t v85 = v70;
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>();
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
    swift_retain();
    swift_retain();
    id v71 = v66;
    id v72 = v65;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    char v73 = v114;
    uint64_t v74 = v115;
    swift_release();
    swift_release();
    swift_release();

    uint64_t v75 = *(void **)(a1 + 80);
    if (v75)
    {
      uint64_t v76 = *(void **)(a1 + 72);
      outlined init with copy of PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>((uint64_t)v125, (uint64_t)v94);
      if (v76)
      {
        unint64_t v106 = v76;
        outlined init with take of PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>((uint64_t)v94, (uint64_t)v95);
        uint64_t v105 = v75;
        type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>();
        id v77 = v75;
        swift_retain();
        swift_retain();
        id v78 = v76;
        id v79 = v77;
        swift_retain();
        id v80 = v78;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined destroy of ScrollableCollection?((uint64_t)v95, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
        long long v81 = v122;
        char v82 = v123;
        uint64_t v83 = v124;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v81, *((uint64_t *)&v81 + 1), v82);

LABEL_52:
        swift_release();
        swift_release();
        outlined destroy of PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>((uint64_t)v125);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_55;
  }
  uint64_t v88 = v26;
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  uint64_t v30 = *(void **)(a1 + 72);
  if (v30)
  {
    uint64_t v120 = *(void *)(a1 + 40);
    uint64_t v121 = v88;
    long long v122 = v95[0];
    char v123 = 0;
    id v124 = v30;
    type metadata accessor for ViewGraph();
    uint64_t v92 = *((void *)&v95[0] + 1);
    swift_retain_n();
    swift_retain();
    uint64_t v93 = *(void *)&v95[0];
    swift_retain_n();
    swift_retain();
    uint64_t v31 = MEMORY[0x18C114EE0](v30) + 200;
    swift_beginAccess();
    uint64_t v32 = MEMORY[0x18C119DF0](v31);
    uint64_t v33 = swift_release();
    if (v32)
    {
      swift_getObjectType();
      uint64_t v33 = swift_conformsToProtocol2();
      if (v33) {
        uint64_t v34 = v32;
      }
      else {
        uint64_t v34 = 0;
      }
      if (v34) {
        goto LABEL_29;
      }
      uint64_t v33 = swift_unknownObjectRelease();
    }
    uint64_t v34 = 0;
LABEL_29:
    uint64_t v85 = v34;
    Class v86 = v84;
    int v35 = *(_DWORD *)(a1 + 32);
    uint64_t v37 = *(void *)(a1 + 40);
    uint64_t v36 = *(void *)(a1 + 48);
    uint64_t v38 = *(void *)(a1 + 56);
    char v39 = *(void **)(a1 + 72);
    id v87 = *(id *)(a1 + 80);
    int v40 = *(_DWORD *)(a1 + 88);
    int v96 = v35;
    uint64_t v41 = *(void *)(a1 + 96);
    long long v42 = *(_OWORD *)(a1 + 16);
    v95[0] = *(_OWORD *)a1;
    v95[1] = v42;
    uint64_t v97 = v37;
    uint64_t v98 = v36;
    uint64_t v99 = v38;
    uint64_t v100 = *(void *)(a1 + 64);
    uint64_t v101 = v39;
    id v102 = v87;
    int v103 = v40;
    uint64_t v104 = v41;
    MEMORY[0x1F4188790](v33);
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>();
    v84[1] = v43;
    type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>, MEMORY[0x1E4FBB718]);
    v84[0] = v44;
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
    swift_retain();
    swift_retain();
    id v45 = v39;
    id v46 = v87;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    id v87 = 0;
    swift_release();
    swift_release();
    uint64_t v47 = v101;
    uint64_t v48 = v102;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    uint64_t v49 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = v94[0];

    goto LABEL_42;
  }
LABEL_56:
  __break(1u);
}

{
  uint64_t Value;
  char v3;
  char v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  int v17;
  int v18;
  void *v19;
  int v20;
  uint64_t OutputValue;
  uint64_t v22;
  void *v23;
  void *v24;
  char v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  long long v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  id v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  int v64;
  uint64_t v65;
  long long v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  void *v70;
  void *v71;
  uint64_t v72;
  id v73;
  id v74;
  long long v75;
  char v76;
  void v77[8];
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  void v90[47];
  _OWORD v91[2];
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  int v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  long long v103;
  long long v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  long long v118;
  char v119;
  uint64_t v120;
  void v121[49];

  v121[47] = *MEMORY[0x1E4F143B8];
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  uint64_t Value = AGGraphGetValue();
  char v4 = v3;
  outlined init with copy of PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>(Value, (uint64_t)v121);
  uint64_t v5 = (unsigned int *)AGGraphGetValue();
  unsigned int v7 = v6;
  long long v8 = *v5;
  uint64_t v9 = (uint64_t *)AGGraphGetValue();
  uint64_t v88 = v10;
  uint64_t v12 = *v9;
  uint64_t v11 = v9[1];
  if (*(_DWORD *)(a1 + 28) == *MEMORY[0x1E4F4E7A0]
    || (uint64_t v13 = AGGraphGetValue(),
        char v15 = v14,
        uint64_t v16 = *(void *)v13,
        LODWORD(v82) = *(unsigned __int8 *)(v13 + 8),
        int v17 = *(_DWORD *)(v13 + 12),
        swift_retain(),
        v16 == 1))
  {
    LODWORD(v83) = 0;
    LODWORD(v81) = 0;
    LODWORD(v82) = 0;
    uint64_t v16 = 0;
  }
  else
  {
    LODWORD(v81) = v17;
    LODWORD(v83) = v15 & 1;
  }
  unsigned int v18 = *(_DWORD *)(a1 + 88);
  uint64_t v89 = v16;
  if (v8 >> 1 == v18)
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    v91[0] = *(_OWORD *)(a1 + 56);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    if (*(void *)(a1 + 72))
    {
      int v19 = *(void **)(a1 + 80);
      if (v19)
      {

        swift_release();
        *(void *)(a1 + 72) = 0;
        *(void *)(a1 + 80) = 0;
      }
    }
    *(_DWORD *)(a1 + 88) = v8 >> 1;
  }
  v91[0] = *(_OWORD *)(a1 + 56);
  LODWORD(v90[0]) = v8;
  LODWORD(v84) = v8;
  if (_DynamicPropertyBuffer.update(container:phase:)())
  {
    unsigned int v20 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>();
    Outputuint64_t Value = AGGraphGetOutputValue();
    unsigned int v20 = 1;
    if (OutputValue && (v4 & 1) == 0 && (v7 & 1) == 0) {
      unsigned int v20 = AGGraphCurrentAttributeWasModified();
    }
  }
  LODWORD(v85) = v20;
  AGGraphClearUpdate();
  uint64_t v22 = specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(a1, (uint64_t)v121);
  swift_retain();
  AGGraphSetUpdate();
  uint64_t v114 = v12;
  uint64_t v115 = v11;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  long long v23 = *(void **)(a1 + 80);
  Class v86 = v22;
  id v87 = v12;
  if (v23)
  {
    if (v88)
    {
      swift_retain();
      long long v24 = v23;
      swift_retain();
      int v25 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if (v25)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        LODWORD(v85) = 1;
      }
    }
    else
    {
      uint64_t v34 = v23;
    }
    if (specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>.UnarySubtreeSequence, (uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>.UnarySubtreeSequence))
    {
      id v80 = v7;
      *(void *)&v91[0] = 0;
      WORD4(v91[0]) = 1;
      type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v115)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        uint64_t v22 = v86;
        swift_release();
      }
      swift_release();
      LOBYTE(v7) = v80;
    }
    int v35 = v7 | v88;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    uint64_t v88 = (id)*((void *)&v91[0] + 1);
    swift_retain();
    uint64_t v36 = *(void *)&v91[0];
    swift_retain();
    AGGraphClearUpdate();
    if (v35)
    {
      uint64_t v37 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v37, 0, (int)v84, (uint64_t)closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)partial apply, (uint64_t)&unk_1ED479030, (uint64_t)closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)partial apply, (void (*)(void, uint64_t, uint64_t, uint64_t))specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:));
      swift_release();
    }
    if (v83)
    {
      uint64_t v38 = (char *)v23 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v23) + 0x90);
      *(void *)uint64_t v38 = v89;
      v38[8] = (char)v82;
      *((_DWORD *)v38 + 3) = v81;
      swift_retain();
      swift_release();
      specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)(0);
    }
    AGGraphSetUpdate();
    char v39 = *(void *)(a1 + 72);
    if (!v39)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    uint64_t v27 = (uint64_t *)v36;
    swift_retain();

    int v116 = *(void *)(a1 + 40);
    uint64_t v117 = v22;
    *(void *)&uint64_t v118 = v36;
    *((void *)&v118 + 1) = v88;
    uint64_t v119 = 0;
    uint64_t v120 = v39;
    swift_retain();
    if (!v85)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v36, (uint64_t)v88, 0);
      swift_release();
LABEL_53:
      swift_release();
      swift_release();
      outlined destroy of PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>((uint64_t)v121);
      return;
    }
    uint64_t v83 = v11;
    swift_retain();
    uint64_t v85 = 0;
LABEL_44:
    type metadata accessor for ViewGraph();
    uint64_t v55 = MEMORY[0x18C114EE0]() + 200;
    swift_beginAccess();
    id v56 = MEMORY[0x18C119DF0](v55);
    uint64_t v57 = swift_release();
    char v82 = v27;
    if (v56)
    {
      swift_getObjectType();
      uint64_t v57 = swift_conformsToProtocol2();
      if (v57) {
        uint64_t v58 = v56;
      }
      else {
        uint64_t v58 = 0;
      }
      if (!v58) {
        uint64_t v57 = swift_unknownObjectRelease();
      }
    }
    Class v84 = v77;
    uint64_t v60 = *(void *)(a1 + 40);
    uint64_t v59 = *(void *)(a1 + 48);
    int v61 = *(void *)(a1 + 56);
    uint64_t v62 = *(void *)(a1 + 72);
    uint64_t v63 = *(void **)(a1 + 80);
    uint64_t v64 = *(_DWORD *)(a1 + 88);
    uint64_t v105 = *(_DWORD *)(a1 + 32);
    int v65 = *(void *)(a1 + 96);
    uint64_t v66 = *(_OWORD *)(a1 + 16);
    int v103 = *(_OWORD *)a1;
    uint64_t v104 = v66;
    unint64_t v106 = v60;
    long long v107 = v59;
    long long v108 = v61;
    int v109 = *(void *)(a1 + 64);
    uint64_t v110 = v62;
    uint64_t v111 = v63;
    uint64_t v112 = v64;
    uint64_t v113 = v65;
    MEMORY[0x1F4188790](v57);
    long long v81 = v67;
    v77[-6] = v67;
    v77[-5] = v68;
    v77[-4] = a1;
    v77[-3] = &v116;
    v77[-2] = v121;
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>();
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v69 = v63;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    uint64_t v70 = v111;
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    id v71 = *(void **)(a1 + 80);
    if (v71)
    {
      id v72 = *(void *)(a1 + 72);
      outlined init with copy of PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>((uint64_t)v121, (uint64_t)v90);
      if (v72)
      {
        id v102 = v72;
        outlined init with take of PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>((uint64_t)v90, (uint64_t)v91);
        uint64_t v101 = v71;
        type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>();
        char v73 = v71;
        swift_retain();
        swift_retain();
        swift_retain_n();
        uint64_t v74 = v73;
        swift_retain();
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined destroy of ScrollableCollection?((uint64_t)v91, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
        uint64_t v75 = v118;
        uint64_t v76 = v119;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v75, *((uint64_t *)&v75 + 1), v76);
        swift_release();
        goto LABEL_53;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_56;
  }
  uint64_t v83 = v11;
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  uint64_t v26 = *(void *)(a1 + 72);
  if (v26)
  {
    uint64_t v27 = *(uint64_t **)&v91[0];
    int v116 = *(void *)(a1 + 40);
    uint64_t v117 = v22;
    uint64_t v118 = v91[0];
    uint64_t v119 = 0;
    uint64_t v120 = v26;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    swift_retain();
    uint64_t v28 = swift_retain();
    char v29 = MEMORY[0x18C114EE0](v28) + 200;
    swift_beginAccess();
    uint64_t v30 = MEMORY[0x18C119DF0](v29);
    uint64_t v31 = swift_release();
    if (v30)
    {
      swift_getObjectType();
      uint64_t v31 = swift_conformsToProtocol2();
      uint64_t v32 = (void *)*((void *)&v91[0] + 1);
      if (v31) {
        uint64_t v33 = v30;
      }
      else {
        uint64_t v33 = 0;
      }
      if (v33) {
        goto LABEL_43;
      }
      uint64_t v31 = swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v32 = (void *)*((void *)&v91[0] + 1);
    }
    uint64_t v33 = 0;
LABEL_43:
    long long v81 = v33;
    char v82 = &v80;
    int v40 = *(_DWORD *)(a1 + 32);
    uint64_t v41 = *(void *)(a1 + 40);
    long long v42 = *(void *)(a1 + 48);
    uint64_t v43 = *(void *)(a1 + 56);
    uint64_t v44 = *(void *)(a1 + 72);
    uint64_t v88 = *(id *)(a1 + 80);
    id v45 = *(_DWORD *)(a1 + 88);
    uint64_t v92 = v40;
    id v46 = *(void *)(a1 + 96);
    uint64_t v47 = *(_OWORD *)(a1 + 16);
    v91[0] = *(_OWORD *)a1;
    v91[1] = v47;
    uint64_t v93 = v41;
    id v94 = v42;
    uint64_t v95 = v43;
    int v96 = *(void *)(a1 + 64);
    uint64_t v97 = v44;
    uint64_t v98 = v88;
    uint64_t v99 = v45;
    uint64_t v100 = v46;
    MEMORY[0x1F4188790](v31);
    v77[2] = &v116;
    v77[3] = v121;
    v77[4] = v49;
    v77[5] = v48;
    v77[6] = v27;
    v77[7] = v32;
    id v78 = (int)v84;
    id v79 = a1;
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>();
    uint64_t v85 = v50;
    type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>, MEMORY[0x1E4FBB718]);
    Class v84 = v51;
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
    swift_retain();
    swift_retain();
    swift_retain();
    char v52 = v88;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    uint64_t v85 = 0;
    uint64_t v88 = v32;
    swift_release();
    swift_release();
    uint64_t v53 = v98;
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    uint64_t v54 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = v90[0];

    goto LABEL_44;
  }
LABEL_57:
  __break(1u);
}

{
  uint64_t Value;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  void *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  int v27;
  uint64_t v28;
  void *v29;
  void *v30;
  char v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  int v55;
  uint64_t v56;
  long long v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  id v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  int v75;
  uint64_t v76;
  long long v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  id v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  id v90;
  id v91;
  uint64_t v92;
  id v93;
  long long v94;
  void *v95;
  void v96[8];
  int v97;
  uint64_t v98;
  void v99[2];
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned __int8 v123;
  void *v124;
  void *v125;
  long long v126;
  long long v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  id v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  long long v141;
  char v142;
  id v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned __int8 v153;
  uint64_t v154;

  v154 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSlider>, (uint64_t)&type metadata for SystemSlider, (uint64_t)&protocol witness table for SystemSlider, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  uint64_t Value = AGGraphGetValue();
  unint64_t v106 = v3;
  char v4 = *(void **)(Value + 8);
  uint64_t v5 = *(void *)(Value + 16);
  uint64_t v6 = *(void *)(Value + 24);
  unsigned int v7 = *(void *)(Value + 32);
  long long v8 = *(void *)(Value + 40);
  uint64_t v9 = *(void *)(Value + 48);
  uint64_t v10 = *(void *)(Value + 64);
  uint64_t v11 = *(unsigned __int8 *)(Value + 72);
  v144 = *(void *)Value;
  uint64_t v145 = v4;
  v146 = v5;
  uint64_t v147 = v6;
  v148 = v7;
  uint64_t v149 = v8;
  uint64_t v150 = v9;
  v151 = *(void *)(Value + 56);
  v152 = v10;
  LODWORD(v107) = v11;
  v153 = v11;
  uint64_t v12 = (unsigned int *)AGGraphGetValue();
  long long v108 = v13;
  char v14 = *v12;
  char v15 = (uint64_t *)AGGraphGetValue();
  uint64_t v110 = v16;
  int v17 = *v15;
  uint64_t v112 = v15[1];
  uint64_t v113 = v17;
  LODWORD(v15) = *(_DWORD *)(a1 + 28);
  unsigned int v18 = *MEMORY[0x1E4F4E7A0];
  LODWORD(v111) = v14;
  if (v15 == v18)
  {
    LODWORD(v105) = 0;
    LODWORD(v104) = 0;
    LODWORD(v103) = 0;
    int v109 = 0;
  }
  else
  {
    int v19 = AGGraphGetValue();
    uint64_t v21 = v20;
    uint64_t v22 = *(void *)v19;
    LODWORD(v103) = *(unsigned __int8 *)(v19 + 8);
    LODWORD(v104) = *(_DWORD *)(v19 + 12);
    swift_retain();
    int v109 = v22;
    if (v22 == 1)
    {
      LODWORD(v105) = 0;
      LODWORD(v104) = 0;
      LODWORD(v103) = 0;
      int v109 = 0;
    }
    else
    {
      LODWORD(v105) = v21 & 1;
    }
    char v14 = v111;
  }
  if (v14 >> 1 == *(_DWORD *)(a1 + 88))
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined copy of Environment<HoverEffect?>.Content(v10, v107);
    long long v23 = v112;
    swift_retain();
    long long v24 = v113;
    swift_retain();
  }
  else
  {
    uint64_t v126 = *(_OWORD *)(a1 + 56);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined copy of Environment<HoverEffect?>.Content(v10, v107);
    long long v23 = v112;
    swift_retain();
    long long v24 = v113;
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    int v25 = *(void **)(a1 + 72);
    if (v25)
    {
      uint64_t v26 = *(void **)(a1 + 80);
      if (v26)
      {

        *(void *)(a1 + 72) = 0;
        *(void *)(a1 + 80) = 0;
      }
    }
    *(_DWORD *)(a1 + 88) = v14 >> 1;
    char v14 = v111;
  }
  uint64_t v126 = *(_OWORD *)(a1 + 56);
  LODWORD(v114) = v14;
  if (_DynamicPropertyBuffer.update(container:phase:)())
  {
    uint64_t v27 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSlider>>();
    uint64_t v27 = 1;
    if (AGGraphGetOutputValue() && (v106 & 1) == 0 && (v108 & 1) == 0) {
      uint64_t v27 = AGGraphCurrentAttributeWasModified();
    }
  }
  AGGraphClearUpdate();
  uint64_t v28 = specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(a1, &v144);
  swift_retain();
  AGGraphSetUpdate();
  uint64_t v137 = v24;
  v138 = v23;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  char v29 = *(void **)(a1 + 80);
  unint64_t v106 = v28;
  if (v29)
  {
    if (v110)
    {
      swift_retain();
      uint64_t v30 = v29;
      swift_retain();
      uint64_t v31 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if (v31)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        uint64_t v27 = 1;
      }
    }
    else
    {
      char v39 = v29;
    }
    if (specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSlider>>.UnarySubtreeSequence, (uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSlider>>.UnarySubtreeSequence))
    {
      *(void *)&uint64_t v126 = 0;
      WORD4(v126) = 1;
      type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v138)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    int v40 = v108 | v110;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    uint64_t v41 = *((void *)&v126 + 1);
    swift_retain();
    uint64_t v110 = (id)v126;
    swift_retain();
    AGGraphClearUpdate();
    if (v40)
    {
      long long v42 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v42, 0, v111);
      swift_release();
    }
    if (v105)
    {
      uint64_t v43 = (char *)v29 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v29) + 0x90);
      *(void *)uint64_t v43 = v109;
      v43[8] = v103;
      *((_DWORD *)v43 + 3) = v104;
      swift_retain();
      swift_release();
      objc_msgSend(v29, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    uint64_t v44 = *(void **)(a1 + 72);
    if (!v44)
    {
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    id v45 = v44;

    v139 = *(void *)(a1 + 40);
    uint64_t v140 = v28;
    *(void *)&v141 = v110;
    *((void *)&v141 + 1) = v41;
    uint64_t v142 = 0;
    uint64_t v143 = v45;
    swift_retain();
    if (!v27)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage((uint64_t)v110, v41, 0);

      swift_release();
      swift_release();
      id v46 = v152;
      uint64_t v47 = v153;
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      uint64_t v48 = v46;
      uint64_t v49 = v47;
LABEL_55:
      outlined consume of Environment<AnyShapeStyle?>.Content(v48, v49);
      return;
    }
    swift_retain();
    long long v108 = 0;
LABEL_46:
    type metadata accessor for ViewGraph();
    uint64_t v66 = MEMORY[0x18C114EE0]() + 200;
    swift_beginAccess();
    int v67 = MEMORY[0x18C119DF0](v66);
    long long v68 = swift_release();
    uint64_t v111 = v41;
    if (v67)
    {
      swift_getObjectType();
      long long v68 = swift_conformsToProtocol2();
      if (v68) {
        uint64_t v69 = v67;
      }
      else {
        uint64_t v69 = 0;
      }
      if (!v69) {
        long long v68 = swift_unknownObjectRelease();
      }
    }
    long long v107 = v96;
    id v71 = *(void *)(a1 + 40);
    uint64_t v70 = *(void *)(a1 + 48);
    id v72 = *(void *)(a1 + 56);
    char v73 = *(void **)(a1 + 72);
    uint64_t v74 = *(void **)(a1 + 80);
    uint64_t v75 = *(_DWORD *)(a1 + 88);
    uint64_t v128 = *(_DWORD *)(a1 + 32);
    uint64_t v76 = *(void *)(a1 + 96);
    id v77 = *(_OWORD *)(a1 + 16);
    uint64_t v126 = *(_OWORD *)a1;
    uint64_t v127 = v77;
    uint64_t v129 = v71;
    v130 = v70;
    uint64_t v131 = v72;
    id v132 = *(void *)(a1 + 64);
    v133 = v73;
    uint64_t v134 = v74;
    uint64_t v135 = v75;
    v136 = v76;
    MEMORY[0x1F4188790](v68);
    uint64_t v105 = v78;
    v96[-6] = v78;
    v96[-5] = v79;
    v96[-4] = a1;
    v96[-3] = &v139;
    v96[-2] = &v144;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSlider>>();
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSlider>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSlider>>);
    swift_retain();
    swift_retain();
    id v80 = v73;
    long long v81 = v74;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    char v82 = v133;
    uint64_t v83 = v134;
    swift_release();
    swift_release();
    swift_release();

    Class v84 = *(void **)(a1 + 80);
    if (v84)
    {
      uint64_t v85 = *(void **)(a1 + 72);
      if (v85)
      {
        LODWORD(v108) = v153;
        Class v86 = v152;
        id v87 = v150;
        v99[1] = v148;
        long long v107 = v145;
        id v102 = *(void *)(a1 + 40);
        int v103 = v144;
        uint64_t v114 = v144;
        uint64_t v115 = v145;
        int v116 = v146;
        uint64_t v117 = v147;
        uint64_t v118 = v148;
        uint64_t v119 = v149;
        uint64_t v120 = v150;
        uint64_t v104 = v149;
        uint64_t v121 = v151;
        long long v122 = v152;
        char v123 = v153;
        id v124 = v84;
        uint64_t v125 = v85;
        type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSlider>>();
        uint64_t v101 = v88;
        swift_retain();
        v99[0] = v87;
        swift_retain();
        uint64_t v89 = v84;
        swift_retain();
        swift_retain();
        uint64_t v90 = v85;
        uint64_t v91 = v89;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v100 = v86;
        uint64_t v92 = v108;
        outlined copy of Environment<HoverEffect?>.Content(v86, v108);
        uint64_t v93 = v90;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        outlined consume of Environment<AnyShapeStyle?>.Content(v86, v92);

        id v94 = v141;
        LOBYTE(v87) = v142;
        uint64_t v95 = v143;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v94, *((uint64_t *)&v94 + 1), v87);

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        uint64_t v48 = v100;
        uint64_t v49 = v108;
        goto LABEL_55;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_58;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  uint64_t v32 = *(void **)(a1 + 72);
  if (v32)
  {
    uint64_t v33 = *((void *)&v126 + 1);
    v139 = *(void *)(a1 + 40);
    uint64_t v140 = v28;
    v141 = v126;
    uint64_t v142 = 0;
    uint64_t v143 = v32;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    swift_retain();
    uint64_t v34 = MEMORY[0x18C114EE0](v32) + 200;
    swift_beginAccess();
    int v35 = MEMORY[0x18C119DF0](v34);
    uint64_t v36 = swift_release();
    if (v35)
    {
      swift_getObjectType();
      uint64_t v36 = swift_conformsToProtocol2();
      uint64_t v37 = (void *)v126;
      if (v36) {
        uint64_t v38 = v35;
      }
      else {
        uint64_t v38 = 0;
      }
      if (v38) {
        goto LABEL_45;
      }
      uint64_t v36 = swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v37 = (void *)v126;
    }
    uint64_t v38 = 0;
LABEL_45:
    uint64_t v105 = v38;
    long long v107 = v99;
    uint64_t v50 = *(_DWORD *)(a1 + 32);
    char v52 = *(void *)(a1 + 40);
    int v51 = *(void *)(a1 + 48);
    uint64_t v53 = *(void *)(a1 + 56);
    uint64_t v54 = *(void **)(a1 + 72);
    uint64_t v110 = *(id *)(a1 + 80);
    uint64_t v55 = *(_DWORD *)(a1 + 88);
    uint64_t v128 = v50;
    id v56 = *(void *)(a1 + 96);
    uint64_t v57 = *(_OWORD *)(a1 + 16);
    uint64_t v126 = *(_OWORD *)a1;
    uint64_t v127 = v57;
    uint64_t v129 = v52;
    v130 = v51;
    uint64_t v131 = v53;
    id v132 = *(void *)(a1 + 64);
    v133 = v54;
    uint64_t v134 = v110;
    uint64_t v135 = v55;
    v136 = v56;
    MEMORY[0x1F4188790](v36);
    v96[2] = &v139;
    v96[3] = &v144;
    v96[4] = v59;
    _OWORD v96[5] = v58;
    v96[6] = v37;
    v96[7] = v33;
    uint64_t v97 = v111;
    uint64_t v98 = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSlider>>();
    long long v108 = v60;
    type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSlider>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSlider>>, MEMORY[0x1E4FBB718]);
    uint64_t v111 = v33;
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSlider>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSlider>>);
    swift_retain();
    swift_retain();
    int v61 = v54;
    uint64_t v62 = v110;
    swift_retain();
    uint64_t v41 = v111;
    StatefulRule.withObservation<A>(do:)();
    long long v108 = 0;
    swift_release();
    uint64_t v110 = v37;
    swift_release();
    uint64_t v63 = v133;
    uint64_t v64 = v134;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    int v65 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = v114;

    goto LABEL_46;
  }
LABEL_59:
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned char *v10;
  uint64_t Value;
  char v12;
  char v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  unsigned char *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  void *v31;
  void *v32;
  char v33;
  char v34;
  int v35;
  void *v36;
  void *v37;
  char v38;
  void *v39;
  long long v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  int v62;
  uint64_t v63;
  long long v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  id v70;
  void *v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  int v83;
  uint64_t v84;
  long long v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  id v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  unsigned char *v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  id v98;
  id v99;
  id v100;
  long long v101;
  char v102;
  void *v103;
  unsigned char v104[4];
  int v105;
  id v106;
  uint64_t v107;
  unsigned char *v108;
  unsigned char *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned char *v117;
  uint64_t v118;
  uint64_t v119;
  long long v120;
  long long v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  id v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  long long v135;
  char v136;
  id v137;
  uint64_t v138;

  v138 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>();
  char v3 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = &v104[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v6);
  int v109 = &v104[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = &v104[-v9];
  uint64_t Value = AGGraphGetValue();
  uint64_t v13 = v12;
  outlined init with copy of PlatformViewRepresentableAdaptor<TextViewAdaptor>(Value, (uint64_t)v10);
  char v14 = (unsigned int *)AGGraphGetValue();
  uint64_t v113 = v15;
  uint64_t v16 = *v14;
  int v17 = (uint64_t *)AGGraphGetValue();
  uint64_t v112 = v18;
  int v19 = *v17;
  uint64_t v118 = v17[1];
  unsigned int v20 = *(_DWORD *)(a1 + 28) == *MEMORY[0x1E4F4E7A0];
  long long v108 = v5;
  if (v20
    || (uint64_t v21 = AGGraphGetValue(),
        long long v23 = v22,
        long long v24 = *(void *)v21,
        LODWORD(v107) = *(unsigned __int8 *)(v21 + 8),
        int v25 = *(_DWORD *)(v21 + 12),
        swift_retain(),
        uint64_t v115 = v24,
        v24 == 1))
  {
    uint64_t v26 = 0;
    LODWORD(v106) = 0;
    LODWORD(v107) = 0;
    uint64_t v115 = 0;
  }
  else
  {
    LODWORD(v106) = v25;
    uint64_t v26 = v23 & 1;
  }
  uint64_t v27 = v16 >> 1;
  if (v16 >> 1 == *(_DWORD *)(a1 + 88))
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    uint64_t v28 = v3;
    char v29 = v13;
    uint64_t v30 = v16;
    uint64_t v120 = *(_OWORD *)(a1 + 56);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    uint64_t v31 = *(void **)(a1 + 72);
    if (v31)
    {
      uint64_t v32 = *(void **)(a1 + 80);
      if (v32)
      {

        *(void *)(a1 + 72) = 0;
        *(void *)(a1 + 80) = 0;
      }
    }
    *(_DWORD *)(a1 + 88) = v27;
    uint64_t v16 = v30;
    uint64_t v13 = v29;
    char v3 = v28;
  }
  uint64_t v120 = *(_OWORD *)(a1 + 56);
  LODWORD(v133) = v16;
  uint64_t v33 = _DynamicPropertyBuffer.update(container:phase:)();
  uint64_t v34 = (char)v112;
  LODWORD(v111) = v16;
  if (v33)
  {
    int v35 = 1;
  }
  else
  {
    int v35 = 1;
    if (AGGraphGetOutputValue() && (v13 & 1) == 0 && (v113 & 1) == 0) {
      int v35 = AGGraphCurrentAttributeWasModified();
    }
  }
  AGGraphClearUpdate();
  int v116 = specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(a1, (uint64_t)v10);
  swift_retain();
  AGGraphSetUpdate();
  uint64_t v131 = v19;
  id v132 = v118;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  uint64_t v36 = *(void **)(a1 + 80);
  uint64_t v114 = v19;
  uint64_t v117 = v10;
  uint64_t v110 = v3;
  if (v36)
  {
    if (v34)
    {
      swift_retain();
      uint64_t v37 = v36;
      swift_retain();
      uint64_t v38 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if (v38)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        int v35 = 1;
      }
    }
    else
    {
      id v46 = v36;
    }
    if (specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<TextViewAdaptor>>.UnarySubtreeSequence, (uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<TextViewAdaptor>>.UnarySubtreeSequence))
    {
      *(void *)&uint64_t v120 = 0;
      WORD4(v120) = 1;
      type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v132)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    uint64_t v105 = v35;
    uint64_t v47 = v113 | v34;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    uint64_t v49 = *((void *)&v120 + 1);
    uint64_t v48 = v120;
    swift_retain();
    uint64_t v50 = v48;
    swift_retain();
    AGGraphClearUpdate();
    if (v47)
    {
      int v51 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v51, 0, v111);
      swift_release();
    }
    if (v26)
    {
      char v52 = (char *)v36 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v36) + 0x90);
      *(void *)char v52 = v115;
      v52[8] = v107;
      *((_DWORD *)v52 + 3) = v106;
      swift_retain();
      swift_release();
      objc_msgSend(v36, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    uint64_t v53 = *(void **)(a1 + 72);
    if (!v53)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    uint64_t v54 = v53;

    v133 = *(void *)(a1 + 40);
    uint64_t v134 = v116;
    uint64_t v55 = v50;
    *(void *)&uint64_t v135 = v50;
    *((void *)&v135 + 1) = v49;
    v136 = 0;
    uint64_t v137 = v54;
    swift_retain();
    if (!v105)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v50, v49, 0);

      id v56 = (uint64_t)v117;
LABEL_53:
      swift_release();
      swift_release();
      outlined destroy of PlatformViewRepresentableAdaptor<TextViewAdaptor>(v56);
      return;
    }
    swift_retain();
LABEL_44:
    type metadata accessor for ViewGraph();
    uint64_t v74 = MEMORY[0x18C114EE0]() + 200;
    swift_beginAccess();
    uint64_t v75 = MEMORY[0x18C119DF0](v74);
    uint64_t v76 = swift_release();
    uint64_t v113 = v49;
    uint64_t v111 = v55;
    if (v75)
    {
      swift_getObjectType();
      uint64_t v76 = swift_conformsToProtocol2();
      if (v76) {
        id v77 = v75;
      }
      else {
        id v77 = 0;
      }
      if (!v77) {
        uint64_t v76 = swift_unknownObjectRelease();
      }
    }
    uint64_t v112 = v104;
    id v79 = *(void *)(a1 + 40);
    id v78 = *(void *)(a1 + 48);
    id v80 = *(void *)(a1 + 56);
    char v82 = *(void **)(a1 + 72);
    long long v81 = *(void **)(a1 + 80);
    uint64_t v83 = *(_DWORD *)(a1 + 88);
    long long v122 = *(_DWORD *)(a1 + 32);
    Class v84 = *(void *)(a1 + 96);
    uint64_t v85 = *(_OWORD *)(a1 + 16);
    uint64_t v120 = *(_OWORD *)a1;
    uint64_t v121 = v85;
    char v123 = v79;
    id v124 = v78;
    uint64_t v125 = v80;
    uint64_t v126 = *(void *)(a1 + 64);
    uint64_t v127 = v82;
    uint64_t v128 = v81;
    uint64_t v129 = v83;
    v130 = v84;
    MEMORY[0x1F4188790](v76);
    long long v107 = v86;
    *(void *)&v104[-48] = v86;
    *(void *)&v104[-40] = v87;
    *(void *)&v104[-32] = a1;
    *(void *)&v104[-24] = &v133;
    *(void *)&v104[-16] = v117;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<TextViewAdaptor>>();
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<TextViewAdaptor>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
    swift_retain();
    swift_retain();
    uint64_t v88 = v82;
    uint64_t v89 = v81;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    uint64_t v90 = v127;
    uint64_t v91 = v128;
    swift_release();
    swift_release();
    swift_release();

    uint64_t v92 = *(void **)(a1 + 80);
    if (v92)
    {
      uint64_t v93 = *(void **)(a1 + 72);
      id v56 = (uint64_t)v117;
      id v94 = v109;
      outlined init with copy of PlatformViewRepresentableAdaptor<TextViewAdaptor>((uint64_t)v117, (uint64_t)v109);
      uint64_t v95 = v110;
      if (v93)
      {
        int v96 = (uint64_t)v108;
        *(void *)&v108[*(int *)(v110 + 40)] = v93;
        outlined init with take of PlatformViewRepresentableAdaptor<TextViewAdaptor>((uint64_t)v94, v96);
        *(void *)(v96 + *(int *)(v95 + 36)) = v92;
        uint64_t v97 = v92;
        swift_retain();
        swift_retain();
        uint64_t v98 = v93;
        uint64_t v99 = v97;
        swift_retain();
        uint64_t v100 = v98;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined destroy of ScrollableCollection?(v96, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
        uint64_t v101 = v135;
        id v102 = v136;
        int v103 = v137;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v101, *((uint64_t *)&v101 + 1), v102);

        goto LABEL_53;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_56;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  char v39 = *(void **)(a1 + 72);
  if (v39)
  {
    int v40 = v120;
    v133 = *(void *)(a1 + 40);
    uint64_t v134 = v116;
    uint64_t v135 = v120;
    v136 = 0;
    uint64_t v137 = v39;
    type metadata accessor for ViewGraph();
    uint64_t v113 = *((void *)&v40 + 1);
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    swift_retain();
    uint64_t v41 = MEMORY[0x18C114EE0](v39) + 200;
    swift_beginAccess();
    long long v42 = MEMORY[0x18C119DF0](v41);
    uint64_t v43 = swift_release();
    if (v42)
    {
      swift_getObjectType();
      uint64_t v43 = swift_conformsToProtocol2();
      uint64_t v44 = v40;
      if (v43) {
        id v45 = v42;
      }
      else {
        id v45 = 0;
      }
      if (v45) {
        goto LABEL_43;
      }
      uint64_t v43 = swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v44 = v40;
    }
    id v45 = 0;
LABEL_43:
    long long v107 = v45;
    uint64_t v112 = v104;
    uint64_t v57 = *(_DWORD *)(a1 + 32);
    uint64_t v59 = *(void *)(a1 + 40);
    uint64_t v58 = *(void *)(a1 + 48);
    uint64_t v60 = *(void *)(a1 + 56);
    int v61 = *(void **)(a1 + 72);
    unint64_t v106 = *(id *)(a1 + 80);
    uint64_t v62 = *(_DWORD *)(a1 + 88);
    long long v122 = v57;
    uint64_t v63 = *(void *)(a1 + 96);
    uint64_t v64 = *(_OWORD *)(a1 + 16);
    uint64_t v120 = *(_OWORD *)a1;
    uint64_t v121 = v64;
    char v123 = v59;
    id v124 = v58;
    uint64_t v125 = v60;
    uint64_t v126 = *(void *)(a1 + 64);
    uint64_t v127 = v61;
    uint64_t v128 = v106;
    uint64_t v129 = v62;
    v130 = v63;
    MEMORY[0x1F4188790](v43);
    *(void *)&v104[-64] = &v133;
    *(void *)&v104[-56] = v117;
    *(void *)&v104[-48] = v65;
    *(void *)&v104[-40] = v66;
    *(void *)&v104[-32] = v44;
    int v67 = v113;
    *(void *)&v104[-24] = v113;
    *(_DWORD *)&v104[-16] = v111;
    *(void *)&v104[-8] = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<TextViewAdaptor>>();
    uint64_t v111 = v68;
    type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<TextViewAdaptor>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<TextViewAdaptor>>, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<TextViewAdaptor>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
    uint64_t v55 = v44;
    swift_retain();
    swift_retain();
    uint64_t v69 = v61;
    uint64_t v70 = v106;
    swift_retain();
    uint64_t v49 = v67;
    StatefulRule.withObservation<A>(do:)();
    swift_release();
    swift_release();
    id v71 = v127;
    id v72 = v128;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    char v73 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = v119;

    goto LABEL_44;
  }
LABEL_57:
  __break(1u);
}

{
  uint64_t Value;
  char v3;
  char v4;
  unsigned int *v5;
  void *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  void *v19;
  void *v20;
  int v21;
  uint64_t v22;
  void *v23;
  void *v24;
  char v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  char v33;
  uint64_t v34;
  char *v35;
  void *v36;
  id v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  int v43;
  uint64_t v44;
  long long v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  int v64;
  uint64_t v65;
  long long v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  id v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  id v75;
  id v76;
  id v77;
  id v78;
  long long v79;
  char v80;
  void *v81;
  void v82[8];
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  _OWORD v96[5];
  _OWORD v97[5];
  void *v98;
  void *v99;
  long long v100;
  long long v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  id v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  long long v115;
  char v116;
  id v117;
  unsigned char v118[80];
  uint64_t v119;

  uint64_t v119 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  uint64_t Value = AGGraphGetValue();
  char v4 = v3;
  outlined init with copy of PlatformViewRepresentableAdaptor<UIKitPagingView>(Value, (uint64_t)v118);
  uint64_t v5 = (unsigned int *)AGGraphGetValue();
  uint64_t v93 = v6;
  unsigned int v7 = *v5;
  long long v8 = (uint64_t *)AGGraphGetValue();
  uint64_t v95 = v9;
  uint64_t v10 = *v8;
  uint64_t v11 = v8[1];
  if (*(_DWORD *)(a1 + 28) == *MEMORY[0x1E4F4E7A0]
    || (uint64_t v12 = AGGraphGetValue(),
        char v14 = v13,
        char v15 = *(void *)v12,
        uint64_t v16 = *(unsigned __int8 *)(v12 + 8),
        int v17 = *(_DWORD *)(v12 + 12),
        swift_retain(),
        v15 == 1))
  {
    LODWORD(v88) = 0;
    LODWORD(v87) = 0;
    uint64_t v16 = 0;
    char v15 = 0;
  }
  else
  {
    LODWORD(v87) = v17;
    LODWORD(v88) = v14 & 1;
  }
  unsigned int v18 = *(_DWORD *)(a1 + 88);
  LODWORD(v86) = v16;
  if (v7 >> 1 == v18)
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    uint64_t v100 = *(_OWORD *)(a1 + 56);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    int v19 = *(void **)(a1 + 72);
    if (v19)
    {
      unsigned int v20 = *(void **)(a1 + 80);
      if (v20)
      {

        *(void *)(a1 + 72) = 0;
        *(void *)(a1 + 80) = 0;
      }
    }
    *(_DWORD *)(a1 + 88) = v7 >> 1;
  }
  uint64_t v100 = *(_OWORD *)(a1 + 56);
  LODWORD(v97[0]) = v7;
  LODWORD(v90) = v7;
  if (_DynamicPropertyBuffer.update(container:phase:)())
  {
    uint64_t v21 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>();
    uint64_t v21 = 1;
    if (AGGraphGetOutputValue() && (v4 & 1) == 0 && (v93 & 1) == 0) {
      uint64_t v21 = AGGraphCurrentAttributeWasModified();
    }
  }
  AGGraphClearUpdate();
  uint64_t v22 = specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(a1, (uint64_t)v118);
  swift_retain();
  AGGraphSetUpdate();
  uint64_t v111 = v10;
  uint64_t v112 = v11;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  long long v23 = *(void **)(a1 + 80);
  uint64_t v91 = v10;
  uint64_t v92 = v11;
  id v94 = v22;
  uint64_t v89 = v15;
  if (v23)
  {
    if (v95)
    {
      swift_retain();
      long long v24 = v23;
      swift_retain();
      int v25 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if (v25)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        uint64_t v21 = 1;
      }
    }
    else
    {
      uint64_t v32 = v23;
    }
    if (specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPagingView>>.UnarySubtreeSequence, (uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPagingView>>.UnarySubtreeSequence))
    {
      *(void *)&uint64_t v100 = 0;
      WORD4(v100) = 1;
      type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v112)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    uint64_t v33 = v93 | v95;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    uint64_t v93 = (id)*((void *)&v100 + 1);
    swift_retain();
    swift_retain();
    AGGraphClearUpdate();
    uint64_t v95 = v100;
    if (v33)
    {
      uint64_t v34 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v34, 0, v90);
      swift_release();
    }
    if (v88)
    {
      int v35 = (char *)v23 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v23) + 0x90);
      *(void *)int v35 = v15;
      v35[8] = v86;
      *((_DWORD *)v35 + 3) = v87;
      swift_retain();
      swift_release();
      objc_msgSend(v23, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    uint64_t v36 = *(void **)(a1 + 72);
    if (!v36)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    uint64_t v37 = v36;

    uint64_t v113 = *(void *)(a1 + 40);
    uint64_t v114 = v94;
    *(void *)&uint64_t v115 = v95;
    *((void *)&v115 + 1) = v93;
    int v116 = 0;
    uint64_t v117 = v37;
    swift_retain();
    if (!v21)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v95, (uint64_t)v93, 0);

LABEL_53:
      swift_release();
      swift_release();
      outlined destroy of PlatformViewRepresentableAdaptor<UIKitPagingView>((uint64_t)v118);
      return;
    }
    swift_retain();
    uint64_t v90 = 0;
LABEL_44:
    type metadata accessor for ViewGraph();
    uint64_t v55 = MEMORY[0x18C114EE0]() + 200;
    swift_beginAccess();
    id v56 = MEMORY[0x18C119DF0](v55);
    uint64_t v57 = swift_release();
    if (v56)
    {
      swift_getObjectType();
      uint64_t v57 = swift_conformsToProtocol2();
      if (v57) {
        uint64_t v58 = v56;
      }
      else {
        uint64_t v58 = 0;
      }
      if (!v58) {
        uint64_t v57 = swift_unknownObjectRelease();
      }
    }
    uint64_t v88 = v82;
    uint64_t v60 = *(void *)(a1 + 40);
    uint64_t v59 = *(void *)(a1 + 48);
    int v61 = *(void *)(a1 + 56);
    uint64_t v63 = *(void **)(a1 + 72);
    uint64_t v62 = *(void **)(a1 + 80);
    uint64_t v64 = *(_DWORD *)(a1 + 88);
    id v102 = *(_DWORD *)(a1 + 32);
    int v65 = *(void *)(a1 + 96);
    uint64_t v66 = *(_OWORD *)(a1 + 16);
    uint64_t v100 = *(_OWORD *)a1;
    uint64_t v101 = v66;
    int v103 = v60;
    uint64_t v104 = v59;
    uint64_t v105 = v61;
    unint64_t v106 = *(void *)(a1 + 64);
    long long v107 = v63;
    long long v108 = v62;
    int v109 = v64;
    uint64_t v110 = v65;
    MEMORY[0x1F4188790](v57);
    id v87 = v67;
    v82[-6] = v67;
    v82[-5] = v68;
    v82[-4] = a1;
    v82[-3] = &v113;
    v82[-2] = v118;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPagingView>>();
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPagingView>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
    swift_retain();
    swift_retain();
    uint64_t v69 = v63;
    uint64_t v70 = v62;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    id v71 = v107;
    id v72 = v108;
    swift_release();
    swift_release();
    swift_release();

    char v73 = *(void **)(a1 + 80);
    if (v73)
    {
      uint64_t v74 = *(void **)(a1 + 72);
      outlined init with copy of PlatformViewRepresentableAdaptor<UIKitPagingView>((uint64_t)v118, (uint64_t)v96);
      if (v74)
      {
        v97[3] = v96[3];
        v97[4] = v96[4];
        v97[1] = v96[1];
        v97[2] = v96[2];
        v97[0] = v96[0];
        uint64_t v98 = v73;
        uint64_t v99 = v74;
        type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>();
        uint64_t v75 = v73;
        swift_retain();
        swift_retain();
        uint64_t v76 = v74;
        id v77 = v75;
        swift_retain();
        id v78 = v76;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined destroy of ScrollableCollection?((uint64_t)v97, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
        id v79 = v115;
        id v80 = v116;
        long long v81 = v117;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v79, *((uint64_t *)&v79 + 1), v80);

        goto LABEL_53;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_56;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  uint64_t v26 = *(void **)(a1 + 72);
  if (v26)
  {
    uint64_t v113 = *(void *)(a1 + 40);
    uint64_t v114 = v22;
    uint64_t v115 = v100;
    int v116 = 0;
    uint64_t v117 = v26;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    swift_retain();
    uint64_t v95 = v100;
    swift_retain_n();
    swift_retain();
    uint64_t v27 = MEMORY[0x18C114EE0](v26) + 200;
    swift_beginAccess();
    uint64_t v28 = MEMORY[0x18C119DF0](v27);
    char v29 = swift_release();
    if (v28)
    {
      swift_getObjectType();
      char v29 = swift_conformsToProtocol2();
      uint64_t v30 = (void *)*((void *)&v100 + 1);
      if (v29) {
        uint64_t v31 = v28;
      }
      else {
        uint64_t v31 = 0;
      }
      if (v31) {
        goto LABEL_43;
      }
      char v29 = swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v30 = (void *)*((void *)&v100 + 1);
    }
    uint64_t v31 = 0;
LABEL_43:
    id v87 = v31;
    uint64_t v88 = &v85;
    uint64_t v38 = *(_DWORD *)(a1 + 32);
    int v40 = *(void *)(a1 + 40);
    char v39 = *(void *)(a1 + 48);
    uint64_t v41 = *(void *)(a1 + 56);
    long long v42 = *(void **)(a1 + 72);
    uint64_t v93 = *(id *)(a1 + 80);
    uint64_t v43 = *(_DWORD *)(a1 + 88);
    id v102 = v38;
    uint64_t v44 = *(void *)(a1 + 96);
    id v45 = *(_OWORD *)(a1 + 16);
    uint64_t v100 = *(_OWORD *)a1;
    uint64_t v101 = v45;
    int v103 = v40;
    uint64_t v104 = v39;
    uint64_t v105 = v41;
    unint64_t v106 = *(void *)(a1 + 64);
    long long v107 = v42;
    long long v108 = v93;
    int v109 = v43;
    uint64_t v110 = v44;
    MEMORY[0x1F4188790](v29);
    v82[2] = &v113;
    v82[3] = v118;
    v82[4] = v47;
    v82[5] = v46;
    v82[6] = v95;
    v82[7] = v30;
    uint64_t v83 = v90;
    Class v84 = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPagingView>>();
    uint64_t v90 = v48;
    type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPagingView>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPagingView>>, MEMORY[0x1E4FBB718]);
    Class v86 = v49;
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPagingView>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
    swift_retain();
    swift_retain();
    uint64_t v50 = v42;
    int v51 = v93;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    uint64_t v90 = 0;
    uint64_t v93 = v30;
    swift_release();
    swift_release();
    char v52 = v107;
    uint64_t v53 = v108;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    uint64_t v54 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = *(void *)&v97[0];

    goto LABEL_44;
  }
LABEL_57:
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned char *v10;
  uint64_t Value;
  char v12;
  char v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  unsigned char *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  void *v31;
  void *v32;
  char v33;
  char v34;
  int v35;
  void *v36;
  void *v37;
  char v38;
  void *v39;
  long long v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  int v62;
  uint64_t v63;
  long long v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  id v70;
  void *v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  int v83;
  uint64_t v84;
  long long v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  id v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  unsigned char *v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  id v98;
  id v99;
  id v100;
  long long v101;
  char v102;
  void *v103;
  unsigned char v104[4];
  int v105;
  id v106;
  uint64_t v107;
  unsigned char *v108;
  unsigned char *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned char *v117;
  uint64_t v118;
  uint64_t v119;
  long long v120;
  long long v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  id v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  long long v135;
  char v136;
  id v137;
  uint64_t v138;

  v138 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>();
  char v3 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = &v104[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v6);
  int v109 = &v104[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = &v104[-v9];
  uint64_t Value = AGGraphGetValue();
  uint64_t v13 = v12;
  outlined init with copy of PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(Value, (uint64_t)v10);
  char v14 = (unsigned int *)AGGraphGetValue();
  uint64_t v113 = v15;
  uint64_t v16 = *v14;
  int v17 = (uint64_t *)AGGraphGetValue();
  uint64_t v112 = v18;
  int v19 = *v17;
  uint64_t v118 = v17[1];
  unsigned int v20 = *(_DWORD *)(a1 + 28) == *MEMORY[0x1E4F4E7A0];
  long long v108 = v5;
  if (v20
    || (uint64_t v21 = AGGraphGetValue(),
        long long v23 = v22,
        long long v24 = *(void *)v21,
        LODWORD(v107) = *(unsigned __int8 *)(v21 + 8),
        int v25 = *(_DWORD *)(v21 + 12),
        swift_retain(),
        uint64_t v115 = v24,
        v24 == 1))
  {
    uint64_t v26 = 0;
    LODWORD(v106) = 0;
    LODWORD(v107) = 0;
    uint64_t v115 = 0;
  }
  else
  {
    LODWORD(v106) = v25;
    uint64_t v26 = v23 & 1;
  }
  uint64_t v27 = v16 >> 1;
  if (v16 >> 1 == *(_DWORD *)(a1 + 88))
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    uint64_t v28 = v3;
    char v29 = v13;
    uint64_t v30 = v16;
    uint64_t v120 = *(_OWORD *)(a1 + 56);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    uint64_t v31 = *(void **)(a1 + 72);
    if (v31)
    {
      uint64_t v32 = *(void **)(a1 + 80);
      if (v32)
      {

        *(void *)(a1 + 72) = 0;
        *(void *)(a1 + 80) = 0;
      }
    }
    *(_DWORD *)(a1 + 88) = v27;
    uint64_t v16 = v30;
    uint64_t v13 = v29;
    char v3 = v28;
  }
  uint64_t v120 = *(_OWORD *)(a1 + 56);
  LODWORD(v133) = v16;
  uint64_t v33 = _DynamicPropertyBuffer.update(container:phase:)();
  uint64_t v34 = (char)v112;
  LODWORD(v111) = v16;
  if (v33)
  {
    int v35 = 1;
  }
  else
  {
    int v35 = 1;
    if (AGGraphGetOutputValue() && (v13 & 1) == 0 && (v113 & 1) == 0) {
      int v35 = AGGraphCurrentAttributeWasModified();
    }
  }
  AGGraphClearUpdate();
  int v116 = specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(a1, (uint64_t)v10);
  swift_retain();
  AGGraphSetUpdate();
  uint64_t v131 = v19;
  id v132 = v118;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  uint64_t v36 = *(void **)(a1 + 80);
  uint64_t v114 = v19;
  uint64_t v117 = v10;
  uint64_t v110 = v3;
  if (v36)
  {
    if (v34)
    {
      swift_retain();
      uint64_t v37 = v36;
      swift_retain();
      uint64_t v38 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if (v38)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        int v35 = 1;
      }
    }
    else
    {
      id v46 = v36;
    }
    if (specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>.UnarySubtreeSequence, (uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>.UnarySubtreeSequence))
    {
      *(void *)&uint64_t v120 = 0;
      WORD4(v120) = 1;
      type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v132)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    uint64_t v105 = v35;
    uint64_t v47 = v113 | v34;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    uint64_t v49 = *((void *)&v120 + 1);
    uint64_t v48 = v120;
    swift_retain();
    uint64_t v50 = v48;
    swift_retain();
    AGGraphClearUpdate();
    if (v47)
    {
      int v51 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v51, 0, v111);
      swift_release();
    }
    if (v26)
    {
      char v52 = (char *)v36 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v36) + 0x90);
      *(void *)char v52 = v115;
      v52[8] = v107;
      *((_DWORD *)v52 + 3) = v106;
      swift_retain();
      swift_release();
      objc_msgSend(v36, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    uint64_t v53 = *(void **)(a1 + 72);
    if (!v53)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    uint64_t v54 = v53;

    v133 = *(void *)(a1 + 40);
    uint64_t v134 = v116;
    uint64_t v55 = v50;
    *(void *)&uint64_t v135 = v50;
    *((void *)&v135 + 1) = v49;
    v136 = 0;
    uint64_t v137 = v54;
    swift_retain();
    if (!v105)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v50, v49, 0);

      id v56 = (uint64_t)v117;
LABEL_53:
      swift_release();
      swift_release();
      outlined destroy of PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(v56);
      return;
    }
    swift_retain();
LABEL_44:
    type metadata accessor for ViewGraph();
    uint64_t v74 = MEMORY[0x18C114EE0]() + 200;
    swift_beginAccess();
    uint64_t v75 = MEMORY[0x18C119DF0](v74);
    uint64_t v76 = swift_release();
    uint64_t v113 = v49;
    uint64_t v111 = v55;
    if (v75)
    {
      swift_getObjectType();
      uint64_t v76 = swift_conformsToProtocol2();
      if (v76) {
        id v77 = v75;
      }
      else {
        id v77 = 0;
      }
      if (!v77) {
        uint64_t v76 = swift_unknownObjectRelease();
      }
    }
    uint64_t v112 = v104;
    id v79 = *(void *)(a1 + 40);
    id v78 = *(void *)(a1 + 48);
    id v80 = *(void *)(a1 + 56);
    char v82 = *(void **)(a1 + 72);
    long long v81 = *(void **)(a1 + 80);
    uint64_t v83 = *(_DWORD *)(a1 + 88);
    long long v122 = *(_DWORD *)(a1 + 32);
    Class v84 = *(void *)(a1 + 96);
    uint64_t v85 = *(_OWORD *)(a1 + 16);
    uint64_t v120 = *(_OWORD *)a1;
    uint64_t v121 = v85;
    char v123 = v79;
    id v124 = v78;
    uint64_t v125 = v80;
    uint64_t v126 = *(void *)(a1 + 64);
    uint64_t v127 = v82;
    uint64_t v128 = v81;
    uint64_t v129 = v83;
    v130 = v84;
    MEMORY[0x1F4188790](v76);
    long long v107 = v86;
    *(void *)&v104[-48] = v86;
    *(void *)&v104[-40] = v87;
    *(void *)&v104[-32] = a1;
    *(void *)&v104[-24] = &v133;
    *(void *)&v104[-16] = v117;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>();
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
    swift_retain();
    swift_retain();
    uint64_t v88 = v82;
    uint64_t v89 = v81;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    uint64_t v90 = v127;
    uint64_t v91 = v128;
    swift_release();
    swift_release();
    swift_release();

    uint64_t v92 = *(void **)(a1 + 80);
    if (v92)
    {
      uint64_t v93 = *(void **)(a1 + 72);
      id v56 = (uint64_t)v117;
      id v94 = v109;
      outlined init with copy of PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>((uint64_t)v117, (uint64_t)v109);
      uint64_t v95 = v110;
      if (v93)
      {
        int v96 = (uint64_t)v108;
        *(void *)&v108[*(int *)(v110 + 40)] = v93;
        outlined init with take of PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>((uint64_t)v94, v96);
        *(void *)(v96 + *(int *)(v95 + 36)) = v92;
        uint64_t v97 = v92;
        swift_retain();
        swift_retain();
        uint64_t v98 = v93;
        uint64_t v99 = v97;
        swift_retain();
        uint64_t v100 = v98;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined destroy of ScrollableCollection?(v96, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
        uint64_t v101 = v135;
        id v102 = v136;
        int v103 = v137;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v101, *((uint64_t *)&v101 + 1), v102);

        goto LABEL_53;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_56;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  char v39 = *(void **)(a1 + 72);
  if (v39)
  {
    int v40 = v120;
    v133 = *(void *)(a1 + 40);
    uint64_t v134 = v116;
    uint64_t v135 = v120;
    v136 = 0;
    uint64_t v137 = v39;
    type metadata accessor for ViewGraph();
    uint64_t v113 = *((void *)&v40 + 1);
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    swift_retain();
    uint64_t v41 = MEMORY[0x18C114EE0](v39) + 200;
    swift_beginAccess();
    long long v42 = MEMORY[0x18C119DF0](v41);
    uint64_t v43 = swift_release();
    if (v42)
    {
      swift_getObjectType();
      uint64_t v43 = swift_conformsToProtocol2();
      uint64_t v44 = v40;
      if (v43) {
        id v45 = v42;
      }
      else {
        id v45 = 0;
      }
      if (v45) {
        goto LABEL_43;
      }
      uint64_t v43 = swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v44 = v40;
    }
    id v45 = 0;
LABEL_43:
    long long v107 = v45;
    uint64_t v112 = v104;
    uint64_t v57 = *(_DWORD *)(a1 + 32);
    uint64_t v59 = *(void *)(a1 + 40);
    uint64_t v58 = *(void *)(a1 + 48);
    uint64_t v60 = *(void *)(a1 + 56);
    int v61 = *(void **)(a1 + 72);
    unint64_t v106 = *(id *)(a1 + 80);
    uint64_t v62 = *(_DWORD *)(a1 + 88);
    long long v122 = v57;
    uint64_t v63 = *(void *)(a1 + 96);
    uint64_t v64 = *(_OWORD *)(a1 + 16);
    uint64_t v120 = *(_OWORD *)a1;
    uint64_t v121 = v64;
    char v123 = v59;
    id v124 = v58;
    uint64_t v125 = v60;
    uint64_t v126 = *(void *)(a1 + 64);
    uint64_t v127 = v61;
    uint64_t v128 = v106;
    uint64_t v129 = v62;
    v130 = v63;
    MEMORY[0x1F4188790](v43);
    *(void *)&v104[-64] = &v133;
    *(void *)&v104[-56] = v117;
    *(void *)&v104[-48] = v65;
    *(void *)&v104[-40] = v66;
    *(void *)&v104[-32] = v44;
    int v67 = v113;
    *(void *)&v104[-24] = v113;
    *(_DWORD *)&v104[-16] = v111;
    *(void *)&v104[-8] = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>();
    uint64_t v111 = v68;
    type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
    uint64_t v55 = v44;
    swift_retain();
    swift_retain();
    uint64_t v69 = v61;
    uint64_t v70 = v106;
    swift_retain();
    uint64_t v49 = v67;
    StatefulRule.withObservation<A>(do:)();
    swift_release();
    swift_release();
    id v71 = v127;
    id v72 = v128;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    char v73 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = v119;

    goto LABEL_44;
  }
LABEL_57:
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned char *v10;
  uint64_t Value;
  char v12;
  char v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  unsigned char *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  void *v31;
  void *v32;
  char v33;
  char v34;
  int v35;
  void *v36;
  void *v37;
  char v38;
  void *v39;
  long long v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  int v62;
  uint64_t v63;
  long long v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  id v70;
  void *v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  int v83;
  uint64_t v84;
  long long v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  id v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  unsigned char *v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  id v98;
  id v99;
  id v100;
  long long v101;
  char v102;
  void *v103;
  unsigned char v104[4];
  int v105;
  id v106;
  uint64_t v107;
  unsigned char *v108;
  unsigned char *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned char *v117;
  uint64_t v118;
  uint64_t v119;
  long long v120;
  long long v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  id v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  long long v135;
  char v136;
  id v137;
  uint64_t v138;

  v138 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>();
  char v3 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = &v104[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v6);
  int v109 = &v104[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = &v104[-v9];
  uint64_t Value = AGGraphGetValue();
  uint64_t v13 = v12;
  outlined init with copy of PlatformViewRepresentableAdaptor<KitRepresentable>(Value, (uint64_t)v10);
  char v14 = (unsigned int *)AGGraphGetValue();
  uint64_t v113 = v15;
  uint64_t v16 = *v14;
  int v17 = (uint64_t *)AGGraphGetValue();
  uint64_t v112 = v18;
  int v19 = *v17;
  uint64_t v118 = v17[1];
  unsigned int v20 = *(_DWORD *)(a1 + 28) == *MEMORY[0x1E4F4E7A0];
  long long v108 = v5;
  if (v20
    || (uint64_t v21 = AGGraphGetValue(),
        long long v23 = v22,
        long long v24 = *(void *)v21,
        LODWORD(v107) = *(unsigned __int8 *)(v21 + 8),
        int v25 = *(_DWORD *)(v21 + 12),
        swift_retain(),
        uint64_t v115 = v24,
        v24 == 1))
  {
    uint64_t v26 = 0;
    LODWORD(v106) = 0;
    LODWORD(v107) = 0;
    uint64_t v115 = 0;
  }
  else
  {
    LODWORD(v106) = v25;
    uint64_t v26 = v23 & 1;
  }
  uint64_t v27 = v16 >> 1;
  if (v16 >> 1 == *(_DWORD *)(a1 + 88))
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    uint64_t v28 = v3;
    char v29 = v13;
    uint64_t v30 = v16;
    uint64_t v120 = *(_OWORD *)(a1 + 56);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    uint64_t v31 = *(void **)(a1 + 72);
    if (v31)
    {
      uint64_t v32 = *(void **)(a1 + 80);
      if (v32)
      {

        *(void *)(a1 + 72) = 0;
        *(void *)(a1 + 80) = 0;
      }
    }
    *(_DWORD *)(a1 + 88) = v27;
    uint64_t v16 = v30;
    uint64_t v13 = v29;
    char v3 = v28;
  }
  uint64_t v120 = *(_OWORD *)(a1 + 56);
  LODWORD(v133) = v16;
  uint64_t v33 = _DynamicPropertyBuffer.update(container:phase:)();
  uint64_t v34 = (char)v112;
  LODWORD(v111) = v16;
  if (v33)
  {
    int v35 = 1;
  }
  else
  {
    int v35 = 1;
    if (AGGraphGetOutputValue() && (v13 & 1) == 0 && (v113 & 1) == 0) {
      int v35 = AGGraphCurrentAttributeWasModified();
    }
  }
  AGGraphClearUpdate();
  int v116 = specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(a1, (uint64_t)v10);
  swift_retain();
  AGGraphSetUpdate();
  uint64_t v131 = v19;
  id v132 = v118;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  uint64_t v36 = *(void **)(a1 + 80);
  uint64_t v114 = v19;
  uint64_t v117 = v10;
  uint64_t v110 = v3;
  if (v36)
  {
    if (v34)
    {
      swift_retain();
      uint64_t v37 = v36;
      swift_retain();
      uint64_t v38 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if (v38)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        int v35 = 1;
      }
    }
    else
    {
      id v46 = v36;
    }
    if (specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<KitRepresentable>>.UnarySubtreeSequence, (uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<KitRepresentable>>.UnarySubtreeSequence))
    {
      *(void *)&uint64_t v120 = 0;
      WORD4(v120) = 1;
      type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v132)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    uint64_t v105 = v35;
    uint64_t v47 = v113 | v34;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    uint64_t v49 = *((void *)&v120 + 1);
    uint64_t v48 = v120;
    swift_retain();
    uint64_t v50 = v48;
    swift_retain();
    AGGraphClearUpdate();
    if (v47)
    {
      int v51 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v51, 0, v111);
      swift_release();
    }
    if (v26)
    {
      char v52 = (char *)v36 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v36) + 0x90);
      *(void *)char v52 = v115;
      v52[8] = v107;
      *((_DWORD *)v52 + 3) = v106;
      swift_retain();
      swift_release();
      objc_msgSend(v36, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    uint64_t v53 = *(void **)(a1 + 72);
    if (!v53)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    uint64_t v54 = v53;

    v133 = *(void *)(a1 + 40);
    uint64_t v134 = v116;
    uint64_t v55 = v50;
    *(void *)&uint64_t v135 = v50;
    *((void *)&v135 + 1) = v49;
    v136 = 0;
    uint64_t v137 = v54;
    swift_retain();
    if (!v105)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v50, v49, 0);

      id v56 = (uint64_t)v117;
LABEL_53:
      swift_release();
      swift_release();
      outlined destroy of PlatformViewRepresentableAdaptor<KitRepresentable>(v56);
      return;
    }
    swift_retain();
LABEL_44:
    type metadata accessor for ViewGraph();
    uint64_t v74 = MEMORY[0x18C114EE0]() + 200;
    swift_beginAccess();
    uint64_t v75 = MEMORY[0x18C119DF0](v74);
    uint64_t v76 = swift_release();
    uint64_t v113 = v49;
    uint64_t v111 = v55;
    if (v75)
    {
      swift_getObjectType();
      uint64_t v76 = swift_conformsToProtocol2();
      if (v76) {
        id v77 = v75;
      }
      else {
        id v77 = 0;
      }
      if (!v77) {
        uint64_t v76 = swift_unknownObjectRelease();
      }
    }
    uint64_t v112 = v104;
    id v79 = *(void *)(a1 + 40);
    id v78 = *(void *)(a1 + 48);
    id v80 = *(void *)(a1 + 56);
    char v82 = *(void **)(a1 + 72);
    long long v81 = *(void **)(a1 + 80);
    uint64_t v83 = *(_DWORD *)(a1 + 88);
    long long v122 = *(_DWORD *)(a1 + 32);
    Class v84 = *(void *)(a1 + 96);
    uint64_t v85 = *(_OWORD *)(a1 + 16);
    uint64_t v120 = *(_OWORD *)a1;
    uint64_t v121 = v85;
    char v123 = v79;
    id v124 = v78;
    uint64_t v125 = v80;
    uint64_t v126 = *(void *)(a1 + 64);
    uint64_t v127 = v82;
    uint64_t v128 = v81;
    uint64_t v129 = v83;
    v130 = v84;
    MEMORY[0x1F4188790](v76);
    long long v107 = v86;
    *(void *)&v104[-48] = v86;
    *(void *)&v104[-40] = v87;
    *(void *)&v104[-32] = a1;
    *(void *)&v104[-24] = &v133;
    *(void *)&v104[-16] = v117;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>>();
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>>);
    swift_retain();
    swift_retain();
    uint64_t v88 = v82;
    uint64_t v89 = v81;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    uint64_t v90 = v127;
    uint64_t v91 = v128;
    swift_release();
    swift_release();
    swift_release();

    uint64_t v92 = *(void **)(a1 + 80);
    if (v92)
    {
      uint64_t v93 = *(void **)(a1 + 72);
      id v56 = (uint64_t)v117;
      id v94 = v109;
      outlined init with copy of PlatformViewRepresentableAdaptor<KitRepresentable>((uint64_t)v117, (uint64_t)v109);
      uint64_t v95 = v110;
      if (v93)
      {
        int v96 = (uint64_t)v108;
        *(void *)&v108[*(int *)(v110 + 40)] = v93;
        outlined init with take of PlatformViewRepresentableAdaptor<KitRepresentable>((uint64_t)v94, v96);
        *(void *)(v96 + *(int *)(v95 + 36)) = v92;
        uint64_t v97 = v92;
        swift_retain();
        swift_retain();
        uint64_t v98 = v93;
        uint64_t v99 = v97;
        swift_retain();
        uint64_t v100 = v98;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined destroy of ScrollableCollection?(v96, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>);
        uint64_t v101 = v135;
        id v102 = v136;
        int v103 = v137;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v101, *((uint64_t *)&v101 + 1), v102);

        goto LABEL_53;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_56;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  char v39 = *(void **)(a1 + 72);
  if (v39)
  {
    int v40 = v120;
    v133 = *(void *)(a1 + 40);
    uint64_t v134 = v116;
    uint64_t v135 = v120;
    v136 = 0;
    uint64_t v137 = v39;
    type metadata accessor for ViewGraph();
    uint64_t v113 = *((void *)&v40 + 1);
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    swift_retain();
    uint64_t v41 = MEMORY[0x18C114EE0](v39) + 200;
    swift_beginAccess();
    long long v42 = MEMORY[0x18C119DF0](v41);
    uint64_t v43 = swift_release();
    if (v42)
    {
      swift_getObjectType();
      uint64_t v43 = swift_conformsToProtocol2();
      uint64_t v44 = v40;
      if (v43) {
        id v45 = v42;
      }
      else {
        id v45 = 0;
      }
      if (v45) {
        goto LABEL_43;
      }
      uint64_t v43 = swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v44 = v40;
    }
    id v45 = 0;
LABEL_43:
    long long v107 = v45;
    uint64_t v112 = v104;
    uint64_t v57 = *(_DWORD *)(a1 + 32);
    uint64_t v59 = *(void *)(a1 + 40);
    uint64_t v58 = *(void *)(a1 + 48);
    uint64_t v60 = *(void *)(a1 + 56);
    int v61 = *(void **)(a1 + 72);
    unint64_t v106 = *(id *)(a1 + 80);
    uint64_t v62 = *(_DWORD *)(a1 + 88);
    long long v122 = v57;
    uint64_t v63 = *(void *)(a1 + 96);
    uint64_t v64 = *(_OWORD *)(a1 + 16);
    uint64_t v120 = *(_OWORD *)a1;
    uint64_t v121 = v64;
    char v123 = v59;
    id v124 = v58;
    uint64_t v125 = v60;
    uint64_t v126 = *(void *)(a1 + 64);
    uint64_t v127 = v61;
    uint64_t v128 = v106;
    uint64_t v129 = v62;
    v130 = v63;
    MEMORY[0x1F4188790](v43);
    *(void *)&v104[-64] = &v133;
    *(void *)&v104[-56] = v117;
    *(void *)&v104[-48] = v65;
    *(void *)&v104[-40] = v66;
    *(void *)&v104[-32] = v44;
    int v67 = v113;
    *(void *)&v104[-24] = v113;
    *(_DWORD *)&v104[-16] = v111;
    *(void *)&v104[-8] = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>>();
    uint64_t v111 = v68;
    type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<KitRepresentable>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<KitRepresentable>>, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>>);
    uint64_t v55 = v44;
    swift_retain();
    swift_retain();
    uint64_t v69 = v61;
    uint64_t v70 = v106;
    swift_retain();
    uint64_t v49 = v67;
    StatefulRule.withObservation<A>(do:)();
    swift_release();
    swift_release();
    id v71 = v127;
    id v72 = v128;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    char v73 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = v119;

    goto LABEL_44;
  }
LABEL_57:
  __break(1u);
}

{
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  void *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  unsigned int v24;
  void *v25;
  void *v26;
  int v27;
  uint64_t v28;
  void *v29;
  void *v30;
  char v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void *v44;
  id v45;
  uint64_t v46;
  char v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  int v58;
  uint64_t v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  id v65;
  void *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  void *v77;
  int v78;
  uint64_t v79;
  long long v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  id v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  uint64_t v89;
  void *v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  long long v106;
  void *v107;
  void v108[8];
  int v109;
  uint64_t v110;
  void v111[2];
  id v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  int v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  long long v126;
  void *v127;
  long long v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned __int8 v135;
  uint64_t v136;
  unsigned __int8 v137;
  unsigned __int8 v138;
  void *v139;
  unsigned __int8 v140;
  uint64_t v141;
  unsigned __int8 v142;
  long long v143;
  void *v144;
  void *v145;
  void *v146;
  long long v147;
  long long v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  id v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  long long v162;
  char v163;
  id v164;
  uint64_t v165;
  unsigned __int8 v166;
  uint64_t v167;
  unsigned __int8 v168;
  unsigned __int8 v169;
  void *v170;
  unsigned __int8 v171;
  uint64_t v172;
  unsigned __int8 v173;
  long long v174;
  void *v175;
  uint64_t v176;

  uint64_t v176 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPasteControl>, (uint64_t)&type metadata for UIKitPasteControl, (uint64_t)&protocol witness table for UIKitPasteControl, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  uint64_t Value = AGGraphGetValue();
  uint64_t v120 = v3;
  char v4 = *(void *)Value;
  uint64_t v5 = *(unsigned char *)(Value + 8);
  uint64_t v6 = *(void *)(Value + 16);
  unsigned int v7 = *(unsigned __int8 *)(Value + 24);
  long long v8 = *(unsigned char *)(Value + 25);
  uint64_t v9 = *(void **)(Value + 32);
  uint64_t v10 = *(unsigned __int8 *)(Value + 40);
  uint64_t v11 = *(void *)(Value + 48);
  uint64_t v12 = *(unsigned __int8 *)(Value + 56);
  uint64_t v13 = *(void **)(Value + 80);
  uint64_t v165 = *(void *)Value;
  uint64_t v166 = v5;
  v167 = v6;
  v168 = v7;
  unint64_t v169 = v8;
  uint64_t v170 = v9;
  char v123 = v10;
  uint64_t v171 = v10;
  id v124 = v11;
  uint64_t v172 = v11;
  LODWORD(v125) = v12;
  id v173 = v12;
  uint64_t v126 = *(_OWORD *)(Value + 64);
  uint64_t v174 = v126;
  uint64_t v127 = v13;
  v175 = v13;
  char v14 = (_DWORD *)AGGraphGetValue();
  *(void *)&uint64_t v128 = v15;
  LODWORD(v132) = *v14;
  uint64_t v16 = (uint64_t *)AGGraphGetValue();
  uint64_t v131 = v17;
  unsigned int v18 = *v16;
  v133 = v16[1];
  LODWORD(v16) = *(_DWORD *)(a1 + 28);
  int v19 = *MEMORY[0x1E4F4E7A0];
  uint64_t v129 = v18;
  if (v16 == v19)
  {
    long long v122 = 0;
    LODWORD(v121) = 0;
    LODWORD(v119) = 0;
    v130 = 0;
  }
  else
  {
    unsigned int v20 = AGGraphGetValue();
    uint64_t v22 = v21;
    long long v23 = *(void *)v20;
    LODWORD(v119) = *(unsigned __int8 *)(v20 + 8);
    LODWORD(v121) = *(_DWORD *)(v20 + 12);
    swift_retain();
    v130 = v23;
    if (v23 == 1)
    {
      long long v122 = 0;
      LODWORD(v121) = 0;
      LODWORD(v119) = 0;
      v130 = 0;
    }
    else
    {
      long long v122 = v22 & 1;
    }
    unsigned int v18 = v129;
  }
  long long v24 = v132 >> 1;
  if (v132 >> 1 == *(_DWORD *)(a1 + 88))
  {
    outlined copy of Environment<Bool>.Content(v4, v5);
    outlined copy of Environment<CGFloat?>.Content(v6, v7, v8);
    outlined copy of Environment<HoverEffect?>.Content(v9, v123);
    outlined copy of Environment<Bool>.Content(v124, v125);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    uint64_t v147 = *(_OWORD *)(a1 + 56);
    outlined copy of Environment<Bool>.Content(v4, v5);
    outlined copy of Environment<CGFloat?>.Content(v6, v7, v8);
    outlined copy of Environment<HoverEffect?>.Content(v9, v123);
    outlined copy of Environment<Bool>.Content(v124, v125);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    int v25 = *(void **)(a1 + 72);
    if (v25)
    {
      uint64_t v26 = *(void **)(a1 + 80);
      if (v26)
      {

        *(void *)(a1 + 72) = 0;
        *(void *)(a1 + 80) = 0;
      }
    }
    *(_DWORD *)(a1 + 88) = v24;
  }
  uint64_t v147 = *(_OWORD *)(a1 + 56);
  LODWORD(v134) = v132;
  if (_DynamicPropertyBuffer.update(container:phase:)())
  {
    uint64_t v27 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>();
    uint64_t v27 = 1;
    if (AGGraphGetOutputValue() && (v120 & 1) == 0 && (v128 & 1) == 0) {
      uint64_t v27 = AGGraphCurrentAttributeWasModified();
    }
  }
  AGGraphClearUpdate();
  uint64_t v28 = specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(a1, (uint64_t)&v165);
  swift_retain();
  AGGraphSetUpdate();
  v158 = v18;
  uint64_t v159 = v133;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  char v29 = *(void **)(a1 + 80);
  uint64_t v120 = v28;
  if (v29)
  {
    if (v131)
    {
      swift_retain();
      uint64_t v30 = v29;
      swift_retain();
      uint64_t v31 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if (v31)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        uint64_t v27 = 1;
      }
    }
    else
    {
      char v39 = v29;
    }
    if (specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPasteControl>>.UnarySubtreeSequence, (uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPasteControl>>.UnarySubtreeSequence))
    {
      *(void *)&uint64_t v147 = 0;
      WORD4(v147) = 1;
      type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v159)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    int v40 = v128 | v131;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    uint64_t v41 = *((void *)&v147 + 1);
    swift_retain();
    uint64_t v131 = (id)v147;
    swift_retain();
    AGGraphClearUpdate();
    if (v40)
    {
      long long v42 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v42, 0, v132);
      swift_release();
    }
    if (v122)
    {
      uint64_t v43 = (char *)v29 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v29) + 0x90);
      *(void *)uint64_t v43 = v130;
      v43[8] = v119;
      *((_DWORD *)v43 + 3) = v121;
      swift_retain();
      swift_release();
      objc_msgSend(v29, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    uint64_t v44 = *(void **)(a1 + 72);
    if (!v44)
    {
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    id v45 = v44;

    v160 = *(void *)(a1 + 40);
    id v161 = v28;
    *(void *)&v162 = v131;
    *((void *)&v162 + 1) = v41;
    uint64_t v163 = 0;
    v164 = v45;
    swift_retain();
    if (!v27)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage((uint64_t)v131, v41, 0);

      swift_release();
      swift_release();
      id v46 = v167;
      uint64_t v47 = v169;
      uint64_t v48 = v170;
      uint64_t v49 = v171;
      uint64_t v50 = v172;
      int v51 = v173;
      char v52 = v168;
      outlined consume of Environment<Bool>.Content(v165, v166);
      outlined consume of Environment<CGFloat?>.Content(v46, v52, v47);
      outlined consume of Environment<AnyShapeStyle?>.Content(v48, v49);
      outlined consume of Environment<Bool>.Content(v50, v51);
      swift_release();
LABEL_55:
      swift_bridgeObjectRelease();
      return;
    }
    swift_retain();
    *(void *)&uint64_t v128 = 0;
LABEL_46:
    type metadata accessor for ViewGraph();
    uint64_t v69 = MEMORY[0x18C114EE0]() + 200;
    swift_beginAccess();
    uint64_t v70 = MEMORY[0x18C119DF0](v69);
    id v71 = swift_release();
    id v132 = v41;
    if (v70)
    {
      swift_getObjectType();
      id v71 = swift_conformsToProtocol2();
      if (v71) {
        id v72 = v70;
      }
      else {
        id v72 = 0;
      }
      if (!v72) {
        id v71 = swift_unknownObjectRelease();
      }
    }
    uint64_t v127 = v108;
    uint64_t v74 = *(void *)(a1 + 40);
    char v73 = *(void *)(a1 + 48);
    uint64_t v75 = *(void *)(a1 + 56);
    uint64_t v76 = *(void **)(a1 + 72);
    id v77 = *(void **)(a1 + 80);
    id v78 = *(_DWORD *)(a1 + 88);
    uint64_t v149 = *(_DWORD *)(a1 + 32);
    id v79 = *(void *)(a1 + 96);
    id v80 = *(_OWORD *)(a1 + 16);
    uint64_t v147 = *(_OWORD *)a1;
    v148 = v80;
    uint64_t v150 = v74;
    v151 = v73;
    v152 = v75;
    v153 = *(void *)(a1 + 64);
    v154 = v76;
    uint64_t v155 = v77;
    v156 = v78;
    v157 = v79;
    MEMORY[0x1F4188790](v71);
    uint64_t v119 = v81;
    v108[-6] = v81;
    v108[-5] = v82;
    v108[-4] = a1;
    v108[-3] = &v160;
    v108[-2] = &v165;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPasteControl>>();
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPasteControl>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPasteControl>>);
    swift_retain();
    swift_retain();
    uint64_t v83 = v76;
    Class v84 = v77;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    uint64_t v85 = v154;
    Class v86 = v155;
    swift_release();
    swift_release();
    swift_release();

    id v87 = *(void **)(a1 + 80);
    if (v87)
    {
      uint64_t v88 = *(void **)(a1 + 72);
      if (v88)
      {
        uint64_t v121 = v175;
        uint64_t v89 = v171;
        uint64_t v90 = v170;
        uint64_t v91 = v169;
        uint64_t v92 = v167;
        long long v122 = v166;
        uint64_t v93 = v165;
        v111[1] = *(void *)(a1 + 96);
        id v94 = *(void *)(a1 + 40);
        uint64_t v125 = *(void *)(a1 + 48);
        *(void *)&uint64_t v126 = v167;
        uint64_t v117 = v165;
        uint64_t v118 = v94;
        char v123 = v168;
        LODWORD(v124) = v173;
        uint64_t v134 = v165;
        uint64_t v135 = v166;
        v136 = v167;
        uint64_t v137 = v168;
        v138 = v169;
        uint64_t v115 = v169;
        int v116 = v171;
        v139 = v170;
        uint64_t v127 = v170;
        uint64_t v140 = v171;
        v141 = v172;
        uint64_t v95 = v172;
        uint64_t v142 = v173;
        uint64_t v128 = v174;
        uint64_t v143 = v174;
        v144 = v175;
        uint64_t v145 = v87;
        v146 = v88;
        type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>();
        uint64_t v114 = v96;
        uint64_t v97 = v87;
        swift_retain();
        swift_retain();
        uint64_t v98 = v88;
        uint64_t v112 = v97;
        swift_retain();
        LOBYTE(v97) = v122;
        outlined copy of Environment<Bool>.Content(v93, v122);
        uint64_t v99 = v92;
        uint64_t v100 = v123;
        outlined copy of Environment<CGFloat?>.Content(v99, v123, v91);
        outlined copy of Environment<HoverEffect?>.Content(v90, v89);
        uint64_t v101 = v95;
        uint64_t v113 = v95;
        outlined copy of Environment<Bool>.Content(v95, v124);
        swift_bridgeObjectRetain();
        swift_retain();
        id v102 = v98;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        int v103 = v112;

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        uint64_t v104 = v117;
        outlined consume of Environment<Bool>.Content(v117, (char)v97);
        LOBYTE(v90) = v115;
        outlined consume of Environment<CGFloat?>.Content(v126, v100, v115);
        uint64_t v105 = v116;
        outlined consume of Environment<AnyShapeStyle?>.Content(v127, v116);
        LOBYTE(v97) = v124;
        outlined consume of Environment<Bool>.Content(v101, v124);

        swift_release();
        swift_bridgeObjectRelease();
        unint64_t v106 = v162;
        LOBYTE(v101) = v163;
        long long v107 = v164;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v106, *((uint64_t *)&v106 + 1), v101);

        swift_release();
        swift_release();
        outlined consume of Environment<Bool>.Content(v104, v122);
        outlined consume of Environment<CGFloat?>.Content(v126, v123, (char)v90);
        outlined consume of Environment<AnyShapeStyle?>.Content(v127, v105);
        outlined consume of Environment<Bool>.Content(v113, (char)v97);
        swift_release();
        goto LABEL_55;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_58;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  uint64_t v32 = *(void **)(a1 + 72);
  if (v32)
  {
    uint64_t v33 = *((void *)&v147 + 1);
    v160 = *(void *)(a1 + 40);
    id v161 = v28;
    v162 = v147;
    uint64_t v163 = 0;
    v164 = v32;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    swift_retain();
    uint64_t v34 = MEMORY[0x18C114EE0](v32) + 200;
    swift_beginAccess();
    int v35 = MEMORY[0x18C119DF0](v34);
    uint64_t v36 = swift_release();
    if (v35)
    {
      swift_getObjectType();
      uint64_t v36 = swift_conformsToProtocol2();
      uint64_t v37 = (void *)v147;
      if (v36) {
        uint64_t v38 = v35;
      }
      else {
        uint64_t v38 = 0;
      }
      if (v38) {
        goto LABEL_45;
      }
      uint64_t v36 = swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v37 = (void *)v147;
    }
    uint64_t v38 = 0;
LABEL_45:
    *(void *)&uint64_t v126 = v38;
    uint64_t v127 = v111;
    uint64_t v53 = *(_DWORD *)(a1 + 32);
    uint64_t v55 = *(void *)(a1 + 40);
    uint64_t v54 = *(void *)(a1 + 48);
    id v56 = *(void *)(a1 + 56);
    uint64_t v57 = *(void **)(a1 + 72);
    uint64_t v131 = *(id *)(a1 + 80);
    uint64_t v58 = *(_DWORD *)(a1 + 88);
    uint64_t v149 = v53;
    uint64_t v59 = *(void *)(a1 + 96);
    uint64_t v60 = *(_OWORD *)(a1 + 16);
    uint64_t v147 = *(_OWORD *)a1;
    v148 = v60;
    uint64_t v150 = v55;
    v151 = v54;
    v152 = v56;
    v153 = *(void *)(a1 + 64);
    v154 = v57;
    uint64_t v155 = v131;
    v156 = v58;
    v157 = v59;
    MEMORY[0x1F4188790](v36);
    v108[2] = &v160;
    v108[3] = &v165;
    v108[4] = v62;
    v108[5] = v61;
    v108[6] = v37;
    v108[7] = v33;
    int v109 = v132;
    uint64_t v110 = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPasteControl>>();
    *(void *)&uint64_t v128 = v63;
    type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPasteControl>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPasteControl>>, MEMORY[0x1E4FBB718]);
    id v132 = v33;
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPasteControl>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPasteControl>>);
    swift_retain();
    swift_retain();
    uint64_t v64 = v57;
    int v65 = v131;
    swift_retain();
    uint64_t v41 = v132;
    StatefulRule.withObservation<A>(do:)();
    *(void *)&uint64_t v128 = 0;
    swift_release();
    uint64_t v131 = v37;
    swift_release();
    uint64_t v66 = v154;
    int v67 = v155;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    long long v68 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = v134;

    goto LABEL_46;
  }
LABEL_59:
  __break(1u);
}

{
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  void *v10;
  unsigned int v11;
  uint64_t *v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  char v20;
  id v21;
  uint64_t v22;
  id v23;
  void *v24;
  void *v25;
  char v26;
  int v27;
  uint64_t v28;
  void *v29;
  void *v30;
  char v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  int v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void *v46;
  id v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  int v54;
  uint64_t v55;
  long long v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  id v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  int v75;
  uint64_t v76;
  long long v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  id v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  long long v92;
  void *v93;
  void v94[8];
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  void *v114;
  long long v115;
  long long v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  id v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  long long v130;
  char v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  id v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v139 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BridgedColorPicker>, (uint64_t)&type metadata for BridgedColorPicker, (uint64_t)&protocol witness table for BridgedColorPicker, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  uint64_t Value = AGGraphGetValue();
  id v102 = v3;
  char v4 = *(void *)(Value + 8);
  uint64_t v5 = *(void **)(Value + 16);
  uint64_t v6 = *(unsigned char *)(Value + 24);
  unsigned int v7 = *(void *)(Value + 32);
  long long v8 = *(void *)(Value + 40);
  v133 = *(void *)Value;
  uint64_t v134 = v4;
  uint64_t v135 = v5;
  v136 = v6;
  uint64_t v137 = v7;
  v138 = v8;
  uint64_t v9 = (unsigned int *)AGGraphGetValue();
  int v103 = v10;
  uint64_t v11 = *v9;
  uint64_t v12 = (uint64_t *)AGGraphGetValue();
  char v14 = v13;
  char v15 = v12[1];
  uint64_t v105 = *v12;
  unint64_t v106 = v15;
  if (*(_DWORD *)(a1 + 28) == *MEMORY[0x1E4F4E7A0])
  {
    LODWORD(v101) = 0;
    LODWORD(v100) = 0;
    LODWORD(v99) = 0;
    uint64_t v16 = 0;
  }
  else
  {
    int v17 = v11;
    unsigned int v18 = AGGraphGetValue();
    unsigned int v20 = v19;
    uint64_t v16 = *(void *)v18;
    LODWORD(v99) = *(unsigned __int8 *)(v18 + 8);
    LODWORD(v100) = *(_DWORD *)(v18 + 12);
    swift_retain();
    if (v16 == 1)
    {
      LODWORD(v101) = 0;
      LODWORD(v100) = 0;
      LODWORD(v99) = 0;
      uint64_t v16 = 0;
    }
    else
    {
      LODWORD(v101) = v20 & 1;
    }
    uint64_t v11 = v17;
  }
  if (v11 >> 1 == *(_DWORD *)(a1 + 88))
  {
    swift_retain();
    swift_retain();
    uint64_t v21 = v5;
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v22 = v105;
    swift_retain();
  }
  else
  {
    uint64_t v115 = *(_OWORD *)(a1 + 56);
    swift_retain();
    swift_retain();
    long long v23 = v5;
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v22 = v105;
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    long long v24 = *(void **)(a1 + 72);
    if (v24)
    {
      int v25 = *(void **)(a1 + 80);
      if (v25)
      {

        *(void *)(a1 + 72) = 0;
        *(void *)(a1 + 80) = 0;
      }
    }
    *(_DWORD *)(a1 + 88) = v11 >> 1;
  }
  uint64_t v115 = *(_OWORD *)(a1 + 56);
  LODWORD(v107) = v11;
  uint64_t v26 = v14;
  if (_DynamicPropertyBuffer.update(container:phase:)())
  {
    uint64_t v27 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>();
    uint64_t v27 = 1;
    if (AGGraphGetOutputValue() && (v102 & 1) == 0 && (v103 & 1) == 0) {
      uint64_t v27 = AGGraphCurrentAttributeWasModified();
    }
  }
  AGGraphClearUpdate();
  uint64_t v28 = specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(a1, &v133);
  swift_retain();
  AGGraphSetUpdate();
  uint64_t v126 = v22;
  uint64_t v127 = v106;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  char v29 = *(void **)(a1 + 80);
  id v102 = v28;
  uint64_t v104 = v16;
  if (!v29)
  {
    swift_retain();
    PropertyList.Tracker.reset()();
    swift_release();
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    uint64_t v32 = *(void **)(a1 + 72);
    if (!v32)
    {
LABEL_59:
      __break(1u);
      return;
    }
    uint64_t v128 = *(void *)(a1 + 40);
    uint64_t v129 = v28;
    v130 = v115;
    uint64_t v131 = 0;
    id v132 = v32;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    swift_retain();
    uint64_t v33 = MEMORY[0x18C114EE0](v32) + 200;
    swift_beginAccess();
    uint64_t v34 = MEMORY[0x18C119DF0](v33);
    int v35 = swift_release();
    if (v34)
    {
      swift_getObjectType();
      int v35 = swift_conformsToProtocol2();
      uint64_t v36 = v11;
      uint64_t v37 = (void *)*((void *)&v115 + 1);
      uint64_t v38 = v115;
      if (v35) {
        char v39 = v34;
      }
      else {
        char v39 = 0;
      }
      if (v39) {
        goto LABEL_45;
      }
      int v35 = swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v36 = v11;
      uint64_t v37 = (void *)*((void *)&v115 + 1);
      uint64_t v38 = v115;
    }
    char v39 = 0;
LABEL_45:
    uint64_t v99 = v39;
    uint64_t v100 = &v97;
    uint64_t v49 = *(_DWORD *)(a1 + 32);
    int v51 = *(void *)(a1 + 40);
    uint64_t v50 = *(void *)(a1 + 48);
    char v52 = *(void *)(a1 + 56);
    uint64_t v53 = *(void **)(a1 + 72);
    int v103 = *(id *)(a1 + 80);
    uint64_t v54 = *(_DWORD *)(a1 + 88);
    uint64_t v117 = v49;
    uint64_t v55 = *(void *)(a1 + 96);
    id v56 = *(_OWORD *)(a1 + 16);
    uint64_t v115 = *(_OWORD *)a1;
    int v116 = v56;
    uint64_t v118 = v51;
    uint64_t v119 = v50;
    uint64_t v120 = v52;
    uint64_t v121 = *(void *)(a1 + 64);
    long long v122 = v53;
    char v123 = v103;
    id v124 = v54;
    uint64_t v125 = v55;
    MEMORY[0x1F4188790](v35);
    v94[2] = &v128;
    v94[3] = &v133;
    v94[4] = v58;
    v94[5] = v57;
    v94[6] = v38;
    v94[7] = v37;
    uint64_t v95 = v36;
    int v96 = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<BridgedColorPicker>>();
    uint64_t v101 = v59;
    type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<BridgedColorPicker>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<BridgedColorPicker>>, MEMORY[0x1E4FBB718]);
    uint64_t v98 = v60;
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<BridgedColorPicker>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<BridgedColorPicker>>);
    uint64_t v48 = v38;
    swift_retain();
    swift_retain();
    int v61 = v53;
    uint64_t v62 = v103;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    uint64_t v101 = 0;
    int v103 = v37;
    swift_release();
    swift_release();
    uint64_t v63 = v122;
    uint64_t v64 = v123;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    int v65 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = v107;

    goto LABEL_46;
  }
  LODWORD(v98) = v11;
  if (v26)
  {
    swift_retain();
    uint64_t v30 = v29;
    swift_retain();
    uint64_t v31 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
    swift_release();
    swift_release();
    if (v31)
    {
      swift_retain();
      PropertyList.Tracker.reset()();
      swift_release();
      uint64_t v27 = 1;
    }
  }
  else
  {
    int v40 = v29;
  }
  if (specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<BridgedColorPicker>>.UnarySubtreeSequence, (uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<BridgedColorPicker>>.UnarySubtreeSequence))
  {
    *(void *)&uint64_t v115 = 0;
    WORD4(v115) = 1;
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.setter();
    if (v127)
    {
      LODWORD(v97) = v27;
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    uint64_t v28 = v102;
  }
  uint64_t v41 = v27;
  long long v42 = v103 | v26;
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  int v103 = (id)*((void *)&v115 + 1);
  swift_retain();
  uint64_t v43 = v115;
  swift_retain();
  AGGraphClearUpdate();
  if (v42)
  {
    uint64_t v44 = swift_retain();
    specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v44, 0, v98);
    swift_release();
  }
  if (v101)
  {
    id v45 = (char *)v29 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v29) + 0x90);
    *(void *)id v45 = v104;
    v45[8] = v99;
    *((_DWORD *)v45 + 3) = v100;
    swift_retain();
    swift_release();
    objc_msgSend(v29, sel__noteTraitsDidChangeRecursively);
  }
  AGGraphSetUpdate();
  id v46 = *(void **)(a1 + 72);
  if (!v46) {
    goto LABEL_58;
  }
  uint64_t v47 = v46;

  uint64_t v128 = *(void *)(a1 + 40);
  uint64_t v129 = v28;
  uint64_t v48 = v43;
  *(void *)&v130 = v43;
  *((void *)&v130 + 1) = v103;
  uint64_t v131 = 0;
  id v132 = v47;
  swift_retain();
  if (!v41)
  {
    swift_release_n();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v43, (uint64_t)v103, 0);

    swift_release();
    swift_release();
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    return;
  }
  swift_retain();
  uint64_t v101 = 0;
LABEL_46:
  type metadata accessor for ViewGraph();
  uint64_t v66 = MEMORY[0x18C114EE0]() + 200;
  swift_beginAccess();
  int v67 = MEMORY[0x18C119DF0](v66);
  long long v68 = swift_release();
  uint64_t v99 = v48;
  if (v67)
  {
    swift_getObjectType();
    long long v68 = swift_conformsToProtocol2();
    if (v68) {
      uint64_t v69 = v67;
    }
    else {
      uint64_t v69 = 0;
    }
    if (!v69) {
      long long v68 = swift_unknownObjectRelease();
    }
  }
  uint64_t v100 = v94;
  id v71 = *(void *)(a1 + 40);
  uint64_t v70 = *(void *)(a1 + 48);
  id v72 = *(void *)(a1 + 56);
  char v73 = *(void **)(a1 + 72);
  uint64_t v74 = *(void **)(a1 + 80);
  uint64_t v75 = *(_DWORD *)(a1 + 88);
  uint64_t v117 = *(_DWORD *)(a1 + 32);
  uint64_t v76 = *(void *)(a1 + 96);
  id v77 = *(_OWORD *)(a1 + 16);
  uint64_t v115 = *(_OWORD *)a1;
  int v116 = v77;
  uint64_t v118 = v71;
  uint64_t v119 = v70;
  uint64_t v120 = v72;
  uint64_t v121 = *(void *)(a1 + 64);
  long long v122 = v73;
  char v123 = v74;
  id v124 = v75;
  uint64_t v125 = v76;
  MEMORY[0x1F4188790](v68);
  uint64_t v98 = v78;
  v94[-6] = v78;
  v94[-5] = v79;
  v94[-4] = a1;
  v94[-3] = &v128;
  v94[-2] = &v133;
  type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<BridgedColorPicker>>();
  lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<BridgedColorPicker>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<BridgedColorPicker>>);
  swift_retain();
  swift_retain();
  id v80 = v73;
  long long v81 = v74;
  swift_retain();
  StatefulRule.withObservation<A>(do:)();
  char v82 = v122;
  uint64_t v83 = v123;
  swift_release();
  swift_release();
  swift_release();

  Class v84 = *(void **)(a1 + 80);
  if (!v84)
  {
    __break(1u);
    goto LABEL_57;
  }
  uint64_t v85 = *(void **)(a1 + 72);
  if (!v85)
  {
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  Class v86 = v135;
  uint64_t v97 = v134;
  uint64_t v100 = *(uint64_t **)(a1 + 40);
  uint64_t v101 = v138;
  long long v107 = v133;
  long long v108 = v134;
  int v109 = v135;
  uint64_t v110 = v136;
  uint64_t v111 = v137;
  uint64_t v112 = v138;
  uint64_t v113 = v84;
  uint64_t v114 = v85;
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>();
  swift_bridgeObjectRetain();
  id v87 = v85;
  uint64_t v88 = v84;
  swift_retain();
  swift_retain();
  uint64_t v89 = v87;
  uint64_t v90 = v88;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v91 = v86;
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v92 = v130;
  LOBYTE(v86) = v131;
  uint64_t v93 = v132;
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v92, *((uint64_t *)&v92 + 1), (char)v86);

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned char *v10;
  uint64_t Value;
  char v12;
  char v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  unsigned char *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  void *v31;
  void *v32;
  char v33;
  char v34;
  int v35;
  void *v36;
  void *v37;
  char v38;
  void *v39;
  long long v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  int v62;
  uint64_t v63;
  long long v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  id v70;
  void *v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  int v83;
  uint64_t v84;
  long long v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  id v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  unsigned char *v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  id v98;
  id v99;
  id v100;
  long long v101;
  char v102;
  void *v103;
  unsigned char v104[4];
  int v105;
  id v106;
  uint64_t v107;
  unsigned char *v108;
  unsigned char *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned char *v117;
  uint64_t v118;
  uint64_t v119;
  long long v120;
  long long v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  id v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  long long v135;
  char v136;
  id v137;
  uint64_t v138;

  v138 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>();
  char v3 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = &v104[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v6);
  int v109 = &v104[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = &v104[-v9];
  uint64_t Value = AGGraphGetValue();
  uint64_t v13 = v12;
  outlined init with copy of PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(Value, (uint64_t)v10);
  char v14 = (unsigned int *)AGGraphGetValue();
  uint64_t v113 = v15;
  uint64_t v16 = *v14;
  int v17 = (uint64_t *)AGGraphGetValue();
  uint64_t v112 = v18;
  int v19 = *v17;
  uint64_t v118 = v17[1];
  unsigned int v20 = *(_DWORD *)(a1 + 28) == *MEMORY[0x1E4F4E7A0];
  long long v108 = v5;
  if (v20
    || (uint64_t v21 = AGGraphGetValue(),
        long long v23 = v22,
        long long v24 = *(void *)v21,
        LODWORD(v107) = *(unsigned __int8 *)(v21 + 8),
        int v25 = *(_DWORD *)(v21 + 12),
        swift_retain(),
        uint64_t v115 = v24,
        v24 == 1))
  {
    uint64_t v26 = 0;
    LODWORD(v106) = 0;
    LODWORD(v107) = 0;
    uint64_t v115 = 0;
  }
  else
  {
    LODWORD(v106) = v25;
    uint64_t v26 = v23 & 1;
  }
  uint64_t v27 = v16 >> 1;
  if (v16 >> 1 == *(_DWORD *)(a1 + 88))
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    uint64_t v28 = v3;
    char v29 = v13;
    uint64_t v30 = v16;
    uint64_t v120 = *(_OWORD *)(a1 + 56);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    uint64_t v31 = *(void **)(a1 + 72);
    if (v31)
    {
      uint64_t v32 = *(void **)(a1 + 80);
      if (v32)
      {

        *(void *)(a1 + 72) = 0;
        *(void *)(a1 + 80) = 0;
      }
    }
    *(_DWORD *)(a1 + 88) = v27;
    uint64_t v16 = v30;
    uint64_t v13 = v29;
    char v3 = v28;
  }
  uint64_t v120 = *(_OWORD *)(a1 + 56);
  LODWORD(v133) = v16;
  uint64_t v33 = _DynamicPropertyBuffer.update(container:phase:)();
  uint64_t v34 = (char)v112;
  LODWORD(v111) = v16;
  if (v33)
  {
    int v35 = 1;
  }
  else
  {
    int v35 = 1;
    if (AGGraphGetOutputValue() && (v13 & 1) == 0 && (v113 & 1) == 0) {
      int v35 = AGGraphCurrentAttributeWasModified();
    }
  }
  AGGraphClearUpdate();
  int v116 = specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(a1, (uint64_t)v10);
  swift_retain();
  AGGraphSetUpdate();
  uint64_t v131 = v19;
  id v132 = v118;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  uint64_t v36 = *(void **)(a1 + 80);
  uint64_t v114 = v19;
  uint64_t v117 = v10;
  uint64_t v110 = v3;
  if (v36)
  {
    if (v34)
    {
      swift_retain();
      uint64_t v37 = v36;
      swift_retain();
      uint64_t v38 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if (v38)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        int v35 = 1;
      }
    }
    else
    {
      id v46 = v36;
    }
    if (specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>.UnarySubtreeSequence, (uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>.UnarySubtreeSequence))
    {
      *(void *)&uint64_t v120 = 0;
      WORD4(v120) = 1;
      type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v132)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    uint64_t v105 = v35;
    uint64_t v47 = v113 | v34;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    uint64_t v49 = *((void *)&v120 + 1);
    uint64_t v48 = v120;
    swift_retain();
    uint64_t v50 = v48;
    swift_retain();
    AGGraphClearUpdate();
    if (v47)
    {
      int v51 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v51, 0, v111);
      swift_release();
    }
    if (v26)
    {
      char v52 = (char *)v36 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v36) + 0x90);
      *(void *)char v52 = v115;
      v52[8] = v107;
      *((_DWORD *)v52 + 3) = v106;
      swift_retain();
      swift_release();
      objc_msgSend(v36, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    uint64_t v53 = *(void **)(a1 + 72);
    if (!v53)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    uint64_t v54 = v53;

    v133 = *(void *)(a1 + 40);
    uint64_t v134 = v116;
    uint64_t v55 = v50;
    *(void *)&uint64_t v135 = v50;
    *((void *)&v135 + 1) = v49;
    v136 = 0;
    uint64_t v137 = v54;
    swift_retain();
    if (!v105)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v50, v49, 0);

      id v56 = (uint64_t)v117;
LABEL_53:
      swift_release();
      swift_release();
      outlined destroy of PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(v56);
      return;
    }
    swift_retain();
LABEL_44:
    type metadata accessor for ViewGraph();
    uint64_t v74 = MEMORY[0x18C114EE0]() + 200;
    swift_beginAccess();
    uint64_t v75 = MEMORY[0x18C119DF0](v74);
    uint64_t v76 = swift_release();
    uint64_t v113 = v49;
    uint64_t v111 = v55;
    if (v75)
    {
      swift_getObjectType();
      uint64_t v76 = swift_conformsToProtocol2();
      if (v76) {
        id v77 = v75;
      }
      else {
        id v77 = 0;
      }
      if (!v77) {
        uint64_t v76 = swift_unknownObjectRelease();
      }
    }
    uint64_t v112 = v104;
    id v79 = *(void *)(a1 + 40);
    id v78 = *(void *)(a1 + 48);
    id v80 = *(void *)(a1 + 56);
    char v82 = *(void **)(a1 + 72);
    long long v81 = *(void **)(a1 + 80);
    uint64_t v83 = *(_DWORD *)(a1 + 88);
    long long v122 = *(_DWORD *)(a1 + 32);
    Class v84 = *(void *)(a1 + 96);
    uint64_t v85 = *(_OWORD *)(a1 + 16);
    uint64_t v120 = *(_OWORD *)a1;
    uint64_t v121 = v85;
    char v123 = v79;
    id v124 = v78;
    uint64_t v125 = v80;
    uint64_t v126 = *(void *)(a1 + 64);
    uint64_t v127 = v82;
    uint64_t v128 = v81;
    uint64_t v129 = v83;
    v130 = v84;
    MEMORY[0x1F4188790](v76);
    long long v107 = v86;
    *(void *)&v104[-48] = v86;
    *(void *)&v104[-40] = v87;
    *(void *)&v104[-32] = a1;
    *(void *)&v104[-24] = &v133;
    *(void *)&v104[-16] = v117;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>();
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
    swift_retain();
    swift_retain();
    uint64_t v88 = v82;
    uint64_t v89 = v81;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    uint64_t v90 = v127;
    uint64_t v91 = v128;
    swift_release();
    swift_release();
    swift_release();

    uint64_t v92 = *(void **)(a1 + 80);
    if (v92)
    {
      uint64_t v93 = *(void **)(a1 + 72);
      id v56 = (uint64_t)v117;
      id v94 = v109;
      outlined init with copy of PlatformViewRepresentableAdaptor<UIKitRichTextEditor>((uint64_t)v117, (uint64_t)v109);
      uint64_t v95 = v110;
      if (v93)
      {
        int v96 = (uint64_t)v108;
        *(void *)&v108[*(int *)(v110 + 40)] = v93;
        outlined init with take of PlatformViewRepresentableAdaptor<UIKitRichTextEditor>((uint64_t)v94, v96);
        *(void *)(v96 + *(int *)(v95 + 36)) = v92;
        uint64_t v97 = v92;
        swift_retain();
        swift_retain();
        uint64_t v98 = v93;
        uint64_t v99 = v97;
        swift_retain();
        uint64_t v100 = v98;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined destroy of ScrollableCollection?(v96, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
        uint64_t v101 = v135;
        id v102 = v136;
        int v103 = v137;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v101, *((uint64_t *)&v101 + 1), v102);

        goto LABEL_53;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_56;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  char v39 = *(void **)(a1 + 72);
  if (v39)
  {
    int v40 = v120;
    v133 = *(void *)(a1 + 40);
    uint64_t v134 = v116;
    uint64_t v135 = v120;
    v136 = 0;
    uint64_t v137 = v39;
    type metadata accessor for ViewGraph();
    uint64_t v113 = *((void *)&v40 + 1);
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    swift_retain();
    uint64_t v41 = MEMORY[0x18C114EE0](v39) + 200;
    swift_beginAccess();
    long long v42 = MEMORY[0x18C119DF0](v41);
    uint64_t v43 = swift_release();
    if (v42)
    {
      swift_getObjectType();
      uint64_t v43 = swift_conformsToProtocol2();
      uint64_t v44 = v40;
      if (v43) {
        id v45 = v42;
      }
      else {
        id v45 = 0;
      }
      if (v45) {
        goto LABEL_43;
      }
      uint64_t v43 = swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v44 = v40;
    }
    id v45 = 0;
LABEL_43:
    long long v107 = v45;
    uint64_t v112 = v104;
    uint64_t v57 = *(_DWORD *)(a1 + 32);
    uint64_t v59 = *(void *)(a1 + 40);
    uint64_t v58 = *(void *)(a1 + 48);
    uint64_t v60 = *(void *)(a1 + 56);
    int v61 = *(void **)(a1 + 72);
    unint64_t v106 = *(id *)(a1 + 80);
    uint64_t v62 = *(_DWORD *)(a1 + 88);
    long long v122 = v57;
    uint64_t v63 = *(void *)(a1 + 96);
    uint64_t v64 = *(_OWORD *)(a1 + 16);
    uint64_t v120 = *(_OWORD *)a1;
    uint64_t v121 = v64;
    char v123 = v59;
    id v124 = v58;
    uint64_t v125 = v60;
    uint64_t v126 = *(void *)(a1 + 64);
    uint64_t v127 = v61;
    uint64_t v128 = v106;
    uint64_t v129 = v62;
    v130 = v63;
    MEMORY[0x1F4188790](v43);
    *(void *)&v104[-64] = &v133;
    *(void *)&v104[-56] = v117;
    *(void *)&v104[-48] = v65;
    *(void *)&v104[-40] = v66;
    *(void *)&v104[-32] = v44;
    int v67 = v113;
    *(void *)&v104[-24] = v113;
    *(_DWORD *)&v104[-16] = v111;
    *(void *)&v104[-8] = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>();
    uint64_t v111 = v68;
    type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
    uint64_t v55 = v44;
    swift_retain();
    swift_retain();
    uint64_t v69 = v61;
    uint64_t v70 = v106;
    swift_retain();
    uint64_t v49 = v67;
    StatefulRule.withObservation<A>(do:)();
    swift_release();
    swift_release();
    id v71 = v127;
    id v72 = v128;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    char v73 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = v119;

    goto LABEL_44;
  }
LABEL_57:
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t Value;
  char v12;
  char v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  char v18;
  char v19;
  BOOL v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  int v25;
  void *v26;
  void *v27;
  int v28;
  void *v29;
  void *v30;
  char v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  int v45;
  uint64_t v46;
  long long v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  id v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  char *v61;
  void *v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  int v74;
  uint64_t v75;
  long long v76;
  void *v77;
  uint64_t v78;
  id v79;
  id v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  id v90;
  id v91;
  id v92;
  long long v93;
  char v94;
  void *v95;
  void v96[2];
  id v97;
  uint64_t v98;
  void *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  long long v110;
  long long v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  id v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  long long v125;
  char v126;
  id v127;
  uint64_t v128;

  uint64_t v128 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>();
  char v3 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v96 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  MEMORY[0x1F4188790](v6);
  uint64_t v101 = (uint64_t)v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)v96 - v9;
  uint64_t Value = AGGraphGetValue();
  uint64_t v13 = v12;
  outlined init with copy of PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(Value, (uint64_t)v10);
  char v14 = (unsigned int *)AGGraphGetValue();
  int v103 = v15;
  uint64_t v16 = *v14;
  int v17 = (uint64_t *)AGGraphGetValue();
  int v19 = v18;
  long long v108 = *v17;
  long long v107 = v17[1];
  unsigned int v20 = *(_DWORD *)(a1 + 28) == *MEMORY[0x1E4F4E7A0];
  uint64_t v100 = v5;
  if (v20
    || (uint64_t v21 = AGGraphGetValue(),
        long long v23 = v22,
        long long v24 = *(void *)v21,
        LODWORD(v98) = *(unsigned __int8 *)(v21 + 8),
        int v25 = *(_DWORD *)(v21 + 12),
        swift_retain(),
        uint64_t v104 = v24,
        v24 == 1))
  {
    LODWORD(v99) = 0;
    LODWORD(v97) = 0;
    LODWORD(v98) = 0;
    uint64_t v104 = 0;
  }
  else
  {
    LODWORD(v97) = v25;
    LODWORD(v99) = v23 & 1;
  }
  if (v16 >> 1 == *(_DWORD *)(a1 + 88))
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    uint64_t v110 = *(_OWORD *)(a1 + 56);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    uint64_t v26 = *(void **)(a1 + 72);
    if (v26)
    {
      uint64_t v27 = *(void **)(a1 + 80);
      if (v27)
      {

        *(void *)(a1 + 72) = 0;
        *(void *)(a1 + 80) = 0;
      }
    }
    *(_DWORD *)(a1 + 88) = v16 >> 1;
  }
  uint64_t v110 = *(_OWORD *)(a1 + 56);
  LODWORD(v123) = v16;
  if (_DynamicPropertyBuffer.update(container:phase:)())
  {
    uint64_t v28 = 1;
  }
  else
  {
    uint64_t v28 = 1;
    if (AGGraphGetOutputValue() && (v13 & 1) == 0 && (v103 & 1) == 0) {
      uint64_t v28 = AGGraphCurrentAttributeWasModified();
    }
  }
  AGGraphClearUpdate();
  uint64_t v105 = specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(a1, (uint64_t)v10);
  swift_retain();
  AGGraphSetUpdate();
  uint64_t v121 = v108;
  long long v122 = v107;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  char v29 = *(void **)(a1 + 80);
  unint64_t v106 = v10;
  id v102 = v3;
  if (v29)
  {
    if (v19)
    {
      swift_retain();
      uint64_t v30 = v29;
      swift_retain();
      uint64_t v31 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if (v31)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        uint64_t v28 = 1;
      }
    }
    else
    {
      id v56 = v29;
    }
    if (specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>.UnarySubtreeSequence, (uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>.UnarySubtreeSequence))
    {
      *(void *)&uint64_t v110 = 0;
      WORD4(v110) = 1;
      type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v122)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    uint64_t v57 = v103 | v19;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    uint64_t v58 = *((void *)&v110 + 1);
    int v35 = v110;
    swift_retain();
    swift_retain();
    AGGraphClearUpdate();
    if (v57)
    {
      uint64_t v59 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v59, 0, v16, (uint64_t)closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)partial apply, (uint64_t)&unk_1ED478EA0, (uint64_t)closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)partial apply, (void (*)(void, uint64_t, uint64_t, uint64_t))specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:));
      swift_release();
    }
    uint64_t v60 = v28;
    if (v99)
    {
      int v61 = (char *)v29 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v29) + 0x90);
      *(void *)int v61 = v104;
      v61[8] = v98;
      *((_DWORD *)v61 + 3) = v97;
      swift_retain();
      swift_release();
      specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)(0);
    }
    AGGraphSetUpdate();
    uint64_t v62 = *(void **)(a1 + 72);
    uint64_t v63 = v105;
    if (!v62)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    uint64_t v64 = v62;

    char v123 = *(void *)(a1 + 40);
    id v124 = v63;
    *(void *)&uint64_t v125 = v35;
    *((void *)&v125 + 1) = v58;
    uint64_t v126 = 0;
    uint64_t v127 = v64;
    swift_retain();
    if (!v60)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v35, v58, 0);

      uint64_t v85 = (uint64_t)v106;
      goto LABEL_52;
    }
    int v103 = v58;
    swift_retain();
LABEL_42:
    type metadata accessor for ViewGraph();
    int v65 = MEMORY[0x18C114EE0]() + 200;
    swift_beginAccess();
    uint64_t v66 = MEMORY[0x18C119DF0](v65);
    int v67 = swift_release();
    uint64_t v98 = v35;
    if (v66)
    {
      swift_getObjectType();
      int v67 = swift_conformsToProtocol2();
      if (v67) {
        long long v68 = v66;
      }
      else {
        long long v68 = 0;
      }
      if (!v68) {
        int v67 = swift_unknownObjectRelease();
      }
    }
    uint64_t v99 = v96;
    uint64_t v70 = *(void *)(a1 + 40);
    uint64_t v69 = *(void *)(a1 + 48);
    id v71 = *(void *)(a1 + 56);
    char v73 = *(void **)(a1 + 72);
    id v72 = *(void **)(a1 + 80);
    uint64_t v74 = *(_DWORD *)(a1 + 88);
    uint64_t v112 = *(_DWORD *)(a1 + 32);
    uint64_t v75 = *(void *)(a1 + 96);
    uint64_t v76 = *(_OWORD *)(a1 + 16);
    uint64_t v110 = *(_OWORD *)a1;
    uint64_t v111 = v76;
    uint64_t v113 = v70;
    uint64_t v114 = v69;
    uint64_t v115 = v71;
    int v116 = *(void *)(a1 + 64);
    uint64_t v117 = v73;
    uint64_t v118 = v72;
    uint64_t v119 = v74;
    uint64_t v120 = v75;
    MEMORY[0x1F4188790](v67);
    uint64_t v97 = v77;
    v96[-6] = v77;
    v96[-5] = v78;
    v96[-4] = a1;
    v96[-3] = &v123;
    v96[-2] = v106;
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>();
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
    swift_retain();
    swift_retain();
    id v79 = v73;
    id v80 = v72;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    long long v81 = v117;
    char v82 = v118;
    swift_release();
    swift_release();
    swift_release();

    uint64_t v83 = *(void **)(a1 + 80);
    if (v83)
    {
      Class v84 = *(void **)(a1 + 72);
      uint64_t v85 = (uint64_t)v106;
      Class v86 = v101;
      outlined init with copy of PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>((uint64_t)v106, v101);
      id v87 = v102;
      if (v84)
      {
        uint64_t v88 = (uint64_t)v100;
        *(void *)&v100[*(int *)(v102 + 40)] = v84;
        outlined init with take of PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(v86, v88);
        *(void *)(v88 + *(int *)(v87 + 36)) = v83;
        uint64_t v89 = v83;
        swift_retain();
        swift_retain();
        uint64_t v90 = v84;
        uint64_t v91 = v89;
        swift_retain();
        uint64_t v92 = v90;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined destroy of ScrollableCollection?(v88, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
        uint64_t v93 = v125;
        id v94 = v126;
        uint64_t v95 = v127;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v93, *((uint64_t *)&v93 + 1), v94);

LABEL_52:
        swift_release();
        swift_release();
        outlined destroy of PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(v85);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_55;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  uint64_t v32 = *(void **)(a1 + 72);
  if (v32)
  {
    uint64_t v33 = *((void *)&v110 + 1);
    uint64_t v34 = v110;
    char v123 = *(void *)(a1 + 40);
    id v124 = v105;
    uint64_t v125 = v110;
    uint64_t v126 = 0;
    uint64_t v127 = v32;
    type metadata accessor for ViewGraph();
    int v103 = v33;
    int v35 = v34;
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    swift_retain();
    uint64_t v36 = MEMORY[0x18C114EE0](v32) + 200;
    swift_beginAccess();
    uint64_t v37 = MEMORY[0x18C119DF0](v36);
    uint64_t v38 = swift_release();
    if (v37)
    {
      swift_getObjectType();
      uint64_t v38 = swift_conformsToProtocol2();
      if (v38) {
        char v39 = v37;
      }
      else {
        char v39 = 0;
      }
      if (v39) {
        goto LABEL_29;
      }
      uint64_t v38 = swift_unknownObjectRelease();
    }
    char v39 = 0;
LABEL_29:
    uint64_t v98 = v39;
    uint64_t v99 = v96;
    int v40 = *(_DWORD *)(a1 + 32);
    long long v42 = *(void *)(a1 + 40);
    uint64_t v41 = *(void *)(a1 + 48);
    uint64_t v43 = *(void *)(a1 + 56);
    uint64_t v44 = *(void **)(a1 + 72);
    uint64_t v97 = *(id *)(a1 + 80);
    id v45 = *(_DWORD *)(a1 + 88);
    uint64_t v112 = v40;
    id v46 = *(void *)(a1 + 96);
    uint64_t v47 = *(_OWORD *)(a1 + 16);
    uint64_t v110 = *(_OWORD *)a1;
    uint64_t v111 = v47;
    uint64_t v113 = v42;
    uint64_t v114 = v41;
    uint64_t v115 = v43;
    int v116 = *(void *)(a1 + 64);
    uint64_t v117 = v44;
    uint64_t v118 = v97;
    uint64_t v119 = v45;
    uint64_t v120 = v46;
    MEMORY[0x1F4188790](v38);
    v96[-8] = &v123;
    v96[-7] = v106;
    v96[-6] = v48;
    v96[-5] = v49;
    v96[-4] = v35;
    v96[-3] = v103;
    LODWORD(v96[-2]) = v16;
    v96[-1] = a1;
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>();
    v96[1] = v50;
    type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
    swift_retain();
    swift_retain();
    int v51 = v44;
    char v52 = v97;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    swift_release();
    swift_release();
    uint64_t v53 = v117;
    uint64_t v54 = v118;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    uint64_t v55 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = v109;

    goto LABEL_42;
  }
LABEL_56:
  __break(1u);
}

{
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int *v8;
  void *v9;
  unsigned int v10;
  uint64_t *v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  char v18;
  char v19;
  void *v20;
  void *v21;
  char v22;
  int v23;
  uint64_t v24;
  void *v25;
  void *v26;
  char v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  int v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void *v41;
  id v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  int v49;
  uint64_t v50;
  long long v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  int v70;
  uint64_t v71;
  long long v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  id v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  id v81;
  id v82;
  id v83;
  id v84;
  long long v85;
  char v86;
  void *v87;
  void v88[8];
  int v89;
  uint64_t v90;
  _DWORD v91[4];
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  void *v106;
  void *v107;
  long long v108;
  long long v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  id v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  long long v123;
  char v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  uint64_t v131;

  uint64_t v131 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSegmentedControl>, (uint64_t)&type metadata for SystemSegmentedControl, (uint64_t)&protocol witness table for SystemSegmentedControl, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  uint64_t Value = AGGraphGetValue();
  uint64_t v98 = v3;
  char v4 = *(void *)(Value + 8);
  uint64_t v6 = *(void *)(Value + 16);
  uint64_t v5 = *(void *)(Value + 24);
  unsigned int v7 = *(unsigned char *)(Value + 32);
  uint64_t v126 = *(void *)Value;
  uint64_t v127 = v4;
  uint64_t v128 = v6;
  uint64_t v129 = v5;
  v130 = v7;
  long long v8 = (unsigned int *)AGGraphGetValue();
  uint64_t v97 = v9;
  uint64_t v10 = *v8;
  uint64_t v11 = (uint64_t *)AGGraphGetValue();
  uint64_t v13 = v12;
  char v14 = *v11;
  uint64_t v100 = v11[1];
  if (*(_DWORD *)(a1 + 28) == *MEMORY[0x1E4F4E7A0])
  {
    LODWORD(v94) = 0;
    LODWORD(v93) = 0;
    LODWORD(v92) = 0;
    char v15 = 0;
  }
  else
  {
    uint64_t v16 = v10;
    int v17 = AGGraphGetValue();
    int v19 = v18;
    char v15 = *(void *)v17;
    LODWORD(v92) = *(unsigned __int8 *)(v17 + 8);
    LODWORD(v93) = *(_DWORD *)(v17 + 12);
    swift_retain();
    if (v15 == 1)
    {
      LODWORD(v94) = 0;
      LODWORD(v93) = 0;
      LODWORD(v92) = 0;
      char v15 = 0;
    }
    else
    {
      LODWORD(v94) = v19 & 1;
    }
    uint64_t v10 = v16;
  }
  if (v10 >> 1 == *(_DWORD *)(a1 + 88))
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v108 = *(_OWORD *)(a1 + 56);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    unsigned int v20 = *(void **)(a1 + 72);
    if (v20)
    {
      uint64_t v21 = *(void **)(a1 + 80);
      if (v21)
      {

        *(void *)(a1 + 72) = 0;
        *(void *)(a1 + 80) = 0;
      }
    }
    *(_DWORD *)(a1 + 88) = v10 >> 1;
  }
  long long v108 = *(_OWORD *)(a1 + 56);
  LODWORD(v101) = v10;
  uint64_t v22 = v13;
  if (_DynamicPropertyBuffer.update(container:phase:)())
  {
    long long v23 = 1;
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>();
    long long v23 = 1;
    if (AGGraphGetOutputValue() && (v98 & 1) == 0 && (v97 & 1) == 0) {
      long long v23 = AGGraphCurrentAttributeWasModified();
    }
  }
  AGGraphClearUpdate();
  long long v24 = specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(a1, &v126);
  swift_retain();
  AGGraphSetUpdate();
  uint64_t v119 = v14;
  uint64_t v120 = v100;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  int v25 = *(void **)(a1 + 80);
  int v96 = v14;
  uint64_t v98 = v24;
  uint64_t v99 = v15;
  LODWORD(v95) = v10;
  if (v25)
  {
    if (v22)
    {
      swift_retain();
      uint64_t v26 = v25;
      swift_retain();
      uint64_t v27 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if (v27)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        long long v23 = 1;
      }
    }
    else
    {
      int v35 = v25;
    }
    if (specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>.UnarySubtreeSequence, (uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>.UnarySubtreeSequence))
    {
      *(void *)&long long v108 = 0;
      WORD4(v108) = 1;
      type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v120)
      {
        v91[3] = v23;
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    uint64_t v36 = v23;
    uint64_t v37 = v97 | v22;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    uint64_t v97 = (id)*((void *)&v108 + 1);
    swift_retain();
    uint64_t v38 = v108;
    swift_retain();
    AGGraphClearUpdate();
    if (v37)
    {
      char v39 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v39, 0, v95);
      swift_release();
    }
    if (v94)
    {
      int v40 = (char *)v25 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v25) + 0x90);
      *(void *)int v40 = v99;
      v40[8] = v92;
      *((_DWORD *)v40 + 3) = v93;
      swift_retain();
      swift_release();
      objc_msgSend(v25, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    uint64_t v41 = *(void **)(a1 + 72);
    if (!v41)
    {
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    long long v42 = v41;

    uint64_t v121 = *(void *)(a1 + 40);
    long long v122 = v98;
    uint64_t v43 = v38;
    *(void *)&char v123 = v38;
    *((void *)&v123 + 1) = v97;
    id v124 = 0;
    uint64_t v125 = v42;
    swift_retain();
    if (!v36)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v38, (uint64_t)v97, 0);

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
LABEL_55:
      swift_release();
      return;
    }
    swift_retain();
    uint64_t v95 = 0;
LABEL_46:
    type metadata accessor for ViewGraph();
    int v61 = MEMORY[0x18C114EE0]() + 200;
    swift_beginAccess();
    uint64_t v62 = MEMORY[0x18C119DF0](v61);
    uint64_t v63 = swift_release();
    uint64_t v93 = v43;
    if (v62)
    {
      swift_getObjectType();
      uint64_t v63 = swift_conformsToProtocol2();
      if (v63) {
        uint64_t v64 = v62;
      }
      else {
        uint64_t v64 = 0;
      }
      if (!v64) {
        uint64_t v63 = swift_unknownObjectRelease();
      }
    }
    id v94 = v88;
    uint64_t v66 = *(void *)(a1 + 40);
    int v65 = *(void *)(a1 + 48);
    int v67 = *(void *)(a1 + 56);
    uint64_t v69 = *(void **)(a1 + 72);
    long long v68 = *(void **)(a1 + 80);
    uint64_t v70 = *(_DWORD *)(a1 + 88);
    uint64_t v110 = *(_DWORD *)(a1 + 32);
    id v71 = *(void *)(a1 + 96);
    id v72 = *(_OWORD *)(a1 + 16);
    long long v108 = *(_OWORD *)a1;
    int v109 = v72;
    uint64_t v111 = v66;
    uint64_t v112 = v65;
    uint64_t v113 = v67;
    uint64_t v114 = *(void *)(a1 + 64);
    uint64_t v115 = v69;
    int v116 = v68;
    uint64_t v117 = v70;
    uint64_t v118 = v71;
    MEMORY[0x1F4188790](v63);
    uint64_t v92 = v73;
    v88[-6] = v73;
    v88[-5] = v74;
    v88[-4] = a1;
    v88[-3] = &v121;
    v88[-2] = &v126;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>();
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSegmentedControl>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>);
    swift_retain();
    swift_retain();
    uint64_t v75 = v69;
    uint64_t v76 = v68;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    id v77 = v115;
    id v78 = v116;
    swift_release();
    swift_release();
    swift_release();

    id v79 = *(void **)(a1 + 80);
    if (v79)
    {
      id v80 = *(void **)(a1 + 72);
      if (v80)
      {
        uint64_t v101 = v126;
        id v102 = v127;
        uint64_t v95 = v127;
        int v103 = v128;
        uint64_t v104 = v129;
        uint64_t v105 = v130;
        unint64_t v106 = v79;
        long long v107 = v80;
        type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>();
        swift_retain();
        swift_retain();
        long long v81 = v80;
        char v82 = v79;
        swift_retain();
        swift_retain();
        uint64_t v83 = v81;
        Class v84 = v82;
        swift_retain();
        swift_bridgeObjectRetain();
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v85 = v123;
        Class v86 = v124;
        id v87 = v125;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v85, *((uint64_t *)&v85 + 1), v86);

        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_55;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_58;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  uint64_t v28 = *(void **)(a1 + 72);
  if (v28)
  {
    char v29 = v108;
    uint64_t v121 = *(void *)(a1 + 40);
    long long v122 = v24;
    char v123 = v108;
    id v124 = 0;
    uint64_t v125 = v28;
    type metadata accessor for ViewGraph();
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    swift_retain();
    uint64_t v30 = MEMORY[0x18C114EE0](v28) + 200;
    swift_beginAccess();
    uint64_t v31 = MEMORY[0x18C119DF0](v30);
    uint64_t v32 = swift_release();
    if (v31)
    {
      swift_getObjectType();
      uint64_t v32 = swift_conformsToProtocol2();
      uint64_t v33 = (void *)*((void *)&v108 + 1);
      if (v32) {
        uint64_t v34 = v31;
      }
      else {
        uint64_t v34 = 0;
      }
      if (v34) {
        goto LABEL_45;
      }
      uint64_t v32 = swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v33 = (void *)*((void *)&v108 + 1);
    }
    uint64_t v34 = 0;
LABEL_45:
    uint64_t v93 = v34;
    id v94 = v91;
    uint64_t v44 = *(_DWORD *)(a1 + 32);
    id v46 = *(void *)(a1 + 40);
    id v45 = *(void *)(a1 + 48);
    uint64_t v47 = *(void *)(a1 + 56);
    uint64_t v48 = *(void **)(a1 + 72);
    uint64_t v97 = *(id *)(a1 + 80);
    uint64_t v49 = *(_DWORD *)(a1 + 88);
    uint64_t v110 = v44;
    uint64_t v50 = *(void *)(a1 + 96);
    int v51 = *(_OWORD *)(a1 + 16);
    long long v108 = *(_OWORD *)a1;
    int v109 = v51;
    uint64_t v111 = v46;
    uint64_t v112 = v45;
    uint64_t v113 = v47;
    uint64_t v114 = *(void *)(a1 + 64);
    uint64_t v115 = v48;
    int v116 = v97;
    uint64_t v117 = v49;
    uint64_t v118 = v50;
    MEMORY[0x1F4188790](v32);
    v88[2] = &v121;
    v88[3] = &v126;
    v88[4] = v53;
    v88[5] = v52;
    v88[6] = v29;
    v88[7] = v33;
    uint64_t v89 = v95;
    uint64_t v90 = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>();
    uint64_t v95 = v54;
    type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>, MEMORY[0x1E4FBB718]);
    uint64_t v92 = v55;
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSegmentedControl>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>);
    uint64_t v43 = v29;
    swift_retain();
    swift_retain();
    id v56 = v48;
    uint64_t v57 = v97;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    uint64_t v95 = 0;
    uint64_t v97 = v33;
    swift_release();
    swift_release();
    uint64_t v58 = v115;
    uint64_t v59 = v116;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    uint64_t v60 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = v101;

    goto LABEL_46;
  }
LABEL_59:
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned char *v10;
  uint64_t Value;
  char v12;
  char v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  unsigned char *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  void *v31;
  void *v32;
  char v33;
  char v34;
  int v35;
  void *v36;
  void *v37;
  char v38;
  void *v39;
  long long v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  int v62;
  uint64_t v63;
  long long v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  id v70;
  void *v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  int v83;
  uint64_t v84;
  long long v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  id v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  unsigned char *v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  id v98;
  id v99;
  id v100;
  long long v101;
  char v102;
  void *v103;
  unsigned char v104[4];
  int v105;
  id v106;
  uint64_t v107;
  unsigned char *v108;
  unsigned char *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned char *v117;
  uint64_t v118;
  uint64_t v119;
  long long v120;
  long long v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  id v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  long long v135;
  char v136;
  id v137;
  uint64_t v138;

  v138 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>();
  char v3 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = &v104[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v6);
  int v109 = &v104[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = &v104[-v9];
  uint64_t Value = AGGraphGetValue();
  uint64_t v13 = v12;
  outlined init with copy of PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(Value, (uint64_t)v10);
  char v14 = (unsigned int *)AGGraphGetValue();
  uint64_t v113 = v15;
  uint64_t v16 = *v14;
  int v17 = (uint64_t *)AGGraphGetValue();
  uint64_t v112 = v18;
  int v19 = *v17;
  uint64_t v118 = v17[1];
  unsigned int v20 = *(_DWORD *)(a1 + 28) == *MEMORY[0x1E4F4E7A0];
  long long v108 = v5;
  if (v20
    || (uint64_t v21 = AGGraphGetValue(),
        long long v23 = v22,
        long long v24 = *(void *)v21,
        LODWORD(v107) = *(unsigned __int8 *)(v21 + 8),
        int v25 = *(_DWORD *)(v21 + 12),
        swift_retain(),
        uint64_t v115 = v24,
        v24 == 1))
  {
    uint64_t v26 = 0;
    LODWORD(v106) = 0;
    LODWORD(v107) = 0;
    uint64_t v115 = 0;
  }
  else
  {
    LODWORD(v106) = v25;
    uint64_t v26 = v23 & 1;
  }
  uint64_t v27 = v16 >> 1;
  if (v16 >> 1 == *(_DWORD *)(a1 + 88))
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    uint64_t v28 = v3;
    char v29 = v13;
    uint64_t v30 = v16;
    uint64_t v120 = *(_OWORD *)(a1 + 56);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    uint64_t v31 = *(void **)(a1 + 72);
    if (v31)
    {
      uint64_t v32 = *(void **)(a1 + 80);
      if (v32)
      {

        *(void *)(a1 + 72) = 0;
        *(void *)(a1 + 80) = 0;
      }
    }
    *(_DWORD *)(a1 + 88) = v27;
    uint64_t v16 = v30;
    uint64_t v13 = v29;
    char v3 = v28;
  }
  uint64_t v120 = *(_OWORD *)(a1 + 56);
  LODWORD(v133) = v16;
  uint64_t v33 = _DynamicPropertyBuffer.update(container:phase:)();
  uint64_t v34 = (char)v112;
  LODWORD(v111) = v16;
  if (v33)
  {
    int v35 = 1;
  }
  else
  {
    int v35 = 1;
    if (AGGraphGetOutputValue() && (v13 & 1) == 0 && (v113 & 1) == 0) {
      int v35 = AGGraphCurrentAttributeWasModified();
    }
  }
  AGGraphClearUpdate();
  int v116 = specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(a1, (uint64_t)v10);
  swift_retain();
  AGGraphSetUpdate();
  uint64_t v131 = v19;
  id v132 = v118;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  uint64_t v36 = *(void **)(a1 + 80);
  uint64_t v114 = v19;
  uint64_t v117 = v10;
  uint64_t v110 = v3;
  if (v36)
  {
    if (v34)
    {
      swift_retain();
      uint64_t v37 = v36;
      swift_retain();
      uint64_t v38 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if (v38)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        int v35 = 1;
      }
    }
    else
    {
      id v46 = v36;
    }
    if (specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>.UnarySubtreeSequence, (uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>.UnarySubtreeSequence))
    {
      *(void *)&uint64_t v120 = 0;
      WORD4(v120) = 1;
      type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v132)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    uint64_t v105 = v35;
    uint64_t v47 = v113 | v34;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    uint64_t v49 = *((void *)&v120 + 1);
    uint64_t v48 = v120;
    swift_retain();
    uint64_t v50 = v48;
    swift_retain();
    AGGraphClearUpdate();
    if (v47)
    {
      int v51 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v51, 0, v111);
      swift_release();
    }
    if (v26)
    {
      char v52 = (char *)v36 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v36) + 0x90);
      *(void *)char v52 = v115;
      v52[8] = v107;
      *((_DWORD *)v52 + 3) = v106;
      swift_retain();
      swift_release();
      objc_msgSend(v36, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    uint64_t v53 = *(void **)(a1 + 72);
    if (!v53)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    uint64_t v54 = v53;

    v133 = *(void *)(a1 + 40);
    uint64_t v134 = v116;
    uint64_t v55 = v50;
    *(void *)&uint64_t v135 = v50;
    *((void *)&v135 + 1) = v49;
    v136 = 0;
    uint64_t v137 = v54;
    swift_retain();
    if (!v105)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v50, v49, 0);

      id v56 = (uint64_t)v117;
LABEL_53:
      swift_release();
      swift_release();
      outlined destroy of PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(v56);
      return;
    }
    swift_retain();
LABEL_44:
    type metadata accessor for ViewGraph();
    uint64_t v74 = MEMORY[0x18C114EE0]() + 200;
    swift_beginAccess();
    uint64_t v75 = MEMORY[0x18C119DF0](v74);
    uint64_t v76 = swift_release();
    uint64_t v113 = v49;
    uint64_t v111 = v55;
    if (v75)
    {
      swift_getObjectType();
      uint64_t v76 = swift_conformsToProtocol2();
      if (v76) {
        id v77 = v75;
      }
      else {
        id v77 = 0;
      }
      if (!v77) {
        uint64_t v76 = swift_unknownObjectRelease();
      }
    }
    uint64_t v112 = v104;
    id v79 = *(void *)(a1 + 40);
    id v78 = *(void *)(a1 + 48);
    id v80 = *(void *)(a1 + 56);
    char v82 = *(void **)(a1 + 72);
    long long v81 = *(void **)(a1 + 80);
    uint64_t v83 = *(_DWORD *)(a1 + 88);
    long long v122 = *(_DWORD *)(a1 + 32);
    Class v84 = *(void *)(a1 + 96);
    uint64_t v85 = *(_OWORD *)(a1 + 16);
    uint64_t v120 = *(_OWORD *)a1;
    uint64_t v121 = v85;
    char v123 = v79;
    id v124 = v78;
    uint64_t v125 = v80;
    uint64_t v126 = *(void *)(a1 + 64);
    uint64_t v127 = v82;
    uint64_t v128 = v81;
    uint64_t v129 = v83;
    v130 = v84;
    MEMORY[0x1F4188790](v76);
    long long v107 = v86;
    *(void *)&v104[-48] = v86;
    *(void *)&v104[-40] = v87;
    *(void *)&v104[-32] = a1;
    *(void *)&v104[-24] = &v133;
    *(void *)&v104[-16] = v117;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>();
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
    swift_retain();
    swift_retain();
    uint64_t v88 = v82;
    uint64_t v89 = v81;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    uint64_t v90 = v127;
    uint64_t v91 = v128;
    swift_release();
    swift_release();
    swift_release();

    uint64_t v92 = *(void **)(a1 + 80);
    if (v92)
    {
      uint64_t v93 = *(void **)(a1 + 72);
      id v56 = (uint64_t)v117;
      id v94 = v109;
      outlined init with copy of PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>((uint64_t)v117, (uint64_t)v109);
      uint64_t v95 = v110;
      if (v93)
      {
        int v96 = (uint64_t)v108;
        *(void *)&v108[*(int *)(v110 + 40)] = v93;
        outlined init with take of PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>((uint64_t)v94, v96);
        *(void *)(v96 + *(int *)(v95 + 36)) = v92;
        uint64_t v97 = v92;
        swift_retain();
        swift_retain();
        uint64_t v98 = v93;
        uint64_t v99 = v97;
        swift_retain();
        uint64_t v100 = v98;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined destroy of ScrollableCollection?(v96, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
        uint64_t v101 = v135;
        id v102 = v136;
        int v103 = v137;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v101, *((uint64_t *)&v101 + 1), v102);

        goto LABEL_53;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_56;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  char v39 = *(void **)(a1 + 72);
  if (v39)
  {
    int v40 = v120;
    v133 = *(void *)(a1 + 40);
    uint64_t v134 = v116;
    uint64_t v135 = v120;
    v136 = 0;
    uint64_t v137 = v39;
    type metadata accessor for ViewGraph();
    uint64_t v113 = *((void *)&v40 + 1);
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    swift_retain();
    uint64_t v41 = MEMORY[0x18C114EE0](v39) + 200;
    swift_beginAccess();
    long long v42 = MEMORY[0x18C119DF0](v41);
    uint64_t v43 = swift_release();
    if (v42)
    {
      swift_getObjectType();
      uint64_t v43 = swift_conformsToProtocol2();
      uint64_t v44 = v40;
      if (v43) {
        id v45 = v42;
      }
      else {
        id v45 = 0;
      }
      if (v45) {
        goto LABEL_43;
      }
      uint64_t v43 = swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v44 = v40;
    }
    id v45 = 0;
LABEL_43:
    long long v107 = v45;
    uint64_t v112 = v104;
    uint64_t v57 = *(_DWORD *)(a1 + 32);
    uint64_t v59 = *(void *)(a1 + 40);
    uint64_t v58 = *(void *)(a1 + 48);
    uint64_t v60 = *(void *)(a1 + 56);
    int v61 = *(void **)(a1 + 72);
    unint64_t v106 = *(id *)(a1 + 80);
    uint64_t v62 = *(_DWORD *)(a1 + 88);
    long long v122 = v57;
    uint64_t v63 = *(void *)(a1 + 96);
    uint64_t v64 = *(_OWORD *)(a1 + 16);
    uint64_t v120 = *(_OWORD *)a1;
    uint64_t v121 = v64;
    char v123 = v59;
    id v124 = v58;
    uint64_t v125 = v60;
    uint64_t v126 = *(void *)(a1 + 64);
    uint64_t v127 = v61;
    uint64_t v128 = v106;
    uint64_t v129 = v62;
    v130 = v63;
    MEMORY[0x1F4188790](v43);
    *(void *)&v104[-64] = &v133;
    *(void *)&v104[-56] = v117;
    *(void *)&v104[-48] = v65;
    *(void *)&v104[-40] = v66;
    *(void *)&v104[-32] = v44;
    int v67 = v113;
    *(void *)&v104[-24] = v113;
    *(_DWORD *)&v104[-16] = v111;
    *(void *)&v104[-8] = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>();
    uint64_t v111 = v68;
    type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
    uint64_t v55 = v44;
    swift_retain();
    swift_retain();
    uint64_t v69 = v61;
    uint64_t v70 = v106;
    swift_retain();
    uint64_t v49 = v67;
    StatefulRule.withObservation<A>(do:)();
    swift_release();
    swift_release();
    id v71 = v127;
    id v72 = v128;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    char v73 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = v119;

    goto LABEL_44;
  }
LABEL_57:
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned char *v10;
  uint64_t Value;
  char v12;
  char v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  unsigned char *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  void *v31;
  void *v32;
  char v33;
  char v34;
  int v35;
  void *v36;
  void *v37;
  char v38;
  void *v39;
  long long v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  int v62;
  uint64_t v63;
  long long v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  id v70;
  void *v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  int v83;
  uint64_t v84;
  long long v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  id v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  unsigned char *v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  id v98;
  id v99;
  id v100;
  long long v101;
  char v102;
  void *v103;
  unsigned char v104[4];
  int v105;
  id v106;
  uint64_t v107;
  unsigned char *v108;
  unsigned char *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned char *v117;
  uint64_t v118;
  uint64_t v119;
  long long v120;
  long long v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  id v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  long long v135;
  char v136;
  id v137;
  uint64_t v138;

  v138 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>();
  char v3 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = &v104[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&protocol witness table for UIKitDatePickerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v6);
  int v109 = &v104[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = &v104[-v9];
  uint64_t Value = AGGraphGetValue();
  uint64_t v13 = v12;
  outlined init with copy of PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>(Value, (uint64_t)v10);
  char v14 = (unsigned int *)AGGraphGetValue();
  uint64_t v113 = v15;
  uint64_t v16 = *v14;
  int v17 = (uint64_t *)AGGraphGetValue();
  uint64_t v112 = v18;
  int v19 = *v17;
  uint64_t v118 = v17[1];
  unsigned int v20 = *(_DWORD *)(a1 + 28) == *MEMORY[0x1E4F4E7A0];
  long long v108 = v5;
  if (v20
    || (uint64_t v21 = AGGraphGetValue(),
        long long v23 = v22,
        long long v24 = *(void *)v21,
        LODWORD(v107) = *(unsigned __int8 *)(v21 + 8),
        int v25 = *(_DWORD *)(v21 + 12),
        swift_retain(),
        uint64_t v115 = v24,
        v24 == 1))
  {
    uint64_t v26 = 0;
    LODWORD(v106) = 0;
    LODWORD(v107) = 0;
    uint64_t v115 = 0;
  }
  else
  {
    LODWORD(v106) = v25;
    uint64_t v26 = v23 & 1;
  }
  uint64_t v27 = v16 >> 1;
  if (v16 >> 1 == *(_DWORD *)(a1 + 88))
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    uint64_t v28 = v3;
    char v29 = v13;
    uint64_t v30 = v16;
    uint64_t v120 = *(_OWORD *)(a1 + 56);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    uint64_t v31 = *(void **)(a1 + 72);
    if (v31)
    {
      uint64_t v32 = *(void **)(a1 + 80);
      if (v32)
      {

        *(void *)(a1 + 72) = 0;
        *(void *)(a1 + 80) = 0;
      }
    }
    *(_DWORD *)(a1 + 88) = v27;
    uint64_t v16 = v30;
    uint64_t v13 = v29;
    char v3 = v28;
  }
  uint64_t v120 = *(_OWORD *)(a1 + 56);
  LODWORD(v133) = v16;
  uint64_t v33 = _DynamicPropertyBuffer.update(container:phase:)();
  uint64_t v34 = (char)v112;
  LODWORD(v111) = v16;
  if (v33)
  {
    int v35 = 1;
  }
  else
  {
    int v35 = 1;
    if (AGGraphGetOutputValue() && (v13 & 1) == 0 && (v113 & 1) == 0) {
      int v35 = AGGraphCurrentAttributeWasModified();
    }
  }
  AGGraphClearUpdate();
  int v116 = specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(a1, (uint64_t)v10);
  swift_retain();
  AGGraphSetUpdate();
  uint64_t v131 = v19;
  id v132 = v118;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  uint64_t v36 = *(void **)(a1 + 80);
  uint64_t v114 = v19;
  uint64_t v117 = v10;
  uint64_t v110 = v3;
  if (v36)
  {
    if (v34)
    {
      swift_retain();
      uint64_t v37 = v36;
      swift_retain();
      uint64_t v38 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if (v38)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        int v35 = 1;
      }
    }
    else
    {
      id v46 = v36;
    }
    if (specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>.UnarySubtreeSequence, (uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>.UnarySubtreeSequence))
    {
      *(void *)&uint64_t v120 = 0;
      WORD4(v120) = 1;
      type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v132)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    uint64_t v105 = v35;
    uint64_t v47 = v113 | v34;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    uint64_t v49 = *((void *)&v120 + 1);
    uint64_t v48 = v120;
    swift_retain();
    uint64_t v50 = v48;
    swift_retain();
    AGGraphClearUpdate();
    if (v47)
    {
      int v51 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v51, 0, v111);
      swift_release();
    }
    if (v26)
    {
      char v52 = (char *)v36 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v36) + 0x90);
      *(void *)char v52 = v115;
      v52[8] = v107;
      *((_DWORD *)v52 + 3) = v106;
      swift_retain();
      swift_release();
      objc_msgSend(v36, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    uint64_t v53 = *(void **)(a1 + 72);
    if (!v53)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    uint64_t v54 = v53;

    v133 = *(void *)(a1 + 40);
    uint64_t v134 = v116;
    uint64_t v55 = v50;
    *(void *)&uint64_t v135 = v50;
    *((void *)&v135 + 1) = v49;
    v136 = 0;
    uint64_t v137 = v54;
    swift_retain();
    if (!v105)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v50, v49, 0);

      id v56 = (uint64_t)v117;
LABEL_53:
      swift_release();
      swift_release();
      outlined destroy of PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>(v56);
      return;
    }
    swift_retain();
LABEL_44:
    type metadata accessor for ViewGraph();
    uint64_t v74 = MEMORY[0x18C114EE0]() + 200;
    swift_beginAccess();
    uint64_t v75 = MEMORY[0x18C119DF0](v74);
    uint64_t v76 = swift_release();
    uint64_t v113 = v49;
    uint64_t v111 = v55;
    if (v75)
    {
      swift_getObjectType();
      uint64_t v76 = swift_conformsToProtocol2();
      if (v76) {
        id v77 = v75;
      }
      else {
        id v77 = 0;
      }
      if (!v77) {
        uint64_t v76 = swift_unknownObjectRelease();
      }
    }
    uint64_t v112 = v104;
    id v79 = *(void *)(a1 + 40);
    id v78 = *(void *)(a1 + 48);
    id v80 = *(void *)(a1 + 56);
    char v82 = *(void **)(a1 + 72);
    long long v81 = *(void **)(a1 + 80);
    uint64_t v83 = *(_DWORD *)(a1 + 88);
    long long v122 = *(_DWORD *)(a1 + 32);
    Class v84 = *(void *)(a1 + 96);
    uint64_t v85 = *(_OWORD *)(a1 + 16);
    uint64_t v120 = *(_OWORD *)a1;
    uint64_t v121 = v85;
    char v123 = v79;
    id v124 = v78;
    uint64_t v125 = v80;
    uint64_t v126 = *(void *)(a1 + 64);
    uint64_t v127 = v82;
    uint64_t v128 = v81;
    uint64_t v129 = v83;
    v130 = v84;
    MEMORY[0x1F4188790](v76);
    long long v107 = v86;
    *(void *)&v104[-48] = v86;
    *(void *)&v104[-40] = v87;
    *(void *)&v104[-32] = a1;
    *(void *)&v104[-24] = &v133;
    *(void *)&v104[-16] = v117;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>();
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
    swift_retain();
    swift_retain();
    uint64_t v88 = v82;
    uint64_t v89 = v81;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    uint64_t v90 = v127;
    uint64_t v91 = v128;
    swift_release();
    swift_release();
    swift_release();

    uint64_t v92 = *(void **)(a1 + 80);
    if (v92)
    {
      uint64_t v93 = *(void **)(a1 + 72);
      id v56 = (uint64_t)v117;
      id v94 = v109;
      outlined init with copy of PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>((uint64_t)v117, (uint64_t)v109);
      uint64_t v95 = v110;
      if (v93)
      {
        int v96 = (uint64_t)v108;
        *(void *)&v108[*(int *)(v110 + 40)] = v93;
        outlined init with take of PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>((uint64_t)v94, v96);
        *(void *)(v96 + *(int *)(v95 + 36)) = v92;
        uint64_t v97 = v92;
        swift_retain();
        swift_retain();
        uint64_t v98 = v93;
        uint64_t v99 = v97;
        swift_retain();
        uint64_t v100 = v98;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined destroy of ScrollableCollection?(v96, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
        uint64_t v101 = v135;
        id v102 = v136;
        int v103 = v137;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v101, *((uint64_t *)&v101 + 1), v102);

        goto LABEL_53;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_56;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  char v39 = *(void **)(a1 + 72);
  if (v39)
  {
    int v40 = v120;
    v133 = *(void *)(a1 + 40);
    uint64_t v134 = v116;
    uint64_t v135 = v120;
    v136 = 0;
    uint64_t v137 = v39;
    type metadata accessor for ViewGraph();
    uint64_t v113 = *((void *)&v40 + 1);
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    swift_retain();
    uint64_t v41 = MEMORY[0x18C114EE0](v39) + 200;
    swift_beginAccess();
    long long v42 = MEMORY[0x18C119DF0](v41);
    uint64_t v43 = swift_release();
    if (v42)
    {
      swift_getObjectType();
      uint64_t v43 = swift_conformsToProtocol2();
      uint64_t v44 = v40;
      if (v43) {
        id v45 = v42;
      }
      else {
        id v45 = 0;
      }
      if (v45) {
        goto LABEL_43;
      }
      uint64_t v43 = swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v44 = v40;
    }
    id v45 = 0;
LABEL_43:
    long long v107 = v45;
    uint64_t v112 = v104;
    uint64_t v57 = *(_DWORD *)(a1 + 32);
    uint64_t v59 = *(void *)(a1 + 40);
    uint64_t v58 = *(void *)(a1 + 48);
    uint64_t v60 = *(void *)(a1 + 56);
    int v61 = *(void **)(a1 + 72);
    unint64_t v106 = *(id *)(a1 + 80);
    uint64_t v62 = *(_DWORD *)(a1 + 88);
    long long v122 = v57;
    uint64_t v63 = *(void *)(a1 + 96);
    uint64_t v64 = *(_OWORD *)(a1 + 16);
    uint64_t v120 = *(_OWORD *)a1;
    uint64_t v121 = v64;
    char v123 = v59;
    id v124 = v58;
    uint64_t v125 = v60;
    uint64_t v126 = *(void *)(a1 + 64);
    uint64_t v127 = v61;
    uint64_t v128 = v106;
    uint64_t v129 = v62;
    v130 = v63;
    MEMORY[0x1F4188790](v43);
    *(void *)&v104[-64] = &v133;
    *(void *)&v104[-56] = v117;
    *(void *)&v104[-48] = v65;
    *(void *)&v104[-40] = v66;
    *(void *)&v104[-32] = v44;
    int v67 = v113;
    *(void *)&v104[-24] = v113;
    *(_DWORD *)&v104[-16] = v111;
    *(void *)&v104[-8] = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>();
    uint64_t v111 = v68;
    type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
    uint64_t v55 = v44;
    swift_retain();
    swift_retain();
    uint64_t v69 = v61;
    uint64_t v70 = v106;
    swift_retain();
    uint64_t v49 = v67;
    StatefulRule.withObservation<A>(do:)();
    swift_release();
    swift_release();
    id v71 = v127;
    id v72 = v128;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    char v73 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = v119;

    goto LABEL_44;
  }
LABEL_57:
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned char *v10;
  uint64_t Value;
  char v12;
  char v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  unsigned char *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  void *v31;
  void *v32;
  char v33;
  char v34;
  int v35;
  void *v36;
  void *v37;
  char v38;
  void *v39;
  long long v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  int v62;
  uint64_t v63;
  long long v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  id v70;
  void *v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  int v83;
  uint64_t v84;
  long long v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  id v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  unsigned char *v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  id v98;
  id v99;
  id v100;
  long long v101;
  char v102;
  void *v103;
  unsigned char v104[4];
  int v105;
  id v106;
  uint64_t v107;
  unsigned char *v108;
  unsigned char *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned char *v117;
  uint64_t v118;
  uint64_t v119;
  long long v120;
  long long v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  id v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  long long v135;
  char v136;
  id v137;
  uint64_t v138;

  v138 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>();
  char v3 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = &v104[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, (uint64_t)&protocol witness table for UIKitCalendarViewRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v6);
  int v109 = &v104[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = &v104[-v9];
  uint64_t Value = AGGraphGetValue();
  uint64_t v13 = v12;
  outlined init with copy of PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>(Value, (uint64_t)v10);
  char v14 = (unsigned int *)AGGraphGetValue();
  uint64_t v113 = v15;
  uint64_t v16 = *v14;
  int v17 = (uint64_t *)AGGraphGetValue();
  uint64_t v112 = v18;
  int v19 = *v17;
  uint64_t v118 = v17[1];
  unsigned int v20 = *(_DWORD *)(a1 + 28) == *MEMORY[0x1E4F4E7A0];
  long long v108 = v5;
  if (v20
    || (uint64_t v21 = AGGraphGetValue(),
        long long v23 = v22,
        long long v24 = *(void *)v21,
        LODWORD(v107) = *(unsigned __int8 *)(v21 + 8),
        int v25 = *(_DWORD *)(v21 + 12),
        swift_retain(),
        uint64_t v115 = v24,
        v24 == 1))
  {
    uint64_t v26 = 0;
    LODWORD(v106) = 0;
    LODWORD(v107) = 0;
    uint64_t v115 = 0;
  }
  else
  {
    LODWORD(v106) = v25;
    uint64_t v26 = v23 & 1;
  }
  uint64_t v27 = v16 >> 1;
  if (v16 >> 1 == *(_DWORD *)(a1 + 88))
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    uint64_t v28 = v3;
    char v29 = v13;
    uint64_t v30 = v16;
    uint64_t v120 = *(_OWORD *)(a1 + 56);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    uint64_t v31 = *(void **)(a1 + 72);
    if (v31)
    {
      uint64_t v32 = *(void **)(a1 + 80);
      if (v32)
      {

        *(void *)(a1 + 72) = 0;
        *(void *)(a1 + 80) = 0;
      }
    }
    *(_DWORD *)(a1 + 88) = v27;
    uint64_t v16 = v30;
    uint64_t v13 = v29;
    char v3 = v28;
  }
  uint64_t v120 = *(_OWORD *)(a1 + 56);
  LODWORD(v133) = v16;
  uint64_t v33 = _DynamicPropertyBuffer.update(container:phase:)();
  uint64_t v34 = (char)v112;
  LODWORD(v111) = v16;
  if (v33)
  {
    int v35 = 1;
  }
  else
  {
    int v35 = 1;
    if (AGGraphGetOutputValue() && (v13 & 1) == 0 && (v113 & 1) == 0) {
      int v35 = AGGraphCurrentAttributeWasModified();
    }
  }
  AGGraphClearUpdate();
  int v116 = specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(a1, (uint64_t)v10);
  swift_retain();
  AGGraphSetUpdate();
  uint64_t v131 = v19;
  id v132 = v118;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  uint64_t v36 = *(void **)(a1 + 80);
  uint64_t v114 = v19;
  uint64_t v117 = v10;
  uint64_t v110 = v3;
  if (v36)
  {
    if (v34)
    {
      swift_retain();
      uint64_t v37 = v36;
      swift_retain();
      uint64_t v38 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if (v38)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        int v35 = 1;
      }
    }
    else
    {
      id v46 = v36;
    }
    if (specialized PlatformViewHost.isPlatformFocusContainerHost.getter((uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>.UnarySubtreeSequence, (uint64_t (*)(void))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>.UnarySubtreeSequence))
    {
      *(void *)&uint64_t v120 = 0;
      WORD4(v120) = 1;
      type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v132)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    uint64_t v105 = v35;
    uint64_t v47 = v113 | v34;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    uint64_t v49 = *((void *)&v120 + 1);
    uint64_t v48 = v120;
    swift_retain();
    uint64_t v50 = v48;
    swift_retain();
    AGGraphClearUpdate();
    if (v47)
    {
      int v51 = swift_retain();
      specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(v51, 0, v111);
      swift_release();
    }
    if (v26)
    {
      char v52 = (char *)v36 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v36) + 0x90);
      *(void *)char v52 = v115;
      v52[8] = v107;
      *((_DWORD *)v52 + 3) = v106;
      swift_retain();
      swift_release();
      objc_msgSend(v36, sel__noteTraitsDidChangeRecursively);
    }
    AGGraphSetUpdate();
    uint64_t v53 = *(void **)(a1 + 72);
    if (!v53)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    uint64_t v54 = v53;

    v133 = *(void *)(a1 + 40);
    uint64_t v134 = v116;
    uint64_t v55 = v50;
    *(void *)&uint64_t v135 = v50;
    *((void *)&v135 + 1) = v49;
    v136 = 0;
    uint64_t v137 = v54;
    swift_retain();
    if (!v105)
    {
      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v50, v49, 0);

      id v56 = (uint64_t)v117;
LABEL_53:
      swift_release();
      swift_release();
      outlined destroy of PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>(v56);
      return;
    }
    swift_retain();
LABEL_44:
    type metadata accessor for ViewGraph();
    uint64_t v74 = MEMORY[0x18C114EE0]() + 200;
    swift_beginAccess();
    uint64_t v75 = MEMORY[0x18C119DF0](v74);
    uint64_t v76 = swift_release();
    uint64_t v113 = v49;
    uint64_t v111 = v55;
    if (v75)
    {
      swift_getObjectType();
      uint64_t v76 = swift_conformsToProtocol2();
      if (v76) {
        id v77 = v75;
      }
      else {
        id v77 = 0;
      }
      if (!v77) {
        uint64_t v76 = swift_unknownObjectRelease();
      }
    }
    uint64_t v112 = v104;
    id v79 = *(void *)(a1 + 40);
    id v78 = *(void *)(a1 + 48);
    id v80 = *(void *)(a1 + 56);
    char v82 = *(void **)(a1 + 72);
    long long v81 = *(void **)(a1 + 80);
    uint64_t v83 = *(_DWORD *)(a1 + 88);
    long long v122 = *(_DWORD *)(a1 + 32);
    Class v84 = *(void *)(a1 + 96);
    uint64_t v85 = *(_OWORD *)(a1 + 16);
    uint64_t v120 = *(_OWORD *)a1;
    uint64_t v121 = v85;
    char v123 = v79;
    id v124 = v78;
    uint64_t v125 = v80;
    uint64_t v126 = *(void *)(a1 + 64);
    uint64_t v127 = v82;
    uint64_t v128 = v81;
    uint64_t v129 = v83;
    v130 = v84;
    MEMORY[0x1F4188790](v76);
    long long v107 = v86;
    *(void *)&v104[-48] = v86;
    *(void *)&v104[-40] = v87;
    *(void *)&v104[-32] = a1;
    *(void *)&v104[-24] = &v133;
    *(void *)&v104[-16] = v117;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>();
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
    swift_retain();
    swift_retain();
    uint64_t v88 = v82;
    uint64_t v89 = v81;
    swift_retain();
    StatefulRule.withObservation<A>(do:)();
    uint64_t v90 = v127;
    uint64_t v91 = v128;
    swift_release();
    swift_release();
    swift_release();

    uint64_t v92 = *(void **)(a1 + 80);
    if (v92)
    {
      uint64_t v93 = *(void **)(a1 + 72);
      id v56 = (uint64_t)v117;
      id v94 = v109;
      outlined init with copy of PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>((uint64_t)v117, (uint64_t)v109);
      uint64_t v95 = v110;
      if (v93)
      {
        int v96 = (uint64_t)v108;
        *(void *)&v108[*(int *)(v110 + 40)] = v93;
        outlined init with take of PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>((uint64_t)v94, v96);
        *(void *)(v96 + *(int *)(v95 + 36)) = v92;
        uint64_t v97 = v92;
        swift_retain();
        swift_retain();
        uint64_t v98 = v93;
        uint64_t v99 = v97;
        swift_retain();
        uint64_t v100 = v98;
        AGGraphSetOutputValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined destroy of ScrollableCollection?(v96, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
        uint64_t v101 = v135;
        id v102 = v136;
        int v103 = v137;
        swift_release();
        swift_release();
        outlined consume of RepresentableContextValues.EnvironmentStorage(v101, *((uint64_t *)&v101 + 1), v102);

        goto LABEL_53;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_56;
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  char v39 = *(void **)(a1 + 72);
  if (v39)
  {
    int v40 = v120;
    v133 = *(void *)(a1 + 40);
    uint64_t v134 = v116;
    uint64_t v135 = v120;
    v136 = 0;
    uint64_t v137 = v39;
    type metadata accessor for ViewGraph();
    uint64_t v113 = *((void *)&v40 + 1);
    swift_retain_n();
    swift_retain();
    swift_retain_n();
    swift_retain();
    uint64_t v41 = MEMORY[0x18C114EE0](v39) + 200;
    swift_beginAccess();
    long long v42 = MEMORY[0x18C119DF0](v41);
    uint64_t v43 = swift_release();
    if (v42)
    {
      swift_getObjectType();
      uint64_t v43 = swift_conformsToProtocol2();
      uint64_t v44 = v40;
      if (v43) {
        id v45 = v42;
      }
      else {
        id v45 = 0;
      }
      if (v45) {
        goto LABEL_43;
      }
      uint64_t v43 = swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v44 = v40;
    }
    id v45 = 0;
LABEL_43:
    long long v107 = v45;
    uint64_t v112 = v104;
    uint64_t v57 = *(_DWORD *)(a1 + 32);
    uint64_t v59 = *(void *)(a1 + 40);
    uint64_t v58 = *(void *)(a1 + 48);
    uint64_t v60 = *(void *)(a1 + 56);
    int v61 = *(void **)(a1 + 72);
    unint64_t v106 = *(id *)(a1 + 80);
    uint64_t v62 = *(_DWORD *)(a1 + 88);
    long long v122 = v57;
    uint64_t v63 = *(void *)(a1 + 96);
    uint64_t v64 = *(_OWORD *)(a1 + 16);
    uint64_t v120 = *(_OWORD *)a1;
    uint64_t v121 = v64;
    char v123 = v59;
    id v124 = v58;
    uint64_t v125 = v60;
    uint64_t v126 = *(void *)(a1 + 64);
    uint64_t v127 = v61;
    uint64_t v128 = v106;
    uint64_t v129 = v62;
    v130 = v63;
    MEMORY[0x1F4188790](v43);
    *(void *)&v104[-64] = &v133;
    *(void *)&v104[-56] = v117;
    *(void *)&v104[-48] = v65;
    *(void *)&v104[-40] = v66;
    *(void *)&v104[-32] = v44;
    int v67 = v113;
    *(void *)&v104[-24] = v113;
    *(_DWORD *)&v104[-16] = v111;
    *(void *)&v104[-8] = a1;
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>();
    uint64_t v111 = v68;
    type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>> and conformance PlatformViewChild<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
    uint64_t v55 = v44;
    swift_retain();
    swift_retain();
    uint64_t v69 = v61;
    uint64_t v70 = v106;
    swift_retain();
    uint64_t v49 = v67;
    StatefulRule.withObservation<A>(do:)();
    swift_release();
    swift_release();
    id v71 = v127;
    id v72 = v128;
    swift_release();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    char v73 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = v119;

    goto LABEL_44;
  }
LABEL_57:
  __break(1u);
}

uint64_t outlined init with copy of PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>()
{
  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewLeafView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
    }
  }
}

uint64_t outlined destroy of PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>(uint64_t a1)
{
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>()
{
  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewChild();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
    }
  }
}

uint64_t specialized closure #2 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 72))
  {
    outlined init with copy of PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>(a2, (uint64_t)&v12);
    uint64_t v3 = v12;
    uint64_t v4 = v14;
    uint64_t v5 = v13;
    outlined init with copy of NavigationAuthority((uint64_t)&v15, (uint64_t)v11);
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, (unint64_t *)&lazy cache variable for type metadata for NavigationStackCoordinator<NavigationStrategy_Phone>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationStrategy_Phone and conformance NavigationStrategy_Phone, (uint64_t)&type metadata for NavigationStrategy_Phone, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for NavigationStackCoordinator);
    id v7 = objc_allocWithZone(v6);
    uint64_t v8 = specialized NavigationStackCoordinator.init(context:navigationAuthority:)(v3, v5, v4, v11);
    outlined destroy of PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>((uint64_t)&v12);
    uint64_t v9 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v8;
  }
  return *(void *)AGGraphGetValue();
}

{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  char v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned char v14[24];
  uint64_t v15[2];
  int v16;
  unsigned char v17[56];
  unsigned char v18[56];
  unsigned char v19[56];
  unsigned char v20[56];
  uint64_t v21;
  void v22[8];
  char v23;
  uint64_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;

  if (!*(void *)(a1 + 72))
  {
    outlined init with copy of PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>(a2, (uint64_t)v20);
    outlined init with copy of _VariadicView_Children((uint64_t)v20, (uint64_t)v19);
    outlined init with copy of _VariadicView_Children((uint64_t)&v21, (uint64_t)v18);
    outlined init with copy of _VariadicView_Children((uint64_t)v22, (uint64_t)v17);
    uint64_t v3 = v22[7];
    uint64_t v4 = v24;
    uint64_t v5 = v25;
    Class v6 = v26;
    id v7 = v27;
    uint64_t v8 = v23;
    v15[0] = v28;
    v15[1] = v29;
    uint64_t v16 = v30;
    outlined init with copy of NavigationAuthority((uint64_t)&v31, (uint64_t)v14);
    type metadata accessor for NavigationSplitCoordinator();
    swift_allocObject();
    if (v6) {
      uint64_t v9 = 256;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = v9 | v5;
    if (v7) {
      uint64_t v11 = 0x10000;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = NavigationSplitCoordinator.init(sidebar:content:detail:parameters:columnVisibility:navigationAuthority:)((uint64_t)v19, (uint64_t)v18, (uint64_t)v17, v3, v8, v4, v10 | v11, v15, (uint64_t)v14);
    swift_beginAccess();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    outlined assign with copy of UINavigationPresentationAdaptor?((uint64_t)&v32, v12 + 304);
    swift_endAccess();
    outlined destroy of PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>((uint64_t)v20);
    *(void *)(a1 + 72) = v12;
    swift_release();
  }
  return *(void *)AGGraphGetValue();
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  objc_class *v16;
  unsigned char *v17;
  char *v18;
  long long v19;
  char *v20;
  char *v21;
  id v22;
  void *v23;
  long long v25;
  long long v26;
  objc_super v27;
  unsigned char v28[200];

  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  MEMORY[0x1F4188790](v4 - 8);
  Class v6 = (char *)&v25 - v5;
  id v7 = type metadata accessor for SystemTextFieldConfiguration(0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v25 - v11;
  if (!*(void *)(a1 + 72))
  {
    outlined init with copy of PlatformViewRepresentableAdaptor<TextViewAdaptor>(a2, (uint64_t)v12);
    outlined init with copy of ScrollableCollection?((uint64_t)v12, (uint64_t)v9, type metadata accessor for SystemTextFieldConfiguration);
    outlined init with take of TextField<_TextFieldStyleLabel>((uint64_t)v9, (uint64_t)v6);
    unsigned __int8 v13 = &v12[*(int *)(type metadata accessor for TextViewAdaptor(0) + 24)];
    uint64_t v26 = *(_OWORD *)v13;
    uint64_t v14 = *((void *)v13 + 2);
    uint64_t v15 = *((void *)v13 + 3);
    uint64_t v16 = (objc_class *)type metadata accessor for PlatformTextFieldCoordinator(0);
    int v17 = objc_allocWithZone(v16);
    int v25 = xmmword_18834FC50;
    *(_OWORD *)&v17[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment] = xmmword_18834FC50;
    unsigned int v18 = &v17[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_label];
    _s7SwiftUI12PlatformItemV14PrimaryContentVSgWOi0_((uint64_t)v28);
    *((_OWORD *)v18 + 15) = 0u;
    *((_OWORD *)v18 + 16) = 0u;
    int v19 = v25;
    *((_OWORD *)v18 + 17) = 0u;
    *((_OWORD *)v18 + 18) = v19;
    *(void *)unsigned int v18 = &outlined read-only object #0 of specialized closure #2 in closure #1 in PlatformViewChild.updateValue();
    *((void *)v18 + 1) = 0;
    *((_DWORD *)v18 + 4) = 0;
    outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v28, (uint64_t)(v18 + 24), (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
    *((void *)v18 + 38) = 0;
    v18[312] = 1;
    *((void *)v18 + 40) = 0;
    *((void *)v18 + 41) = 0;
    unsigned int v20 = &v17[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_selectionStorage];
    *(_OWORD *)unsigned int v20 = 0u;
    *((_OWORD *)v20 + 1) = 0u;
    v20[32] = 1;
    v17[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isViewUpdating] = 0;
    uint64_t v21 = &v17[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_field];
    *(void *)uint64_t v21 = 0;
    v21[8] = -1;
    v17[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_ignoreNextUpdate] = 0;
    v17[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isUserEditing] = 0;
    outlined init with copy of TextField<_TextFieldStyleLabel>((uint64_t)v6, (uint64_t)&v17[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_configuration]);
    *(_OWORD *)unsigned int v20 = v26;
    *((void *)v20 + 2) = v14;
    *((void *)v20 + 3) = v15;
    v20[32] = 0;
    v27.receiver = v17;
    v27.super_class = v16;
    uint64_t v22 = objc_msgSendSuper2(&v27, sel_init);
    outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v6);
    outlined destroy of PlatformViewRepresentableAdaptor<TextViewAdaptor>((uint64_t)v12);
    long long v23 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v22;
  }
  return *(void *)AGGraphGetValue();
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  char v9;
  unsigned char v10[56];
  void v11[3];
  uint64_t v12;

  if (!*(void *)(a1 + 72))
  {
    outlined init with copy of PlatformViewRepresentableAdaptor<UIKitPagingView>(a2, (uint64_t)v11);
    uint64_t v3 = v11[0];
    uint64_t v4 = v11[1];
    uint64_t v5 = v11[2];
    outlined init with copy of _VariadicView_Children((uint64_t)&v12, (uint64_t)v10);
    uint64_t v9 = 0;
    objc_allocWithZone((Class)type metadata accessor for Coordinator());
    swift_retain();
    swift_retain();
    Class v6 = specialized Coordinator.init(selectedIndex:children:layoutDirection:)(v3, v4, v5, (uint64_t)v10, &v9);
    swift_release();
    swift_release();
    outlined destroy of PlatformViewRepresentableAdaptor<UIKitPagingView>((uint64_t)v11);
    id v7 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v6;
  }
  return *(void *)AGGraphGetValue();
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  objc_class *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned char *v14;
  char *v15;
  char *v16;
  id v17;
  void *v18;
  long long v20;
  objc_super v21;

  uint64_t v4 = type metadata accessor for UIKitTextViewAdaptor(0);
  MEMORY[0x1F4188790](v4);
  Class v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v20 - v8;
  if (!*(void *)(a1 + 72))
  {
    outlined init with copy of PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(a2, (uint64_t)v9);
    outlined init with copy of ScrollableCollection?((uint64_t)v9, (uint64_t)v6, type metadata accessor for UIKitTextViewAdaptor);
    uint64_t v10 = &v9[*(int *)(v4 + 28)];
    uint64_t v11 = (objc_class *)type metadata accessor for UIKitTextEditorCoordinator(0);
    unsigned int v20 = *(_OWORD *)v10;
    uint64_t v12 = *((void *)v10 + 2);
    unsigned __int8 v13 = *((void *)v10 + 3);
    uint64_t v14 = objc_allocWithZone(v11);
    uint64_t v15 = &v14[OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_textInputValidation];
    *(_OWORD *)uint64_t v15 = 0u;
    *((_OWORD *)v15 + 1) = 0u;
    *((void *)v15 + 4) = 0;
    v14[OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_viewIsUpdating] = 0;
    outlined init with copy of ScrollableCollection?((uint64_t)v6, (uint64_t)&v14[OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_configuration], type metadata accessor for UIKitTextViewAdaptor);
    uint64_t v16 = &v14[OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_selectionStorage];
    *(_OWORD *)uint64_t v16 = v20;
    *((void *)v16 + 2) = v12;
    *((void *)v16 + 3) = v13;
    v21.receiver = v14;
    v21.super_class = v11;
    int v17 = objc_msgSendSuper2(&v21, sel_init);
    outlined destroy of ScrollableCollection?((uint64_t)v6, type metadata accessor for UIKitTextViewAdaptor);
    outlined destroy of PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>((uint64_t)v9);
    unsigned int v18 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v17;
  }
  return *(void *)AGGraphGetValue();
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  objc_class *v10;
  unsigned char *v11;
  char *v12;
  uint64_t v13;
  id v14;
  void *v15;
  objc_super v17;

  type metadata accessor for Binding<SearchFieldState>(0);
  MEMORY[0x1F4188790](v4 - 8);
  Class v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v17 - v8;
  if (!*(void *)(a1 + 72))
  {
    outlined init with copy of PlatformViewRepresentableAdaptor<KitRepresentable>(a2, (uint64_t)v9);
    outlined init with copy of ScrollableCollection?((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
    uint64_t v10 = (objc_class *)type metadata accessor for Coordinator(0);
    uint64_t v11 = objc_allocWithZone(v10);
    v11[OBJC_IVAR____TtC7SwiftUIP33_87E15EBB5C00F49DEF8C638A73559D9211Coordinator_isViewUpdating] = 0;
    uint64_t v12 = &v11[OBJC_IVAR____TtC7SwiftUIP33_87E15EBB5C00F49DEF8C638A73559D9211Coordinator_selection];
    type metadata accessor for TextSelection?(0, &lazy cache variable for type metadata for Binding<(TextSelection?, VersionSeed)>, (uint64_t (*)(uint64_t))type metadata accessor for (TextSelection?, VersionSeed), MEMORY[0x1E4F41638]);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    *(_DWORD *)&v11[OBJC_IVAR____TtC7SwiftUIP33_87E15EBB5C00F49DEF8C638A73559D9211Coordinator_expectedSelectionVersion] = 0;
    outlined init with copy of ScrollableCollection?((uint64_t)v6, (uint64_t)&v11[OBJC_IVAR____TtC7SwiftUIP33_87E15EBB5C00F49DEF8C638A73559D9211Coordinator_state], (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
    v17.receiver = v11;
    v17.super_class = v10;
    uint64_t v14 = objc_msgSendSuper2(&v17, sel_init);
    outlined destroy of ScrollableCollection?((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
    outlined destroy of PlatformViewRepresentableAdaptor<KitRepresentable>((uint64_t)v9);
    uint64_t v15 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v14;
  }
  return *(void *)AGGraphGetValue();
}

{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  objc_class *v12;
  id v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void *v17;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  char v23;
  long long v24;

  if (!*(void *)(a1 + 72))
  {
    uint64_t v4 = *(void *)a2;
    int v19 = *(unsigned char *)(a2 + 8);
    uint64_t v5 = *(void *)(a2 + 16);
    uint64_t v21 = *(void *)a2;
    Class v6 = *(unsigned char *)(a2 + 25);
    id v7 = *(void *)(a2 + 32);
    uint64_t v8 = *(unsigned __int8 *)(a2 + 40);
    uint64_t v22 = *(unsigned __int8 *)(a2 + 40);
    uint64_t v9 = *(void *)(a2 + 48);
    uint64_t v10 = *(unsigned char *)(a2 + 56);
    long long v23 = v10;
    unsigned int v20 = *(void *)(a2 + 80);
    uint64_t v11 = *(unsigned __int8 *)(a2 + 24);
    uint64_t v12 = (objc_class *)type metadata accessor for PasteHelper.ConfigurationSupport();
    long long v24 = *(_OWORD *)(a2 + 64);
    unsigned __int8 v13 = objc_allocWithZone(v12);
    outlined copy of Environment<Bool>.Content(v4, v19);
    outlined copy of Environment<CGFloat?>.Content(v5, v11, v6);
    outlined copy of Environment<HoverEffect?>.Content(v7, v8);
    outlined copy of Environment<Bool>.Content(v9, v10);
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v14 = (char *)objc_msgSend(v13, sel_init);
    uint64_t v15 = &v14[OBJC_IVAR____TtCV7SwiftUI11PasteHelper20ConfigurationSupport_pasteHelper];
    uint64_t v16 = *(void *)&v14[OBJC_IVAR____TtCV7SwiftUI11PasteHelper20ConfigurationSupport_pasteHelper];
    *(_OWORD *)uint64_t v15 = v24;
    *((void *)v15 + 2) = v20;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    outlined copy of PasteHelper?(v16);
    outlined consume of PasteHelper?(v16);
    PasteHelper.ConfigurationSupport.pasteHelper.didset(v16);
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of PasteHelper?(v16);
    outlined consume of Environment<Bool>.Content(v21, v19);
    outlined consume of Environment<CGFloat?>.Content(v5, v11, v6);
    outlined consume of Environment<AnyShapeStyle?>.Content(v7, v22);
    outlined consume of Environment<Bool>.Content(v9, v23);
    swift_release();
    swift_bridgeObjectRelease();
    int v17 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v14;
  }
  return *(void *)AGGraphGetValue();
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v14;

  uint64_t v4 = type metadata accessor for UIKitRichTextEditor(0);
  MEMORY[0x1F4188790](v4 - 8);
  Class v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v14 - v8;
  if (!*(void *)(a1 + 72))
  {
    outlined init with copy of PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(a2, (uint64_t)v9);
    outlined init with copy of ScrollableCollection?((uint64_t)v9, (uint64_t)v6, type metadata accessor for UIKitRichTextEditor);
    uint64_t v10 = objc_allocWithZone((Class)type metadata accessor for UIKitRichTextEditorCoordinator(0));
    uint64_t v11 = UIKitRichTextEditorCoordinator.init(configuration:)((uint64_t)v6);
    outlined destroy of PlatformViewRepresentableAdaptor<UIKitRichTextEditor>((uint64_t)v9);
    uint64_t v12 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v11;
  }
  return *(void *)AGGraphGetValue();
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[8];
  __int16 v31;
  char v32;

  type metadata accessor for Binding<TabViewCustomization>?(0);
  MEMORY[0x1F4188790](v4 - 8);
  Class v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v25 - v8;
  if (!*(void *)(a1 + 72))
  {
    outlined init with copy of PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(a2, (uint64_t)v9);
    uint64_t v10 = *(void *)v9;
    uint64_t v11 = *((void *)v9 + 1);
    uint64_t v12 = *((void *)v9 + 2);
    unsigned __int8 v13 = v9[24];
    uint64_t v14 = *((void *)v9 + 4);
    uint64_t v15 = *((void *)v9 + 5);
    uint64_t v16 = *((void *)v9 + 7);
    uint64_t v26 = *((void *)v9 + 8);
    uint64_t v27 = v16;
    int v17 = *((void *)v9 + 9);
    uint64_t v28 = *((void *)v9 + 10);
    char v29 = v12;
    unsigned int v18 = v9[90];
    int v19 = v9[48];
    unsigned int v20 = v9[88];
    LOWORD(v12) = v20 | (v9[89] << 8);
    v30[0] = v13;
    v30[1] = v14;
    _OWORD v30[2] = v15;
    v30[3] = v19;
    v30[4] = v16;
    v30[5] = v26;
    v30[6] = v17;
    v30[7] = v28;
    uint64_t v32 = v18;
    uint64_t v31 = v12;
    uint64_t v21 = type metadata accessor for UIKitAdaptableTabView(0);
    outlined init with copy of ScrollableCollection?((uint64_t)&v9[*(int *)(v21 + 24)], (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
    int v25 = objc_allocWithZone((Class)type metadata accessor for TabViewCoordinator_Phone());
    swift_retain();
    swift_retain();
    outlined copy of Binding<NavigationSplitViewColumn>?(v14, v15);
    outlined copy of TabSidebarAccessoryViewConfiguration?(v27);
    outlined copy of PlatformItemCollection?(v28, v20);
    uint64_t v22 = specialized TabViewCoordinator_Phone.init(selected:sidebarConfiguration:customization:tabs:)(v10, v11, v29, v30, (uint64_t)v6, MEMORY[0x1E4FBC860]);
    swift_release();
    swift_release();
    outlined destroy of PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>((uint64_t)v9);
    long long v23 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v22;
  }
  return *(void *)AGGraphGetValue();
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  objc_class *v17;
  unsigned char *v18;
  char *v19;
  long long v20;
  char *v21;
  char *v22;
  id v23;
  void *v24;
  long long v26;
  long long v27;
  objc_super v28;
  unsigned char v29[200];

  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  MEMORY[0x1F4188790](v4 - 8);
  Class v6 = (char *)&v26 - v5;
  id v7 = type metadata accessor for SystemTextFieldConfiguration(0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v26 - v11;
  if (!*(void *)(a1 + 72))
  {
    outlined init with copy of PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(a2, (uint64_t)v12);
    outlined init with copy of ScrollableCollection?((uint64_t)v12, (uint64_t)v9, type metadata accessor for SystemTextFieldConfiguration);
    outlined init with take of TextField<_TextFieldStyleLabel>((uint64_t)v9, (uint64_t)v6);
    unsigned __int8 v13 = &v12[*(int *)(type metadata accessor for PlatformTextFieldAdaptor(0) + 24)];
    uint64_t v27 = *(_OWORD *)v13;
    uint64_t v14 = *((void *)v13 + 2);
    uint64_t v15 = *((void *)v13 + 3);
    uint64_t v16 = v13[32];
    int v17 = (objc_class *)type metadata accessor for PlatformTextFieldCoordinator(0);
    unsigned int v18 = objc_allocWithZone(v17);
    uint64_t v26 = xmmword_18834FC50;
    *(_OWORD *)&v18[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment] = xmmword_18834FC50;
    int v19 = &v18[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_label];
    _s7SwiftUI12PlatformItemV14PrimaryContentVSgWOi0_((uint64_t)v29);
    *((_OWORD *)v19 + 15) = 0u;
    *((_OWORD *)v19 + 16) = 0u;
    unsigned int v20 = v26;
    *((_OWORD *)v19 + 17) = 0u;
    *((_OWORD *)v19 + 18) = v20;
    *(void *)int v19 = &outlined read-only object #0 of specialized closure #2 in closure #1 in PlatformViewChild.updateValue();
    *((void *)v19 + 1) = 0;
    *((_DWORD *)v19 + 4) = 0;
    outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v29, (uint64_t)(v19 + 24), (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
    *((void *)v19 + 38) = 0;
    v19[312] = 1;
    *((void *)v19 + 40) = 0;
    *((void *)v19 + 41) = 0;
    uint64_t v21 = &v18[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_selectionStorage];
    *(_OWORD *)uint64_t v21 = 0u;
    *((_OWORD *)v21 + 1) = 0u;
    v21[32] = 1;
    v18[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isViewUpdating] = 0;
    uint64_t v22 = &v18[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_field];
    *(void *)uint64_t v22 = 0;
    unsigned char v22[8] = -1;
    v18[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_ignoreNextUpdate] = 0;
    v18[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isUserEditing] = 0;
    outlined init with copy of TextField<_TextFieldStyleLabel>((uint64_t)v6, (uint64_t)&v18[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_configuration]);
    *(_OWORD *)uint64_t v21 = v27;
    *((void *)v21 + 2) = v14;
    *((void *)v21 + 3) = v15;
    v21[32] = v16;
    v28.receiver = v18;
    v28.super_class = v17;
    long long v23 = objc_msgSendSuper2(&v28, sel_init);
    outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v6);
    outlined destroy of PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>((uint64_t)v12);
    long long v24 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v23;
  }
  return *(void *)AGGraphGetValue();
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  objc_class *v11;
  char *v12;
  id v13;
  void *v14;
  objc_super v16;

  uint64_t v4 = type metadata accessor for DatePickerStyleConfiguration(0);
  MEMORY[0x1F4188790](v4 - 8);
  Class v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&protocol witness table for UIKitDatePickerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v16 - v8;
  if (!*(void *)(a1 + 72))
  {
    outlined init with copy of PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>(a2, (uint64_t)v9);
    outlined init with copy of ScrollableCollection?((uint64_t)v9, (uint64_t)v6, type metadata accessor for DatePickerStyleConfiguration);
    uint64_t v10 = *(void *)&v9[*(int *)(type metadata accessor for UIKitDatePickerRepresentable(0) + 32)];
    uint64_t v11 = (objc_class *)type metadata accessor for UIKitDatePickerRepresentable.Coordinator(0);
    uint64_t v12 = (char *)objc_allocWithZone(v11);
    outlined init with copy of ScrollableCollection?((uint64_t)v6, (uint64_t)&v12[OBJC_IVAR____TtCV7SwiftUIP33_796E60B90620AEB0B6972B2798FF4F4228UIKitDatePickerRepresentable11Coordinator_configuration], type metadata accessor for DatePickerStyleConfiguration);
    *(void *)&v12[OBJC_IVAR____TtCV7SwiftUIP33_796E60B90620AEB0B6972B2798FF4F4228UIKitDatePickerRepresentable11Coordinator_style] = v10;
    v16.receiver = v12;
    v16.super_class = v11;
    unsigned __int8 v13 = objc_msgSendSuper2(&v16, sel_init);
    outlined destroy of ScrollableCollection?((uint64_t)v6, type metadata accessor for DatePickerStyleConfiguration);
    outlined destroy of PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>((uint64_t)v9);
    uint64_t v14 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v13;
  }
  return *(void *)AGGraphGetValue();
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  objc_class *v10;
  id v11;
  id v12;
  void *v13;
  objc_super v15;

  uint64_t v4 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  MEMORY[0x1F4188790](v4 - 8);
  Class v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, (uint64_t)&protocol witness table for UIKitCalendarViewRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v15 - v8;
  if (!*(void *)(a1 + 72))
  {
    outlined init with copy of PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>(a2, (uint64_t)v9);
    outlined init with copy of ScrollableCollection?((uint64_t)v9, (uint64_t)v6, type metadata accessor for MultiDatePickerStyleConfiguration);
    uint64_t v10 = (objc_class *)type metadata accessor for UIKitCalendarViewRepresentable.Coordinator(0);
    uint64_t v11 = objc_allocWithZone(v10);
    outlined init with copy of ScrollableCollection?((uint64_t)v6, (uint64_t)v11+ OBJC_IVAR____TtCV7SwiftUIP33_1CD2D554D5FF79B0EC2610FA354BC03430UIKitCalendarViewRepresentable11Coordinator_configuration, type metadata accessor for MultiDatePickerStyleConfiguration);
    v15.receiver = v11;
    v15.super_class = v10;
    uint64_t v12 = objc_msgSendSuper2(&v15, sel_init);
    outlined destroy of ScrollableCollection?((uint64_t)v6, type metadata accessor for MultiDatePickerStyleConfiguration);
    outlined destroy of PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>((uint64_t)v9);
    unsigned __int8 v13 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v12;
  }
  return *(void *)AGGraphGetValue();
}

uint64_t outlined init with take of PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>);
  }
  return result;
}

uint64_t specialized closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  int v8 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v9 = *((void *)&static RepresentableContextValues.current + 1);
  uint64_t v29 = static RepresentableContextValues.current;
  long long v10 = xmmword_1EB2E8DA0;
  char v11 = byte_1EB2E8DB0;
  *(void *)&static RepresentableContextValues.current = *(void *)a1;
  uint64_t v5 = static RepresentableContextValues.current;
  *((void *)&static RepresentableContextValues.current + 1) = v4;
  *(void *)&xmmword_1EB2E8DA0 = v6;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v7;
  byte_1EB2E8DB0 = v8;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v6, v7, v8);
  swift_retain();
  swift_retain();
  uint64_t v24 = v6;
  uint64_t v25 = v7;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v6, v7, v8);
  outlined copy of RepresentableContextValues?(v29, v9, v10, *((uint64_t *)&v10 + 1), v11);
  uint64_t v26 = v9;
  char v23 = v11;
  outlined consume of RepresentableContextValues?(v29, v9, v10, *((uint64_t *)&v10 + 1), v11);
  uint64_t v12 = outlined init with copy of PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>(a2, (uint64_t)v35);
  uint64_t v13 = *(void *)(a1 + 40);
  char v28 = v8;
  if (v8 == 1)
  {
    MEMORY[0x1F4188790](v12);
    uint64_t v14 = v5;
    uint64_t v15 = v24;
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v24, v25, 1);
    outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(a1);
    swift_retain();
    swift_retain();
    swift_retain();
    static Update.ensure<A>(_:)();
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v24, v25, 1);
    outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(a1);
    uint64_t v17 = v30;
    uint64_t v16 = v31;
  }
  else
  {
    swift_retain();
    uint64_t v14 = v5;
    swift_retain();
    swift_retain();
    uint64_t v15 = v24;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v24, v25, 0);
    uint64_t v16 = v25;
    uint64_t v17 = v24;
  }
  uint64_t v30 = v13;
  uint64_t v31 = v4;
  uint64_t v32 = v17;
  uint64_t v33 = v16;
  uint64_t v34 = v14;
  NavigationSplitRepresentable.updateUIViewController(_:context:)(a3, &v30);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>((uint64_t)v35);
  long long v18 = static RepresentableContextValues.current;
  long long v19 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v29;
  *((void *)&static RepresentableContextValues.current + 1) = v26;
  xmmword_1EB2E8DA0 = v10;
  char v20 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v23;
  outlined consume of RepresentableContextValues?(v18, *((uint64_t *)&v18 + 1), v19, *((uint64_t *)&v19 + 1), v20);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v15, v10, v28);
}

{
  uint64_t v4;
  uint64_t v5;
  char v6;
  long long v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  Class isa;
  long long v12;
  long long v13;
  char v14;
  char v16;
  uint64_t v17;
  uint64_t v18;

  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v17 = *(void *)(a1 + 16);
  uint64_t v6 = *(unsigned char *)(a1 + 32);
  uint64_t v16 = v6;
  uint64_t v7 = static RepresentableContextValues.current;
  int v8 = *((void *)&xmmword_1EB2E8DA0 + 1);
  uint64_t v9 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = *(void *)a1;
  *((void *)&static RepresentableContextValues.current + 1) = v4;
  *(void *)&xmmword_1EB2E8DA0 = v17;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v5;
  long long v10 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v6;
  outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  long long v18 = v8;
  outlined copy of RepresentableContextValues?(v7, *((uint64_t *)&v7 + 1), v9, v8, v10);
  outlined consume of RepresentableContextValues?(v7, *((uint64_t *)&v7 + 1), v9, v8, v10);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v17, v5, v16);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a3, sel_setItems_, isa);

  outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  swift_bridgeObjectRelease();
  uint64_t v12 = static RepresentableContextValues.current;
  uint64_t v13 = xmmword_1EB2E8DA0;
  static RepresentableContextValues.current = v7;
  xmmword_1EB2E8DA0 = __PAIR128__(v18, v9);
  uint64_t v14 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v10;
  outlined consume of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14);
  return outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
}

{
  uint64_t v4;
  uint64_t v5;
  int v6;
  long long v7;
  long long v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  long long v14;
  long long v15;
  char v16;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned char v26[80];

  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v7 = static RepresentableContextValues.current;
  int v8 = xmmword_1EB2E8DA0;
  uint64_t v9 = byte_1EB2E8DB0;
  char v20 = *(void *)a1;
  uint64_t v21 = *(void *)(a1 + 8);
  *(void *)&static RepresentableContextValues.current = *(void *)a1;
  *((void *)&static RepresentableContextValues.current + 1) = v21;
  *(void *)&xmmword_1EB2E8DA0 = v4;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v5;
  byte_1EB2E8DB0 = v6;
  outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  outlined copy of RepresentableContextValues?(v7, *((uint64_t *)&v7 + 1), v8, *((uint64_t *)&v8 + 1), v9);
  long long v10 = v9;
  outlined consume of RepresentableContextValues?(v7, *((uint64_t *)&v7 + 1), v8, *((uint64_t *)&v8 + 1), v9);
  char v11 = outlined init with copy of PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>(a2, (uint64_t)v26);
  if (v6 == 1)
  {
    MEMORY[0x1F4188790](v11);
    outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
    uint64_t v12 = v21;
    swift_retain();
    uint64_t v13 = v20;
    swift_retain();
    static Update.ensure<A>(_:)();
    outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
    uint64_t v4 = v22;
    uint64_t v5 = v23;
  }
  else
  {
    uint64_t v12 = v21;
    swift_retain();
    uint64_t v13 = v20;
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v4, v5, 0);
  }
  uint64_t v22 = v12;
  char v23 = v4;
  uint64_t v24 = v5;
  uint64_t v25 = v13;
  BridgedNavigationView.updateUIViewController(_:context:)(a3, &v22);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>((uint64_t)v26);
  uint64_t v14 = static RepresentableContextValues.current;
  uint64_t v15 = xmmword_1EB2E8DA0;
  static RepresentableContextValues.current = v7;
  xmmword_1EB2E8DA0 = v8;
  uint64_t v16 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v10;
  outlined consume of RepresentableContextValues?(v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16);
  return outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  long long v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  long long v26;
  long long v27;
  char v28;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  char v39 = a3;
  uint64_t v31 = a2;
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v41 = (uint64_t)&v30 - v5;
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  int v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  long long v10 = *(unsigned __int8 *)(a1 + 32);
  char v11 = *((void *)&static RepresentableContextValues.current + 1);
  int v40 = static RepresentableContextValues.current;
  uint64_t v12 = xmmword_1EB2E8DA0;
  uint64_t v13 = byte_1EB2E8DB0;
  *(void *)&static RepresentableContextValues.current = v6;
  *((void *)&static RepresentableContextValues.current + 1) = v7;
  *(void *)&xmmword_1EB2E8DA0 = v8;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v9;
  byte_1EB2E8DB0 = v10;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v8, v9, v10);
  uint64_t v34 = v6;
  uint64_t v14 = v7;
  swift_retain();
  swift_retain();
  int v35 = v8;
  uint64_t v36 = v9;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v8, v9, v10);
  uint64_t v15 = v40;
  outlined copy of RepresentableContextValues?(v40, v11, v12, *((uint64_t *)&v12 + 1), v13);
  uint64_t v37 = v12;
  uint64_t v38 = v11;
  uint64_t v33 = *((void *)&v12 + 1);
  uint64_t v32 = v13;
  outlined consume of RepresentableContextValues?(v15, v11, v12, *((uint64_t *)&v12 + 1), v13);
  uint64_t v16 = outlined init with copy of PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(v31, v41);
  uint64_t v17 = *(void **)(a1 + 40);
  if (v10 == 1)
  {
    MEMORY[0x1F4188790](v16);
    long long v18 = v34;
    long long v19 = v35;
    *(&v30 - 2) = __ROR8__(v35, 32);
    swift_retain();
    swift_retain();
    char v20 = v36;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v19, v36, 1);
    outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>(a1);
    uint64_t v21 = v17;
    swift_retain();
    swift_retain();
    static Update.ensure<A>(_:)();
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v19, v20, 1);
    outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>(a1);
    char v23 = v42;
    uint64_t v22 = v43;
  }
  else
  {
    uint64_t v24 = v17;
    long long v18 = v34;
    swift_retain();
    swift_retain();
    long long v19 = v35;
    char v20 = v36;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v35, v36, 0);
    uint64_t v22 = v20;
    char v23 = v19;
  }
  long long v42 = (uint64_t)v17;
  uint64_t v43 = v14;
  uint64_t v44 = v23;
  id v45 = v22;
  id v46 = v18;
  uint64_t v25 = v41;
  UIKitAdaptableTabView.updateUIViewController(_:context:)(v39, &v42);
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  outlined destroy of PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(v25);
  uint64_t v26 = static RepresentableContextValues.current;
  uint64_t v27 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v40;
  *((void *)&static RepresentableContextValues.current + 1) = v38;
  *(void *)&xmmword_1EB2E8DA0 = v37;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v33;
  char v28 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v32;
  outlined consume of RepresentableContextValues?(v26, *((uint64_t *)&v26 + 1), v27, *((uint64_t *)&v27 + 1), v28);
  swift_release();
  swift_release();
  return outlined consume of RepresentableContextValues.EnvironmentStorage(v19, v20, v10);
}

{
  uint64_t v5;
  char v6;
  long long v7;
  long long v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  long long v13;
  long long v14;
  char v15;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;

  uint64_t v5 = *(void *)(a1 + 8);
  long long v18 = *(void *)(a1 + 24);
  long long v19 = *(void *)(a1 + 16);
  uint64_t v6 = *(unsigned char *)(a1 + 32);
  uint64_t v17 = v6;
  uint64_t v7 = static RepresentableContextValues.current;
  char v20 = static RepresentableContextValues.current;
  int v8 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = *(void *)a1;
  *((void *)&static RepresentableContextValues.current + 1) = v5;
  *(void *)&xmmword_1EB2E8DA0 = v19;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v18;
  uint64_t v9 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v6;
  outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  outlined copy of RepresentableContextValues?(v7, *((uint64_t *)&v7 + 1), v8, *((uint64_t *)&v8 + 1), v9);
  outlined consume of RepresentableContextValues?(v7, *((uint64_t *)&v7 + 1), v8, *((uint64_t *)&v8 + 1), v9);
  long long v10 = *(void *)a2;
  char v11 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(v10, v11);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v19, v18, v17);
  specialized Environment.wrappedValue.getter(v10, v11, &v22);
  if (v22) {
    uint64_t v12 = 2030;
  }
  else {
    uint64_t v12 = 3901;
  }
  objc_msgSend(a3, sel_transitionToStyle_, v12);
  outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  outlined consume of Environment<Bool>.Content(v10, v11);
  uint64_t v13 = static RepresentableContextValues.current;
  uint64_t v14 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v20;
  *((void *)&static RepresentableContextValues.current + 1) = *((void *)&v7 + 1);
  xmmword_1EB2E8DA0 = v8;
  uint64_t v15 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v9;
  outlined consume of RepresentableContextValues?(v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15);
  return outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  long long v8;
  long long v9;
  char v10;
  uint64_t v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  char v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _OWORD v25[10];
  char v26;

  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v22 = *(unsigned __int8 *)(a1 + 32);
  int v8 = static RepresentableContextValues.current;
  uint64_t v9 = xmmword_1EB2E8DA0;
  long long v10 = byte_1EB2E8DB0;
  *(void *)&static RepresentableContextValues.current = *(void *)a1;
  *((void *)&static RepresentableContextValues.current + 1) = v5;
  char v23 = v6;
  *(void *)&xmmword_1EB2E8DA0 = v6;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v7;
  uint64_t v21 = v7;
  byte_1EB2E8DB0 = v22;
  outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  outlined copy of RepresentableContextValues?(v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v10);
  char v11 = outlined consume of RepresentableContextValues?(v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v10);
  uint64_t v12 = *(_OWORD *)(a2 + 144);
  v25[8] = *(_OWORD *)(a2 + 128);
  v25[9] = v12;
  uint64_t v13 = *(_OWORD *)(a2 + 80);
  v25[4] = *(_OWORD *)(a2 + 64);
  _OWORD v25[5] = v13;
  uint64_t v14 = *(_OWORD *)(a2 + 112);
  v25[6] = *(_OWORD *)(a2 + 96);
  v25[7] = v14;
  uint64_t v15 = *(_OWORD *)(a2 + 16);
  v25[0] = *(_OWORD *)a2;
  v25[1] = v15;
  uint64_t v16 = *(_OWORD *)(a2 + 48);
  char v25[2] = *(_OWORD *)(a2 + 32);
  v25[3] = v16;
  uint64_t v26 = *(unsigned char *)(a2 + 160);
  if (v22 == 1)
  {
    MEMORY[0x1F4188790](v11);
    outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
    outlined retain of PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>((uint64_t)v25);
    swift_retain();
    swift_retain();
    static Update.ensure<A>(_:)();
    outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  }
  else
  {
    outlined retain of PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>((uint64_t)v25);
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v23, v21, 0);
  }
  CustomizableURLDocumentViewControllerRepresentable.updateUIViewController(_:context:)(a3);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined release of PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>((uint64_t)v25);
  uint64_t v17 = static RepresentableContextValues.current;
  long long v18 = xmmword_1EB2E8DA0;
  static RepresentableContextValues.current = v8;
  xmmword_1EB2E8DA0 = v9;
  long long v19 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v10;
  outlined consume of RepresentableContextValues?(v17, *((uint64_t *)&v17 + 1), v18, *((uint64_t *)&v18 + 1), v19);
  return outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
}

uint64_t outlined init with copy of PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>()
{
  if (!lazy cache variable for type metadata for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewLeafView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
    }
  }
}

uint64_t outlined destroy of PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>(uint64_t a1)
{
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>()
{
  if (!lazy cache variable for type metadata for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewChild();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
    }
  }
}

void specialized PlatformViewHost.updateEnvironment(_:viewPhase:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v13 = (char *)v7 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v7) + 0x68);
  swift_beginAccess();
  long long v20 = *(_OWORD *)v13;
  EnvironmentValues.colorScheme.getter();
  swift_endAccess();
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  EnvironmentValues.colorScheme.getter();
  char v14 = v21 ^ v20;
  swift_beginAccess();
  *(void *)uint64_t v13 = a1;
  *((void *)v13 + 1) = a2;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  uint64_t v15 = (void *)MEMORY[0x1E4FBC8C8];
  *(_DWORD *)((char *)v7 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v7) + 0x70)) = a3;
  a7(v14 & 1, a4, a5, a6);
  *(void *)&long long v20 = a1;
  *((void *)&v20 + 1) = a2;
  id v16 = objc_msgSend(*(id *)((char *)v7 + *(void *)((*v15 & *v7) + 0x78)), sel_view);
  if (v16)
  {
    uint64_t v17 = v16;
    UIView.adoptEnvironment(_:hostedSubview:)((uint64_t)&v20, v16);
  }
  else
  {
    __break(1u);
  }
}

void specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v5 = *(void **)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x78));
  uint64_t v6 = (char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x80);
  if (MEMORY[0x18C119DF0](v6))
  {
    uint64_t v7 = *((void *)v6 + 1);
    uint64_t ObjectType = swift_getObjectType();
    id v30 = v5;
    uint64_t v9 = (void *)ViewRendererHost.uiViewController.getter(ObjectType, v7);
    swift_unknownObjectRelease();
    if (v9)
    {
      id v10 = objc_msgSend(v1, sel_traitCollection);
      char v11 = (void *)((char *)v2 + *(void *)((*v4 & *v2) + 0x68));
      swift_beginAccess();
      uint64_t v12 = *v11;
      uint64_t v13 = v11[1];
      int v14 = *(_DWORD *)((char *)v2 + *(void *)((*v4 & *v2) + 0x70));
      uint64_t v15 = (char *)v2 + *(void *)((*v4 & *v2) + 0x90);
      uint64_t v16 = *(void *)v15;
      char v29 = a1;
      char v17 = v15[8];
      int v18 = *((_DWORD *)v15 + 3);
      long long v19 = (objc_class *)type metadata accessor for EnvironmentWrapper();
      long long v20 = (char *)objc_allocWithZone(v19);
      char v21 = &v20[OBJC_IVAR___SwiftUIEnvironmentWrapper_environment];
      *(void *)char v21 = v12;
      *((void *)v21 + 1) = v13;
      *(_DWORD *)&v20[OBJC_IVAR___SwiftUIEnvironmentWrapper_phase] = v14;
      uint64_t v22 = &v20[OBJC_IVAR___SwiftUIEnvironmentWrapper_focusedValues];
      *(void *)uint64_t v22 = v16;
      unsigned char v22[8] = v17;
      *((_DWORD *)v22 + 3) = v18;
      v31.receiver = v20;
      v31.super_class = v19;
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      id v23 = objc_msgSendSuper2(&v31, sel_init);
      MEMORY[0x1F4188790](v23);
      uint64_t v24 = (void *)UITraitCollection._modifyingTraits(environmentWrapper:mutations:)();
      swift_release();
      swift_release();
      swift_release();

      uint64_t v25 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = v25;
      *(void *)(v26 + 24) = v24;
      *(void *)(v26 + 32) = v30;
      *(unsigned char *)(v26 + 40) = v29 & 1;
      id v27 = v30;
      swift_retain();
      id v28 = v24;
      static Update.enqueueAction(_:)();

      swift_release();
      swift_release();
    }
    else
    {
    }
  }
}

uint64_t outlined init with take of PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t NavigationSplitRepresentable.updateUIViewController(_:context:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = v2 + 312;
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[3];
  v37[0] = a2[2];
  v37[1] = v6;
  uint64_t v32 = *(void *)(v2 + 248);
  uint64_t v33 = v5;
  uint64_t v7 = *(void *)(v2 + 304);
  char v8 = *(unsigned char *)(v3 + 312);
  swift_retain();
  swift_retain();
  outlined copy of Environment<Bool>.Content(v7, v8);
  char v31 = specialized Environment.wrappedValue.getter(v7, v8);
  outlined consume of Environment<Bool>.Content(v7, v8);
  uint64_t v9 = *(void *)(v3 + 320);
  char v10 = *(unsigned char *)(v4 + 16);
  outlined copy of Environment<Bool>.Content(v9, v10);
  char v30 = specialized Environment.wrappedValue.getter(v9, v10);
  outlined consume of Environment<Bool>.Content(v9, v10);
  long long v11 = *(_OWORD *)(v3 + 352);
  v38[0] = *(_OWORD *)(v3 + 336);
  v38[1] = v11;
  char v39 = *(unsigned char *)(v3 + 368);
  outlined init with take of Environment<NavigationEventHandlers>.Content((uint64_t)v38, (uint64_t)v40, &lazy cache variable for type metadata for Environment<NavigationEventHandlers>.Content, (uint64_t)&type metadata for NavigationEventHandlers, MEMORY[0x1E4F3F4D8]);
  outlined retain of Environment<NavigationEventHandlers>.Content((uint64_t)v40, (void (*)(void, void, void, void, void))outlined copy of Environment<NavigationEventHandlers>.Content);
  uint64_t v12 = specialized Environment.wrappedValue.getter();
  uint64_t v14 = v13;
  uint64_t v28 = v16;
  uint64_t v29 = v15;
  outlined retain of Environment<NavigationEventHandlers>.Content((uint64_t)v38, (void (*)(void, void, void, void, void))outlined consume of Environment<NavigationEventHandlers>.Content);
  uint64_t v17 = *(void *)(v3 + 208);
  int v18 = *(_DWORD *)(v3 + 216);
  v35[0] = *(void *)(v3 + 200);
  v35[1] = v17;
  int v36 = v18;
  uint64_t v19 = *(void *)(v3 + 168);
  char v20 = *(unsigned char *)(v3 + 176);
  uint64_t v21 = *(void *)(v3 + 184);
  uint64_t v22 = *(void *)(v3 + 256);
  if (*(unsigned char *)(v3 + 193)) {
    int v23 = 256;
  }
  else {
    int v23 = 0;
  }
  int v24 = v23 | *(unsigned __int8 *)(v3 + 192);
  if (*(unsigned char *)(v3 + 194)) {
    int v25 = 0x10000;
  }
  else {
    int v25 = 0;
  }
  int v26 = v24 | v25;
  swift_retain();
  swift_retain();
  NavigationSplitCoordinator.updateSplitViewController(_:environment:transaction:seeds:wantsTransparentBackgroundWhenCollapsed:containerWantsTransparentBackground:navigationEventHandlers:columnVisibility:sidebar:content:detail:parameters:splitViewControllerProxyStorage:)(a1, v37, v33, v32, v31 & 1, v30 & 1, v12, v14, v29, v28, (uint64_t)v35, v3, v3 + 56, v3 + 112, v19, v20, v21, v26, SBYTE2(v26),
    v22);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v12);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v29);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t outlined retain of Environment<NavigationEventHandlers>.Content(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t outlined init with take of Environment<NavigationEventHandlers>.Content(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(void, uint64_t))
{
  type metadata accessor for Environment<NavigationEventHandlers>.Content(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t NavigationSplitCoordinator.allRoots.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 232);
  __int16 v3 = *(_WORD *)(v0 + 240);
  v11[3] = *(void *)(v0 + 224);
  v11[4] = v2;
  __int16 v12 = v3;
  type metadata accessor for Environment<NavigationEventHandlers>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationSplitVisibility>, (uint64_t)&type metadata for AnyNavigationSplitVisibility, MEMORY[0x1E4F41638]);
  uint64_t v5 = v4;
  swift_retain();
  swift_retain();
  MEMORY[0x18C113DA0](v11, v5);
  unsigned int v6 = LOWORD(v11[0]) >> 14;
  if (v6 < 2 || v6 == 3 && LOWORD(v11[0]) == 49152)
  {
    swift_release();
    swift_release();
    type metadata accessor for Environment<NavigationEventHandlers>.Content(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_VariadicView_Children>, MEMORY[0x1E4F40A38], MEMORY[0x1E4FBBE00]);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_18834BB70;
    swift_beginAccess();
    outlined init with copy of _VariadicView_Children(v1 + 16, v7 + 32);
    uint64_t v8 = v7 + 88;
    uint64_t v9 = v1 + 128;
  }
  else
  {
    swift_release();
    swift_release();
    type metadata accessor for Environment<NavigationEventHandlers>.Content(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_VariadicView_Children>, MEMORY[0x1E4F40A38], MEMORY[0x1E4FBBE00]);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_188357320;
    swift_beginAccess();
    outlined init with copy of _VariadicView_Children(v1 + 16, v7 + 32);
    swift_beginAccess();
    outlined init with copy of _VariadicView_Children(v1 + 72, v7 + 88);
    uint64_t v8 = v7 + 144;
    uint64_t v9 = v1 + 128;
  }
  swift_beginAccess();
  outlined init with copy of _VariadicView_Children(v9, v8);
  return v7;
}

void type metadata accessor for Environment<NavigationEventHandlers>.Content(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t specialized Environment.wrappedValue.getter()
{
  uint64_t v1 = *(void *)v0;
  if (*(unsigned char *)(v0 + 32) == 1)
  {
    uint64_t v2 = *(void *)(v0 + 16);
    outlined copy of AppIntentExecutor?(v1);
    outlined copy of AppIntentExecutor?(v2);
  }
  else
  {
    swift_retain();
    os_log_type_t v3 = static os_log_type_t.fault.getter();
    uint64_t v4 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v5 = v3;
    if (os_log_type_enabled(v4, v3))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      uint64_t v9 = v7;
      *(_DWORD *)uint64_t v6 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000017, 0x80000001883284F0, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v4, v5, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v7, -1, -1);
      MEMORY[0x18C119C60](v6, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined release of Environment<NavigationEventHandlers>(v0, (void (*)(void, void, void, void, void))outlined consume of Environment<NavigationEventHandlers>.Content);
    swift_release();
    swift_release();
    return v9;
  }
  return v1;
}

{
  return specialized Environment.wrappedValue.getter((void (*)(uint64_t, void, void, void))outlined copy of Text?, 0x6C616E6F6974704FLL, 0xEE003E747865543CLL, (uint64_t (*)(void))outlined consume of Text?);
}

{
  return specialized Environment.wrappedValue.getter((void (*)(uint64_t, void, void, void))outlined copy of Binding<String>?, 0xD000000000000019, 0x8000000188328000, (uint64_t (*)(void))outlined consume of Binding<String>?);
}

unint64_t lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>;
  if (!lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>);
  }
  return result;
}

uint64_t type metadata accessor for NavigationSplitCoordinator()
{
  return self;
}

uint64_t outlined assign with copy of UINavigationPresentationAdaptor?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for UINavigationPresentationAdaptor?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t NavigationSplitCoordinator.init(sidebar:content:detail:parameters:columnVisibility:navigationAuthority:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, int a7, uint64_t *a8, uint64_t a9)
{
  uint64_t v17 = *a8;
  uint64_t v23 = a8[1];
  int v24 = *((_DWORD *)a8 + 4);
  type metadata accessor for NavigationSplitSidebarStateMachine();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = 0;
  *(_WORD *)(v18 + 24) = 512;
  swift_unknownObjectWeakInit();
  *(void *)(v9 + 216) = v18;
  *(void *)(v9 + 248) = 1;
  *(void *)(v9 + 256) = 0;
  *(void *)(v9 + 264) = 0;
  *(void *)(v9 + 272) = 0;
  *(_OWORD *)(v9 + 304) = 0u;
  *(_OWORD *)(v9 + 320) = 0u;
  *(void *)(v9 + 336) = 0;
  *(void *)(v9 + 344) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(void *)(v9 + 352) = 0;
  *(unsigned char *)(v9 + 360) = 0;
  *(_DWORD *)(v9 + 364) = -1;
  long long v19 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v9 + 32) = v19;
  *(_OWORD *)(v9 + 48) = *(_OWORD *)(a1 + 32);
  *(void *)(v9 + 64) = *(void *)(a1 + 48);
  long long v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v9 + 72) = *(_OWORD *)a2;
  *(void *)(v9 + 120) = *(void *)(a2 + 48);
  *(_OWORD *)(v9 + 104) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v9 + 88) = v20;
  long long v21 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v9 + 128) = *(_OWORD *)a3;
  *(_OWORD *)(v9 + 144) = v21;
  *(_OWORD *)(v9 + 160) = *(_OWORD *)(a3 + 32);
  *(void *)(v9 + 176) = *(void *)(a3 + 48);
  *(void *)(v9 + 184) = a4;
  *(unsigned char *)(v9 + 192) = a5;
  *(void *)(v9 + 200) = a6;
  *(unsigned char *)(v9 + 208) = a7 & 1;
  *(unsigned char *)(v9 + 209) = BYTE1(a7) & 1;
  *(unsigned char *)(v9 + 210) = BYTE2(a7) & 1;
  *(void *)(v9 + 224) = v17;
  *(void *)(v9 + 232) = v23;
  *(_DWORD *)(v9 + 240) = v24;
  outlined init with take of NavigationAuthority(a9, v9 + 280);
  return v9;
}

uint64_t type metadata accessor for NavigationSplitSidebarStateMachine()
{
  return self;
}

uint64_t Sections.init(from:useFooters:)@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  outlined init with copy of _VariadicView_Children((uint64_t)a1, a3);
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v10 + 24))(&v20, v9, v10);
  if (v20 && (BOOL v11 = specialized Set.contains(_:)(MEMORY[0x1E4F40448], v20), swift_bridgeObjectRelease(), !v11) && v8)
  {
    swift_retain();
    uint64_t v12 = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
    swift_release();
    uint64_t v13 = &outlined read-only object #0 of Sections.init(from:useFooters:);
    if (!v12) {
      uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
    }
    *(void *)(a3 + 56) = v13;
    *(unsigned char *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = 0;
    uint64_t result = outlined destroy of _VariadicView_Children((uint64_t)a1);
    *(void *)(a3 + 80) = MEMORY[0x1E4FBC870];
  }
  else
  {
    LOBYTE(v20) = v8 == 0;
    if (a2) {
      uint64_t v15 = MEMORY[0x1E4FBC870];
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v21 = MEMORY[0x1E4FBC860];
    uint64_t v22 = v15;
    uint64_t v23 = MEMORY[0x1E4FBC860];
    char v24 = 0;
    uint64_t v25 = MEMORY[0x1E4FBC870];
    char v26 = 0;
    uint64_t v27 = 0;
    outlined init with copy of _VariadicView_Children((uint64_t)a1, (uint64_t)v19);
    lazy protocol witness table accessor for type SectionedIdentifierAccumulator and conformance SectionedIdentifierAccumulator();
    _ViewList_Backing.visitViews<A>(applying:from:)();
    outlined destroy of _ViewList_Backing((uint64_t)v19);
    uint64_t v16 = v22;
    *(void *)(a3 + 56) = v21;
    *(unsigned char *)(a3 + 64) = v24;
    uint64_t v17 = v25;
    *(void *)(a3 + 72) = v16;
    *(void *)(a3 + 80) = v17;
    if (!v8)
    {
      uint64_t v18 = v23;
      type metadata accessor for _ViewList_ID._Views<[_ViewList_ID]>();
      uint64_t v8 = swift_allocObject();
      *(void *)(v8 + 24) = v18;
      *(unsigned char *)(v8 + 16) = 1;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined destroy of _VariadicView_Children((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  *(void *)(a3 + 88) = v8;
  return result;
}

uint64_t outlined init with copy of _VariadicView_Children(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of ToolbarStorage.Entry.ID(uint64_t a1)
{
  return a1;
}

uint64_t destroy for ToolbarStorage.Entry.ID(uint64_t a1)
{
  uint64_t result = __swift_destroy_boxed_opaque_existential_1(a1);
  if (*(unsigned char *)(a1 + 80) == 1)
  {
    return __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  }
  return result;
}

uint64_t protocol witness for static UserDefaultKeyedFeature.key.getter in conformance EnableLazyLayoutReuseLogging()
{
  uint64_t v0 = static EnableLazyLayoutReuseLogging.key;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t one-time initialization function for settingsNotifications()
{
  _ss23_ContiguousArrayStorageCySo18NSNotificationNameaGMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<NSNotificationName>, (uint64_t (*)(uint64_t))type metadata accessor for NSNotificationName, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_18834BB80;
  uint64_t result = static AccessibilitySettings.animatedImagesEnabledDidChangeNotification.getter();
  *(void *)(v0 + 32) = result;
  if (*MEMORY[0x1E4FB9230])
  {
    id v2 = (id)*MEMORY[0x1E4FB9230];
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)1, 2, 1, (void *)v0);
    *(void *)(result + 16) = 2;
    *(void *)(result + 40) = v2;
    static AccessibilityCore.UserSettings.settingsNotifications = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for KeyboardShortcutBindingBehavior()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolbarCustomizationOptions()
{
  return &type metadata for ToolbarCustomizationOptions;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityChildBehavior.Contain(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AccessibilityChildBehavior.Contain and conformance AccessibilityChildBehavior.Contain();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance BarEdgeReader<A>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.setter in conformance EnableLazyStackLogging(char a1)
{
  uint64_t result = swift_beginAccess();
  static EnableLazyStackLogging.cacheduint64_t Value = a1;
  return result;
}

void type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t)&protocol witness table for LinearUIKitProgressView.Base, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>);
    }
  }
}

void type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, (uint64_t)&protocol witness table for UIKitCalendarViewRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
    }
  }
}

void @objc UIKitGestureRecognizer.pressesBegan(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIPress);
  lazy protocol witness table accessor for type UIScene and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type UIPress and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for UIPress);
  uint64_t v6 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a4;
  id v7 = a1;
  uint64_t v8 = specialized UIKitGestureRecognizer.convert(buttonEvents:with:)(v6);
  if (swift_weakLoadStrong())
  {
    specialized _dictionaryUpCast<A, B, C, D>(_:)((uint64_t)v8);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type UIKitGestureRecognizer and conformance UIKitGestureRecognizer();
    dispatch thunk of EventBindingBridge.send(_:source:)();

    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t result)
{
  uint64_t v1 = result;
  if (*(void *)(result + 16))
  {
    type metadata accessor for _DictionaryStorage<EventID, EventType>();
    uint64_t result = static _DictionaryStorage.allocate(capacity:)();
    uint64_t v2 = result;
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4FBC868];
  }
  uint64_t v32 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v31 = (unint64_t)(63 - v3) >> 6;
  int64_t v33 = 0;
  uint64_t v6 = v2 + 64;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v33 << 6);
      goto LABEL_27;
    }
    int64_t v11 = v33 + 1;
    if (__OFADD__(v33, 1))
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    if (v11 >= v31) {
      goto LABEL_36;
    }
    unint64_t v12 = *(void *)(v32 + 8 * v11);
    int64_t v13 = v33 + 1;
    if (!v12)
    {
      int64_t v13 = v33 + 2;
      if (v33 + 2 >= v31) {
        goto LABEL_36;
      }
      unint64_t v12 = *(void *)(v32 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v33 + 3;
        if (v33 + 3 >= v31) {
          goto LABEL_36;
        }
        unint64_t v12 = *(void *)(v32 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v33 + 4;
          if (v33 + 4 >= v31) {
            goto LABEL_36;
          }
          unint64_t v12 = *(void *)(v32 + 8 * v13);
          if (!v12)
          {
            int64_t v14 = v33 + 5;
            if (v33 + 5 >= v31)
            {
LABEL_36:
              swift_bridgeObjectRetain();
              outlined consume of Set<UIPress>.Iterator._Variant();
              return v2;
            }
            unint64_t v12 = *(void *)(v32 + 8 * v14);
            int64_t v13 = v33 + 5;
            if (!v12) {
              break;
            }
          }
        }
      }
    }
LABEL_26:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v33 = v13;
LABEL_27:
    uint64_t v15 = (Swift::UInt *)(*(void *)(v1 + 48) + 16 * v10);
    Swift::UInt v16 = *v15;
    Swift::UInt v17 = v15[1];
    uint64_t v18 = *(void *)(v1 + 56) + 32 * v10;
    uint64_t v19 = *(void *)v18;
    char v20 = *(unsigned char *)(v18 + 8);
    uint64_t v21 = *(void *)(v18 + 16);
    char v22 = *(unsigned char *)(v18 + 24);
    uint64_t v38 = MEMORY[0x1E4F40480];
    uint64_t v39 = MEMORY[0x1E4F40478];
    uint64_t v23 = swift_allocObject();
    *(void *)&long long v37 = v23;
    *(void *)(v23 + 16) = v19;
    *(unsigned char *)(v23 + 24) = v20;
    *(void *)(v23 + 32) = v21;
    *(unsigned char *)(v23 + 40) = v22;
    outlined init with take of OptionalBinaryInteger(&v37, (uint64_t)v34);
    outlined init with take of OptionalBinaryInteger(v34, (uint64_t)&v36);
    outlined init with take of OptionalBinaryInteger(&v36, (uint64_t)v35);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v16);
    Hasher._combine(_:)(v17);
    uint64_t result = Hasher._finalize()();
    uint64_t v24 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v6 + 8 * (v25 >> 6))) != 0)
    {
      unint64_t v7 = __clz(__rbit64((-1 << v25) & ~*(void *)(v6 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_37;
        }
        BOOL v29 = v26 == v28;
        if (v26 == v28) {
          unint64_t v26 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v6 + 8 * v26);
      }
      while (v30 == -1);
      unint64_t v7 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(void *)(v6 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v7;
    uint64_t v8 = (Swift::UInt *)(*(void *)(v2 + 48) + 16 * v7);
    *uint64_t v8 = v16;
    v8[1] = v17;
    outlined init with take of OptionalBinaryInteger(v35, *(void *)(v2 + 56) + 40 * v7);
    ++*(void *)(v2 + 16);
    uint64_t result = swift_retain();
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v31) {
      goto LABEL_36;
    }
    unint64_t v12 = *(void *)(v32 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_26;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  Swift::UInt *v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  Swift::UInt *v16;
  Swift::UInt v17;
  Swift::UInt v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  int64_t v38;
  long long v39;
  long long v40;
  long long v41;
  long long v42[3];
  long long v43[2];
  long long v44;
  long long v45;
  ValueMetadata *v46;
  unint64_t v47;

  uint64_t v1 = result;
  if (*(void *)(result + 16))
  {
    type metadata accessor for _DictionaryStorage<EventID, EventType>();
    uint64_t result = static _DictionaryStorage.allocate(capacity:)();
    uint64_t v2 = result;
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4FBC868];
  }
  long long v37 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  long long v36 = (unint64_t)(63 - v3) >> 6;
  uint64_t v38 = 0;
  uint64_t v6 = v2 + 64;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v38 << 6);
      goto LABEL_27;
    }
    int64_t v11 = v38 + 1;
    if (__OFADD__(v38, 1))
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    if (v11 >= v36) {
      goto LABEL_36;
    }
    unint64_t v12 = *(void *)(v37 + 8 * v11);
    int64_t v13 = v38 + 1;
    if (!v12)
    {
      int64_t v13 = v38 + 2;
      if (v38 + 2 >= v36) {
        goto LABEL_36;
      }
      unint64_t v12 = *(void *)(v37 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v38 + 3;
        if (v38 + 3 >= v36) {
          goto LABEL_36;
        }
        unint64_t v12 = *(void *)(v37 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v38 + 4;
          if (v38 + 4 >= v36) {
            goto LABEL_36;
          }
          unint64_t v12 = *(void *)(v37 + 8 * v13);
          if (!v12)
          {
            int64_t v14 = v38 + 5;
            if (v38 + 5 >= v36)
            {
LABEL_36:
              swift_bridgeObjectRetain();
              outlined consume of Set<UIPress>.Iterator._Variant();
              return v2;
            }
            unint64_t v12 = *(void *)(v37 + 8 * v14);
            int64_t v13 = v38 + 5;
            if (!v12) {
              break;
            }
          }
        }
      }
    }
LABEL_26:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    uint64_t v38 = v13;
LABEL_27:
    uint64_t v15 = v1;
    Swift::UInt v16 = (Swift::UInt *)(*(void *)(v1 + 48) + 16 * v10);
    Swift::UInt v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = *(void *)(v1 + 56) + 112 * v10;
    char v20 = *(void *)v19;
    uint64_t v21 = *(unsigned char *)(v19 + 8);
    char v22 = *(void *)(v19 + 16);
    int v40 = *(_OWORD *)(v19 + 40);
    uint64_t v41 = *(_OWORD *)(v19 + 24);
    uint64_t v39 = *(_OWORD *)(v19 + 56);
    uint64_t v23 = *(void *)(v19 + 72);
    uint64_t v24 = *(void *)(v19 + 80);
    unint64_t v25 = *(void *)(v19 + 88);
    unint64_t v26 = *(void *)(v19 + 96);
    char v27 = *(unsigned char *)(v19 + 104);
    id v46 = &type metadata for TouchEvent;
    uint64_t v47 = lazy protocol witness table accessor for type TouchEvent and conformance TouchEvent();
    unint64_t v28 = swift_allocObject();
    *(void *)&id v45 = v28;
    *(void *)(v28 + 16) = v20;
    *(unsigned char *)(v28 + 24) = v21;
    *(void *)(v28 + 32) = v22;
    *(_OWORD *)(v28 + 40) = v41;
    *(_OWORD *)(v28 + 56) = v40;
    *(_OWORD *)(v28 + 72) = v39;
    *(void *)(v28 + 88) = v23;
    *(void *)(v28 + 96) = v24;
    *(void *)(v28 + 104) = v25;
    *(void *)(v28 + 112) = v26;
    *(unsigned char *)(v28 + 120) = v27;
    outlined init with take of OptionalBinaryInteger(&v45, (uint64_t)v42);
    outlined init with take of OptionalBinaryInteger(v42, (uint64_t)&v44);
    outlined init with take of OptionalBinaryInteger(&v44, (uint64_t)v43);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v17);
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    BOOL v29 = -1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = result & ~v29;
    int64_t v31 = v30 >> 6;
    if (((-1 << v30) & ~*(void *)(v6 + 8 * (v30 >> 6))) != 0)
    {
      unint64_t v7 = __clz(__rbit64((-1 << v30) & ~*(void *)(v6 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v32 = 0;
      int64_t v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_37;
        }
        uint64_t v34 = v31 == v33;
        if (v31 == v33) {
          int64_t v31 = 0;
        }
        v32 |= v34;
        int v35 = *(void *)(v6 + 8 * v31);
      }
      while (v35 == -1);
      unint64_t v7 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(void *)(v6 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v7;
    uint64_t v8 = (Swift::UInt *)(*(void *)(v2 + 48) + 16 * v7);
    *uint64_t v8 = v17;
    v8[1] = v18;
    outlined init with take of OptionalBinaryInteger(v43, *(void *)(v2 + 56) + 40 * v7);
    ++*(void *)(v2 + 16);
    uint64_t result = swift_retain();
    uint64_t v1 = v15;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v36) {
      goto LABEL_36;
    }
    unint64_t v12 = *(void *)(v37 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_26;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt *v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  Swift::UInt *v16;
  Swift::UInt v17;
  Swift::UInt v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  long long v35[3];
  long long v36[2];
  long long v37;
  long long v38;
  ValueMetadata *v39;
  unint64_t v40;

  uint64_t v1 = result;
  if (*(void *)(result + 16))
  {
    type metadata accessor for _DictionaryStorage<EventID, EventType>();
    uint64_t result = static _DictionaryStorage.allocate(capacity:)();
    uint64_t v2 = result;
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4FBC868];
  }
  uint64_t v3 = 0;
  uint64_t v34 = v1 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v1 + 32);
  if (-v4 < 64) {
    unint64_t v5 = ~(-1 << -(char)v4);
  }
  else {
    unint64_t v5 = -1;
  }
  uint64_t v6 = v5 & *(void *)(v1 + 64);
  int64_t v33 = (unint64_t)(63 - v4) >> 6;
  unint64_t v7 = v2 + 64;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      int64_t v11 = v10 | (v3 << 6);
      goto LABEL_27;
    }
    unint64_t v12 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    if (v12 >= v33) {
      goto LABEL_36;
    }
    int64_t v13 = *(void *)(v34 + 8 * v12);
    int64_t v14 = v3 + 1;
    if (!v13)
    {
      int64_t v14 = v3 + 2;
      if (v3 + 2 >= v33) {
        goto LABEL_36;
      }
      int64_t v13 = *(void *)(v34 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v3 + 3;
        if (v3 + 3 >= v33) {
          goto LABEL_36;
        }
        int64_t v13 = *(void *)(v34 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v3 + 4;
          if (v3 + 4 >= v33) {
            goto LABEL_36;
          }
          int64_t v13 = *(void *)(v34 + 8 * v14);
          if (!v13)
          {
            uint64_t v15 = v3 + 5;
            if (v3 + 5 >= v33)
            {
LABEL_36:
              swift_bridgeObjectRetain();
              outlined consume of Set<UIPress>.Iterator._Variant();
              return v2;
            }
            int64_t v13 = *(void *)(v34 + 8 * v15);
            int64_t v14 = v3 + 5;
            if (!v13) {
              break;
            }
          }
        }
      }
    }
LABEL_26:
    uint64_t v6 = (v13 - 1) & v13;
    int64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
    uint64_t v3 = v14;
LABEL_27:
    Swift::UInt v16 = (Swift::UInt *)(*(void *)(v1 + 48) + 16 * v11);
    Swift::UInt v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = *(void *)(v1 + 56) + 40 * v11;
    char v20 = *(void *)v19;
    uint64_t v21 = *(unsigned char *)(v19 + 8);
    char v22 = *(void *)(v19 + 16);
    uint64_t v23 = *(void *)(v19 + 24);
    uint64_t v24 = *(void *)(v19 + 32);
    uint64_t v39 = &type metadata for HoverEvent;
    int v40 = lazy protocol witness table accessor for type HoverEvent and conformance HoverEvent();
    unint64_t v25 = swift_allocObject();
    *(void *)&uint64_t v38 = v25;
    *(void *)(v25 + 16) = v20;
    *(unsigned char *)(v25 + 24) = v21;
    *(void *)(v25 + 32) = v22;
    *(void *)(v25 + 40) = v23;
    *(void *)(v25 + 48) = v24;
    outlined init with take of OptionalBinaryInteger(&v38, (uint64_t)v35);
    outlined init with take of OptionalBinaryInteger(v35, (uint64_t)&v37);
    outlined init with take of OptionalBinaryInteger(&v37, (uint64_t)v36);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v17);
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    unint64_t v26 = -1 << *(unsigned char *)(v2 + 32);
    char v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v7 + 8 * (v27 >> 6))) != 0)
    {
      uint64_t v8 = __clz(__rbit64((-1 << v27) & ~*(void *)(v7 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      BOOL v29 = 0;
      uint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_37;
        }
        int64_t v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v7 + 8 * v28);
      }
      while (v32 == -1);
      uint64_t v8 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v7 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    unint64_t v9 = (Swift::UInt *)(*(void *)(v2 + 48) + 16 * v8);
    *unint64_t v9 = v17;
    v9[1] = v18;
    outlined init with take of OptionalBinaryInteger(v36, *(void *)(v2 + 56) + 40 * v8);
    ++*(void *)(v2 + 16);
    uint64_t result = swift_retain();
  }
  while (1)
  {
    int64_t v14 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v14 >= v33) {
      goto LABEL_36;
    }
    int64_t v13 = *(void *)(v34 + 8 * v14);
    ++v15;
    if (v13) {
      goto LABEL_26;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  Swift::UInt *v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  Swift::UInt *v15;
  Swift::UInt v16;
  Swift::UInt v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  int64_t v37;
  long long v38;
  long long v39;
  long long v40[3];
  long long v41[2];
  long long v42;
  long long v43;
  uint64_t v44;
  uint64_t v45;

  uint64_t v1 = result;
  if (*(void *)(result + 16))
  {
    type metadata accessor for _DictionaryStorage<EventID, EventType>();
    uint64_t result = static _DictionaryStorage.allocate(capacity:)();
    uint64_t v2 = result;
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4FBC868];
  }
  long long v36 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int v35 = (unint64_t)(63 - v3) >> 6;
  long long v37 = 0;
  uint64_t v6 = v2 + 64;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v37 << 6);
      goto LABEL_27;
    }
    int64_t v11 = v37 + 1;
    if (__OFADD__(v37, 1))
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    if (v11 >= v35) {
      goto LABEL_36;
    }
    unint64_t v12 = *(void *)(v36 + 8 * v11);
    int64_t v13 = v37 + 1;
    if (!v12)
    {
      int64_t v13 = v37 + 2;
      if (v37 + 2 >= v35) {
        goto LABEL_36;
      }
      unint64_t v12 = *(void *)(v36 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v37 + 3;
        if (v37 + 3 >= v35) {
          goto LABEL_36;
        }
        unint64_t v12 = *(void *)(v36 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v37 + 4;
          if (v37 + 4 >= v35) {
            goto LABEL_36;
          }
          unint64_t v12 = *(void *)(v36 + 8 * v13);
          if (!v12)
          {
            int64_t v14 = v37 + 5;
            if (v37 + 5 >= v35)
            {
LABEL_36:
              swift_bridgeObjectRetain();
              outlined consume of Set<UIPress>.Iterator._Variant();
              return v2;
            }
            unint64_t v12 = *(void *)(v36 + 8 * v14);
            int64_t v13 = v37 + 5;
            if (!v12) {
              break;
            }
          }
        }
      }
    }
LABEL_26:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    long long v37 = v13;
LABEL_27:
    uint64_t v15 = (Swift::UInt *)(*(void *)(v1 + 48) + 16 * v10);
    Swift::UInt v16 = *v15;
    Swift::UInt v17 = v15[1];
    uint64_t v18 = *(void *)(v1 + 56) + 96 * v10;
    uint64_t v19 = *(void *)(v18 + 16);
    char v20 = *(void *)(v18 + 24);
    uint64_t v21 = *(unsigned char *)(v18 + 32);
    char v22 = *(void *)(v18 + 40);
    uint64_t v23 = *(void *)(v18 + 48);
    uint64_t v38 = *(_OWORD *)v18;
    uint64_t v39 = *(_OWORD *)(v18 + 56);
    uint64_t v24 = *(void *)(v18 + 72);
    unint64_t v25 = *(void *)(v18 + 80);
    unint64_t v26 = *(unsigned char *)(v18 + 88);
    uint64_t v44 = MEMORY[0x1E4F41758];
    id v45 = MEMORY[0x1E4F41750];
    char v27 = swift_allocObject();
    *(void *)&uint64_t v43 = v27;
    *(_OWORD *)(v27 + 16) = v38;
    *(void *)(v27 + 32) = v19;
    *(void *)(v27 + 40) = v20;
    *(unsigned char *)(v27 + 48) = v21;
    *(void *)(v27 + 56) = v22;
    *(void *)(v27 + 64) = v23;
    *(_OWORD *)(v27 + 72) = v39;
    *(void *)(v27 + 88) = v24;
    *(void *)(v27 + 96) = v25;
    *(unsigned char *)(v27 + 104) = v26;
    outlined init with take of OptionalBinaryInteger(&v43, (uint64_t)v40);
    outlined init with take of OptionalBinaryInteger(v40, (uint64_t)&v42);
    outlined init with take of OptionalBinaryInteger(&v42, (uint64_t)v41);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v16);
    Hasher._combine(_:)(v17);
    uint64_t result = Hasher._finalize()();
    unint64_t v28 = -1 << *(unsigned char *)(v2 + 32);
    BOOL v29 = result & ~v28;
    uint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v6 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v7 = __clz(__rbit64((-1 << v29) & ~*(void *)(v6 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      int64_t v31 = 0;
      uint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_37;
        }
        int64_t v33 = v30 == v32;
        if (v30 == v32) {
          uint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v6 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v7 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v6 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v7;
    uint64_t v8 = (Swift::UInt *)(*(void *)(v2 + 48) + 16 * v7);
    *uint64_t v8 = v16;
    v8[1] = v17;
    outlined init with take of OptionalBinaryInteger(v41, *(void *)(v2 + 56) + 40 * v7);
    ++*(void *)(v2 + 16);
    uint64_t result = swift_retain();
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v35) {
      goto LABEL_36;
    }
    unint64_t v12 = *(void *)(v36 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_26;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

__n128 __swift_memcpy44_4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void type metadata accessor for AGSubgraphRef(uint64_t a1)
{
}

void *type metadata accessor for PrimitiveSelectionContainerModifier()
{
  return &unk_1ED461638;
}

ValueMetadata *type metadata accessor for InlineActionsSectionStyle()
{
  return &type metadata for InlineActionsSectionStyle;
}

ValueMetadata *type metadata accessor for DefaultProgressViewStyle()
{
  return &type metadata for DefaultProgressViewStyle;
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in ShadowSectionCollection<A>()
{
  return associated type witness table accessor for Collection.Index : Comparable in ShadowSectionCollection<A>();
}

{
  uint64_t vars8;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();

  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in ShadowRowCollection<A>()
{
  return associated type witness table accessor for Collection.Index : Comparable in ShadowSectionCollection<A>();
}

ValueMetadata *type metadata accessor for DefaultSectionStyle()
{
  return &type metadata for DefaultSectionStyle;
}

uint64_t protocol witness for Rule.value.getter in conformance ToolbarItem<A, B>.MakeView@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ToolbarItem.MakeView.value.getter(*(void *)(a1 + 24), a2);
}

BOOL static SearchField.IsNotConfiguredFromStyle.evaluate(inputs:)(uint64_t a1, ValueMetadata *a2)
{
  return a2 != &type metadata for SearchFieldConfiguration.Control;
}

uint64_t protocol witness for Rule.value.getter in conformance _ListValue<A, B>.Init2@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _ListValue.Init2.value.getter(*(void *)(a1 + 16), *(void *)(a1 + 32), a2);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for AccessibilityControlStyle<ButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, (uint64_t)&type metadata for LabelStyleConfiguration.Icon, (uint64_t)&type metadata for DetachedGeometryModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for AccessibilityControlStyle<ButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, (uint64_t)&type metadata for LabelStyleConfiguration.Title, (uint64_t)&type metadata for DisableDeferredAccessibilityAttachmentModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>();
    lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>> and conformance _BackgroundModifier<A>, (void (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>> and conformance _BackgroundModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>(255);
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>>, MenuStyleModifier<AccessibilityMenuStyle>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>>, MenuStyleModifier<AccessibilityMenuStyle>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>();
    type metadata accessor for _ViewModifier_Content<AccessibilityRepresentableStyleModifier>(255, &lazy cache variable for type metadata for SliderStyleModifier<AccessibilitySliderStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilitySliderStyle and conformance AccessibilitySliderStyle, (uint64_t)&type metadata for AccessibilitySliderStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SliderStyleModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>();
    type metadata accessor for AccessibilityControlStyle<ButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for ListStyleWriter<AccessibilityListStyle>, (uint64_t)&type metadata for AccessibilityListStyle, (uint64_t)&protocol witness table for AccessibilityListStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ListStyleWriter);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>();
    type metadata accessor for AccessibilityControlStyle<ButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for PickerStyleWriter<AccessibilityPickerStyle>, (uint64_t)&type metadata for AccessibilityPickerStyle, (uint64_t)&protocol witness table for AccessibilityPickerStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PickerStyleWriter);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>);
    }
  }
}

double static AccessibilityProxyModifier.GeometryTransformModifier._makeView(modifier:inputs:body:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, double *a4@<X8>)
{
  uint64_t v4 = *a2;
  int v5 = *((_DWORD *)a2 + 2);
  uint64_t v6 = a2[2];
  int v7 = *((_DWORD *)a2 + 6);
  int v8 = *((_DWORD *)a2 + 7);
  int v10 = *((_DWORD *)a2 + 8);
  int v9 = *((_DWORD *)a2 + 9);
  uint64_t v12 = a2[5];
  uint64_t v11 = a2[6];
  int v14 = *((_DWORD *)a2 + 14);
  int v13 = *((_DWORD *)a2 + 15);
  int v15 = *((_DWORD *)a2 + 16);
  int v16 = *((_DWORD *)a2 + 17);
  int v17 = *((_DWORD *)a2 + 18);
  int v18 = *((_DWORD *)a2 + 19);
  int v19 = *((_DWORD *)a2 + 20);
  uint64_t v29 = *a2;
  int v30 = v5;
  uint64_t v31 = v6;
  int v32 = v7;
  int v33 = v8;
  int v34 = v10;
  int v35 = v9;
  int v26 = v13;
  int v27 = v9;
  uint64_t v36 = v12;
  uint64_t v37 = v11;
  int v38 = v14;
  int v39 = v13;
  int v24 = v16;
  int v25 = v15;
  int v40 = v15;
  int v41 = v16;
  int v22 = v18;
  int v23 = v17;
  int v42 = v17;
  int v43 = v18;
  int v21 = v19;
  int v44 = v19;
  a3(&v45, a1, &v29);
  uint64_t v29 = v11;
  int v30 = v14;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    type metadata accessor for AccessibilityProxyModifier.GeometryTransformModifier();
    uint64_t v29 = v4;
    int v30 = v5;
    uint64_t v31 = v6;
    int v32 = v7;
    int v33 = v8;
    int v34 = v10;
    int v35 = v27;
    uint64_t v36 = v12;
    uint64_t v37 = v11;
    int v38 = v14;
    int v39 = v26;
    int v40 = v25;
    int v41 = v24;
    int v42 = v23;
    int v43 = v22;
    int v44 = v21;
    static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(0x100000000, 0x100000000, (uint64_t)&v29);
    LOBYTE(v29) = 0;
    _ViewOutputs.subscript.setter();
  }
  *(void *)a4 = v45;
  double result = v46;
  a4[1] = v46;
  return result;
}

uint64_t AccessibilityProxyModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v31 = a2;
  swift_getWitnessTable();
  type metadata accessor for _ViewModifier_Content();
  type metadata accessor for AccessibilityControlStyle<ButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityNodesKey>, (uint64_t)&type metadata for AccessibilityNodesKey, (uint64_t)&protocol witness table for AccessibilityNodesKey, MEMORY[0x1E4F41108]);
  type metadata accessor for ModifiedContent();
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  type metadata accessor for VStack();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v47 = &protocol witness table for HiddenModifierAllowingAccessibility;
  uint64_t v44 = swift_getWitnessTable();
  unint64_t v45 = lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier();
  uint64_t v43 = swift_getWitnessTable();
  uint64_t v27 = v5;
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v25 = type metadata accessor for _BackgroundModifier();
  uint64_t v6 = type metadata accessor for ModifiedContent();
  uint64_t v29 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  int v8 = (char *)&v22 - v7;
  uint64_t v24 = type metadata accessor for AccessibilityProxyModifier.GeometryTransformModifier();
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v28 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  int v23 = (char *)&v22 - v13;
  uint64_t v14 = swift_getWitnessTable();
  View.transformPreference<A>(_:_:)();
  long long v41 = v42;
  uint64_t v32 = v3;
  uint64_t v33 = v4;
  uint64_t v34 = v30;
  static Alignment.center.getter();
  unint64_t v15 = lazy protocol witness table accessor for type _PreferenceTransformModifier<AccessibilityNodesKey> and conformance _PreferenceTransformModifier<A>();
  uint64_t v39 = v14;
  unint64_t v40 = v15;
  uint64_t v16 = swift_getWitnessTable();
  View.background<A>(alignment:content:)();
  swift_release();
  uint64_t v17 = swift_getWitnessTable();
  uint64_t v37 = v16;
  uint64_t v38 = v17;
  uint64_t v18 = swift_getWitnessTable();
  MEMORY[0x18C113660](v18, v6, v24, v18);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v6);
  uint64_t v35 = v18;
  uint64_t v36 = &protocol witness table for AccessibilityProxyModifier<A>.GeometryTransformModifier;
  swift_getWitnessTable();
  int v19 = v23;
  static ViewBuilder.buildExpression<A>(_:)(v11);
  char v20 = *(void (**)(char *, uint64_t))(v28 + 8);
  v20(v11, v9);
  static ViewBuilder.buildExpression<A>(_:)(v19);
  return ((uint64_t (*)(char *, uint64_t))v20)(v19, v9);
}

uint64_t type metadata accessor for AccessibilityProxyModifier.GeometryTransformModifier()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for AccessibilityControlStyle<ButtonStyleConfiguration.Label>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<AccessibilityNodesKey> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<AccessibilityNodesKey> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<AccessibilityNodesKey> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for AccessibilityControlStyle<ButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityNodesKey>, (uint64_t)&type metadata for AccessibilityNodesKey, (uint64_t)&protocol witness table for AccessibilityNodesKey, MEMORY[0x1E4F41108]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<AccessibilityNodesKey> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>>, MenuStyleModifier<AccessibilityMenuStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>>, MenuStyleModifier<AccessibilityMenuStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>>();
    type metadata accessor for _ViewModifier_Content<AccessibilityRepresentableStyleModifier>(255, &lazy cache variable for type metadata for MenuStyleModifier<AccessibilityMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityMenuStyle and conformance AccessibilityMenuStyle, (uint64_t)&type metadata for AccessibilityMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>>, MenuStyleModifier<AccessibilityMenuStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>();
    type metadata accessor for _ViewModifier_Content<AccessibilityRepresentableStyleModifier>(255, &lazy cache variable for type metadata for ControlGroupStyleModifier<AccessibilityControlGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityControlGroupStyle and conformance AccessibilityControlGroupStyle, (uint64_t)&type metadata for AccessibilityControlGroupStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ControlGroupStyleModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>>);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<AccessibilityRepresentableStyleModifier>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t type metadata accessor for ControlGroupStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for GroupBoxStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for StepperStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for SliderStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for MenuStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>();
    type metadata accessor for _ViewModifier_Content<AccessibilityRepresentableStyleModifier>(255, &lazy cache variable for type metadata for GroupBoxStyleModifier<AccessibilityGroupBoxStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityGroupBoxStyle and conformance AccessibilityGroupBoxStyle, (uint64_t)&type metadata for AccessibilityGroupBoxStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GroupBoxStyleModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>();
    type metadata accessor for _ViewModifier_Content<AccessibilityRepresentableStyleModifier>(255, &lazy cache variable for type metadata for StepperStyleModifier<AccessibilityStepperStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityStepperStyle and conformance AccessibilityStepperStyle, (uint64_t)&type metadata for AccessibilityStepperStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for StepperStyleModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityProgressViewStyle and conformance AccessibilityProgressViewStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityProgressViewStyle and conformance AccessibilityProgressViewStyle;
  if (!lazy protocol witness table cache variable for type AccessibilityProgressViewStyle and conformance AccessibilityProgressViewStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProgressViewStyle and conformance AccessibilityProgressViewStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityControlGroupStyle and conformance AccessibilityControlGroupStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityControlGroupStyle and conformance AccessibilityControlGroupStyle;
  if (!lazy protocol witness table cache variable for type AccessibilityControlGroupStyle and conformance AccessibilityControlGroupStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityControlGroupStyle and conformance AccessibilityControlGroupStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityGroupBoxStyle and conformance AccessibilityGroupBoxStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityGroupBoxStyle and conformance AccessibilityGroupBoxStyle;
  if (!lazy protocol witness table cache variable for type AccessibilityGroupBoxStyle and conformance AccessibilityGroupBoxStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityGroupBoxStyle and conformance AccessibilityGroupBoxStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityStepperStyle and conformance AccessibilityStepperStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityStepperStyle and conformance AccessibilityStepperStyle;
  if (!lazy protocol witness table cache variable for type AccessibilityStepperStyle and conformance AccessibilityStepperStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityStepperStyle and conformance AccessibilityStepperStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilitySliderStyle and conformance AccessibilitySliderStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilitySliderStyle and conformance AccessibilitySliderStyle;
  if (!lazy protocol witness table cache variable for type AccessibilitySliderStyle and conformance AccessibilitySliderStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySliderStyle and conformance AccessibilitySliderStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityMenuStyle and conformance AccessibilityMenuStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityMenuStyle and conformance AccessibilityMenuStyle;
  if (!lazy protocol witness table cache variable for type AccessibilityMenuStyle and conformance AccessibilityMenuStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityMenuStyle and conformance AccessibilityMenuStyle);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>>, MenuStyleModifier<AccessibilityMenuStyle>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>>, MenuStyleModifier<AccessibilityMenuStyle>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>>, MenuStyleModifier<AccessibilityMenuStyle>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>>, MenuStyleModifier<AccessibilityMenuStyle>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>>, MenuStyleModifier<AccessibilityMenuStyle>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>>, MenuStyleModifier<AccessibilityMenuStyle>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>> and conformance <> ModifiedContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>();
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, (void (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<AccessibilityRepresentableStyleModifier> and conformance _ViewModifier_Content<A>, (void (*)(void))lazy protocol witness table accessor for type StyleContextWriter<AccessibilityRepresentableStyleContext> and conformance StyleContextWriter<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>();
    type metadata accessor for _ViewModifier_Content<AccessibilityRepresentableStyleModifier>(255, &lazy cache variable for type metadata for ProgressViewStyleModifier<AccessibilityProgressViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityProgressViewStyle and conformance AccessibilityProgressViewStyle, (uint64_t)&type metadata for AccessibilityProgressViewStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ProgressViewStyleModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>)
  {
    type metadata accessor for _ViewModifier_Content<AccessibilityRepresentableStyleModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<AccessibilityRepresentableStyleModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier, (uint64_t)&type metadata for AccessibilityRepresentableStyleModifier, MEMORY[0x1E4F408E0]);
    type metadata accessor for AccessibilityControlStyle<ButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for StyleContextWriter<AccessibilityRepresentableStyleContext>, MEMORY[0x1E4F41310], MEMORY[0x1E4F41308], MEMORY[0x1E4F40318]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<AccessibilityRepresentableStyleModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityRepresentableStyleModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityRepresentableStyleModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<AccessibilityRepresentableStyleModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<AccessibilityRepresentableStyleModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier, (uint64_t)&type metadata for AccessibilityRepresentableStyleModifier, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityRepresentableStyleModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<AccessibilityRepresentableStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type StyleContextWriter<AccessibilityRepresentableStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<AccessibilityRepresentableStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for AccessibilityControlStyle<ButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for StyleContextWriter<AccessibilityRepresentableStyleContext>, MEMORY[0x1E4F41310], MEMORY[0x1E4F41308], MEMORY[0x1E4F40318]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<AccessibilityRepresentableStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>)
  {
    type metadata accessor for AccessibilityControlStyle<ButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, (uint64_t)&type metadata for LabelStyleConfiguration.Title, (uint64_t)&type metadata for DisableDeferredAccessibilityAttachmentModifier, MEMORY[0x1E4F3FBA0]);
    type metadata accessor for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>);
    }
  }
}

void type metadata accessor for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>()
{
  if (!lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>();
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>);
    unint64_t v0 = type metadata accessor for _BackgroundModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>);
    type metadata accessor for AccessibilityControlStyle<ButtonStyleConfiguration.Label>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityAttachment.Key>, (uint64_t)&type metadata for AccessibilityAttachment.Key, (uint64_t)&protocol witness table for AccessibilityAttachment.Key, MEMORY[0x1E4F41108]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>)
  {
    type metadata accessor for AccessibilityControlStyle<ButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, (uint64_t)&type metadata for LabelStyleConfiguration.Icon, (uint64_t)&type metadata for DetachedGeometryModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>>, MenuStyleModifier<AccessibilityMenuStyle>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>> and conformance <> ModifiedContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>>, AddGestureModifier<_EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>>, AddGestureModifier<_EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>>, AddGestureModifier<_EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ArchivableLinkModifier>, LinkButtonModifierBody>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>>, AddGestureModifier<_EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>>>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>>, (void (*)(uint64_t))type metadata accessor for AddGestureModifier<_EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>>>);
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier(&lazy protocol witness table cache variable for type AddGestureModifier<_EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>>> and conformance AddGestureModifier<A>, (void (*)(uint64_t))type metadata accessor for AddGestureModifier<_EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>>, AddGestureModifier<_EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>>();
    lazy protocol witness table accessor for type _ViewModifier_Content<ButtonFocusInteractionModifier> and conformance _ViewModifier_Content<A>();
    lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>>)
  {
    type metadata accessor for KeyedDecodingContainer<ArchivableLinkModifier.CodingKeys>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ButtonFocusInteractionModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonFocusInteractionModifier and conformance ButtonFocusInteractionModifier, (uint64_t)&type metadata for ButtonFocusInteractionModifier, MEMORY[0x1E4F408E0]);
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t View.listStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ListStyleWriter();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  unint64_t v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

void type metadata accessor for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>)
  {
    _s7SwiftUI23InterfaceIdiomPredicateVyAA018ClarityUIInterfaceD0VGMaTm_1(255, &lazy cache variable for type metadata for InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, MEMORY[0x1E4F407A8], MEMORY[0x1E4F407A0], MEMORY[0x1E4F40C60]);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<CarPlayInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>);
    }
  }
}

void type metadata accessor for InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI23InterfaceIdiomPredicateVyAA018ClarityUIInterfaceD0VGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI23InterfaceIdiomPredicateVyAA018ClarityUIInterfaceD0VGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t static ListStyleWriter._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(*(void *)(a3 - 8) + 64)) {
    closure #1 in static ListStyleWriter._makeInputs(modifier:inputs:)(1, a3);
  }
  AGGraphCreateOffsetAttribute2();
  type metadata accessor for StyleType();
  lazy protocol witness table accessor for type ListStyleInput and conformance ListStyleInput();
  return PropertyList.subscript.setter();
}

uint64_t type metadata accessor for ListStyleWriter()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type ListStyleInput and conformance ListStyleInput()
{
  unint64_t result = lazy protocol witness table cache variable for type ListStyleInput and conformance ListStyleInput;
  if (!lazy protocol witness table cache variable for type ListStyleInput and conformance ListStyleInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListStyleInput and conformance ListStyleInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ListStyleInput and conformance ListStyleInput;
  if (!lazy protocol witness table cache variable for type ListStyleInput and conformance ListStyleInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListStyleInput and conformance ListStyleInput);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InterfaceIdiomPredicate<CarPlayInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type InterfaceIdiomPredicate<CarPlayInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>;
  if (!lazy protocol witness table cache variable for type InterfaceIdiomPredicate<CarPlayInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>)
  {
    type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, MEMORY[0x1E4F407A8], MEMORY[0x1E4F407A0], MEMORY[0x1E4F40C60]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InterfaceIdiomPredicate<CarPlayInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<ButtonFocusInteractionModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<ButtonFocusInteractionModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<ButtonFocusInteractionModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for KeyedDecodingContainer<ArchivableLinkModifier.CodingKeys>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ButtonFocusInteractionModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonFocusInteractionModifier and conformance ButtonFocusInteractionModifier, (uint64_t)&type metadata for ButtonFocusInteractionModifier, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<ButtonFocusInteractionModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ArchivableLinkModifier>, LinkButtonModifierBody>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t closure #1 in static ListStyleWriter._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2)
{
  _OWORD v7[2] = type metadata accessor for ListStyleWriter();
  v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

id specialized UIKitTextInput.update(in:)(uint64_t a1, uint64_t a2)
{
  swift_retain();
  swift_retain();
  objc_msgSend(v2, sel_setTextAlignment_, specialized NSTextAlignment.init(in:)(), a1, a2);
  uint64_t v14 = a1;
  uint64_t v16 = a2;
  EnvironmentValues.minimumScaleFactor.getter();
  double v6 = v5;
  static MinimumScaleFactorKey.defaultValue.getter();
  double v8 = v7;
  if (v6 < v7)
  {
    EnvironmentValues.effectiveFont.getter();
    uint64_t v17 = a2;
    uint64_t v9 = (void *)Font.platformFont(in:)();
    swift_release();
    CTFontRef.pointSize.getter();
    double v11 = v10;

    objc_msgSend(v2, sel_setMinimumFontSize_, v6 * v11, a1, v17);
  }
  id result = objc_msgSend(v2, sel_adjustsFontSizeToFitWidth, v14, v16);
  if (v6 < v8 != result)
  {
    return objc_msgSend(v2, sel_setAdjustsFontSizeToFitWidth_, v6 < v8);
  }
  return result;
}

uint64_t specialized NSTextAlignment.init(in:)()
{
  unsigned __int8 v0 = EnvironmentValues.multilineTextAlignment.getter();
  EnvironmentValues.layoutDirection.getter();
  EnvironmentValues.writingMode.getter();
  swift_release();
  swift_release();
  if (v2) {
    return v0;
  }
  if (v0)
  {
    if (v0 == 1) {
      return v0;
    }
    if ((v3 & 1) == 0) {
      return 2;
    }
    return 0;
  }
  if ((v3 & 1) == 0) {
    return 0;
  }
  return 2;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance LabelStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF78](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance PrimitiveTargetVisibilityModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

ValueMetadata *type metadata accessor for ScrollBounceBehavior()
{
  return &type metadata for ScrollBounceBehavior;
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance FetchController<A, B, C>@<X0>(uint64_t *a1@<X8>)
{
  swift_getObjectType();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance AlwaysOnFrameSpecifier(void **a1, void **a2)
{
  char v2 = *a1;
  char v3 = *a2;
  BOOL result = ((unint64_t)*a1 | (unint64_t)*a2) == 0;
  if (v2) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for BLSAlwaysOnFrameSpecifier);
    id v6 = v2;
    id v7 = v3;
    char v8 = static NSObject.== infix(_:_:)();

    return v8 & 1;
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in _TaskModifier.InnerModifier.body(content:)()
{
  char v2 = *(int **)(v0 + 32);
  char v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *char v3 = v1;
  v3[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  id v6 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v4 = (void *)swift_task_alloc();
  v3[2] = v4;
  *uint64_t v4 = v3;
  v4[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return v6();
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, DefinesSearchCompletionModifier, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, DefinesSearchCompletionModifier, EmptyModifier>)
  {
    uint64_t v0 = MEMORY[0x1E4F41020];
    _s7SwiftUI28StyleContextAcceptsPredicateVyAA026AccessibilityRepresentablecD0VGMaTm_0(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<TextInputSuggestionsContext>, MEMORY[0x1E4F41020], MEMORY[0x1E4F410E8]);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<TextInputSuggestionsContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<TextInputSuggestionsContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<TextInputSuggestionsContext>, v0);
    unint64_t v1 = type metadata accessor for StaticIf();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, DefinesSearchCompletionModifier, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type DefinesSearchCompletionModifier and conformance DefinesSearchCompletionModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type DefinesSearchCompletionModifier and conformance DefinesSearchCompletionModifier;
  if (!lazy protocol witness table cache variable for type DefinesSearchCompletionModifier and conformance DefinesSearchCompletionModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefinesSearchCompletionModifier and conformance DefinesSearchCompletionModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, KeyboardShortcutBindingBehavior<PrimitiveButtonStyleConfiguration.Label>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, KeyboardShortcutBindingBehavior<PrimitiveButtonStyleConfiguration.Label>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, KeyboardShortcutBindingBehavior<PrimitiveButtonStyleConfiguration.Label>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, KeyboardShortcutBindingBehavior<PrimitiveButtonStyleConfiguration.Label>, EmptyModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, KeyboardShortcutBindingBehavior<PrimitiveButtonStyleConfiguration.Label>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void type metadata accessor for StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, KeyboardShortcutBindingBehavior<PrimitiveButtonStyleConfiguration.Label>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, KeyboardShortcutBindingBehavior<PrimitiveButtonStyleConfiguration.Label>, EmptyModifier>)
  {
    type metadata accessor for ButtonStyleModifier<DefaultButtonStyle>(255, &lazy cache variable for type metadata for InvertedViewInputPredicate<NavigationButtonInput>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationButtonInput and conformance NavigationButtonInput, (uint64_t)&type metadata for NavigationButtonInput, MEMORY[0x1E4F40F30]);
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_1(255, &lazy cache variable for type metadata for KeyboardShortcutBindingBehavior<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for KeyboardShortcutBindingBehavior);
    lazy protocol witness table accessor for type InvertedViewInputPredicate<NavigationButtonInput> and conformance InvertedViewInputPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, KeyboardShortcutBindingBehavior<PrimitiveButtonStyleConfiguration.Label>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type InvertedViewInputPredicate<NavigationButtonInput> and conformance InvertedViewInputPredicate<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type InvertedViewInputPredicate<NavigationButtonInput> and conformance InvertedViewInputPredicate<A>;
  if (!lazy protocol witness table cache variable for type InvertedViewInputPredicate<NavigationButtonInput> and conformance InvertedViewInputPredicate<A>)
  {
    type metadata accessor for ButtonStyleModifier<DefaultButtonStyle>(255, &lazy cache variable for type metadata for InvertedViewInputPredicate<NavigationButtonInput>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationButtonInput and conformance NavigationButtonInput, (uint64_t)&type metadata for NavigationButtonInput, MEMORY[0x1E4F40F30]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvertedViewInputPredicate<NavigationButtonInput> and conformance InvertedViewInputPredicate<A>);
  }
  return result;
}

uint64_t assignWithCopy for ScrollView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  *(unsigned char *)(v7 + 1) = *(unsigned char *)(v8 + 1);
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  *(void *)(v7 + 16) = *(void *)(v8 + 16);
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  *(void *)(v7 + 32) = *(void *)(v8 + 32);
  *(unsigned char *)(v7 + 40) = *(unsigned char *)(v8 + 40);
  uint64_t v9 = (_OWORD *)(v7 + 48);
  uint64_t v10 = *(void *)(v8 + 48);
  if (*(void *)(v7 + 48))
  {
    if (v10)
    {
      uint64_t v11 = *(void *)(v8 + 56);
      *(void *)(v7 + 48) = v10;
      *(void *)(v7 + 56) = v11;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    outlined destroy of ScrollToTopGestureAction((uint64_t)v9);
  }
  else if (v10)
  {
    uint64_t v12 = *(void *)(v8 + 56);
    *(void *)(v7 + 48) = v10;
    *(void *)(v7 + 56) = v12;
    swift_retain();
    goto LABEL_8;
  }
  *uint64_t v9 = *(_OWORD *)(v8 + 48);
LABEL_8:
  swift_unknownObjectWeakCopyAssign();
  uint64_t v14 = (_OWORD *)(v7 + 80);
  uint64_t v13 = *(void *)(v7 + 80);
  *(void *)(v7 + 72) = *(void *)(v8 + 72);
  uint64_t v16 = (_OWORD *)(v8 + 80);
  uint64_t v15 = *(void *)(v8 + 80);
  if (v13)
  {
    if (v15)
    {
      uint64_t v17 = *(void *)(v8 + 88);
      *(void *)(v7 + 80) = v15;
      *(void *)(v7 + 88) = v17;
      swift_retain();
      swift_release();
      *(void *)(v7 + 96) = *(void *)(v8 + 96);
    }
    else
    {
      outlined destroy of RefreshAction(v7 + 80);
      uint64_t v19 = *(void *)(v8 + 96);
      *uint64_t v14 = *v16;
      *(void *)(v7 + 96) = v19;
    }
  }
  else if (v15)
  {
    uint64_t v18 = *(void *)(v8 + 88);
    *(void *)(v7 + 80) = v15;
    *(void *)(v7 + 88) = v18;
    *(void *)(v7 + 96) = *(void *)(v8 + 96);
    swift_retain();
  }
  else
  {
    long long v20 = *v16;
    *(void *)(v7 + 96) = *(void *)(v8 + 96);
    *uint64_t v14 = v20;
  }
  *(void *)(v7 + 104) = *(void *)(v8 + 104);
  *(void *)(v7 + 112) = *(void *)(v8 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata completion function for CommandGroupPlacement()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t protocol witness for ShapeStyle._apply(to:) in conformance BorderedButtonColorSpec.LabelStyle(uint64_t a1)
{
  unint64_t v2 = *v1;
  if (v2)
  {
    if (v2 == 1)
    {
      uint64_t v3 = 2;
      goto LABEL_9;
    }
    if (v2 == 2)
    {
      uint64_t v3 = 3;
LABEL_9:
      return MEMORY[0x1F40FFE48](a1, v3);
    }
    swift_retain();
    Color._apply(to:)();
    return outlined consume of BorderedButtonColorSpec.LabelStyle(v2);
  }
  else
  {
    static Color.white.getter();
    Color._apply(to:)();
    return swift_release();
  }
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ItemSheetPresentationModifier<A, B, C>()
{
  return swift_getOpaqueTypeConformance2();
}

double one-time initialization function for automatic()
{
  qword_1E9008CD8 = 0;
  double result = 0.0;
  static ToolbarItemPlacement.automatic = 0u;
  unk_1E9008CC8 = 0u;
  byte_1E9008CE0 = 2;
  return result;
}

double static _SizeFittingRoot._makeView(root:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, double *a4@<X8>)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  int v33 = *a1;
  int v5 = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  unsigned int v8 = *(_DWORD *)(a2 + 24);
  unsigned int v7 = *(_DWORD *)(a2 + 28);
  unsigned int v9 = *(_DWORD *)(a2 + 32);
  unsigned int v10 = *(_DWORD *)(a2 + 36);
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v39 = *(void *)(a2 + 48);
  unsigned int v48 = *(_DWORD *)(a2 + 64);
  unsigned int v49 = *(_DWORD *)(a2 + 60);
  unsigned int v46 = *(_DWORD *)(a2 + 72);
  unsigned int v47 = *(_DWORD *)(a2 + 68);
  unsigned int v45 = *(_DWORD *)(a2 + 76);
  unsigned int v43 = *(_DWORD *)(a2 + 56);
  int v44 = *(_DWORD *)(a2 + 80);
  uint64_t v52 = *(void *)a2;
  uint64_t v4 = v52;
  LODWORD(v53) = v5;
  uint64_t v54 = v6;
  *(void *)&long long v55 = __PAIR64__(v7, v8);
  unsigned int v40 = v10;
  unsigned int v41 = v7;
  *((void *)&v55 + 1) = __PAIR64__(v10, v9);
  unsigned int v35 = v9;
  uint64_t v56 = v11;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v12 = _ViewListInputs.init(_:)();
  uint64_t v13 = v61;
  int v27 = v62;
  uint64_t v36 = v65;
  uint64_t v37 = v63;
  uint64_t v31 = v67;
  uint64_t v32 = v66;
  int v30 = DWORD2(v67);
  unint64_t v38 = v68;
  char v29 = v69;
  long long v26 = v64;
  uint64_t v61 = v52;
  int v62 = v5;
  uint64_t v63 = v6;
  *(void *)&long long v64 = __PAIR64__(v7, v8);
  *((void *)&v64 + 1) = __PAIR64__(v10, v9);
  uint64_t v65 = v11;
  uint64_t v66 = v39;
  *(void *)&long long v67 = __PAIR64__(v49, v43);
  *((void *)&v67 + 1) = __PAIR64__(v47, v48);
  unint64_t v68 = __PAIR64__(v45, v46);
  int v69 = v44;
  a3(&v52, v12, &v61);
  uint64_t v61 = v13;
  int v62 = v27;
  uint64_t v63 = v37;
  long long v64 = v26;
  uint64_t v65 = v36;
  uint64_t v66 = v32;
  *(void *)&long long v67 = v31;
  DWORD2(v67) = v30;
  unint64_t v68 = v38;
  LOBYTE(v69) = v29;
  int v28 = _ViewListOutputs.makeAttribute(inputs:)();
  outlined destroy of _ViewListOutputs((uint64_t)&v52);
  uint64_t v61 = v4;
  int v14 = v5;
  int v62 = v5;
  uint64_t v63 = v6;
  *(void *)&long long v64 = __PAIR64__(v41, v8);
  uint64_t v65 = v11;
  uint64_t v66 = v39;
  *(void *)&long long v67 = __PAIR64__(v49, v43);
  *((void *)&v67 + 1) = __PAIR64__(v47, v48);
  unint64_t v68 = __PAIR64__(v45, v46);
  int v69 = v44;
  DWORD2(v64) = v9;
  HIDWORD(v64) = v10 & 0xFFFFFFFD;
  swift_retain();
  uint64_t v15 = v6;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferencesInputs.remove<A>(_:)();
  uint64_t v52 = v61;
  LODWORD(v53) = v62;
  uint64_t v54 = v63;
  long long v55 = v64;
  uint64_t v56 = v65;
  uint64_t v57 = v66;
  long long v58 = v67;
  unint64_t v59 = v68;
  int v60 = v69;
  _ViewInputs.makeIndirectOutputs()();
  LODWORD(v52) = v33;
  type metadata accessor for _GraphValue<LimitedAvailabilityCommandContent>(0, &lazy cache variable for type metadata for _GraphValue<_SizeFittingRoot>, (uint64_t)&type metadata for _SizeFittingRoot, MEMORY[0x1E4F3F590]);
  int v16 = _GraphValue.value.getter();
  uint64_t v17 = v50;
  unsigned int v18 = LODWORD(v51);
  unsigned int v34 = HIDWORD(v51);
  type metadata accessor for SizeFittingState();
  uint64_t v19 = swift_allocObject();
  id v20 = (id)AGSubgraphGetCurrent();
  if (!v20) {
    __break(1u);
  }
  uint64_t v21 = MEMORY[0x1E4FBC868];
  *(void *)(v19 + 128) = v20;
  *(void *)(v19 + 136) = v21;
  *(_DWORD *)(v19 + 144) = 0;
  *(_DWORD *)(v19 + 16) = v16;
  *(_DWORD *)(v19 + 20) = v28;
  *(void *)(v19 + 24) = v4;
  *(_DWORD *)(v19 + 32) = v14;
  *(void *)(v19 + 40) = v15;
  *(_DWORD *)(v19 + 48) = v8;
  *(_DWORD *)(v19 + 52) = v41;
  *(_DWORD *)(v19 + 56) = v9;
  *(_DWORD *)(v19 + 60) = v40;
  *(void *)(v19 + 64) = v11;
  *(void *)(v19 + 72) = v39;
  *(_DWORD *)(v19 + 80) = v43;
  *(_DWORD *)(v19 + 84) = v49;
  *(_DWORD *)(v19 + 88) = v48;
  *(_DWORD *)(v19 + 92) = v47;
  *(_DWORD *)(v19 + 96) = v46;
  *(_DWORD *)(v19 + 100) = v45;
  *(_DWORD *)(v19 + 104) = v44;
  *(void *)(v19 + 112) = v17;
  *(_DWORD *)(v19 + 120) = v18;
  *(_DWORD *)(v19 + 124) = v34;
  uint64_t v52 = v19;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type SizeFittingMux and conformance SizeFittingMux();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  uint64_t v52 = v17;
  unint64_t v53 = __PAIR64__(v34, v18);
  _ViewOutputs.setIndirectDependency(_:)();
  if ((v40 & 2) != 0)
  {
    uint64_t v52 = v19;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type SizeFittingLayoutComputer and conformance SizeFittingLayoutComputer();
    swift_retain();
    Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    LOBYTE(v52) = 0;
    _ViewOutputs.layoutComputer.setter();
  }
  lazy protocol witness table accessor for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  uint64_t v22 = v52;
  if (!v52) {
    goto LABEL_7;
  }
  unint64_t v23 = v53;
  uint64_t v52 = v4;
  LODWORD(v53) = v14;
  uint64_t v54 = v15;
  *(void *)&long long v55 = __PAIR64__(v41, v8);
  *((void *)&v55 + 1) = __PAIR64__(v40, v35);
  uint64_t v56 = v11;
  uint64_t v57 = v39;
  *(void *)&long long v58 = __PAIR64__(v49, v43);
  *((void *)&v58 + 1) = __PAIR64__(v47, v48);
  unint64_t v59 = __PAIR64__(v45, v46);
  int v60 = v44;
  if ((*(uint64_t (**)(uint64_t *, uint64_t, unint64_t))(v23 + 8))(&v52, v22, v23))
  {
    uint64_t v52 = v4;
    LODWORD(v53) = v14;
    uint64_t v54 = v15;
    *(void *)&long long v55 = __PAIR64__(v41, v8);
    *((void *)&v55 + 1) = __PAIR64__(v40, v35);
    uint64_t v56 = v11;
    uint64_t v57 = v39;
    *(void *)&long long v58 = __PAIR64__(v49, v43);
    *((void *)&v58 + 1) = __PAIR64__(v47, v48);
    unint64_t v59 = __PAIR64__(v45, v46);
    int v60 = v44;
    (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, unint64_t))(v23 + 16))(&v52, v19, &v50, v22, v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
LABEL_7:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  *(void *)a4 = v50;
  double result = v51;
  a4[1] = v51;
  return result;
}

unint64_t lazy protocol witness table accessor for type SizeFittingLayoutComputer and conformance SizeFittingLayoutComputer()
{
  unint64_t result = lazy protocol witness table cache variable for type SizeFittingLayoutComputer and conformance SizeFittingLayoutComputer;
  if (!lazy protocol witness table cache variable for type SizeFittingLayoutComputer and conformance SizeFittingLayoutComputer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SizeFittingLayoutComputer and conformance SizeFittingLayoutComputer);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SizeFittingLayoutComputer and conformance SizeFittingLayoutComputer;
  if (!lazy protocol witness table cache variable for type SizeFittingLayoutComputer and conformance SizeFittingLayoutComputer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SizeFittingLayoutComputer and conformance SizeFittingLayoutComputer);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SizeFittingLayoutComputer and conformance SizeFittingLayoutComputer;
  if (!lazy protocol witness table cache variable for type SizeFittingLayoutComputer and conformance SizeFittingLayoutComputer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SizeFittingLayoutComputer and conformance SizeFittingLayoutComputer);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SizeFittingMux and conformance SizeFittingMux()
{
  unint64_t result = lazy protocol witness table cache variable for type SizeFittingMux and conformance SizeFittingMux;
  if (!lazy protocol witness table cache variable for type SizeFittingMux and conformance SizeFittingMux)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SizeFittingMux and conformance SizeFittingMux);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SizeFittingMux and conformance SizeFittingMux;
  if (!lazy protocol witness table cache variable for type SizeFittingMux and conformance SizeFittingMux)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SizeFittingMux and conformance SizeFittingMux);
  }
  return result;
}

uint64_t type metadata accessor for SizeFittingState()
{
  return self;
}

uint64_t closure #1 in SizeFittingState.applyChildren(selectLast:to:)(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(long long *, BOOL))
{
  uint64_t v8 = a1[1];
  if (v8 < 0) {
    goto LABEL_40;
  }
  if (!v8) {
    return 1;
  }
  uint64_t v9 = a4;
  unsigned int v10 = a2;
  uint64_t v11 = a1;
  uint64_t v12 = 0;
  uint64_t v62 = a3 - 1;
  uint64_t v13 = (uint64_t *)(a4 + 136);
  uint64_t v58 = a1[1];
  unint64_t v59 = (uint64_t *)(a4 + 136);
  while (v8 != v12)
  {
    uint64_t v14 = v11[3];
    *(void *)&v66[0] = v11[2];
    *((void *)&v66[0] + 1) = v14;
    _ViewList_ID.elementID(at:)();
    long long v69 = v67;
    _ViewList_ID.canonicalID.getter();
    swift_bridgeObjectRelease();
    uint64_t v65 = LODWORD(v66[0]);
    uint64_t v64 = DWORD1(v66[0]);
    uint64_t v6 = *((void *)&v66[0] + 1);
    uint64_t v15 = *v10;
    swift_beginAccess();
    uint64_t v7 = *v13;
    if (!*(void *)(*v13 + 16)) {
      goto LABEL_15;
    }
    uint64_t v16 = v65 | (v64 << 32);
    swift_retain();
    unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v6);
    if ((v18 & 1) == 0)
    {
      swift_release();
      uint64_t v11 = a1;
LABEL_15:
      swift_endAccess();
      if (*(unsigned char *)(a5 + 8))
      {
        id v35 = (id)AGSubgraphGetGraph();
        uint64_t v36 = (void *)AGSubgraphCreate();

        AGGraphClearUpdate();
        id v37 = (id)AGSubgraphGetCurrent();
        AGSubgraphSetCurrent();
        closure #1 in closure #1 in SizeFittingState.applyChildren(selectLast:to:)(v9, v11, v12, v36, v15, (uint64_t)&v67);
        AGSubgraphSetCurrent();

        AGGraphSetUpdate();
        long long v70 = v67;
        v71[0] = v68[0];
        *(_OWORD *)((char *)v71 + 9) = *(_OWORD *)((char *)v68 + 9);
        swift_beginAccess();
        swift_retain();
        outlined retain of SizeFittingState.Child((void **)&v70);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&long long v69 = *(void *)(v9 + 136);
        *(void *)(v9 + 136) = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v70, v65 | (v64 << 32), v6, isUniquelyReferenced_nonNull_native);
        uint64_t v7 = *(void *)(v9 + 136);
        *(void *)(v9 + 136) = v69;
        swift_release();
        swift_bridgeObjectRelease();
        swift_endAccess();
        if (*(unsigned char *)(a5 + 8) == 1)
        {
          v72[0] = v71[0];
          v66[0] = v71[0];
          outlined retain of [Text.Modifier]((uint64_t)v72);
          uint64_t v7 = a6(v66, v15 == v62);

          outlined release of SizeFittingState.Child((void **)&v70);
          swift_release();
          outlined release of _LazyLayout_Placements((uint64_t)v72);
          unsigned int v10 = a2;
          if (v7)
          {
            *(void *)a5 = *a2;
            *(unsigned char *)(a5 + 8) = 0;
          }
        }
        else
        {

          swift_release();
          outlined release of SizeFittingState.Child((void **)&v70);
          unsigned int v10 = a2;
        }
        uint64_t v8 = v58;
        uint64_t v13 = v59;
      }
      else
      {
        swift_release();
      }
      goto LABEL_33;
    }
    uint64_t v19 = *(void *)(v7 + 56) + 48 * v17;
    id v20 = *(void **)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    uint64_t v22 = *(void *)(v19 + 16);
    unsigned int v52 = *(_DWORD *)(v19 + 24);
    int v23 = *(_DWORD *)(v19 + 32);
    unsigned int v55 = *(_DWORD *)(v19 + 28);
    char v24 = *(unsigned char *)(v19 + 40);
    swift_endAccess();
    uint64_t v60 = v21;
    swift_retain();
    uint64_t v61 = v22;
    swift_bridgeObjectRetain();
    uint64_t v7 = v20;
    swift_release();
    char v51 = v24;
    if ((v24 & 1) != 0 || *(unsigned char *)(a5 + 8) == 1)
    {
      int v25 = *(_DWORD *)(a4 + 144);
      if (v23 == v25) {
        goto LABEL_41;
      }
      uint64_t v13 = v59;
      swift_beginAccess();
      swift_retain();
      swift_bridgeObjectRetain_n();
      id v57 = (id)v7;
      swift_retain();
      char v26 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&v66[0] = *v59;
      uint64_t v7 = *(void *)&v66[0];
      *unint64_t v59 = 0x8000000000000000;
      unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v6);
      uint64_t v29 = *(void *)(v7 + 16);
      BOOL v30 = (v27 & 1) == 0;
      uint64_t v31 = v29 + v30;
      if (__OFADD__(v29, v30)) {
        goto LABEL_38;
      }
      char v32 = v27;
      if (*(void *)(v7 + 24) >= v31)
      {
        if ((v26 & 1) == 0)
        {
          uint64_t v7 = (uint64_t)v66;
          specialized _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v31, v26);
        uint64_t v7 = *(void *)&v66[0];
        unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v6);
        if ((v32 & 1) != (v34 & 1)) {
          goto LABEL_42;
        }
        unint64_t v28 = v33;
      }
      uint64_t v39 = *(void **)&v66[0];
      if (v32)
      {
        uint64_t v40 = *(void *)(*(void *)&v66[0] + 56) + 48 * v28;
        unsigned int v41 = *(void **)v40;
        swift_bridgeObjectRelease();

        swift_release();
        *(void *)uint64_t v40 = v57;
        *(void *)(v40 + 8) = v60;
        *(void *)(v40 + 16) = v61;
        *(_DWORD *)(v40 + 24) = v52;
        *(_DWORD *)(v40 + 28) = v55;
        *(_DWORD *)(v40 + 32) = v25;
        *(_DWORD *)(v40 + 36) = v15;
        *(unsigned char *)(v40 + 40) = v51;
      }
      else
      {
        *(void *)(*(void *)&v66[0] + 8 * (v28 >> 6) + 64) |= 1 << v28;
        uint64_t v42 = v39[6] + 16 * v28;
        *(_DWORD *)uint64_t v42 = v65;
        *(_DWORD *)(v42 + 4) = v64;
        *(void *)(v42 + 8) = v6;
        uint64_t v43 = v39[7] + 48 * v28;
        *(void *)uint64_t v43 = v57;
        *(void *)(v43 + 8) = v60;
        *(void *)(v43 + 16) = v61;
        *(_DWORD *)(v43 + 24) = v52;
        *(_DWORD *)(v43 + 28) = v55;
        *(_DWORD *)(v43 + 32) = v25;
        *(_DWORD *)(v43 + 36) = v15;
        *(unsigned char *)(v43 + 40) = v51;
        uint64_t v44 = v39[2];
        BOOL v45 = __OFADD__(v44, 1);
        uint64_t v46 = v44 + 1;
        if (v45) {
          goto LABEL_39;
        }
        void v39[2] = v46;
        swift_retain();
      }
      uint64_t v7 = *v59;
      *unint64_t v59 = (uint64_t)v39;
      swift_release();
      swift_bridgeObjectRelease();
      swift_endAccess();
      uint64_t v9 = a4;
      unsigned int v10 = a2;
      uint64_t v8 = v58;
      if (*(unsigned char *)(a5 + 8))
      {
        *(void *)&long long v67 = v61;
        *((void *)&v67 + 1) = __PAIR64__(v55, v52);
        uint64_t v7 = a6(&v67, v15 == v62);
        swift_release();

        swift_bridgeObjectRelease_n();
        swift_release();
        uint64_t v11 = a1;
        if (v7)
        {
          *(void *)a5 = *a2;
          *(unsigned char *)(a5 + 8) = 0;
        }
      }
      else
      {
        swift_release();

        swift_release();
        swift_bridgeObjectRelease_n();
        uint64_t v11 = a1;
      }
    }
    else
    {

      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v11 = a1;
      uint64_t v8 = v58;
      uint64_t v13 = v59;
      uint64_t v9 = a4;
    }
LABEL_33:
    if (v15 != v62)
    {
      ++v12;
      ++*v10;
      if (v8 != v12) {
        continue;
      }
    }
    return v15 != v62;
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  *(void *)&long long v67 = 0;
  *((void *)&v67 + 1) = 0xE000000000000000;
  swift_bridgeObjectRetain_n();
  id v48 = (id)v7;
  swift_retain();
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  *(void *)&long long v67 = 0xD00000000000001FLL;
  *((void *)&v67 + 1) = 0x80000001883373C0;
  *(void *)&v66[0] = __PAIR64__(v64, v65);
  *((void *)&v66[0] + 1) = v6;
  v49._uint64_t countAndFlagsBits = _ViewList_ID.Canonical.description.getter();
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_42:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in SizeFittingLayoutComputer.Engine.explicitAlignment(_:at:)(double *a1, char a2)
{
  return closure #1 in closure #1 in SizeFittingLayoutComputer.Engine.explicitAlignment(_:at:)(a1, a2, *(char **)(v2 + 48), *(void *)(v2 + 56), *(double *)(v2 + 16), *(double *)(v2 + 24), *(double *)(v2 + 32), *(double *)(v2 + 40));
}

uint64_t closure #1 in closure #1 in SizeFittingLayoutComputer.Engine.explicitAlignment(_:at:)(double *a1, char a2, char *a3, uint64_t a4, double a5, double a6, double a7, double a8)
{
  double v27 = *a1;
  double v28 = a1[1];
  if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
  {
    static LayoutComputer.defaultValue.getter();
    double v15 = v27;
    double v16 = v28;
  }
  else
  {
    uint64_t Value = (double *)AGGraphGetValue();
    double v15 = *Value;
    double v16 = Value[1];
    swift_retain();
  }
  double v28 = a6;
  double v30 = a8;
  ViewSize.proposal.getter();
  double v17 = v31;
  char v18 = LOBYTE(v32);
  double v27 = v31;
  LOBYTE(v28) = LOBYTE(v32);
  double v29 = v33;
  LOBYTE(v30) = v34;
  if (Axis.Set.contains(_:)()) {
    _ProposedSize.width.setter();
  }
  if (Axis.Set.contains(_:)()) {
    _ProposedSize.height.setter();
  }
  double v31 = v15;
  double v32 = v16;
  LayoutComputer.sizeThatFits(_:)();
  if ((a2 & 1) != 0
    || (char v21 = *a3,
        double v27 = v17,
        LOBYTE(v28) = v18,
        double v29 = v33,
        LOBYTE(v30) = v34,
        _SizeFittingRoot.size(_:fits:)(v19, v20, (uint64_t)&v27, v21)))
  {
    double v31 = v15;
    double v32 = v16;
    double v27 = a5;
    double v28 = a6;
    double v29 = a7;
    double v30 = a8;
    uint64_t v22 = LayoutComputer.explicitAlignment(_:at:)();
    char v24 = v23;
    swift_release();
    *(void *)a4 = v22;
    *(unsigned char *)(a4 + 8) = v24 & 1;
    return 1;
  }
  else
  {
    swift_release();
    return 0;
  }
}

BOOL _SizeFittingRoot.size(_:fits:)(double a1, double a2, uint64_t a3, char a4)
{
  if (a4)
  {
    double v7 = COERCE_DOUBLE(_ProposedSize.width.getter());
    if (v8) {
      double v7 = INFINITY;
    }
    if (v7 < a1) {
      return 0;
    }
  }
  if ((a4 & 2) == 0) {
    return 1;
  }
  double v10 = COERCE_DOUBLE(_ProposedSize.height.getter());
  if (v11) {
    double v10 = INFINITY;
  }
  return v10 >= a2;
}

BOOL partial apply for closure #1 in closure #1 in closure #1 in SizeFittingLayoutComputer.Engine.sizeThatFits(_:)(uint64_t *a1, uint64_t a2)
{
  return closure #1 in closure #1 in closure #1 in SizeFittingLayoutComputer.Engine.sizeThatFits(_:)(a1, a2, *(char **)(v2 + 16), *(void *)(v2 + 24), *(unsigned char *)(v2 + 32), *(void *)(v2 + 40), *(unsigned char *)(v2 + 48), *(void **)(v2 + 56));
}

BOOL closure #1 in closure #1 in closure #1 in SizeFittingLayoutComputer.Engine.sizeThatFits(_:)(uint64_t *a1, uint64_t a2, char *a3, uint64_t a4, char a5, uint64_t a6, char a7, void *a8)
{
  uint64_t v25 = *a1;
  uint64_t v26 = a1[1];
  if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
  {
    static LayoutComputer.defaultValue.getter();
  }
  else
  {
    AGGraphGetValue();
    swift_retain();
  }
  uint64_t v25 = a4;
  LOBYTE(v26) = a5 & 1;
  uint64_t v27 = a6;
  char v28 = a7 & 1;
  if (Axis.Set.contains(_:)()) {
    _ProposedSize.width.setter();
  }
  if (Axis.Set.contains(_:)()) {
    _ProposedSize.height.setter();
  }
  LayoutComputer.sizeThatFits(_:)();
  double v15 = v14;
  double v17 = v16;
  uint64_t v25 = a4;
  char v18 = a5 & 1;
  LOBYTE(v26) = v18;
  uint64_t v27 = a6;
  char v19 = a7 & 1;
  char v28 = v19;
  LayoutComputer.sizeThatFits(_:)();
  *a8 = v20;
  a8[1] = v21;
  char v22 = *a3;
  uint64_t v25 = a4;
  LOBYTE(v26) = v18;
  uint64_t v27 = a6;
  char v28 = v19;
  BOOL v23 = _SizeFittingRoot.size(_:fits:)(v15, v17, (uint64_t)&v25, v22);
  swift_release();
  return v23;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  int v5 = (void **)v4;
  double v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      char v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7] + 48 * v12;
    return outlined assign with take of SizeFittingState.Child((uint64_t)a1, v19);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);

  return swift_retain();
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  int v5 = (void *)(a5[6] + 16 * result);
  *int v5 = a2;
  v5[1] = a3;
  uint64_t v6 = (_OWORD *)(a5[7] + 48 * result);
  long long v7 = a4[1];
  _OWORD *v6 = *a4;
  v6[1] = v7;
  *(_OWORD *)((char *)v6 + 25) = *(_OWORD *)((char *)a4 + 25);
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

{
  void *v5;
  _OWORD *v6;
  long long v7;
  long long v8;
  long long v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a5[(result >> 6) + 8] |= 1 << result;
  int v5 = (void *)(a5[6] + 16 * result);
  *int v5 = a2;
  v5[1] = a3;
  uint64_t v6 = (_OWORD *)(a5[7] + 112 * result);
  long long v7 = a4[1];
  _OWORD *v6 = *a4;
  v6[1] = v7;
  *(_OWORD *)((char *)v6 + 89) = *(_OWORD *)((char *)a4 + 89);
  uint64_t v8 = a4[5];
  v6[4] = a4[4];
  v6[5] = v8;
  BOOL v9 = a4[3];
  v6[2] = a4[2];
  v6[3] = v9;
  uint64_t v10 = a5[2];
  char v11 = __OFADD__(v10, 1);
  unint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a5[2] = v12;
  }
  return result;
}

void **outlined release of SizeFittingState.Child(void **a1)
{
  uint64_t v2 = *a1;
  swift_bridgeObjectRelease();

  swift_release();
  return a1;
}

void **outlined retain of SizeFittingState.Child(void **a1)
{
  uint64_t v2 = *a1;
  swift_retain();
  swift_bridgeObjectRetain();
  id v3 = v2;
  return a1;
}

uint64_t closure #1 in closure #1 in SizeFittingState.applyChildren(selectLast:to:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  void (*v22)(void *, uint64_t *, uint64_t *, void, uint64_t (*)(void *, uint64_t *, void (*)(void *__return_ptr, uint64_t *)), void, uint64_t, uint64_t);
  uint64_t v23;
  unint64_t v24;
  uint64_t result;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  id v31;
  uint64_t v32;
  int v33;
  long long v37;
  long long v38;
  long long v40;
  int v41;
  int v43;
  int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  long long v56;
  uint64_t v57;
  int v58;
  void v59[2];
  uint64_t v60;

  unsigned int v41 = *(_DWORD *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 72);
  uint64_t v46 = *(void *)(a1 + 64);
  unsigned int v47 = *(void *)(a1 + 24);
  uint64_t v44 = *(_DWORD *)(a1 + 104);
  BOOL v45 = a2 + 4;
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v40 = *(_OWORD *)(a1 + 80);
  uint64_t v11 = *(void *)(a1 + 96);
  swift_beginAccess();
  int v12 = *(_DWORD *)(v7 + 16);
  uint64_t v13 = *(void *)(v7 + 24);
  id v37 = *(_OWORD *)(v7 + 48);
  unint64_t v38 = *(_OWORD *)(v7 + 32);
  uint64_t v14 = *(void *)(v7 + 64);
  uint64_t v15 = *(void *)(v7 + 72);
  char v16 = *(unsigned char *)(v7 + 80);
  char v17 = *(unsigned char *)(v7 + 81);
  uint64_t v18 = *(void *)(v7 + 88);
  type metadata accessor for _GraphValue<LimitedAvailabilityCommandContent>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, MEMORY[0x1E4F3FEE0], MEMORY[0x1E4F3F398]);
  uint64_t v19 = swift_allocObject();
  *(_DWORD *)(v19 + 16) = v12;
  *(void *)(v19 + 24) = v13;
  *(_OWORD *)(v19 + 32) = v38;
  *(_OWORD *)(v19 + 48) = v37;
  *(void *)(v19 + 64) = v14;
  *(void *)(v19 + 72) = v15;
  *(unsigned char *)(v19 + 80) = v16;
  *(unsigned char *)(v19 + 81) = v17;
  *(void *)(v19 + 88) = v18;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v20 = a2[7];
  uint64_t v21 = a2[8];
  __swift_project_boxed_opaque_existential_1(v45, v20);
  uint64_t v60 = a3;
  id v48 = v47;
  Swift::String v49 = v41;
  char v51 = v19;
  unsigned int v52 = v9;
  unint64_t v53 = v10;
  uint64_t v54 = v46;
  unsigned int v55 = v8;
  uint64_t v56 = v40;
  id v57 = v11;
  uint64_t v58 = v44;
  char v22 = *(void (**)(void *, uint64_t *, uint64_t *, void, uint64_t (*)(void *, uint64_t *, void (*)(void *__return_ptr, uint64_t *)), void, uint64_t, uint64_t))(v21 + 16);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22(v59, &v60, &v48, 0, specialized closure #1 in closure #1 in _ViewList_Elements.makeOneElement(at:inputs:indirectMap:body:), 0, v20, v21);
  BOOL v23 = v59[0];
  char v24 = v59[1];
  LOBYTE(v12) = swift_isEscapingClosureAtFileLocation();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  if (v12)
  {
    __break(1u);
  }
  else
  {
    if (v23)
    {
      uint64_t v26 = v24;
      uint64_t v27 = HIDWORD(v24);
    }
    else
    {
      _ViewOutputs.init()();
      BOOL v23 = v48;
      uint64_t v26 = v49;
      LODWORD(v27) = v50;
    }
    uint64_t v43 = v27;
    char v28 = a2[7];
    double v29 = a2[8];
    __swift_project_boxed_opaque_existential_1(v45, v28);
    double v30 = *(uint64_t (**)(uint64_t, uint64_t))(v29 + 32);
    double v31 = a4;
    double v32 = v30(v28, v29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    double v33 = *(_DWORD *)(a1 + 144);
    *(void *)a6 = v31;
    *(void *)(a6 + 8) = v32;
    *(void *)(a6 + 16) = v23;
    *(_DWORD *)(a6 + 24) = v26;
    *(_DWORD *)(a6 + 28) = v43;
    *(_DWORD *)(a6 + 32) = v33;
    *(_DWORD *)(a6 + 36) = a5;
    *(unsigned char *)(a6 + 40) = 0;
  }
  return result;
}

void type metadata accessor for _GraphValue<LimitedAvailabilityCommandContent>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

id specialized _NativeDictionary.copy()()
{
  unint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<_ViewList_ID.Canonical, SizeFittingState.Child>, (void (*)(void))lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      int64_t v9 = v28 + 1;
      if (v28 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v6 + 8 * v9);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v29 - 1) & v29;
    unint64_t v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    char v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 48 * v15;
    uint64_t v20 = *(void *)(v2 + 56) + v19;
    char v22 = *(void **)v20;
    uint64_t v21 = *(void *)(v20 + 8);
    uint64_t v23 = *(void *)(v20 + 16);
    char v24 = *(unsigned char *)(v20 + 40);
    uint64_t v25 = (void *)(*(void *)(v4 + 48) + v16);
    long long v26 = *(_OWORD *)(v20 + 24);
    *uint64_t v25 = *v17;
    v25[1] = v18;
    uint64_t v27 = *(void *)(v4 + 56) + v19;
    *(void *)uint64_t v27 = v22;
    *(void *)(v27 + 8) = v21;
    *(void *)(v27 + 16) = v23;
    *(_OWORD *)(v27 + 24) = v26;
    *(unsigned char *)(v27 + 40) = v24;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    id result = v22;
  }
  int64_t v30 = v28 + 2;
  if (v30 >= v13) {
    goto LABEL_26;
  }
  unint64_t v29 = *(void *)(v6 + 8 * v30);
  if (v29)
  {
    int64_t v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v6 + 8 * v9);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  unint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<NavigationContentAbstractPosition, NavigationStackHostingController<AnyView>>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    char v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      char v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    char v17 = *(void *)(v2 + 48) + 16 * v15;
    uint64_t v18 = *(unsigned char *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    uint64_t v20 = 8 * v15;
    uint64_t v21 = *(void **)(*(void *)(v2 + 56) + v20);
    char v22 = *(void *)(v4 + 48) + v16;
    *(unsigned char *)char v22 = v18;
    *(void *)(v22 + 8) = v19;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    id result = v21;
  }
  uint64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  char v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    char v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id result;
  uint64_t v9;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;

  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CommandOperation();
  long long v26 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<UIMenuElement, CommandOperation>();
  unint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  unint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    id result = (id)swift_release();
LABEL_28:
    uint64_t *v1 = v7;
    return result;
  }
  uint64_t v25 = v1;
  id result = (id)(v6 + 64);
  int64_t v9 = v5 + 64;
  uint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  }
  unint64_t v12 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  int64_t v13 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v14 = -1;
  if (v13 < 64) {
    unint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v5 + 64);
  uint64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      char v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      uint64_t v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    char v22 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v16) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v9 + 8 * v22);
    ++v12;
    if (!v23)
    {
      unint64_t v12 = v22 + 1;
      if (v22 + 1 >= v16) {
        goto LABEL_26;
      }
      uint64_t v23 = *(void *)(v9 + 8 * v12);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v15 = (v23 - 1) & v23;
    uint64_t v18 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_12:
    uint64_t v19 = 8 * v18;
    uint64_t v20 = *(void **)(*(void *)(v5 + 48) + 8 * v18);
    uint64_t v21 = *(void *)(v26 + 72) * v18;
    outlined init with copy of TabViewCustomization(*(void *)(v5 + 56) + v21, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for CommandOperation);
    *(void *)(*(void *)(v7 + 48) + v19) = v20;
    outlined init with take of TabSidebarCustomization((uint64_t)v4, *(void *)(v7 + 56) + v21, (uint64_t (*)(void))type metadata accessor for CommandOperation);
    id result = v20;
  }
  char v24 = v22 + 2;
  if (v24 >= v16)
  {
LABEL_26:
    id result = (id)swift_release();
    unint64_t v1 = v25;
    goto LABEL_28;
  }
  uint64_t v23 = *(void *)(v9 + 8 * v24);
  if (v23)
  {
    unint64_t v12 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v12 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v9 + 8 * v12);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  unint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, UIHostingKeyboardTrackingElement>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    char v17 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    id result = v17;
  }
  uint64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _OWORD v22[2];

  unint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<NSAttributedStringKey, Any>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    uint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    char v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    outlined init with take of Any(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
    id result = v17;
  }
  uint64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  uint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  unint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<SensoryFeedback.FeedbackType, UIFeedbackGenerator>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    uint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    char v17 = 8 * v15;
    uint64_t v18 = *(void **)(*(void *)(v2 + 56) + v17);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v17) = v18;
    id result = v18;
  }
  uint64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  uint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  long long v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  unint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<UIDragItem, CGPoint>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    char v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    uint64_t v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v19;
    id result = v17;
  }
  char v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  long long *v19;
  long long v20;
  long long v21;
  long long v22;
  _OWORD *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  unint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<UIDragItem, CGAffineTransform>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    char v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    uint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    char v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 48 * v15;
    uint64_t v19 = (long long *)(*(void *)(v2 + 56) + v18);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    char v22 = v19[2];
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v23 = (_OWORD *)(*(void *)(v4 + 56) + v18);
    *uint64_t v23 = v20;
    v23[1] = v21;
    v23[2] = v22;
    id result = v17;
  }
  long long v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  uint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  unint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<UISplitViewControllerColumn, NavigationStackCoordinator<SplitColumnNavigationStrategy>>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    char v17 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    id result = v17;
  }
  uint64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;

  unint64_t v1 = type metadata accessor for UTType();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<NSFileWrapper, UTType>();
  char v24 = v0;
  unint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  unint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    void *v24 = v7;
    return result;
  }
  id result = (id)(v6 + 64);
  int64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v25 = v5 + 64;
  uint64_t v11 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  unint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  int64_t v13 = -1;
  if (v12 < 64) {
    int64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v28 = v2 + 16;
  long long v26 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v27 = v2 + 32;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      uint64_t v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    uint64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      uint64_t v11 = v20 + 1;
      if (v20 + 1 >= v26) {
        goto LABEL_26;
      }
      uint64_t v21 = *(void *)(v25 + 8 * v11);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v14 = (v21 - 1) & v21;
    uint64_t v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    char v17 = 8 * v16;
    uint64_t v18 = *(void **)(*(void *)(v5 + 48) + 8 * v16);
    uint64_t v19 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 56) + v19, v1);
    *(void *)(*(void *)(v7 + 48) + v17) = v18;
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 56) + v19, v4, v1);
    id result = v18;
  }
  char v22 = v20 + 2;
  if (v22 >= v26) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    uint64_t v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v25 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  unint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<UIMenuIdentifier, UIMenuIdentifier>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    char v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    uint64_t v19 = v17;
    id result = v18;
  }
  char v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  unint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<String, UIAccessibilityCustomRotor>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    char v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    char v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  char v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

BOOL partial apply for closure #1 in SizeFittingMux.updateValue()(uint64_t *a1, char a2)
{
  return closure #1 in SizeFittingMux.updateValue()(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(unsigned char *)(v2 + 32), *(void *)(v2 + 40), *(unsigned char *)(v2 + 48));
}

BOOL closure #1 in SizeFittingMux.updateValue()(uint64_t *a1, char a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7)
{
  uint64_t v19 = *a1;
  uint64_t v20 = a1[1];
  if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
  {
    static LayoutComputer.defaultValue.getter();
  }
  else
  {
    AGGraphGetValue();
    swift_retain();
  }
  AGGraphGetValue();
  uint64_t v19 = a4;
  LOBYTE(v20) = a5 & 1;
  uint64_t v21 = a6;
  char v22 = a7 & 1;
  if (Axis.Set.contains(_:)()) {
    _ProposedSize.width.setter();
  }
  if (Axis.Set.contains(_:)()) {
    _ProposedSize.height.setter();
  }
  LayoutComputer.sizeThatFits(_:)();
  if (a2)
  {
    swift_release();
    return 1;
  }
  else
  {
    double v15 = v12;
    double v16 = v13;
    char v17 = *(unsigned char *)AGGraphGetValue();
    uint64_t v19 = a4;
    LOBYTE(v20) = a5 & 1;
    uint64_t v21 = a6;
    char v22 = a7 & 1;
    BOOL v14 = _SizeFittingRoot.size(_:fits:)(v15, v16, (uint64_t)&v19, v17);
    swift_release();
  }
  return v14;
}

uint64_t ListCoreBatchUpdates.formUpdates<A>(from:to:)(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = v5 + a3[15];
  uint64_t v12 = type metadata accessor for ListBatchUpdates();
  ListBatchUpdates.formUpdates<A>(from:to:)(a1, a2, v12, a4, a5);
  long long v13 = *(_OWORD *)(v11 + 16);
  v15[0] = *(_OWORD *)v11;
  v15[1] = v13;
  long long v17 = v15[0];
  long long v18 = v13;
  uint64_t v16 = *(void *)(v11 + 32);
  uint64_t v19 = v16;
  outlined retain of [Text.Modifier]((uint64_t)&v17);
  outlined retain of [Text.Modifier]((uint64_t)&v17 + 8);
  outlined retain of [Text.Modifier]((uint64_t)&v18);
  outlined retain of [Text.Modifier]((uint64_t)&v18 + 8);
  outlined retain of [Text.Modifier]((uint64_t)&v19);
  ListCoreBatchUpdates.formResult<A>(_:)((uint64_t *)v15, a3);
  outlined release of _LazyLayout_Placements((uint64_t)&v17);
  outlined release of _LazyLayout_Placements((uint64_t)&v17 + 8);
  outlined release of _LazyLayout_Placements((uint64_t)&v18);
  outlined release of _LazyLayout_Placements((uint64_t)&v18 + 8);
  return outlined release of _LazyLayout_Placements((uint64_t)&v19);
}

uint64_t ListCoreBatchUpdates.formResult<A>(_:)(uint64_t *a1, int *a2)
{
  uint64_t v3 = v2;
  type metadata accessor for (source: IndexPath, destination: IndexPath)();
  uint64_t v47 = v6;
  uint64_t v46 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v50 = (uint64_t)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for IndexPath();
  uint64_t v51 = *(void *)(v53 - 8);
  MEMORY[0x1F4188790](v53);
  BOOL v45 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v44 = (char *)&v42 - v10;
  MEMORY[0x1F4188790](v11);
  Swift::String v49 = (char *)&v42 - v12;
  MEMORY[0x1F4188790](v13);
  double v15 = (char *)&v42 - v14;
  uint64_t v54 = a2;
  ListCoreBatchUpdates.resetAll()();
  uint64_t v16 = *a1;
  uint64_t v63 = a1[1];
  v64[0] = v16;
  uint64_t v17 = a1[2];
  uint64_t v61 = a1[3];
  uint64_t v62 = v17;
  uint64_t v60 = a1[4];
  outlined retain of [Text.Modifier]((uint64_t)v64);
  outlined retain of [Text.Modifier]((uint64_t)&v63);
  outlined retain of [Text.Modifier]((uint64_t)&v62);
  outlined retain of [Text.Modifier]((uint64_t)&v61);
  outlined retain of [Text.Modifier]((uint64_t)&v60);
  type metadata accessor for ListBatchUpdates();
  if (ListBatchUpdates.endIndex.getter())
  {
    long long v18 = 0;
    unsigned int v52 = (void (**)(void))(v51 + 32);
    uint64_t v43 = v15;
    while (2)
    {
      uint64_t result = ListBatchUpdates.subscript.getter(v18, v55);
      uint64_t v21 = v18 + 1;
      if (!__OFADD__(v18, 1))
      {
        outlined init with take of (source: IndexPath, destination: IndexPath)((uint64_t)v55, (uint64_t)&v56, (uint64_t (*)(void))type metadata accessor for ListUpdate<Int, Int>);
        switch(v59)
        {
          case 1:
            Swift::Int v19 = v56;
            goto LABEL_4;
          case 2:
            long long v48 = v56;
            uint64_t v22 = v54[10];
            uint64_t v23 = *(char **)(v3 + v22);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v23 + 2) + 1, 1, v23);
            }
            unint64_t v25 = *((void *)v23 + 2);
            unint64_t v24 = *((void *)v23 + 3);
            if (v25 >= v24 >> 1) {
              uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25 + 1, 1, v23);
            }
            *((void *)v23 + 2) = v25 + 1;
            *(_OWORD *)&v23[16 * v25 + 32] = v48;
            *(void *)(v3 + v22) = v23;
            goto LABEL_5;
          case 3:
            MEMORY[0x18C10A880](*((void *)&v56 + 1), v56);
            uint64_t v26 = v54[11];
            uint64_t v27 = *(void **)(v3 + v26);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v27 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
            }
            unint64_t v29 = v27[2];
            unint64_t v28 = v27[3];
            if (v29 >= v28 >> 1) {
              uint64_t v27 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1, v27);
            }
            _OWORD v27[2] = v29 + 1;
            (*(void (**)(unint64_t, char *, uint64_t))(v51 + 32))((unint64_t)v27+ ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))+ *(void *)(v51 + 72) * v29, v15, v53);
            goto LABEL_24;
          case 4:
            MEMORY[0x18C10A880](*((void *)&v56 + 1), v56);
            uint64_t v26 = v54[12];
            uint64_t v27 = *(void **)(v3 + v26);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v27 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
            }
            unint64_t v31 = v27[2];
            unint64_t v30 = v27[3];
            if (v31 >= v30 >> 1) {
              uint64_t v27 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1, v27);
            }
            _OWORD v27[2] = v31 + 1;
            (*(void (**)(unint64_t, char *, uint64_t))(v51 + 32))((unint64_t)v27+ ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))+ *(void *)(v51 + 72) * v31, v49, v53);
LABEL_24:
            *(void *)(v3 + v26) = v27;
            goto LABEL_5;
          case 5:
            uint64_t v32 = v57;
            uint64_t v33 = v58;
            MEMORY[0x18C10A880](*((void *)&v56 + 1), v56);
            char v34 = v45;
            MEMORY[0x18C10A880](v33, v32);
            uint64_t v35 = v50 + *(int *)(v47 + 48);
            uint64_t v36 = *v52;
            uint64_t v37 = v53;
            (*v52)();
            ((void (*)(uint64_t, char *, uint64_t))v36)(v35, v34, v37);
            uint64_t v38 = v54[13];
            uint64_t v39 = *(void **)(v3 + v38);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v39 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39[2] + 1, 1, v39);
            }
            unint64_t v41 = v39[2];
            unint64_t v40 = v39[3];
            if (v41 >= v40 >> 1) {
              uint64_t v39 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1, v39);
            }
            void v39[2] = v41 + 1;
            outlined init with take of (source: IndexPath, destination: IndexPath)(v50, (uint64_t)v39+ ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))+ *(void *)(v46 + 72) * v41, (uint64_t (*)(void))type metadata accessor for (source: IndexPath, destination: IndexPath));
            *(void *)(v3 + v38) = v39;
            double v15 = v43;
            goto LABEL_5;
          case 6:
            Swift::Int v19 = v56;
            goto LABEL_4;
          default:
            Swift::Int v19 = v56;
LABEL_4:
            IndexSet.insert(_:)(v19);
LABEL_5:
            ++v18;
            if (v21 != (char *)ListBatchUpdates.endIndex.getter()) {
              continue;
            }
            goto LABEL_31;
        }
      }
      break;
    }
    __break(1u);
  }
  else
  {
LABEL_31:
    outlined release of _LazyLayout_Placements((uint64_t)v64);
    outlined release of _LazyLayout_Placements((uint64_t)&v63);
    outlined release of _LazyLayout_Placements((uint64_t)&v62);
    outlined release of _LazyLayout_Placements((uint64_t)&v61);
    return outlined release of _LazyLayout_Placements((uint64_t)&v60);
  }
  return result;
}

uint64_t outlined release of _LazyLayout_Placements(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for ListBatchUpdates()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for (source: IndexPath, destination: IndexPath)()
{
  if (!lazy cache variable for type metadata for (source: IndexPath, destination: IndexPath))
  {
    type metadata accessor for IndexPath();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (source: IndexPath, destination: IndexPath));
    }
  }
}

uint64_t ListBatchUpdates.endIndex.getter()
{
  uint64_t v1 = *v0;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CountingIndex();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CountingIndex();
  swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v2 = type metadata accessor for ListUpdate();
  return MEMORY[0x18C115CB0](v1, v2);
}

uint64_t partial apply for closure #1 in closure #1 in SizeFittingLayoutComputer.Engine.spacing()(uint64_t a1, uint64_t a2)
{
  return closure #1 in closure #1 in SizeFittingLayoutComputer.Engine.spacing()(a1, a2, *(void **)(v2 + 16));
}

uint64_t closure #1 in closure #1 in SizeFittingLayoutComputer.Engine.spacing()(uint64_t a1, uint64_t a2, void *a3)
{
  if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
  {
    static LayoutComputer.defaultValue.getter();
  }
  else
  {
    AGGraphGetValue();
    swift_retain();
  }
  LayoutComputer.spacing()();
  swift_release();
  *a3 = v5;
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t ListBatchUpdates.subscript.getter@<X0>(char *a1@<X0>, char **a2@<X8>)
{
  uint64_t v134 = a1;
  uint64_t v131 = a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v2 = type metadata accessor for CountingIndex();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v3 = type metadata accessor for CountingIndex();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v120 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v126 = (char *)&v118 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v121 = (char *)&v118 - v6;
  MEMORY[0x1F4188790](v7);
  uint64_t v127 = (char *)&v118 - v8;
  MEMORY[0x1F4188790](v9);
  uint64_t v125 = (char *)&v118 - v10;
  MEMORY[0x1F4188790](v11);
  v130 = (char *)&v118 - v12;
  MEMORY[0x1F4188790](v13);
  uint64_t v128 = (char *)&v118 - v14;
  uint64_t v132 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v15);
  id v124 = (char *)&v118 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  char v123 = (char *)&v118 - v18;
  uint64_t v136 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v118 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  long long v122 = (char *)&v118 - v23;
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&v118 - v25;
  MEMORY[0x1F4188790](v27);
  unint64_t v29 = (char *)&v118 - v28;
  MEMORY[0x1F4188790](v30);
  uint64_t v32 = (char *)&v118 - v31;
  MEMORY[0x1F4188790](v33);
  uint64_t v35 = (char *)&v118 - v34;
  MEMORY[0x1F4188790](v36);
  uint64_t v38 = (char *)&v118 - v37;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v40 = swift_getWitnessTable();
  uint64_t v135 = v2;
  uint64_t v137 = v2;
  uint64_t v138 = v3;
  uint64_t v139 = WitnessTable;
  uint64_t v140 = v40;
  uint64_t v41 = type metadata accessor for ListUpdate();
  MEMORY[0x1F4188790](v41);
  uint64_t v43 = (char *)&v118 - v42;
  Array.subscript.getter();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v53 = v135;
      uint64_t v54 = v136;
      uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v136 + 32))(v35, v43, v135);
      unsigned int v55 = &v35[*(int *)(v53 + 36)];
      if (v55[8]) {
        goto LABEL_24;
      }
      long long v48 = *(char **)v55;
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v35, v53);
      Swift::String v49 = 0;
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      char v52 = 1;
      goto LABEL_22;
    case 2u:
      uint64_t v56 = v135;
      uint64_t v57 = &v43[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v58 = v136;
      char v59 = *(void (**)(char *, char *, uint64_t))(v136 + 32);
      v59(v32, v43, v56);
      uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v59)(v29, v57, v56);
      uint64_t v60 = *(int *)(v56 + 36);
      uint64_t v61 = &v32[v60];
      if (v32[v60 + 8]) {
        goto LABEL_25;
      }
      uint64_t v62 = &v29[v60];
      if (v62[8]) {
        goto LABEL_26;
      }
      long long v48 = *(char **)v61;
      Swift::String v49 = *(char **)v62;
      uint64_t v63 = *(void (**)(char *, uint64_t))(v58 + 8);
      v63(v29, v56);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v63)(v32, v56);
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      char v52 = 2;
      goto LABEL_22;
    case 3u:
      uint64_t v64 = &v43[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v65 = v135;
      uint64_t v66 = v136;
      (*(void (**)(char *, char *, uint64_t))(v136 + 32))(v26, v43, v135);
      uint64_t v67 = v132;
      unint64_t v68 = v123;
      uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v132 + 32))(v123, v64, v3);
      long long v69 = &v26[*(int *)(v65 + 36)];
      if (v69[8]) {
        goto LABEL_27;
      }
      long long v70 = &v68[*(int *)(v3 + 36)];
      if (v70[8]) {
        goto LABEL_28;
      }
      long long v48 = *(char **)v69;
      Swift::String v49 = *(char **)v70;
      (*(void (**)(char *, uint64_t))(v67 + 8))(v68, v3);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v26, v135);
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      char v52 = 3;
      goto LABEL_22;
    case 4u:
      id v71 = &v43[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v72 = v135;
      uint64_t v73 = v136;
      uint64_t v74 = v122;
      (*(void (**)(char *, char *, uint64_t))(v136 + 32))(v122, v43, v135);
      uint64_t v75 = v132;
      uint64_t v76 = v124;
      uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v132 + 32))(v124, v71, v3);
      id v77 = &v74[*(int *)(v72 + 36)];
      if (v77[8]) {
        goto LABEL_29;
      }
      id v78 = &v76[*(int *)(v3 + 36)];
      if (v78[8]) {
        goto LABEL_30;
      }
      long long v48 = *(char **)v77;
      Swift::String v49 = *(char **)v78;
      (*(void (**)(char *, uint64_t))(v75 + 8))(v76, v3);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v74, v72);
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      char v52 = 4;
      goto LABEL_22;
    case 5u:
      uint64_t v79 = TupleTypeMetadata2;
      uint64_t v134 = &v43[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v80 = *(int *)(v79 + 48);
      long long v81 = v128;
      char v82 = &v128[v80];
      v133 = &v128[v80];
      id v124 = &v43[v80];
      uint64_t v83 = v136;
      Class v84 = *(void (**)(void))(v136 + 32);
      uint64_t v85 = v43;
      uint64_t v86 = v135;
      ((void (*)(char *, char *, uint64_t))v84)(v128, v85, v135);
      id v87 = *(void (**)(char *, char *, uint64_t))(v132 + 32);
      v87(v82, v124, v3);
      uint64_t v88 = *(int *)(v79 + 48);
      uint64_t v89 = &v130[v88];
      id v124 = &v134[v88];
      v84();
      uint64_t v90 = v86;
      uint64_t v91 = v81;
      char v123 = v89;
      v87(v89, v124, v3);
      uint64_t v92 = v125;
      uint64_t v93 = &v125[*(int *)(v79 + 48)];
      id v94 = *(void (**)(void))(v83 + 16);
      ((void (*)(char *, char *, uint64_t))v94)(v125, v91, v90);
      uint64_t v95 = *(char **)(v132 + 16);
      uint64_t v119 = v93;
      uint64_t v134 = v95;
      ((void (*)(char *, char *, uint64_t))v95)(v93, v133, v3);
      int v96 = (char **)&v92[*(int *)(v90 + 36)];
      long long v122 = *v96;
      LOBYTE(v93) = *((unsigned char *)v96 + 8);
      uint64_t v97 = *(char **)(v83 + 8);
      uint64_t v136 = v83 + 8;
      uint64_t v125 = v97;
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v97)(v92, v90);
      if (v93) {
        goto LABEL_31;
      }
      uint64_t v98 = &v127[*(int *)(v79 + 48)];
      id v124 = (char *)v94;
      v94();
      ((void (*)(char *, char *, uint64_t))v134)(v98, v133, v3);
      uint64_t v99 = &v98[*(int *)(v3 + 36)];
      Swift::String v49 = *(char **)v99;
      uint64_t v100 = v90;
      char v101 = v99[8];
      id v102 = *(char **)(v132 + 8);
      v132 += 8;
      v133 = v102;
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v102)(v98, v3);
      if (v101) {
        goto LABEL_32;
      }
      uint64_t v103 = v79;
      uint64_t v104 = v121;
      uint64_t v105 = &v121[*(int *)(v79 + 48)];
      ((void (*)(char *, char *, uint64_t))v124)(v121, v130, v100);
      uint64_t v118 = v105;
      unint64_t v106 = v123;
      ((void (*)(char *, char *, uint64_t))v134)(v105, v123, v3);
      long long v107 = &v104[*(int *)(v100 + 36)];
      uint64_t v50 = *(char **)v107;
      LOBYTE(v105) = v107[8];
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v125)(v104, v100);
      if (v105) {
        goto LABEL_33;
      }
      long long v108 = &v126[*(int *)(v103 + 48)];
      ((void (*)(char *, char *, uint64_t))v124)(v126, v130, v100);
      ((void (*)(char *, char *, uint64_t))v134)(v108, v106, v3);
      int v109 = &v108[*(int *)(v3 + 36)];
      uint64_t v51 = *(char **)v109;
      char v110 = v109[8];
      uint64_t v111 = v133;
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v133)(v108, v3);
      if (v110) {
        goto LABEL_34;
      }
      uint64_t v112 = *(void (**)(char *, uint64_t))(v120 + 8);
      v112(v130, v103);
      v112(v128, v103);
      uint64_t v113 = (void (*)(char *, uint64_t))v125;
      ((void (*)(char *, uint64_t))v125)(v126, v100);
      ((void (*)(char *, uint64_t))v111)(v118, v3);
      v113(v127, v100);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v111)(v119, v3);
      char v52 = 5;
      long long v48 = v122;
      goto LABEL_22;
    case 6u:
      uint64_t v114 = v135;
      uint64_t v115 = v136;
      uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v136 + 32))(v21, v43, v135);
      int v116 = &v21[*(int *)(v114 + 36)];
      if (v116[8]) {
        goto LABEL_35;
      }
      long long v48 = *(char **)v116;
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v115 + 8))(v21, v114);
      Swift::String v49 = 0;
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      char v52 = 6;
      goto LABEL_22;
    default:
      uint64_t v44 = v135;
      uint64_t v45 = v136;
      uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v136 + 32))(v38, v43, v135);
      uint64_t v47 = &v38[*(int *)(v44 + 36)];
      if (v47[8])
      {
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
      }
      else
      {
        long long v48 = *(char **)v47;
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v38, v44);
        Swift::String v49 = 0;
        uint64_t v50 = 0;
        uint64_t v51 = 0;
        char v52 = 0;
LABEL_22:
        uint64_t v117 = v131;
        *uint64_t v131 = v48;
        v117[1] = v49;
        v117[2] = v50;
        v117[3] = v51;
        *((unsigned char *)v117 + 32) = v52;
      }
      return result;
  }
}

uint64_t outlined init with take of (source: IndexPath, destination: IndexPath)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for ListUpdate<Int, Int>()
{
  if (!lazy cache variable for type metadata for ListUpdate<Int, Int>)
  {
    unint64_t v0 = type metadata accessor for ListUpdate();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ListUpdate<Int, Int>);
    }
  }
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _CoordinateSpaceModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF7D0](a1, a2, a3, a4, a5, WitnessTable);
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool?>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Bool?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool?>)
  {
    type metadata accessor for Bool?();
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool?>);
    }
  }
}

void type metadata accessor for Bool?()
{
  if (!lazy cache variable for type metadata for Bool?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Bool?);
    }
  }
}

void specialized SheetBridge.hostingView<A>(_:didChangePreferences:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = *a2;
  PreferenceValues.subscript.getter();
  v11[2] = a3;
  v11[3] = a4;
  v11[4] = a5;
  void v11[5] = a6;
  v11[6] = a1;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI11ColorSchemeO_s5NeverOytTB5((void *(*)(uint64_t *__return_ptr, char *))partial apply for closure #1 in SheetBridge.hostingView<A>(_:didChangePreferences:), (uint64_t)v11, v12);
  _UIHostingView.viewController.getter();
}

void sub_187574E0C(void *a1)
{
  if (a1)
  {
    type metadata accessor for PresentationHostingController<AnyView>(0, &lazy cache variable for type metadata for PresentationHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PresentationHostingController);
    uint64_t v4 = swift_dynamicCastClass();
    if (v4)
    {
      uint64_t v5 = v4;
      *(void *)(v2 - 72) = v1;
      PreferenceValues.subscript.getter();
      *(void *)(v5 + direct field offset for PresentationHostingController.lastColumnCount) = v6;
    }
  }
}

void *_sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI11ColorSchemeO_s5NeverOytTB5(void *(*a1)(uint64_t *__return_ptr, char *), uint64_t a2, unsigned __int8 a3)
{
  int v4 = a3;
  if (a3 == 2) {
    return (void *)(v4 == 2);
  }
  char v6 = a3 & 1;
  unint64_t result = a1(&v7, &v6);
  if (!v3) {
    return (void *)(v4 == 2);
  }
  return result;
}

ValueMetadata *type metadata accessor for ResolvedNavigationSplitStyle()
{
  return &type metadata for ResolvedNavigationSplitStyle;
}

uint64_t specialized closure #1 in closure #1 in _ViewList_Elements.makeOneElement(at:inputs:indirectMap:body:)(void *a1, uint64_t *a2, void (*a3)(void *__return_ptr, uint64_t *))
{
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  int v6 = *((_DWORD *)a2 + 20);
  uint64_t v10 = *a2;
  int v11 = v4;
  uint64_t v12 = v5;
  long long v7 = *(_OWORD *)(a2 + 5);
  long long v13 = *(_OWORD *)(a2 + 3);
  long long v14 = v7;
  long long v15 = *(_OWORD *)(a2 + 7);
  uint64_t v16 = a2[9];
  int v17 = v6;
  a3(v18, &v10);
  uint64_t v8 = v18[1];
  *a1 = v18[0];
  a1[1] = v8;
  return 0;
}

void type metadata completion function for FileImportExportBridge.PresentationState()
{
  type metadata accessor for FileImportExportBridge.Presentation?(319);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t type metadata completion function for FileExportOperation.Move()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.setter in conformance InferredToolbarUserDefaultFeature(char a1)
{
  uint64_t result = swift_beginAccess();
  static InferredToolbarUserDefaultFeature.cacheduint64_t Value = a1;
  return result;
}

uint64_t SizeFittingLayoutComputer.updateValue()()
{
  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x1E4F4E7A0])
  {
    __break(1u);
  }
  else
  {
    AGGraphGetValue();
    swift_retain();
    default argument 0 of ViewSizeCache.init(cache:)();
    ViewSizeCache.init(cache:)();
    lazy protocol witness table accessor for type SizeFittingLayoutComputer and conformance SizeFittingLayoutComputer();
    lazy protocol witness table accessor for type SizeFittingLayoutComputer.Engine and conformance SizeFittingLayoutComputer.Engine();
    StatefulRule<>.update<A>(to:)();
    return swift_release();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SizeFittingLayoutComputer.Engine and conformance SizeFittingLayoutComputer.Engine()
{
  unint64_t result = lazy protocol witness table cache variable for type SizeFittingLayoutComputer.Engine and conformance SizeFittingLayoutComputer.Engine;
  if (!lazy protocol witness table cache variable for type SizeFittingLayoutComputer.Engine and conformance SizeFittingLayoutComputer.Engine)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SizeFittingLayoutComputer.Engine and conformance SizeFittingLayoutComputer.Engine);
  }
  return result;
}

void @objc UIHostingController.viewDidDisappear(_:)(void *a1, uint64_t a2, char a3)
{
  id v4 = a1;
  UIHostingController.viewDidAppear(_:)(a3, (SEL *)&selRef_viewDidDisappear_, (uint64_t (*)(id))specialized UIHostingController._viewDidDisappear(_:));
}

uint64_t static OnScrollVisibilityGeometryAction._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  int v22 = *((_DWORD *)a2 + 2);
  uint64_t v21 = a2[2];
  int v4 = *((_DWORD *)a2 + 6);
  int v5 = *((_DWORD *)a2 + 7);
  int v6 = *((_DWORD *)a2 + 8);
  int v7 = *((_DWORD *)a2 + 9);
  uint64_t v16 = a2[6];
  uint64_t v17 = a2[5];
  int v8 = *((_DWORD *)a2 + 14);
  int v18 = *((_DWORD *)a2 + 16);
  int v19 = *((_DWORD *)a2 + 15);
  int v15 = *((_DWORD *)a2 + 17);
  int v20 = *((_DWORD *)a2 + 18);
  int v13 = *((_DWORD *)a2 + 19);
  int v14 = *((_DWORD *)a2 + 20);
  _s7SwiftUI5StateVySbGMaTm_0(0, &lazy cache variable for type metadata for _GraphValue<OnScrollVisibilityGeometryAction>, (uint64_t)&unk_1ED45D1F0, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  _ViewInputs.position.getter();
  _ViewInputs.size.getter();
  int v11 = _ViewInputs.transform.getter();
  _ViewInputs.environment.getter();
  _ViewInputs.safeAreaInsets.getter();
  _ViewInputs.viewPhase.getter();
  UpdateCycleDetector.init()();
  int v25 = v11;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder and conformance OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder();
  Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  uint64_t v9 = AGGraphSetFlags();
  uint64_t v23 = v3;
  int v24 = v22;
  uint64_t v26 = v21;
  int v27 = v4;
  int v28 = v5;
  int v29 = v6;
  int v30 = v7;
  uint64_t v31 = v17;
  uint64_t v32 = v16;
  int v33 = v8;
  int v34 = v19;
  int v35 = v18;
  int v36 = v15;
  int v37 = v20;
  int v38 = v13;
  int v39 = v14;
  return a3(v9, &v23);
}

unint64_t lazy protocol witness table accessor for type OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder and conformance OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder()
{
  unint64_t result = lazy protocol witness table cache variable for type OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder and conformance OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder;
  if (!lazy protocol witness table cache variable for type OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder and conformance OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder and conformance OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder and conformance OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder;
  if (!lazy protocol witness table cache variable for type OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder and conformance OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder and conformance OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder);
  }
  return result;
}

ValueMetadata *type metadata accessor for ContextMenuPreviewAction()
{
  return &type metadata for ContextMenuPreviewAction;
}

uint64_t implicit closure #8 in static SystemScrollView._makeView(view:inputs:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

unint64_t lazy protocol witness table accessor for type FocusableFillerBoundsTransform and conformance FocusableFillerBoundsTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type FocusableFillerBoundsTransform and conformance FocusableFillerBoundsTransform;
  if (!lazy protocol witness table cache variable for type FocusableFillerBoundsTransform and conformance FocusableFillerBoundsTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusableFillerBoundsTransform and conformance FocusableFillerBoundsTransform);
  }
  return result;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance ToolbarContentKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v2 = *((void *)&static ToolbarContentKey.defaultValue + 1);
  uint64_t v3 = qword_1E90FC278;
  uint64_t v4 = unk_1E90FC280;
  uint64_t v5 = qword_1E90FC288;
  uint64_t v6 = unk_1E90FC290;
  char v7 = byte_1E90FC298;
  uint64_t v8 = qword_1E90FC2A0;
  *(void *)a1 = static ToolbarContentKey.defaultValue;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  *(unsigned char *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRetain();
  outlined copy of Binding<NavigationSplitViewColumn>?(v3, v4);
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

unint64_t instantiation function for generic protocol witness table for AccessibilityChildBehavior.Ignore(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AccessibilityChildBehavior.Ignore and conformance AccessibilityChildBehavior.Ignore();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for FileImportExportBridge.PresentationState.UpdateEffect()
{
  uint64_t result = type metadata accessor for FileImportExportBridge.Presentation(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AccessibilityLabeledContentContentModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t associated type witness table accessor for View.Body : View in HelpView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in Toggle<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in ScrollIndicatorFlashOnAppearModifier.body(content:)(uint64_t result, char a2)
{
  uint64_t v2 = *(void *)(result + 104);
  if (a2)
  {
    if ((v2 & 1) == 0) {
      *(void *)(result + 104) = v2 | 1;
    }
    uint64_t v3 = *(void *)(result + 128);
    if ((v3 & 1) == 0)
    {
      unint64_t v4 = v3 | 1;
LABEL_10:
      *(void *)(result + 128) = v4;
    }
  }
  else
  {
    if (v2) {
      *(void *)(result + 104) = v2 & 0xFFFFFFFFFFFFFFFELL;
    }
    uint64_t v5 = *(void *)(result + 128);
    if (v5)
    {
      unint64_t v4 = v5 & 0xFFFFFFFFFFFFFFFELL;
      goto LABEL_10;
    }
  }
  return result;
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in HelpStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for CommandOperation()
{
  uint64_t result = type metadata accessor for CommandGroupPlacement(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for SearchPrimitiveModifier()
{
  uint64_t result = type metadata accessor for SearchModifier();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for SearchField();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t View.searchable(text:placement:prompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v25 = a6;
  uint64_t v23 = a3;
  uint64_t v24 = a9;
  uint64_t v22 = a8;
  type metadata accessor for SearchModifier<TextField<EmptyView>>();
  uint64_t v14 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v26 = *a5;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v17 = Text.init(_:tableName:bundle:comment:)();
  SearchModifier.init<>(text:isPresented:placement:prompt:)(a1, a2, v23, a4, 0, 0, 0, &v26, (uint64_t)v16, v17, v19, v18 & 1, v20);
  MEMORY[0x18C113660](v16, v22, v14, v24);
  return outlined destroy of SearchModifier<TextField<EmptyView>>((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for SearchModifier<TextField<EmptyView>>);
}

void type metadata accessor for OffsetShape<_SizedShape<Rectangle>>()
{
  if (!lazy cache variable for type metadata for OffsetShape<_SizedShape<Rectangle>>)
  {
    type metadata accessor for LabelStyleWritingModifier<IconOnlyLabelStyle>(255, &lazy cache variable for type metadata for _SizedShape<Rectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle, MEMORY[0x1E4F41830], MEMORY[0x1E4F3F5C0]);
    lazy protocol witness table accessor for type _SizedShape<Rectangle> and conformance _SizedShape<A>();
    unint64_t v0 = type metadata accessor for OffsetShape();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for OffsetShape<_SizedShape<Rectangle>>);
    }
  }
}

uint64_t initializeWithTake for ResolvedTextFieldStyle(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 165) = *(_OWORD *)(a2 + 165);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v6 = *(int *)(v5 + 56);
  char v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v9))
  {
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_0(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = v8[1];
    *char v7 = *v8;
    v7[1] = v13;
    uint64_t v14 = *(int *)(v10 + 32);
    uint64_t v15 = (char *)v7 + v14;
    uint64_t v16 = (char *)v8 + v14;
    uint64_t v17 = type metadata accessor for TextSelection(0);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v20 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v15, v16, v21);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
      }
      v15[*(int *)(v17 + 20)] = v16[*(int *)(v17 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
  }
  return a1;
}

uint64_t TextField.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v33 = a2;
  uint64_t v29 = *(void *)(a1 - 8);
  uint64_t v30 = v2;
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for ResolvedTextFieldStyle();
  MEMORY[0x1F4188790](v26);
  char v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v28 = lazy protocol witness table accessor for type _TextFieldStyleLabel and conformance _TextFieldStyleLabel();
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v42 = &type metadata for _TextFieldStyleLabel;
  uint64_t v43 = v8;
  unint64_t v44 = v28;
  uint64_t v45 = v9;
  type metadata accessor for StaticSourceWriter();
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v32 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v26 - v11;
  type metadata accessor for ViewInputFlagModifier<ProvidesEditMenuInteraction>();
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v31 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = MEMORY[0x1F4188790](v16);
  int v27 = (char *)&v26 - v18;
  uint64_t v19 = v30;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v29 + 16))(v5, v30, a1, v17);
  TextField.init<A>(_:)((uint64_t)v5, (uint64_t)v7);
  uint64_t v35 = v8;
  uint64_t v36 = v9;
  uint64_t v37 = v19;
  unint64_t v20 = lazy protocol witness table accessor for type ResolvedTextFieldStyle and conformance ResolvedTextFieldStyle();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for _TextFieldStyleLabel, (void (*)(double))partial apply for closure #1 in TextField.body.getter, (uint64_t)v34, v26, (uint64_t)&type metadata for _TextFieldStyleLabel, v8, v20);
  outlined destroy of ResolvedTextFieldStyle((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ResolvedTextFieldStyle);
  unint64_t v40 = v20;
  uint64_t v41 = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v22 = lazy protocol witness table accessor for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction();
  View.input<A>(_:)((uint64_t)&type metadata for ProvidesEditMenuInteraction, v10, (uint64_t)&type metadata for ProvidesEditMenuInteraction, WitnessTable, v22);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v10);
  uint64_t v38 = WitnessTable;
  int v39 = &protocol witness table for ViewInputFlagModifier<A>;
  swift_getWitnessTable();
  uint64_t v23 = v27;
  static ViewBuilder.buildExpression<A>(_:)(v15);
  uint64_t v24 = *(void (**)(char *, uint64_t))(v31 + 8);
  v24(v15, v13);
  static ViewBuilder.buildExpression<A>(_:)(v23);
  return ((uint64_t (*)(char *, uint64_t))v24)(v23, v13);
}

unint64_t lazy protocol witness table accessor for type ResolvedTextFieldStyle and conformance ResolvedTextFieldStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedTextFieldStyle and conformance ResolvedTextFieldStyle;
  if (!lazy protocol witness table cache variable for type ResolvedTextFieldStyle and conformance ResolvedTextFieldStyle)
  {
    type metadata accessor for ResolvedTextFieldStyle();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedTextFieldStyle and conformance ResolvedTextFieldStyle);
  }
  return result;
}

void type metadata accessor for ViewInputFlagModifier<ProvidesEditMenuInteraction>()
{
  if (!lazy cache variable for type metadata for ViewInputFlagModifier<ProvidesEditMenuInteraction>)
  {
    lazy protocol witness table accessor for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction();
    unint64_t v0 = type metadata accessor for ViewInputFlagModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<ProvidesEditMenuInteraction>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _TextFieldStyleLabel and conformance _TextFieldStyleLabel()
{
  unint64_t result = lazy protocol witness table cache variable for type _TextFieldStyleLabel and conformance _TextFieldStyleLabel;
  if (!lazy protocol witness table cache variable for type _TextFieldStyleLabel and conformance _TextFieldStyleLabel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TextFieldStyleLabel and conformance _TextFieldStyleLabel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _TextFieldStyleLabel and conformance _TextFieldStyleLabel;
  if (!lazy protocol witness table cache variable for type _TextFieldStyleLabel and conformance _TextFieldStyleLabel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TextFieldStyleLabel and conformance _TextFieldStyleLabel);
  }
  return result;
}

uint64_t TextField.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _ss8RangeSetVySS5IndexVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v5 = a2 + *(int *)(v4 + 56);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v30 = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  char v7 = (int *)type metadata accessor for TextField();
  TextField.$text.getter();
  uint64_t v29 = a1;
  TextField.$state.getter((uint64_t)v7, (uint64_t)v38);
  long long v44 = v38[4];
  *(_OWORD *)uint64_t v45 = v39[0];
  *(_OWORD *)&v45[12] = *(_OWORD *)((char *)v39 + 12);
  long long v40 = v38[0];
  long long v41 = v38[1];
  long long v42 = v38[2];
  long long v43 = v38[3];
  type metadata accessor for Binding<String>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F41638]);
  Binding.zip<A>(with:)();
  outlined release of Binding<TextFieldState>((uint64_t)v38);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  long long v42 = v33;
  long long v43 = v34;
  long long v44 = v35;
  *(_OWORD *)uint64_t v45 = v36;
  *(_OWORD *)&v45[16] = *(_OWORD *)v37;
  *(_OWORD *)&v45[28] = *(_OWORD *)&v37[12];
  long long v40 = v31;
  long long v41 = v32;
  uint64_t v8 = *((void *)&v33 + 1);
  uint64_t v9 = v33;
  uint64_t v28 = *(void *)&v45[24];
  if (v32 == v33 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of TextFieldState.FormatActions?(v34);
    uint64_t v11 = *(void *)v37;
    uint64_t v10 = *((void *)&v36 + 1);
    uint64_t v12 = v28;
    outlined copy of TextFieldState.FormatActions?(v36);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of TextFieldState.FormatActions?(v34);
    uint64_t v11 = *(void *)v37;
    uint64_t v10 = *((void *)&v36 + 1);
    uint64_t v12 = v28;
    outlined copy of TextFieldState.FormatActions?(v36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v8 = *((void *)&v32 + 1);
    uint64_t v9 = v32;
  }
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type TextFieldStateTextProjection and conformance TextFieldStateTextProjection();
  uint64_t v13 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  uint64_t v14 = v40;
  swift_retain();
  outlined release of Binding<(String, TextFieldState)>((uint64_t)&v40);
  *(void *)(a2 + 72) = v14;
  *(void *)(a2 + 80) = v13;
  *(void *)(a2 + 88) = v9;
  *(void *)(a2 + 96) = v8;
  if (v37[26]) {
    int v15 = 0x10000;
  }
  else {
    int v15 = 0;
  }
  int v16 = v37[24] | (v37[25] << 8) | v15;
  if (v37[27]) {
    int v17 = 0x1000000;
  }
  else {
    int v17 = 0;
  }
  *(_OWORD *)(a2 + 104) = v34;
  *(_OWORD *)(a2 + 120) = v35;
  *(void *)(a2 + 136) = v36;
  *(void *)(a2 + 144) = v10;
  *(void *)(a2 + 152) = v11;
  *(void *)(a2 + 160) = v12;
  *(void *)(a2 + 168) = v37[16] | ((unint64_t)*(unsigned int *)&v37[20] << 32);
  *(_DWORD *)(a2 + 176) = v16 | v17;
  *(unsigned char *)(a2 + 180) = 1;
  *(void *)a2 = TextField.$text.getter();
  *(void *)(a2 + 8) = v18;
  *(void *)(a2 + 16) = v19;
  *(void *)(a2 + 24) = v20;
  *(unsigned char *)(a2 + 32) = *(unsigned char *)(v29 + 32);
  *(unsigned char *)(a2 + 33) = *(unsigned char *)(v29 + v7[11]);
  uint64_t v21 = (uint64_t *)(v29 + v7[12]);
  uint64_t v22 = *v21;
  uint64_t v23 = v21[1];
  uint64_t v24 = v21[2];
  uint64_t v25 = v21[3];
  *(void *)(a2 + 40) = *v21;
  *(void *)(a2 + 48) = v23;
  *(void *)(a2 + 56) = v24;
  *(void *)(a2 + 64) = v25;
  uint64_t v26 = v29 + v7[14];
  outlined copy of Text?(v22, v23, v24, v25);
  outlined assign with copy of Binding<TextSelection?>?(v26, v30);
  return (*(uint64_t (**)(uint64_t, int *))(*((void *)v7 - 1) + 8))(v29, v7);
}

uint64_t TextField.$text.getter()
{
  uint64_t v1 = *v0;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return v1;
}

void type metadata accessor for Binding<String>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t TextField.$state.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (uint64_t *)(v2 + *(int *)(a1 + 52));
  uint64_t v5 = v4[3];
  uint64_t v6 = v4[5];
  uint64_t v7 = v4[6];
  uint64_t v8 = v4[7];
  uint64_t v9 = v4[8];
  if (*((unsigned char *)v4 + 108))
  {
    unsigned int v10 = *((_DWORD *)v4 + 26);
    unint64_t v29 = HIDWORD(v4[12]);
    uint64_t v30 = v4[2];
    uint64_t v32 = v4[1];
    uint64_t v33 = *v4;
    uint64_t v31 = v4[4];
    uint64_t v11 = v4[11];
    uint64_t v12 = v4[10];
    uint64_t v13 = v4[9];
    uint64_t v28 = v4[12];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    outlined copy of TextFieldState.FormatActions?(v31);
    uint64_t result = outlined copy of TextFieldState.FormatActions?(v9);
    unsigned int v15 = v10 >> 8;
    char v16 = v10 & 1;
    int v18 = v29;
    uint64_t v17 = v30;
    uint64_t v19 = v13;
    uint64_t v20 = v12;
    uint64_t v21 = v11;
    uint64_t v22 = v31;
    uint64_t v23 = v32;
    uint64_t v24 = v33;
    char v25 = v28 & 1;
    int v26 = HIWORD(v10) & 1;
    int v27 = HIBYTE(v10) & 1;
  }
  else
  {
    type metadata accessor for Binding<String>(0, (unint64_t *)&lazy cache variable for type metadata for State<TextFieldState>, (uint64_t)&type metadata for TextFieldState, MEMORY[0x1E4F41580]);
    uint64_t result = State.projectedValue.getter();
    uint64_t v24 = v34;
    uint64_t v23 = v35;
    uint64_t v17 = v36;
    uint64_t v5 = v37;
    uint64_t v22 = v38;
    uint64_t v6 = v39;
    uint64_t v7 = v40;
    uint64_t v8 = v41;
    uint64_t v9 = v42;
    uint64_t v19 = v43;
    uint64_t v20 = v44;
    uint64_t v21 = v45;
    char v25 = v46;
    int v18 = v47;
    char v16 = v48;
    LOBYTE(v15) = v49;
    LOBYTE(v26) = v50;
    LOBYTE(v27) = v51;
  }
  *(void *)a2 = v24;
  *(void *)(a2 + 8) = v23;
  *(void *)(a2 + 16) = v17;
  *(void *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = v22;
  *(void *)(a2 + 40) = v6;
  *(void *)(a2 + 48) = v7;
  *(void *)(a2 + 56) = v8;
  *(void *)(a2 + 64) = v9;
  *(void *)(a2 + 72) = v19;
  *(void *)(a2 + 80) = v20;
  *(void *)(a2 + 88) = v21;
  *(unsigned char *)(a2 + 96) = v25;
  *(_DWORD *)(a2 + 100) = v18;
  *(unsigned char *)(a2 + 104) = v16;
  *(unsigned char *)(a2 + 105) = v15;
  *(unsigned char *)(a2 + 106) = v26;
  *(unsigned char *)(a2 + 107) = v27;
  return result;
}

uint64_t outlined release of Binding<(String, TextFieldState)>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined consume of TextFieldState.FormatActions?(v2);
  outlined consume of TextFieldState.FormatActions?(v3);
  return a1;
}

uint64_t outlined release of Binding<TextFieldState>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 64);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined consume of TextFieldState.FormatActions?(v2);
  outlined consume of TextFieldState.FormatActions?(v3);
  return a1;
}

uint64_t outlined assign with copy of Binding<TextSelection?>?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Binding<TextSelection?>?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ResolvedTextFieldStyle(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of ResolvedTextFieldStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ResolvedTextFieldStyle();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for ResolvedTextFieldStyle()
{
  uint64_t result = type metadata singleton initialization cache for ResolvedTextFieldStyle;
  if (!type metadata singleton initialization cache for ResolvedTextFieldStyle) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t SearchFieldConfigurationTextFieldStyle.value(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AttributeContainer();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SearchFieldConfiguration.Data?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, MEMORY[0x1E4F273A8], MEMORY[0x1E4F41638]);
  MEMORY[0x1F4188790](v7);
  MEMORY[0x1F4188790](v8);
  unsigned int v10 = (char *)&v44 - v9;
  uint64_t v11 = *(void *)(a1 + 72);
  uint64_t v12 = *(void *)(a1 + 80);
  uint64_t v13 = *(void *)(a1 + 88);
  uint64_t v14 = *(void *)(a1 + 96);
  uint64_t v16 = *(void *)(a1 + 104);
  uint64_t v15 = *(void *)(a1 + 112);
  uint64_t v18 = *(void *)(a1 + 120);
  uint64_t v17 = *(void *)(a1 + 128);
  uint64_t v19 = *(void *)(a1 + 136);
  uint64_t v20 = *(void *)(a1 + 144);
  uint64_t v21 = *(void *)(a1 + 160);
  uint64_t v53 = *(void *)(a1 + 152);
  char v22 = *(unsigned char *)(a1 + 180);
  uint64_t v44 = a2;
  uint64_t v57 = v23;
  uint64_t v56 = (uint64_t *)v10;
  unsigned int v55 = v6;
  uint64_t v54 = v24;
  if (v22)
  {
    uint64_t KeyPath = v11;
    uint64_t v75 = v12;
    uint64_t v51 = v13;
    uint64_t v76 = v13;
    uint64_t v77 = v14;
    uint64_t v78 = v16;
    uint64_t v79 = v15;
    uint64_t v80 = v18;
    uint64_t v81 = v17;
    uint64_t v82 = v19;
    uint64_t v52 = v11;
    uint64_t v25 = v19;
    uint64_t v26 = v15;
    uint64_t v27 = v12;
    swift_retain();
    uint64_t v45 = v27;
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v50 = v16;
    uint64_t v48 = v26;
    uint64_t v46 = v18;
    outlined copy of TextFieldState.FormatActions?(v16);
    uint64_t v49 = v25;
    uint64_t v47 = v20;
    outlined copy of TextFieldState.FormatActions?(v25);
  }
  else
  {
    uint64_t v28 = *(void *)(a1 + 168);
    uint64_t v58 = v11;
    uint64_t v59 = v12;
    uint64_t v60 = v13;
    uint64_t v61 = v14;
    uint64_t v62 = v16;
    uint64_t v63 = v15;
    uint64_t v64 = v18;
    uint64_t v65 = v17;
    uint64_t v66 = v19;
    uint64_t v67 = v20;
    char v68 = v53 & 1;
    int v69 = HIDWORD(v53);
    __int16 v70 = v21 & 0xFF01;
    char v71 = BYTE2(v21) & 1;
    char v72 = BYTE3(v21) & 1;
    uint64_t v73 = v28;
    type metadata accessor for State<TextFieldState>();
    State.projectedValue.getter();
    uint64_t v52 = KeyPath;
    uint64_t v45 = v75;
    uint64_t v51 = v76;
    uint64_t v50 = v78;
    uint64_t v48 = v79;
    uint64_t v46 = v80;
    uint64_t v49 = v82;
    uint64_t v47 = v83;
  }
  uint64_t KeyPath = swift_getKeyPath();
  type metadata accessor for _PreferenceWritingModifier<SearchFieldConfiguration.Key>(0, (unint64_t *)&lazy cache variable for type metadata for WritableKeyPath<TextFieldState, String>, (uint64_t)&type metadata for TextFieldState, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBC08]);
  lazy protocol witness table accessor for type WritableKeyPath<TextFieldState, String> and conformance WritableKeyPath<A, B>();
  swift_bridgeObjectRetain();
  dispatch thunk of AnyLocation.projecting<A>(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined consume of TextFieldState.FormatActions?(v50);
  outlined consume of TextFieldState.FormatActions?(v49);
  unint64_t v29 = v56;
  swift_bridgeObjectRetain();
  AttributeContainer.init()();
  AttributedString.init(_:attributes:)();
  lazy protocol witness table accessor for type StringToAttributedStringProjection and conformance StringToAttributedStringProjection();
  uint64_t v30 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  *unint64_t v29 = v52;
  v29[1] = v30;
  uint64_t v31 = v57;
  uint64_t result = outlined init with copy of SearchFieldConfiguration.Data?((uint64_t)v29, v57, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, MEMORY[0x1E4F273A8], MEMORY[0x1E4F41638]);
  uint64_t v33 = *(void *)(a1 + 64);
  if (v33)
  {
    int v34 = *(_DWORD *)(a1 + 56);
    uint64_t v37 = a1 + 40;
    uint64_t v36 = *(void *)(a1 + 40);
    uint64_t v35 = *(void *)(v37 + 8);
    char v38 = v34 & 1;
    outlined copy of Text.Storage(v36, v35, v34 & 1);
    swift_bridgeObjectRetain();
    outlined destroy of Binding<AttributedString>((uint64_t)v29, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, MEMORY[0x1E4F273A8], MEMORY[0x1E4F41638]);
    uint64_t v39 = v31;
    uint64_t v40 = v44;
    outlined init with take of Binding<AttributedString>(v39, v44);
    uint64_t v41 = type metadata accessor for SearchFieldConfiguration.Data(0);
    uint64_t v42 = v40 + *(int *)(v41 + 20);
    *(void *)uint64_t v42 = v36;
    *(void *)(v42 + 8) = v35;
    *(unsigned char *)(v42 + 16) = v38;
    *(void *)(v42 + 24) = v33;
    uint64_t v43 = v40 + *(int *)(v41 + 24);
    *(void *)uint64_t v43 = 0;
    *(unsigned char *)(v43 + 8) = -1;
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v40, 0, 1, v41);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SearchFieldConfiguration.Data(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1882843BC);
}

uint64_t destroy for ResolvedTextFieldStyle(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 64))
  {
    outlined consume of Text.Storage(*(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
    swift_bridgeObjectRelease();
  }
  outlined consume of StateOrBinding<TextFieldState>(*(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144), *(void *)(a1 + 152), *(void *)(a1 + 160), *(void *)(a1 + 168), *(_DWORD *)(a1 + 176), *(unsigned char *)(a1 + 180));
  type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v3 = a1 + *(int *)(v2 + 56);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v5 = v4;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4);
  if (!result)
  {
    swift_release();
    swift_release();
    uint64_t v7 = v3 + *(int *)(v5 + 32);
    uint64_t v8 = type metadata accessor for TextSelection(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8);
    if (!result)
    {
      type metadata accessor for TextSelection.Indices(0);
      uint64_t result = swift_getEnumCaseMultiPayload();
      if (result == 1)
      {
        type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
        return v10(v7, v9);
      }
    }
  }
  return result;
}

uint64_t outlined consume of StateOrBinding<TextFieldState>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, char a15)
{
  if (a15)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of TextFieldState.FormatActions?(a5);
    return outlined consume of TextFieldState.FormatActions?(a9);
  }
  else
  {
    swift_bridgeObjectRelease();
    outlined consume of TextFieldState.FormatActions?(a3);
    outlined consume of TextFieldState.FormatActions?(a7);
    return swift_release();
  }
}

uint64_t outlined consume of TextFieldState.FormatActions?(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for ResolvedTextFieldStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v6 = *(void *)(a2 + 64);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 40);
    uint64_t v8 = *(void *)(a2 + 48);
    char v9 = *(unsigned char *)(a2 + 56);
    outlined copy of Text.Storage(v7, v8, v9);
    *(void *)(a1 + 40) = v7;
    *(void *)(a1 + 48) = v8;
    *(unsigned char *)(a1 + 56) = v9;
    *(void *)(a1 + 64) = v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v10;
  }
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  uint64_t v13 = *(void *)(a2 + 88);
  uint64_t v14 = *(void *)(a2 + 96);
  uint64_t v15 = *(void *)(a2 + 104);
  uint64_t v16 = *(void *)(a2 + 112);
  uint64_t v17 = *(void *)(a2 + 120);
  uint64_t v18 = *(void *)(a2 + 128);
  uint64_t v36 = *(void *)(a2 + 136);
  uint64_t v37 = *(void *)(a2 + 144);
  uint64_t v38 = *(void *)(a2 + 152);
  uint64_t v39 = *(void *)(a2 + 160);
  uint64_t v40 = *(void *)(a2 + 168);
  int v41 = *(_DWORD *)(a2 + 176);
  char v43 = *(unsigned char *)(a2 + 180);
  outlined copy of StateOrBinding<TextFieldState>(v11, v12, v13, v14, v15, v16, v17, v18, v36, v37, v38, v39, v40, v41, v43);
  *(void *)(a1 + 72) = v11;
  *(void *)(a1 + 80) = v12;
  *(void *)(a1 + 88) = v13;
  *(void *)(a1 + 96) = v14;
  *(void *)(a1 + 104) = v15;
  *(void *)(a1 + 112) = v16;
  *(void *)(a1 + 120) = v17;
  *(void *)(a1 + 128) = v18;
  *(void *)(a1 + 136) = v36;
  *(void *)(a1 + 144) = v37;
  *(void *)(a1 + 152) = v38;
  *(void *)(a1 + 160) = v39;
  *(void *)(a1 + 168) = v40;
  *(_DWORD *)(a1 + 176) = v41;
  *(unsigned char *)(a1 + 180) = v43;
  type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v20 = *(int *)(v19 + 56);
  uint64_t v21 = (void *)(a1 + v20);
  char v22 = (void *)(a2 + v20);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v24 = v23;
  uint64_t v25 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v23))
  {
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_0(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
    memcpy(v21, v22, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    uint64_t v27 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v27;
    uint64_t v28 = *(int *)(v24 + 32);
    uint64_t v44 = (char *)v21 + v28;
    unint64_t v29 = (char *)v22 + v28;
    uint64_t v30 = type metadata accessor for TextSelection(0);
    uint64_t v42 = *(void *)(v30 - 8);
    uint64_t v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
    swift_retain();
    swift_retain();
    if (v31(v29, 1, v30))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v44, v29, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      uint64_t v33 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16))(v44, v29, v34);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v44, v29, *(void *)(*(void *)(v33 - 8) + 64));
      }
      v44[*(int *)(v30 + 20)] = v29[*(int *)(v30 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v44, 0, 1, v30);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v21, 0, 1, v24);
  }
  return a1;
}

void type metadata accessor for Binding<TextSelection?>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_2(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_3(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_4(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = a4(a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_5(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for Binding<TextSelection?>(uint64_t a1)
{
}

uint64_t outlined copy of StateOrBinding<TextFieldState>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, char a15)
{
  if (a15)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    outlined copy of TextFieldState.FormatActions?(a5);
    return outlined copy of TextFieldState.FormatActions?(a9);
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined copy of TextFieldState.FormatActions?(a3);
    outlined copy of TextFieldState.FormatActions?(a7);
    return swift_retain();
  }
}

uint64_t outlined copy of TextFieldState.FormatActions?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t type metadata accessor for TextSelection(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for TextSelection);
}

uint64_t type metadata accessor for SearchFieldConfiguration.Data(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, type metadata singleton initialization cache for SearchFieldConfiguration.Data);
}

unint64_t lazy protocol witness table accessor for type WritableKeyPath<TextFieldState, String> and conformance WritableKeyPath<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type WritableKeyPath<TextFieldState, String> and conformance WritableKeyPath<A, B>;
  if (!lazy protocol witness table cache variable for type WritableKeyPath<TextFieldState, String> and conformance WritableKeyPath<A, B>)
  {
    type metadata accessor for _PreferenceWritingModifier<SearchFieldConfiguration.Key>(255, (unint64_t *)&lazy cache variable for type metadata for WritableKeyPath<TextFieldState, String>, (uint64_t)&type metadata for TextFieldState, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBC08]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WritableKeyPath<TextFieldState, String> and conformance WritableKeyPath<A, B>);
  }
  return result;
}

uint64_t outlined init with take of Binding<AttributedString>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Binding<AttributedString>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for TextSelection?(uint64_t a1)
{
}

uint64_t protocol witness for TextFieldStyle._body(configuration:) in conformance SearchFieldConfigurationTextFieldStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for _PreferenceWritingModifier<SearchFieldConfiguration.Key>(0, &lazy cache variable for type metadata for _PreferenceWritingModifier<SearchFieldConfiguration.Key>, (uint64_t)&type metadata for SearchFieldConfiguration.Key, (uint64_t)&protocol witness table for SearchFieldConfiguration.Key, MEMORY[0x1E4F40F90]);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v12 - v5;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  type metadata accessor for SearchFieldConfiguration.Data?(0, &lazy cache variable for type metadata for SearchFieldConfiguration.Data?, type metadata accessor for SearchFieldConfiguration.Data, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v12 - v9;
  SearchFieldConfigurationTextFieldStyle.value(_:)(a1, (uint64_t)&v12 - v9);
  outlined init with copy of SearchFieldConfiguration.Data?((uint64_t)v10, (uint64_t)v6, &lazy cache variable for type metadata for SearchFieldConfiguration.Data?, type metadata accessor for SearchFieldConfiguration.Data, v7);
  outlined init with copy of _PreferenceWritingModifier<SearchFieldConfiguration.Key>((uint64_t)v6, a2);
  outlined destroy of _PreferenceWritingModifier<SearchFieldConfiguration.Key>((uint64_t)v6);
  return outlined destroy of Binding<AttributedString>((uint64_t)v10, &lazy cache variable for type metadata for SearchFieldConfiguration.Data?, type metadata accessor for SearchFieldConfiguration.Data, v7);
}

uint64_t outlined destroy of Binding<AttributedString>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  type metadata accessor for SearchFieldConfiguration.Data?(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void type metadata accessor for SearchFieldConfiguration.Data?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s7SwiftUI24SearchFieldConfigurationV4DataVSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined destroy of _PreferenceWritingModifier<SearchFieldConfiguration.Key>(uint64_t a1)
{
  type metadata accessor for _PreferenceWritingModifier<SearchFieldConfiguration.Key>(0, &lazy cache variable for type metadata for _PreferenceWritingModifier<SearchFieldConfiguration.Key>, (uint64_t)&type metadata for SearchFieldConfiguration.Key, (uint64_t)&protocol witness table for SearchFieldConfiguration.Key, MEMORY[0x1E4F40F90]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of _PreferenceWritingModifier<SearchFieldConfiguration.Key>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _PreferenceWritingModifier<SearchFieldConfiguration.Key>(0, &lazy cache variable for type metadata for _PreferenceWritingModifier<SearchFieldConfiguration.Key>, (uint64_t)&type metadata for SearchFieldConfiguration.Key, (uint64_t)&protocol witness table for SearchFieldConfiguration.Key, MEMORY[0x1E4F40F90]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t TextFieldStyleModifier.styleBody(configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v15 - v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v3 + 24))(a1, v4, v3, v10);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v8, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v13)(v12, AssociatedTypeWitness);
}

uint64_t destroy for SearchFieldConfiguration.Data(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, MEMORY[0x1E4F273A8], MEMORY[0x1E4F41638]);
  uint64_t v5 = a1 + *(int *)(v4 + 32);
  uint64_t v6 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  outlined consume of Text.Storage(*(void *)(a1 + *(int *)(a2 + 20)), *(void *)(a1 + *(int *)(a2 + 20) + 8), *(unsigned char *)(a1 + *(int *)(a2 + 20) + 16));
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v8 = a1 + *(int *)(a2 + 24);
  int v9 = *(unsigned __int8 *)(v8 + 8);
  if (v9 != 255)
  {
    uint64_t v10 = *(void *)v8;
    return outlined consume of PlatformItemCollection.Storage(v10, v9 & 1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_UnaryViewAdaptor<EmptyView>, _PreferenceWritingModifier<SearchFieldConfiguration.Key>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<EmptyView>, _PreferenceWritingModifier<SearchFieldConfiguration.Key>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<EmptyView>, _PreferenceWritingModifier<SearchFieldConfiguration.Key>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_UnaryViewAdaptor<EmptyView>, _PreferenceWritingModifier<SearchFieldConfiguration.Key>>();
    lazy protocol witness table accessor for type _UnaryViewAdaptor<EmptyView> and conformance _UnaryViewAdaptor<A>();
    lazy protocol witness table accessor for type _PreferenceWritingModifier<SearchFieldConfiguration.Key> and conformance _PreferenceWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<EmptyView>, _PreferenceWritingModifier<SearchFieldConfiguration.Key>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _PreferenceWritingModifier<SearchFieldConfiguration.Key> and conformance _PreferenceWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceWritingModifier<SearchFieldConfiguration.Key> and conformance _PreferenceWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceWritingModifier<SearchFieldConfiguration.Key> and conformance _PreferenceWritingModifier<A>)
  {
    type metadata accessor for _PreferenceWritingModifier<SearchFieldConfiguration.Key>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<SearchFieldConfiguration.Key>, (uint64_t)&type metadata for SearchFieldConfiguration.Key, (uint64_t)&protocol witness table for SearchFieldConfiguration.Key, MEMORY[0x1E4F40F90]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceWritingModifier<SearchFieldConfiguration.Key> and conformance _PreferenceWritingModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _UnaryViewAdaptor<EmptyView> and conformance _UnaryViewAdaptor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _UnaryViewAdaptor<EmptyView> and conformance _UnaryViewAdaptor<A>;
  if (!lazy protocol witness table cache variable for type _UnaryViewAdaptor<EmptyView> and conformance _UnaryViewAdaptor<A>)
  {
    type metadata accessor for _PreferenceWritingModifier<SearchFieldConfiguration.Key>(255, &lazy cache variable for type metadata for _UnaryViewAdaptor<EmptyView>, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F0], MEMORY[0x1E4F40210]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UnaryViewAdaptor<EmptyView> and conformance _UnaryViewAdaptor<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_UnaryViewAdaptor<EmptyView>, _PreferenceWritingModifier<SearchFieldConfiguration.Key>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_UnaryViewAdaptor<EmptyView>, _PreferenceWritingModifier<SearchFieldConfiguration.Key>>)
  {
    type metadata accessor for _PreferenceWritingModifier<SearchFieldConfiguration.Key>(255, &lazy cache variable for type metadata for _UnaryViewAdaptor<EmptyView>, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F0], MEMORY[0x1E4F40210]);
    type metadata accessor for _PreferenceWritingModifier<SearchFieldConfiguration.Key>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<SearchFieldConfiguration.Key>, (uint64_t)&type metadata for SearchFieldConfiguration.Key, (uint64_t)&protocol witness table for SearchFieldConfiguration.Key, MEMORY[0x1E4F40F90]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_UnaryViewAdaptor<EmptyView>, _PreferenceWritingModifier<SearchFieldConfiguration.Key>>);
    }
  }
}

void type metadata accessor for _PreferenceWritingModifier<SearchFieldConfiguration.Key>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TextFieldStateTextProjection and conformance TextFieldStateTextProjection()
{
  unint64_t result = lazy protocol witness table cache variable for type TextFieldStateTextProjection and conformance TextFieldStateTextProjection;
  if (!lazy protocol witness table cache variable for type TextFieldStateTextProjection and conformance TextFieldStateTextProjection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextFieldStateTextProjection and conformance TextFieldStateTextProjection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextFieldStateTextProjection and conformance TextFieldStateTextProjection;
  if (!lazy protocol witness table cache variable for type TextFieldStateTextProjection and conformance TextFieldStateTextProjection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextFieldStateTextProjection and conformance TextFieldStateTextProjection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextFieldStateTextProjection and conformance TextFieldStateTextProjection;
  if (!lazy protocol witness table cache variable for type TextFieldStateTextProjection and conformance TextFieldStateTextProjection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextFieldStateTextProjection and conformance TextFieldStateTextProjection);
  }
  return result;
}

uint64_t SearchModifier.init<>(text:isPresented:placement:prompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, unsigned __int8 *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  int v89 = a7;
  uint64_t v88 = a6;
  uint64_t v87 = a5;
  uint64_t v101 = a2;
  uint64_t v102 = a3;
  uint64_t v95 = a1;
  uint64_t v90 = a9;
  type metadata accessor for TextField<EmptyView>();
  uint64_t v86 = v15;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<TextSelection?>?(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v85 = (char *)&v78 - v19;
  uint64_t v82 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v82);
  uint64_t v97 = (char *)&v78 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SearchModifier<TextField<EmptyView>>();
  Class v84 = v21;
  MEMORY[0x1F4188790](v21);
  uint64_t v105 = (uint64_t)&v78 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for AttributeContainer();
  MEMORY[0x1F4188790](v23 - 8);
  type metadata accessor for Binding<AttributedString>();
  MEMORY[0x1F4188790](v24);
  uint64_t v100 = (uint64_t)&v78 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  int v96 = (uint64_t *)((char *)&v78 - v27);
  int v83 = *a8;
  if (a13)
  {
    unsigned int v28 = a12 & 1;
    uint64_t v99 = a10;
    uint64_t v103 = a13;
    uint64_t v104 = a11;
  }
  else
  {
    uint64_t v99 = static Text.System.search.getter();
    uint64_t v103 = v30;
    uint64_t v104 = v29;
    unsigned int v28 = v31 & 1;
  }
  uint64_t v32 = v96;
  uint64_t v98 = a4;
  swift_bridgeObjectRetain();
  uint64_t v91 = a10;
  uint64_t v92 = a11;
  uint64_t v93 = a12;
  uint64_t v94 = a13;
  outlined copy of Text?(a10, a11, a12, a13);
  AttributeContainer.init()();
  AttributedString.init(_:attributes:)();
  lazy protocol witness table accessor for type StringToAttributedStringProjection and conformance StringToAttributedStringProjection();
  uint64_t v33 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  uint64_t v34 = v95;
  *uint64_t v32 = v95;
  v32[1] = v33;
  uint64_t v81 = type metadata accessor for Binding<AttributedString>;
  outlined init with copy of Binding<AttributedString>((uint64_t)v32, v100, (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>);
  uint64_t v35 = v84;
  uint64_t v36 = v105 + v84[12];
  *(void *)uint64_t v36 = 0;
  *(void *)(v36 + 8) = 0;
  uint64_t v79 = v36;
  *(_WORD *)(v36 + 16) = 0;
  uint64_t v37 = v97;
  unsigned char *v97 = 2;
  uint64_t v38 = self;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v39 = v99;
  outlined copy of Text.Storage(v99, v104, v28);
  id v40 = objc_msgSend(v38, sel_currentTraitCollection);
  id v41 = objc_msgSend(v40, sel_horizontalSizeClass);

  id v42 = objc_msgSend(v38, sel_currentTraitCollection);
  id v43 = objc_msgSend(v42, sel_userInterfaceIdiom);

  char v44 = specialized SearchSuggestionsPlacement.Role.init(sizeClass:idiom:placement:)((uint64_t)v41, (uint64_t)v43, 2u);
  v37[1] = (v44 == 2) | v44 & 1;
  *((_WORD *)v37 + 1) = 2;
  *((_DWORD *)v37 + 1) = 0;
  v37[8] = 1;
  uint64_t v45 = v82;
  AttributedString.init()();
  v37[*(int *)(v45 + 40)] = 0;
  uint64_t v46 = &v37[*(int *)(v45 + 44)];
  *(_DWORD *)uint64_t v46 = 0;
  v46[4] = 0;
  uint64_t v106 = 0;
  uint64_t v47 = v103;
  swift_bridgeObjectRetain();
  uint64_t v48 = v104;
  outlined copy of Text.Storage(v39, v104, v28);
  Text.assertUnstyled(_:options:)();
  outlined consume of Text.Storage(v39, v48, v28);
  swift_bridgeObjectRelease();
  uint64_t v49 = v105;
  *(void *)(v105 + 8) = v39;
  *(void *)(v49 + 16) = v48;
  uint64_t v99 = v39;
  uint64_t v103 = v47;
  uint64_t v104 = v48;
  *(unsigned char *)(v49 + 24) = v28;
  *(void *)(v49 + 32) = v47;
  uint64_t v50 = v49;
  outlined init with copy of Binding<AttributedString>(v100, v49 + v35[11], (uint64_t (*)(void))v81);
  uint64_t v51 = v50 + v35[13];
  outlined init with copy of Binding<AttributedString>((uint64_t)v37, v51, type metadata accessor for SearchFieldState);
  type metadata accessor for Binding<TextSelection?>?(0, &lazy cache variable for type metadata for State<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41580]);
  *(void *)(v51 + *(int *)(v52 + 28)) = 0;
  uint64_t v82 = v50 + v35[10];
  uint64_t v81 = (void (*)())v28;
  uint64_t v53 = v101;
  uint64_t v106 = v34;
  uint64_t v107 = v101;
  uint64_t v108 = v102;
  uint64_t v109 = v98;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  LODWORD(v84) = v28;
  outlined copy of Text.Storage(v39, v48, v28);
  type metadata accessor for Binding<String>();
  uint64_t v55 = v54;
  swift_retain();
  MEMORY[0x18C113DA0](v110, v55);
  uint64_t v56 = v110[0];
  uint64_t v80 = v110[1];
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v58 = v57;
  uint64_t v59 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56);
  uint64_t v60 = (uint64_t)v85;
  v59(v85, 1, 1, v57);
  uint64_t v61 = (uint64_t)&v17[*(int *)(v86 + 56)];
  v59((char *)v61, 1, 1, v58);
  uint64_t v62 = v98;
  uint64_t v63 = v80;
  *((void *)v17 + 9) = v56;
  *((void *)v17 + 10) = v63;
  *(_OWORD *)(v17 + 88) = 0u;
  *(_OWORD *)(v17 + 104) = 0u;
  *(_OWORD *)(v17 + 120) = 0u;
  *(_OWORD *)(v17 + 136) = 0u;
  *((void *)v17 + 19) = 0;
  *((_OWORD *)v17 + 10) = xmmword_18836F120;
  *((_DWORD *)v17 + 44) = 0;
  v17[180] = 0;
  *(void *)uint64_t v17 = v34;
  *((void *)v17 + 1) = v53;
  uint64_t v64 = v103;
  *((void *)v17 + 2) = v102;
  *((void *)v17 + 3) = v62;
  *((_WORD *)v17 + 16) = 0;
  uint64_t v65 = v99;
  uint64_t v66 = v104;
  *((void *)v17 + 5) = v99;
  *((void *)v17 + 6) = v66;
  *((void *)v17 + 7) = v81;
  *((void *)v17 + 8) = v64;
  outlined assign with take of Binding<TextSelection?>?(v60, v61);
  outlined init with take of TextField<EmptyView>((uint64_t)v17, v82, (uint64_t (*)(void))type metadata accessor for TextField<EmptyView>);
  *(unsigned char *)uint64_t v105 = v83;
  char v67 = v89;
  uint64_t v68 = v88;
  uint64_t v69 = v87;
  if (v88)
  {
    uint64_t v70 = v79;
    uint64_t v71 = v65;
    uint64_t v72 = *(void *)v79;
    uint64_t v73 = *(void *)(v79 + 8);
    char v74 = *(unsigned char *)(v79 + 17);
    *(void *)uint64_t v79 = v87;
    *(void *)(v70 + 8) = v68;
    uint64_t v75 = *(unsigned __int8 *)(v70 + 16);
    *(unsigned char *)(v70 + 16) = v67 & 1;
    *(unsigned char *)(v70 + 17) = 1;
    swift_retain();
    swift_retain();
    uint64_t v76 = v73;
    uint64_t v65 = v71;
    outlined consume of StateOrBinding<Bool>(v72, v76, v75, v74);
  }
  outlined destroy of SearchModifier<TextField<EmptyView>>(v100, (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>);
  outlined destroy of SearchModifier<TextField<EmptyView>>((uint64_t)v97, type metadata accessor for SearchFieldState);
  outlined consume of Binding<NavigationSplitViewColumn>?(v69, v68);
  outlined init with take of TextField<EmptyView>(v105, v90, (uint64_t (*)(void))type metadata accessor for SearchModifier<TextField<EmptyView>>);
  outlined consume of Text.Storage(v65, v66, (char)v84);
  swift_bridgeObjectRelease();
  outlined consume of Text?(v91, v92, v93, v94);
  outlined destroy of SearchModifier<TextField<EmptyView>>((uint64_t)v96, (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void type metadata accessor for SearchModifier<TextField<EmptyView>>()
{
  if (!lazy cache variable for type metadata for SearchModifier<TextField<EmptyView>>)
  {
    type metadata accessor for TextField<EmptyView>();
    lazy protocol witness table accessor for type TextField<EmptyView> and conformance TextField<A>(&lazy protocol witness table cache variable for type TextField<EmptyView> and conformance TextField<A>, (void (*)(uint64_t))type metadata accessor for TextField<EmptyView>);
    unint64_t v0 = type metadata accessor for SearchModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SearchModifier<TextField<EmptyView>>);
    }
  }
}

uint64_t type metadata accessor for SearchModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined destroy of SearchModifier<TextField<EmptyView>>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t lazy protocol witness table accessor for type TextField<EmptyView> and conformance TextField<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of TextField<EmptyView>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for Binding<TextSelection?>?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s7SwiftUI7BindingVyAA13TextSelectionVSgGSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s7SwiftUI7BindingVyAA13TextSelectionVSgGSgMaTm_1(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for TextField<EmptyView>()
{
  if (!lazy cache variable for type metadata for TextField<EmptyView>)
  {
    unint64_t v0 = type metadata accessor for TextField();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TextField<EmptyView>);
    }
  }
}

uint64_t type metadata accessor for TextField()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized SearchSuggestionsPlacement.Role.init(sizeClass:idiom:placement:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  char v6 = static SemanticFeature.isEnabled.getter();
  uint64_t result = 1;
  if ((v6 & 1) != 0 && a3 - 2 <= 5)
  {
    if (a2 == 5)
    {
      static Semantics.v4_4.getter();
      return (isLinkedOnOrAfter(_:)() & 1) == 0;
    }
    else if (a1 == 1)
    {
      return 1;
    }
    else
    {
      return 2 * (a1 != 2);
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StringToAttributedStringProjection and conformance StringToAttributedStringProjection()
{
  unint64_t result = lazy protocol witness table cache variable for type StringToAttributedStringProjection and conformance StringToAttributedStringProjection;
  if (!lazy protocol witness table cache variable for type StringToAttributedStringProjection and conformance StringToAttributedStringProjection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StringToAttributedStringProjection and conformance StringToAttributedStringProjection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StringToAttributedStringProjection and conformance StringToAttributedStringProjection;
  if (!lazy protocol witness table cache variable for type StringToAttributedStringProjection and conformance StringToAttributedStringProjection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StringToAttributedStringProjection and conformance StringToAttributedStringProjection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StringToAttributedStringProjection and conformance StringToAttributedStringProjection;
  if (!lazy protocol witness table cache variable for type StringToAttributedStringProjection and conformance StringToAttributedStringProjection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StringToAttributedStringProjection and conformance StringToAttributedStringProjection);
  }
  return result;
}

void type metadata accessor for Binding<String>()
{
  if (!lazy cache variable for type metadata for Binding<String>)
  {
    unint64_t v0 = type metadata accessor for Binding();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>);
    }
  }
}

uint64_t outlined assign with take of Binding<TextSelection?>?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Binding<TextSelection?>?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void type metadata completion function for TextField()
{
  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Binding<TextSelection?>?(319);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for Binding<TextSelection?>?(uint64_t a1)
{
}

uint64_t static AccessibilityFrameModifier._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(void *)a2;
  int v5 = *(_DWORD *)(a2 + 8);
  unint64_t v6 = *(void *)(a2 + 16);
  int v7 = *(_DWORD *)(a2 + 24);
  int v8 = *(_DWORD *)(a2 + 28);
  unsigned int v10 = *(_DWORD *)(a2 + 32);
  unsigned int v9 = *(_DWORD *)(a2 + 36);
  uint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = *(void *)(a2 + 48);
  int v14 = *(_DWORD *)(a2 + 56);
  int v13 = *(_DWORD *)(a2 + 60);
  int v15 = *(_DWORD *)(a2 + 64);
  int v16 = *(_DWORD *)(a2 + 68);
  int v17 = *(_DWORD *)(a2 + 72);
  int v18 = *(_DWORD *)(a2 + 76);
  int v19 = *(_DWORD *)(a2 + 80);
  unint64_t v45 = *(void *)a2;
  int v40 = v5;
  int v46 = v5;
  unint64_t v39 = v6;
  unint64_t v48 = v6;
  int v49 = v7;
  int v50 = v8;
  unint64_t v51 = __PAIR64__(v9, v10);
  unsigned int v38 = v9;
  uint64_t v37 = v11;
  uint64_t v52 = v11;
  unint64_t v53 = v12;
  int v54 = v14;
  int v55 = v13;
  int v35 = v15;
  int v36 = v13;
  int v56 = v15;
  int v57 = v16;
  int v33 = v17;
  int v34 = v16;
  int v58 = v17;
  int v59 = v18;
  int v31 = v19;
  int v32 = v18;
  int v60 = v19;
  a3(&v42, a1, &v45);
  unint64_t v45 = v12;
  int v46 = v14;
  uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  unint64_t v21 = v42;
  int v22 = v43;
  int v23 = v44;
  if (result)
  {
    unint64_t v45 = v42;
    int v46 = v43;
    int v47 = v44;
    uint64_t result = _ViewOutputs.subscript.getter();
    if ((result & 0x100000000) == 0)
    {
      unint64_t v45 = v4;
      int v46 = v40;
      unint64_t v48 = v39;
      int v49 = v7;
      int v50 = v8;
      unint64_t v51 = __PAIR64__(v38, v10);
      uint64_t v52 = v37;
      unint64_t v53 = v12;
      int v54 = v14;
      int v55 = v36;
      int v56 = v35;
      int v57 = v34;
      int v58 = v33;
      int v59 = v32;
      int v60 = v31;
      unsigned int v24 = result;
      swift_getKeyPath();
      unsigned int v25 = _ViewInputs.mapEnvironment<A>(_:)();
      swift_release();
      unint64_t v45 = v21;
      int v46 = v22;
      int v47 = v23;
      uint64_t v26 = _ViewOutputs.subscript.getter();
      int v27 = *MEMORY[0x1E4F4E7A0];
      if ((v26 & 0x100000000) != 0) {
        int v28 = *MEMORY[0x1E4F4E7A0];
      }
      else {
        int v28 = v26;
      }
      AccessibilityAttachmentToken.init<A>(_:)();
      unint64_t v29 = v45;
      char v30 = v46;
      unint64_t v45 = __PAIR64__(v25, v24);
      int v46 = v28;
      int v47 = v27;
      unint64_t v48 = v29;
      LOBYTE(v49) = v30;
      unint64_t v51 = 0;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type ViewResponderTransform and conformance ViewResponderTransform();
      Attribute.init<A>(body:value:flags:update:)();
      static AGAttributeFlags.removable.getter();
      AGGraphSetFlags();
      LOBYTE(v45) = 0;
      uint64_t result = _ViewOutputs.subscript.setter();
      unint64_t v21 = v42;
      int v22 = v43;
      int v23 = v44;
    }
  }
  *(void *)a4 = v21;
  *(_DWORD *)(a4 + 8) = v22;
  *(_DWORD *)(a4 + 12) = v23;
  return result;
}

uint64_t type metadata accessor for PlatformSceneCache()
{
  return self;
}

uint64_t static ToolbarItem._makeToolbar(content:inputs:)@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a2;
  unsigned int v23 = *((_DWORD *)a2 + 6);
  int v24 = *((_DWORD *)a2 + 2);
  unsigned int v22 = *((_DWORD *)a2 + 7);
  unsigned int v15 = *((_DWORD *)a2 + 9);
  unsigned int v16 = *((_DWORD *)a2 + 8);
  uint64_t v8 = a2[6];
  uint64_t v18 = a2[5];
  uint64_t v19 = a2[2];
  int v14 = *((_DWORD *)a2 + 14);
  uint64_t v21 = a2[8];
  int v20 = *((_DWORD *)a2 + 18);
  unsigned int v9 = *a1;
  LODWORD(v30) = *a1;
  type metadata accessor for ToolbarItem();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(void *)(*(void *)(a4 - 8) + 64)) {
    closure #1 in static ToolbarItem._makeToolbar(content:inputs:)(1, a3, a4);
  }
  AGGraphCreateOffsetAttribute2();
  type metadata accessor for ToolbarItem.MakeView();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  _GraphValue.value.getter();
  closure #2 in static ToolbarItem._makeToolbar(content:inputs:)(1);
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  DWORD2(v30) = v24;
  *(void *)&long long v31 = v19;
  *((void *)&v31 + 1) = __PAIR64__(v22, v23);
  *(void *)&long long v32 = __PAIR64__(v15, v16);
  *((void *)&v32 + 1) = v18;
  *(void *)&long long v33 = v8;
  DWORD2(v33) = v14;
  *(void *)&long long v34 = v21;
  DWORD2(v34) = v20;
  int v12 = static ToolbarContent.makeViewList<A>(placement:content:inputs:)();
  *(void *)&long long v30 = __PAIR64__(HIDWORD(v7), v9);
  int v10 = _GraphValue.value.getter();
  *(void *)&long long v25 = v7;
  DWORD2(v25) = v24;
  *(void *)&long long v26 = v19;
  *((void *)&v26 + 1) = __PAIR64__(v22, v23);
  *(void *)&long long v27 = __PAIR64__(v15, v16);
  *((void *)&v27 + 1) = v18;
  *(void *)&long long v28 = v8;
  DWORD2(v28) = v14;
  *(void *)&long long v29 = v21;
  DWORD2(v29) = v20;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ToolbarMakeEntries.init<A, B>(placement:toolbarItem:viewList:inputs:)(OffsetAttribute2, v10, v12, (uint64_t *)&v25, a3, (uint64_t)&v30);
  long long v27 = v32;
  long long v28 = v33;
  long long v29 = v34;
  long long v25 = v30;
  long long v26 = v31;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for [ToolbarStorage.Entry](0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarStorage.Entry], type metadata accessor for ToolbarStorage.Entry, MEMORY[0x1E4FBB320]);
  lazy protocol witness table accessor for type ToolbarMakeEntries and conformance ToolbarMakeEntries();
  Attribute.init<A>(body:value:flags:update:)();
  *(void *)&long long v25 = v7;
  DWORD2(v25) = v24;
  *(void *)&long long v26 = v19;
  *((void *)&v26 + 1) = __PAIR64__(v22, v23);
  *(void *)&long long v27 = __PAIR64__(v15, v16);
  *((void *)&v27 + 1) = v18;
  *(void *)&long long v28 = v8;
  DWORD2(v28) = v14;
  *(void *)&long long v29 = v21;
  DWORD2(v29) = v20;
  static ToolbarContent.makeToolbarOutputs(placement:entries:inputs:)((uint64_t)&v25, a5);
  return outlined release of ToolbarMakeEntries((uint64_t)&v30);
}

uint64_t static ToolbarModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, void *, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  void *(*v30)(uint64_t *__return_ptr, uint64_t *, uint64_t *, uint64_t, uint64_t);
  void *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t OffsetAttribute2;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  void (*v59)(uint64_t *, void);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t *v66;
  void v68[5];
  uint64_t *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  void (*v73)(uint64_t *__return_ptr, void *, uint64_t *);
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t WitnessTable;
  uint64_t v113;
  int v114;
  uint64_t v115;
  long long v116;
  uint64_t v117;
  uint64_t v118;
  long long v119;
  unint64_t v120;
  int v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  long long v125;
  uint64_t v126;
  uint64_t v127;
  long long v128;
  unint64_t v129;
  int v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;

  uint64_t v94 = a5;
  uint64_t v72 = a4;
  uint64_t v73 = a3;
  uint64_t v69 = a8;
  uint64_t v137 = *MEMORY[0x1E4F143B8];
  uint64_t v75 = *a1;
  uint64_t v10 = *(void *)a2;
  int v11 = *(_DWORD *)(a2 + 8);
  uint64_t v12 = *(void *)(a2 + 16);
  unsigned int v13 = *(_DWORD *)(a2 + 28);
  uint64_t v86 = *(_DWORD *)(a2 + 24);
  uint64_t v87 = v11;
  unsigned int v14 = *(_DWORD *)(a2 + 36);
  Class v84 = *(_DWORD *)(a2 + 32);
  uint64_t v85 = v13;
  uint64_t v15 = *(void *)(a2 + 48);
  int v89 = *(void *)(a2 + 40);
  uint64_t v90 = v12;
  uint64_t v92 = v15;
  LODWORD(v93) = *(_DWORD *)(a2 + 56);
  uint64_t v82 = *(_DWORD *)(a2 + 60);
  int v83 = v14;
  uint64_t v81 = *(_DWORD *)(a2 + 64);
  uint64_t v80 = *(_DWORD *)(a2 + 68);
  uint64_t v79 = *(_DWORD *)(a2 + 72);
  uint64_t v78 = *(_DWORD *)(a2 + 76);
  uint64_t v77 = *(_DWORD *)(a2 + 80);
  uint64_t v88 = v10;
  uint64_t v131 = v10;
  uint64_t v132 = v11;
  v133 = v12;
  uint64_t v134 = __PAIR64__(v13, v86);
  uint64_t v135 = __PAIR64__(v14, v84);
  uint64_t v136 = v89;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _GraphInputs.pushStyleContext<A>(_:)();
  PreferenceKeys.init()();
  uint64_t v113 = v122;
  type metadata accessor for External<PreferenceKeys>(0, &lazy cache variable for type metadata for External<PreferenceKeys>, MEMORY[0x1E4F3F9B8], MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>();
  Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  PreferencesInputs.init(hostKeys:)();
  PreferenceKeys.add(_:)();
  PreferenceKeys.add(_:)();
  PreferenceKeys.add(_:)();
  type metadata accessor for PreferenceBridge();
  long long v122 = PreferenceBridge.__allocating_init()();
  uint64_t v16 = a6;
  uint64_t v111 = type metadata accessor for ToolbarModifier.InvalidateBridge();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<PreferenceBridge>(0, &lazy cache variable for type metadata for Attribute<PreferenceBridge>, MEMORY[0x1E4F3FD08], MEMORY[0x1E4F4E740]);
  uint64_t v18 = v17;
  uint64_t v76 = v122;
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v122, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_29, (uint64_t)&v110, v111, MEMORY[0x1E4FBC248], v18, MEMORY[0x1E4FBC278], v19);
  char v74 = 0;
  swift_release();
  int v20 = v113;
  static AGAttributeFlags.invalidatable.getter();
  AGGraphSetFlags();
  uint64_t v21 = v131;
  LODWORD(v70) = v132;
  uint64_t v22 = v133;
  uint64_t v23 = v136;
  uint64_t v24 = v105;
  LODWORD(v91) = v106;
  uint64_t v25 = a7;
  type metadata accessor for ToolbarModifier();
  uint64_t v26 = type metadata accessor for _GraphValue();
  uint64_t v71 = v68;
  unint64_t v27 = v134;
  unint64_t v28 = v135;
  uint64_t v107 = v94;
  uint64_t v108 = v16;
  uint64_t v29 = v16;
  uint64_t v109 = v25;
  LODWORD(v122) = v75;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v68[1] = v26;
  _GraphValue.subscript.getter();
  v68[3] = v23;
  v68[4] = v21;
  long long v122 = v21;
  char v123 = v70;
  uint64_t v70 = v22;
  id v124 = v22;
  *(void *)&uint64_t v125 = v27;
  *((void *)&v125 + 1) = v28;
  uint64_t v126 = v23;
  uint64_t v127 = v24;
  _OWORD v68[2] = v24;
  LODWORD(v128) = v91;
  *((void *)&v128 + 1) = 0;
  LODWORD(v129) = v20;
  long long v30 = *(void *(**)(uint64_t *__return_ptr, uint64_t *, uint64_t *, uint64_t, uint64_t))(v25 + 32);
  uint64_t v91 = v25;
  long long v31 = v30(&v113, &v97, &v122, v16, v25);
  long long v32 = v113;
  long long v33 = v114;
  long long v122 = v88;
  char v123 = v87;
  id v124 = v90;
  *(void *)&uint64_t v125 = __PAIR64__(v85, v86);
  *((void *)&v125 + 1) = __PAIR64__(v83, v84);
  uint64_t v126 = v89;
  uint64_t v127 = v92;
  *(void *)&uint64_t v128 = __PAIR64__(v82, v93);
  *((void *)&v128 + 1) = __PAIR64__(v80, v81);
  uint64_t v129 = __PAIR64__(v78, v79);
  v130 = v77;
  v73(&v102, v31, &v122);
  long long v122 = v32;
  char v123 = v33;
  long long v34 = PreferencesOutputs.subscript.getter();
  if ((v34 & 0x100000000) == 0)
  {
    uint64_t v35 = v34;
    int v36 = v75;
    LODWORD(v122) = v75;
    _GraphValue.value.getter();
    uint64_t v37 = v94;
    unsigned int v38 = v91;
    closure #2 in static ToolbarModifier._makeView(modifier:inputs:body:)(1);
    LODWORD(v73) = AGGraphCreateOffsetAttribute2();
    LODWORD(v122) = v36;
    _GraphValue.value.getter();
    closure #3 in static ToolbarModifier._makeView(modifier:inputs:body:)(1);
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    long long v122 = v92;
    char v123 = v93;
    MEMORY[0x1F4188790](OffsetAttribute2);
    v68[-6] = v37;
    v68[-5] = v29;
    v68[-4] = v38;
    LODWORD(v68[-3]) = v73;
    HIDWORD(v68[-3]) = v40;
    LODWORD(v68[-2]) = v35;
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_bridgeObjectRelease();
  }
  long long v122 = v32;
  char v123 = v33;
  id v41 = PreferencesOutputs.subscript.getter();
  unint64_t v42 = v92;
  if ((v41 & 0x100000000) == 0)
  {
    long long v122 = v92;
    char v123 = v93;
    MEMORY[0x1F4188790](v41);
    v68[-4] = v94;
    v68[-3] = v29;
    v68[-2] = v91;
    LODWORD(v68[-1]) = v43;
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_bridgeObjectRelease();
  }
  long long v122 = v32;
  char v123 = v33;
  int v44 = PreferencesOutputs.subscript.getter();
  unint64_t v45 = swift_bridgeObjectRelease();
  if ((v44 & 0x100000000) == 0)
  {
    long long v122 = v42;
    char v123 = v93;
    MEMORY[0x1F4188790](v45);
    v68[-4] = v94;
    v68[-3] = v29;
    v68[-2] = v91;
    LODWORD(v68[-1]) = v44;
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_bridgeObjectRelease();
  }
  long long v122 = v88;
  char v123 = v87;
  id v124 = v90;
  *(void *)&uint64_t v125 = __PAIR64__(v85, v86);
  *((void *)&v125 + 1) = __PAIR64__(v83, v84);
  uint64_t v126 = v89;
  uint64_t v127 = v42;
  int v46 = v93;
  *(void *)&uint64_t v128 = __PAIR64__(v82, v93);
  *((void *)&v128 + 1) = __PAIR64__(v80, v81);
  uint64_t v129 = __PAIR64__(v78, v79);
  v130 = v77;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferencesOutputs.init()();
  PreferencesInputs.remove<A>(_:)();
  PreferencesInputs.remove<A>(_:)();
  PreferencesInputs.remove<A>(_:)();
  uint64_t v113 = v42;
  uint64_t v114 = v46;
  int v47 = PreferencesInputs.hostKeys.getter();
  LODWORD(v113) = v47;
  MEMORY[0x1F4188790](v47);
  unint64_t v48 = type metadata accessor for ToolbarModifier.HostKeys();
  v68[-2] = v48;
  v68[-1] = swift_getWitnessTable();
  type metadata accessor for External<PreferenceKeys>(0, &lazy cache variable for type metadata for Attribute<PreferenceKeys>, MEMORY[0x1E4F3F9B8], MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v113, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v68[-4], v48, MEMORY[0x1E4FBC248], v49, MEMORY[0x1E4FBC278], v50);
  PreferencesInputs.hostKeys.setter();
  unint64_t v51 = v122;
  uint64_t v52 = v124;
  unint64_t v53 = v126;
  int v54 = v127;
  uint64_t v113 = v122;
  uint64_t v114 = v123;
  int v116 = v125;
  uint64_t v115 = v124;
  uint64_t v117 = v126;
  uint64_t v118 = v127;
  uint64_t v119 = v128;
  uint64_t v120 = v129;
  uint64_t v121 = v130;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceBridge.wrapOutputs(_:inputs:)();
  uint64_t v90 = v54;
  swift_bridgeObjectRelease();
  uint64_t v91 = v53;
  swift_bridgeObjectRelease();
  uint64_t v93 = v52;
  swift_release();
  uint64_t v94 = v51;
  swift_release();
  type metadata accessor for External<PreferenceKeys>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PreferencesOutputs>, MEMORY[0x1E4F402C0], MEMORY[0x1E4FBBE00]);
  int v55 = swift_allocObject();
  *(_OWORD *)(v55 + 16) = xmmword_18834BB70;
  int v56 = v102;
  int v57 = v103;
  *(void *)(v55 + 32) = v102;
  *(_DWORD *)(v55 + 40) = v57;
  int v58 = v101;
  *(void *)(v55 + 48) = v100;
  *(_DWORD *)(v55 + 56) = v58;
  int v89 = v56;
  swift_bridgeObjectRetain();
  PreferencesOutputs.init()();
  uint64_t v97 = v55;
  uint64_t v98 = v113;
  uint64_t v99 = v114;
  uint64_t v95 = v42;
  int v96 = 0;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    do
    {
      int v59 = (void (*)(uint64_t *, void))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      v59(&v113, 0);
      int v60 = v96;
      uint64_t v113 = v95;
      swift_bridgeObjectRetain();
      uint64_t v61 = PreferenceKeys.endIndex.getter();
      if (v60 < 0 || v60 >= v61) {
        __break(1u);
      }
      uint64_t v62 = v60 + 1;
      int v96 = v62;
      swift_bridgeObjectRelease();
      static PreferenceKey.visitKey<A>(_:)();
    }
    while (v62 != PreferenceKeys.endIndex.getter());
  }
  swift_bridgeObjectRelease();
  uint64_t v63 = v98;
  uint64_t v64 = v99;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v65 = v104;
  uint64_t v66 = v69;
  *uint64_t v69 = v63;
  *((_DWORD *)v66 + 2) = v64;
  *((_DWORD *)v66 + 3) = v65;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void type metadata accessor for External<PreferenceKeys>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t protocol witness for static ToolbarContent._makeToolbar(content:inputs:) in conformance TupleToolbarContent<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static TupleToolbarContent._makeToolbar(content:inputs:)(a1, a2, a3);
}

uint64_t static TupleToolbarContent._makeToolbar(content:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  int v28 = *a1;
  uint64_t v4 = *a2;
  int v27 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  uint64_t v7 = a2[5];
  uint64_t v6 = a2[6];
  int v8 = *((_DWORD *)a2 + 14);
  uint64_t v9 = a2[8];
  int v10 = *((_DWORD *)a2 + 18);
  lazy protocol witness table accessor for type ToolbarContentDescriptor and conformance ToolbarContentDescriptor();
  static TupleDescriptor.tupleDescription(_:)();
  uint64_t v11 = v33[0];
  LODWORD(v33[0]) = v28;
  v33[1] = v4;
  int v34 = v27;
  uint64_t v35 = v5;
  long long v12 = *(_OWORD *)(a2 + 3);
  uint64_t v13 = v6;
  long long v36 = v12;
  uint64_t v37 = v7;
  uint64_t v38 = v6;
  int v39 = v8;
  uint64_t v14 = v11;
  uint64_t v40 = v9;
  int v41 = v10;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = MEMORY[0x1E4FBC860];
  uint64_t v15 = *(void *)(v11 + 16);
  if (v15)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v16 = (long long *)(v14 + 40);
    do
    {
      long long v17 = *v16;
      uint64_t v16 = (long long *)((char *)v16 + 24);
      uint64_t v42 = AGTupleElementOffset();
      long long v32 = v17;
      uint64_t v18 = type metadata accessor for TupleToolbarContent.Visitor();
      TypeConformance<>.visitType<A>(visitor:)((uint64_t)v33, v18, (uint64_t)&protocol witness table for TupleToolbarContent<A>.Visitor);
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v19 = swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI15_ToolbarOutputsVG_AF011PreferencesG0Vs5NeverOTg503_s7d9UI19Tuplef39ContentV05_makeD07content6inputsAA01_D7g25VAA11_GraphValueVyACyxGG_q18_D6InputsVtFZAA011H57I0VAHcfu_33_22819586c44c68699c8129f2100aeaa3AhPTf3nnnpk_nTf1cn_n(v19);
  swift_bridgeObjectRelease();
  PreferencesOutputs.init()();
  uint64_t v30 = v32;
  int v31 = DWORD2(v32);
  uint64_t v29 = 0;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    do
    {
      int v20 = (void (*)(long long *, void))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      v20(&v32, 0);
      uint64_t v21 = v29;
      *(void *)&long long v32 = v13;
      swift_bridgeObjectRetain();
      uint64_t v22 = PreferenceKeys.endIndex.getter();
      if (v29 < 0 || v29 >= v22) {
        __break(1u);
      }
      ++v29;
      swift_bridgeObjectRelease();
      static PreferenceKey.visitKey<A>(_:)();
    }
    while (v21 + 1 != PreferenceKeys.endIndex.getter());
  }
  swift_bridgeObjectRelease();
  if (*(void *)(v44 + 16))
  {
    uint64_t v23 = *(void *)(v44 + 48);
    uint64_t v24 = a3;
  }
  else
  {
    uint64_t v24 = a3;
    uint64_t v23 = v9;
  }
  *(void *)uint64_t v24 = v30;
  *(_DWORD *)(v24 + 8) = v31;
  *(void *)(v24 + 16) = v23;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for TupleToolbarContent.Visitor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t TypeConformance<>.visitType<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, void, void, uint64_t))(a3 + 8))(*v3, *v3, v3[1], a2);
}

{
  void *v3;

  return (*(uint64_t (**)(void, void, void, uint64_t))(a3 + 8))(*v3, *v3, v3[1], a2);
}

{
  void *v3;

  return (*(uint64_t (**)(void, void, void, uint64_t))(a3 + 8))(*v3, *v3, v3[1], a2);
}

{
  void *v3;

  return (*(uint64_t (**)(void, void, void, uint64_t))(a3 + 8))(*v3, *v3, v3[1], a2);
}

{
  void *v3;

  return (*(uint64_t (**)(void, void, void, uint64_t))(a3 + 8))(*v3, *v3, v3[1], a2);
}

{
  void *v3;

  return (*(uint64_t (**)(void, void, void, uint64_t))(a3 + 8))(*v3, *v3, v3[1], a2);
}

uint64_t protocol witness for ToolbarContentTypeVisitor.visit<A>(type:) in conformance TupleToolbarContent<A>.Visitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return TupleToolbarContent.Visitor.visit<A>(type:)(a1, a4, a2, a3);
}

uint64_t TupleToolbarContent.Visitor.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *((void *)v5 + 9);
  uint64_t v9 = *((void *)v5 + 12);
  BOOL v10 = __OFADD__(v8, v9);
  uint64_t v11 = v8 + v9;
  if (v10)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = v5;
    uint64_t v14 = *((void *)v5 + 3);
    uint64_t v15 = *((void *)v5 + 6);
    uint64_t v16 = *((void *)v5 + 7);
    int v26 = *((_DWORD *)v5 + 16);
    int v28 = *((_DWORD *)v5 + 20);
    int v24 = *((_DWORD *)v5 + 4);
    uint64_t v17 = *((void *)v5 + 1);
    uint64_t v25 = v11;
    LODWORD(v30) = *(_DWORD *)v5;
    uint64_t v29 = v9;
    type metadata accessor for TupleToolbarContent();
    type metadata accessor for _GraphValue();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v18 = *((void *)v5 + 4);
    uint64_t v19 = *((void *)v5 + 5);
    _GraphValue.value.getter();
    AGGraphCreateOffsetAttribute2();
    _GraphValue.init(_:)();
    uint64_t v30 = v17;
    int v31 = v24;
    uint64_t v32 = v14;
    uint64_t v33 = v18;
    uint64_t v34 = v19;
    uint64_t v35 = v15;
    uint64_t v36 = v16;
    int v37 = v26;
    uint64_t v38 = v25;
    int v39 = v28;
    (*(void (**)(uint64_t *__return_ptr, unsigned char *, uint64_t *, uint64_t, uint64_t))(a4 + 32))(&v41, v40, &v30, a3, a4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v27 = v41;
    int v7 = v42;
    uint64_t v6 = v43;
    *((void *)v5 + 12) = v43 + v29;
    uint64_t v5 = (char *)*((void *)v5 + 13);
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_3;
    }
  }
  uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v5 + 2) + 1, 1, v5);
LABEL_3:
  unint64_t v21 = *((void *)v5 + 2);
  unint64_t v20 = *((void *)v5 + 3);
  if (v21 >= v20 >> 1) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1, v5);
  }
  *((void *)v5 + 2) = v21 + 1;
  uint64_t v22 = &v5[24 * v21];
  *((void *)v22 + 4) = v27;
  *((_DWORD *)v22 + 10) = v7;
  *((void *)v22 + 6) = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  *((void *)v4 + 13) = v5;
  return result;
}

uint64_t type metadata accessor for TupleToolbarContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI15_ToolbarOutputsVG_AF011PreferencesG0Vs5NeverOTg503_s7d9UI19Tuplef39ContentV05_makeD07content6inputsAA01_D7g25VAA11_GraphValueVyACyxGG_q18_D6InputsVtFZAA011H57I0VAHcfu_33_22819586c44c68699c8129f2100aeaa3AhPTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v11;
    uint64_t v4 = (_DWORD *)(a1 + 40);
    do
    {
      uint64_t v5 = *((void *)v4 - 1);
      int v6 = *v4;
      unint64_t v8 = *(void *)(v11 + 16);
      unint64_t v7 = *(void *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
      }
      *(void *)(v11 + 16) = v8 + 1;
      uint64_t v9 = v11 + 16 * v8;
      *(void *)(v9 + 32) = v5;
      *(_DWORD *)(v9 + 40) = v6;
      v4 += 6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type ToolbarContentDescriptor and conformance ToolbarContentDescriptor()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarContentDescriptor and conformance ToolbarContentDescriptor;
  if (!lazy protocol witness table cache variable for type ToolbarContentDescriptor and conformance ToolbarContentDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarContentDescriptor and conformance ToolbarContentDescriptor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolbarContentDescriptor and conformance ToolbarContentDescriptor;
  if (!lazy protocol witness table cache variable for type ToolbarContentDescriptor and conformance ToolbarContentDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarContentDescriptor and conformance ToolbarContentDescriptor);
  }
  return result;
}

uint64_t protocol witness for static ToolbarContent._makeToolbar(content:inputs:) in conformance ToolbarItemGroup<A>@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static ToolbarItemGroup._makeToolbar(content:inputs:)(a1, a2, *(void *)(a3 + 16), a4);
}

uint64_t static ToolbarItemGroup._makeToolbar(content:inputs:)@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  uint64_t v6 = a2[2];
  unsigned int v20 = *((_DWORD *)a2 + 7);
  unsigned int v21 = *((_DWORD *)a2 + 6);
  unsigned int v18 = *((_DWORD *)a2 + 9);
  unsigned int v19 = *((_DWORD *)a2 + 8);
  uint64_t v7 = a2[6];
  uint64_t v17 = a2[5];
  int v13 = *((_DWORD *)a2 + 14);
  int v14 = *((_DWORD *)a2 + 2);
  uint64_t v12 = a2[8];
  int v16 = *((_DWORD *)a2 + 18);
  unsigned int v8 = *a1;
  LODWORD(v27) = *a1;
  type metadata accessor for ToolbarItemGroup();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(void *)(*(void *)(a3 - 8) + 64)) {
    closure #1 in static ToolbarItemGroup._makeToolbar(content:inputs:)(1, a3);
  }
  AGGraphCreateOffsetAttribute2();
  type metadata accessor for ToolbarItemGroup.MakeView();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  _GraphValue.value.getter();
  closure #2 in static ToolbarItemGroup._makeToolbar(content:inputs:)(1);
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  DWORD2(v27) = v14;
  *(void *)&long long v28 = v6;
  *((void *)&v28 + 1) = __PAIR64__(v20, v21);
  *(void *)&long long v29 = __PAIR64__(v18, v19);
  *((void *)&v29 + 1) = v17;
  *(void *)&long long v30 = v7;
  DWORD2(v30) = v13;
  *(void *)&long long v31 = v12;
  DWORD2(v31) = v16;
  int v10 = static ToolbarContent.makeViewList<A>(placement:content:inputs:)();
  *(void *)&long long v27 = __PAIR64__(HIDWORD(v5), v8);
  _GraphValue.value.getter();
  *(void *)&long long v22 = v5;
  DWORD2(v22) = v14;
  *(void *)&long long v23 = v6;
  *((void *)&v23 + 1) = __PAIR64__(v20, v21);
  *(void *)&long long v24 = __PAIR64__(v18, v19);
  *((void *)&v24 + 1) = v17;
  *(void *)&long long v25 = v7;
  DWORD2(v25) = v13;
  *(void *)&long long v26 = v12;
  DWORD2(v26) = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ToolbarMakeEntries.init<A>(placement:toolbarItemGroup:viewList:inputs:)(OffsetAttribute2, v10, (uint64_t)&v22, (uint64_t)&v27);
  long long v24 = v29;
  long long v25 = v30;
  long long v26 = v31;
  long long v22 = v27;
  long long v23 = v28;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for [ToolbarStorage.Entry]();
  lazy protocol witness table accessor for type ToolbarMakeEntries and conformance ToolbarMakeEntries();
  Attribute.init<A>(body:value:flags:update:)();
  *(void *)&long long v22 = v5;
  DWORD2(v22) = v14;
  *(void *)&long long v23 = v6;
  *((void *)&v23 + 1) = __PAIR64__(v20, v21);
  *(void *)&long long v24 = __PAIR64__(v18, v19);
  *((void *)&v24 + 1) = v17;
  *(void *)&long long v25 = v7;
  DWORD2(v25) = v13;
  *(void *)&long long v26 = v12;
  DWORD2(v26) = v16;
  static ToolbarContent.makeToolbarOutputs(placement:entries:inputs:)((uint64_t)&v22, a4);
  return outlined release of ToolbarMakeEntries((uint64_t)&v27);
}

uint64_t type metadata accessor for ToolbarItemGroup()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined release of ToolbarMakeEntries(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type ToolbarMakeEntries and conformance ToolbarMakeEntries()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarMakeEntries and conformance ToolbarMakeEntries;
  if (!lazy protocol witness table cache variable for type ToolbarMakeEntries and conformance ToolbarMakeEntries)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarMakeEntries and conformance ToolbarMakeEntries);
  }
  return result;
}

uint64_t static ToolbarContent.makeToolbarOutputs(placement:entries:inputs:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 64) + 1;
  PreferencesOutputs.init()();
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v5;
  *(_DWORD *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v3;
  return result;
}

void type metadata accessor for [ToolbarStorage.Entry]()
{
  if (!lazy cache variable for type metadata for [ToolbarStorage.Entry])
  {
    type metadata accessor for ToolbarStorage.Entry(255);
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarStorage.Entry]);
    }
  }
}

id ToolbarMakeEntries.init<A>(placement:toolbarItemGroup:viewList:inputs:)@<X0>(int a1@<W0>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v13 = *(void *)(a3 + 64);
  int v5 = *(_DWORD *)(a3 + 72);
  closure #1 in ToolbarMakeEntries.init<A>(placement:toolbarItemGroup:viewList:inputs:)(1);
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  int v7 = _GraphInputs.phase.getter();
  id result = (id)AGSubgraphGetCurrent();
  if (result)
  {
    id v9 = result;
    unsigned int v10 = *MEMORY[0x1E4F4E7A0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    id result = (id)swift_release();
    *(_DWORD *)a4 = a1;
    *(_DWORD *)(a4 + 4) = OffsetAttribute2;
    *(_DWORD *)(a4 + 8) = a2;
    *(_DWORD *)(a4 + 12) = v5;
    *(_DWORD *)(a4 + 16) = v7;
    *(unsigned char *)(a4 + 20) = 1;
    *(int32x4_t *)(a4 + 24) = vdupq_n_s32(v10);
    *(_DWORD *)(a4 + 40) = v10;
    *(_DWORD *)(a4 + 44) = v10;
    *(_DWORD *)(a4 + 48) = v10;
    *(void *)(a4 + 56) = v9;
    *(void *)(a4 + 64) = v13;
    *(void *)(a4 + 72) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in ToolbarMakeEntries.init<A>(placement:toolbarItemGroup:viewList:inputs:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ToolbarItemGroup();
  uint64_t v3 = a1 + *(int *)(v2 + 40);
  v8[2] = v2;
  uint64_t v4 = MEMORY[0x1E4FBB390];
  uint64_t v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v8, v4, MEMORY[0x1E4FBC248], v5, MEMORY[0x1E4FBC278], v6);
  return v8[5];
}

uint64_t type metadata accessor for ToolbarItemGroup.MakeView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #2 in static ToolbarItemGroup._makeToolbar(content:inputs:)(uint64_t a1)
{
  v5[2] = type metadata accessor for ToolbarItemGroup();
  uint64_t v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_5, (uint64_t)v5, (uint64_t)&type metadata for ToolbarItemPlacement, MEMORY[0x1E4FBC248], v2, MEMORY[0x1E4FBC278], v3);
  return v5[5];
}

uint64_t closure #1 in static ToolbarItemGroup._makeToolbar(content:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ToolbarItemGroup();
  uint64_t v5 = a1 + *(int *)(v4 + 36);
  void v9[2] = v4;
  v9[3] = a2;
  uint64_t v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v5, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E4FBC248], v6, MEMORY[0x1E4FBC278], v7);
  return v9[5];
}

uint64_t closure #3 in static ToolbarModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ToolbarModifier();
  uint64_t v3 = a1 + *(int *)(v2 + 48);
  void v9[2] = v2;
  type metadata accessor for Binding<Int>?();
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_20, (uint64_t)v9, v5, MEMORY[0x1E4FBC248], v6, MEMORY[0x1E4FBC278], v7);
  return v9[5];
}

uint64_t ToolbarModifier.TransformToolbar.updateValue()()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t Value = AGGraphGetValue();
  uint64_t v1 = *(void *)(Value + 32);
  uint64_t v2 = *(void *)(Value + 40);
  char v3 = *(unsigned char *)(Value + 48);
  uint64_t v4 = *(void *)(Value + 56);
  long long v5 = *(_OWORD *)(Value + 16);
  long long v13 = *(_OWORD *)Value;
  long long v14 = v5;
  *(void *)&long long v15 = v1;
  *((void *)&v15 + 1) = v2;
  LOBYTE(v16) = v3;
  *((void *)&v16 + 1) = v4;
  type metadata accessor for External<PreferenceKeys>(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
  uint64_t v6 = (uint64_t *)AGGraphGetValue();
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  type metadata accessor for Binding<Int>?();
  uint64_t v9 = swift_allocObject();
  long long v10 = v14;
  *(_OWORD *)(v9 + 16) = v13;
  *(_OWORD *)(v9 + 32) = v10;
  long long v11 = v16;
  *(_OWORD *)(v9 + 48) = v15;
  *(_OWORD *)(v9 + 64) = v11;
  *(void *)(v9 + 80) = v8;
  *(void *)(v9 + 88) = v7;
  type metadata accessor for (_:)();
  outlined retain of ToolbarStorage((uint64_t)&v13);
  swift_bridgeObjectRetain();
  AGGraphSetOutputValue();
  return swift_release();
}

void type metadata accessor for Binding<Int>?()
{
  if (!lazy cache variable for type metadata for Binding<Int>?)
  {
    type metadata accessor for ToolbarStorage.Entry.ID?(255, &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4F41638]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<Int>?);
    }
  }
}

uint64_t implicit closure #1 in static ToolbarContent.makeToolbarOutputs(placement:entries:inputs:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

unint64_t lazy protocol witness table accessor for type PreferenceTransform and conformance PreferenceTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type PreferenceTransform and conformance PreferenceTransform;
  if (!lazy protocol witness table cache variable for type PreferenceTransform and conformance PreferenceTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreferenceTransform and conformance PreferenceTransform);
  }
  return result;
}

uint64_t BarEdgeReader.MakeView.value.getter(uint64_t a1, char a2)
{
  type metadata accessor for BarEdgeReader();
  char v3 = *(void (**)(uint64_t))AGGraphGetValue();
  if (a2)
  {
    uint64_t v4 = 2;
  }
  else
  {
    type metadata accessor for ToolbarStorage.Entry.ID?(0, &lazy cache variable for type metadata for HorizontalEdge?, MEMORY[0x1E4F3F960], MEMORY[0x1E4FBB718]);
    uint64_t v4 = *(unsigned __int8 *)AGGraphGetValue();
  }
  swift_retain();
  v3(v4);

  return swift_release();
}

void type metadata accessor for ToolbarStorage.Entry.ID?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t static BarEdgeReader._makeView(view:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v25 = a4;
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = *(void *)a1;
  int v24 = *(_DWORD *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v14 = *(void *)(a1 + 72);
  int v23 = *(_DWORD *)(a1 + 80);
  lazy protocol witness table accessor for type BarEdgeInput and conformance BarEdgeInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (BYTE4(v27) == 1)
  {
    LOBYTE(v27) = 2;
    type metadata accessor for ToolbarStorage.Entry.ID?(0, &lazy cache variable for type metadata for HorizontalEdge?, MEMORY[0x1E4F3F960], MEMORY[0x1E4FBB718]);
    type metadata accessor for External<HorizontalEdge?>();
    lazy protocol witness table accessor for type BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature> and conformance BothFeatures<A, B>(&lazy protocol witness table cache variable for type External<HorizontalEdge?> and conformance External<A>, (void (*)(uint64_t))type metadata accessor for External<HorizontalEdge?>);
    unsigned int v15 = Attribute.init<A>(body:value:flags:update:)();
  }
  else
  {
    unsigned int v15 = v27;
  }
  type metadata accessor for BarEdgeReader();
  type metadata accessor for _GraphValue();
  uint64_t v16 = _GraphValue.value.getter();
  unint64_t v27 = __PAIR64__(v15, v16);
  LOBYTE(v28) = 0;
  MEMORY[0x1F4188790](v16);
  v20[2] = a2;
  uint64_t View = type metadata accessor for BarEdgeReader.MakeView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v17 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v27, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v20, View, MEMORY[0x1E4FBC248], v17, MEMORY[0x1E4FBC278], v18);
  _GraphValue.init(_:)();
  unint64_t v27 = v6;
  int v28 = v24;
  uint64_t v29 = v7;
  uint64_t v30 = v8;
  uint64_t v31 = v9;
  uint64_t v32 = v10;
  uint64_t v33 = v11;
  uint64_t v34 = v12;
  uint64_t v35 = v13;
  uint64_t v36 = v14;
  int v37 = v23;
  return (*(uint64_t (**)(int *, unint64_t *, uint64_t, uint64_t))(a3 + 24))(&v26, &v27, a2, a3);
}

uint64_t type metadata accessor for BarEdgeReader()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type BarEdgeInput and conformance BarEdgeInput()
{
  unint64_t result = lazy protocol witness table cache variable for type BarEdgeInput and conformance BarEdgeInput;
  if (!lazy protocol witness table cache variable for type BarEdgeInput and conformance BarEdgeInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BarEdgeInput and conformance BarEdgeInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BarEdgeInput and conformance BarEdgeInput;
  if (!lazy protocol witness table cache variable for type BarEdgeInput and conformance BarEdgeInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BarEdgeInput and conformance BarEdgeInput);
  }
  return result;
}

uint64_t type metadata accessor for BarEdgeReader.MakeView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #2 in static ToolbarModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  _OWORD v7[2] = type metadata accessor for ToolbarModifier();
  type metadata accessor for External<PreferenceKeys>(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, v3, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t implicit closure #1 in static ToolbarModifier._makeView(modifier:inputs:body:)(uint64_t a1, int a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1;
  int v7 = a2;
  uint64_t v9 = type metadata accessor for ToolbarModifier.TransformToolbar();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<PreferenceBridge>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v6, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_24, (uint64_t)v8, v9, MEMORY[0x1E4FBC248], v2, MEMORY[0x1E4FBC278], v3);
  return v5;
}

void type metadata accessor for Attribute<PreferenceBridge>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t type metadata accessor for ToolbarModifier.HostKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ToolbarModifier.InvalidateBridge()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ToolbarModifier.TransformToolbar()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type External<PreferenceKeys> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<PreferenceKeys> and conformance External<A>)
  {
    type metadata accessor for External<PreferenceKeys>(255, &lazy cache variable for type metadata for External<PreferenceKeys>, MEMORY[0x1E4F3F9B8], MEMORY[0x1E4F4E778]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<PreferenceKeys> and conformance External<A>);
  }
  return result;
}

uint64_t ToolbarItem<>.init(placement:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = outlined init with copy of ToolbarItemPlacement(v10, (uint64_t)v13);
  a2(v11);
  outlined destroy of ToolbarItemPlacement(a1);
  return ToolbarItem<>.init(placement:content:)(v13, (uint64_t)v9, a3, a4);
}

uint64_t ToolbarItem<>.init(placement:content:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v8 = (int *)type metadata accessor for ToolbarItem();
  *((unsigned char *)a4 + v8[15]) = 2;
  long long v9 = a1[1];
  *a4 = *a1;
  a4[1] = v9;
  *(_OWORD *)((char *)a4 + 25) = *(_OWORD *)((char *)a1 + 25);
  *((unsigned char *)a4 + v8[13]) = 1;
  *((unsigned char *)a4 + v8[14]) = 0;
  uint64_t v10 = (char *)a4 + v8[12];
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32);

  return v11(v10, a2, a3);
}

uint64_t type metadata accessor for ToolbarItem()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in ToolbarButtonContentModifier.body(content:)@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  return closure #1 in ToolbarButtonContentModifier.body(content:)(a1, *(unsigned __int8 *)(v2 + 16), *(void *)(v2 + 24), *(unsigned char *)(v2 + 32), a2);
}

double partial apply for closure #1 in ToolbarButtonLabelModifier.body(content:)@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = closure #1 in ToolbarButtonLabelModifier.body(content:)(v1 + 16, a1).n128_u64[0];
  return result;
}

__n128 closure #1 in ToolbarButtonLabelModifier.body(content:)@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  double v4 = ToolbarButtonLabelModifier.padding(edge:)();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  char v11 = static Edge.Set.all.getter();
  uint64_t v12 = *(void *)(a1 + 72);
  char v13 = *(unsigned char *)(a1 + 80);
  outlined copy of Environment<Bool>.Content(v12, v13);
  specialized Environment.wrappedValue.getter(v12, v13, v37);
  outlined consume of Environment<Bool>.Content(v12, v13);
  if (LOBYTE(v37[0]) == 2 || (v37[0] & 1) != 0) {
    double v14 = INFINITY;
  }
  else {
    double v14 = 32.0;
  }
  char v38 = v11;
  double v39 = v4;
  uint64_t v40 = v6;
  uint64_t v41 = v8;
  uint64_t v42 = v10;
  char v43 = 0;
  static Alignment.center.getter();
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v36, 0.0, 1, v14, 0);
  uint64_t KeyPath = swift_getKeyPath();
  specialized Environment.wrappedValue.getter((uint64_t)v37);
  *(void *)uint64_t v25 = 5;
  memset(&v25[8], 0, 32);
  v25[40] = 2;
  char v16 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v37, (uint64_t)v25);
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)v25);
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)v37);
  uint64_t v17 = static Font.body.getter();
  if (v16)
  {
    uint64_t v18 = Font.bold()();
    swift_release();
    uint64_t v17 = v18;
  }
  long long v29 = v36[6];
  long long v30 = v36[7];
  long long v31 = v36[8];
  long long v32 = v36[9];
  *(_OWORD *)&v25[32] = v36[2];
  long long v26 = v36[3];
  long long v27 = v36[4];
  long long v28 = v36[5];
  *(_OWORD *)uint64_t v25 = v36[0];
  *(_OWORD *)&v25[16] = v36[1];
  __int16 v33 = 1;
  uint64_t v34 = KeyPath;
  uint64_t v35 = v17;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout>, _EnvironmentKeyWritingModifier<Font?>>(0);
  _s7SwiftUI37PrimitiveButtonStyleContainerModifierVyAA08BordereddE0VGMaTm_0(0, &lazy cache variable for type metadata for PartialRangeThrough<DynamicTypeSize>, (uint64_t (*)(void))lazy protocol witness table accessor for type DynamicTypeSize and conformance DynamicTypeSize, MEMORY[0x1E4F3FB28], MEMORY[0x1E4FBBD60]);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout>, _EnvironmentKeyWritingModifier<Font?>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>);
  lazy protocol witness table accessor for type PartialRangeThrough<DynamicTypeSize> and conformance PartialRangeThrough<A>();
  View.dynamicTypeSize<A>(_:)();
  swift_release();
  swift_release();
  long long v19 = v37[11];
  *(_OWORD *)(a2 + 160) = v37[10];
  *(_OWORD *)(a2 + 176) = v19;
  *(_OWORD *)(a2 + 192) = v37[12];
  long long v20 = v37[7];
  *(_OWORD *)(a2 + 96) = v37[6];
  *(_OWORD *)(a2 + 112) = v20;
  long long v21 = v37[9];
  *(_OWORD *)(a2 + 128) = v37[8];
  *(_OWORD *)(a2 + 144) = v21;
  long long v22 = v37[3];
  *(_OWORD *)(a2 + 32) = v37[2];
  *(_OWORD *)(a2 + 48) = v22;
  long long v23 = v37[5];
  *(_OWORD *)(a2 + 64) = v37[4];
  *(_OWORD *)(a2 + 80) = v23;
  __n128 result = (__n128)v37[1];
  *(_OWORD *)a2 = v37[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PartialRangeThrough<DynamicTypeSize> and conformance PartialRangeThrough<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PartialRangeThrough<DynamicTypeSize> and conformance PartialRangeThrough<A>;
  if (!lazy protocol witness table cache variable for type PartialRangeThrough<DynamicTypeSize> and conformance PartialRangeThrough<A>)
  {
    _s7SwiftUI37PrimitiveButtonStyleContainerModifierVyAA08BordereddE0VGMaTm_0(255, &lazy cache variable for type metadata for PartialRangeThrough<DynamicTypeSize>, (uint64_t (*)(void))lazy protocol witness table accessor for type DynamicTypeSize and conformance DynamicTypeSize, MEMORY[0x1E4F3FB28], MEMORY[0x1E4FBBD60]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PartialRangeThrough<DynamicTypeSize> and conformance PartialRangeThrough<A>);
  }
  return result;
}

__n128 specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    long long v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = v13[1];
  *a9 = *v13;
  a9[1] = v24;
  *(_OWORD *)((char *)a9 + 25) = *(_OWORD *)((char *)v13 + 25);
  a9[7] = v30;
  a9[8] = v31;
  a9[9] = v32;
  a9[3] = v26;
  a9[4] = v27;
  __n128 result = v29;
  a9[5] = v28;
  a9[6] = v29;
  return result;
}

{
  void *v22;
  __n128 result;
  long long v24;
  long long v25;
  long long v26;
  __n128 v27;
  long long v28;
  long long v29;
  long long v30;

  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    long long v22 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  a9[4] = v28;
  a9[5] = v29;
  a9[6] = v30;
  *a9 = v24;
  a9[1] = v25;
  __n128 result = v27;
  a9[2] = v26;
  a9[3] = v27;
  return result;
}

{
  _OWORD *v13;
  void *v23;
  long long v24;
  __n128 result;
  long long v26;
  long long v27;
  long long v28;
  __n128 v29;
  long long v30;
  long long v31;
  long long v32;

  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    long long v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = v13[1];
  *a9 = *v13;
  a9[1] = v24;
  *(_OWORD *)((char *)a9 + 27) = *(_OWORD *)((char *)v13 + 27);
  a9[7] = v30;
  a9[8] = v31;
  a9[9] = v32;
  a9[3] = v26;
  a9[4] = v27;
  __n128 result = v29;
  a9[5] = v28;
  a9[6] = v29;
  return result;
}

uint64_t closure #1 in ToolbarButtonContentModifier.body(content:)@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  int v40 = a2;
  LODWORD(v41) = a1;
  uint64_t v43 = a5;
  uint64_t v7 = type metadata accessor for UIKitSystemButtonConfigurationModifier(0);
  uint64_t v8 = v7 - 8;
  MEMORY[0x1F4188790](v7);
  double v39 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>();
  uint64_t v11 = v10 - 8;
  MEMORY[0x1F4188790](v10);
  char v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>>(0);
  uint64_t v15 = v14 - 8;
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>>;
  type metadata accessor for ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>>, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>);
  uint64_t v19 = v18 - 8;
  MEMORY[0x1F4188790](v18);
  long long v21 = (char *)&v36 - v20;
  uint64_t KeyPath = swift_getKeyPath();
  a4 &= 1u;
  outlined copy of Environment<Bool>.Content(a3, a4);
  char v22 = specialized Environment.wrappedValue.getter(a3, a4);
  outlined consume of Environment<Bool>.Content(a3, a4);
  if (v22) {
    __int16 v23 = 256;
  }
  else {
    __int16 v23 = 0;
  }
  if (v40) {
    int v24 = 0x10000;
  }
  else {
    int v24 = 0;
  }
  int v40 = v24;
  __int16 v25 = v23 & 0xFF00 | v41;
  uint64_t v41 = swift_getKeyPath();
  uint64_t v37 = swift_getKeyPath();
  uint64_t v26 = (uint64_t)v39;
  static UIButton.Configuration.borderless()();
  uint64_t v27 = v26 + *(int *)(v8 + 28);
  *(void *)uint64_t v27 = swift_getKeyPath();
  *(unsigned char *)(v27 + 8) = 0;
  uint64_t v28 = swift_getKeyPath();
  uint64_t v29 = swift_getKeyPath();
  uint64_t v30 = swift_getKeyPath();
  long long v31 = &v13[*(int *)(v11 + 60)];
  *((void *)v31 + 1) = 0;
  *((void *)v31 + 2) = 0;
  *(void *)long long v31 = v28;
  *((_WORD *)v31 + 12) = 0;
  *((void *)v31 + 4) = v29;
  v31[40] = 0;
  *((void *)v31 + 6) = v30;
  v31[56] = 0;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWObTm_1(v26, (uint64_t)v13, type metadata accessor for UIKitSystemButtonConfigurationModifier);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_11((uint64_t)v13, (uint64_t)&v17[*(int *)(v15 + 44)], (uint64_t (*)(void))type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>);
  *(void *)uint64_t v17 = KeyPath;
  v17[10] = BYTE2(v40);
  *((_WORD *)v17 + 4) = v25;
  *((void *)v17 + 2) = v41;
  v17[24] = 0;
  *((void *)v17 + 4) = v37;
  v17[40] = 0;
  outlined destroy of ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>);
  uint64_t v32 = swift_getKeyPath();
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_11((uint64_t)v17, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>>);
  __int16 v33 = &v21[*(int *)(v19 + 44)];
  *(void *)__int16 v33 = v32;
  v33[8] = 0;
  outlined destroy of ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>>);
  uint64_t v34 = v42;
  outlined init with copy of ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>((uint64_t)v21, v43, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>>, v42, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>);
  return outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>>((uint64_t)v21, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>>, v34, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>);
}

void type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>()
{
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_7(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E4F40158], MEMORY[0x1E4F40150], MEMORY[0x1E4F40C60]);
    type metadata accessor for UIKitSystemButtonConfigurationModifier(255);
    _s7SwiftUI37PrimitiveButtonStyleContainerModifierVyAA08BordereddE0VGMaTm_0(255, &lazy cache variable for type metadata for UIKitButtonStyleModifier<BorderlessButtonStyleBase>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyleBase and conformance BorderlessButtonStyleBase, (uint64_t)&type metadata for BorderlessButtonStyleBase, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitButtonStyleModifier);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>);
    }
  }
}

void type metadata accessor for PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void _s7SwiftUI37PrimitiveButtonStyleContainerModifierVyAA08BordereddE0VGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t type metadata accessor for UIKitSystemButtonConfigurationModifier(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitSystemButtonConfigurationModifier);
}

unint64_t lazy protocol witness table accessor for type ToolbarButtonContentModifier and conformance ToolbarButtonContentModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarButtonContentModifier and conformance ToolbarButtonContentModifier;
  if (!lazy protocol witness table cache variable for type ToolbarButtonContentModifier and conformance ToolbarButtonContentModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarButtonContentModifier and conformance ToolbarButtonContentModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarButtonLabelModifier and conformance ToolbarButtonLabelModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarButtonLabelModifier and conformance ToolbarButtonLabelModifier;
  if (!lazy protocol witness table cache variable for type ToolbarButtonLabelModifier and conformance ToolbarButtonLabelModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarButtonLabelModifier and conformance ToolbarButtonLabelModifier);
  }
  return result;
}

uint64_t type metadata accessor for UIKitButtonStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>;
  if (!lazy protocol witness table cache variable for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>)
  {
    type metadata accessor for InterfaceIdiomPredicate<WidgetInterfaceIdiom>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E4F40158], MEMORY[0x1E4F40150], MEMORY[0x1E4F40C60]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>);
  }
  return result;
}

double ToolbarButtonLabelModifier.padding(edge:)()
{
  uint64_t v1 = v0;
  if (static SemanticFeature.isEnabled.getter())
  {
    uint64_t v2 = *(void *)(v0 + 88);
    char v3 = *(unsigned char *)(v1 + 96);
    outlined copy of Environment<Bool>.Content(*(void *)(v1 + 88), v3);
    char v4 = specialized Environment.wrappedValue.getter(v2, v3);
    outlined consume of Environment<Bool>.Content(v2, v3);
    if ((v4 & 1) == 0) {
      return 4.0;
    }
  }
  static EdgeInsets.zero.getter();
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarButtonHoverShape and conformance ToolbarButtonHoverShape()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarButtonHoverShape and conformance ToolbarButtonHoverShape;
  if (!lazy protocol witness table cache variable for type ToolbarButtonHoverShape and conformance ToolbarButtonHoverShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarButtonHoverShape and conformance ToolbarButtonHoverShape);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolbarButtonHoverShape and conformance ToolbarButtonHoverShape;
  if (!lazy protocol witness table cache variable for type ToolbarButtonHoverShape and conformance ToolbarButtonHoverShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarButtonHoverShape and conformance ToolbarButtonHoverShape);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolbarButtonHoverShape and conformance ToolbarButtonHoverShape;
  if (!lazy protocol witness table cache variable for type ToolbarButtonHoverShape and conformance ToolbarButtonHoverShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarButtonHoverShape and conformance ToolbarButtonHoverShape);
  }
  return result;
}

uint64_t static SearchToolbarItem._makeToolbar(content:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 64);
  _GraphInputs.environment.getter();
  PreferencesOutputs.init()();
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<SearchToolbarItem>, (uint64_t (*)(uint64_t))type metadata accessor for SearchToolbarItem, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type SearchToolbarItem.ChildEnvironment and conformance SearchToolbarItem.ChildEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v5;
  *(_DWORD *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v3 + 1;
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchToolbarItem.ChildEnvironment and conformance SearchToolbarItem.ChildEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchToolbarItem.ChildEnvironment and conformance SearchToolbarItem.ChildEnvironment;
  if (!lazy protocol witness table cache variable for type SearchToolbarItem.ChildEnvironment and conformance SearchToolbarItem.ChildEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchToolbarItem.ChildEnvironment and conformance SearchToolbarItem.ChildEnvironment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DynamicTypeSize and conformance DynamicTypeSize()
{
  unint64_t result = lazy protocol witness table cache variable for type DynamicTypeSize and conformance DynamicTypeSize;
  if (!lazy protocol witness table cache variable for type DynamicTypeSize and conformance DynamicTypeSize)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicTypeSize and conformance DynamicTypeSize);
  }
  return result;
}

uint64_t protocol witness for static ToolbarContent._makeToolbar(content:inputs:) in conformance ToolbarItem<A, B>@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static ToolbarItem._makeToolbar(content:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

uint64_t type metadata accessor for ToolbarItem.MakeView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #2 in static ToolbarItem._makeToolbar(content:inputs:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ToolbarItem();
  uint64_t v3 = a1 + *(int *)(v2 + 44);
  _OWORD v7[2] = v2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_5, (uint64_t)v7, (uint64_t)&type metadata for ToolbarItemPlacement, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t closure #1 in static ToolbarItem._makeToolbar(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for ToolbarItem();
  uint64_t v6 = a1 + *(int *)(v5 + 48);
  void v10[2] = v5;
  v10[3] = a3;
  uint64_t v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v10, a3, MEMORY[0x1E4FBC248], v7, MEMORY[0x1E4FBC278], v8);
  return v10[5];
}

uint64_t closure #1 in static ContainerBackgroundRendererModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  _OWORD v7[2] = type metadata accessor for ContainerBackgroundRendererModifier();
  type metadata accessor for ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>(0, &lazy cache variable for type metadata for WritableKeyPath<EnvironmentValues, Bool>, MEMORY[0x1E4F40140], MEMORY[0x1E4FBB390], MEMORY[0x1E4FBBC08]);
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_10, (uint64_t)v7, v3, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t static ContainerBackgroundRendererModifier._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, void (*a2)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *(void *)a1;
  int v6 = *(_DWORD *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  unsigned int v8 = *(_DWORD *)(a1 + 28);
  unsigned int v22 = *(_DWORD *)(a1 + 24);
  unsigned int v23 = *(_DWORD *)(a1 + 32);
  unsigned int v21 = *(_DWORD *)(a1 + 36);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  unsigned int v31 = *(_DWORD *)(a1 + 60);
  unsigned int v33 = *(_DWORD *)(a1 + 56);
  unsigned int v29 = *(_DWORD *)(a1 + 68);
  unsigned int v30 = *(_DWORD *)(a1 + 64);
  unsigned int v27 = *(_DWORD *)(a1 + 76);
  unsigned int v28 = *(_DWORD *)(a1 + 72);
  unsigned int v26 = *(_DWORD *)(a1 + 80);
  uint64_t v41 = a3;
  uint64_t v42 = a4;
  type metadata accessor for ContainerBackgroundRendererModifier();
  type metadata accessor for _GraphValue();
  type metadata accessor for ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>(0, &lazy cache variable for type metadata for WritableKeyPath<EnvironmentValues, Bool>, MEMORY[0x1E4F40140], MEMORY[0x1E4FBB390], MEMORY[0x1E4FBBC08]);
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue<WritableKeyPath<EnvironmentValues, Bool>>();
  unsigned int v20 = _GraphValue.value.getter();
  unint64_t v52 = v5;
  int v53 = v6;
  uint64_t v54 = v7;
  *(void *)&long long v55 = __PAIR64__(v8, v22);
  *((void *)&v55 + 1) = __PAIR64__(v21, v23);
  uint64_t v56 = v10;
  uint64_t v57 = v9;
  *(void *)&long long v58 = __PAIR64__(v31, v33);
  *((void *)&v58 + 1) = __PAIR64__(v29, v30);
  unint64_t v59 = __PAIR64__(v27, v28);
  unsigned int v60 = v26;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferencesInputs.add<A>(_:)();
  unint64_t v43 = v5;
  int v44 = v6;
  uint64_t v46 = v7;
  *(void *)&long long v47 = __PAIR64__(v8, v22);
  *((void *)&v47 + 1) = __PAIR64__(v21, v23);
  uint64_t v48 = v10;
  uint64_t v49 = v9;
  *(void *)&long long v50 = __PAIR64__(v31, v33);
  *((void *)&v50 + 1) = __PAIR64__(v29, v30);
  LODWORD(v51[0]) = v28;
  *(void *)((char *)v51 + 4) = __PAIR64__(v26, v27);
  unsigned int v11 = _ViewInputs.environment.getter();
  int v12 = *MEMORY[0x1E4F4E7A0];
  unint64_t v43 = __PAIR64__(v20, v11);
  int v44 = v12;
  uint64_t v39 = type metadata accessor for ContainerBackgroundRendererModifier.ChildEnvironment();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<EnvironmentValues>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v43, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v38, v39, MEMORY[0x1E4FBC248], v13, MEMORY[0x1E4FBC278], v14);
  _ViewInputs.environment.setter();
  unint64_t v43 = v52;
  int v44 = v53;
  uint64_t v46 = v54;
  long long v47 = v55;
  uint64_t v48 = v56;
  uint64_t v49 = v57;
  long long v50 = v58;
  v51[0] = v59;
  LODWORD(v51[1]) = v60;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v15 = swift_bridgeObjectRetain();
  a2(&v35, v15, &v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v16 = v37;
  unint64_t v34 = v35;
  unint64_t v43 = v35;
  int v32 = v36;
  int v44 = v36;
  int v45 = v37;
  uint64_t v17 = _ViewOutputs.subscript.getter();
  if ((v17 & 0x100000000) == 0)
  {
    MEMORY[0x1F4188790](v17);
    MEMORY[0x1F4188790](v18);
    AGGraphMutateAttribute();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  *(void *)a5 = v34;
  *(_DWORD *)(a5 + 8) = v32;
  *(_DWORD *)(a5 + 12) = v16;
  return result;
}

uint64_t type metadata accessor for ContainerBackgroundRendererModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ContainerBackgroundRendererModifier.ChildEnvironment()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for Attribute<EnvironmentValues>()
{
  if (!lazy cache variable for type metadata for Attribute<EnvironmentValues>)
  {
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<EnvironmentValues>);
    }
  }
}

uint64_t closure #1 in URLDocumentCreation.documentBrowser(_:didRequestDocumentCreationWithHandler:)()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (!*(void *)(v0 + 424))
  {
    uint64_t v19 = *(void *)(*(void *)(v0 + 248) + OBJC_IVAR____TtC7SwiftUI19URLDocumentCreation_contentTypes);
    uint64_t v20 = *(void *)(v0 + 400);
    if (*(void *)(v19 + 16))
    {
      uint64_t v21 = *(void *)(v0 + 392);
      uint64_t v23 = *(void *)(v0 + 320);
      uint64_t v22 = *(void *)(v0 + 328);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v22 + 16))(v21, v19 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80)), v23);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v20, v21, v23);
    }
    else
    {
      MEMORY[0x18C112B90](0xD000000000000051, 0x8000000188344930);
      static UTType.item.getter();
    }
    goto LABEL_35;
  }
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;
  if (v2 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v4 == v5)
  {
    swift_bridgeObjectRelease_n();
LABEL_19:
    uint64_t v24 = *(void *)(*(void *)(v0 + 248) + OBJC_IVAR____TtC7SwiftUI19URLDocumentCreation_contentTypes);
    __int16 v25 = *(void **)(v0 + 424);
    uint64_t v26 = *(void *)(v0 + 400);
    if (*(void *)(v24 + 16))
    {
      uint64_t v27 = *(void *)(v0 + 384);
LABEL_21:
      uint64_t v28 = *(void *)(v0 + 320);
      uint64_t v29 = *(void *)(v0 + 328);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v29 + 16))(v27, v24 + ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80)), v28);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))(v26, v27, v28);
LABEL_34:

      goto LABEL_35;
    }
LABEL_33:
    MEMORY[0x18C112B90](0xD000000000000051, 0x8000000188344930);
    static UTType.item.getter();
    goto LABEL_34;
  }
  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v7) {
    goto LABEL_19;
  }
  uint64_t v8 = *(void *)(*(void *)(v0 + 248) + OBJC_IVAR____TtC7SwiftUI19URLDocumentCreation_strategies);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    uint64_t v10 = v8 + 32;
    swift_bridgeObjectRetain_n();
    while (1)
    {
      outlined init with copy of TableColumnList(v10, v0 + 136);
      uint64_t v11 = *(void *)(v0 + 160);
      uint64_t v12 = *(void *)(v0 + 168);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 136), v11);
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 16))(v11, v12);
      uint64_t v15 = v14;
      if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
        break;
      }
      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v18) {
        goto LABEL_30;
      }
      __swift_destroy_boxed_opaque_existential_1(v0 + 136);
      v10 += 40;
      if (!--v9)
      {
        swift_bridgeObjectRelease();
        uint64_t v1 = (void *)(v0 + 16);
        goto LABEL_24;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_30:
    swift_bridgeObjectRelease();
    outlined init with take of OptionalBinaryInteger((long long *)(v0 + 136), v0 + 56);
    swift_bridgeObjectRelease();
    uint64_t v1 = (void *)(v0 + 16);
    if (!*(void *)(v0 + 80))
    {
LABEL_31:
      uint64_t v46 = *(void *)(v0 + 248);
      outlined destroy of DocumentCreationStrategy?(v0 + 56);
      uint64_t v24 = *(void *)(v46 + OBJC_IVAR____TtC7SwiftUI19URLDocumentCreation_contentTypes);
      __int16 v25 = *(void **)(v0 + 424);
      uint64_t v26 = *(void *)(v0 + 400);
      if (*(void *)(v24 + 16))
      {
        uint64_t v27 = *(void *)(v0 + 368);
        goto LABEL_21;
      }
      goto LABEL_33;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_24:
    *(void *)(v0 + 88) = 0;
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
    swift_bridgeObjectRelease();
    if (!*(void *)(v0 + 80)) {
      goto LABEL_31;
    }
  }
  uint64_t v31 = *(void *)(v0 + 320);
  uint64_t v30 = *(void *)(v0 + 328);
  uint64_t v32 = *(void *)(v0 + 312);
  outlined init with take of OptionalBinaryInteger((long long *)(v0 + 56), v0 + 96);
  outlined destroy of DocumentCreationStrategy?((uint64_t)v1);
  outlined init with copy of TableColumnList(v0 + 96, (uint64_t)v1);
  uint64_t v33 = *(void *)(v0 + 120);
  uint64_t v34 = *(void *)(v0 + 128);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v33);
  (*(void (**)(uint64_t, uint64_t))(v34 + 24))(v33, v34);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v32, 1, v31) == 1)
  {
    uint64_t v35 = *(void *)(v0 + 248);
    _s10Foundation3URLVSgWOhTm_4(*(void *)(v0 + 312), (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
    uint64_t v36 = *(void *)(v35 + OBJC_IVAR____TtC7SwiftUI19URLDocumentCreation_contentTypes);
    int v37 = *(void **)(v0 + 424);
    uint64_t v38 = *(void *)(v0 + 400);
    if (*(void *)(v36 + 16))
    {
      uint64_t v39 = *(void *)(v0 + 376);
      uint64_t v40 = *(void *)(v0 + 320);
      uint64_t v41 = *(void *)(v0 + 328);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v41 + 16))(v39, v36 + ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80)), v40);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 32))(v38, v39, v40);
    }
    else
    {
      MEMORY[0x18C112B90](0xD000000000000051, 0x8000000188344930);
      static UTType.item.getter();
    }
  }
  else
  {
    uint64_t v42 = *(void *)(v0 + 400);
    uint64_t v44 = *(void *)(v0 + 320);
    uint64_t v43 = *(void *)(v0 + 328);
    uint64_t v45 = *(void *)(v0 + 312);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32))(v42, v45, v44);
  }
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
LABEL_35:
  uint64_t v48 = *(void *)(v0 + 272);
  uint64_t v47 = *(void *)(v0 + 280);
  type metadata accessor for URLDocumentBox(0);
  uint64_t v49 = swift_allocObject();
  uint64_t v50 = OBJC_IVAR____TtC7SwiftUI14URLDocumentBox_base;
  *(void *)(v0 + 432) = v49;
  *(void *)(v0 + 440) = v50;
  uint64_t v51 = v49 + v50;
  unint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56);
  *(void *)(v0 + 448) = v52;
  *(void *)(v0 + 456) = (v47 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v52(v51, 1, 1, v48);
  uint64_t v53 = *(void *)(v0 + 40);
  if (v53)
  {
    uint64_t v54 = *(void *)(v0 + 48);
    long long v55 = __swift_project_boxed_opaque_existential_1(v1, *(void *)(v0 + 40));
    uint64_t v56 = *(void *)(v53 - 8);
    uint64_t v57 = swift_task_alloc();
    (*(void (**)(uint64_t, void *, uint64_t))(v56 + 16))(v57, v55, v53);
    long long v58 = (int *)(*(uint64_t (**)(uint64_t, uint64_t))(v54 + 32))(v53, v54);
    uint64_t v60 = v59;
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v57, v53);
    swift_task_dealloc();
  }
  else
  {
    long long v58 = 0;
    uint64_t v60 = 0;
  }
  uint64_t v61 = *(void *)(v0 + 400);
  uint64_t v62 = *(void *)(v0 + 360);
  uint64_t v63 = *(void *)(v0 + 320);
  uint64_t v64 = *(void *)(v0 + 328);
  uint64_t v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 16);
  *(void *)(v0 + 464) = v65;
  *(void *)(v0 + 472) = (v64 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v65(v62, v61, v63);
  if (!v58)
  {
    uint64_t v66 = *(void *)(v0 + 352);
    uint64_t v67 = *(void *)(v0 + 328);
    uint64_t v68 = *(void *)(v0 + 320);
    v65(v66, *(void *)(v0 + 360), v68);
    unint64_t v69 = (*(unsigned __int8 *)(v67 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80);
    uint64_t v60 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v67 + 32))(v60 + v69, v66, v68);
    long long v58 = (int *)&async function pointer to partial apply for closure #1 in static URLDocumentCreationStrategy.defaultDocumentProvider(contentType:);
  }
  *(void *)(v0 + 480) = v60;
  uint64_t v70 = *(void *)(v0 + 360);
  uint64_t v71 = *(void *)(v0 + 320);
  uint64_t v72 = *(void *)(v0 + 328);
  uint64_t v73 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
  *(void *)(v0 + 488) = v73;
  *(void *)(v0 + 496) = (v72 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v73(v70, v71);
  *(void *)(v0 + 216) = v49;
  *(void *)(v0 + 224) = &protocol witness table for URLDocumentBox;
  uint64_t v76 = (uint64_t (*)(uint64_t))((char *)v58 + *v58);
  swift_retain();
  char v74 = (void *)swift_task_alloc();
  *(void *)(v0 + 504) = v74;
  *char v74 = v0;
  v74[1] = closure #1 in URLDocumentCreation.documentBrowser(_:didRequestDocumentCreationWithHandler:);
  return v76(v0 + 216);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(void *)(v0 + 408) = type metadata accessor for MainActor();
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 416) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #1 in URLDocumentCreation.documentBrowser(_:didRequestDocumentCreationWithHandler:), v2, v1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  uint64_t v1 = *(void **)(v0 + 240);
  swift_release();
  *(void *)(v0 + 424) = objc_msgSend(v1, sel_activeDocumentCreationIntent);
  return MEMORY[0x1F4188298](closure #1 in URLDocumentCreation.documentBrowser(_:didRequestDocumentCreationWithHandler:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 512) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in URLDocumentCreation.documentBrowser(_:didRequestDocumentCreationWithHandler:);
  }
  else {
    uint64_t v2 = closure #1 in URLDocumentCreation.documentBrowser(_:didRequestDocumentCreationWithHandler:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  swift_unknownObjectRelease();
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v3 = *(void *)(v0 + 280);
  uint64_t v4 = *(void *)(v0 + 432) + *(void *)(v0 + 440);
  (*(void (**)(void, void, void))(v0 + 464))(*(void *)(v0 + 344), *(void *)(v0 + 400), *(void *)(v0 + 320));
  swift_beginAccess();
  outlined init with copy of URL?(v4, v1);
  uint64_t v5 = (uint64_t (*)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  if (v5 == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = (void *)(*(void *)(v0 + 248) + OBJC_IVAR____TtC7SwiftUI19URLDocumentCreation_onDocumentOpen);
    *(void *)(v0 + 520) = *v8;
    *(void *)(v0 + 528) = v8[1];
    swift_retain();
    *(void *)(v0 + 536) = static MainActor.shared.getter();
    uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v11 = v10;
    uint64_t v5 = closure #1 in URLDocumentCreation.documentBrowser(_:didRequestDocumentCreationWithHandler:);
    int v6 = v9;
    char v7 = v11;
  }
  return MEMORY[0x1F4188298](v5, v6, v7);
}

{
  uint64_t v0;
  void *v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  uint64_t v1 = *(void **)(v0 + 512);
  swift_unknownObjectRelease();
  _StringGuts.grow(_:)(31);
  *(void *)(v0 + 200) = 0;
  *(void *)(v0 + 208) = 0xE000000000000000;
  v2._object = (void *)0x8000000188344910;
  v2._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v2);
  *(void *)(v0 + 232) = v1;
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Error);
  _print_unlocked<A, B>(_:_:)();
  MEMORY[0x18C112B90](*(void *)(v0 + 200), *(void *)(v0 + 208));
  swift_bridgeObjectRelease();

  uint64_t v3 = *(void *)(v0 + 304);
  uint64_t v4 = *(void *)(v0 + 272);
  uint64_t v5 = *(void *)(v0 + 280);
  int v6 = *(void *)(v0 + 432) + *(void *)(v0 + 440);
  (*(void (**)(void, void, void))(v0 + 464))(*(void *)(v0 + 344), *(void *)(v0 + 400), *(void *)(v0 + 320));
  swift_beginAccess();
  outlined init with copy of URL?(v6, v3);
  char v7 = (uint64_t (*)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4);
  if (v7 == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v10 = (void *)(*(void *)(v0 + 248) + OBJC_IVAR____TtC7SwiftUI19URLDocumentCreation_onDocumentOpen);
    *(void *)(v0 + 520) = *v10;
    *(void *)(v0 + 528) = v10[1];
    swift_retain();
    *(void *)(v0 + 536) = static MainActor.shared.getter();
    uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v13 = v12;
    char v7 = closure #1 in URLDocumentCreation.documentBrowser(_:didRequestDocumentCreationWithHandler:);
    uint64_t v8 = v11;
    uint64_t v9 = v13;
  }
  return MEMORY[0x1F4188298](v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v7;

  uint64_t v1 = v0[66];
  uint64_t v2 = v0[65];
  uint64_t v3 = v0[43];
  uint64_t v4 = v0[38];
  swift_release();
  uint64_t v5 = objc_allocWithZone((Class)type metadata accessor for StubDocument());
  v0[68] = specialized StubDocument.init(contentType:documentURL:viewProvider:)(v3, v4, v2, v1);
  swift_release();
  return MEMORY[0x1F4188298](closure #1 in URLDocumentCreation.documentBrowser(_:didRequestDocumentCreationWithHandler:), 0, 0);
}

{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *(id *)(v0 + 544);
  *(void *)(v0 + 552) = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #1 in URLDocumentCreation.documentBrowser(_:didRequestDocumentCreationWithHandler:), v3, v2);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  uint64_t v1 = *(void **)(v0 + 544);
  swift_release();
  *(void *)(v0 + 560) = objc_msgSend(v1, sel_fileURL);

  return MEMORY[0x1F4188298](closure #1 in URLDocumentCreation.documentBrowser(_:didRequestDocumentCreationWithHandler:), 0, 0);
}

{
  void *v0;
  void *v1;
  void (*v2)(uint64_t, void, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t (*v8)(void);
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;

  uint64_t v1 = (void *)v0[70];
  uint64_t v13 = (void (*)(uint64_t, uint64_t))v0[61];
  uint64_t v2 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[56];
  uint64_t v10 = (void *)v0[68];
  uint64_t v12 = v0[50];
  uint64_t v11 = v0[40];
  uint64_t v3 = v0[37];
  uint64_t v5 = v0[35];
  uint64_t v4 = v0[36];
  int v6 = v0[34];
  char v7 = (void (*)(uint64_t, uint64_t))v0[32];
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v4, v6);
  v2(v3, 0, 1, v6);
  v7(v3, 2);
  swift_release();

  swift_release();
  _s10Foundation3URLVSgWOhTm_4(v3, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v13(v12, v11);
  outlined destroy of DocumentCreationStrategy?((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t closure #1 in OnModifierKeysChangedModifier.body(content:)()
{
  uint64_t v1 = *(uint64_t **)(v0 + 272);
  if (v1[1])
  {
    if (one-time initialization token for _modifierKeySource != -1) {
      swift_once();
    }
    outlined init with copy of TableColumnList((uint64_t)&static EventModifiers._modifierKeySource, v0 + 120);
    uint64_t v2 = *(void *)(v0 + 144);
    uint64_t v3 = *(void *)(v0 + 152);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 120), v2);
    uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
    __swift_destroy_boxed_opaque_existential_1(v0 + 120);
    uint64_t v1 = *(uint64_t **)(v0 + 272);
    if (v4)
    {
      ((void (*)(void, uint64_t))v1[2])(0, v4);
      *(_OWORD *)(v0 + 192) = *((_OWORD *)v1 + 2);
      uint64_t v5 = *(void *)(v0 + 200);
      *(void *)(v0 + 264) = v4;
      if (v5)
      {
        swift_retain();
        dispatch thunk of AnyLocation.set(_:transaction:)();
        outlined release of AnyDynamicChild<A, B>(v0 + 192);
      }
      uint64_t v1 = *(uint64_t **)(v0 + 272);
    }
  }
  uint64_t v6 = *v1;
  if (one-time initialization token for _modifierKeySource != -1) {
    swift_once();
  }
  outlined init with copy of TableColumnList((uint64_t)&static EventModifiers._modifierKeySource, v0 + 72);
  *(void *)(v0 + 112) = v6;
  EventModifiers.AsyncValues.makeAsyncIterator()(v0 + 16);
  outlined destroy of AccessibilityRelationshipScope.Key(v0 + 72);
  *(void *)(v0 + 312) = static MainActor.shared.getter();
  return MEMORY[0x1F4188298](closure #1 in OnModifierKeysChangedModifier.body(content:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;

  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v0 + 2), v1);
  v0[40] = swift_getAssociatedTypeWitness();
  uint64_t v3 = type metadata accessor for Optional();
  v0[41] = v3;
  v0[42] = *(void *)(v3 - 8);
  uint64_t v4 = swift_task_alloc();
  v0[43] = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[44] = v5;
  *uint64_t v5 = v0;
  v5[1] = closure #1 in OnModifierKeysChangedModifier.body(content:);
  return MEMORY[0x1F4187C78](v4, v1, v2);
}

{
  void *v0;
  uint64_t (*v1)();
  uint64_t v3;

  swift_task_dealloc();
  if (v0)
  {

    uint64_t v1 = closure #1 in OnModifierKeysChangedModifier.body(content:);
  }
  else
  {
    uint64_t v1 = closure #1 in OnModifierKeysChangedModifier.body(content:);
  }
  return MEMORY[0x1F4188298](v1, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)();
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  uint64_t v1 = v0[43];
  uint64_t v2 = v0[40];
  uint64_t v3 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(uint64_t, void))(v0[42] + 8))(v1, v0[41]);
    swift_task_dealloc();
LABEL_8:
    if (v0[39])
    {
      swift_getObjectType();
      uint64_t v14 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v16 = v15;
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v16 = 0;
    }
    uint64_t v17 = closure #1 in OnModifierKeysChangedModifier.body(content:);
LABEL_12:
    return MEMORY[0x1F4188298](v17, v14, v16);
  }
  v0[23] = v2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 20);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 32))(boxed_opaque_existential_1, v1, v2);
  swift_task_dealloc();
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t v5 = v0[32];
  char v7 = v0[7];
  uint64_t v6 = v0[8];
  v0[45] = v5;
  v0[46] = v6;
  uint64_t v8 = v6 & v5;
  if (v7 != v8)
  {
    char v18 = v0[39];
    v0[7] = v8;
    if (v18)
    {
      swift_getObjectType();
      uint64_t v14 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v16 = v19;
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v16 = 0;
    }
    uint64_t v17 = closure #1 in OnModifierKeysChangedModifier.body(content:);
    goto LABEL_12;
  }
  uint64_t v9 = v0[5];
  uint64_t v10 = v0[6];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v0 + 2), v9);
  v0[40] = swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for Optional();
  v0[41] = v11;
  v0[42] = *(void *)(v11 - 8);
  uint64_t v12 = swift_task_alloc();
  v0[43] = v12;
  uint64_t v13 = (void *)swift_task_alloc();
  v0[44] = v13;
  *uint64_t v13 = v0;
  v13[1] = closure #1 in OnModifierKeysChangedModifier.body(content:);
  return MEMORY[0x1F4187C78](v12, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  swift_task_dealloc();
  if (*(void *)(v0 + 312))
  {
    swift_getObjectType();
    uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v3 = v2;
  }
  else
  {
    uint64_t v1 = 0;
    uint64_t v3 = 0;
  }
  return MEMORY[0x1F4188298](closure #1 in OnModifierKeysChangedModifier.body(content:), v1, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(void *)(v0 + 296);
  uint64_t v2 = *(void *)(v0 + 304);
  return MEMORY[0x1F4188298](closure #1 in OnModifierKeysChangedModifier.body(content:), v1, v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined destroy of AccessibilityRelationshipScope.Key(v0 + 16);
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(void *)(v0 + 296);
  uint64_t v2 = *(void *)(v0 + 304);
  return MEMORY[0x1F4188298](closure #1 in OnModifierKeysChangedModifier.body(content:), v1, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(void, uint64_t);
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v2 = *(void *)(v0 + 360) & *(void *)(v0 + 368);
  uint64_t v3 = *(void (**)(void, uint64_t))(v1 + 16);
  *(_OWORD *)(v0 + 208) = *(_OWORD *)(v1 + 32);
  uint64_t v4 = *(void *)(v0 + 216);
  *(_OWORD *)(v0 + 224) = *(_OWORD *)(v1 + 32);
  type metadata accessor for State<EventModifiers>();
  State.wrappedValue.getter();
  v3(*(void *)(v0 + 240), v2);
  *(void *)(v0 + 248) = v2;
  if (v4)
  {
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    outlined release of AnyDynamicChild<A, B>(v0 + 208);
  }
  *(void *)(v0 + 312) = static MainActor.shared.getter();
  return MEMORY[0x1F4188298](closure #1 in OnModifierKeysChangedModifier.body(content:), 0, 0);
}

uint64_t specialized static AnimatedValuePlaybackConfiguration.Mode.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t *)a1;
  uint64_t v2 = *(uint64_t *)(a1 + 8);
  unsigned int v4 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v6 = *(uint64_t *)a2;
  uint64_t v5 = *(uint64_t *)(a2 + 8);
  unsigned int v7 = *(unsigned __int8 *)(a2 + 16);
  switch(v4 >> 6)
  {
    case 1u:
      if ((v7 & 0xC0) != 0x40) {
        goto LABEL_15;
      }
      goto LABEL_11;
    case 2u:
      if ((v7 & 0xC0) != 0x80)
      {
        swift_retain();
LABEL_15:
        outlined copy of AnimatedValuePlaybackConfiguration.Mode(v6, v5, v7);
        outlined consume of AnimatedValuePlaybackConfiguration.Mode(v3, v2, v4);
        outlined consume of AnimatedValuePlaybackConfiguration.Mode(v6, v5, v7);
        goto LABEL_16;
      }
      outlined copy of AnimatedValuePlaybackConfiguration.Mode(v6, v5, v7);
      outlined copy of AnimatedValuePlaybackConfiguration.Mode(v3, v2, v4);
      outlined copy of AnimatedValuePlaybackConfiguration.Mode(v6, v5, v7);
      outlined copy of AnimatedValuePlaybackConfiguration.Mode(v3, v2, v4);
      char v8 = static AnyEquatable.== infix(_:_:)();
      outlined consume of AnimatedValuePlaybackConfiguration.Mode(v3, v2, v4);
      outlined consume of AnimatedValuePlaybackConfiguration.Mode(v6, v5, v7);
      outlined consume of AnimatedValuePlaybackConfiguration.Mode(v6, v5, v7);
      outlined consume of AnimatedValuePlaybackConfiguration.Mode(v3, v2, v4);
      if ((v8 & 1) == 0) {
        goto LABEL_16;
      }
      if (v4)
      {
        if ((v7 & 1) == 0)
        {
LABEL_16:
          char v9 = 0;
          return v9 & 1;
        }
      }
      else if ((v7 & 1) != 0 || *(double *)&v2 != *(double *)&v5)
      {
        goto LABEL_16;
      }
      char v9 = 1;
      return v9 & 1;
    case 3u:
      if (v7 <= 0xBF) {
        goto LABEL_15;
      }
      outlined consume of AnimatedValuePlaybackConfiguration.Mode(*(void *)a1, v2, v4);
      outlined consume of AnimatedValuePlaybackConfiguration.Mode(v6, v5, v7);
      char v9 = ((v3 & 1) == 0) ^ v6;
      return v9 & 1;
    default:
      if (v7 >= 0x40) {
        goto LABEL_15;
      }
LABEL_11:
      outlined consume of AnimatedValuePlaybackConfiguration.Mode(*(void *)a1, v2, v4);
      outlined consume of AnimatedValuePlaybackConfiguration.Mode(v6, v5, v7);
      char v9 = *(double *)&v3 == *(double *)&v6;
      return v9 & 1;
  }
}

void type metadata accessor for _GraphValue<WritableKeyPath<EnvironmentValues, Bool>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<WritableKeyPath<EnvironmentValues, Bool>>)
  {
    type metadata accessor for ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>(255, &lazy cache variable for type metadata for WritableKeyPath<EnvironmentValues, Bool>, MEMORY[0x1E4F40140], MEMORY[0x1E4FBB390], MEMORY[0x1E4FBBC08]);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<WritableKeyPath<EnvironmentValues, Bool>>);
    }
  }
}

uint64_t EventModifiers.AsyncValues.makeAsyncIterator()@<X0>(uint64_t a1@<X8>)
{
  outlined init with copy of TableColumnList(v1, (uint64_t)v23);
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = v24;
  uint64_t v5 = v25;
  __swift_project_boxed_opaque_existential_1(v23, v24);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 24))(v16, v4, v5);
  uint64_t v6 = __swift_project_boxed_opaque_existential_1(v16, v17);
  double v7 = MEMORY[0x1F4188790](v6);
  (*(void (**)(char *, double))(v9 + 16))((char *)&v16[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  *((void *)&v20 + 1) = swift_getAssociatedTypeWitness();
  *(void *)&long long v21 = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v19);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  if (one-time initialization token for _modifierKeySource != -1) {
    swift_once();
  }
  outlined init with copy of TableColumnList((uint64_t)&static EventModifiers._modifierKeySource, (uint64_t)v16);
  uint64_t v10 = v17;
  uint64_t v11 = v18;
  __swift_project_boxed_opaque_existential_1(v16, v17);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 16))(v10, v11);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  *((void *)&v21 + 1) = v12 & v3;
  uint64_t v22 = v3;
  long long v13 = v20;
  *(_OWORD *)a1 = v19;
  *(_OWORD *)(a1 + 16) = v13;
  *(void *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 32) = v21;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
}

uint64_t outlined copy of AnimatedValuePlaybackConfiguration.Mode(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 0xC0) == 0x80) {
    return swift_retain();
  }
  return result;
}

uint64_t protocol witness for ModifierKeySource.current.getter in conformance DefaultModifierKeySource()
{
  if (one-time initialization token for monitor != -1) {
    swift_once();
  }
  return *(void *)(static DefaultModifierKeySource.monitor + 24);
}

uint64_t specialized closure #1 in ModifierKeySource.values.getter(uint64_t a1)
{
  type metadata accessor for AsyncStream<EventModifiers>.Continuation.BufferingPolicy(0, &lazy cache variable for type metadata for AsyncStream<EventModifiers>.Continuation, MEMORY[0x1E4FBD038]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v20 - v5;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v7);
  long long v21 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v20 - v11;
  if (one-time initialization token for monitor != -1) {
    swift_once();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  uint64_t v13 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v20 = a1;
  uint64_t v14 = (v13 + 16) & ~v13;
  uint64_t v15 = swift_allocObject();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v15 + v14, v6, v3);
  swift_retain();
  ModifierKeyMonitor.addObserver(_:)((uint64_t)partial apply for closure #1 in closure #1 in ModifierKeySource.values.getter, v15, (uint64_t)v12);
  swift_release();
  swift_release();
  uint64_t v16 = v21;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v21, v12, v7);
  unint64_t v17 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v18 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v18 + v17, v16, v7);
  AsyncStream.Continuation.onTermination.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v12, v7);
}

uint64_t protocol witness for ModifierKeySource.values.getter in conformance DefaultModifierKeySource@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for AsyncStream<EventModifiers>.Continuation.BufferingPolicy(0, &lazy cache variable for type metadata for AsyncStream<EventModifiers>.Continuation.BufferingPolicy, MEMORY[0x1E4FBD030]);
  double v3 = MEMORY[0x1F4188790](v2);
  (*(void (**)(char *, void, double))(v5 + 104))((char *)&v8 - v4, *MEMORY[0x1E4FBD028], v3);
  type metadata accessor for AsyncStream<EventModifiers>.Continuation.BufferingPolicy(0, &lazy cache variable for type metadata for AsyncStream<EventModifiers>, MEMORY[0x1E4FBD060]);
  a1[3] = v6;
  a1[4] = lazy protocol witness table accessor for type AsyncStream<EventModifiers> and conformance AsyncStream<A>();
  __swift_allocate_boxed_opaque_existential_1(a1);
  return AsyncStream.init(_:bufferingPolicy:_:)();
}

void type metadata accessor for AsyncStream<EventModifiers>.Continuation.BufferingPolicy(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, MEMORY[0x1E4F3F948]);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AsyncStream<EventModifiers> and conformance AsyncStream<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AsyncStream<EventModifiers> and conformance AsyncStream<A>;
  if (!lazy protocol witness table cache variable for type AsyncStream<EventModifiers> and conformance AsyncStream<A>)
  {
    type metadata accessor for AsyncStream<EventModifiers>.Continuation.BufferingPolicy(255, &lazy cache variable for type metadata for AsyncStream<EventModifiers>, MEMORY[0x1E4FBD060]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AsyncStream<EventModifiers> and conformance AsyncStream<A>);
  }
  return result;
}

uint64_t ModifierKeyMonitor.addObserver(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a3, v8);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  *(void *)(v12 + 24) = a2;
  uint64_t v13 = *(void *)(v4 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v18 = v13;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@unowned EventModifiers) -> (), v12, (uint64_t)v11, isUniquelyReferenced_nonNull_native);
  uint64_t v15 = v18;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  *(void *)(v4 + 16) = v15;
  return swift_bridgeObjectRelease();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  uint64_t v24 = a4;
  v22[1] = a1;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  v10.n128_f64[0] = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)v22 - v11;
  uint64_t v23 = v6;
  uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v14 = a2 & ~v13;
  v22[0] = v6 + 64;
  if ((*(void *)(v6 + 64 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v15 = ~v13;
    uint64_t v18 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v9 + 16);
    uint64_t v17 = v9 + 16;
    uint64_t v16 = v18;
    uint64_t v19 = *(void *)(v17 + 56);
    do
    {
      v16(v12, *(void *)(v23 + 48) + v19 * v14, v8, v10);
      lazy protocol witness table accessor for type UUID and conformance UUID(v24, v25);
      char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v17 - 8))(v12, v8);
      if (v20) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v15;
    }
    while (((*(void *)(v22[0] + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
  }
  return v14;
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  uint64_t v13 = (void *)(a5[7] + 16 * a1);
  *uint64_t v13 = a3;
  v13[1] = a4;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  uint64_t v10 = *(void *)(a4 + 24);
  uint64_t v11 = *(void *)(a4 + 32);
  uint64_t v12 = __swift_mutable_project_boxed_opaque_existential_1(a4, v10);
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  BOOL v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v16 + 16))(v15, v13);
  specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, (uint64_t)v15, a5, v10, v11);
  return __swift_destroy_boxed_opaque_existential_1(a4);
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  void *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = type metadata accessor for CommandGroupPlacementBox(0);
  uint64_t result = outlined init with take of (key: String, value: Any)?(a2, v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, type metadata accessor for CommandGroupPlacementBox);
  uint64_t v13 = (void *)(a5[7] + 16 * a1);
  *uint64_t v13 = a3;
  v13[1] = a4;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

{
  void *v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  char *v6 = a2;
  v6[1] = a3;
  uint64_t result = outlined init with take of TabEntry(a4, a5[7] + 272 * a1);
  uint64_t v8 = a5[2];
  uint64_t v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v44 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  type metadata accessor for _DictionaryStorage<UUID, (_:)>();
  int v45 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    uint64_t v38 = v2;
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 64);
    uint64_t v40 = (void *)(v8 + 64);
    if (v11 < 64) {
      uint64_t v13 = ~(-1 << v11);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v14 = v13 & v12;
    int64_t v39 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v41 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    uint64_t v15 = v9 + 64;
    uint64_t result = swift_retain();
    int64_t v17 = 0;
    uint64_t v42 = v8;
    uint64_t v43 = v7;
    while (1)
    {
      if (v14)
      {
        unint64_t v19 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v20 = v19 | (v17 << 6);
      }
      else
      {
        int64_t v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v39) {
          goto LABEL_34;
        }
        unint64_t v22 = v40[v21];
        ++v17;
        if (!v22)
        {
          int64_t v17 = v21 + 1;
          if (v21 + 1 >= v39) {
            goto LABEL_34;
          }
          unint64_t v22 = v40[v17];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v39)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v38;
              if (v45)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v8 + 32);
                if (v36 >= 64) {
                  bzero(v40, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v40 = -1 << v36;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v40[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v17 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v17 >= v39) {
                  goto LABEL_34;
                }
                unint64_t v22 = v40[v17];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v17 = v23;
          }
        }
LABEL_21:
        unint64_t v14 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      uint64_t v24 = v5;
      uint64_t v25 = *(void *)(v5 + 72);
      unint64_t v26 = *(void *)(v8 + 48) + v25 * v20;
      uint64_t v27 = v43;
      uint64_t v28 = v44;
      if (v45)
      {
        (*v46)(v43, v26, v44);
        long long v47 = *(_OWORD *)(*(void *)(v8 + 56) + 16 * v20);
      }
      else
      {
        (*v41)(v43, v26, v44);
        long long v47 = *(_OWORD *)(*(void *)(v8 + 56) + 16 * v20);
        swift_retain();
      }
      lazy protocol witness table accessor for type UIMenuIdentifier and conformance UIMenuIdentifier((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v15 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v18 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v46)(*(void *)(v10 + 48) + v25 * v18, v27, v28);
      *(_OWORD *)(*(void *)(v10 + 56) + 16 * v18) = v47;
      ++*(void *)(v10 + 16);
      uint64_t v5 = v24;
      uint64_t v8 = v42;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  void *v41;
  uint64_t v42;
  int v43;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for ToolbarStorage.Entry(0);
  uint64_t v42 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  type metadata accessor for _DictionaryStorage<String, ToolbarStorage.Entry>();
  uint64_t v43 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v41 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  int64_t v39 = v2;
  uint64_t v40 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      int64_t v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    unint64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v40) {
      break;
    }
    int64_t v23 = v41;
    uint64_t v24 = v41[v22];
    ++v17;
    if (!v24)
    {
      int64_t v17 = v22 + 1;
      if (v22 + 1 >= v40) {
        goto LABEL_34;
      }
      uint64_t v24 = v41[v17];
      if (!v24)
      {
        uint64_t v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v39;
          if ((v43 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        uint64_t v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v40) {
              goto LABEL_34;
            }
            uint64_t v24 = v41[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v25;
      }
    }
LABEL_21:
    unint64_t v14 = (v24 - 1) & v24;
    int64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    unint64_t v26 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v21);
    uint64_t v28 = *v26;
    uint64_t v27 = v26[1];
    uint64_t v29 = *(void *)(v42 + 72);
    unint64_t v30 = *(void *)(v8 + 56) + v29 * v21;
    if (v43)
    {
      outlined init with take of (key: String, value: Any)?(v30, (uint64_t)v7, type metadata accessor for ToolbarStorage.Entry);
    }
    else
    {
      outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])(v30, (uint64_t)v7, type metadata accessor for ToolbarStorage.Entry);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v31 = -1 << *(unsigned char *)(v10 + 32);
    char v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      BOOL v34 = 0;
      uint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v15 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v18 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v10 + 48) + 16 * v18);
    char *v19 = v28;
    v19[1] = v27;
    uint64_t result = outlined init with take of (key: String, value: Any)?((uint64_t)v7, *(void *)(v10 + 56) + v29 * v18, type metadata accessor for ToolbarStorage.Entry);
    ++*(void *)(v10 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  int64_t v23 = v41;
  if ((v43 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v8 + 32);
  if (v38 >= 64) {
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v38;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  void *v40;
  void (**v41)(char *, unint64_t, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  int v45;
  void (**v46)(char *, unint64_t, uint64_t);
  _OWORD v47[2];

  uint64_t v3 = v2;
  uint64_t v44 = type metadata accessor for CodingUserInfoKey();
  uint64_t v5 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  type metadata accessor for _DictionaryStorage<CodingUserInfoKey, Any>();
  int v45 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    uint64_t v38 = v2;
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 64);
    uint64_t v40 = (void *)(v8 + 64);
    if (v11 < 64) {
      uint64_t v13 = ~(-1 << v11);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v14 = v13 & v12;
    int64_t v39 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v41 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    uint64_t v15 = v9 + 64;
    uint64_t result = swift_retain();
    int64_t v17 = 0;
    uint64_t v42 = v8;
    uint64_t v43 = v7;
    while (1)
    {
      if (v14)
      {
        unint64_t v19 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v20 = v19 | (v17 << 6);
      }
      else
      {
        int64_t v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v39) {
          goto LABEL_34;
        }
        unint64_t v22 = v40[v21];
        ++v17;
        if (!v22)
        {
          int64_t v17 = v21 + 1;
          if (v21 + 1 >= v39) {
            goto LABEL_34;
          }
          unint64_t v22 = v40[v17];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v39)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v38;
              if (v45)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v8 + 32);
                if (v36 >= 64) {
                  bzero(v40, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v40 = -1 << v36;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v40[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v17 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v17 >= v39) {
                  goto LABEL_34;
                }
                unint64_t v22 = v40[v17];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v17 = v23;
          }
        }
LABEL_21:
        unint64_t v14 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      uint64_t v24 = v5;
      uint64_t v25 = *(void *)(v5 + 72);
      unint64_t v26 = *(void *)(v8 + 48) + v25 * v20;
      uint64_t v27 = v43;
      uint64_t v28 = v44;
      if (v45)
      {
        (*v46)(v43, v26, v44);
        outlined init with take of Any((_OWORD *)(*(void *)(v8 + 56) + 32 * v20), v47);
      }
      else
      {
        (*v41)(v43, v26, v44);
        outlined init with copy of Any(*(void *)(v8 + 56) + 32 * v20, (uint64_t)v47);
      }
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v15 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v18 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      (*v46)((char *)(*(void *)(v10 + 48) + v25 * v18), (unint64_t)v27, v28);
      uint64_t result = (uint64_t)outlined init with take of Any(v47, (_OWORD *)(*(void *)(v10 + 56) + 32 * v18));
      ++*(void *)(v10 + 16);
      uint64_t v5 = v24;
      uint64_t v8 = v42;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  void *v39;
  uint64_t v40;
  int v41;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for CommandOperation();
  uint64_t v40 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  type metadata accessor for _DictionaryStorage<UIMenuElement, CommandOperation>();
  uint64_t v41 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v38 = v2;
  int64_t v39 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  uint64_t v15 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v16 = v9 + 64;
  uint64_t result = swift_retain();
  unint64_t v18 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      int64_t v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    unint64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v15) {
      break;
    }
    int64_t v23 = v39;
    uint64_t v24 = v39[v22];
    ++v18;
    if (!v24)
    {
      unint64_t v18 = v22 + 1;
      if (v22 + 1 >= v15) {
        goto LABEL_34;
      }
      uint64_t v24 = v39[v18];
      if (!v24)
      {
        uint64_t v25 = v22 + 2;
        if (v25 >= v15)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v38;
          if ((v41 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        uint64_t v24 = v39[v25];
        if (!v24)
        {
          while (1)
          {
            unint64_t v18 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v15) {
              goto LABEL_34;
            }
            uint64_t v24 = v39[v18];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v18 = v25;
      }
    }
LABEL_21:
    unint64_t v14 = (v24 - 1) & v24;
    int64_t v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    unint64_t v26 = *(void **)(*(void *)(v8 + 48) + 8 * v21);
    uint64_t v27 = *(void *)(v40 + 72);
    uint64_t v28 = *(void *)(v8 + 56) + v27 * v21;
    if (v41)
    {
      outlined init with take of (key: String, value: Any)?(v28, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for CommandOperation);
    }
    else
    {
      outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])(v28, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for CommandOperation);
      uint64_t v29 = v26;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v10 + 40));
    unint64_t v30 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v31 = result & ~v30;
    char v32 = v31 >> 6;
    if (((-1 << v31) & ~*(void *)(v16 + 8 * (v31 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v31) & ~*(void *)(v16 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v33 = 0;
      BOOL v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v35 = v32 == v34;
        if (v32 == v34) {
          char v32 = 0;
        }
        v33 |= v35;
        uint64_t v36 = *(void *)(v16 + 8 * v32);
      }
      while (v36 == -1);
      unint64_t v19 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(void *)(*(void *)(v10 + 48) + 8 * v19) = v26;
    uint64_t result = outlined init with take of (key: String, value: Any)?((uint64_t)v7, *(void *)(v10 + 56) + v27 * v19, (uint64_t (*)(void))type metadata accessor for CommandOperation);
    ++*(void *)(v10 + 16);
  }
  swift_release();
  uint64_t v3 = v38;
  int64_t v23 = v39;
  if ((v41 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v37 = 1 << *(unsigned char *)(v8 + 32);
  if (v37 >= 64) {
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v37;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (**v17)(char *, unint64_t, uint64_t);
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  void *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  void *v42;
  void (**v43)(char *, unint64_t, uint64_t);
  uint64_t i;
  uint64_t v45;
  int v46;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  type metadata accessor for _DictionaryStorage<UUID, PlatformItemList>();
  uint64_t v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = *(void *)(v11 + 64);
  uint64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  uint64_t v16 = v15 & v14;
  uint64_t v40 = v3;
  uint64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  int v45 = v6;
  int64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  unint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  unint64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      int64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    uint64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    uint64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      unint64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        uint64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            unint64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v20 = v27;
      }
    }
LABEL_21:
    uint64_t v16 = (v26 - 1) & v26;
    int64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    uint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      unint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      unint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_bridgeObjectRetain();
    }
    lazy protocol witness table accessor for type UIMenuIdentifier and conformance UIMenuIdentifier((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    unint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    char v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      int64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      BOOL v34 = 0;
      uint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      int64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  uint64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t (*v31)(void, uint64_t);
  uint64_t v32;
  void *v33;
  id v34;
  int64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  Swift::UInt v42;
  Swift::UInt v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  int64_t v53;
  void *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;
  Swift::UInt v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  char v64;
  long long v65;
  uint64_t v66;
  char v67;
  long long v68;
  char v69;
  long long v70;
  long long v71;
  char v72;
  char v73;
  __int16 v74;
  unsigned char v75[184];
  id v76;
  char v77;
  long long v78;
  uint64_t v79;
  char v80;
  long long v81;
  char v82;
  long long v83;
  long long v84;
  char v85;
  char v86;
  __int16 v87;
  uint64_t v88;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1F4188790](v5 - 8);
  long long v55 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SystemSegmentItem();
  uint64_t v57 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  type metadata accessor for _DictionaryStorage<SystemSegmentItem, Int>();
  long long v58 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v62 = v10;
  if (*(void *)(v10 + 16))
  {
    uint64_t v12 = 1 << *(unsigned char *)(v62 + 32);
    uint64_t v13 = *(void *)(v62 + 64);
    uint64_t v54 = (void *)(v62 + 64);
    if (v12 < 64) {
      unint64_t v14 = ~(-1 << v12);
    }
    else {
      unint64_t v14 = -1;
    }
    uint64_t v15 = v14 & v13;
    unint64_t v52 = v2;
    uint64_t v53 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v56 = v9 + 64;
    uint64_t v16 = v11 + 64;
    uint64_t result = swift_retain();
    unint64_t v18 = 0;
    unint64_t v19 = (uint64_t)v55;
    while (1)
    {
      if (v15)
      {
        unint64_t v22 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        int64_t v23 = v22 | (v18 << 6);
      }
      else
      {
        uint64_t v24 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
          return result;
        }
        if (v24 >= v53) {
          goto LABEL_48;
        }
        uint64_t v25 = v54[v24];
        ++v18;
        if (!v25)
        {
          unint64_t v18 = v24 + 1;
          if (v24 + 1 >= v53) {
            goto LABEL_48;
          }
          uint64_t v25 = v54[v18];
          if (!v25)
          {
            unint64_t v26 = v24 + 2;
            if (v26 >= v53)
            {
LABEL_48:
              swift_release();
              uint64_t v3 = v52;
              if (v58)
              {
                uint64_t v51 = 1 << *(unsigned char *)(v62 + 32);
                if (v51 >= 64) {
                  bzero(v54, ((unint64_t)(v51 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v54 = -1 << v51;
                }
                *(void *)(v62 + 16) = 0;
              }
              break;
            }
            uint64_t v25 = v54[v26];
            if (!v25)
            {
              while (1)
              {
                unint64_t v18 = v26 + 1;
                if (__OFADD__(v26, 1)) {
                  goto LABEL_56;
                }
                if (v18 >= v53) {
                  goto LABEL_48;
                }
                uint64_t v25 = v54[v18];
                ++v26;
                if (v25) {
                  goto LABEL_21;
                }
              }
            }
            unint64_t v18 = v26;
          }
        }
LABEL_21:
        uint64_t v15 = (v25 - 1) & v25;
        int64_t v23 = __clz(__rbit64(v25)) + (v18 << 6);
      }
      uint64_t v27 = *(void *)(v62 + 48) + *(void *)(v57 + 72) * v23;
      uint64_t v60 = *(void *)(v57 + 72);
      if (v58) {
        outlined init with take of (key: String, value: Any)?(v27, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
      }
      else {
        outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])(v27, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
      }
      uint64_t v28 = *(void *)(*(void *)(v62 + 56) + 8 * v23);
      Hasher.init(_seed:)();
      uint64_t v29 = *(void **)v9;
      uint64_t v61 = v28;
      if (v29)
      {
        unint64_t v30 = objc_msgSend(v29, sel_string);
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease_n();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      unint64_t v31 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
      char v32 = MEMORY[0x1E4F41550];
      _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_3((uint64_t)v56, (uint64_t)v75, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550], MEMORY[0x1E4FBB718]);
      _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_3((uint64_t)v75, (uint64_t)&v76, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v32, v31);
      if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v76) == 1)
      {
LABEL_29:
        Hasher._combine(_:)(0);
        goto LABEL_36;
      }
      if (v88)
      {
        outlined release of Image.Resolved?((uint64_t)v75, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of Image.Resolved?);
        swift_unknownObjectRetain();
        self;
        unint64_t v33 = (void *)swift_dynamicCastObjCClassUnconditional();
        outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])((uint64_t)v9, v19, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        if (v33)
        {
          outlined release of Image.Resolved?((uint64_t)v75, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
          outlined destroy of PlatformItemList.Item(v19);
          goto LABEL_35;
        }
      }
      else
      {
        _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_3((uint64_t)v75, (uint64_t)&v63, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550], MEMORY[0x1E4FBB718]);
        outlined retain of Image.Resolved((uint64_t)&v63);
        outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])((uint64_t)v9, v19, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      }
      BOOL v34 = v76;
      uint64_t v59 = v15;
      uint64_t v35 = v18;
      uint64_t v36 = v77;
      uint64_t v63 = v76;
      uint64_t v64 = v77;
      uint64_t v65 = v78;
      uint64_t v66 = v79;
      uint64_t v67 = v80;
      uint64_t v68 = v81;
      unint64_t v69 = v82;
      uint64_t v70 = v83;
      uint64_t v71 = v84;
      uint64_t v72 = v85;
      uint64_t v73 = v86;
      char v74 = v87;
      uint64_t v37 = *(void *)(v19 + 48);
      outlined copy of GraphicsImage.Contents?(v76, v77);
      unint64_t v33 = GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(0, 0, v37);
      outlined release of Image.Resolved?((uint64_t)v75, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
      uint64_t v38 = v36;
      unint64_t v18 = v35;
      uint64_t v15 = v59;
      outlined consume of GraphicsImage.Contents?(v34, v38);
      outlined destroy of PlatformItemList.Item(v19);
      if (!v33) {
        goto LABEL_29;
      }
LABEL_35:
      Hasher._combine(_:)(1u);
      NSObject.hash(into:)();

LABEL_36:
      Hasher._combine(_:)(v9[56]);
      if (*((void *)v9 + 60))
      {
        uint64_t v59 = v9[496];
        int64_t v39 = v16;
        uint64_t v40 = v11;
        uint64_t v41 = v18;
        uint64_t v42 = *((void *)v9 + 61);
        Hasher._combine(_:)(1u);
        unint64_t v19 = (uint64_t)v55;
        String.hash(into:)();
        uint64_t v43 = v42;
        unint64_t v18 = v41;
        uint64_t v11 = v40;
        uint64_t v16 = v39;
        Hasher._combine(_:)(v43);
        Hasher._combine(_:)(v59);
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      uint64_t result = Hasher._finalize()();
      uint64_t v44 = -1 << *(unsigned char *)(v11 + 32);
      int v45 = result & ~v44;
      uint64_t v46 = v45 >> 6;
      if (((-1 << v45) & ~*(void *)(v16 + 8 * (v45 >> 6))) != 0)
      {
        unint64_t v20 = __clz(__rbit64((-1 << v45) & ~*(void *)(v16 + 8 * (v45 >> 6)))) | v45 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        long long v47 = 0;
        uint64_t v48 = (unint64_t)(63 - v44) >> 6;
        do
        {
          if (++v46 == v48 && (v47 & 1) != 0)
          {
            __break(1u);
            goto LABEL_55;
          }
          uint64_t v49 = v46 == v48;
          if (v46 == v48) {
            uint64_t v46 = 0;
          }
          v47 |= v49;
          uint64_t v50 = *(void *)(v16 + 8 * v46);
        }
        while (v50 == -1);
        unint64_t v20 = __clz(__rbit64(~v50)) + (v46 << 6);
      }
      int64_t v21 = v60;
      *(void *)(v16 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      uint64_t result = outlined init with take of (key: String, value: Any)?((uint64_t)v9, *(void *)(v11 + 48) + v21 * v20, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
      *(void *)(*(void *)(v11 + 56) + 8 * v20) = v61;
      ++*(void *)(v11 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  void *v43;
  void (**v44)(char *, unint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  int v47;
  void (**v48)(char *, unint64_t, uint64_t);
  char *v49;
  uint64_t v50;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UTType();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  type metadata accessor for _DictionaryStorage<UTType, String?>();
  long long v47 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v49 = v8;
  uint64_t v50 = v5;
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v43 = (void *)(v9 + 64);
  if (v12 < 64) {
    unint64_t v14 = ~(-1 << v12);
  }
  else {
    unint64_t v14 = -1;
  }
  uint64_t v15 = v14 & v13;
  uint64_t v41 = v2;
  uint64_t v42 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v44 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v48 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  unint64_t v18 = 0;
  int v45 = v9;
  uint64_t v46 = v6;
  while (1)
  {
    if (v15)
    {
      int64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v42) {
      break;
    }
    uint64_t v24 = v43;
    uint64_t v25 = v43[v23];
    ++v18;
    if (!v25)
    {
      unint64_t v18 = v23 + 1;
      if (v23 + 1 >= v42) {
        goto LABEL_34;
      }
      uint64_t v25 = v43[v18];
      if (!v25)
      {
        unint64_t v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v41;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        uint64_t v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            unint64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v42) {
              goto LABEL_34;
            }
            uint64_t v25 = v43[v18];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v18 = v26;
      }
    }
LABEL_21:
    uint64_t v15 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    uint64_t v27 = *(void *)(v6 + 72);
    uint64_t v28 = *(void *)(v9 + 48) + v27 * v22;
    if (v47)
    {
      (*v48)(v49, v28, v50);
      uint64_t v29 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      unint64_t v31 = *v29;
      unint64_t v30 = v29[1];
    }
    else
    {
      (*v44)(v49, v28, v50);
      char v32 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      unint64_t v31 = *v32;
      unint64_t v30 = v32[1];
      swift_bridgeObjectRetain();
    }
    lazy protocol witness table accessor for type UIMenuIdentifier and conformance UIMenuIdentifier(&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E4FBCEA8]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    unint64_t v33 = -1 << *(unsigned char *)(v11 + 32);
    BOOL v34 = result & ~v33;
    uint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v16 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v34) & ~*(void *)(v16 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v6 = v46;
    }
    else
    {
      uint64_t v36 = 0;
      uint64_t v37 = (unint64_t)(63 - v33) >> 6;
      uint64_t v6 = v46;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v38 = v35 == v37;
        if (v35 == v37) {
          uint64_t v35 = 0;
        }
        v36 |= v38;
        int64_t v39 = *(void *)(v16 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v19 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v48)(*(void *)(v11 + 48) + v27 * v19, v49, v50);
    unint64_t v20 = (void *)(*(void *)(v11 + 56) + 16 * v19);
    *unint64_t v20 = v31;
    v20[1] = v30;
    ++*(void *)(v11 + 16);
    uint64_t v9 = v45;
  }
  swift_release();
  uint64_t v3 = v41;
  uint64_t v24 = v43;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v9 + 32);
  if (v40 >= 64) {
    bzero(v24, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    unint64_t *v24 = -1 << v40;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void (**v15)(char *, unint64_t, uint64_t);
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  void *v40;
  void (**v41)(char *, unint64_t, uint64_t);
  int v42;
  uint64_t v43;

  uint64_t v3 = v2;
  uint64_t v43 = type metadata accessor for UTType();
  uint64_t v5 = *(void *)(v43 - 8);
  MEMORY[0x1F4188790](v43);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  type metadata accessor for _DictionaryStorage<NSFileWrapper, UTType>();
  uint64_t v42 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    uint64_t v38 = v2;
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 64);
    uint64_t v40 = (void *)(v8 + 64);
    if (v11 < 64) {
      uint64_t v13 = ~(-1 << v11);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v14 = v13 & v12;
    int64_t v39 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v41 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v15 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    uint64_t v16 = v9 + 64;
    uint64_t result = swift_retain();
    unint64_t v18 = 0;
    while (1)
    {
      if (v14)
      {
        unint64_t v20 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        int64_t v21 = v20 | (v18 << 6);
      }
      else
      {
        unint64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v39) {
          goto LABEL_34;
        }
        int64_t v23 = v40[v22];
        ++v18;
        if (!v23)
        {
          unint64_t v18 = v22 + 1;
          if (v22 + 1 >= v39) {
            goto LABEL_34;
          }
          int64_t v23 = v40[v18];
          if (!v23)
          {
            uint64_t v24 = v22 + 2;
            if (v24 >= v39)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v38;
              if (v42)
              {
                uint64_t v37 = 1 << *(unsigned char *)(v8 + 32);
                if (v37 >= 64) {
                  bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v40 = -1 << v37;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            int64_t v23 = v40[v24];
            if (!v23)
            {
              while (1)
              {
                unint64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v39) {
                  goto LABEL_34;
                }
                int64_t v23 = v40[v18];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            unint64_t v18 = v24;
          }
        }
LABEL_21:
        unint64_t v14 = (v23 - 1) & v23;
        int64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      uint64_t v25 = *(void **)(*(void *)(v8 + 48) + 8 * v21);
      unint64_t v26 = v5;
      uint64_t v27 = *(void *)(v5 + 72);
      uint64_t v28 = *(void *)(v8 + 56) + v27 * v21;
      if (v42)
      {
        (*v15)(v7, v28, v43);
      }
      else
      {
        (*v41)(v7, v28, v43);
        uint64_t v29 = v25;
      }
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v10 + 40));
      unint64_t v30 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v31 = result & ~v30;
      char v32 = v31 >> 6;
      if (((-1 << v31) & ~*(void *)(v16 + 8 * (v31 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v31) & ~*(void *)(v16 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v33 = 0;
        BOOL v34 = (unint64_t)(63 - v30) >> 6;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          uint64_t v35 = v32 == v34;
          if (v32 == v34) {
            char v32 = 0;
          }
          v33 |= v35;
          uint64_t v36 = *(void *)(v16 + 8 * v32);
        }
        while (v36 == -1);
        unint64_t v19 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(void *)(*(void *)(v10 + 48) + 8 * v19) = v25;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v15)(*(void *)(v10 + 56) + v27 * v19, v7, v43);
      ++*(void *)(v10 + 16);
      uint64_t v5 = v26;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

void type metadata accessor for _DictionaryStorage<UUID, (_:)>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<UUID, (_:)>)
  {
    type metadata accessor for UUID();
    type metadata accessor for (_:)();
    lazy protocol witness table accessor for type TabViewCustomization and conformance TabViewCustomization((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UUID, (_:)>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<UIMenuIdentifier, [UIMenuElement]>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<UIMenuIdentifier, [UIMenuElement]>)
  {
    type metadata accessor for UIMenuIdentifier(255);
    type metadata accessor for [UIMenuElement]();
    lazy protocol witness table accessor for type TabViewCustomization and conformance TabViewCustomization(&lazy protocol witness table cache variable for type UIMenuIdentifier and conformance UIMenuIdentifier, type metadata accessor for UIMenuIdentifier);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UIMenuIdentifier, [UIMenuElement]>);
    }
  }
}

void type metadata accessor for [UIMenuElement]()
{
  if (!lazy cache variable for type metadata for [UIMenuElement])
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [UIMenuElement]);
    }
  }
}

uint64_t lazy protocol witness table accessor for type TabViewCustomization and conformance TabViewCustomization(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static TupleCommandContent._makeCommands(content:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  int v4 = *a1;
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  uint64_t v9 = a2[5];
  uint64_t v8 = a2[6];
  int v10 = *((_DWORD *)a2 + 14);
  lazy protocol witness table accessor for type CommandsDescriptor and conformance CommandsDescriptor();
  static TupleDescriptor.tupleDescription(_:)();
  uint64_t v11 = v27[0];
  LODWORD(v27[0]) = v4;
  v27[1] = v5;
  int v28 = v6;
  uint64_t v29 = v7;
  long long v30 = *(_OWORD *)(a2 + 3);
  uint64_t v31 = v9;
  uint64_t v32 = v8;
  int v33 = v10;
  uint64_t v12 = v11;
  uint64_t v34 = 0;
  uint64_t v35 = MEMORY[0x1E4FBC860];
  uint64_t v13 = *(void *)(v11 + 16);
  if (v13)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v14 = (long long *)(v12 + 40);
    do
    {
      long long v15 = *v14;
      unint64_t v14 = (long long *)((char *)v14 + 24);
      uint64_t v34 = AGTupleElementOffset();
      long long v26 = v15;
      uint64_t List = type metadata accessor for TupleCommandContent.MakeList();
      TypeConformance<>.visitType<A>(visitor:)((uint64_t)v27, List, (uint64_t)&protocol witness table for TupleCommandContent<A>.MakeList);
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v17 = swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI28NavigationDestinationOutputsVG_AF011PreferencesH0Vs5NeverOTg503_s7d9UI26Tuplefg69V17_makeDestinations7content6inputs8resolvedyAA11_GraphValueVyACyxGG_q40_ViewInputsVAA01_dE10CollectionVztFZAA18iH61VAA0deQ0Vcfu_33_52f1b6677f90efccc4a0b5c00fa35ed1AsQTf3nnnpk_nTf1cn_n(v17);
  swift_bridgeObjectRelease();
  PreferencesOutputs.init()();
  uint64_t v24 = v26;
  int v25 = DWORD2(v26);
  uint64_t v23 = 0;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    do
    {
      unint64_t v18 = (void (*)(long long *, void))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      v18(&v26, 0);
      uint64_t v19 = v23;
      *(void *)&long long v26 = v8;
      swift_bridgeObjectRetain();
      uint64_t v20 = PreferenceKeys.endIndex.getter();
      if (v23 < 0 || v23 >= v20) {
        __break(1u);
      }
      ++v23;
      swift_bridgeObjectRelease();
      static PreferenceKey.visitKey<A>(_:)();
    }
    while (v19 + 1 != PreferenceKeys.endIndex.getter());
  }
  swift_bridgeObjectRelease();
  *(void *)a3 = v24;
  *(_DWORD *)(a3 + 8) = v25;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t implicit closure #3 in LazyLayoutViewCache.init<A>(layout:list:inputs:)(uint64_t a1)
{
  v3[15] = *MEMORY[0x1E4F143B8];
  outlined init with copy of ScrollStateRequestTransform(a1, (uint64_t)v3);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  lazy protocol witness table accessor for type ScrollStateRequestTransform and conformance ScrollStateRequestTransform();
  uint64_t v1 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of ScrollStateRequestTransform((uint64_t)v3);
  return v1;
}

uint64_t type metadata accessor for LazyPreference()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for Attribute<ViewList>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = type metadata accessor for CVarArg(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void _s14AttributeGraph0A0Vy7SwiftUI8ViewList_pGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for CVarArg(255, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t outlined init with copy of LazyScrollable<LazyFixedSizeHStackLayout>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

_OWORD *initializeWithCopy for LazyScrollable(_OWORD *a1, _OWORD *a2)
{
  long long v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_weakCopyInit();
  return a1;
}

uint64_t outlined release of LazyFocusableFillerBoundsProvider(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type LazyFocusableFillerBoundsProvider and conformance LazyFocusableFillerBoundsProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyFocusableFillerBoundsProvider and conformance LazyFocusableFillerBoundsProvider;
  if (!lazy protocol witness table cache variable for type LazyFocusableFillerBoundsProvider and conformance LazyFocusableFillerBoundsProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyFocusableFillerBoundsProvider and conformance LazyFocusableFillerBoundsProvider);
  }
  return result;
}

uint64_t specialized LazyFocusableFillerBoundsProvider.init(inputs:placedSubviews:focusableBounds:nestedFillerBounds:)@<X0>(int a1@<W1>, int a2@<W2>, unsigned int a3@<W3>, uint64_t a4@<X8>)
{
  int v10 = _ViewInputs.viewPhase.getter();
  int v9 = _ViewInputs.transform.getter();
  int v8 = _ViewInputs.position.getter();
  int v6 = _ViewInputs.size.getter();
  swift_getKeyPath();
  int v4 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *(_DWORD *)a4 = v10;
  *(_DWORD *)(a4 + 4) = v9;
  *(_DWORD *)(a4 + 8) = v8;
  *(_DWORD *)(a4 + 12) = v6;
  *(_DWORD *)(a4 + 16) = a1;
  *(_DWORD *)(a4 + 20) = v4;
  *(_DWORD *)(a4 + 24) = a2;
  *(void *)(a4 + 28) = a3;
  *(void *)(a4 + 40) = 0;
  *(void *)(a4 + 48) = 0;
  *(unsigned char *)(a4 + 56) = 1;
  *(void *)(a4 + 64) = MEMORY[0x1E4FBC868];
  return result;
}

uint64_t outlined destroy of ScrollStateRequestTransform(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PreferenceKeys and conformance PreferenceKeys;
  if (!lazy protocol witness table cache variable for type PreferenceKeys and conformance PreferenceKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreferenceKeys and conformance PreferenceKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazyCollectedPlacements and conformance LazyCollectedPlacements()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyCollectedPlacements and conformance LazyCollectedPlacements;
  if (!lazy protocol witness table cache variable for type LazyCollectedPlacements and conformance LazyCollectedPlacements)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyCollectedPlacements and conformance LazyCollectedPlacements);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LazyCollectedPlacements and conformance LazyCollectedPlacements;
  if (!lazy protocol witness table cache variable for type LazyCollectedPlacements and conformance LazyCollectedPlacements)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyCollectedPlacements and conformance LazyCollectedPlacements);
  }
  return result;
}

void type metadata accessor for External<[Scrollable]>()
{
  if (!lazy cache variable for type metadata for External<[Scrollable]>)
  {
    type metadata accessor for [ScrollStateRequest](255, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E4F3F3B0], MEMORY[0x1E4FBB320]);
    unint64_t v0 = type metadata accessor for External();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<[Scrollable]>);
    }
  }
}

double specialized LazySubviewPlacements.init(layout:cache:inputs:)@<D0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v29 = *MEMORY[0x1E4F4E7A0];
  uint64_t v6 = *(void *)(MEMORY[0x1E4F1DB20] + 16);
  uint64_t v7 = *(void *)(MEMORY[0x1E4F1DB20] + 24);
  long long v30 = *MEMORY[0x1E4F1DB20];
  int v26 = _ViewInputs.size.getter();
  int v25 = _ViewInputs.position.getter();
  int v24 = _ViewInputs.transform.getter();
  int v23 = _ViewInputs.environment.getter();
  unint64_t v8 = _ViewInputs.weakScrollable.getter();
  int v9 = v8;
  uint64_t v10 = *(void *)a3;
  unint64_t v22 = HIDWORD(v8);
  int v11 = *(_DWORD *)(a3 + 8);
  uint64_t v12 = *(void *)(a3 + 16);
  int v14 = *(_DWORD *)(a3 + 24);
  int v13 = *(_DWORD *)(a3 + 28);
  int v20 = *(_DWORD *)(a3 + 36);
  int v21 = *(_DWORD *)(a3 + 32);
  uint64_t v15 = *(void *)(a3 + 40);
  int v19 = _GraphInputs.scrollPhaseState.getter();
  int v16 = _ViewInputs.containerSize.getter();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined release of _ViewInputs(a3);
  *(_DWORD *)a4 = a1;
  *(_DWORD *)(a4 + 4) = v26;
  *(_DWORD *)(a4 + 8) = v25;
  *(_DWORD *)(a4 + 12) = v24;
  *(_DWORD *)(a4 + 16) = v23;
  *(_DWORD *)(a4 + 20) = a2;
  *(_DWORD *)(a4 + 24) = v9;
  *(_DWORD *)(a4 + 28) = v22;
  *(_DWORD *)(a4 + 32) = v19;
  *(_DWORD *)(a4 + 36) = v16;
  *(_DWORD *)(a4 + 40) = v29;
  *(void *)(a4 + 48) = v10;
  *(_DWORD *)(a4 + 56) = v11;
  *(void *)(a4 + 64) = v12;
  *(_DWORD *)(a4 + 72) = v14;
  *(_DWORD *)(a4 + 76) = v13;
  *(_DWORD *)(a4 + 80) = v21;
  *(_DWORD *)(a4 + 84) = v20;
  *(void *)(a4 + 88) = v15;
  *(_OWORD *)(a4 + 96) = v30;
  *(void *)(a4 + 112) = v6;
  *(void *)(a4 + 120) = v7;
  uint64_t v17 = MEMORY[0x1E4FBC860];
  *(void *)(a4 + 128) = MEMORY[0x1E4FBC860];
  *(void *)(a4 + 136) = v17;
  *(_DWORD *)(a4 + 144) = 0;
  *(unsigned char *)(a4 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(a4 + 272) = 0u;
  *(_OWORD *)(a4 + 288) = 0u;
  *(_OWORD *)(a4 + 240) = 0u;
  *(_OWORD *)(a4 + 256) = 0u;
  *(_OWORD *)(a4 + 208) = 0u;
  *(_OWORD *)(a4 + 224) = 0u;
  *(_OWORD *)(a4 + 176) = 0u;
  *(_OWORD *)(a4 + 192) = 0u;
  *(_OWORD *)(a4 + 160) = 0u;
  *(unsigned char *)(a4 + 304) = 1;
  *(void *)(a4 + 312) = 0;
  *(void *)(a4 + 320) = 0;
  *(unsigned char *)(a4 + 328) = 1;
  return result;
}

unint64_t lazy protocol witness table accessor for type UpdateViewCache and conformance UpdateViewCache()
{
  unint64_t result = lazy protocol witness table cache variable for type UpdateViewCache and conformance UpdateViewCache;
  if (!lazy protocol witness table cache variable for type UpdateViewCache and conformance UpdateViewCache)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UpdateViewCache and conformance UpdateViewCache);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type External<ScrollableCollection> and conformance External<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type External<ScrollableCollection> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<ScrollableCollection> and conformance External<A>)
  {
    type metadata accessor for [ScrollStateRequest](255, &lazy cache variable for type metadata for External<ScrollableCollection>, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection, MEMORY[0x1E4F40678], MEMORY[0x1E4F4E778]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<ScrollableCollection> and conformance External<A>);
  }
  return result;
}

void type metadata accessor for [ScrollStateRequest](uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = type metadata accessor for CVarArg(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t outlined init with copy of ScrollStateRequestTransform(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t lazy protocol witness table accessor for type ScrollStateRequestTransform and conformance ScrollStateRequestTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollStateRequestTransform and conformance ScrollStateRequestTransform;
  if (!lazy protocol witness table cache variable for type ScrollStateRequestTransform and conformance ScrollStateRequestTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollStateRequestTransform and conformance ScrollStateRequestTransform);
  }
  return result;
}

uint64_t type metadata accessor for TupleCommandContent.MakeList()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI28NavigationDestinationOutputsVG_AF011PreferencesH0Vs5NeverOTg503_s7d9UI26Tuplefg69V17_makeDestinations7content6inputs8resolvedyAA11_GraphValueVyACyxGG_q40_ViewInputsVAA01_dE10CollectionVztFZAA18iH61VAA0deQ0Vcfu_33_52f1b6677f90efccc4a0b5c00fa35ed1AsQTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v11;
    int v4 = (_DWORD *)(a1 + 40);
    do
    {
      uint64_t v5 = *((void *)v4 - 1);
      int v6 = *v4;
      unint64_t v8 = *(void *)(v11 + 16);
      unint64_t v7 = *(void *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
      }
      *(void *)(v11 + 16) = v8 + 1;
      uint64_t v9 = v11 + 16 * v8;
      *(void *)(v9 + 32) = v5;
      *(_DWORD *)(v9 + 40) = v6;
      v4 += 4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type CommandsDescriptor and conformance CommandsDescriptor()
{
  unint64_t result = lazy protocol witness table cache variable for type CommandsDescriptor and conformance CommandsDescriptor;
  if (!lazy protocol witness table cache variable for type CommandsDescriptor and conformance CommandsDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommandsDescriptor and conformance CommandsDescriptor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CommandsDescriptor and conformance CommandsDescriptor;
  if (!lazy protocol witness table cache variable for type CommandsDescriptor and conformance CommandsDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommandsDescriptor and conformance CommandsDescriptor);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>(255, &lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, &lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>);
    lazy protocol witness table accessor for type _VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root> and conformance <> _VariadicView.Tree<A, B>(&lazy protocol witness table cache variable for type _VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root> and conformance <> _VariadicView.Tree<A, B>, &lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, &lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, &lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>);
    lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _PreferenceTransformModifier<NavigationDestinationKey> and conformance _PreferenceTransformModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t specialized closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  return specialized closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_1ED48E478, (uint64_t)closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply, (void (*)(void))partial apply for closure #1 in closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:), (uint64_t (*)(uint64_t))partial apply for specialized closure #2 in closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:));
}

{
  return specialized closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_1ED48E0B8, (uint64_t)closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply, (void (*)(void))partial apply for closure #1 in closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:), (uint64_t (*)(uint64_t))partial apply for specialized closure #2 in closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:));
}

{
  return specialized closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_1ED48E810, (uint64_t)closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply, (void (*)(void))partial apply for closure #1 in closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:), (uint64_t (*)(uint64_t))partial apply for specialized closure #2 in closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:));
}

uint64_t specialized closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, void (*a9)(void), uint64_t (*a10)(uint64_t))
{
  uint64_t v70 = a7;
  uint64_t v71 = a8;
  uint64_t v67 = a6;
  uint64_t v80 = a4;
  uint64_t v81 = a5;
  uint64_t v78 = a1;
  uint64_t v79 = a3;
  uint64_t v77 = a10;
  uint64_t v76 = a9;
  memcpy(v120, a2, sizeof(v120));
  uint64_t v11 = outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)a2);
  unint64_t v87 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v11);
  unint64_t v13 = v12;
  int v15 = v14;
  uint64_t v16 = 0;
  int v18 = v17 & 1;
  v132[392] = v17 & 1;
  char v119 = v17 & 1;
  char v118 = 0;
  uint64_t v68 = (char *)v106 + 8;
  unint64_t v69 = &v98;
  int v19 = 3;
  while (1)
  {
    if ((v18 & 1) != 0 && v15 >= 2u)
    {
      LOBYTE(v15) = 2;
LABEL_26:
      memcpy(v99, v120, sizeof(v99));
      unint64_t v100 = v87;
      char v101 = v119;
      *(_DWORD *)uint64_t v102 = *(_DWORD *)v92;
      *(_DWORD *)&v102[3] = *(_DWORD *)&v92[3];
      unint64_t v103 = v13;
      char v104 = v15;
      return outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v99);
    }
    memcpy(v121, v120, sizeof(v121));
    outlined init with take of NavigationState.Base(v121, v131);
    outlined init with take of NavigationState.Base(v131, v132);
    int v20 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v132);
    int v85 = v19;
    int v86 = v18;
    if (v20)
    {
      uint64_t v82 = v16;
      LODWORD(v83) = v15;
      unint64_t v84 = v13;
      if (v20 == 1)
      {
        int v21 = (const void *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v132);
        memcpy(v99, v21, 0x188uLL);
        memcpy(v127, v21, 0x12BuLL);
        uint64_t v22 = *(void *)&v99[19];
        long long v75 = v99[23];
        uint64_t v23 = *(void *)&v99[24];
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v121);
        outlined release of NavigationState.StackContent((uint64_t)v131, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
        uint64_t v65 = v23;
        long long v64 = v75;
        outlined consume of ResolvedNavigationDestinations?(v22);
        char v24 = v86;
        if (v86 & 1 | (v87 != 0)) {
          goto LABEL_33;
        }
        specialized NavigationState.StackContent.Views.ViewsSequence.view(at:state:baseDepth:)(0, 0, v84, v83, (uint64_t)v127, 0, (uint64_t)&v105);
        outlined release of NavigationColumnState((uint64_t *)v99);
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v121);
        uint64_t v16 = v82;
      }
      else
      {
        uint64_t v39 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v132);
        uint64_t v40 = *(void *)v39;
        uint64_t v41 = *(void *)(v39 + 8);
        uint64_t v42 = *(void *)(v39 + 16);
        uint64_t v43 = *(void *)(v39 + 24);
        uint64_t v44 = *(void *)(v39 + 32);
        uint64_t v45 = *(void *)(v39 + 40);
        uint64_t v47 = *(void *)(v39 + 48);
        uint64_t v46 = *(void *)(v39 + 56);
        uint64_t v48 = *(void *)(v39 + 64);
        int v49 = *(unsigned __int16 *)(v39 + 72);
        v129[0] = v41;
        v129[1] = v42;
        v129[2] = v43;
        v129[3] = v44;
        v129[4] = v45;
        v129[5] = v47;
        v129[6] = v46;
        v129[7] = v48;
        __int16 v130 = v49;
        if (v86) {
          goto LABEL_32;
        }
        unint64_t v50 = v87;
        if ((v87 & 0x8000000000000000) != 0) {
          goto LABEL_29;
        }
        if (*(void *)(v40 + 16) < v87) {
          goto LABEL_30;
        }
        int v73 = v49;
        uint64_t v74 = v48;
        *(void *)&long long v75 = v46;
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v121);
        outlined release of NavigationState.StackContent((uint64_t)v131, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
        uint64_t v51 = swift_bridgeObjectRetain();
        uint64_t v52 = specialized Collection<>.collapsedItemCount<A>(within:splitViewState:)(v51, (uint64_t)v129, 0, (2 * v50) | 1);
        swift_bridgeObjectRelease();
        if (v50 >= *(void *)(v40 + 16)) {
          goto LABEL_31;
        }
        memcpy(v128, (const void *)(v40 + 304 * v50 + 32), 0x12BuLL);
        outlined retain of NavigationColumnState(v128);
        swift_bridgeObjectRelease();
        uint64_t v72 = v47;
        specialized NavigationState.StackContent.Views.ViewsSequence.view(at:state:baseDepth:)(v50, 0, v84, v83, (uint64_t)v128, v52, (uint64_t)&v105);
        outlined consume of NavigationSplitViewState?(v41, v42, v43, v44, v45, v72, v75, v74, v73, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
        outlined release of NavigationColumnState(v128);
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v121);
        uint64_t v16 = v82;
        char v24 = v86;
      }
    }
    else
    {
      uint64_t v25 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v132);
      uint64_t v26 = *(void *)v25;
      uint64_t v27 = *(unsigned __int8 *)(v25 + 8);
      uint64_t v28 = *(void *)(v25 + 16);
      uint64_t v29 = v121[51];
      outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v121);
      uint64_t v30 = static HorizontalAlignment.center.getter();
      if (!*(void *)(v29 + 16)) {
        goto LABEL_28;
      }
      uint64_t v31 = v30;
      outlined init with copy of _VariadicView_Children(v29 + 32, (uint64_t)v69);
      v96[0] = v31;
      v96[1] = 0;
      char v97 = 1;
      v122[0] = 0;
      v122[1] = v26;
      char v123 = v27;
      uint64_t v124 = v28;
      uint64_t v125 = 0;
      BOOL v126 = v27 == 3;
      *(void *)&long long v83 = v121[49];
      int v32 = v27 >= 3 ? 3 : v27;
      LODWORD(v84) = v32;
      outlined init with copy of UINavigationPresentationAdaptor?((uint64_t)v96, (uint64_t)v99, (uint64_t (*)(void))type metadata accessor for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
      *(void *)&v99[5] = 0;
      *((void *)&v99[5] + 1) = v26;
      *(void *)&v99[6] = v27;
      *((void *)&v99[6] + 1) = v28;
      *(void *)&v99[7] = 0;
      BYTE8(v99[7]) = v27 == 3;
      BYTE9(v99[7]) = 1;
      uint64_t v33 = swift_allocObject();
      *(unsigned char *)(v33 + 16) = 1;
      outlined init with copy of UINavigationPresentationAdaptor?((uint64_t)v99, (uint64_t)v92, (uint64_t (*)(void))type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>);
      uint64_t v94 = v71;
      uint64_t v95 = v33;
      outlined destroy of UINavigationPresentationAdaptor?((uint64_t)v99, (uint64_t (*)(void))type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>);
      ((void (*)(uint64_t *__return_ptr, void *))v83)(&v88, v122);
      char v24 = v86;
      char v34 = v88;
      long long v83 = v89;
      uint64_t v35 = v90;
      uint64_t v36 = v91;
      outlined init with copy of UINavigationPresentationAdaptor?((uint64_t)v92, (uint64_t)v99, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>);
      LOBYTE(v99[9]) = v34;
      *(_OWORD *)((char *)&v99[9] + 8) = v83;
      *((void *)&v99[10] + 1) = v35;
      *(void *)&v99[11] = v36;
      outlined destroy of UINavigationPresentationAdaptor?((uint64_t)v92, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>);
      type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>();
      lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>> and conformance <> ModifiedContent<A, B>);
      uint64_t v37 = AnyView.init<A>(_:)();
      outlined destroy of UINavigationPresentationAdaptor?((uint64_t)v96, (uint64_t (*)(void))type metadata accessor for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
      uint64_t v38 = v68;
      *((void *)v68 + 4) = 0;
      _OWORD *v38 = 0u;
      v38[1] = 0u;
      char v107 = 2;
      outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v121);
      *(void *)&long long v105 = v37;
      BYTE8(v105) = v84;
      *(void *)&v106[0] = 0;
    }
    uint64_t v53 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(v87, v24 & 1);
    unint64_t v87 = v53;
    char v119 = v54 & 1;
    long long v110 = v106[1];
    long long v111 = v106[2];
    char v112 = v107;
    long long v108 = v105;
    long long v109 = v106[0];
    if (__OFADD__(v16, 1)) {
      break;
    }
    int v18 = v54;
    unint64_t v13 = v55;
    int v15 = v56;
    long long v115 = v110;
    long long v116 = v111;
    char v117 = v112;
    long long v114 = v109;
    long long v113 = v108;
    v99[0] = v108;
    v99[1] = v109;
    v99[2] = v110;
    v99[3] = v111;
    LOBYTE(v99[4]) = v112;
    v92[0] = BYTE8(v108);
    uint64_t v93 = v109;
    MEMORY[0x1F4188790](v53);
    uint64_t v65 = (uint64_t)v99;
    uint64_t v66 = v79;
    MEMORY[0x1F4188790](v57);
    v63[2] = v80;
    v63[3] = v58;
    v63[4] = v81;
    uint64_t v63[5] = v16;
    NavigationHostingControllerCache_UIKit.Source.ensureViewController(at:forPushing:configureExisting:makeNew:)(v92, 0, v76, v59, v77, (void (*)(void))v63);
    int v60 = BYTE8(v99[0]);
    if (v85 || BYTE8(v99[0]) == 3)
    {
      outlined destroy of NavigationState.StackContent.PositionedView((uint64_t)v99);
    }
    else
    {
      outlined destroy of NavigationState.StackContent.PositionedView((uint64_t)v99);
      if (v60 == 2)
      {
        uint64_t v61 = v67;
        *uint64_t v67 = v16;
        *((unsigned char *)v61 + 8) = 0;
      }
    }
    ++v16;
    int v19 = v60;
    if (v118) {
      goto LABEL_26;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  LODWORD(v66) = 0;
  uint64_t v65 = 879;
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static ResolvedNavigationDestinations.prepareToPresent<A, B>(view:at:shouldUpdateDestinations:applying:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *((unsigned __int8 *)a2 + 16);
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[4];
  char v10 = a2[5] & 1;
  outlined init with copy of _VariadicView.Tree<_VStackLayout, _VariadicView_Children>(a1, (uint64_t)v23);
  uint64_t v24 = v5;
  uint64_t v25 = v6;
  uint64_t v26 = v7;
  uint64_t v27 = v8;
  uint64_t v28 = v9;
  char v29 = v10;
  char v30 = 1;
  uint64_t v11 = swift_allocObject();
  *(unsigned char *)(v11 + 16) = 1;
  outlined init with copy of ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>((uint64_t)v23, (uint64_t)v20);
  int v21 = closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply;
  uint64_t v22 = v11;
  outlined destroy of ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>((uint64_t)v23);
  a3(&v16, a2);
  LOBYTE(a3) = v16;
  long long v15 = v17;
  uint64_t v12 = v18;
  uint64_t v13 = v19;
  outlined init with copy of ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>((uint64_t)v20, (uint64_t)v23);
  char v31 = (char)a3;
  long long v32 = v15;
  uint64_t v33 = v12;
  uint64_t v34 = v13;
  outlined destroy of ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>((uint64_t)v20);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>> and conformance <> ModifiedContent<A, B>);
  return AnyView.init<A>(_:)();
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
    type metadata accessor for ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  if (!*a2)
  {
    type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>(255, a3, a4);
    type metadata accessor for ReadDestinationsModifier<ResolvedNavigationDestinations>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<NavigationDestinationKey>, (uint64_t)&type metadata for NavigationDestinationKey, (uint64_t)&protocol witness table for NavigationDestinationKey, MEMORY[0x1E4F41108]);
    unint64_t v5 = type metadata accessor for ModifiedContent();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined destroy of ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    type metadata accessor for _VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>(255, a3);
    type metadata accessor for ReadDestinationsModifier<ResolvedNavigationDestinations>(255, &lazy cache variable for type metadata for ReadDestinationsModifier<ResolvedNavigationDestinations>, (uint64_t)&type metadata for ResolvedNavigationDestinations, (uint64_t)&protocol witness table for ResolvedNavigationDestinations, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ReadDestinationsModifier);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t outlined destroy of _VariadicView.Tree<_VStackLayout, _VariadicView_Children>(uint64_t a1)
{
  type metadata accessor for _VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>(0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of _VariadicView.Tree<_VStackLayout, _VariadicView_Children>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>(0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for _VariadicView.Tree();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t *partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result[3];
  if (result[4]) {
    char v3 = 1;
  }
  else {
    char v3 = 2;
  }
  uint64_t v4 = *((unsigned __int8 *)result + 16);
  uint64_t v6 = *result;
  uint64_t v5 = result[1];
  *(unsigned char *)a2 = v3;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v2;
  *(void *)(a2 + 32) = v6;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v2 = *result;
  char v3 = result[1];
  if (*result) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = 2;
  }
  uint64_t v5 = *((unsigned __int8 *)result + 16);
  uint64_t v6 = result[3];
  *(unsigned char *)a2 = v4;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v6;
  *(void *)(a2 + 32) = v2;
  return result;
}

uint64_t specialized NavigationState.StackContent.Views.ViewsSequence.view(at:state:baseDepth:)@<X0>(int64_t a1@<X0>, char a2@<W1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8 = v7;
  uint64_t v126 = a7;
  uint64_t v11 = *(uint64_t (**)(void, void, void, void, void, void))(a5 + 16);
  unsigned int v125 = *(unsigned __int8 *)(a5 + 24);
  uint64_t v12 = *(void *)(a5 + 32);
  uint64_t v13 = *(void *)(a5 + 168);
  if (a4)
  {
    if (a4 == 1)
    {
      if ((v13 & 0x8000000000000000) == 0)
      {
        uint64_t v14 = *(void *)(a5 + 32);
        uint64_t v15 = *(void *)(a5 + 176);
        uint64_t v16 = *(uint64_t (**)(void))(*(void *)v13 + 88);
        uint64_t v124 = swift_retain();
        uint64_t v17 = v16();
        uint64_t v18 = v17 + 1;
        if (!__OFADD__(v17, 1))
        {
          unint64_t v19 = v18 + a3;
          if (!__OFADD__(v18, a3))
          {
            if ((a3 & 0x8000000000000000) == 0)
            {
              if (*(void *)(v15 + 16) > a3)
              {
                unint64_t v20 = a6 + v19;
                if (!__OFADD__(a6, v19))
                {
                  int v21 = (void *)(v15 + 56 * a3);
                  uint64_t v22 = v21[4];
                  *(void *)&long long v148 = v19;
                  *((void *)&v148 + 1) = v11;
                  char v23 = v125;
                  LOBYTE(v149) = v125;
                  *((void *)&v149 + 1) = v14;
                  *(void *)&long long v150 = v20;
                  BYTE8(v150) = 1;
                  uint64_t v24 = v7[49];
                  uint64_t v25 = v8[50];
                  uint64_t v26 = v126;
                  long long v122 = *(uint64_t (**)(long long *, uint64_t, uint64_t, uint64_t, unint64_t))(*(void *)v22 + 104);
                  unint64_t v123 = v19;
                  type metadata accessor for ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>();
                  uint64_t v28 = v27;
                  unint64_t v29 = lazy protocol witness table accessor for type ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>> and conformance <> ModifiedContent<A, B>();
                  swift_retain();
                  long long v122 = (uint64_t (*)(long long *, uint64_t, uint64_t, uint64_t, unint64_t))v122(&v148, v24, v25, v28, v29);
                  swift_release();
                  if (v125 >= 3) {
                    char v23 = 3;
                  }
                  uint64_t v30 = v21[5];
                  uint64_t v31 = v21[6];
                  uint64_t v32 = v21[7];
                  uint64_t v33 = v21[8];
                  swift_retain();
                  swift_retain();
                  outlined copy of Text.LineStyle?(v31, v32);
                  swift_retain();
                  swift_release();
                  swift_retain();
                  outlined copy of Text.LineStyle?(v31, v32);
                  swift_release();
                  swift_release();
                  outlined consume of Text.LineStyle?(v31, v32);
                  uint64_t result = swift_release();
                  *(void *)(v126 + 32) = v31;
                  *(void *)(v26 + 40) = v32;
                  *(void *)(v26 + 48) = v33;
                  *(unsigned char *)(v26 + 64) = 1;
                  *(void *)uint64_t v26 = v122;
                  *(unsigned char *)(v26 + 8) = v23;
                  *(void *)(v26 + 16) = v123;
                  *(void *)(v26 + 24) = v30;
                  return result;
                }
                goto LABEL_56;
              }
LABEL_55:
              __break(1u);
LABEL_56:
              __break(1u);
              goto LABEL_57;
            }
LABEL_54:
            __break(1u);
            goto LABEL_55;
          }
          goto LABEL_52;
        }
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
      goto LABEL_63;
    }
    uint64_t v54 = *(void *)(a5 + 112);
    uint64_t v55 = *(void *)(a5 + 120);
    int v56 = *(uint64_t (**)(long long *, uint64_t, uint64_t, uint64_t, unint64_t))(a5 + 128);
    uint64_t v57 = *(void *)(a5 + 136);
    uint64_t v58 = *(void *)(a5 + 160);
    if (v13 < 0)
    {
      if ((v54 & 0xF000000000000007) == 0xF000000000000007)
      {
        if (a2)
        {
LABEL_60:
          __break(1u);
          goto LABEL_63;
        }
        uint64_t v59 = v126;
        uint64_t v60 = a6;
        uint64_t v61 = (uint64_t)v11;
        unsigned __int8 v62 = v125;
        uint64_t v63 = *(void *)(a5 + 32);
LABEL_26:
        return specialized NavigationState.StackContent.Views.ViewsSequence.nonReplacedRoot(stateIndex:baseDepth:key:isStacked:)(a1, v60, v61, v62, v63, v59);
      }
      if (v54 < 0)
      {
        uint64_t v97 = *(void *)(a5 + 112);
        uint64_t v98 = *(void *)(a5 + 120);
        uint64_t v99 = *(void *)(a5 + 128);
        uint64_t v100 = *(void *)(a5 + 136);
        unint64_t v123 = *(void *)(a5 + 144);
        uint64_t v124 = v57;
        uint64_t v121 = v58;
        long long v122 = v56;
        outlined copy of NavigationColumnState.ReplacedRoot?(v97, v98, v99, v100);
        goto LABEL_46;
      }
    }
    else
    {
      if ((v54 & 0xF000000000000007) == 0xF000000000000007)
      {
        if (a2)
        {
LABEL_58:
          __break(1u);
          goto LABEL_59;
        }
        uint64_t v59 = v126;
        uint64_t v60 = a6;
        uint64_t v61 = (uint64_t)v11;
        unsigned __int8 v62 = v125;
        uint64_t v63 = *(void *)(a5 + 32);
        goto LABEL_26;
      }
      if (v54 < 0)
      {
        uint64_t v64 = *(void *)(a5 + 112);
        uint64_t v65 = *(void *)(a5 + 120);
        uint64_t v66 = *(void *)(a5 + 128);
        uint64_t v67 = *(void *)(a5 + 136);
        unint64_t v123 = *(void *)(a5 + 144);
        uint64_t v124 = v57;
        uint64_t v121 = v58;
        long long v122 = v56;
        outlined copy of NavigationColumnState.ReplacedRoot(v64, v65, v66, v67);
LABEL_46:
        uint64_t v101 = v54 & 0x7FFFFFFFFFFFFFFFLL;
        *(void *)&long long v148 = 0;
        uint64_t v102 = v11;
        *((void *)&v148 + 1) = v11;
        unsigned int v103 = v125;
        LOBYTE(v149) = v125;
        *((void *)&v149 + 1) = v12;
        *(void *)&long long v150 = a6;
        BYTE8(v150) = v13 >= 0;
        uint64_t v104 = swift_allocObject();
        memcpy((void *)(v104 + 16), v8, 0x1A0uLL);
        *(void *)(v104 + 432) = v102;
        *(unsigned char *)(v104 + 440) = v103;
        *(void *)(v104 + 448) = v12;
        long long v105 = *(uint64_t (**)(long long *, uint64_t (*)(), uint64_t, uint64_t, unint64_t))(*(void *)v101 + 104);
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v8);
        type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, StackItemModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>, ReplacedRootDismissModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>);
        uint64_t v107 = v106;
        unint64_t v108 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>();
        uint64_t v109 = v105(&v148, partial apply for specialized closure #1 in NavigationState.StackContent.Views.ViewsSequence.replacedRootModifier(key:), v104, v107, v108);
        swift_release();
        if (v103 >= 3) {
          char v110 = 3;
        }
        else {
          char v110 = v103;
        }
        swift_retain();
        uint64_t v111 = v124;
        outlined copy of Text.LineStyle?((uint64_t)v122, v124);
        swift_release();
        swift_release();
        outlined consume of Text.LineStyle?((uint64_t)v122, v124);
        uint64_t result = swift_release();
        uint64_t v112 = v126;
        *(void *)(v126 + 32) = v122;
        *(void *)(v112 + 40) = v111;
        *(void *)(v112 + 48) = v123;
        *(unsigned char *)(v112 + 64) = 1;
        *(void *)uint64_t v112 = v109;
        *(unsigned char *)(v112 + 8) = v110;
        *(void *)(v112 + 16) = 0;
        *(void *)(v112 + 24) = v55;
        return result;
      }
    }
    uint64_t v120 = v11;
    if (a2)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    outlined init with take of NavigationState.Base(v8, v138);
    outlined init with take of NavigationState.Base(v138, &v148);
    int v68 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)&v148);
    if (v68 == 1)
    {
      uint64_t v69 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)&v148);
      uint64_t v70 = *(uint64_t (**)(long long *, uint64_t, uint64_t, uint64_t, unint64_t))(v69 + 304);
      if (!v70 || a1) {
        goto LABEL_63;
      }
      uint64_t v71 = *(void *)(v69 + 384);
      unint64_t v73 = *(void *)(v69 + 344);
      uint64_t v72 = *(void *)(v69 + 352);
      int v114 = *(unsigned __int8 *)(v69 + 376);
      uint64_t v74 = *(void *)(v69 + 360);
      uint64_t v115 = *(void *)(v69 + 368);
      uint64_t v75 = *(void *)(v69 + 320);
      uint64_t v116 = *(void *)(v69 + 328);
      uint64_t v117 = v71;
      uint64_t v76 = *(void *)(v69 + 336);
      unint64_t v123 = v73;
      uint64_t v124 = v76;
      uint64_t v77 = *(uint64_t (**)(void, void, void, void, void, void))(v69 + 312);
      uint64_t v119 = v72;
      swift_retain();
      uint64_t v118 = v74;
      swift_retain();
      swift_bridgeObjectRetain();
      long long v122 = v70;
    }
    else
    {
      if (v68 != 2)
      {
        _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)&v148);
        goto LABEL_63;
      }
      uint64_t v78 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)&v148);
      if (a1 <= 0)
      {
LABEL_63:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      if ((unint64_t)(a1 - 1) >= *(void *)(*(void *)v78 + 16))
      {
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      uint64_t v79 = *(void *)v78 + 304 * (a1 - 1);
      uint64_t v80 = *(uint64_t (**)(long long *, uint64_t, uint64_t, uint64_t, unint64_t))(v79 + 224);
      uint64_t v77 = *(uint64_t (**)(void, void, void, void, void, void))(v79 + 232);
      uint64_t v75 = *(void *)(v79 + 240);
      uint64_t v81 = *(void *)(v79 + 248);
      uint64_t v82 = *(void *)(v79 + 256);
      uint64_t v83 = *(void *)(v79 + 272);
      unint64_t v123 = *(void *)(v79 + 264);
      uint64_t v124 = v82;
      uint64_t v84 = *(void *)(v79 + 280);
      uint64_t v115 = *(void *)(v79 + 288);
      uint64_t v116 = v81;
      int v114 = *(unsigned __int8 *)(v79 + 296);
      uint64_t v117 = *(void *)(v79 + 304);
      uint64_t v119 = v83;
      swift_retain();
      uint64_t v118 = v84;
      swift_retain();
      long long v122 = v80;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
    uint64_t v121 = v75;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    int v85 = v77;
    v113[1] = v77;
    uint64_t v86 = swift_allocObject();
    memcpy((void *)(v86 + 16), v8, 0x1A0uLL);
    unint64_t v87 = v120;
    *(void *)(v86 + 432) = v120;
    unsigned int v88 = v125;
    *(unsigned char *)(v86 + 440) = v125;
    *(void *)(v86 + 448) = v12;
    v143[0] = 0;
    v143[1] = v87;
    char v144 = v88;
    uint64_t v145 = v12;
    uint64_t v146 = a6;
    BOOL v147 = v13 >= 0;
    uint64_t v127 = v122;
    uint64_t v128 = v85;
    uint64_t v129 = v121;
    uint64_t v130 = v116;
    uint64_t v131 = v124;
    unint64_t v132 = v123;
    uint64_t v133 = v119;
    uint64_t v134 = v118;
    uint64_t v135 = v115;
    char v136 = v114;
    uint64_t v137 = v117;
    uint64_t v120 = *(uint64_t (**)(void, void, void, void, void, void))(*(void *)v54 + 168);
    outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v8);
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, StackItemModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>, ReplacedRootDismissModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>);
    uint64_t v90 = v89;
    unsigned int v91 = v88;
    unint64_t v92 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>();
    swift_retain();
    uint64_t v93 = v120(&v127, partial apply for specialized closure #1 in NavigationState.StackContent.Views.ViewsSequence.replacedRootModifier(key:), v86, v143, v90, v92);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v94 = swift_bridgeObjectRelease();
    if (v91 >= 3) {
      char v95 = 3;
    }
    else {
      char v95 = v91;
    }
    uint64_t v96 = v126;
    (*(void (**)(uint64_t))(*(void *)v54 + 96))(v94);
    uint64_t result = swift_release();
    *(unsigned char *)(v126 + 64) = 0;
    *(void *)uint64_t v96 = v93;
    *(unsigned char *)(v96 + 8) = v95;
    *(void *)(v96 + 16) = 0;
  }
  else
  {
    if (v13 < 0) {
      goto LABEL_63;
    }
    long long v35 = *(_OWORD *)(a5 + 240);
    long long v150 = *(_OWORD *)(a5 + 224);
    long long v151 = v35;
    long long v152 = *(_OWORD *)(a5 + 256);
    uint64_t v153 = *(void *)(a5 + 272);
    long long v36 = *(_OWORD *)(a5 + 208);
    long long v148 = *(_OWORD *)(a5 + 192);
    long long v149 = v36;
    unint64_t v37 = a3 + 1;
    if (__OFADD__(a3, 1)) {
      goto LABEL_51;
    }
    if (__OFADD__(a6, v37))
    {
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    uint64_t v39 = v7[49];
    uint64_t v38 = v7[50];
    uint64_t v127 = (uint64_t (*)(long long *, uint64_t, uint64_t, uint64_t, unint64_t))(a3 + 1);
    uint64_t v128 = v11;
    LOBYTE(v129) = v125;
    uint64_t v130 = v12;
    uint64_t v131 = a6 + v37;
    LOBYTE(v132) = 1;
    long long v40 = *(_OWORD *)(a5 + 224);
    long long v41 = *(_OWORD *)(a5 + 256);
    long long v140 = *(_OWORD *)(a5 + 240);
    long long v141 = v41;
    uint64_t v142 = *(void *)(a5 + 272);
    long long v42 = *(_OWORD *)(a5 + 208);
    v138[0] = *(_OWORD *)(a5 + 192);
    v138[1] = v42;
    long long v139 = v40;
    uint64_t v43 = *(uint64_t (**)(void *, _OWORD *, uint64_t, uint64_t, unint64_t, uint64_t (**)(void, void, void, void, void), uint64_t, unint64_t))(*(void *)v13 + 152);
    swift_retain();
    outlined retain of ResolvedNavigationDestinations((uint64_t)&v148);
    type metadata accessor for ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>();
    uint64_t v45 = v44;
    unint64_t v46 = lazy protocol witness table accessor for type ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>> and conformance <> ModifiedContent<A, B>();
    uint64_t v124 = v43(v143, v138, v39, v38, a3, (uint64_t (**)(void, void, void, void, void))&v127, v45, v46);
    outlined release of ResolvedNavigationDestinations((uint64_t)&v148);
    if (v125 >= 3) {
      char v47 = 3;
    }
    else {
      char v47 = v125;
    }
    uint64_t v48 = v126;
    int v49 = __swift_project_boxed_opaque_existential_1(v143, v145);
    double v50 = MEMORY[0x1F4188790](v49);
    (*(void (**)(char *, double))(v52 + 16))((char *)v113 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0), v50);
    AnyHashable.init<A>(_:)();
    swift_release();
    BYTE8(v139) = 0;
    *(void *)uint64_t v48 = v124;
    *(unsigned char *)(v48 + 8) = v47;
    *(void *)(v48 + 16) = v37;
    outlined init with take of NavigationStackViewSource((uint64_t)v138, v48 + 24);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v143);
  }
  return result;
}

{
  void *v7;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(long long *, uint64_t, uint64_t, ValueMetadata *, unint64_t);
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  unsigned int v35;
  long long v36;
  long long v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  long long v42;
  long long v43;
  long long v44;
  uint64_t (*v45)(void *, _OWORD *, uint64_t, uint64_t, unint64_t, unint64_t *, ValueMetadata *, unint64_t);
  unint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  void *v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t (*v72)(void, void, void, void, void, void);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(void, void, void, void, void, void);
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(long long *, uint64_t (*)(), uint64_t, uint64_t, unint64_t);
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t (*v111)(void, void, void, void, void, void);
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t (*v130)(void, void, void, void, void, void);
  _OWORD v131[2];
  long long v132;
  long long v133;
  long long v134;
  uint64_t v135;
  void v136[2];
  char v137;
  uint64_t v138;
  uint64_t v139;
  BOOL v140;
  long long v141;
  long long v142;
  long long v143;
  long long v144;
  long long v145;
  uint64_t v146;
  uint64_t vars8;

  uint64_t v119 = a7;
  char v10 = *(void *)(a5 + 16);
  uint64_t v11 = *(unsigned __int8 *)(a5 + 24);
  uint64_t v12 = *(void *)(a5 + 32);
  uint64_t v13 = *(void *)(a5 + 168);
  if (a4)
  {
    if (a4 == 1)
    {
      LODWORD(v117) = *(unsigned __int8 *)(a5 + 24);
      if ((v13 & 0x8000000000000000) == 0)
      {
        uint64_t v118 = v7;
        uint64_t v14 = v12;
        uint64_t v15 = *(void *)(a5 + 176);
        uint64_t v16 = *(uint64_t (**)(uint64_t))(*(void *)v13 + 88);
        uint64_t v17 = swift_retain();
        uint64_t v18 = v16(v17);
        unint64_t v19 = v18 + 1;
        if (!__OFADD__(v18, 1))
        {
          unint64_t v20 = v19 + a3;
          if (!__OFADD__(v19, a3))
          {
            if ((a3 & 0x8000000000000000) == 0)
            {
              if (*(void *)(v15 + 16) > a3)
              {
                int v21 = a6 + v20;
                if (!__OFADD__(a6, v20))
                {
                  uint64_t v22 = (void *)(v15 + 56 * a3);
                  char v23 = v22[4];
                  *(void *)&long long v141 = v20;
                  *((void *)&v141 + 1) = v10;
                  uint64_t v115 = v13;
                  uint64_t v24 = v117;
                  LOBYTE(v142) = v117;
                  *((void *)&v142 + 1) = v14;
                  *(void *)&uint64_t v143 = v21;
                  BYTE8(v143) = 1;
                  uint64_t v25 = v119;
                  uint64_t v26 = v118[49];
                  uint64_t v27 = v118[50];
                  uint64_t v28 = *(uint64_t (**)(long long *, uint64_t, uint64_t, ValueMetadata *, unint64_t))(*(void *)v23 + 104);
                  uint64_t v118 = (void *)v20;
                  unint64_t v29 = lazy protocol witness table accessor for type StackItemModifier and conformance StackItemModifier();
                  swift_retain();
                  uint64_t v116 = v28(&v141, v26, v27, &type metadata for StackItemModifier, v29);
                  swift_release();
                  if (v117 >= 3) {
                    uint64_t v24 = 3;
                  }
                  uint64_t v30 = v22[5];
                  uint64_t v31 = v22[6];
                  uint64_t v32 = v22[7];
                  uint64_t v33 = v22[8];
                  swift_retain();
                  swift_retain();
                  outlined copy of Text.LineStyle?(v31, v32);
                  swift_retain();
                  swift_release();
                  swift_retain();
                  outlined copy of Text.LineStyle?(v31, v32);
                  swift_release();
                  swift_release();
                  outlined consume of Text.LineStyle?(v31, v32);
                  uint64_t result = swift_release();
                  *(void *)(v119 + 32) = v31;
                  *(void *)(v25 + 40) = v32;
                  *(void *)(v25 + 48) = v33;
                  *(unsigned char *)(v25 + 64) = 1;
                  *(void *)uint64_t v25 = v116;
                  *(unsigned char *)(v25 + 8) = v24;
                  *(void *)(v25 + 16) = v118;
                  *(void *)(v25 + 24) = v30;
                  return result;
                }
                goto LABEL_56;
              }
LABEL_55:
              __break(1u);
LABEL_56:
              __break(1u);
              goto LABEL_57;
            }
LABEL_54:
            __break(1u);
            goto LABEL_55;
          }
          goto LABEL_52;
        }
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
      goto LABEL_63;
    }
    uint64_t v55 = *(void *)(a5 + 112);
    int v56 = *(void *)(a5 + 120);
    uint64_t v57 = *(void *)(a5 + 128);
    uint64_t v58 = *(void *)(a5 + 136);
    uint64_t v59 = *(void *)(a5 + 144);
    uint64_t v60 = *(void *)(a5 + 160);
    if (v13 < 0)
    {
      if ((v55 & 0xF000000000000007) == 0xF000000000000007)
      {
        if (a2)
        {
LABEL_60:
          __break(1u);
          goto LABEL_63;
        }
        uint64_t v61 = v119;
        unsigned __int8 v62 = a6;
        uint64_t v63 = *(void *)(a5 + 16);
        uint64_t v64 = *(unsigned char *)(a5 + 24);
        uint64_t v65 = *(void *)(a5 + 32);
LABEL_26:
        return specialized NavigationState.StackContent.Views.ViewsSequence.nonReplacedRoot(stateIndex:baseDepth:key:isStacked:)(a1, v62, v63, v64, v65, v61);
      }
      if (v55 < 0)
      {
        char v95 = *(void *)(a5 + 112);
        uint64_t v96 = *(void *)(a5 + 120);
        uint64_t v97 = *(void *)(a5 + 128);
        uint64_t v117 = *(void *)(a5 + 136);
        uint64_t v118 = (void *)v57;
        uint64_t v115 = v60;
        uint64_t v116 = v59;
        outlined copy of NavigationColumnState.ReplacedRoot?(v95, v96, v97, v58);
        goto LABEL_46;
      }
    }
    else
    {
      if ((v55 & 0xF000000000000007) == 0xF000000000000007)
      {
        if (a2)
        {
LABEL_58:
          __break(1u);
          goto LABEL_59;
        }
        uint64_t v61 = v119;
        unsigned __int8 v62 = a6;
        uint64_t v63 = *(void *)(a5 + 16);
        uint64_t v64 = *(unsigned char *)(a5 + 24);
        uint64_t v65 = *(void *)(a5 + 32);
        goto LABEL_26;
      }
      if (v55 < 0)
      {
        uint64_t v66 = *(void *)(a5 + 112);
        uint64_t v67 = *(void *)(a5 + 120);
        int v68 = *(void *)(a5 + 128);
        uint64_t v117 = *(void *)(a5 + 136);
        uint64_t v118 = (void *)v57;
        uint64_t v115 = v60;
        uint64_t v116 = v59;
        outlined copy of NavigationColumnState.ReplacedRoot(v66, v67, v68, v58);
LABEL_46:
        *(void *)&long long v141 = 0;
        *((void *)&v141 + 1) = v10;
        LOBYTE(v142) = v11;
        *((void *)&v142 + 1) = v12;
        *(void *)&uint64_t v143 = a6;
        BYTE8(v143) = v13 >= 0;
        uint64_t v98 = swift_allocObject();
        memcpy((void *)(v98 + 16), v7, 0x1A0uLL);
        *(void *)(v98 + 432) = v10;
        *(unsigned char *)(v98 + 440) = v11;
        *(void *)(v98 + 448) = v12;
        uint64_t v99 = *(uint64_t (**)(long long *, uint64_t (*)(), uint64_t, uint64_t, unint64_t))(*(void *)(v55 & 0x7FFFFFFFFFFFFFFFLL) + 104);
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v7);
        type metadata accessor for ReadDestinationsModifier<ResolvedNavigationDestinations>(0, &lazy cache variable for type metadata for ModifiedContent<StackItemModifier, ReplacedRootDismissModifier>, (uint64_t)&type metadata for StackItemModifier, (uint64_t)&type metadata for ReplacedRootDismissModifier, MEMORY[0x1E4F3FBA0]);
        uint64_t v101 = v100;
        uint64_t v102 = lazy protocol witness table accessor for type ModifiedContent<StackItemModifier, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>();
        unsigned int v103 = v99(&v141, partial apply for specialized closure #1 in NavigationState.StackContent.Views.ViewsSequence.replacedRootModifier(key:), v98, v101, v102);
        swift_release();
        if (v11 >= 3) {
          uint64_t v104 = 3;
        }
        else {
          uint64_t v104 = v11;
        }
        swift_retain();
        long long v105 = v117;
        outlined copy of Text.LineStyle?((uint64_t)v118, v117);
        swift_release();
        swift_release();
        outlined consume of Text.LineStyle?((uint64_t)v118, v117);
        uint64_t result = swift_release();
        uint64_t v106 = v119;
        *(void *)(v119 + 32) = v118;
        *(void *)(v106 + 40) = v105;
        *(void *)(v106 + 48) = v116;
        *(unsigned char *)(v106 + 64) = 1;
        *(void *)uint64_t v106 = v103;
        *(unsigned char *)(v106 + 8) = v104;
        *(void *)(v106 + 16) = 0;
        *(void *)(v106 + 24) = v56;
        return result;
      }
    }
    if (a2)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    outlined init with take of NavigationState.Base(v7, v131);
    outlined init with take of NavigationState.Base(v131, &v141);
    uint64_t v69 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)&v141);
    if (v69 == 1)
    {
      uint64_t v70 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)&v141);
      uint64_t v71 = *(void *)(v70 + 304);
      if (!v71 || a1) {
        goto LABEL_63;
      }
      uint64_t v72 = *(uint64_t (**)(void, void, void, void, void, void))(v70 + 384);
      uint64_t v74 = *(void *)(v70 + 344);
      unint64_t v73 = *(void *)(v70 + 352);
      unint64_t v108 = *(unsigned __int8 *)(v70 + 376);
      uint64_t v75 = *(void *)(v70 + 360);
      uint64_t v109 = *(void *)(v70 + 368);
      char v110 = *(void *)(v70 + 328);
      uint64_t v111 = v72;
      uint64_t v115 = *(void *)(v70 + 336);
      uint64_t v116 = v74;
      uint64_t v76 = *(void *)(v70 + 320);
      uint64_t v117 = *(void *)(v70 + 312);
      uint64_t v118 = (void *)v76;
      long long v113 = v73;
      swift_retain();
      uint64_t v112 = v75;
      swift_retain();
      swift_bridgeObjectRetain();
      int v114 = v71;
    }
    else
    {
      if (v69 != 2)
      {
        _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)&v141);
        goto LABEL_63;
      }
      uint64_t v77 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)&v141);
      if (a1 <= 0)
      {
LABEL_63:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      if ((unint64_t)(a1 - 1) >= *(void *)(*(void *)v77 + 16))
      {
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      uint64_t v78 = *(void *)v77 + 304 * (a1 - 1);
      uint64_t v79 = *(void *)(v78 + 224);
      uint64_t v80 = *(void *)(v78 + 240);
      uint64_t v117 = *(void *)(v78 + 232);
      uint64_t v118 = (void *)v80;
      uint64_t v81 = *(void *)(v78 + 248);
      uint64_t v83 = *(void *)(v78 + 264);
      uint64_t v82 = *(void *)(v78 + 272);
      uint64_t v115 = *(void *)(v78 + 256);
      uint64_t v116 = v83;
      uint64_t v84 = *(void *)(v78 + 280);
      uint64_t v109 = *(void *)(v78 + 288);
      char v110 = v81;
      unint64_t v108 = *(unsigned __int8 *)(v78 + 296);
      uint64_t v111 = *(uint64_t (**)(void, void, void, void, void, void))(v78 + 304);
      long long v113 = v82;
      swift_retain();
      uint64_t v112 = v84;
      swift_retain();
      int v114 = v79;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
    int v85 = (uint64_t)v118;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v86 = swift_allocObject();
    memcpy((void *)(v86 + 16), v7, 0x1A0uLL);
    *(void *)(v86 + 432) = v10;
    *(unsigned char *)(v86 + 440) = v11;
    *(void *)(v86 + 448) = v12;
    v136[0] = 0;
    v136[1] = v10;
    uint64_t v137 = v11;
    uint64_t v138 = v12;
    long long v139 = a6;
    long long v140 = v13 >= 0;
    uint64_t v120 = v114;
    uint64_t v121 = v117;
    long long v122 = v85;
    unint64_t v123 = v110;
    uint64_t v124 = v115;
    unsigned int v125 = v116;
    uint64_t v126 = v113;
    uint64_t v127 = v112;
    uint64_t v128 = v109;
    uint64_t v129 = v108;
    uint64_t v130 = v111;
    unint64_t v87 = *(uint64_t (**)(void, void, void, void, void, void))(*(void *)v55 + 168);
    char v110 = *(void *)v55 + 168;
    uint64_t v111 = v87;
    outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v7);
    type metadata accessor for ReadDestinationsModifier<ResolvedNavigationDestinations>(0, &lazy cache variable for type metadata for ModifiedContent<StackItemModifier, ReplacedRootDismissModifier>, (uint64_t)&type metadata for StackItemModifier, (uint64_t)&type metadata for ReplacedRootDismissModifier, MEMORY[0x1E4F3FBA0]);
    uint64_t v89 = v88;
    uint64_t v90 = lazy protocol witness table accessor for type ModifiedContent<StackItemModifier, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>();
    swift_retain();
    unsigned int v91 = v111(&v120, partial apply for specialized closure #1 in NavigationState.StackContent.Views.ViewsSequence.replacedRootModifier(key:), v86, v136, v89, v90);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v92 = swift_bridgeObjectRelease();
    if (v11 >= 3) {
      uint64_t v93 = 3;
    }
    else {
      uint64_t v93 = v11;
    }
    uint64_t v94 = v119;
    (*(void (**)(uint64_t))(*(void *)v55 + 96))(v92);
    uint64_t result = swift_release();
    *(unsigned char *)(v119 + 64) = 0;
    *(void *)uint64_t v94 = v91;
    *(unsigned char *)(v94 + 8) = v93;
    *(void *)(v94 + 16) = 0;
  }
  else
  {
    if (v13 < 0) {
      goto LABEL_63;
    }
    long long v35 = *(unsigned __int8 *)(a5 + 24);
    long long v36 = *(_OWORD *)(a5 + 240);
    uint64_t v143 = *(_OWORD *)(a5 + 224);
    char v144 = v36;
    uint64_t v145 = *(_OWORD *)(a5 + 256);
    uint64_t v146 = *(void *)(a5 + 272);
    unint64_t v37 = *(_OWORD *)(a5 + 208);
    long long v141 = *(_OWORD *)(a5 + 192);
    uint64_t v142 = v37;
    uint64_t v38 = a3 + 1;
    if (__OFADD__(a3, 1)) {
      goto LABEL_51;
    }
    if (__OFADD__(a6, v38))
    {
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    long long v40 = v7[49];
    uint64_t v39 = v7[50];
    uint64_t v120 = a3 + 1;
    uint64_t v121 = v10;
    long long v41 = v35;
    LOBYTE(v122) = v35;
    unint64_t v123 = v12;
    uint64_t v124 = a6 + v38;
    LOBYTE(v125) = 1;
    long long v42 = *(_OWORD *)(a5 + 224);
    uint64_t v43 = *(_OWORD *)(a5 + 256);
    uint64_t v133 = *(_OWORD *)(a5 + 240);
    uint64_t v134 = v43;
    uint64_t v135 = *(void *)(a5 + 272);
    uint64_t v44 = *(_OWORD *)(a5 + 208);
    v131[0] = *(_OWORD *)(a5 + 192);
    v131[1] = v44;
    unint64_t v132 = v42;
    uint64_t v45 = *(uint64_t (**)(void *, _OWORD *, uint64_t, uint64_t, unint64_t, unint64_t *, ValueMetadata *, unint64_t))(*(void *)v13 + 152);
    swift_retain();
    outlined retain of ResolvedNavigationDestinations((uint64_t)&v141);
    unint64_t v46 = lazy protocol witness table accessor for type StackItemModifier and conformance StackItemModifier();
    char v47 = v45(v136, v131, v40, v39, a3, &v120, &type metadata for StackItemModifier, v46);
    outlined release of ResolvedNavigationDestinations((uint64_t)&v141);
    if (v41 >= 3) {
      uint64_t v48 = 3;
    }
    else {
      uint64_t v48 = v41;
    }
    int v49 = v119;
    double v50 = __swift_project_boxed_opaque_existential_1(v136, v138);
    uint64_t v51 = MEMORY[0x1F4188790](v50);
    (*(void (**)(char *, double))(v53 + 16))((char *)&v107 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0), v51);
    AnyHashable.init<A>(_:)();
    swift_release();
    BYTE8(v132) = 0;
    *(void *)int v49 = v47;
    *(unsigned char *)(v49 + 8) = v48;
    *(void *)(v49 + 16) = v38;
    outlined init with take of NavigationStackViewSource((uint64_t)v131, v49 + 24);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v136);
  }
  return result;
}

uint64_t specialized Collection<>.collapsedItemCount<A>(within:splitViewState:)(uint64_t result, uint64_t a2, int64_t a3, unint64_t a4)
{
  unint64_t v96 = a4 >> 1;
  if ((uint64_t)(a4 >> 1) < a3) {
    goto LABEL_136;
  }
  if (a4 >> 1 == a3)
  {
    return 0;
  }
  else
  {
    uint64_t v5 = a3;
    if ((uint64_t)v96 <= a3) {
      goto LABEL_139;
    }
    if (a3 < 0)
    {
LABEL_140:
      __break(1u);
    }
    else
    {
      uint64_t v81 = *(void *)(result + 16);
      if (v96 <= v81 && a4 >= 2 && v81 > (unint64_t)a3)
      {
        uint64_t v4 = 0;
        uint64_t v78 = result + 32;
        uint64_t v73 = result;
        uint64_t v6 = result + 304 * a3;
        while (1)
        {
          uint64_t v100 = v4;
          uint64_t v101 = v6;
          uint64_t v7 = v5 + 1;
          uint64_t v8 = (const void *)(v6 + 32);
          uint64_t result = (uint64_t)memcpy(__dst, (const void *)(v6 + 32), 0x12BuLL);
          int v9 = LOBYTE(__dst[37]);
          uint64_t v10 = __dst[14];
          uint64_t v11 = __dst[15];
          uint64_t v12 = __dst[16];
          uint64_t v13 = __dst[17];
          uint64_t v14 = __dst[18];
          uint64_t v15 = __dst[21];
          uint64_t v16 = 0;
          switch(LOBYTE(__dst[3]))
          {
            case 1:
              uint64_t v95 = __dst[19];
              uint64_t v86 = __dst[20];
              uint64_t v91 = __dst[22];
              uint64_t result = _s7SwiftUI15NavigationStateVSgWObTm_0(a2, (uint64_t)&v112, &lazy cache variable for type metadata for NavigationSplitViewState?, (uint64_t)&type metadata for NavigationSplitViewState);
              uint64_t v40 = v91;
              uint64_t v41 = v95;
              uint64_t v42 = v15;
              uint64_t v43 = v14;
              uint64_t v44 = v13;
              uint64_t v45 = v11;
              uint64_t v46 = v12;
              if ((void)v113 == 1) {
                goto LABEL_28;
              }
              v118[1] = v114;
              v118[2] = v115;
              __int16 v119 = v116;
              long long v117 = v112;
              v118[0] = v113;
              _s7SwiftUI15NavigationStateVSgWObTm_0((uint64_t)&v119 + 1, (uint64_t)&v120, &lazy cache variable for type metadata for NavigationSplitViewColumn?, (uint64_t)&type metadata for NavigationSplitViewColumn);
              _s7SwiftUI15NavigationStateVSgWObTm_0((uint64_t)&v120, (uint64_t)v133, &lazy cache variable for type metadata for NavigationSplitViewColumn?, (uint64_t)&type metadata for NavigationSplitViewColumn);
              if (v133[0] - 1 < 2)
              {
                _s7SwiftUI15NavigationStateVSgWObTm_0((uint64_t)v118 + 9, (uint64_t)&v121, &lazy cache variable for type metadata for NavigationSplitViewColumn?, (uint64_t)&type metadata for NavigationSplitViewColumn);
                _s7SwiftUI15NavigationStateVSgWObTm_0((uint64_t)&v121, (uint64_t)&v132, &lazy cache variable for type metadata for NavigationSplitViewColumn?, (uint64_t)&type metadata for NavigationSplitViewColumn);
                uint64_t v7 = v5 + 1;
                goto LABEL_12;
              }
              if (!v133[0])
              {
                _s7SwiftUI15NavigationStateVSgWObTm_0((uint64_t)v118 + 9, (uint64_t)&v121, &lazy cache variable for type metadata for NavigationSplitViewColumn?, (uint64_t)&type metadata for NavigationSplitViewColumn);
                _s7SwiftUI15NavigationStateVSgWObTm_0((uint64_t)&v121, (uint64_t)&v132, &lazy cache variable for type metadata for NavigationSplitViewColumn?, (uint64_t)&type metadata for NavigationSplitViewColumn);
                uint64_t result = (uint64_t)outlined retain of NavigationColumnState(__dst);
                uint64_t v7 = v5 + 1;
                goto LABEL_75;
              }
              _s7SwiftUI15NavigationStateVSgWObTm_0((uint64_t)v118 + 9, (uint64_t)&v121, &lazy cache variable for type metadata for NavigationSplitViewColumn?, (uint64_t)&type metadata for NavigationSplitViewColumn);
              uint64_t result = _s7SwiftUI15NavigationStateVSgWObTm_0((uint64_t)&v121, (uint64_t)&v132, &lazy cache variable for type metadata for NavigationSplitViewColumn?, (uint64_t)&type metadata for NavigationSplitViewColumn);
              uint64_t v7 = v5 + 1;
              uint64_t v46 = v12;
              uint64_t v45 = v11;
              uint64_t v44 = v13;
              uint64_t v43 = v14;
              uint64_t v42 = v15;
              uint64_t v41 = v95;
              uint64_t v40 = v91;
              if (v132 && v132 != 3) {
                goto LABEL_12;
              }
LABEL_28:
              unint64_t v47 = v5 - 1;
              if (__OFSUB__(v5, 1)) {
                goto LABEL_134;
              }
              if (v9)
              {
                uint64_t v97 = v5 - 1;
                uint64_t result = (uint64_t)outlined retain of NavigationColumnState(__dst);
LABEL_31:
                unint64_t v47 = v97;
                if (v97 < 0) {
                  goto LABEL_78;
                }
                char v48 = 1;
                goto LABEL_33;
              }
              if (v42 < 0)
              {
                uint64_t result = (uint64_t)outlined retain of NavigationColumnState(__dst);
                if ((v47 & 0x8000000000000000) != 0) {
                  goto LABEL_75;
                }
                char v48 = 0;
              }
              else
              {
                uint64_t v97 = v5 - 1;
                uint64_t v62 = v46;
                uint64_t v75 = v46;
                uint64_t v77 = v44;
                uint64_t v63 = v45;
                uint64_t v64 = v44;
                uint64_t v80 = v43;
                uint64_t v89 = v42;
                uint64_t v65 = v41;
                uint64_t v66 = v40;
                outlined retain of NavigationColumnState(__dst);
                outlined copy of NavigationColumnState.ColumnContent(v10, v63, v62, v64, v80, v65, v86, v89);
                outlined retain of NavigationColumnState(__dst);
                outlined copy of NavigationColumnState.ColumnContent(v10, v63, v75, v77, v80, v95, v86, v89);
                swift_release();
                outlined consume of NavigationColumnState.ReplacedRoot?(v10, v63, v75, v77);
                uint64_t v82 = *(void *)(v66 + 16);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                outlined consume of NavigationColumnState.ColumnContent(v10, v63, v75, v77, v80, v95, v86, v89);
                uint64_t result = (uint64_t)outlined release of NavigationColumnState(__dst);
                if (v82) {
                  goto LABEL_31;
                }
                outlined copy of NavigationColumnState.ColumnContent(v10, v63, v75, v77, v80, v95, v86, v89);
                outlined retain of NavigationColumnState(__dst);
                outlined copy of NavigationColumnState.ColumnContent(v10, v63, v75, v77, v80, v95, v86, v89);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v67 = outlined consume of NavigationColumnState.ReplacedRoot?(v10, v63, v75, v77);
                uint64_t v83 = (*(unsigned __int8 (**)(uint64_t))(*(void *)v89 + 80))(v67);
                swift_release();
                outlined consume of NavigationColumnState.ColumnContent(v10, v63, v75, v77, v80, v95, v86, v89);
                uint64_t result = (uint64_t)outlined release of NavigationColumnState(__dst);
                unint64_t v47 = v5 - 1;
                if (v97 < 0)
                {
                  if ((v83 & 1) == 0) {
                    goto LABEL_78;
                  }
                  goto LABEL_75;
                }
                char v48 = v83 ^ 1;
              }
LABEL_33:
              if (v47 >= v81) {
                goto LABEL_138;
              }
              uint64_t v49 = v78 + 304 * v47;
              uint64_t v50 = *(void *)(v49 + 48);
              if (v50)
              {
                int v51 = *(_DWORD *)(v49 + 80);
                uint64_t v52 = *(void *)(v49 + 72);
                LODWORD(v102[0]) = *(void *)(v49 + 40);
                *((void *)&v102[0] + 1) = v50;
                v102[1] = *(_OWORD *)(v49 + 56);
                *(void *)&v102[2] = v52;
                DWORD2(v102[2]) = v51;
                uint64_t result = NavigationListState.hasNonEmptySelection.getter();
                if (v48 & 1) != 0 || (result) {
                  goto LABEL_78;
                }
              }
              else if (v48)
              {
                goto LABEL_78;
              }
LABEL_75:
              if (v7 >= v81)
              {
LABEL_109:
                uint64_t result = (uint64_t)outlined release of NavigationColumnState(__dst);
              }
              else
              {
                if (v7 < 0) {
                  goto LABEL_142;
                }
                memcpy(v124, (const void *)(v101 + 336), 0x12BuLL);
                switch(LOBYTE(v124[3]))
                {
                  case 1:
                    outlined retain of NavigationColumnState(v124);
                    if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(a2, (uint64_t)v124, v7, v73))goto LABEL_80; {
                    if (v5 + 2 >= v81)
                    }
                      goto LABEL_108;
                    memcpy(v125, (const void *)(v101 + 640), 0x12BuLL);
                    switch(LOBYTE(v125[3]))
                    {
                      case 1:
                        outlined retain of NavigationColumnState(v125);
                        if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(a2, (uint64_t)v125, v5 + 2, v73))goto LABEL_87; {
                        if (v5 + 3 >= v81)
                        }
                          goto LABEL_107;
                        memcpy(v126, (const void *)(v101 + 944), 0x12BuLL);
                        switch(LOBYTE(v126[3]))
                        {
                          case 1:
                            outlined retain of NavigationColumnState(v126);
                            if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(a2, (uint64_t)v126, v5 + 3, v73))goto LABEL_93; {
                            if (v5 + 4 >= v81)
                            }
                              goto LABEL_106;
                            break;
                          case 2:
                            outlined retain of NavigationColumnState(v126);
                            char v68 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(a2, (uint64_t)v126, v5 + 3, v73);
                            outlined release of NavigationColumnState(v126);
                            goto LABEL_89;
                          case 5:
                            goto LABEL_107;
                          default:
                            goto LABEL_87;
                        }
                        break;
                      case 2:
                        outlined retain of NavigationColumnState(v125);
                        char v68 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(a2, (uint64_t)v125, v5 + 2, v73);
LABEL_89:
                        outlined release of NavigationColumnState(v125);
                        goto LABEL_82;
                      case 5:
                        goto LABEL_108;
                      default:
                        goto LABEL_80;
                    }
                    break;
                  case 2:
                    outlined retain of NavigationColumnState(v124);
                    char v68 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(a2, (uint64_t)v124, v7, v73);
LABEL_82:
                    outlined release of NavigationColumnState(v124);
                    uint64_t result = (uint64_t)outlined release of NavigationColumnState(__dst);
                    if ((v68 & 1) == 0) {
                      goto LABEL_110;
                    }
                    goto LABEL_12;
                  case 5:
                    goto LABEL_109;
                  default:
                    goto LABEL_78;
                }
                memcpy(v127, (const void *)(v101 + 1248), 0x12BuLL);
                switch(LOBYTE(v127[3]))
                {
                  case 1:
                    outlined retain of NavigationColumnState(v127);
                    if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(a2, (uint64_t)v127, v5 + 4, v73))
                    {
                      outlined release of NavigationColumnState(v127);
LABEL_93:
                      outlined release of NavigationColumnState(v126);
LABEL_87:
                      outlined release of NavigationColumnState(v125);
LABEL_80:
                      outlined release of NavigationColumnState(v124);
                      goto LABEL_78;
                    }
                    if (v5 + 5 >= v81)
                    {
                      outlined release of NavigationColumnState(v127);
LABEL_106:
                      outlined release of NavigationColumnState(v126);
LABEL_107:
                      outlined release of NavigationColumnState(v125);
LABEL_108:
                      outlined release of NavigationColumnState(v124);
                      goto LABEL_109;
                    }
                    memcpy(v128, (const void *)(v101 + 1552), 0x12BuLL);
                    switch(LOBYTE(v128[3]))
                    {
                      case 1:
                        outlined retain of NavigationColumnState(v128);
                        if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(a2, (uint64_t)v128, v5 + 5, v73))
                        {
                          outlined release of NavigationColumnState(v128);
                          goto LABEL_104;
                        }
                        if (v5 + 6 >= v81)
                        {
                          outlined release of NavigationColumnState(v128);
                          goto LABEL_121;
                        }
                        memcpy(v129, (const void *)(v101 + 1856), sizeof(v129));
                        switch(v129[24])
                        {
                          case 1:
                            outlined retain of NavigationColumnState((uint64_t *)v129);
                            if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(a2, (uint64_t)v129, v5 + 6, v73))
                            {
                              outlined release of NavigationColumnState((uint64_t *)v129);
                              goto LABEL_119;
                            }
                            if (v5 + 7 >= v81)
                            {
                              outlined release of NavigationColumnState((uint64_t *)v129);
                              goto LABEL_129;
                            }
                            char v70 = specialized static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(v5 + 7, v73, a2);
                            outlined release of NavigationColumnState((uint64_t *)v129);
                            outlined release of NavigationColumnState(v128);
                            outlined release of NavigationColumnState(v127);
                            break;
                          case 2:
                            outlined retain of NavigationColumnState((uint64_t *)v129);
                            char v72 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(a2, (uint64_t)v129, v5 + 6, v73);
                            outlined release of NavigationColumnState((uint64_t *)v129);
                            outlined release of NavigationColumnState(v128);
                            outlined release of NavigationColumnState(v127);
                            char v70 = v72 ^ 1;
                            break;
                          case 5:
LABEL_129:
                            outlined release of NavigationColumnState(v128);
                            outlined release of NavigationColumnState(v127);
                            char v70 = 1;
                            break;
                          default:
LABEL_119:
                            outlined release of NavigationColumnState(v128);
                            outlined release of NavigationColumnState(v127);
                            char v70 = 0;
                            break;
                        }
                        outlined release of NavigationColumnState(v126);
                        break;
                      case 2:
                        outlined retain of NavigationColumnState(v128);
                        char v71 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(a2, (uint64_t)v128, v5 + 5, v73);
                        outlined release of NavigationColumnState(v128);
                        outlined release of NavigationColumnState(v127);
                        outlined release of NavigationColumnState(v126);
                        char v70 = v71 ^ 1;
                        break;
                      case 5:
LABEL_121:
                        outlined release of NavigationColumnState(v127);
                        outlined release of NavigationColumnState(v126);
                        char v70 = 1;
                        break;
                      default:
LABEL_104:
                        outlined release of NavigationColumnState(v127);
                        outlined release of NavigationColumnState(v126);
                        char v70 = 0;
                        break;
                    }
                    outlined release of NavigationColumnState(v125);
LABEL_100:
                    outlined release of NavigationColumnState(v124);
                    uint64_t result = (uint64_t)outlined release of NavigationColumnState(__dst);
                    if ((v70 & 1) == 0) {
                      goto LABEL_12;
                    }
                    break;
                  case 2:
                    outlined retain of NavigationColumnState(v127);
                    char v69 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(a2, (uint64_t)v127, v5 + 4, v73);
                    outlined release of NavigationColumnState(v127);
                    outlined release of NavigationColumnState(v126);
                    outlined release of NavigationColumnState(v125);
                    char v70 = v69 ^ 1;
                    goto LABEL_100;
                  case 5:
                    goto LABEL_106;
                  default:
                    goto LABEL_93;
                }
              }
LABEL_110:
              uint64_t v16 = 0;
              goto LABEL_111;
            case 2:
              uint64_t v85 = __dst[20];
              uint64_t v88 = __dst[21];
              uint64_t v94 = __dst[19];
              uint64_t v90 = __dst[22];
              uint64_t result = _s7SwiftUI15NavigationStateVSgWObTm_0(a2, (uint64_t)&v104, &lazy cache variable for type metadata for NavigationSplitViewState?, (uint64_t)&type metadata for NavigationSplitViewState);
              uint64_t v25 = v90;
              uint64_t v26 = v94;
              uint64_t v27 = v88;
              uint64_t v28 = v14;
              uint64_t v29 = v13;
              uint64_t v30 = v11;
              uint64_t v31 = v12;
              if ((void)v105 == 1) {
                goto LABEL_18;
              }
              v110[1] = v106;
              void v110[2] = v107;
              __int16 v111 = v108;
              long long v109 = v104;
              v110[0] = v105;
              _s7SwiftUI15NavigationStateVSgWObTm_0((uint64_t)&v111 + 1, (uint64_t)&v122, &lazy cache variable for type metadata for NavigationSplitViewColumn?, (uint64_t)&type metadata for NavigationSplitViewColumn);
              _s7SwiftUI15NavigationStateVSgWObTm_0((uint64_t)&v122, (uint64_t)&v131, &lazy cache variable for type metadata for NavigationSplitViewColumn?, (uint64_t)&type metadata for NavigationSplitViewColumn);
              if (v131 == 2) {
                int v53 = 1;
              }
              else {
                int v53 = 2;
              }
              if (v131 == 3) {
                int v54 = 0;
              }
              else {
                int v54 = v53;
              }
              _s7SwiftUI15NavigationStateVSgWObTm_0((uint64_t)v110 + 9, (uint64_t)&v123, &lazy cache variable for type metadata for NavigationSplitViewColumn?, (uint64_t)&type metadata for NavigationSplitViewColumn);
              uint64_t result = _s7SwiftUI15NavigationStateVSgWObTm_0((uint64_t)&v123, (uint64_t)&v130, &lazy cache variable for type metadata for NavigationSplitViewColumn?, (uint64_t)&type metadata for NavigationSplitViewColumn);
              if (v54)
              {
                BOOL v55 = v54 == 1;
                uint64_t v7 = v5 + 1;
                if (!v55) {
                  goto LABEL_110;
                }
                goto LABEL_12;
              }
              uint64_t v7 = v5 + 1;
              uint64_t v31 = v12;
              uint64_t v30 = v11;
              uint64_t v29 = v13;
              uint64_t v28 = v14;
              uint64_t v27 = v88;
              uint64_t v25 = v90;
              uint64_t v26 = v94;
              if (v130 == 2) {
                goto LABEL_12;
              }
LABEL_18:
              BOOL v32 = __OFSUB__(v5, 1);
              unint64_t v33 = v5 - 1;
              if (v32) {
                goto LABEL_135;
              }
              if (v9)
              {
                uint64_t result = (uint64_t)outlined retain of NavigationColumnState(__dst);
LABEL_21:
                if ((v33 & 0x8000000000000000) != 0)
                {
LABEL_78:
                  outlined release of NavigationColumnState(__dst);
                  goto LABEL_12;
                }
                int v34 = 1;
LABEL_23:
                if (v33 >= v81) {
                  goto LABEL_137;
                }
                uint64_t v35 = v78 + 304 * v33;
                uint64_t v36 = *(void *)(v35 + 48);
                if (v36)
                {
                  int v37 = *(_DWORD *)(v35 + 80);
                  uint64_t v38 = *(void *)(v35 + 72);
                  LODWORD(v102[0]) = *(void *)(v35 + 40);
                  *((void *)&v102[0] + 1) = v36;
                  v102[1] = *(_OWORD *)(v35 + 56);
                  *(void *)&v102[2] = v38;
                  DWORD2(v102[2]) = v37;
                  int v39 = NavigationListState.hasNonEmptySelection.getter();
                  uint64_t result = (uint64_t)outlined release of NavigationColumnState(__dst);
                  if (((v34 | v39) & 1) == 0) {
                    goto LABEL_110;
                  }
                }
                else
                {
                  uint64_t result = (uint64_t)outlined release of NavigationColumnState(__dst);
                  if ((v34 & 1) == 0) {
                    goto LABEL_110;
                  }
                }
                goto LABEL_12;
              }
              if (v27 < 0)
              {
                if ((v33 & 0x8000000000000000) != 0) {
                  goto LABEL_110;
                }
                uint64_t result = (uint64_t)outlined retain of NavigationColumnState(__dst);
                int v34 = 0;
                goto LABEL_23;
              }
              uint64_t v56 = v31;
              uint64_t v74 = v31;
              uint64_t v76 = v29;
              uint64_t v57 = v30;
              uint64_t v58 = v29;
              uint64_t v79 = v28;
              uint64_t v59 = v26;
              uint64_t v60 = v25;
              outlined retain of NavigationColumnState(__dst);
              outlined copy of NavigationColumnState.ColumnContent(v10, v57, v56, v58, v79, v59, v85, v88);
              outlined retain of NavigationColumnState(__dst);
              outlined copy of NavigationColumnState.ColumnContent(v10, v57, v74, v76, v79, v94, v85, v88);
              swift_release();
              outlined consume of NavigationColumnState.ReplacedRoot?(v10, v57, v74, v76);
              uint64_t v98 = *(void *)(v60 + 16);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              outlined consume of NavigationColumnState.ColumnContent(v10, v57, v74, v76, v79, v94, v85, v88);
              uint64_t result = (uint64_t)outlined release of NavigationColumnState(__dst);
              if (v98) {
                goto LABEL_21;
              }
              outlined copy of NavigationColumnState.ColumnContent(v10, v57, v74, v76, v79, v94, v85, v88);
              outlined retain of NavigationColumnState(__dst);
              outlined copy of NavigationColumnState.ColumnContent(v10, v57, v74, v76, v79, v94, v85, v88);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v61 = outlined consume of NavigationColumnState.ReplacedRoot?(v10, v57, v74, v76);
              int v99 = (*(uint64_t (**)(uint64_t))(*(void *)v88 + 80))(v61);
              swift_release();
              outlined consume of NavigationColumnState.ColumnContent(v10, v57, v74, v76, v79, v94, v85, v88);
              uint64_t result = (uint64_t)outlined release of NavigationColumnState(__dst);
              if ((v33 & 0x8000000000000000) == 0)
              {
                int v34 = v99 ^ 1;
                goto LABEL_23;
              }
              uint64_t result = (uint64_t)outlined release of NavigationColumnState(__dst);
              if (v99) {
                goto LABEL_110;
              }
LABEL_12:
              uint64_t result = (uint64_t)memcpy(v102, v8, 0x12BuLL);
              uint64_t v17 = *((void *)&v102[10] + 1);
              if ((*((void *)&v102[10] + 1) & 0x8000000000000000) != 0)
              {
                uint64_t v16 = 1;
              }
              else
              {
                long long v18 = v102[7];
                long long v19 = v102[8];
                long long v20 = v102[9];
                uint64_t v21 = *(void *)&v102[10];
                uint64_t v22 = *(void *)&v102[11];
                unint64_t v92 = *(uint64_t (**)(uint64_t))(**((void **)&v102[10] + 1) + 88);
                outlined retain of NavigationColumnState((uint64_t *)v102);
                uint64_t v87 = v21;
                outlined copy of NavigationColumnState.ColumnContent(v18, *((uint64_t *)&v18 + 1), v19, *((uint64_t *)&v19 + 1), v20, *((uint64_t *)&v20 + 1), v21, v17);
                swift_retain();
                swift_bridgeObjectRetain();
                uint64_t v23 = swift_bridgeObjectRetain();
                uint64_t result = v92(v23);
                uint64_t v24 = result + 1;
                if (__OFADD__(result, 1)) {
                  goto LABEL_132;
                }
                uint64_t v93 = *(void *)(v22 + 16);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_release();
                outlined consume of NavigationColumnState.ColumnContent(v18, *((uint64_t *)&v18 + 1), v19, *((uint64_t *)&v19 + 1), v20, *((uint64_t *)&v20 + 1), v87, v17);
                uint64_t result = (uint64_t)outlined release of NavigationColumnState((uint64_t *)v102);
                uint64_t v16 = v24 + v93;
                if (__OFADD__(v24, v93)) {
                  goto LABEL_133;
                }
              }
LABEL_111:
              uint64_t v4 = v100 + v16;
              if (__OFADD__(v100, v16))
              {
                __break(1u);
LABEL_132:
                __break(1u);
LABEL_133:
                __break(1u);
LABEL_134:
                __break(1u);
LABEL_135:
                __break(1u);
LABEL_136:
                __break(1u);
LABEL_137:
                __break(1u);
LABEL_138:
                __break(1u);
LABEL_139:
                __break(1u);
                goto LABEL_140;
              }
              uint64_t v6 = v101 + 304;
              uint64_t v5 = v7;
              if (v96 == v7) {
                return v4;
              }
              break;
            case 5:
              goto LABEL_111;
            default:
              goto LABEL_12;
          }
        }
      }
    }
    __break(1u);
LABEL_142:
    __break(1u);
  }
  return result;
}

void outlined consume of NavigationSplitViewState?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int16 a9, void (*a10)(uint64_t, uint64_t, uint64_t), void (*a11)(uint64_t, uint64_t))
{
  if (a3 != 1)
  {
    a10(a2, a3, a4);
    a11(a5, a6);
    a10(a7, a8, a9);
  }
}

void type metadata accessor for ReadDestinationsModifier<ResolvedNavigationDestinations>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI24ReadDestinationsModifier33_EA42A490FE48784768DCEF705CD04CF4LLVyAA018ResolvedNavigationD0VGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

double partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)(a1 + 24), (uint64_t)v5);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(void *)(a2 + 32) = v6;
  return result;
}

uint64_t specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (result) {
    goto LABEL_2;
  }
  if (a4 == 2)
  {
    if (!a3)
    {
LABEL_9:
      char v5 = 2;
      goto LABEL_3;
    }
  }
  else if (a4 == 3 && a3 == 1)
  {
    goto LABEL_9;
  }
LABEL_2:
  char v5 = 1;
LABEL_3:
  *(unsigned char *)a5 = v5;
  *(void *)(a5 + 8) = a2;
  *(void *)(a5 + 16) = a3;
  *(void *)(a5 + 24) = a4;
  *(void *)(a5 + 32) = result;
  return result;
}

void type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>()
{
  if (!lazy cache variable for type metadata for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>)
  {
    type metadata accessor for ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>();
    lazy protocol witness table accessor for type ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for NavigationState.StackContent.Views.ViewsSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>();
    lazy protocol witness table accessor for type NavigationColumnModifier and conformance NavigationColumnModifier();
    lazy protocol witness table accessor for type ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, &lazy cache variable for type metadata for ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>);
    }
  }
}

uint64_t type metadata accessor for NavigationState.StackContent.Views.ViewsSequence()
{
  return swift_getGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
    lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _PreferenceTransformModifier<NavigationDestinationKey> and conformance _PreferenceTransformModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<NavigationDestinationKey> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<NavigationDestinationKey> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<NavigationDestinationKey> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for _SetStorage<ObjectIdentifier>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<NavigationDestinationKey>, (uint64_t)&type metadata for NavigationDestinationKey, (uint64_t)&protocol witness table for NavigationDestinationKey, MEMORY[0x1E4F41108]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<NavigationDestinationKey> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, &lazy cache variable for type metadata for ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>);
    lazy protocol witness table accessor for type NavigationBackgroundReaderModifier and conformance NavigationBackgroundReaderModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
    lazy protocol witness table accessor for type _VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root> and conformance <> _VariadicView.Tree<A, B>(&lazy protocol witness table cache variable for type _VariadicView.Tree<_VStackLayout, _VariadicView_Children> and conformance <> _VariadicView.Tree<A, B>, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root> and conformance <> _VariadicView.Tree<A, B>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t NavigationSplitView.SidebarContent.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  type metadata accessor for StyleContextWriter<SidebarStyleContext>(255, &lazy cache variable for type metadata for StyleContextWriter<SidebarStyleContext>);
  uint64_t v3 = type metadata accessor for ModifiedContent();
  uint64_t v27 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  char v5 = (char *)&v24 - v4;
  uint64_t v6 = type metadata accessor for ModifiedContent();
  uint64_t v28 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v24 = (char *)&v24 - v7;
  type metadata accessor for _EnvironmentKeyWritingModifier<UserInterfaceSizeClass?>();
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v29 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v25 = (char *)&v24 - v12;
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = v26;
  View.styleContext<A>(_:)();
  LOBYTE(v14) = *(void *)(v14 + *(int *)(a1 + 68)) == 2;
  uint64_t v15 = lazy protocol witness table accessor for type StyleContextWriter<SidebarStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type StyleContextWriter<SidebarStyleContext> and conformance StyleContextWriter<A>, &lazy cache variable for type metadata for StyleContextWriter<SidebarStyleContext>);
  uint64_t v36 = v13;
  uint64_t v37 = v15;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v17 = v24;
  View.navigationColumn(isSearchEnabled:)(v14, v3, WitnessTable);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v5, v3);
  swift_getKeyPath();
  char v35 = 0;
  unint64_t v18 = lazy protocol witness table accessor for type NavigationColumnModifier and conformance NavigationColumnModifier();
  uint64_t v33 = WitnessTable;
  unint64_t v34 = v18;
  uint64_t v19 = swift_getWitnessTable();
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v17, v6);
  unint64_t v20 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<UserInterfaceSizeClass?> and conformance _EnvironmentKeyWritingModifier<A>();
  uint64_t v31 = v19;
  unint64_t v32 = v20;
  swift_getWitnessTable();
  uint64_t v21 = v25;
  static ViewBuilder.buildExpression<A>(_:)(v10);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v29 + 8);
  v22(v10, v8);
  static ViewBuilder.buildExpression<A>(_:)(v21);
  return ((uint64_t (*)(char *, uint64_t))v22)(v21, v8);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<UserInterfaceSizeClass?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<UserInterfaceSizeClass?>)
  {
    type metadata accessor for State<NavigationSplitViewColumn>(255, &lazy cache variable for type metadata for UserInterfaceSizeClass?, MEMORY[0x1E4F409E8], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<UserInterfaceSizeClass?>);
    }
  }
}

void type metadata accessor for StyleContextWriter<SidebarStyleContext>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for StyleContextWriter();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<UserInterfaceSizeClass?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<UserInterfaceSizeClass?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<UserInterfaceSizeClass?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<UserInterfaceSizeClass?>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<UserInterfaceSizeClass?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StyleContextWriter<SidebarStyleContext> and conformance StyleContextWriter<A>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for StyleContextWriter<SidebarStyleContext>(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t View.navigationColumn(isSearchEnabled:)(char a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    char v3 = 2;
  }
  else {
    char v3 = 1;
  }
  char v5 = v3;
  return MEMORY[0x18C113660](&v5, a2, &type metadata for NavigationColumnModifier, a3);
}

uint64_t NavigationSplitView.DetailContent.body.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = type metadata accessor for ModifiedContent();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)v14 - v8;
  uint64_t v10 = *(void *)(a1 + 56);
  View.navigationColumn(searchAdjustment:)(1, v2, v10);
  unint64_t v11 = lazy protocol witness table accessor for type NavigationColumnModifier and conformance NavigationColumnModifier();
  v14[0] = v10;
  v14[1] = v11;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v6);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v6, v3);
  static ViewBuilder.buildExpression<A>(_:)(v9);
  return ((uint64_t (*)(char *, uint64_t))v12)(v9, v3);
}

unint64_t lazy protocol witness table accessor for type NavigationColumnModifier and conformance NavigationColumnModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationColumnModifier and conformance NavigationColumnModifier;
  if (!lazy protocol witness table cache variable for type NavigationColumnModifier and conformance NavigationColumnModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationColumnModifier and conformance NavigationColumnModifier);
  }
  return result;
}

uint64_t View.navigationColumn(searchAdjustment:)(char a1, uint64_t a2, uint64_t a3)
{
  char v4 = a1;
  return MEMORY[0x18C113660](&v4, a2, &type metadata for NavigationColumnModifier, a3);
}

uint64_t type metadata completion function for PresentationHostingController()
{
  return swift_initClassMetadata2();
}

uint64_t _DisclosureIndicator.body.getter@<X0>(uint64_t a1@<X8>)
{
  int v3 = *v1;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v5 = swift_getKeyPath();
  LOBYTE(v25) = 0;
  LOBYTE(v21) = 0;
  if (v3) {
    __int16 v6 = 256;
  }
  else {
    __int16 v6 = 0;
  }
  specialized View.accessibility<A>(_:_:isEnabled:)(dword_1ED433E38 | ((unint64_t)dword_1ED433E38 << 32), 1, KeyPath, 0, v5, v6, (uint64_t)&v25);
  uint64_t v7 = v25;
  char v8 = v26;
  uint64_t v19 = v27;
  char v18 = v28;
  char v20 = v29;
  uint64_t v9 = v30;
  uint64_t v10 = v31;
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4FBBE00]);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_18834BB80;
  LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v11 + 32) = Text.init(_:tableName:bundle:comment:)();
  *(void *)(v11 + 40) = v12;
  *(unsigned char *)(v11 + 48) = v13 & 1;
  *(void *)(v11 + 56) = v14;
  swift_beginAccess();
  uint64_t v15 = MEMORY[0x1E4F40E40];
  _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>, &lazy cache variable for type metadata for AccessibilityLabelStorage?, MEMORY[0x1E4F40E40], MEMORY[0x1E4F41090]);
  uint64_t v23 = v16;
  uint64_t v24 = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGACyxGAA03AnycdE0AAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>, &lazy cache variable for type metadata for AccessibilityLabelStorage?, v15);
  uint64_t v21 = v11;
  char v22 = 3;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)&v21, MEMORY[0x1E4F40B88]);
  swift_endAccess();
  swift_release();
  swift_release();
  *(void *)a1 = v7;
  *(unsigned char *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v19;
  *(unsigned char *)(a1 + 24) = v18;
  *(unsigned char *)(a1 + 25) = v20;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v10;
  outlined copy of Environment<Bool>.Content(v7, v8);
  outlined copy of Environment<Bool>.Content(v19, v18);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined consume of Environment<Bool>.Content(v7, v8);
  outlined consume of Environment<Bool>.Content(v19, v18);
  swift_release();
  return swift_release();
}

uint64_t specialized View.accessibility<A>(_:_:isEnabled:)@<X0>(unint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, __int16 a6@<W5>, uint64_t a7@<X8>)
{
  if (a2)
  {
    unsigned int v12 = a1;
    unint64_t v13 = HIDWORD(a1);
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v21 = Dictionary.init(minimumCapacity:)();
    _s7SwiftUI31AnyAccessibilityPropertiesEntry_pSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, MEMORY[0x1E4F41090]);
    void v20[3] = v14;
    void v20[4] = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C17NullableOptionSetVyAA0C10VisibilityVGGACyxGAA03AnycdE0AAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>);
    v20[0] = __PAIR64__(v13, v12);
    specialized Dictionary.subscript.setter((uint64_t)v20, MEMORY[0x1E4F40AA8]);
    uint64_t v15 = v21;
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v15 = Dictionary.init(minimumCapacity:)();
  }
  uint64_t v21 = v15;
  AccessibilityAttachment.init(properties:)();
  uint64_t v16 = v20[0];
  uint64_t v17 = v20[1];
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v16;
  *(void *)(v18 + 24) = v17;
  *(void *)a7 = a3;
  *(unsigned char *)(a7 + 8) = a4 & 1;
  *(void *)(a7 + 16) = a5;
  *(unsigned char *)(a7 + 24) = a6 & 1;
  *(unsigned char *)(a7 + 25) = HIBYTE(a6) & 1;
  *(void *)(a7 + 32) = v18;
  *(void *)(a7 + 40) = 0;
  outlined copy of Environment<Bool>.Content(a3, a4 & 1);

  return outlined copy of Environment<Bool>.Content(a5, a6 & 1);
}

uint64_t type metadata completion function for FileImportExportBridge()
{
  uint64_t result = type metadata accessor for FileImportExportBridge.PresentationState(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #2 in static ModifiedContent<>._makeScene(scene:inputs:)(uint64_t a1)
{
  return closure #1 in closure #2 in static ModifiedContent<>._makeScene(scene:inputs:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t closure #1 in closure #2 in static ModifiedContent<>._makeScene(scene:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v12[2] = type metadata accessor for ModifiedContent();
  v12[3] = a2;
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a6, (uint64_t)v12, a2, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v10);
  return v12[5];
}

uint64_t Button.init(role:action:label:)@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, unsigned char *a5@<X8>)
{
  char v8 = a1[1];
  *a5 = *a1;
  a5[1] = v8;
  uint64_t v9 = &a5[*(int *)(type metadata accessor for Button() + 36)];
  *uint64_t v9 = a2;
  v9[1] = a3;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  uint64_t v10 = swift_retain();
  a4(v10);

  return swift_release();
}

uint64_t type metadata completion function for UIViewControllerRepresentableContext()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for ProgressView.Base()
{
  uint64_t result = type metadata accessor for CustomProgressView();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for TitleDocumentContent()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for NavigationSplitView.DetailContent()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t AnyGradient.init(colors:locations:interpolations:)()
{
  return AnyGradient.init<A>(provider:)();
}

unint64_t lazy protocol witness table accessor for type CubicGradientProvider and conformance CubicGradientProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type CubicGradientProvider and conformance CubicGradientProvider;
  if (!lazy protocol witness table cache variable for type CubicGradientProvider and conformance CubicGradientProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CubicGradientProvider and conformance CubicGradientProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CubicGradientProvider and conformance CubicGradientProvider;
  if (!lazy protocol witness table cache variable for type CubicGradientProvider and conformance CubicGradientProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CubicGradientProvider and conformance CubicGradientProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CubicGradientProvider and conformance CubicGradientProvider;
  if (!lazy protocol witness table cache variable for type CubicGradientProvider and conformance CubicGradientProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CubicGradientProvider and conformance CubicGradientProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<MultiViewLabel, TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>)>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<MultiViewLabel, TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>)>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<MultiViewLabel, TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>)>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<MultiViewLabel, TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>)>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>>();
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>)> and conformance TupleView<A>, (unint64_t *)&lazy cache variable for type metadata for TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>)>, (void (*)(uint64_t))type metadata accessor for (ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>));
    lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<MultiViewLabel, TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>)>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>();
    lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>> and conformance HStack<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void type metadata accessor for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>()
{
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>)
  {
    _s7SwiftUI23InterfaceIdiomPredicateVyAA06VisioncD0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<VisionInterfaceIdiom>, MEMORY[0x1E4F406D0], MEMORY[0x1E4F406C8], MEMORY[0x1E4F40C60]);
    type metadata accessor for HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>();
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<VisionInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>);
    }
  }
}

void type metadata accessor for StaticIf<MultiViewLabel, TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>)>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>>()
{
  if (!lazy cache variable for type metadata for StaticIf<MultiViewLabel, TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>)>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>)>(255, (unint64_t *)&lazy cache variable for type metadata for TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>)>, (void (*)(uint64_t))type metadata accessor for (ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>));
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>();
    lazy protocol witness table accessor for type MultiViewLabel and conformance MultiViewLabel();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<MultiViewLabel, TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>)>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>> and conformance HStack<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>> and conformance HStack<A>)
  {
    type metadata accessor for HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>> and conformance HStack<A>);
  }
  return result;
}

void type metadata accessor for HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>()
{
  if (!lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>, (void (*)(uint64_t))type metadata accessor for (ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>));
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)> and conformance TupleView<A>, &lazy cache variable for type metadata for TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>, (void (*)(uint64_t))type metadata accessor for (ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>));
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)> and conformance TupleView<A>(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>)>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for TupleView<(ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>)>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for TupleView();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for (ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>))
  {
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>);
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>));
    }
  }
}

void type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    type metadata accessor for _ContainerValueWritingModifier<LabelItemRole?>();
    unint64_t v3 = type metadata accessor for ModifiedContent();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void type metadata accessor for _ContainerValueWritingModifier<LabelItemRole?>()
{
  if (!lazy cache variable for type metadata for _ContainerValueWritingModifier<LabelItemRole?>)
  {
    _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_0(255, &lazy cache variable for type metadata for LabelItemRole?, (uint64_t)&type metadata for LabelItemRole, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for _ContainerValueWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContainerValueWritingModifier<LabelItemRole?>);
    }
  }
}

void type metadata accessor for (ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>))
  {
    _s7SwiftUI23InterfaceIdiomPredicateVyAA06VisioncD0VGMaTm_0(255, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, (uint64_t)&type metadata for LabelStyleConfiguration.Icon, (uint64_t)&type metadata for LabelIconPlatformItemModifier, MEMORY[0x1E4F3FBA0]);
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<LabelStyleConfiguration.Icon, LabelIconPlatformItemModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>));
    }
  }
}

void type metadata accessor for InterfaceIdiomPredicate<VisionInterfaceIdiom>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI23InterfaceIdiomPredicateVyAA06VisioncD0VGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>)
  {
    type metadata accessor for LabelItemRole?(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E4F3F7C8], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<TextAlignment>>);
    }
  }
}

void type metadata accessor for LabelItemRole?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t DefaultPickerStyle.Body.value.getter@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v91 = a1;
  uint64_t v112 = a4;
  uint64_t v90 = type metadata accessor for PickerStyleConfiguration();
  uint64_t v6 = *(void *)(v90 - 8);
  MEMORY[0x1F4188790](v90);
  char v8 = (char *)&v80 - v7;
  v133[0] = &type metadata for DefaultPickerStyle;
  v133[1] = a2;
  v133[2] = &protocol witness table for DefaultPickerStyle;
  v133[3] = a3;
  uint64_t v9 = type metadata accessor for _PickerValue();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v83 = (uint64_t)&v80 - v10;
  uint64_t v11 = type metadata accessor for ResolvedPicker();
  uint64_t v85 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  unint64_t v13 = (char *)&v80 - v12;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<HostingConfigurationContext>, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier>();
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v87 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v81 = (uint64_t)&v80 - v15;
  type metadata accessor for StaticIf<UseMenuPickerStyleInList, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier>();
  uint64_t v16 = type metadata accessor for ModifiedContent();
  uint64_t v92 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v82 = (uint64_t)&v80 - v17;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>();
  uint64_t v18 = type metadata accessor for ModifiedContent();
  uint64_t v96 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v84 = (uint64_t)&v80 - v19;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>();
  uint64_t v89 = type metadata accessor for ModifiedContent();
  uint64_t v99 = *(void *)(v89 - 8);
  MEMORY[0x1F4188790](v89);
  uint64_t v86 = (uint64_t)&v80 - v20;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>();
  uint64_t v94 = type metadata accessor for ModifiedContent();
  uint64_t v102 = *(void *)(v94 - 8);
  MEMORY[0x1F4188790](v94);
  uint64_t v88 = (uint64_t)&v80 - v21;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>();
  uint64_t v97 = type metadata accessor for ModifiedContent();
  uint64_t v105 = *(void *)(v97 - 8);
  MEMORY[0x1F4188790](v97);
  uint64_t v93 = (uint64_t)&v80 - v22;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<InlinePickerStyle>, EmptyModifier>();
  uint64_t v100 = type metadata accessor for ModifiedContent();
  uint64_t v107 = *(void *)(v100 - 8);
  MEMORY[0x1F4188790](v100);
  uint64_t v95 = (uint64_t)&v80 - v23;
  type metadata accessor for StaticIf<UseMenuPickerStyleInToolbar, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>();
  uint64_t v104 = type metadata accessor for ModifiedContent();
  uint64_t v108 = *(void *)(v104 - 8);
  MEMORY[0x1F4188790](v104);
  uint64_t v98 = (uint64_t)&v80 - v24;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier>();
  uint64_t v106 = type metadata accessor for ModifiedContent();
  uint64_t v110 = *(void *)(v106 - 8);
  MEMORY[0x1F4188790](v106);
  uint64_t v101 = (uint64_t)&v80 - v25;
  type metadata accessor for StaticIf<_SemanticFeature_v3, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>();
  uint64_t v109 = type metadata accessor for ModifiedContent();
  uint64_t v111 = *(void *)(v109 - 8);
  MEMORY[0x1F4188790](v109);
  uint64_t v103 = (uint64_t)&v80 - v26;
  uint64_t v27 = v83;
  DefaultPickerStyle.Body.base.getter(v83);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v8, v27, v90);
  uint64_t v28 = ResolvedPicker.init(configuration:)((uint64_t)v8, (uint64_t)v13);
  uint64_t v29 = v81;
  View.pickerStyle<A, B>(_:in:)(v28, v30, v11, (uint64_t)&type metadata for ListMenuPickerStyle, MEMORY[0x1E4F40FD0], (uint64_t)&protocol witness table for ResolvedPicker<A>, MEMORY[0x1E4F40FC8], v81);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v13, v11);
  uint64_t v31 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<HostingConfigurationContext>, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<HostingConfigurationContext>, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<HostingConfigurationContext>, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier>);
  char v131 = &protocol witness table for ResolvedPicker<A>;
  uint64_t v132 = v31;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v33 = lazy protocol witness table accessor for type UseMenuPickerStyleInList and conformance UseMenuPickerStyleInList();
  uint64_t v34 = v82;
  View.pickerStyle<A, B>(_:if:)(v33, v14, (uint64_t)&type metadata for UseMenuPickerStyleInList, (uint64_t)&type metadata for ListMenuPickerStyle, WitnessTable, v33, v82);
  (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v29, v14);
  LOBYTE(v133[0]) = 2;
  uint64_t v35 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<HostingConfigurationContext>, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<UseMenuPickerStyleInList, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<UseMenuPickerStyleInList, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier>);
  uint64_t v129 = WitnessTable;
  uint64_t v130 = v35;
  uint64_t v36 = swift_getWitnessTable();
  unint64_t v37 = lazy protocol witness table accessor for type GroupedListStyleContext and conformance GroupedListStyleContext();
  uint64_t v38 = v84;
  View.pickerStyle<A, B>(_:in:)((uint64_t)v133, v39, v16, (uint64_t)&type metadata for NavigationLinkPickerStyle, (uint64_t)&type metadata for GroupedListStyleContext, v36, v37, v84);
  (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v34, v16);
  LOBYTE(v133[0]) = 2;
  uint64_t v40 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<HostingConfigurationContext>, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>);
  uint64_t v127 = v36;
  uint64_t v128 = v40;
  uint64_t v41 = swift_getWitnessTable();
  unint64_t v42 = lazy protocol witness table accessor for type InsetGroupedListStyleContext and conformance InsetGroupedListStyleContext();
  uint64_t v43 = v86;
  View.pickerStyle<A, B>(_:in:)((uint64_t)v133, v44, v18, (uint64_t)&type metadata for NavigationLinkPickerStyle, (uint64_t)&type metadata for InsetGroupedListStyleContext, v41, v42, v86);
  (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v38, v18);
  LOBYTE(v133[0]) = 2;
  uint64_t v45 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<HostingConfigurationContext>, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>);
  uint64_t v125 = v41;
  uint64_t v126 = v45;
  uint64_t v46 = v89;
  uint64_t v47 = swift_getWitnessTable();
  unint64_t v48 = lazy protocol witness table accessor for type SidebarListStyleContext and conformance SidebarListStyleContext();
  uint64_t v49 = v88;
  View.pickerStyle<A, B>(_:in:)((uint64_t)v133, v50, v46, (uint64_t)&type metadata for NavigationLinkPickerStyle, (uint64_t)&type metadata for SidebarListStyleContext, v47, v48, v88);
  (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v43, v46);
  LOBYTE(v133[0]) = 2;
  uint64_t v51 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<HostingConfigurationContext>, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>);
  uint64_t v123 = v47;
  uint64_t v124 = v51;
  uint64_t v52 = v94;
  uint64_t v53 = swift_getWitnessTable();
  unint64_t v54 = lazy protocol witness table accessor for type GroupedFormStyleContext and conformance GroupedFormStyleContext();
  uint64_t v55 = v93;
  View.pickerStyle<A, B>(_:in:)((uint64_t)v133, v56, v52, (uint64_t)&type metadata for NavigationLinkPickerStyle, (uint64_t)&type metadata for GroupedFormStyleContext, v53, v54, v93);
  (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v49, v52);
  uint64_t v57 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<HostingConfigurationContext>, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>);
  uint64_t v121 = v53;
  uint64_t v122 = v57;
  uint64_t v58 = v97;
  uint64_t v59 = swift_getWitnessTable();
  uint64_t v60 = v95;
  View.pickerStyle<A, B>(_:in:)(v59, v61, v58, (uint64_t)&type metadata for InlinePickerStyle, MEMORY[0x1E4F3FCF0], v59, MEMORY[0x1E4F3FCE8], v95);
  (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v55, v58);
  uint64_t v62 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<HostingConfigurationContext>, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<InlinePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<InlinePickerStyle>, EmptyModifier>);
  uint64_t v119 = v59;
  uint64_t v120 = v62;
  uint64_t v63 = v100;
  uint64_t v64 = swift_getWitnessTable();
  unint64_t v65 = lazy protocol witness table accessor for type UseMenuPickerStyleInToolbar and conformance UseMenuPickerStyleInToolbar();
  uint64_t v66 = v98;
  View.pickerStyle<A, B>(_:if:)(v65, v63, (uint64_t)&unk_1ED451130, (uint64_t)&type metadata for MenuPickerStyle, v64, v65, v98);
  (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v60, v63);
  uint64_t v67 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<HostingConfigurationContext>, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<UseMenuPickerStyleInToolbar, PickerStyleWriter<MenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<UseMenuPickerStyleInToolbar, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>);
  uint64_t v117 = v64;
  uint64_t v118 = v67;
  uint64_t v68 = v104;
  uint64_t v69 = swift_getWitnessTable();
  uint64_t v70 = v101;
  View.pickerStyle<A, B>(_:in:)(v69, v71, v68, (uint64_t)&type metadata for SegmentedPickerStyle, MEMORY[0x1E4F40520], v69, MEMORY[0x1E4F40518], v101);
  (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v66, v68);
  uint64_t v72 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<HostingConfigurationContext>, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier>);
  uint64_t v115 = v69;
  uint64_t v116 = v72;
  uint64_t v73 = v106;
  uint64_t v74 = swift_getWitnessTable();
  uint64_t v75 = v103;
  View.pickerStyle<A, B>(_:if:)(v74, v73, MEMORY[0x1E4F405B8], (uint64_t)&type metadata for MenuPickerStyle, v74, MEMORY[0x1E4F405B0], v103);
  (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v70, v73);
  uint64_t v76 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<HostingConfigurationContext>, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v3, PickerStyleWriter<MenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v3, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>);
  uint64_t v113 = v74;
  uint64_t v114 = v76;
  uint64_t v77 = v109;
  uint64_t v78 = swift_getWitnessTable();
  View.pickerStyle<A>(_:)(v78, v77, (uint64_t)&type metadata for WheelPickerStyle, v78);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v111 + 8))(v75, v77);
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<InsetGroupedListStyleContext>);
    type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<NavigationLinkPickerStyle>);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<InsetGroupedListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<InsetGroupedListStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarListStyleContext>);
    type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<NavigationLinkPickerStyle>);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SidebarListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarListStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleCo()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListS;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListS)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleW();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelSty(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, La, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<L, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifie, (void (*)(void))lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, LabelStyleWritingModifier<WrappingLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
    lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>(&lazy protocol witness table cache variable for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>, &lazy cache variable for type metadata for LabelStyleWritingModifier<FallbackLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type FallbackLabelStyle and conformance FallbackLabelStyle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListS);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelSty(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, LabelStyleWritingModifier<ToolbarItemLabelStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, LabelStyleWritingModifier<ToolbarItemLabelStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>);
    type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<ToolbarItemLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type ToolbarItemLabelStyle and conformance ToolbarItemLabelStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, LabelStyleWritingModifier<ToolbarItemLabelStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, LabelStyleWritingModifier<AccessibilityLabelStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, LabelStyleWritingModifier<AccessibilityLabelStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>);
    type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<AccessibilityLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type AccessibilityLabelStyle and conformance AccessibilityLabelStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, LabelStyleWritingModifier<AccessibilityLabelStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>);
    type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(255, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<TitleAndIconLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MultimodalListGridContext>, LabelStyleWritingModifier<MultimodalListGridLabelStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MultimodalListGridContext>, LabelStyleWritingModifier<MultimodalListGridLabelStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<MultimodalListGridContext>);
    type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<MultimodalListGridLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type MultimodalListGridLabelStyle and conformance MultimodalListGridLabelStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MultimodalListGridContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<MultimodalListGridContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MultimodalListGridContext>, LabelStyleWritingModifier<MultimodalListGridLabelStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<InsetGroupedListStyleContext>);
    type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<ListLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type ListLabelStyle and conformance ListLabelStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<InsetGroupedListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<InsetGroupedListStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, LabelStyleWritingModifier<WrappingLabelStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, LabelStyleWritingModifier<WrappingLabelStyle>, EmptyModifier>)
  {
    type metadata accessor for InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, MEMORY[0x1E4F40BF8], MEMORY[0x1E4F40BF0], MEMORY[0x1E4F40C60]);
    type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<WrappingLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type WrappingLabelStyle and conformance WrappingLabelStyle);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<ClarityUIInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, LabelStyleWritingModifier<WrappingLabelStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, (uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>,(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleC(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPre(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarSt(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, Lab(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>();
    lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<ListLabelStyle> and conformance LabelStyleWritingModifier<A>, &lazy cache variable for type metadata for LabelStyleWritingModifier<ListLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type ListLabelStyle and conformance ListLabelStyle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<PlainListStyleContext>);
    type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<ListLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type ListLabelStyle and conformance ListLabelStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<PlainListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<PlainListStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>();
    lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>(&lazy protocol witness table cache variable for type LabelStyleWritingModifier<InsetListLabelStyle> and conformance LabelStyleWritingModifier<A>, &lazy cache variable for type metadata for LabelStyleWritingModifier<InsetListLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type InsetListLabelStyle and conformance InsetListLabelStyle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<InsetListStyleContext>);
    type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<InsetListLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type InsetListLabelStyle and conformance InsetListLabelStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<InsetListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<InsetListStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, LabelStyleWritingModifier<ToolbarItemLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, LabelStyleWritingModifier<ToolbarItemLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, LabelStyleWritingModifier<ToolbarItemLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, LabelStyleWritingModifier<ToolbarItemLabelStyle>, EmptyModifier>();
    lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>(&lazy protocol witness table cache variable for type LabelStyleWritingModifier<ToolbarItemLabelStyle> and conformance LabelStyleWritingModifier<A>, &lazy cache variable for type metadata for LabelStyleWritingModifier<ToolbarItemLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type ToolbarItemLabelStyle and conformance ToolbarItemLabelStyle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, LabelStyleWritingModifier<ToolbarItemLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, LabelStyleWritingModifier<AccessibilityLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, LabelStyleWritingModifier<AccessibilityLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, LabelStyleWritingModifier<AccessibilityLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, LabelStyleWritingModifier<AccessibilityLabelStyle>, EmptyModifier>();
    lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>(&lazy protocol witness table cache variable for type LabelStyleWritingModifier<AccessibilityLabelStyle> and conformance LabelStyleWritingModifier<A>, &lazy cache variable for type metadata for LabelStyleWritingModifier<AccessibilityLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type AccessibilityLabelStyle and conformance AccessibilityLabelStyle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, LabelStyleWritingModifier<AccessibilityLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier>();
    lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<TitleAndIconLabelStyle> and conformance LabelStyleWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<TitleAndIconLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MultimodalListStackContext>, LabelStyleWritingModifier<MultimodalListStackLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MultimodalListStackContext>, LabelStyleWritingModifier<MultimodalListStackLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MultimodalListStackContext>, LabelStyleWritingModifier<MultimodalListStackLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MultimodalListStackContext>, LabelStyleWritingModifier<MultimodalListStackLabelStyle>, EmptyModifier>();
    lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>(&lazy protocol witness table cache variable for type LabelStyleWritingModifier<MultimodalListStackLabelStyle> and conformance LabelStyleWritingModifier<A>, &lazy cache variable for type metadata for LabelStyleWritingModifier<MultimodalListStackLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type MultimodalListStackLabelStyle and conformance MultimodalListStackLabelStyle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MultimodalListStackContext>, LabelStyleWritingModifier<MultimodalListStackLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MultimodalListStackContext>, LabelStyleWritingModifier<MultimodalListStackLabelStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MultimodalListStackContext>, LabelStyleWritingModifier<MultimodalListStackLabelStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<MultimodalListStackContext>);
    type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<MultimodalListStackLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type MultimodalListStackLabelStyle and conformance MultimodalListStackLabelStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MultimodalListStackContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<MultimodalListStackContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MultimodalListStackContext>, LabelStyleWritingModifier<MultimodalListStackLabelStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MultimodalListGridContext>, LabelStyleWritingModifier<MultimodalListGridLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MultimodalListGridContext>, LabelStyleWritingModifier<MultimodalListGridLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MultimodalListGridContext>, LabelStyleWritingModifier<MultimodalListGridLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MultimodalListGridContext>, LabelStyleWritingModifier<MultimodalListGridLabelStyle>, EmptyModifier>();
    lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>(&lazy protocol witness table cache variable for type LabelStyleWritingModifier<MultimodalListGridLabelStyle> and conformance LabelStyleWritingModifier<A>, &lazy cache variable for type metadata for LabelStyleWritingModifier<MultimodalListGridLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type MultimodalListGridLabelStyle and conformance MultimodalListGridLabelStyle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MultimodalListGridContext>, LabelStyleWritingModifier<MultimodalListGridLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>();
    lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<ListLabelStyle> and conformance LabelStyleWritingModifier<A>, &lazy cache variable for type metadata for LabelStyleWritingModifier<ListLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type ListLabelStyle and conformance ListLabelStyle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier>();
    lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<TitleAndIconLabelStyle> and conformance LabelStyleWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<TitleAndIconLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SwipeActionsStyleContext>);
    type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(255, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<TitleAndIconLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SwipeActionsStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SwipeActionsStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>();
    lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<SidebarLabelStyle> and conformance LabelStyleWritingModifier<A>, &lazy cache variable for type metadata for LabelStyleWritingModifier<SidebarLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type SidebarLabelStyle and conformance SidebarLabelStyle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarListStyleContext>);
    type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<SidebarLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type SidebarLabelStyle and conformance SidebarLabelStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SidebarListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarListStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>();
    lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<ListLabelStyle> and conformance LabelStyleWritingModifier<A>, &lazy cache variable for type metadata for LabelStyleWritingModifier<ListLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type ListLabelStyle and conformance ListLabelStyle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedListStyleContext>);
    type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<ListLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type ListLabelStyle and conformance ListLabelStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedListStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>();
    lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<ListLabelStyle> and conformance LabelStyleWritingModifier<A>, &lazy cache variable for type metadata for LabelStyleWritingModifier<ListLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type ListLabelStyle and conformance ListLabelStyle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>);
    type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<ListLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type ListLabelStyle and conformance ListLabelStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, LabelStyleWritingModifier<WrappingLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, LabelStyleWritingModifier<WrappingLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, LabelStyleWritingModifier<WrappingLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, LabelStyleWritingModifier<WrappingLabelStyle>, EmptyModifier>();
    lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>(&lazy protocol witness table cache variable for type LabelStyleWritingModifier<WrappingLabelStyle> and conformance LabelStyleWritingModifier<A>, &lazy cache variable for type metadata for LabelStyleWritingModifier<WrappingLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type WrappingLabelStyle and conformance WrappingLabelStyle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, LabelStyleWritingModifier<WrappingLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance Label<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance Label<A, B>;
  if (!lazy protocol witness table cache variable for type Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance Label<A, B>)
  {
    type metadata accessor for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance Label<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleW()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContex)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<L(255);
    type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<FallbackLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type FallbackLabelStyle and conformance FallbackLabelStyle);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContex);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<L(uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifie()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelSty(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingM, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, , (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle, (void (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MultimodalListStackContext>, LabelStyleWritingModifier<MultimodalListStackLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelSty(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabe, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>,, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier, (void (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MultimodalListGridContext>, LabelStyleWritingModifier<MultimodalListGridLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelSty(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyMo, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleC, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<Sty, (void (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, LabelStyleWritingModifier<AccessibilityLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<Sty()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelSty(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, Static, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPre, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAccepts, (void (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAccepts()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelSty(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextA, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarSt, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<Toolba, (void (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<Toolba()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelSty(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, Lab, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, LabelStyleWritingModifier<ToolbarItemLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelSty(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelSty(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelSty(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelSty(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelSty(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelSty(&lazy protocol witness table cache variable for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, (void (*)(void))lazy protocol witness table accessor for type Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance Label<A, B>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>);
    type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<SegmentedPickerStyle>);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier>);
    }
  }
}

uint64_t associated type witness table accessor for StyleableView.DefaultStyleModifier : StyleModifier in ResolvedLabelStyle()
{
  return lazy protocol witness table accessor for type LabelStyleModifier<DefaultLabelStyle> and conformance LabelStyleModifier<A>(&lazy protocol witness table cache variable for type LabelStyleModifier<DefaultLabelStyle> and conformance LabelStyleModifier<A>, (void (*)(uint64_t))type metadata accessor for LabelStyleModifier<DefaultLabelStyle>);
}

void type metadata accessor for LabelStyleModifier<DefaultLabelStyle>()
{
  if (!lazy cache variable for type metadata for LabelStyleModifier<DefaultLabelStyle>)
  {
    lazy protocol witness table accessor for type DefaultLabelStyle and conformance DefaultLabelStyle();
    unint64_t v0 = type metadata accessor for LabelStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LabelStyleModifier<DefaultLabelStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type DefaultLabelStyle and conformance DefaultLabelStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultLabelStyle and conformance DefaultLabelStyle;
  if (!lazy protocol witness table cache variable for type DefaultLabelStyle and conformance DefaultLabelStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultLabelStyle and conformance DefaultLabelStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>();
    lazy protocol witness table accessor for type LabelStyleModifier<DefaultLabelStyle> and conformance LabelStyleModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance Label<A, B>, (void (*)(uint64_t))type metadata accessor for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>)
  {
    type metadata accessor for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StaticIf<MultiViewLabel, Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<MultiViewLabel, Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<MultiViewLabel, Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<MultiViewLabel, Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>>();
    lazy protocol witness table accessor for type LabelStyleModifier<DefaultLabelStyle> and conformance LabelStyleModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance Label<A, B>, (void (*)(uint64_t))type metadata accessor for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>);
    lazy protocol witness table accessor for type LabelStyleModifier<DefaultLabelStyle> and conformance LabelStyleModifier<A>(&lazy protocol witness table cache variable for type PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>> and conformance PlatformItemLabelView<A, B, C>, (void (*)(uint64_t))type metadata accessor for PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<MultiViewLabel, Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t LabelStyleWritingModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v35 = a3;
  unint64_t v3 = *(ValueMetadata **)(a2 + 16);
  Description = (void (**)(char *, void, ValueMetadata *, double))v3[-1].Description;
  MEMORY[0x1F4188790](a1);
  unint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for LabelStyleModifier();
  uint64_t v31 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v29 - v8;
  swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for _ViewModifier_Content();
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v33 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  unint64_t v13 = (char *)&v29 - v12;
  type metadata accessor for _EnvironmentKeyWritingModifier<EffectiveLabelStyle?>();
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v34 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x1F4188790](v17);
  uint64_t v30 = (char *)&v29 - v19;
  Description[2](v6, v32, v3, v18);
  ((void (*)(char *, char *, ValueMetadata *))Description[4])(v9, v6, v3);
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x18C113660](v9, v10, v7, WitnessTable);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v7);
  swift_getKeyPath();
  if (v3 == &type metadata for TitleOnlyLabelStyle
    || v3 == &type metadata for TitleAndIconLabelStyle
    || v3 == &type metadata for IconOnlyLabelStyle)
  {
    uint64_t v23 = v3;
  }
  else
  {
    uint64_t v23 = 0;
  }
  uint64_t v38 = WitnessTable;
  uint64_t v39 = &protocol witness table for LabelStyleModifier<A>;
  uint64_t v40 = v23;
  uint64_t v24 = swift_getWitnessTable();
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v13, v11);
  uint64_t v25 = lazy protocol witness table accessor for type LabelStyleModifier<DefaultLabelStyle> and conformance LabelStyleModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<EffectiveLabelStyle?> and conformance _EnvironmentKeyWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<EffectiveLabelStyle?>);
  uint64_t v36 = v24;
  uint64_t v37 = v25;
  swift_getWitnessTable();
  uint64_t v26 = v30;
  static ViewBuilder.buildExpression<A>(_:)(v16);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v34 + 8);
  v27(v16, v14);
  static ViewBuilder.buildExpression<A>(_:)(v26);
  return ((uint64_t (*)(char *, uint64_t))v27)(v26, v14);
}

uint64_t type metadata accessor for LabelStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t lazy protocol witness table accessor for type LabelStyleModifier<DefaultLabelStyle> and conformance LabelStyleModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _EnvironmentKeyWritingModifier<EffectiveLabelStyle?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<EffectiveLabelStyle?>)
  {
    type metadata accessor for EffectiveLabelStyle?();
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<EffectiveLabelStyle?>);
    }
  }
}

void type metadata accessor for EffectiveLabelStyle?()
{
  if (!lazy cache variable for type metadata for EffectiveLabelStyle?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EffectiveLabelStyle?);
    }
  }
}

void type metadata accessor for StaticIf<MultiViewLabel, Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>>()
{
  if (!lazy cache variable for type metadata for StaticIf<MultiViewLabel, Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>>)
  {
    type metadata accessor for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>();
    type metadata accessor for PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>();
    lazy protocol witness table accessor for type MultiViewLabel and conformance MultiViewLabel();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<MultiViewLabel, Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>>);
    }
  }
}

void type metadata accessor for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>()
{
  if (!lazy cache variable for type metadata for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>)
  {
    unint64_t v0 = type metadata accessor for Label();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>);
    }
  }
}

void type metadata accessor for PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>()
{
  if (!lazy cache variable for type metadata for PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>)
  {
    type metadata accessor for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>();
    lazy protocol witness table accessor for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for PlatformItemLabelView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>);
    }
  }
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance EnableDeferredAccessibilityAttachmentModifier(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[5];
  uint64_t v7 = a2[6];
  int v8 = *((_DWORD *)a2 + 20);
  uint64_t v20 = *a2;
  int v21 = v4;
  uint64_t v22 = v5;
  long long v23 = *(_OWORD *)(a2 + 3);
  uint64_t v24 = v6;
  uint64_t v25 = v7;
  long long v26 = *(_OWORD *)(a2 + 7);
  uint64_t v27 = a2[9];
  int v28 = v8;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.add(_:)();
  uint64_t v11 = v20;
  int v12 = v21;
  uint64_t v13 = v5;
  long long v14 = v23;
  uint64_t v15 = v6;
  uint64_t v16 = v7;
  long long v17 = v26;
  uint64_t v18 = v27;
  int v19 = v28;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v9 = swift_bridgeObjectRetain();
  a3(v9, &v11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t outlined init with copy of ToolbarStorage.Entry.ID(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for ToolbarStorage.Entry.ID(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = (_OWORD *)(a1 + 40);
  uint64_t v6 = (_OWORD *)(a2 + 40);
  if (*(unsigned char *)(a2 + 80) == 1)
  {
    long long v7 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 64) = v7;
    (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v5, v6);
    *(unsigned char *)(a1 + 80) = 1;
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 56);
    *uint64_t v5 = *v6;
    *(_OWORD *)(a1 + 56) = v8;
    *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  }
  return a1;
}

uint64_t type metadata completion function for ToolbarItemGroup()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t AppGraph.updateGraph<A>(body:)(uint64_t (*a1)(uint64_t))
{
  return a1(v1);
}

uint64_t partial apply for closure #1 in static ModifiedContent<>._makeScene(scene:inputs:)(uint64_t a1)
{
  return closure #1 in static ModifiedContent<>._makeScene(scene:inputs:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t closure #1 in static ModifiedContent<>._makeScene(scene:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v10 = a1 + *(int *)(v9 + 36);
  void v14[2] = v9;
  v14[3] = a3;
  uint64_t v11 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v10, a6, (uint64_t)v14, a3, MEMORY[0x1E4FBC248], v11, MEMORY[0x1E4FBC278], v12);
  return v14[5];
}

uint64_t initializeWithCopy for ConditionallyBorderedButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  unint64_t v7 = v6 + a1;
  unint64_t v8 = v6 + a2;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  LOBYTE(v5) = *(unsigned char *)((v8 & 0xFFFFFFFFFFFFFFF8) + 16);
  outlined copy of Environment<Bool>.Content(v11, v5);
  *(void *)(v9 + 8) = v11;
  *(unsigned char *)(v9 + 16) = v5;
  uint64_t v12 = *(void *)(v10 + 24);
  LOBYTE(v5) = *(unsigned char *)(v10 + 33);
  unsigned __int8 v13 = *(unsigned char *)(v10 + 32);
  outlined copy of Environment<CGFloat?>.Content(v12, v13, v5);
  *(void *)(v9 + 24) = v12;
  *(unsigned char *)(v9 + 32) = v13;
  *(unsigned char *)(v9 + 33) = v5;
  unint64_t v14 = (v9 + 41) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v10 + 41) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = *(void *)v15;
  LOBYTE(v5) = *(unsigned char *)(v15 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v15, v5);
  *(void *)unint64_t v14 = v16;
  *(unsigned char *)(v14 + 8) = v5;
  uint64_t v17 = *(void *)(v15 + 16);
  uint64_t v18 = *(void *)(v15 + 24);
  uint64_t v19 = *(void *)(v15 + 32);
  LOBYTE(v9) = *(unsigned char *)(v15 + 41);
  LOBYTE(v10) = *(unsigned char *)(v15 + 40);
  outlined copy of Environment<KeyboardShortcut?>.Content(v17, v18, v19, v10, v9);
  *(void *)(v14 + 16) = v17;
  *(void *)(v14 + 24) = v18;
  *(void *)(v14 + 32) = v19;
  *(unsigned char *)(v14 + 40) = v10;
  *(unsigned char *)(v14 + 41) = v9;
  uint64_t v20 = *(void *)(v15 + 48);
  LOBYTE(v18) = *(unsigned char *)(v15 + 56);
  outlined copy of Environment<Bool>.Content(v20, v18);
  *(void *)(v14 + 48) = v20;
  *(unsigned char *)(v14 + 56) = v18;
  return a1;
}

void SystemShadowStyleMetrics.Separated.color.modify()
{
}

uint64_t EditButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_5(0, (unint64_t *)&lazy cache variable for type metadata for Button<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4F41418], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = &v29[-v5];
  type metadata accessor for ModifiedContent<Button<Text>, _AnimationModifier<EditMode>>();
  uint64_t v33 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v32 = &v29[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = *(void *)v1;
  uint64_t v10 = *(void *)(v1 + 8);
  uint64_t v11 = *(unsigned __int8 *)(v1 + 16);
  int v12 = *(unsigned __int8 *)(v1 + 17);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v9;
  *(void *)(v13 + 24) = v10;
  *(unsigned char *)(v13 + 32) = v11;
  *(unsigned char *)(v13 + 33) = v12;
  _WORD *v6 = 256;
  unint64_t v14 = (uint64_t (**)())((char *)v6 + *(int *)(v4 + 36));
  *unint64_t v14 = partial apply for closure #1 in EditButton.body.getter;
  v14[1] = (uint64_t (*)())v13;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  outlined copy of Environment<Binding<EditMode>?>.Content(v9, v10, v11, v12);
  uint64_t v15 = v11 | (v12 << 8);
  specialized Environment.wrappedValue.getter(v9, v10, v15, (uint64_t)&v38);
  uint64_t v16 = v39;
  if (!v39) {
    goto LABEL_4;
  }
  uint64_t v31 = v4;
  uint64_t v17 = v38;
  unsigned int v30 = v15;
  uint64_t v34 = v38;
  uint64_t v35 = v39;
  char v36 = v40;
  type metadata accessor for Binding<EditMode>();
  MEMORY[0x18C113DA0](v37);
  uint64_t v18 = v17;
  uint64_t v4 = v31;
  uint64_t v15 = v30;
  outlined consume of Binding<NavigationSplitViewColumn>?(v18, v16);
  if (v37[0]) {
    uint64_t v19 = static Text.System.done.getter();
  }
  else {
LABEL_4:
  }
    uint64_t v19 = static Text.System.edit.getter();
  long long v23 = (char *)v6 + *(int *)(v4 + 40);
  *(void *)long long v23 = v19;
  *((void *)v23 + 1) = v20;
  v23[16] = v21 & 1;
  *((void *)v23 + 3) = v22;
  outlined copy of Environment<Binding<EditMode>?>.Content(v9, v10, v11, v12);
  specialized Environment.wrappedValue.getter(v9, v10, v15, (uint64_t)&v38);
  outlined consume of Environment<Binding<Visibility>?>.Content(v9, v10, v11, v12);
  uint64_t v24 = v39;
  if (v39)
  {
    uint64_t v25 = v38;
    uint64_t v34 = v38;
    uint64_t v35 = v39;
    char v36 = v40;
    type metadata accessor for Binding<EditMode>();
    MEMORY[0x18C113DA0](v37);
    outlined consume of Binding<NavigationSplitViewColumn>?(v25, v24);
    LOBYTE(v24) = v37[0];
  }
  long long v26 = v32;
  outlined init with copy of Button<Text>((uint64_t)v6, (uint64_t)v32);
  uint64_t v27 = &v26[*(int *)(v33 + 36)];
  *(void *)uint64_t v27 = 0;
  v27[8] = v24;
  outlined destroy of Button<Text>((uint64_t)v6);
  return outlined init with take of ModifiedContent<Button<Text>, _AnimationModifier<EditMode>>((uint64_t)v26, a1);
}

void type metadata accessor for Binding<EditMode>()
{
  if (!lazy cache variable for type metadata for Binding<EditMode>)
  {
    unint64_t v0 = type metadata accessor for Binding();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<EditMode>);
    }
  }
}

void protocol witness for View.body.getter in conformance ResolvedLabeledContent._Body(unsigned char *a1@<X8>)
{
  char v2 = *v1;
  *a1 = 2;
  a1[1] = v2;
  a1[2] = v2;
}

uint64_t initializeWithTake for _NavigationSplitReader.SplitPresentationModeLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_weakTakeInit();
  *(_OWORD *)(v6 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(v6 + 40) = *(void *)(a2 + 40);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = v6 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 28)) = *(void *)(a2 + *(int *)(a3 + 28));
  return a1;
}

void specialized _NativeDictionary._delete(at:)(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(a2 + 40);
        id v11 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 < v9 || v3 < v13) {
            goto LABEL_6;
          }
        }
        else if (v13 < v9 && v3 < v13)
        {
          goto LABEL_6;
        }
        uint64_t v16 = *(void *)(a2 + 48);
        uint64_t v17 = (void *)(v16 + 8 * v3);
        uint64_t v18 = (void *)(v16 + 8 * v6);
        if (v3 != v6 || v17 >= v18 + 1) {
          *uint64_t v17 = *v18;
        }
        uint64_t v19 = *(void *)(a2 + 56);
        uint64_t v20 = *(void *)(*(void *)(type metadata accessor for CommandOperation() - 8) + 72);
        int64_t v21 = v20 * v3;
        unint64_t v22 = v19 + v20 * v3;
        int64_t v23 = v20 * v6;
        unint64_t v24 = v19 + v20 * v6 + v20;
        if (v21 < v23 || v22 >= v24)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v21 == v23) {
            goto LABEL_6;
          }
          swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    long long v26 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v27 = *v26;
    uint64_t v28 = (-1 << v3) - 1;
  }
  else
  {
    long long v26 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v28 = *v26;
    uint64_t v27 = (-1 << a1) - 1;
  }
  *long long v26 = v28 & v27;
  uint64_t v29 = *(void *)(a2 + 16);
  BOOL v30 = __OFSUB__(v29, 1);
  uint64_t v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(a2 + 40);
        id v11 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(a2 + 48);
            uint64_t v17 = (void *)(v16 + 8 * v3);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1) {
              *uint64_t v17 = *v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            uint64_t v20 = (_OWORD *)(v19 + 16 * v3);
            int64_t v21 = (_OWORD *)(v19 + 16 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 1))
            {
              *uint64_t v20 = *v21;
              int64_t v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    int64_t v23 = *v22;
    unint64_t v24 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    unint64_t v24 = *v22;
    int64_t v23 = (-1 << a1) - 1;
  }
  char *v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  long long v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  long long v10;
  long long v11;
  Swift::Int v12;
  id v13;
  Swift::Int v14;
  Swift::Int v15;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  long long *v22;
  long long *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v12 = *(void *)(a2 + 40);
        Swift::Int v13 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        unint64_t v14 = NSObject._rawHashValue(seed:)(v12);

        uint64_t v15 = v14 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v15 >= v9 && v3 >= v15)
          {
LABEL_16:
            uint64_t v18 = *(void *)(a2 + 48);
            uint64_t v19 = (void *)(v18 + 8 * v3);
            uint64_t v20 = (void *)(v18 + 8 * v6);
            if (v3 != v6 || v19 >= v20 + 1) {
              char *v19 = *v20;
            }
            int64_t v21 = *(void *)(a2 + 56);
            unint64_t v22 = (long long *)(v21 + 48 * v3);
            int64_t v23 = (long long *)(v21 + 48 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v22 >= v23 + 3))
            {
              Swift::Int v10 = *v23;
              id v11 = v23[2];
              v22[1] = v23[1];
              void v22[2] = v11;
              char *v22 = v10;
              int64_t v3 = v6;
            }
          }
        }
        else if (v15 >= v9 || v3 >= v15)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v25 = *v24;
    long long v26 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v24 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    long long v26 = *v24;
    uint64_t v25 = (-1 << a1) - 1;
  }
  char *v24 = v26 & v25;
  uint64_t v27 = *(void *)(a2 + 16);
  uint64_t v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(a2 + 40);
        id v11 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(a2 + 48);
            uint64_t v17 = (void *)(v16 + 8 * v3);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1) {
              *uint64_t v17 = *v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            uint64_t v20 = (void *)(v19 + 8 * v3);
            int64_t v21 = (void *)(v19 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 1))
            {
              *uint64_t v20 = *v21;
              int64_t v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    int64_t v23 = *v22;
    unint64_t v24 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    unint64_t v24 = *v22;
    int64_t v23 = (-1 << a1) - 1;
  }
  char *v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  long long v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

uint64_t type metadata completion function for LazyHStack()
{
  uint64_t result = type metadata accessor for _VariadicView.Tree();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AccessibilityChildrenModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ContextMenuPreviewModifier<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance LazyPlatformItemWriter<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t type metadata completion function for ToolbarStorage.GroupItem.CollapsedContent()
{
  uint64_t result = type metadata accessor for PlatformItemList.Item();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for ToolbarStorage.Entry()
{
  uint64_t result = type metadata accessor for ToolbarStorage.Entry.Kind(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t NavigationSplitView.init<>(sidebar:detail:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  MEMORY[0x1F4188790](a1);
  Swift::Int v10 = (char *)&v19[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  Swift::Int v13 = (char *)&v19[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v22 = xmmword_1883CF110;
  __int16 v23 = 0;
  char v24 = 0;
  __int16 v21 = 512;
  uint64_t v15 = v14();
  a2(v15);
  v19[0] = 0;
  v19[1] = 0;
  __int16 v20 = 0;
  return NavigationSplitView.init(visibility:pureProgrammaticVisibility:preferredCompactColumn:sidebar:content:detail:)((uint64_t *)&v22, &v21, v19, (uint64_t)v13, v16, (uint64_t)v10, a3, MEMORY[0x1E4F417F8], a5, a4);
}

uint64_t View.navigationSplitViewStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  Swift::Int v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for NavigationSplitStyleModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>>, NavigationSplitStyleModifier<BalancedNavigationSplitViewStyle>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail> and conformance NavigationSplitView<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail> and conformance NavigationSplitView<A, B, C>;
  if (!lazy protocol witness table cache variable for type NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail> and conformance NavigationSplitView<A, B, C>)
  {
    type metadata accessor for NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail> and conformance NavigationSplitView<A, B, C>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>>, NavigationSplitStyleModifier<BalancedNavigationSplitViewStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>>, NavigationSplitStyleModifier<BalancedNavigationSplitViewStyle>>)
  {
    type metadata accessor for ModifiedContent<NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>>();
    type metadata accessor for NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>(255, &lazy cache variable for type metadata for NavigationSplitStyleModifier<BalancedNavigationSplitViewStyle>, (void (*)(void))lazy protocol witness table accessor for type BalancedNavigationSplitViewStyle and conformance BalancedNavigationSplitViewStyle);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>>, NavigationSplitStyleModifier<BalancedNavigationSplitViewStyle>>);
    }
  }
}

void type metadata accessor for NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for NavigationSplitStyleModifier();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t type metadata accessor for NavigationSplitStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for ModifiedContent<NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>>)
  {
    type metadata accessor for NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>();
    type metadata accessor for NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>(255, &lazy cache variable for type metadata for NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>, (void (*)(void))lazy protocol witness table accessor for type AutomaticNavigationSplitViewStyle_Phone and conformance AutomaticNavigationSplitViewStyle_Phone);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AutomaticNavigationSplitViewStyle_Phone and conformance AutomaticNavigationSplitViewStyle_Phone()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomaticNavigationSplitViewStyle_Phone and conformance AutomaticNavigationSplitViewStyle_Phone;
  if (!lazy protocol witness table cache variable for type AutomaticNavigationSplitViewStyle_Phone and conformance AutomaticNavigationSplitViewStyle_Phone)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticNavigationSplitViewStyle_Phone and conformance AutomaticNavigationSplitViewStyle_Phone);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BalancedNavigationSplitViewStyle and conformance BalancedNavigationSplitViewStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type BalancedNavigationSplitViewStyle and conformance BalancedNavigationSplitViewStyle;
  if (!lazy protocol witness table cache variable for type BalancedNavigationSplitViewStyle and conformance BalancedNavigationSplitViewStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BalancedNavigationSplitViewStyle and conformance BalancedNavigationSplitViewStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for StyleableView.DefaultStyleModifier : StyleModifier in ResolvedNavigationSplitStyle()
{
  return lazy protocol witness table accessor for type NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle> and conformance NavigationSplitStyleModifier<A>(&lazy protocol witness table cache variable for type NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle> and conformance NavigationSplitStyleModifier<A>, (void (*)(uint64_t))type metadata accessor for NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle>);
}

uint64_t lazy protocol witness table accessor for type NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle> and conformance NavigationSplitStyleModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>()
{
  if (!lazy cache variable for type metadata for NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>)
  {
    unint64_t v0 = type metadata accessor for NavigationSplitView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>);
    }
  }
}

void type metadata accessor for NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle>()
{
  if (!lazy cache variable for type metadata for NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle>)
  {
    lazy protocol witness table accessor for type AutomaticNavigationSplitViewStyle and conformance AutomaticNavigationSplitViewStyle();
    unint64_t v0 = type metadata accessor for NavigationSplitStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AutomaticNavigationSplitViewStyle and conformance AutomaticNavigationSplitViewStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomaticNavigationSplitViewStyle and conformance AutomaticNavigationSplitViewStyle;
  if (!lazy protocol witness table cache variable for type AutomaticNavigationSplitViewStyle and conformance AutomaticNavigationSplitViewStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticNavigationSplitViewStyle and conformance AutomaticNavigationSplitViewStyle);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>>, NavigationSplitStyleModifier<BalancedNavigationSplitViewStyle>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>>, (void (*)(void))lazy protocol witness table accessor for type NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail> and conformance NavigationSplitView<A, B, C>);
}

uint64_t NavigationSplitView.init<>(columnVisibility:sidebar:detail:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X3>, void (*a3)(uint64_t)@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v24[1] = a4;
  uint64_t v25 = a3;
  uint64_t v28 = a6;
  uint64_t v27 = a8;
  uint64_t v26 = a9;
  MEMORY[0x1F4188790](a1);
  double v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __int16 v18 = v17;
  lazy protocol witness table accessor for type AnyNavigationSplitVisibility.ToDeprecatedTwoColumns and conformance AnyNavigationSplitVisibility.ToDeprecatedTwoColumns();
  uint64_t v19 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  v32[0] = a1;
  v32[1] = v19;
  __int16 v33 = v18;
  char v34 = 1;
  __int16 v31 = 512;
  uint64_t v20 = swift_retain();
  uint64_t v21 = a2(v20);
  v25(v21);
  swift_release();
  swift_release();
  v29[0] = 0;
  v29[1] = 0;
  __int16 v30 = 0;
  return NavigationSplitView.init(visibility:pureProgrammaticVisibility:preferredCompactColumn:sidebar:content:detail:)(v32, &v31, v29, (uint64_t)v16, v22, (uint64_t)v13, a5, MEMORY[0x1E4F417F8], v28, a7);
}

uint64_t NavigationSplitView.init(visibility:pureProgrammaticVisibility:preferredCompactColumn:sidebar:content:detail:)@<X0>(uint64_t *a1@<X0>, __int16 *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v13 = *a1;
  uint64_t v14 = a1[1];
  __int16 v15 = *((_WORD *)a1 + 8);
  char v16 = *((unsigned char *)a1 + 18);
  __int16 v17 = *a2;
  uint64_t v25 = a3[1];
  uint64_t v26 = *a3;
  char v23 = *((unsigned char *)a3 + 17);
  char v24 = *((unsigned char *)a3 + 16);
  __int16 v18 = (int *)type metadata accessor for NavigationSplitView();
  uint64_t v19 = v18[21];
  uint64_t v20 = a9 + v18[19];
  *(void *)uint64_t v20 = v13;
  *(void *)(v20 + 8) = v14;
  *(_WORD *)(v20 + 16) = v15;
  *(unsigned char *)(v20 + 18) = v16;
  *(_WORD *)(a9 + v19) = v17;
  uint64_t v21 = a9 + v18[20];
  *(void *)uint64_t v21 = v26;
  *(void *)(v21 + 8) = v25;
  *(unsigned char *)(v21 + 16) = v24;
  *(unsigned char *)(v21 + 17) = v23;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(a9, a4, a7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a8 - 8) + 32))(a9 + v18[17], a5, a8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a10 - 8) + 32))(a9 + v18[18], a6, a10);
}

uint64_t type metadata accessor for NavigationSplitView()
{
  return swift_getGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type AnyNavigationSplitVisibility.ToDeprecatedTwoColumns and conformance AnyNavigationSplitVisibility.ToDeprecatedTwoColumns()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToDeprecatedTwoColumns and conformance AnyNavigationSplitVisibility.ToDeprecatedTwoColumns;
  if (!lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToDeprecatedTwoColumns and conformance AnyNavigationSplitVisibility.ToDeprecatedTwoColumns)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToDeprecatedTwoColumns and conformance AnyNavigationSplitVisibility.ToDeprecatedTwoColumns);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToDeprecatedTwoColumns and conformance AnyNavigationSplitVisibility.ToDeprecatedTwoColumns;
  if (!lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToDeprecatedTwoColumns and conformance AnyNavigationSplitVisibility.ToDeprecatedTwoColumns)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToDeprecatedTwoColumns and conformance AnyNavigationSplitVisibility.ToDeprecatedTwoColumns);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToDeprecatedTwoColumns and conformance AnyNavigationSplitVisibility.ToDeprecatedTwoColumns;
  if (!lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToDeprecatedTwoColumns and conformance AnyNavigationSplitVisibility.ToDeprecatedTwoColumns)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToDeprecatedTwoColumns and conformance AnyNavigationSplitVisibility.ToDeprecatedTwoColumns);
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance SearchFieldConfigurationReader<A, B>.MakeContent@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return SearchFieldConfigurationReader.MakeContent.value.getter(*(void *)v2, *(_DWORD *)(v2 + 8), a1[2], a1[3], a1[4], a1[5], a2);
}

uint64_t partial apply for specialized closure #3 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)()
{
  return partial apply for specialized closure #3 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)((void (*)(unsigned char *, uint64_t, uint64_t, uint64_t, void))specialized NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:));
}

{
  return partial apply for specialized closure #3 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)((void (*)(unsigned char *, uint64_t, uint64_t, uint64_t, void))specialized NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:));
}

{
  return partial apply for specialized closure #3 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)((void (*)(unsigned char *, uint64_t, uint64_t, uint64_t, void))specialized NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:));
}

uint64_t type metadata accessor for SelectionBasedStorage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance SearchHasSuggestions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance SearchHasSuggestions(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type SearchHasSuggestions and conformance SearchHasSuggestions);
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<CellConfigurationKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<CellConfigurationKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<CellConfigurationKey> and conformance EnvironmentPropertyKey<A>)
  {
    _s7SwiftUI15ModifiedContentVyAA010_ViewList_E0VAA0F17TableCellModifierVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<CellConfigurationKey>, (uint64_t)&type metadata for CellConfigurationKey, (uint64_t)&protocol witness table for CellConfigurationKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<CellConfigurationKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewList_View, ListTableCellModifier>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI15ModifiedContentVyAA010_ViewList_E0VAA0F17TableCellModifierVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t type metadata completion function for NavigationStack()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for ContentShapeKindResponder()
{
  type metadata accessor for _ContentShapeKindModifier();
  swift_getWitnessTable();
  uint64_t result = type metadata accessor for ContentResponderHelper();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t View.navigationDestination<A, B>(for:destination:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v11[0] = a2;
  v11[1] = a3;
  swift_retain();
  uint64_t v9 = type metadata accessor for NavigationDestinationModifier();
  MEMORY[0x18C113660](v11, a4, v9, a7);
  return swift_release();
}

uint64_t EnvironmentValues.undoManager.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<UndoManagerKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<UndoManagerKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<UndoManagerKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<UndoManagerKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

void type metadata accessor for EnvironmentPropertyKey<UndoManagerKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<UndoManagerKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UndoManagerKey>);
    }
  }
}

uint64_t closure #1 in static LazyVStack._makeView(view:inputs:)(uint64_t a1)
{
  _OWORD v5[2] = type metadata accessor for LazyVStack();
  uint64_t v6 = type metadata accessor for _VariadicView.Tree();
  uint64_t v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v5, v6, MEMORY[0x1E4FBC248], v2, MEMORY[0x1E4FBC278], v3);
  return v7;
}

uint64_t static LazyVStack._makeView(view:inputs:)()
{
  return static View.makeDebuggableView(view:inputs:)();
}

uint64_t type metadata accessor for LazyVStack()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for KeyPress.Handler.Subject()
{
  uint64_t result = type metadata accessor for CharacterSet();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for AllowsHitTestingResponder()
{
  return swift_initClassMetadata2();
}

unsigned char *storeEnumTagSinglePayload for NavigationSplitViewColumn(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t assignWithCopy for SharingPickerHostModifier(uint64_t a1, long long *a2)
{
  unsigned int v4 = (void *)(a1 + 112);
  unsigned int v6 = (uint64_t *)(a2 + 7);
  uint64_t v5 = *((void *)a2 + 14);
  if (*(void *)(a1 + 112) != 1)
  {
    if (v5 == 1)
    {
      outlined destroy of SharingPickerHostModifier.Model(a1);
      long long v13 = a2[3];
      long long v15 = *a2;
      long long v14 = a2[1];
      *(_OWORD *)(a1 + 32) = a2[2];
      *(_OWORD *)(a1 + 48) = v13;
      *(_OWORD *)a1 = v15;
      *(_OWORD *)(a1 + 16) = v14;
      long long v16 = a2[7];
      long long v18 = a2[4];
      long long v17 = a2[5];
      *(_OWORD *)(a1 + 96) = a2[6];
      *(_OWORD *)(a1 + 112) = v16;
      *(_OWORD *)(a1 + 64) = v18;
      *(_OWORD *)(a1 + 80) = v17;
      goto LABEL_46;
    }
    uint64_t v24 = *((void *)a2 + 9);
    if (*(void *)(a1 + 72) == 1)
    {
      if (v24 == 1)
      {
        long long v25 = *a2;
        long long v26 = a2[2];
        *(_OWORD *)(a1 + 16) = a2[1];
        *(_OWORD *)(a1 + 32) = v26;
        *(_OWORD *)a1 = v25;
        long long v27 = a2[3];
        long long v28 = a2[4];
        long long v29 = a2[6];
        *(_OWORD *)(a1 + 80) = a2[5];
        *(_OWORD *)(a1 + 96) = v29;
        *(_OWORD *)(a1 + 48) = v27;
        *(_OWORD *)(a1 + 64) = v28;
        goto LABEL_39;
      }
      *(void *)a1 = *(void *)a2;
      uint64_t v46 = *((void *)a2 + 1);
      uint64_t v47 = *((void *)a2 + 2);
      uint64_t v48 = *((void *)a2 + 3);
      uint64_t v49 = *((void *)a2 + 4);
      char v50 = *((unsigned char *)a2 + 40);
      outlined copy of AnyShareConfiguration.Storage(v46, v47, v48, v49, v50);
      *(void *)(a1 + 8) = v46;
      *(void *)(a1 + 16) = v47;
      *(void *)(a1 + 24) = v48;
      *(void *)(a1 + 32) = v49;
      *(unsigned char *)(a1 + 40) = v50;
      if (*((void *)a2 + 9))
      {
        uint64_t v51 = *((void *)a2 + 6);
        uint64_t v52 = *((void *)a2 + 7);
        char v53 = *((unsigned char *)a2 + 64);
        outlined copy of Text.Storage(v51, v52, v53);
        *(void *)(a1 + 48) = v51;
        *(void *)(a1 + 56) = v52;
        *(unsigned char *)(a1 + 64) = v53;
        *(void *)(a1 + 72) = *((void *)a2 + 9);
        swift_bridgeObjectRetain();
        if (!*((void *)a2 + 13)) {
          goto LABEL_27;
        }
      }
      else
      {
        long long v76 = a2[4];
        *(_OWORD *)(a1 + 48) = a2[3];
        *(_OWORD *)(a1 + 64) = v76;
        if (!*((void *)a2 + 13))
        {
LABEL_27:
          long long v77 = a2[6];
          *(_OWORD *)(a1 + 80) = a2[5];
          *(_OWORD *)(a1 + 96) = v77;
          goto LABEL_39;
        }
      }
      goto LABEL_36;
    }
    if (v24 == 1)
    {
      outlined destroy of AnyIdentifiableShareConfiguration(a1);
      long long v42 = a2[1];
      long long v41 = a2[2];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v42;
      *(_OWORD *)(a1 + 32) = v41;
      long long v43 = a2[6];
      long long v45 = a2[3];
      long long v44 = a2[4];
      *(_OWORD *)(a1 + 80) = a2[5];
      *(_OWORD *)(a1 + 96) = v43;
      *(_OWORD *)(a1 + 48) = v45;
      *(_OWORD *)(a1 + 64) = v44;
      goto LABEL_39;
    }
    *(void *)a1 = *(void *)a2;
    uint64_t v54 = *((void *)a2 + 1);
    uint64_t v55 = *((void *)a2 + 2);
    uint64_t v56 = *((void *)a2 + 3);
    uint64_t v57 = *((void *)a2 + 4);
    char v58 = *((unsigned char *)a2 + 40);
    outlined copy of AnyShareConfiguration.Storage(v54, v55, v56, v57, v58);
    uint64_t v59 = *(void *)(a1 + 8);
    uint64_t v60 = *(void *)(a1 + 16);
    uint64_t v61 = *(void *)(a1 + 24);
    uint64_t v62 = *(void *)(a1 + 32);
    *(void *)(a1 + 8) = v54;
    *(void *)(a1 + 16) = v55;
    *(void *)(a1 + 24) = v56;
    *(void *)(a1 + 32) = v57;
    char v63 = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v58;
    outlined consume of AnyShareConfiguration.Storage(v59, v60, v61, v62, v63);
    uint64_t v64 = (_OWORD *)(a1 + 48);
    unint64_t v65 = a2 + 3;
    uint64_t v66 = *((void *)a2 + 9);
    if (*(void *)(a1 + 72))
    {
      if (v66)
      {
        uint64_t v67 = *((void *)a2 + 6);
        uint64_t v68 = *((void *)a2 + 7);
        char v69 = *((unsigned char *)a2 + 64);
        outlined copy of Text.Storage(v67, v68, v69);
        uint64_t v70 = *(void *)(a1 + 48);
        uint64_t v71 = *(void *)(a1 + 56);
        char v72 = *(unsigned char *)(a1 + 64);
        *(void *)(a1 + 48) = v67;
        *(void *)(a1 + 56) = v68;
        *(unsigned char *)(a1 + 64) = v69;
        outlined consume of Text.Storage(v70, v71, v72);
        *(void *)(a1 + 72) = *((void *)a2 + 9);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Text(a1 + 48);
        long long v81 = a2[4];
        *uint64_t v64 = *v65;
        *(_OWORD *)(a1 + 64) = v81;
      }
    }
    else if (v66)
    {
      uint64_t v78 = *((void *)a2 + 6);
      uint64_t v79 = *((void *)a2 + 7);
      char v80 = *((unsigned char *)a2 + 64);
      outlined copy of Text.Storage(v78, v79, v80);
      *(void *)(a1 + 48) = v78;
      *(void *)(a1 + 56) = v79;
      *(unsigned char *)(a1 + 64) = v80;
      *(void *)(a1 + 72) = *((void *)a2 + 9);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v82 = a2[4];
      *uint64_t v64 = *v65;
      *(_OWORD *)(a1 + 64) = v82;
    }
    uint64_t v83 = (_OWORD *)(a1 + 80);
    uint64_t v84 = a2 + 5;
    uint64_t v85 = *((void *)a2 + 13);
    if (*(void *)(a1 + 104))
    {
      if (v85)
      {
        uint64_t v86 = *((void *)a2 + 10);
        uint64_t v87 = *((void *)a2 + 11);
        char v88 = *((unsigned char *)a2 + 96);
        outlined copy of Text.Storage(v86, v87, v88);
        uint64_t v89 = *(void *)(a1 + 80);
        uint64_t v90 = *(void *)(a1 + 88);
        char v91 = *(unsigned char *)(a1 + 96);
        *(void *)(a1 + 80) = v86;
        *(void *)(a1 + 88) = v87;
        *(unsigned char *)(a1 + 96) = v88;
        outlined consume of Text.Storage(v89, v90, v91);
        *(void *)(a1 + 104) = *((void *)a2 + 13);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Text(a1 + 80);
        long long v95 = a2[6];
        *uint64_t v83 = *v84;
        *(_OWORD *)(a1 + 96) = v95;
      }
    }
    else
    {
      if (v85)
      {
LABEL_36:
        uint64_t v92 = *((void *)a2 + 10);
        uint64_t v93 = *((void *)a2 + 11);
        char v94 = *((unsigned char *)a2 + 96);
        outlined copy of Text.Storage(v92, v93, v94);
        *(void *)(a1 + 80) = v92;
        *(void *)(a1 + 88) = v93;
        *(unsigned char *)(a1 + 96) = v94;
        *(void *)(a1 + 104) = *((void *)a2 + 13);
        swift_bridgeObjectRetain();
        goto LABEL_39;
      }
      long long v96 = a2[6];
      *uint64_t v83 = *v84;
      *(_OWORD *)(a1 + 96) = v96;
    }
LABEL_39:
    uint64_t v75 = *v6;
    if (*v4)
    {
      if (v75)
      {
        uint64_t v97 = *((void *)a2 + 15);
        *(void *)(a1 + 112) = v75;
        *(void *)(a1 + 120) = v97;
        swift_retain();
        swift_release();
        goto LABEL_46;
      }
      swift_release();
    }
    else if (v75)
    {
      goto LABEL_43;
    }
LABEL_45:
    *(_OWORD *)unsigned int v4 = *(_OWORD *)v6;
    goto LABEL_46;
  }
  if (v5 != 1)
  {
    if (*((void *)a2 + 9) == 1)
    {
      long long v19 = *a2;
      long long v20 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v20;
      *(_OWORD *)a1 = v19;
      long long v21 = a2[3];
      long long v22 = a2[4];
      long long v23 = a2[6];
      *(_OWORD *)(a1 + 80) = a2[5];
      *(_OWORD *)(a1 + 96) = v23;
      *(_OWORD *)(a1 + 48) = v21;
      *(_OWORD *)(a1 + 64) = v22;
      goto LABEL_24;
    }
    *(void *)a1 = *(void *)a2;
    uint64_t v30 = *((void *)a2 + 1);
    uint64_t v31 = *((void *)a2 + 2);
    uint64_t v32 = *((void *)a2 + 3);
    uint64_t v33 = *((void *)a2 + 4);
    char v34 = *((unsigned char *)a2 + 40);
    outlined copy of AnyShareConfiguration.Storage(v30, v31, v32, v33, v34);
    *(void *)(a1 + 8) = v30;
    *(void *)(a1 + 16) = v31;
    *(void *)(a1 + 24) = v32;
    *(void *)(a1 + 32) = v33;
    *(unsigned char *)(a1 + 40) = v34;
    if (*((void *)a2 + 9))
    {
      uint64_t v35 = *((void *)a2 + 6);
      uint64_t v36 = *((void *)a2 + 7);
      char v37 = *((unsigned char *)a2 + 64);
      outlined copy of Text.Storage(v35, v36, v37);
      *(void *)(a1 + 48) = v35;
      *(void *)(a1 + 56) = v36;
      *(unsigned char *)(a1 + 64) = v37;
      *(void *)(a1 + 72) = *((void *)a2 + 9);
      swift_bridgeObjectRetain();
      if (*((void *)a2 + 13))
      {
LABEL_13:
        uint64_t v38 = *((void *)a2 + 10);
        uint64_t v39 = *((void *)a2 + 11);
        char v40 = *((unsigned char *)a2 + 96);
        outlined copy of Text.Storage(v38, v39, v40);
        *(void *)(a1 + 80) = v38;
        *(void *)(a1 + 88) = v39;
        *(unsigned char *)(a1 + 96) = v40;
        *(void *)(a1 + 104) = *((void *)a2 + 13);
        swift_bridgeObjectRetain();
        goto LABEL_24;
      }
    }
    else
    {
      long long v73 = a2[4];
      *(_OWORD *)(a1 + 48) = a2[3];
      *(_OWORD *)(a1 + 64) = v73;
      if (*((void *)a2 + 13)) {
        goto LABEL_13;
      }
    }
    long long v74 = a2[6];
    *(_OWORD *)(a1 + 80) = a2[5];
    *(_OWORD *)(a1 + 96) = v74;
LABEL_24:
    uint64_t v75 = *v6;
    if (!*v6) {
      goto LABEL_45;
    }
LABEL_43:
    uint64_t v98 = *((void *)a2 + 15);
    *(void *)(a1 + 112) = v75;
    *(void *)(a1 + 120) = v98;
    swift_retain();
    goto LABEL_46;
  }
  long long v7 = *a2;
  long long v8 = a2[1];
  long long v9 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)a1 = v7;
  *(_OWORD *)(a1 + 16) = v8;
  long long v10 = a2[4];
  long long v11 = a2[5];
  long long v12 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v12;
  *(_OWORD *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 80) = v11;
LABEL_46:
  *(void *)(a1 + 128) = *((void *)a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in TabView<A, B>.TransformEnvironment()
{
  return &protocol witness table for TabView<A, B>.TransformEnvironment;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TabView<A, B>.TransformEnvironment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA68](a1, a2, a3, a4, a5, a6, &protocol witness table for TabView<A, B>.TransformEnvironment);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance GridRow<A>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  return static GridRow._makeViewList(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in DisableCollectionViewGroupedListsFeature()
{
  return &protocol witness table for DisableCollectionViewGroupedListsFeature;
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityCustomPropertyModifier<A, B, C>()
{
  return &protocol witness table for AccessibilityCustomPropertyModifier<A, B, C>;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in AccessibilityCombinedLabeledContent()
{
  return &protocol witness table for AccessibilityCombinedLabeledContent;
}

_UNKNOWN **base witness table accessor for View in _NavigationStackStyleConfiguration.Root()
{
  return &protocol witness table for _NavigationStackStyleConfiguration.Root;
}

_UNKNOWN **base witness table accessor for ViewModifier in NavigationDestinationScopeModifier()
{
  return &protocol witness table for NavigationDestinationScopeModifier;
}

_UNKNOWN **base witness table accessor for View in LabeledContentStyleConfiguration.Label()
{
  return &protocol witness table for LabeledContentStyleConfiguration.Label;
}

_UNKNOWN **base witness table accessor for View in LabeledContentStyleConfiguration.Content()
{
  return &protocol witness table for LabeledContentStyleConfiguration.Content;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ResetTabViewEnvironmentModifier()
{
  return &protocol witness table for ResetTabViewEnvironmentModifier;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ResetSearchEnvironmentModifier()
{
  return &protocol witness table for ResetSearchEnvironmentModifier;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ButtonContainerIsBorderedInput()
{
  return &protocol witness table for ButtonContainerIsBorderedInput;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in TransformScrollBounceBehavior()
{
  return &protocol witness table for TransformScrollBounceBehavior;
}

void static NavigationSplitViewVisibility.all.getter(_WORD *a1@<X8>)
{
  *a1 = 2;
}

_UNKNOWN **base witness table accessor for ViewModifier in NavigationDestinationModifier<A, B>()
{
  return &protocol witness table for NavigationDestinationModifier<A, B>;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ResetFormEnvironmentModifier()
{
  return &protocol witness table for ResetFormEnvironmentModifier;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in PreferBaselineAlignedHeaders()
{
  return &protocol witness table for PreferBaselineAlignedHeaders;
}

_UNKNOWN **base witness table accessor for View in LabelGroupStyleConfiguration.Content()
{
  return &protocol witness table for LabelGroupStyleConfiguration.Content;
}

uint64_t partial apply for implicit closure #1 in static _PreferenceWritingModifier._makeWidgetControlConfiguration(modifier:inputs:body:)()
{
  return implicit closure #1 in static _PreferenceWritingModifier._makeWidgetControlConfiguration(modifier:inputs:body:)();
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in IsInSecureDrawingHierarchy()
{
  return &protocol witness table for IsInSecureDrawingHierarchy;
}

_UNKNOWN **base witness table accessor for View in TabViewStyleConfiguration<A>.Content()
{
  return &protocol witness table for TabViewStyleConfiguration<A>.Content;
}

_UNKNOWN **base witness table accessor for View in SectionStyleConfiguration.Actions()
{
  return &protocol witness table for SectionStyleConfiguration.Actions;
}

uint64_t type metadata completion function for ObjectFallbackDelegateBox()
{
  return type metadata completion function for FallbackDelegateBox();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance NavigationStackStyledCore<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return static NavigationStackStyledCore._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), a4);
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance FocusStateBindingModifier<A>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  return static FocusStateBindingModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), *(void *)(a4 + 24), a5);
}

uint64_t partial apply for implicit closure #1 in static FocusStateBindingModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static FocusStateBindingModifier._makeView(modifier:inputs:body:)(*(_DWORD *)(v0 + 32));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _CoordinateSpaceModifier<A>()
{
  return static _CoordinateSpaceModifier.== infix(_:_:)();
}

uint64_t partial apply for implicit closure #1 in static ToolbarRemovingModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static ToolbarRemovingModifier._makeView(modifier:inputs:body:)();
}

_UNKNOWN **base witness table accessor for View in HelpStyleConfiguration.Content()
{
  return &protocol witness table for HelpStyleConfiguration.Content;
}

uint64_t partial apply for closure #1 in static CollectionViewListRoot._makeView(view:inputs:)(uint64_t a1)
{
  return closure #1 in static CollectionViewListRoot._makeView(view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AlertTransformModifier<A>@<D0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, double *a3@<X8>)
{
  return static AlertTransformModifier._makeView(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for GradientProvider.resolve(in:) in conformance CubicGradientProvider@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  return CubicGradientProvider.resolve(in:)(a1, *v2, v2[1], v2[2], a2);
}

void static SearchFieldPlacement.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static SearchFieldPlacement.NavigationBarDrawerDisplayMode.always.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

unsigned char *static SearchFieldPlacement.navigationBarDrawer(displayMode:)@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _TabViewStyleWriter<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static _TabViewStyleWriter._makeInputs(modifier:inputs:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _TabViewStyleWriter<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA68](a1, a2, a3, a4, a5, a6, &protocol witness table for _TabViewStyleWriter<A>);
}

double protocol witness for static View._makeView(view:inputs:) in conformance NavigationStackCore<A>@<D0>(uint64_t a1@<X2>, double *a2@<X8>)
{
  return static NavigationStackCore._makeView(view:inputs:)(*(void *)(a1 + 16), a2);
}

uint64_t associated type witness table accessor for LabelGroupStyle_v0.Foreground : ShapeStyle in BodyLabelGroupStyle()
{
  return MEMORY[0x1E4F40950];
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in IsInLazyContainer()
{
  return &protocol witness table for IsInLazyContainer;
}

uint64_t partial apply for closure #2 in ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for closure #2 in ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v5;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = *(void *)(type metadata accessor for CountingIndex() - 8);
  return closure #1 in ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:)(a1, v2 + ((*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), a2);
}

uint64_t partial apply for implicit closure #1 in static CommandsModifier._makeScene(modifier:inputs:body:)()
{
  return implicit closure #1 in static CommandsModifier._makeScene(modifier:inputs:body:)(*(_DWORD *)(v0 + 32));
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedTabView<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static ResolvedTabView._makeViewList(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

void partial apply for closure #1 in _UIHostingView.invalidatesIntrinsicContentSizeOnIdealSizeChange.didset(double *a1, double *a2)
{
  closure #1 in _UIHostingView.invalidatesIntrinsicContentSizeOnIdealSizeChange.didset(a1, a2, *(void *)(v2 + 32));
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in MultiViewLabel()
{
  return &protocol witness table for MultiViewLabel;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ViewThatFits<A>()
{
  return static ViewThatFits._makeView(view:inputs:)();
}

void static ButtonRole.cancel.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t type metadata completion function for NavigationSplitView.SidebarContent()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for NavigationSplitView.ContentListContent()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t protocol witness for Projection.get(base:) in conformance StringToAttributedStringProjection()
{
  uint64_t v0 = type metadata accessor for AttributeContainer();
  MEMORY[0x1F4188790](v0 - 8);
  swift_bridgeObjectRetain();
  AttributeContainer.init()();
  return AttributedString.init(_:attributes:)();
}

uint64_t specialized URLDocumentCreation.documentBrowser(_:didPickDocumentsAt:)(uint64_t a1)
{
  _s10Foundation3URLVSgMaTm_9(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v2 - 8);
  unsigned int v4 = (char *)&v11 - v3;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = MEMORY[0x1F4188790](v5);
  long long v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a1 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t, double))(v6 + 16))(v4, a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), v5, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v4, v5);
      URLDocumentCreation.presentDocument(at:)((uint64_t)v9);
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v6 + 56))(v4, 1, 1, v5, v7);
  }
  return _s10Foundation3URLVSgWOhTm_4((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
}

uint64_t PresentationState.base.willset(uint64_t a1)
{
  uint64_t v2 = v1;
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  long long v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.presentation.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    _s2os6LoggerVSgWOhTm_2((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Logger?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    uint64_t v39 = 0;
    unint64_t v40 = 0xE000000000000000;
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    uint64_t v39 = 0xD00000000000001CLL;
    unint64_t v40 = 0x800000018833E710;
    v11._uint64_t countAndFlagsBits = PresentationState.Base.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._uint64_t countAndFlagsBits = 0x209286E220;
    v12._object = (void *)0xA500000000000000;
    String.append(_:)(v12);
    v13._uint64_t countAndFlagsBits = PresentationState.Base.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    uint64_t v14 = v39;
    unint64_t v15 = v40;
    swift_bridgeObjectRetain();
    long long v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v35 = v14;
      uint64_t v18 = swift_slowAlloc();
      uint64_t v36 = v2;
      long long v19 = (uint8_t *)v18;
      uint64_t v20 = swift_slowAlloc();
      uint64_t v39 = v20;
      uint64_t v37 = a1;
      *(_DWORD *)long long v19 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v15, &v39);
      a1 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1872C6000, v16, v17, "%s", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v20, -1, -1);
      long long v21 = v19;
      uint64_t v2 = v36;
      MEMORY[0x18C119C60](v21, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  long long v22 = (void *)PresentationState.Base.presentedVC.getter();

  if (!v22)
  {
    uint64_t v23 = PresentationState.Base.presentedVC.getter();
    if (v23)
    {
      uint64_t v24 = (void *)v23;
      id v25 = *(id *)(v23 + direct field offset for UIHostingController.host);

      uint64_t v39 = 0;
      LOBYTE(v40) = 1;
      type metadata accessor for _UIHostingView<AnyView>();
      lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
      ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
    }
  }
  char v26 = PresentationState.Base.willPresentAgainAfterDismiss.getter();
  uint64_t v27 = specialized static PresentationState.Base.dismissedPresentations(from:to:)(v2, a1);
  uint64_t v28 = *(void *)(v27 + 16);
  if (v28)
  {
    uint64_t v29 = v27 + 32;
    BOOL v30 = (v26 & 1) == 0;
    do
    {
      outlined init with copy of SheetPreference(v29, (uint64_t)&v39);
      unint64_t v31 = v40;
      uint64_t v32 = v41;
      outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v40, v41);
      outlined destroy of SheetPreference((uint64_t)&v39);
      if (v31)
      {
        uint64_t v33 = swift_allocObject();
        *(void *)(v33 + 16) = v31;
        *(void *)(v33 + 24) = v32;
        *(unsigned char *)(v33 + 32) = v30;
        swift_retain();
        static Update.enqueueAction(_:)();
        swift_release();
        outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v31, v32);
      }
      v29 += 112;
      --v28;
    }
    while (v28);
  }
  return swift_bridgeObjectRelease();
}

uint64_t outlined destroy of Logger?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s2os6LoggerVSgWOhTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  _s2os6LoggerVSgMaTm_0(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t _s2os6LoggerVSgWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s2os6LoggerVSgWOhTm_2(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for (PresentationState.Base, PresentationState.Base)()
{
  if (!lazy cache variable for type metadata for (PresentationState.Base, PresentationState.Base))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (PresentationState.Base, PresentationState.Base));
    }
  }
}

uint64_t PresentationState.Base.willPresentAgainAfterDismiss.getter()
{
  outlined init with copy of PresentationState.Base(v0, (uint64_t)&v4);
  uint64_t result = 0;
  switch(v7[105])
  {
    case 2:
    case 3:

      uint64_t v2 = (id *)v5;
      goto LABEL_5;
    case 4:
      goto LABEL_3;
    case 5:

      uint64_t v3 = (id *)v5;
      goto LABEL_10;
    case 6:
      goto LABEL_9;
    case 7:
    case 9:
      outlined destroy of PresentationState.Base((uint64_t)&v4);
      goto LABEL_11;
    case 8:

      outlined destroy of SheetPreference((uint64_t)v7);
LABEL_9:
      uint64_t v3 = &v4;
LABEL_10:
      outlined destroy of SheetPreference((uint64_t)v3);
LABEL_11:
      uint64_t result = 1;
      break;
    case 0xA:
      return result;
    default:

LABEL_3:
      uint64_t v2 = &v4;
LABEL_5:
      outlined destroy of SheetPreference((uint64_t)v2);
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t specialized static PresentationState.Base.dismissedPresentations(from:to:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of PresentationState.Base(a1, (uint64_t)&v121);
  outlined init with copy of PresentationState.Base(a2, (uint64_t)v135);
  if (v134 == 4)
  {
    id v6 = (char *)&v121;
LABEL_8:
    outlined destroy of SheetPreference((uint64_t)v6);
    uint64_t v7 = v135;
LABEL_9:
    outlined destroy of PresentationState.Base((uint64_t)v7);
    return MEMORY[0x1E4FBC860];
  }
  if (v134 == 8)
  {

    if (v144 == 2)
    {
      outlined init with copy of PresentationState.Base((uint64_t)v135, (uint64_t)v90);

      outlined init with copy of SheetPreference((uint64_t)&v121, (uint64_t)&v115);
      outlined init with copy of SheetPreference((uint64_t)&v128, (uint64_t)&v109);
      long long v107 = *(_OWORD *)&v90[72];
      v108[0] = *(_OWORD *)&v90[88];
      *(_OWORD *)((char *)v108 + 9) = *(_OWORD *)&v90[97];
      long long v103 = *(_OWORD *)&v90[8];
      long long v104 = *(_OWORD *)&v90[24];
      long long v105 = *(_OWORD *)&v90[40];
      long long v106 = *(_OWORD *)&v90[56];
      uint64_t v3 = *((void *)&v116 + 1);
      uint64_t v4 = *((void *)&v110 + 1);
      outlined init with copy of SheetPreference((uint64_t)&v115, (uint64_t)&v97);
      uint64_t v5 = &v103;
      goto LABEL_22;
    }
    if (v144 != 8)
    {
      if (v144 != 9) {
        goto LABEL_26;
      }
      outlined init with copy of PresentationState.Base((uint64_t)v135, (uint64_t)v90);
      outlined init with copy of SheetPreference((uint64_t)&v121, (uint64_t)&v115);
      long long v113 = *(_OWORD *)&v90[64];
      v114[0] = *(_OWORD *)&v90[80];
      *(_OWORD *)((char *)v114 + 9) = *(_OWORD *)&v90[89];
      long long v109 = *(_OWORD *)v90;
      long long v110 = *(_OWORD *)&v90[16];
      long long v112 = *(_OWORD *)&v90[48];
      long long v111 = *(_OWORD *)&v90[32];
      outlined init with copy of SheetPreference((uint64_t)&v128, (uint64_t)&v103);
      uint64_t v3 = *((void *)&v116 + 1);
      uint64_t v4 = *((void *)&v104 + 1);
      outlined init with copy of SheetPreference((uint64_t)&v115, (uint64_t)&v97);
      uint64_t v5 = &v109;
LABEL_22:
      outlined init with copy of SheetPreference((uint64_t)v5, (uint64_t)v88);
      if (v3 == v4 && *((void *)&v98 + 1) == v89)
      {
        outlined destroy of SheetPreference((uint64_t)v88);
        outlined destroy of SheetPreference((uint64_t)&v97);
        type metadata accessor for Data?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SheetPreference>, (uint64_t)&type metadata for SheetPreference, MEMORY[0x1E4FBBE00]);
        uint64_t v8 = swift_allocObject();
        *(_OWORD *)(v8 + 16) = xmmword_18834BB80;
        outlined init with copy of SheetPreference((uint64_t)&v115, v8 + 32);
        outlined destroy of SheetPreference((uint64_t)&v103);
        outlined destroy of SheetPreference((uint64_t)&v109);
        outlined destroy of SheetPreference((uint64_t)&v115);
        outlined destroy of SheetPreference((uint64_t)&v128);
        unint64_t v15 = &v121;
LABEL_80:
        outlined destroy of SheetPreference((uint64_t)v15);
        uint64_t v48 = v135;
        goto LABEL_81;
      }
      outlined destroy of SheetPreference((uint64_t)v88);
      outlined destroy of SheetPreference((uint64_t)&v97);
      outlined destroy of SheetPreference((uint64_t)&v103);
      outlined destroy of SheetPreference((uint64_t)&v109);
      outlined destroy of SheetPreference((uint64_t)&v115);
LABEL_26:
      *(_OWORD *)&v90[64] = v125;
      *(_OWORD *)&v90[80] = v126[0];
      *(_OWORD *)&v90[89] = *(_OWORD *)((char *)v126 + 9);
      *(_OWORD *)uint64_t v90 = v121;
      *(_OWORD *)&v90[16] = v122;
      *(_OWORD *)&v90[32] = v123;
      *(_OWORD *)&v90[48] = v124;
      long long v119 = v132;
      v120[0] = *(_OWORD *)v133;
      *(_OWORD *)((char *)v120 + 9) = *(_OWORD *)&v133[9];
      long long v115 = v128;
      long long v116 = v129;
      long long v118 = v131;
      long long v117 = v130;
      PresentationState.Base.lastPresentation.getter((uint64_t)&v109);
      uint64_t v16 = v109;
      if ((void)v109)
      {
        uint64_t v17 = *((void *)&v110 + 1);
        outlined destroy of SheetPreference((uint64_t)&v109);
        if (*(void *)&v90[24] == v17)
        {
          uint64_t v8 = MEMORY[0x1E4FBC860];
          goto LABEL_37;
        }
      }
      else
      {
        _ss11AnyHashableVSgWOhTm_3((uint64_t)&v109, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
        uint64_t v17 = 0;
      }
      outlined init with copy of SheetPreference((uint64_t)v90, (uint64_t)&v109);
      uint64_t v8 = MEMORY[0x1E4FBC860];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1, (char *)v8);
      }
      unint64_t v20 = *(void *)(v8 + 16);
      unint64_t v21 = *(void *)(v8 + 24);
      unint64_t v22 = v20 + 1;
      if (v20 >= v21 >> 1)
      {
        long long v73 = (char *)v8;
        unint64_t v74 = *(void *)(v8 + 16);
        uint64_t v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v20 + 1, 1, v73);
        unint64_t v20 = v74;
        uint64_t v8 = (uint64_t)v75;
      }
      *(void *)(v8 + 16) = v22;
      uint64_t v23 = (_OWORD *)(v8 + 112 * v20);
      long long v24 = v109;
      long long v25 = v111;
      void v23[3] = v110;
      v23[4] = v25;
      v23[2] = v24;
      long long v26 = v112;
      long long v27 = v113;
      long long v28 = v114[0];
      *(_OWORD *)((char *)v23 + 121) = *(_OWORD *)((char *)v114 + 9);
      v23[6] = v27;
      v23[7] = v28;
      _OWORD v23[5] = v26;
      if (!v16)
      {
        BOOL v29 = 0;
LABEL_41:
        outlined init with copy of SheetPreference((uint64_t)&v115, (uint64_t)&v109);
        outlined init with copy of SheetPreference((uint64_t)v90, (uint64_t)&v103);
        if (v29 || *((void *)&v110 + 1) == *((void *)&v104 + 1))
        {
          outlined destroy of SheetPreference((uint64_t)&v103);
          outlined destroy of SheetPreference((uint64_t)&v109);
        }
        else
        {
          outlined destroy of SheetPreference((uint64_t)&v103);
          outlined destroy of SheetPreference((uint64_t)&v109);
          outlined init with copy of SheetPreference((uint64_t)&v115, (uint64_t)&v97);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v8 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1, (char *)v8);
          }
          unint64_t v33 = *(void *)(v8 + 16);
          unint64_t v32 = *(void *)(v8 + 24);
          if (v33 >= v32 >> 1) {
            uint64_t v8 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v32 > 1), v33 + 1, 1, (char *)v8);
          }
          *(void *)(v8 + 16) = v33 + 1;
          char v34 = (_OWORD *)(v8 + 112 * v33);
          long long v35 = v97;
          long long v36 = v99;
          long long v34[3] = v98;
          v34[4] = v36;
          v34[2] = v35;
          long long v37 = v100;
          long long v38 = v101;
          long long v39 = v102[0];
          *(_OWORD *)((char *)v34 + 121) = *(_OWORD *)((char *)v102 + 9);
          v34[6] = v38;
          v34[7] = v39;
          v34[5] = v37;
        }
        outlined destroy of SheetPreference((uint64_t)&v115);
        unint64_t v15 = (long long *)v90;
        goto LABEL_80;
      }
LABEL_37:
      BOOL v29 = *((void *)&v116 + 1) == v17;
      goto LABEL_41;
    }
    outlined init with copy of PresentationState.Base((uint64_t)v135, (uint64_t)v90);

    long long v119 = v125;
    v120[0] = v126[0];
    *(_OWORD *)((char *)v120 + 9) = *(_OWORD *)((char *)v126 + 9);
    long long v115 = v121;
    long long v116 = v122;
    long long v118 = v124;
    long long v117 = v123;
    long long v113 = *(_OWORD *)&v90[64];
    v114[0] = *(_OWORD *)&v90[80];
    *(_OWORD *)((char *)v114 + 9) = *(_OWORD *)&v90[89];
    long long v109 = *(_OWORD *)v90;
    long long v110 = *(_OWORD *)&v90[16];
    long long v112 = *(_OWORD *)&v90[48];
    long long v111 = *(_OWORD *)&v90[32];
    long long v107 = v132;
    v108[0] = *(_OWORD *)v133;
    *(_OWORD *)((char *)v108 + 9) = *(_OWORD *)&v133[9];
    long long v103 = v128;
    long long v104 = v129;
    long long v105 = v130;
    long long v106 = v131;
    long long v101 = v95;
    v102[0] = v96[0];
    *(_OWORD *)((char *)v102 + 9) = *(_OWORD *)((char *)v96 + 9);
    long long v97 = v91;
    long long v98 = v92;
    long long v99 = v93;
    long long v100 = v94;
    uint64_t v18 = *((void *)&v122 + 1);
    uint64_t v19 = *(void *)&v90[24];
    outlined init with copy of SheetPreference((uint64_t)&v115, (uint64_t)v88);
    outlined init with copy of SheetPreference((uint64_t)&v97, (uint64_t)v86);
    if (v18 == v19)
    {
      outlined destroy of SheetPreference((uint64_t)v86);
      outlined destroy of SheetPreference((uint64_t)v88);
    }
    else
    {
      uint64_t v46 = v89;
      uint64_t v47 = v87;
      outlined destroy of SheetPreference((uint64_t)v86);
      outlined destroy of SheetPreference((uint64_t)v88);
      if (v46 != v47)
      {
        outlined init with copy of SheetPreference((uint64_t)&v115, (uint64_t)&v80);
        uint64_t v8 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
        unint64_t v51 = *(void *)(v8 + 16);
        unint64_t v50 = *(void *)(v8 + 24);
        if (v51 >= v50 >> 1) {
          uint64_t v8 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v50 > 1), v51 + 1, 1, (char *)v8);
        }
        *(void *)(v8 + 16) = v51 + 1;
        uint64_t v52 = (_OWORD *)(v8 + 112 * v51);
        long long v53 = v80;
        long long v54 = v82;
        v52[3] = v81;
        v52[4] = v54;
        v52[2] = v53;
        long long v55 = v83;
        long long v56 = v84;
        long long v57 = v85[0];
        *(_OWORD *)((char *)v52 + 121) = *(_OWORD *)((char *)v85 + 9);
        v52[6] = v56;
        v52[7] = v57;
        v52[5] = v55;
        goto LABEL_68;
      }
    }
    uint64_t v8 = MEMORY[0x1E4FBC860];
LABEL_68:
    uint64_t v58 = *((void *)&v104 + 1);
    outlined init with copy of SheetPreference((uint64_t)&v103, (uint64_t)&v80);
    outlined init with copy of SheetPreference((uint64_t)&v97, (uint64_t)v78);
    if (v58 == v19 || *((void *)&v81 + 1) == v79)
    {
      outlined destroy of SheetPreference((uint64_t)v78);
      outlined destroy of SheetPreference((uint64_t)&v80);
    }
    else
    {
      outlined destroy of SheetPreference((uint64_t)v78);
      outlined destroy of SheetPreference((uint64_t)&v80);
      outlined init with copy of SheetPreference((uint64_t)&v103, (uint64_t)v76);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1, (char *)v8);
      }
      unint64_t v65 = *(void *)(v8 + 16);
      unint64_t v64 = *(void *)(v8 + 24);
      if (v65 >= v64 >> 1) {
        uint64_t v8 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v64 > 1), v65 + 1, 1, (char *)v8);
      }
      *(void *)(v8 + 16) = v65 + 1;
      uint64_t v66 = (_OWORD *)(v8 + 112 * v65);
      long long v67 = v76[0];
      long long v68 = v76[2];
      v66[3] = v76[1];
      v66[4] = v68;
      _OWORD v66[2] = v67;
      long long v69 = v76[3];
      long long v70 = v76[4];
      long long v71 = v77[0];
      *(_OWORD *)((char *)v66 + 121) = *(_OWORD *)((char *)v77 + 9);
      v66[6] = v70;
      v66[7] = v71;
      v66[5] = v69;
    }
    outlined destroy of SheetPreference((uint64_t)&v97);
    outlined destroy of SheetPreference((uint64_t)&v103);
    outlined destroy of SheetPreference((uint64_t)&v109);
    unint64_t v15 = &v115;
    goto LABEL_80;
  }
  if (v144 == 3)
  {

    PresentationState.Base.lastPresentation.getter((uint64_t)v90);
    outlined init with copy of SheetPreference?((uint64_t)v90, (uint64_t)&v115, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
    if ((void)v115)
    {
      type metadata accessor for Data?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SheetPreference>, (uint64_t)&type metadata for SheetPreference, MEMORY[0x1E4FBBE00]);
      uint64_t v8 = swift_allocObject();
      long long v10 = v119;
      long long v11 = v120[0];
      long long v12 = v117;
      *(_OWORD *)(v8 + 80) = v118;
      *(_OWORD *)(v8 + 96) = v10;
      *(_OWORD *)(v8 + 112) = v11;
      *(_OWORD *)(v8 + 121) = *(_OWORD *)((char *)v120 + 9);
      long long v13 = v115;
      long long v14 = v116;
      *(_OWORD *)(v8 + 16) = xmmword_18834BB80;
      *(_OWORD *)(v8 + 32) = v13;
      *(_OWORD *)(v8 + 48) = v14;
      *(_OWORD *)(v8 + 64) = v12;
      _ss11AnyHashableVSgWOhTm_3((uint64_t)v90, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
    }
    else
    {
      _ss11AnyHashableVSgWOhTm_3((uint64_t)v90, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
      uint64_t v8 = MEMORY[0x1E4FBC860];
    }
    long long v45 = (char *)v135 + 8;
    goto LABEL_59;
  }
  if (v144 == 8)
  {

    *(_OWORD *)&v90[64] = v135[4];
    *(_OWORD *)&v90[80] = v136[0];
    *(_OWORD *)&v90[89] = *(_OWORD *)((char *)v136 + 9);
    *(_OWORD *)uint64_t v90 = v135[0];
    *(_OWORD *)&v90[16] = v135[1];
    *(_OWORD *)&v90[32] = v135[2];
    *(_OWORD *)&v90[48] = v135[3];
    long long v119 = v142;
    v120[0] = *(_OWORD *)v143;
    *(_OWORD *)((char *)v120 + 9) = *(_OWORD *)&v143[9];
    long long v115 = v138;
    long long v116 = v139;
    long long v118 = v141;
    long long v117 = v140;
    PresentationState.Base.lastPresentation.getter((uint64_t)&v109);
    if ((void)v109)
    {
      uint64_t v9 = *((void *)&v110 + 1);
      outlined destroy of SheetPreference((uint64_t)&v109);
      outlined init with copy of SheetPreference((uint64_t)&v115, (uint64_t)&v109);
      if (v9 == *(void *)&v90[24] || v9 == *((void *)&v110 + 1))
      {
        outlined destroy of SheetPreference((uint64_t)&v109);
        outlined destroy of SheetPreference((uint64_t)&v115);
        outlined destroy of SheetPreference((uint64_t)v90);
        uint64_t v7 = &v121;
        goto LABEL_9;
      }
    }
    else
    {
      _ss11AnyHashableVSgWOhTm_3((uint64_t)&v109, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
      outlined init with copy of SheetPreference((uint64_t)&v115, (uint64_t)&v109);
    }
    outlined destroy of SheetPreference((uint64_t)&v109);
    PresentationState.Base.lastPresentation.getter((uint64_t)&v103);
    outlined init with copy of SheetPreference?((uint64_t)&v103, (uint64_t)&v97, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
    if ((void)v97)
    {
      type metadata accessor for Data?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SheetPreference>, (uint64_t)&type metadata for SheetPreference, MEMORY[0x1E4FBBE00]);
      uint64_t v8 = swift_allocObject();
      long long v40 = v101;
      long long v41 = v102[0];
      long long v42 = v99;
      *(_OWORD *)(v8 + 80) = v100;
      *(_OWORD *)(v8 + 96) = v40;
      *(_OWORD *)(v8 + 112) = v41;
      *(_OWORD *)(v8 + 121) = *(_OWORD *)((char *)v102 + 9);
      long long v43 = v97;
      long long v44 = v98;
      *(_OWORD *)(v8 + 16) = xmmword_18834BB80;
      *(_OWORD *)(v8 + 32) = v43;
      *(_OWORD *)(v8 + 48) = v44;
      *(_OWORD *)(v8 + 64) = v42;
      _ss11AnyHashableVSgWOhTm_3((uint64_t)&v103, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
    }
    else
    {
      _ss11AnyHashableVSgWOhTm_3((uint64_t)&v103, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
      uint64_t v8 = MEMORY[0x1E4FBC860];
    }
    outlined destroy of SheetPreference((uint64_t)&v115);
    long long v45 = v90;
LABEL_59:
    outlined destroy of SheetPreference((uint64_t)v45);
    uint64_t v48 = &v121;
LABEL_81:
    outlined destroy of PresentationState.Base((uint64_t)v48);
    return v8;
  }
  if (v134 == 3)
  {

    id v6 = (char *)&v121 + 8;
    goto LABEL_8;
  }
  PresentationState.Base.lastPresentation.getter((uint64_t)v90);
  uint64_t v30 = *(void *)v90;
  if (*(void *)v90)
  {
    uint64_t v31 = *(void *)&v90[24];
    outlined destroy of SheetPreference((uint64_t)v90);
  }
  else
  {
    _ss11AnyHashableVSgWOhTm_3((uint64_t)v90, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
    uint64_t v31 = 0;
  }
  PresentationState.Base.lastPresentation.getter((uint64_t)v90);
  if (*(void *)v90)
  {
    uint64_t v49 = *(void *)&v90[24];
    outlined destroy of SheetPreference((uint64_t)v90);
    if (v30 && v31 == v49) {
      goto LABEL_64;
    }
  }
  else
  {
    _ss11AnyHashableVSgWOhTm_3((uint64_t)v90, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
    if (!v30)
    {
LABEL_64:
      _s2os6LoggerVSgWOhTm_2((uint64_t)&v121, (uint64_t (*)(void))type metadata accessor for (PresentationState.Base, PresentationState.Base));
      return MEMORY[0x1E4FBC860];
    }
  }
  PresentationState.Base.lastPresentation.getter((uint64_t)v90);
  outlined init with copy of SheetPreference?((uint64_t)v90, (uint64_t)&v115, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
  if ((void)v115)
  {
    type metadata accessor for Data?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SheetPreference>, (uint64_t)&type metadata for SheetPreference, MEMORY[0x1E4FBBE00]);
    uint64_t v8 = swift_allocObject();
    long long v59 = v119;
    long long v60 = v120[0];
    long long v61 = v117;
    *(_OWORD *)(v8 + 80) = v118;
    *(_OWORD *)(v8 + 96) = v59;
    *(_OWORD *)(v8 + 112) = v60;
    *(_OWORD *)(v8 + 121) = *(_OWORD *)((char *)v120 + 9);
    long long v62 = v115;
    long long v63 = v116;
    *(_OWORD *)(v8 + 16) = xmmword_18834BB80;
    *(_OWORD *)(v8 + 32) = v62;
    *(_OWORD *)(v8 + 48) = v63;
    *(_OWORD *)(v8 + 64) = v61;
    _ss11AnyHashableVSgWOhTm_3((uint64_t)v90, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
  }
  else
  {
    _ss11AnyHashableVSgWOhTm_3((uint64_t)v90, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
    uint64_t v8 = MEMORY[0x1E4FBC860];
  }
  _s2os6LoggerVSgWOhTm_2((uint64_t)&v121, (uint64_t (*)(void))type metadata accessor for (PresentationState.Base, PresentationState.Base));
  return v8;
}

uint64_t lazy protocol witness table accessor for type External<AccessibilityScrollableModifier> and conformance External<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for [ScrollGeometryState](255, a2, a3, MEMORY[0x1E4F4E778]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static CollectionViewListRoot._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v60 = a5;
  long long v61 = (unsigned char *)a3;
  long long v53 = a7;
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  uint64_t updated = type metadata accessor for UpdateCollectionViewListCoordinator();
  uint64_t v51 = *(void *)(updated - 8);
  uint64_t v52 = updated;
  MEMORY[0x1F4188790](updated);
  unint64_t v50 = &v46[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v13);
  long long v62 = &v46[-v14];
  int v59 = *a1;
  int v15 = *(_DWORD *)(a2 + 8);
  uint64_t v16 = *(void *)(a2 + 16);
  uint64_t v18 = *(void *)(a2 + 40);
  uint64_t v17 = *(void *)(a2 + 48);
  int v19 = *(_DWORD *)(a2 + 80);
  uint64_t v80 = *(void *)a2;
  int v81 = v15;
  long long v83 = *(_OWORD *)(a2 + 24);
  uint64_t v82 = v16;
  *(void *)&long long v84 = v18;
  *((void *)&v84 + 1) = v17;
  long long v85 = *(_OWORD *)(a2 + 56);
  uint64_t v86 = *(void *)(a2 + 72);
  int v87 = v19;
  LOBYTE(v63) = 0;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.setter();
  uint64_t v20 = unk_1ED438E38;
  if ((unk_1ED438E38 & ~qword_1ED438E30) == 0) {
    uint64_t v20 = 0;
  }
  unint64_t v21 = v20 | qword_1ED438E30;
  lazy protocol witness table accessor for type DisableListSections and conformance DisableListSections();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if ((v63 & 1) == 0)
  {
    uint64_t v22 = unk_1ED438E08;
    if ((unk_1ED438E08 & ~qword_1ED438E00) == 0) {
      uint64_t v22 = 0;
    }
    uint64_t v23 = v22 | qword_1ED438E00;
    if ((v23 & ~v21) == 0) {
      uint64_t v23 = 0;
    }
    v21 |= v23;
  }
  lazy protocol witness table accessor for type ListConcatenatesFooters and conformance ListConcatenatesFooters();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v24 = swift_release();
  if (v63 == 1)
  {
    if ((v21 & 0x40) != 0) {
      unint64_t v21 = v21 & 0xFFFFFFFFFFFFDFBFLL | 0x2000;
    }
    else {
      v21 |= 0x2000uLL;
    }
  }
  uint64_t v48 = v46;
  MEMORY[0x1F4188790](v24);
  uint64_t v25 = v60;
  uint64_t v26 = (uint64_t)v61;
  *(void *)&v46[-32] = v61;
  *(void *)&v46[-24] = a4;
  *(void *)&v46[-16] = v25;
  *(void *)&v46[-8] = a6;
  LODWORD(v70) = v59;
  uint64_t v63 = v26;
  uint64_t v64 = a4;
  uint64_t v65 = v25;
  *(void *)&long long v66 = a6;
  type metadata accessor for CollectionViewListRoot();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  uint64_t v27 = v80;
  uint64_t v28 = v82;
  unsigned int v56 = DWORD2(v83);
  unsigned int v47 = DWORD1(v83);
  unsigned int v57 = v83;
  int v54 = v81;
  unsigned int v55 = HIDWORD(v83);
  unint64_t v29 = v84;
  uint64_t v70 = v80;
  int v71 = v81;
  uint64_t v72 = v82;
  long long v73 = v83;
  unint64_t v74 = v84;
  v79[0] = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewListInputs.init(_:options:)();
  uint64_t v58 = a4;
  unint64_t v49 = a6;
  uint64_t v70 = v63;
  int v71 = v64;
  long long v73 = v66;
  uint64_t v72 = v65;
  unint64_t v74 = *(void *)&v67[0];
  long long v75 = *(_OWORD *)((char *)v67 + 8);
  int v76 = DWORD2(v67[1]);
  uint64_t v77 = v68;
  char v78 = v69;
  static View.makeDebuggableViewList(view:inputs:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v70 = v27;
  int v71 = v54;
  uint64_t v72 = v28;
  LODWORD(v26) = v47;
  *(void *)&long long v73 = __PAIR64__(v47, v57);
  *((void *)&v73 + 1) = __PAIR64__(v55, v56);
  unint64_t v74 = v29;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewListInputs.init(_:)();
  uint64_t v70 = v63;
  int v71 = v64;
  long long v73 = v66;
  uint64_t v72 = v65;
  unint64_t v74 = *(void *)&v67[0];
  long long v75 = *(_OWORD *)((char *)v67 + 8);
  int v76 = DWORD2(v67[1]);
  uint64_t v77 = v68;
  char v78 = v69;
  int v30 = _ViewListOutputs.makeAttribute(inputs:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  LODWORD(v70) = v59;
  uint64_t v63 = v27;
  LODWORD(v64) = v54;
  uint64_t v65 = v28;
  *(void *)&long long v66 = __PAIR64__(v26, v57);
  *((void *)&v66 + 1) = __PAIR64__(v55, v56);
  v67[0] = __PAIR128__(*((unint64_t *)&v84 + 1), v29);
  v67[1] = v85;
  uint64_t v68 = v86;
  int v69 = v87;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v31 = v62;
  uint64_t v32 = v58;
  uint64_t v33 = v49;
  UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)(v30, (int *)&v70, &v63, v58, (uint64_t)v61, v49, v60, v62);
  uint64_t v34 = (uint64_t)v50;
  uint64_t v35 = v51;
  uint64_t v36 = v52;
  uint64_t v37 = (*(uint64_t (**)(unsigned char *, _DWORD *, uint64_t))(v51 + 16))(v50, v31, v52);
  long long v61 = v46;
  MEMORY[0x1F4188790](v37);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v38 = type metadata accessor for CollectionViewListDataSource();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v63 = v38;
  uint64_t v64 = v32;
  uint64_t v65 = WitnessTable;
  *(void *)&long long v66 = v33;
  uint64_t v40 = WitnessTable;
  *(void *)&v46[-32] = type metadata accessor for UICollectionViewListCoordinator();
  *(void *)&v46[-24] = v36;
  *(void *)&v46[-16] = swift_getWitnessTable();
  uint64_t v41 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v34, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)&v46[-48], v36, MEMORY[0x1E4FBC248], v41, MEMORY[0x1E4FBC278], v42);
  long long v43 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
  v43(v34, v36);
  LODWORD(v31) = v63;
  static AGAttributeFlags.transactional.getter();
  AGGraphGetFlags();
  AGGraphSetFlags();
  uint64_t v63 = v80;
  LODWORD(v64) = v81;
  uint64_t v65 = v82;
  long long v66 = v83;
  v67[0] = v84;
  v67[1] = v85;
  uint64_t v68 = v86;
  int v69 = v87;
  double v44 = static CollectionViewListUtilities.makeOutputs<A, B>(inputs:coordinator:coordinatorKind:)((uint64_t)&v63, (int)v31, 1, v38, v58, v40, v33, v53);
  ((void (*)(_DWORD *, uint64_t, double))v43)(v62, v36, v44);
  outlined destroy of _ViewListOutputs((uint64_t)v79);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void destroy for UpdateCollectionViewListCoordinator(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakDestroy();
  uint64_t v4 = a1 + *(int *)(a2 + 100);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for CollectionViewListDataSource();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    __swift_destroy_boxed_opaque_existential_1(v4);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = v4 + *(int *)(v5 + 36);
    uint64_t v7 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    uint64_t v8 = v4 + *(int *)(v5 + 40);
    uint64_t v9 = *(void *)(v8 + 8);
    if (v9)
    {
      if (v9 == 1)
      {
LABEL_8:
        swift_release();
        swift_release();
        goto LABEL_9;
      }
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    if (*(unsigned char *)(v8 + 64)) {
      swift_bridgeObjectRelease();
    }
    else {
      __swift_destroy_boxed_opaque_existential_1(v8 + 24);
    }
    goto LABEL_8;
  }
LABEL_9:
  long long v10 = *(void **)(a1 + *(int *)(a2 + 104));
}

uint64_t type metadata accessor for UpdateCollectionViewListCoordinator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeWithCopy for UpdateCollectionViewListCoordinator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v8 = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 80) = v8;
  swift_unknownObjectWeakCopyInit();
  uint64_t v9 = *(int *)(a3 + 100);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v12 = (int *)type metadata accessor for CollectionViewListDataSource();
  uint64_t v13 = *((void *)v12 - 1);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v46 = v13;
    uint64_t v47 = a3;
    long long v15 = *(_OWORD *)(v11 + 24);
    *(_OWORD *)(v10 + 24) = v15;
    (**(void (***)(uint64_t, uint64_t))(v15 - 8))(v10, v11);
    uint64_t v16 = *(void **)(v11 + 48);
    *(void *)(v10 + 40) = *(void *)(v11 + 40);
    *(void *)(v10 + 48) = v16;
    uint64_t v17 = *(void *)(v11 + 64);
    *(void *)(v10 + 56) = *(void *)(v11 + 56);
    *(void *)(v10 + 64) = v17;
    *(unsigned char *)(v10 + 72) = *(unsigned char *)(v11 + 72);
    uint64_t v18 = v12[9];
    uint64_t v44 = v11 + v18;
    uint64_t v45 = v10 + v18;
    uint64_t v19 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
    long long v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16);
    id v20 = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v43(v45, v44, v19);
    uint64_t v21 = v12[10];
    uint64_t v22 = v10 + v21;
    uint64_t v23 = v11 + v21;
    uint64_t v24 = *(void *)(v11 + v21 + 8);
    if (v24)
    {
      if (v24 == 1)
      {
        long long v25 = *(_OWORD *)(v23 + 48);
        *(_OWORD *)(v22 + 32) = *(_OWORD *)(v23 + 32);
        *(_OWORD *)(v22 + 48) = v25;
        *(_DWORD *)(v22 + 63) = *(_DWORD *)(v23 + 63);
        long long v26 = *(_OWORD *)(v23 + 16);
        *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
        *(_OWORD *)(v22 + 16) = v26;
LABEL_12:
        uint64_t v31 = v12[11];
        uint64_t v32 = (void *)(v10 + v31);
        uint64_t v33 = (void *)(v11 + v31);
        uint64_t v34 = v33[1];
        *uint64_t v32 = *v33;
        v32[1] = v34;
        *(unsigned char *)(v10 + v12[12]) = *(unsigned char *)(v11 + v12[12]);
        uint64_t v35 = v12[13];
        uint64_t v36 = v10 + v35;
        uint64_t v37 = v11 + v35;
        *(void *)uint64_t v36 = *(void *)v37;
        *(unsigned char *)(v36 + 8) = *(unsigned char *)(v37 + 8);
        *(void *)(v10 + v12[14]) = *(void *)(v11 + v12[14]);
        uint64_t v38 = *(void (**)(uint64_t, void, uint64_t, int *))(v46 + 56);
        swift_retain();
        swift_retain();
        v38(v10, 0, 1, v12);
        a3 = v47;
        goto LABEL_13;
      }
      *(void *)uint64_t v22 = *(void *)v23;
      *(void *)(v22 + 8) = v24;
      *(void *)(v22 + 16) = *(void *)(v23 + 16);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
      *(void *)(v22 + 16) = *(void *)(v23 + 16);
    }
    uint64_t v27 = (void *)(v22 + 24);
    uint64_t v28 = (void *)(v23 + 24);
    char v29 = *(unsigned char *)(v23 + 64);
    if (v29)
    {
      *uint64_t v27 = *v28;
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v30 = *(_OWORD *)(v23 + 48);
      *(_OWORD *)(v22 + 48) = v30;
      (**(void (***)(void *, void *))(v30 - 8))(v27, v28);
    }
    *(unsigned char *)(v22 + 64) = v29;
    *(_WORD *)(v22 + 65) = *(_WORD *)(v23 + 65);
    goto LABEL_12;
  }
  uint64_t v14 = type metadata accessor for Optional();
  memcpy((void *)v10, (const void *)v11, *(void *)(*(void *)(v14 - 8) + 64));
LABEL_13:
  uint64_t v39 = *(int *)(a3 + 104);
  uint64_t v40 = *(void **)(a2 + v39);
  *(void *)(a1 + v39) = v40;
  id v41 = v40;
  return a1;
}

id UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)@<X0>(int a1@<W0>, int *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, _DWORD *a8@<X8>)
{
  uint64_t v78 = a7;
  uint64_t v79 = a5;
  int v80 = *a2;
  uint64_t v12 = *a3;
  int v86 = *((_DWORD *)a3 + 2);
  uint64_t v90 = a3[2];
  uint64_t v91 = v12;
  LODWORD(v12) = *((_DWORD *)a3 + 6);
  unsigned int v13 = *((_DWORD *)a3 + 7);
  int v93 = *((_DWORD *)a3 + 8);
  unsigned int v94 = v13;
  int v14 = *((_DWORD *)a3 + 9);
  unsigned int v96 = v12;
  int v97 = v14;
  uint64_t v92 = a3[5];
  uint64_t v95 = a3[6];
  LODWORD(v12) = *((_DWORD *)a3 + 14);
  int v83 = *((_DWORD *)a3 + 15);
  int v84 = v12;
  int v89 = *((_DWORD *)a3 + 16);
  int v81 = *((_DWORD *)a3 + 17);
  LODWORD(v12) = *((_DWORD *)a3 + 18);
  int v87 = *((_DWORD *)a3 + 19);
  int v88 = v12;
  int v82 = *((_DWORD *)a3 + 20);
  swift_unknownObjectWeakInit();
  uint64_t updated = type metadata accessor for UpdateCollectionViewListCoordinator();
  uint64_t v16 = a8;
  uint64_t v17 = (char *)a8 + *(int *)(updated + 100);
  unint64_t v18 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v19 = type metadata accessor for CollectionViewListDataSource();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v17, 1, 1, v19);
  id result = (id)AGSubgraphGetCurrent();
  if (result)
  {
    *(void *)((char *)a8 + *(int *)(updated + 104)) = result;
    *a8 = a1;
    MEMORY[0x1F4188790](result);
    unint64_t v21 = a6;
    uint64_t v22 = v78;
    int v113 = v80;
    uint64_t v23 = a4;
    uint64_t v24 = v79;
    HIDWORD(v98) = HIDWORD(v79);
    uint64_t v99 = v23;
    uint64_t v100 = v78;
    unint64_t v101 = v18;
    type metadata accessor for CollectionViewListRoot();
    uint64_t v25 = type metadata accessor for _GraphValue();
    type metadata accessor for Binding();
    type metadata accessor for Optional();
    _GraphValue.subscript.getter();
    type metadata accessor for _GraphValue();
    uint64_t v26 = _GraphValue.value.getter();
    v16[1] = v26;
    MEMORY[0x1F4188790](v26);
    unint64_t v27 = v21;
    LODWORD(v21) = v80;
    LODWORD(v98) = v80;
    _GraphValue.subscript.getter();
    long long v75 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F3F590];
    _sSay7SwiftUI0A19UIAnySortComparatorVGMaTm_1(0, &lazy cache variable for type metadata for _GraphValue<ListPadding>, (uint64_t)&type metadata for ListPadding, MEMORY[0x1E4F3F590]);
    uint64_t v28 = _GraphValue.value.getter();
    v16[2] = v28;
    uint64_t v72 = (uint64_t)&v72;
    MEMORY[0x1F4188790](v28);
    _OWORD v71[2] = v23;
    v71[3] = v24;
    uint64_t v29 = v23;
    uint64_t v73 = v23;
    v71[4] = v27;
    v71[5] = v22;
    LODWORD(v98) = v21;
    LODWORD(v23) = v21;
    _sSay7SwiftUI0A19UIAnySortComparatorVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E4FBC958], MEMORY[0x1E4FBB718]);
    uint64_t v74 = v25;
    _GraphValue.subscript.getter();
    type metadata accessor for _GraphValue<CGFloat?>();
    uint64_t v30 = _GraphValue.value.getter();
    void v16[3] = v30;
    MEMORY[0x1F4188790](v30);
    v71[-4] = v29;
    v71[-3] = v24;
    v71[-2] = v27;
    v71[-1] = v22;
    unint64_t v31 = v27;
    LODWORD(v98) = v23;
    uint64_t v32 = MEMORY[0x1E4FBC958];
    _GraphValue.subscript.getter();
    _sSay7SwiftUI0A19UIAnySortComparatorVGMaTm_1(0, &lazy cache variable for type metadata for _GraphValue<CGFloat>, v32, v75);
    v16[4] = _GraphValue.value.getter();
    uint64_t v33 = v16;
    uint64_t v98 = v91;
    uint64_t v34 = v91;
    LODWORD(v25) = v86;
    LODWORD(v99) = v86;
    uint64_t v100 = v90;
    LODWORD(v32) = v93;
    unint64_t v101 = __PAIR64__(v94, v96);
    int v102 = v93;
    int v103 = v97;
    uint64_t v35 = v95;
    uint64_t v104 = v92;
    uint64_t v105 = v95;
    int v106 = v84;
    int v107 = v83;
    LODWORD(v29) = v83;
    int v36 = v81;
    int v108 = v89;
    int v109 = v81;
    int v110 = v88;
    int v111 = v87;
    int v112 = v82;
    uint64_t v37 = _ViewInputs.transaction.getter();
    long long v75 = (uint64_t (*)(void, uint64_t))v71;
    v33[5] = v37;
    MEMORY[0x1F4188790](v37);
    uint64_t v38 = v79;
    v71[-4] = v73;
    v71[-3] = v38;
    uint64_t v39 = v78;
    v71[-2] = v31;
    v71[-1] = v39;
    LODWORD(v98) = v80;
    type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
    _GraphValue.subscript.getter();
    type metadata accessor for _GraphValue<UICollectionLayoutListConfiguration.Appearance>();
    v33[6] = _GraphValue.value.getter();
    uint64_t v98 = v34;
    LODWORD(v99) = v25;
    uint64_t v100 = v90;
    unint64_t v101 = __PAIR64__(v94, v96);
    long long v85 = v33;
    int v102 = v32;
    int v103 = v97;
    uint64_t v40 = v92;
    uint64_t v104 = v92;
    uint64_t v105 = v35;
    LODWORD(v35) = v84;
    int v106 = v84;
    int v107 = v29;
    LODWORD(v32) = v88;
    LODWORD(v29) = v89;
    int v108 = v89;
    int v109 = v36;
    int v41 = v87;
    int v110 = v88;
    int v111 = v87;
    int v112 = v82;
    swift_getKeyPath();
    int v42 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    v33[7] = v42;
    uint64_t v98 = v34;
    LODWORD(v99) = v25;
    uint64_t v43 = v90;
    uint64_t v100 = v90;
    LODWORD(v31) = v96;
    unint64_t v101 = __PAIR64__(v94, v96);
    int v102 = v93;
    int v103 = v97;
    uint64_t v104 = v40;
    uint64_t v105 = v95;
    LODWORD(v25) = v35;
    int v106 = v35;
    int v107 = v83;
    int v108 = v29;
    LODWORD(v29) = v81;
    int v109 = v81;
    int v110 = v32;
    LODWORD(v35) = v82;
    int v111 = v41;
    int v112 = v82;
    swift_getKeyPath();
    int v44 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    v85[8] = v44;
    uint64_t v98 = v91;
    uint64_t v45 = v91;
    LODWORD(v32) = v86;
    LODWORD(v99) = v86;
    uint64_t v100 = v43;
    LODWORD(v43) = v94;
    unint64_t v101 = __PAIR64__(v94, v31);
    LODWORD(v31) = v93;
    int v46 = v97;
    int v102 = v93;
    int v103 = v97;
    uint64_t v104 = v92;
    uint64_t v105 = v95;
    int v106 = v25;
    int v107 = v83;
    int v108 = v89;
    int v109 = v29;
    LODWORD(v29) = v88;
    int v110 = v88;
    int v111 = v87;
    int v112 = v35;
    swift_getKeyPath();
    int v47 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    v85[9] = v47;
    uint64_t v98 = v45;
    LODWORD(v99) = v32;
    uint64_t v48 = v90;
    uint64_t v100 = v90;
    unint64_t v101 = __PAIR64__(v43, v96);
    int v102 = v31;
    int v103 = v46;
    uint64_t v49 = v92;
    uint64_t v104 = v92;
    uint64_t v105 = v95;
    int v106 = v25;
    LODWORD(v25) = v83;
    LODWORD(v43) = v89;
    int v107 = v83;
    int v108 = v89;
    LODWORD(v32) = v81;
    int v109 = v81;
    int v110 = v29;
    LODWORD(v29) = v87;
    int v50 = v82;
    int v111 = v87;
    int v112 = v82;
    swift_getKeyPath();
    int v51 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    v85[10] = v51;
    uint64_t v98 = v91;
    LODWORD(v99) = v86;
    uint64_t v100 = v48;
    LODWORD(v31) = v94;
    unint64_t v101 = __PAIR64__(v94, v96);
    int v102 = v93;
    int v103 = v97;
    uint64_t v104 = v49;
    uint64_t v105 = v95;
    int v106 = v84;
    int v107 = v25;
    int v108 = v43;
    int v109 = v32;
    int v110 = v88;
    int v111 = v29;
    int v112 = v50;
    swift_getKeyPath();
    int v52 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    long long v53 = v85;
    v85[11] = v52;
    uint64_t v54 = v92;
    uint64_t v98 = v91;
    LODWORD(v25) = v86;
    LODWORD(v99) = v86;
    uint64_t v100 = v48;
    LODWORD(v49) = v96;
    unint64_t v101 = __PAIR64__(v31, v96);
    LODWORD(v43) = v31;
    LODWORD(v31) = v93;
    int v102 = v93;
    int v103 = v97;
    uint64_t v104 = v92;
    uint64_t v55 = AssociatedTypeWitness;
    uint64_t v56 = AssociatedConformanceWitness;
    unint64_t v57 = _GraphInputs.selectionStorage<A>(forType:)();
    *((void *)v53 + 6) = WeakSelectionBasedStorage.init(_:)(v57, v58, v55, v56);
    v53[14] = v59;
    v53[15] = v60;
    v53[16] = v61;
    v53[17] = v62;
    v53[18] = v63;
    v53[19] = v64;
    uint64_t v65 = v91;
    uint64_t v98 = v91;
    LODWORD(v99) = v25;
    uint64_t v100 = v48;
    unint64_t v101 = __PAIR64__(v43, v49);
    int v102 = v31;
    int v103 = v97;
    uint64_t v104 = v54;
    uint64_t v105 = v95;
    LODWORD(v49) = v83;
    LODWORD(v54) = v84;
    int v106 = v84;
    int v107 = v83;
    LODWORD(v43) = v88;
    LODWORD(v53) = v89;
    LODWORD(v48) = v81;
    int v108 = v89;
    int v109 = v81;
    LODWORD(v31) = v87;
    int v110 = v88;
    int v111 = v87;
    LODWORD(v25) = v82;
    int v112 = v82;
    swift_getKeyPath();
    int v66 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    v85[20] = v66;
    uint64_t v98 = v65;
    LODWORD(v99) = v86;
    uint64_t v100 = v90;
    unint64_t v101 = __PAIR64__(v94, v96);
    int v102 = v93;
    int v103 = v97;
    uint64_t v67 = v95;
    uint64_t v104 = v92;
    uint64_t v105 = v95;
    int v106 = v54;
    int v107 = v49;
    int v108 = (int)v53;
    int v109 = v48;
    int v110 = v43;
    int v111 = v31;
    int v112 = v25;
    swift_getKeyPath();
    int v68 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    int v69 = v85;
    v85[21] = v68;
    uint64_t v98 = v91;
    LODWORD(v99) = v86;
    uint64_t v100 = v90;
    unint64_t v101 = __PAIR64__(v94, v96);
    int v102 = v93;
    int v103 = v97;
    uint64_t v104 = v92;
    uint64_t v105 = v67;
    int v106 = v84;
    int v107 = v49;
    int v108 = v89;
    int v109 = v48;
    int v110 = v88;
    int v111 = v87;
    int v112 = v25;
    int v70 = _ViewInputs.environment.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    id result = (id)swift_release();
    v69[22] = v70;
  }
  else
  {
    __break(1u);
  }
  return result;
}

double static CollectionViewListUtilities.makeOutputs<A, B>(inputs:coordinator:coordinatorKind:)@<D0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  *(void *)&long long v91 = a6;
  *((void *)&v91 + 1) = a7;
  *(void *)&long long v90 = a4;
  *((void *)&v90 + 1) = a5;
  int v87 = a3;
  LODWORD(v89) = a2;
  int v88 = a8;
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  _s7SwiftUI16BridgedListStateV12ScrollTargetVSgMaTm_1(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, type metadata accessor for BridgedListState.ScrollTarget, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v77 - v10;
  uint64_t v12 = (int *)type metadata accessor for BridgedListState(0);
  MEMORY[0x1F4188790](v12);
  int v14 = (double *)((char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  long long v15 = *(_OWORD *)(a1 + 48);
  long long v110 = *(_OWORD *)(a1 + 32);
  long long v111 = v15;
  long long v112 = *(_OWORD *)(a1 + 64);
  int v113 = *(_DWORD *)(a1 + 80);
  long long v16 = *(_OWORD *)(a1 + 16);
  long long v108 = *(_OWORD *)a1;
  long long v109 = v16;
  uint64_t v99 = v15;
  int v100 = DWORD2(v15);
  *(void *)&v101[0] = v15;
  DWORD2(v101[0]) = DWORD2(v15);
  int v17 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  int v93 = v17;
  if (v17)
  {
    static ScrollGeometry.zero.getter();
    uint64_t v19 = *((void *)&v101[0] + 1);
    uint64_t v18 = *(void *)&v101[0];
    uint64_t v21 = *((void *)&v101[1] + 1);
    uint64_t v20 = *(void *)&v101[1];
    uint64_t v23 = *((void *)&v101[2] + 1);
    uint64_t v22 = *(void *)&v101[2];
    uint64_t v25 = *((void *)&v101[3] + 1);
    uint64_t v24 = *(void *)&v101[3];
    uint64_t v27 = *((void *)&v101[4] + 1);
    uint64_t v26 = *(uint64_t **)&v101[4];
    uint64_t v28 = v102;
    uint64_t v29 = v103;
    uint64_t v30 = v104;
    uint64_t v31 = v105;
  }
  uint64_t v78 = v22;
  uint64_t v79 = v23;
  uint64_t v80 = v24;
  uint64_t v81 = v25;
  int v82 = v26;
  uint64_t v83 = v27;
  uint64_t v84 = v28;
  uint64_t v85 = v29;
  uint64_t v86 = v30;
  uint64_t v92 = v31;
  uint64_t v32 = type metadata accessor for BridgedListState.ScrollTarget(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v11, 1, 1, v32);
  char v33 = static SemanticFeature.isEnabled.getter();
  double v34 = 15.0;
  if (v33) {
    double v34 = 16.0;
  }
  *int v14 = v34;
  outlined init with take of BridgedListState.ScrollTarget?((uint64_t)v11, (uint64_t)v14 + v12[5]);
  uint64_t v35 = (char *)v14 + v12[6];
  *(void *)uint64_t v35 = v18;
  *((void *)v35 + 1) = v19;
  *((void *)v35 + 2) = v20;
  *((void *)v35 + 3) = v21;
  uint64_t v36 = v79;
  *((void *)v35 + 4) = v78;
  *((void *)v35 + 5) = v36;
  uint64_t v37 = v81;
  *((void *)v35 + 6) = v80;
  *((void *)v35 + 7) = v37;
  uint64_t v38 = v83;
  *((void *)v35 + 8) = v82;
  *((void *)v35 + 9) = v38;
  uint64_t v39 = v85;
  *((void *)v35 + 10) = v84;
  *((void *)v35 + 11) = v39;
  uint64_t v40 = v92;
  *((void *)v35 + 12) = v86;
  *((void *)v35 + 13) = v40;
  v35[112] = (v93 & 1) == 0;
  *(_DWORD *)((char *)v14 + v12[7]) = 0;
  _s7SwiftUI16BridgedListStateV12ScrollTargetVSgMaTm_1(0, &lazy cache variable for type metadata for External<BridgedListState>, type metadata accessor for BridgedListState, MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<BridgedListState> and conformance External<A>();
  int v93 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of BridgedListState((uint64_t)v14);
  v101[0] = v108;
  v101[1] = v109;
  v101[2] = v110;
  unsigned int v41 = _GraphInputs.scrollPhaseState.getter();
  LODWORD(v86) = *MEMORY[0x1E4F4E7A0];
  if (v41 == v86)
  {
    default argument 1 of ScrollPhaseState.init(phase:velocity:)();
    ScrollPhaseState.init(phase:velocity:)();
    LOBYTE(v106[0]) = v101[0];
    *(_OWORD *)((char *)v106 + 8) = *(_OWORD *)((char *)v101 + 8);
    uint64_t v42 = MEMORY[0x1E4F3FD68];
    type metadata accessor for [ScrollGeometryState](0, &lazy cache variable for type metadata for External<ScrollPhaseState>, MEMORY[0x1E4F3FD68], MEMORY[0x1E4F4E778]);
    lazy protocol witness table accessor for type External<AccessibilityScrollableModifier> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<ScrollPhaseState> and conformance External<A>, &lazy cache variable for type metadata for External<ScrollPhaseState>, v42);
    unsigned int v41 = Attribute.init<A>(body:value:flags:update:)();
  }
  LODWORD(v83) = v41;
  LODWORD(v101[0]) = v93;
  swift_unknownObjectWeakInit();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type UpdateBridgedState and conformance UpdateBridgedState();
  unsigned int v43 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of UpdateBridgedState((uint64_t)v101);
  static AGAttributeFlags.transactional.getter();
  AGGraphGetFlags();
  AGGraphSetFlags();
  swift_unknownObjectWeakInit();
  outlined init with take of ListScrollViewProvider((uint64_t)v106, (uint64_t)v101);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for UIScrollView?();
  lazy protocol witness table accessor for type ListScrollViewProvider and conformance ListScrollViewProvider();
  int v44 = Attribute.init<A>(body:value:flags:update:)();
  LODWORD(v92) = v44;
  outlined destroy of ListScrollViewProvider((uint64_t)v101);
  uint64_t v85 = type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
  type metadata accessor for [Scrollable](0, (unint64_t *)&lazy cache variable for type metadata for External<Scrollable>, MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<Scrollable> and conformance External<A>();
  uint64_t v45 = Attribute.init<A>(body:value:flags:update:)();
  LODWORD(v84) = v45;
  int v82 = &v77;
  LODWORD(v106[0]) = v89;
  BYTE4(v106[0]) = v87 & 1;
  *((void *)&v106[0] + 1) = __PAIR64__(v41, v43);
  LODWORD(v106[1]) = v44;
  MEMORY[0x1F4188790](v45);
  uint64_t v46 = v90;
  v101[0] = v90;
  uint64_t v47 = *((void *)&v90 + 1);
  uint64_t v48 = *((void *)&v91 + 1);
  v101[1] = v91;
  uint64_t v49 = v91;
  *(&v77 - 4) = type metadata accessor for ListRepresentable();
  *(void *)&v101[0] = v46;
  *((void *)&v101[0] + 1) = v47;
  *(void *)&v101[1] = v49;
  *((void *)&v101[1] + 1) = v48;
  uint64_t Representable = type metadata accessor for MakeRepresentable();
  *(&v77 - 3) = Representable;
  *(&v77 - 2) = swift_getWitnessTable();
  uint64_t v51 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v106, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)(&v77 - 6), Representable, MEMORY[0x1E4FBC248], v51, MEMORY[0x1E4FBC278], v52);
  v101[2] = v110;
  v101[3] = v111;
  v101[4] = v112;
  LODWORD(v102) = v113;
  v101[0] = v108;
  v101[1] = v109;
  outlined retain of _ViewInputs((uint64_t)&v108);
  _ViewInputs.scrollable.setter();
  _GraphInputs.scrollPhaseState.setter();
  PreferencesInputs.remove<A>(_:)();
  _GraphValue.init(_:)();
  *(void *)&v106[0] = *(void *)&v101[0];
  DWORD2(v106[0]) = DWORD2(v101[0]);
  *(void *)&v106[1] = *(void *)&v101[1];
  *(_OWORD *)((char *)&v106[1] + 8) = *(_OWORD *)((char *)&v101[1] + 8);
  *(_OWORD *)((char *)&v106[2] + 8) = *(_OWORD *)((char *)&v101[2] + 8);
  *(_OWORD *)((char *)&v106[3] + 8) = *(_OWORD *)((char *)&v101[3] + 8);
  *((void *)&v106[4] + 1) = *((void *)&v101[4] + 1);
  int v107 = v102;
  static View.makeDebuggableView(view:inputs:)();
  uint64_t v53 = AGCreateWeakAttribute();
  uint64_t v54 = AGCreateWeakAttribute();
  uint64_t v55 = AGCreateWeakAttribute();
  v106[0] = v98;
  _ViewOutputs.subscript.getter();
  unint64_t v56 = AGCreateWeakAttribute();
  int v57 = v56;
  unint64_t v89 = HIDWORD(v56);
  type metadata accessor for [ScrollGeometryState](0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<UInt32>, MEMORY[0x1E4FBC4C0], MEMORY[0x1E4F3F398]);
  uint64_t v58 = swift_allocObject();
  *(_DWORD *)(v58 + 16) = 0;
  v106[0] = v90;
  v106[1] = v91;
  *((void *)&v106[1] + 1) = type metadata accessor for CollectionViewListScrollable();
  *(void *)&v106[2] = swift_getWitnessTable();
  uint64_t v59 = swift_allocObject();
  *(void *)&v106[0] = v59;
  *(void *)(v59 + 16) = v53;
  *(void *)(v59 + 24) = v54;
  *(void *)(v59 + 32) = v55;
  int v60 = v89;
  *(_DWORD *)(v59 + 40) = v57;
  *(_DWORD *)(v59 + 44) = v60;
  *(void *)(v59 + 48) = v58;
  AGGraphSetValue();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v106);
  *(void *)&v106[0] = v99;
  DWORD2(v106[0]) = v100;
  char v61 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  *(void *)&v106[0] = v99;
  DWORD2(v106[0]) = v100;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0 || (v61)
  {
    UnaryScrollablePreferenceProvider.init(scrollable:)();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for [Scrollable](0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type UnaryScrollablePreferenceProvider and conformance UnaryScrollablePreferenceProvider();
    int v62 = Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v106[0]) = 0;
    _ViewOutputs.subscript.setter();
    if (v61)
    {
      type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
      uint64_t v63 = Dictionary.init(minimumCapacity:)();
      LOBYTE(v106[0]) = 0;
      DWORD1(v106[0]) = v62;
      *((void *)&v106[0] + 1) = v63;
      type metadata accessor for [ScrollGeometryState](0, &lazy cache variable for type metadata for External<AccessibilityScrollableModifier>, (uint64_t)&type metadata for AccessibilityScrollableModifier, MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<AccessibilityScrollableModifier> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<AccessibilityScrollableModifier> and conformance External<A>, &lazy cache variable for type metadata for External<AccessibilityScrollableModifier>, (uint64_t)&type metadata for AccessibilityScrollableModifier);
      Attribute.init<A>(body:value:flags:update:)();
      swift_bridgeObjectRelease();
      _GraphValue.init(_:)();
      int v64 = v94;
      long long v65 = v98;
      *(void *)&v106[0] = v99;
      DWORD2(v106[0]) = v100;
      swift_bridgeObjectRetain();
      char v66 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
      if (v66) {
        specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v64, &v108, v65, *((unint64_t *)&v65 + 1), 0);
      }
      swift_bridgeObjectRelease();
      LOBYTE(v106[0]) = (v66 & 1) == 0;
      _ViewOutputs.subscript.setter();
    }
  }
  LODWORD(v106[0]) = v93;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollGeometryProvider and conformance ScrollGeometryProvider();
  Attribute.init<A>(body:value:flags:update:)();
  v106[2] = v110;
  _OWORD v106[3] = v111;
  v106[4] = v112;
  int v107 = v113;
  v106[0] = v108;
  v106[1] = v109;
  _ViewInputs.position.getter();
  v106[2] = v110;
  _OWORD v106[3] = v111;
  v106[4] = v112;
  int v107 = v113;
  v106[0] = v108;
  v106[1] = v109;
  _ViewInputs.transform.getter();
  ScrollGeometryTransformProvider.init(position:transform:)();
  uint64_t v94 = *(void *)&v106[0];
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollGeometryTransformProvider and conformance ScrollGeometryTransformProvider();
  Attribute.init<A>(body:value:flags:update:)();
  v106[2] = v110;
  _OWORD v106[3] = v111;
  v106[4] = v112;
  int v107 = v113;
  v106[0] = v108;
  v106[1] = v109;
  LOBYTE(v94) = 2;
  char v97 = 0;
  _ViewInputs.intern<A>(_:id:)();
  ScrollGeometryStateProvider.init(geometry:scrollableAxes:transform:)();
  uint64_t v94 = *(void *)&v106[0];
  LODWORD(v95) = DWORD2(v106[0]);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  uint64_t v67 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB320];
  type metadata accessor for [ScrollGeometryState](0, &lazy cache variable for type metadata for [ScrollGeometryState], MEMORY[0x1E4F40498], MEMORY[0x1E4FBB320]);
  lazy protocol witness table accessor for type ScrollGeometryStateProvider and conformance ScrollGeometryStateProvider();
  uint64_t v68 = Attribute.init<A>(body:value:flags:update:)();
  *(void *)&v106[0] = v99;
  DWORD2(v106[0]) = v100;
  MEMORY[0x1F4188790](v68);
  *((_DWORD *)&v77 - 4) = v69;
  outlined retain of [Text.Modifier]((uint64_t)&v99);
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  v106[2] = v110;
  _OWORD v106[3] = v111;
  v106[4] = v112;
  int v107 = v113;
  v106[0] = v108;
  v106[1] = v109;
  _ViewInputs.environment.getter();
  v106[2] = v110;
  _OWORD v106[3] = v111;
  v106[4] = v112;
  int v107 = v113;
  v106[0] = v108;
  v106[1] = v109;
  _ViewInputs.size.getter();
  v106[2] = v110;
  _OWORD v106[3] = v111;
  v106[4] = v112;
  int v107 = v113;
  v106[0] = v108;
  v106[1] = v109;
  _ViewInputs.position.getter();
  v106[2] = v110;
  _OWORD v106[3] = v111;
  v106[4] = v112;
  int v107 = v113;
  v106[0] = v108;
  v106[1] = v109;
  _ViewInputs.transform.getter();
  v106[2] = v110;
  _OWORD v106[3] = v111;
  v106[4] = v112;
  int v107 = v113;
  v106[0] = v108;
  v106[1] = v109;
  _ViewInputs.safeAreaInsets.getter();
  ResolvedSafeAreaInsets.init(regions:environment:size:position:transform:safeAreaInsets:)();
  uint64_t v94 = *(void *)&v106[0];
  long long v95 = *(_OWORD *)((char *)v106 + 8);
  int v96 = DWORD2(v106[1]);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ResolvedSafeAreaInsets and conformance ResolvedSafeAreaInsets();
  unsigned int v70 = Attribute.init<A>(body:value:flags:update:)();
  v106[2] = v110;
  _OWORD v106[3] = v111;
  v106[4] = v112;
  int v107 = v113;
  v106[0] = v108;
  v106[1] = v109;
  unsigned int v71 = _ViewInputs.position.getter();
  v106[2] = v110;
  _OWORD v106[3] = v111;
  v106[4] = v112;
  int v107 = v113;
  v106[0] = v108;
  v106[1] = v109;
  unsigned int v72 = _ViewInputs.size.getter();
  *(void *)&v106[0] = __PAIR64__(v71, v92);
  *((void *)&v106[0] + 1) = __PAIR64__(v70, v72);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for [ScrollGeometryState](0, &lazy cache variable for type metadata for [ContentScrollViewBox], (uint64_t)&type metadata for ContentScrollViewBox, v67);
  lazy protocol witness table accessor for type ScrollViewPreferenceProvider and conformance ScrollViewPreferenceProvider();
  uint64_t v73 = Attribute.init<A>(body:value:flags:update:)();
  *(void *)&v106[0] = v99;
  DWORD2(v106[0]) = v100;
  MEMORY[0x1F4188790](v73);
  *((_DWORD *)&v77 - 4) = v74;
  outlined retain of [Text.Modifier]((uint64_t)&v99);
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  long long v75 = v88;
  void *v88 = v98;
  double result = *((double *)&v98 + 1);
  v75[1] = *((void *)&v98 + 1);
  return result;
}

void type metadata accessor for [ScrollGeometryState](uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  outlined init with copy of ListScrollViewProvider(a1, (uint64_t)v1);
  id v2 = (id)MEMORY[0x18C119DF0](v1);
  outlined destroy of ListScrollViewProvider((uint64_t)v1);
  type metadata accessor for UIScrollView?();
  AGGraphSetOutputValue();
}

{
  id v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t vars8;

  if (!*(void *)(a1 + 120))
  {
    id v2 = (id)AGSubgraphGetGraph();
    uint64_t v3 = (void *)AGSubgraphCreate();

    uint64_t v4 = *(void **)(a1 + 120);
    *(void *)(a1 + 120) = v3;
    uint64_t v6 = v3;

    AGSubgraphAddChild();
    AGGraphClearUpdate();
    unint64_t v5 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #1 in LimitedAvailabilityToolbarContent.IndirectOutputs.updateValue()(a1);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
  }
}

uint64_t outlined destroy of ListScrollViewProvider(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of ListScrollViewProvider(uint64_t a1, uint64_t a2)
{
  return a2;
}

void type metadata accessor for UIScrollView?()
{
  if (!lazy cache variable for type metadata for UIScrollView?)
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UIScrollView);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIScrollView?);
    }
  }
}

unint64_t lazy protocol witness table accessor for type UnaryScrollablePreferenceProvider and conformance UnaryScrollablePreferenceProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type UnaryScrollablePreferenceProvider and conformance UnaryScrollablePreferenceProvider;
  if (!lazy protocol witness table cache variable for type UnaryScrollablePreferenceProvider and conformance UnaryScrollablePreferenceProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryScrollablePreferenceProvider and conformance UnaryScrollablePreferenceProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewPreferenceProvider and conformance ScrollViewPreferenceProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewPreferenceProvider and conformance ScrollViewPreferenceProvider;
  if (!lazy protocol witness table cache variable for type ScrollViewPreferenceProvider and conformance ScrollViewPreferenceProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewPreferenceProvider and conformance ScrollViewPreferenceProvider);
  }
  return result;
}

uint64_t type metadata accessor for CollectionViewListScrollable()
{
  return swift_getGenericMetadata();
}

uint64_t WeakSelectionBasedStorage.init(_:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *MEMORY[0x1E4F4E7A0];
  if (*MEMORY[0x1E4F4E7A0] == a1) {
    int v9 = 0;
  }
  else {
    int v9 = a1;
  }
  int v37 = v9;
  BOOL v38 = v8 == a1;
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  type metadata accessor for Set();
  swift_getFunctionTypeMetadata1();
  type metadata accessor for Attribute();
  type metadata accessor for Optional();
  uint64_t v10 = type metadata accessor for WeakAttribute();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in WeakSelectionBasedStorage.init(_:), (uint64_t)v34, MEMORY[0x1E4FBC248], v10, v11, (uint64_t)&v39);
  int v24 = v40;
  uint64_t v23 = v39;
  unint64_t v12 = HIDWORD(a1);
  if (v8 == HIDWORD(a1)) {
    LODWORD(v12) = 0;
  }
  int v37 = v12;
  BOOL v38 = v8 == HIDWORD(a1);
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  swift_getFunctionTypeMetadata1();
  type metadata accessor for Attribute();
  type metadata accessor for Optional();
  uint64_t v13 = type metadata accessor for WeakAttribute();
  uint64_t v14 = MEMORY[0x1E4FBC248];
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in WeakSelectionBasedStorage.init(_:), (uint64_t)v31, MEMORY[0x1E4FBC248], v13, v15, (uint64_t)&v39);
  if (v8 == a2) {
    int v16 = 0;
  }
  else {
    int v16 = a2;
  }
  int v37 = v16;
  BOOL v38 = v8 == a2;
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  swift_getFunctionTypeMetadata1();
  type metadata accessor for Optional();
  type metadata accessor for Attribute();
  type metadata accessor for Optional();
  uint64_t v17 = type metadata accessor for WeakAttribute();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in WeakSelectionBasedStorage.init(_:), (uint64_t)v28, v14, v17, v18, (uint64_t)&v39);
  unint64_t v19 = HIDWORD(a2);
  if (v8 == HIDWORD(a2)) {
    LODWORD(v19) = 0;
  }
  int v37 = v19;
  BOOL v38 = v8 == HIDWORD(a2);
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  swift_getFunctionTypeMetadata1();
  type metadata accessor for Attribute();
  type metadata accessor for Optional();
  uint64_t v20 = type metadata accessor for WeakAttribute();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in WeakSelectionBasedStorage.init(_:), (uint64_t)v25, MEMORY[0x1E4FBC248], v20, v21, (uint64_t)&v39);
  if (v24) {
    return 0;
  }
  else {
    return v23;
  }
}

unint64_t lazy protocol witness table accessor for type ListConcatenatesFooters and conformance ListConcatenatesFooters()
{
  unint64_t result = lazy protocol witness table cache variable for type ListConcatenatesFooters and conformance ListConcatenatesFooters;
  if (!lazy protocol witness table cache variable for type ListConcatenatesFooters and conformance ListConcatenatesFooters)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListConcatenatesFooters and conformance ListConcatenatesFooters);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ListConcatenatesFooters and conformance ListConcatenatesFooters;
  if (!lazy protocol witness table cache variable for type ListConcatenatesFooters and conformance ListConcatenatesFooters)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListConcatenatesFooters and conformance ListConcatenatesFooters);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ListConcatenatesFooters and conformance ListConcatenatesFooters;
  if (!lazy protocol witness table cache variable for type ListConcatenatesFooters and conformance ListConcatenatesFooters)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListConcatenatesFooters and conformance ListConcatenatesFooters);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ListConcatenatesFooters and conformance ListConcatenatesFooters;
  if (!lazy protocol witness table cache variable for type ListConcatenatesFooters and conformance ListConcatenatesFooters)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListConcatenatesFooters and conformance ListConcatenatesFooters);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ListConcatenatesFooters and conformance ListConcatenatesFooters;
  if (!lazy protocol witness table cache variable for type ListConcatenatesFooters and conformance ListConcatenatesFooters)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListConcatenatesFooters and conformance ListConcatenatesFooters);
  }
  return result;
}

uint64_t outlined init with take of ListScrollViewProvider(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t lazy protocol witness table accessor for type ListScrollViewProvider and conformance ListScrollViewProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type ListScrollViewProvider and conformance ListScrollViewProvider;
  if (!lazy protocol witness table cache variable for type ListScrollViewProvider and conformance ListScrollViewProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListScrollViewProvider and conformance ListScrollViewProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisableListSections and conformance DisableListSections()
{
  unint64_t result = lazy protocol witness table cache variable for type DisableListSections and conformance DisableListSections;
  if (!lazy protocol witness table cache variable for type DisableListSections and conformance DisableListSections)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableListSections and conformance DisableListSections);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisableListSections and conformance DisableListSections;
  if (!lazy protocol witness table cache variable for type DisableListSections and conformance DisableListSections)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableListSections and conformance DisableListSections);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisableListSections and conformance DisableListSections;
  if (!lazy protocol witness table cache variable for type DisableListSections and conformance DisableListSections)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableListSections and conformance DisableListSections);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisableListSections and conformance DisableListSections;
  if (!lazy protocol witness table cache variable for type DisableListSections and conformance DisableListSections)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableListSections and conformance DisableListSections);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisableListSections and conformance DisableListSections;
  if (!lazy protocol witness table cache variable for type DisableListSections and conformance DisableListSections)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableListSections and conformance DisableListSections);
  }
  return result;
}

uint64_t outlined destroy of UpdateBridgedState(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type UpdateBridgedState and conformance UpdateBridgedState()
{
  unint64_t result = lazy protocol witness table cache variable for type UpdateBridgedState and conformance UpdateBridgedState;
  if (!lazy protocol witness table cache variable for type UpdateBridgedState and conformance UpdateBridgedState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UpdateBridgedState and conformance UpdateBridgedState);
  }
  return result;
}

uint64_t type metadata accessor for MakeRepresentable()
{
  return swift_getGenericMetadata();
}

uint64_t outlined destroy of BridgedListState(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BridgedListState(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of BridgedListState.ScrollTarget?(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI16BridgedListStateV12ScrollTargetVSgMaTm_1(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, type metadata accessor for BridgedListState.ScrollTarget, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _GraphInputs.selectionStorage<A>(forType:)()
{
  type metadata accessor for _GraphInputs.SelectionBasedStorageKey();
  swift_getWitnessTable();
  _GraphInputs.subscript.getter();
  return v1;
}

uint64_t type metadata accessor for _GraphInputs.SelectionBasedStorageKey()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for _GraphValue<UICollectionLayoutListConfiguration.Appearance>()
{
  if (!lazy cache variable for type metadata for _GraphValue<UICollectionLayoutListConfiguration.Appearance>)
  {
    type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<UICollectionLayoutListConfiguration.Appearance>);
    }
  }
}

void type metadata accessor for _GraphValue<CGFloat?>()
{
  if (!lazy cache variable for type metadata for _GraphValue<CGFloat?>)
  {
    _sSay7SwiftUI0A19UIAnySortComparatorVGMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E4FBC958], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<CGFloat?>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type External<BridgedListState> and conformance External<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type External<BridgedListState> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<BridgedListState> and conformance External<A>)
  {
    type metadata accessor for External<BridgedListState>(255, &lazy cache variable for type metadata for External<BridgedListState>, type metadata accessor for BridgedListState, MEMORY[0x1E4F4E778]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<BridgedListState> and conformance External<A>);
  }
  return result;
}

void type metadata accessor for External<BridgedListState>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type External<Scrollable> and conformance External<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type External<Scrollable> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<Scrollable> and conformance External<A>)
  {
    type metadata accessor for [Scrollable](255, (unint64_t *)&lazy cache variable for type metadata for External<Scrollable>, MEMORY[0x1E4F4E778]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<Scrollable> and conformance External<A>);
  }
  return result;
}

uint64_t protocol witness for View.body.getter in conformance BarItemView@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = static VerticalAlignment.center.getter();
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  return closure #1 in BarItemView.body.getter(v1, a1 + 24);
}

uint64_t closure #1 in BarItemView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = swift_allocObject();
  *(unsigned char *)(v4 + 16) = 2;
  outlined init with copy of _ViewList_View(a1, (uint64_t)v18);
  unint64_t v19 = _s7SwiftUI4ViewPAAE36accessibilityShowsLargeContentVieweryQrAA013AccessibilityfgC8BehaviorOFyAA0ifgC4TreeOzcfU_TA_0;
  uint64_t v20 = v4;
  LOBYTE(v4) = *(unsigned char *)(a1 + 88);
  outlined init with copy of WeakBox<UIBarButtonItem>(a1 + 96, (uint64_t)&v22);
  char v21 = v4;
  int v5 = *(unsigned __int8 *)(a1 + 89);
  if (v5 == 1)
  {
    unsigned __int8 v6 = static Edge.Set.horizontal.getter();
    EdgeInsets.init(_all:)();
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    uint64_t v12 = v11;
    uint64_t v14 = v13;
    uint64_t v15 = v6;
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v8 = 0;
    uint64_t v10 = 0;
    uint64_t v12 = 0;
    uint64_t v14 = 0;
  }
  _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0((uint64_t)v18, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>);
  _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0((uint64_t)v17, a2, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>);
  *(void *)(a2 + 120) = v15;
  *(void *)(a2 + 128) = v8;
  *(void *)(a2 + 136) = v10;
  *(void *)(a2 + 144) = v12;
  *(void *)(a2 + 152) = v14;
  *(unsigned char *)(a2 + 160) = 0;
  *(unsigned char *)(a2 + 161) = v5 ^ 1;
  outlined destroy of ToolbarStorage.Entry((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>);
  return outlined destroy of ToolbarStorage.Entry((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>);
}

uint64_t outlined destroy of ToolbarStorage.Entry(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>)
  {
    type metadata accessor for ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>);
    }
  }
}

uint64_t destroy for TableViewListCore.UpdateBridgedState()
{
  return swift_unknownObjectWeakDestroy();
}

uint64_t outlined init with copy of WeakBox<UIBarButtonItem>(uint64_t a1, uint64_t a2)
{
  _sSay7SwiftUI14ToolbarStorageV5EntryVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIBarButtonItem>, (uint64_t (*)(uint64_t))type metadata accessor for UIBarButtonItem, MEMORY[0x1E4F41720]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>)
  {
    type metadata accessor for _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>, (uint64_t)&type metadata for AccessibilityLargeContentViewTree.Key, (uint64_t)&protocol witness table for AccessibilityLargeContentViewTree.Key, MEMORY[0x1E4F41108]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>);
    }
  }
}

void type metadata accessor for ModifiedContent<Divider, _PaddingLayout>?()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Divider, _PaddingLayout>?)
  {
    type metadata accessor for _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>(255, &lazy cache variable for type metadata for ModifiedContent<Divider, _PaddingLayout>, (uint64_t)&type metadata for Divider, MEMORY[0x1E4F3FA80], MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Divider, _PaddingLayout>?);
    }
  }
}

void type metadata accessor for _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollViewRTLAlignmentAdjustment(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ScrollViewRTLAlignmentAdjustment and conformance ScrollViewRTLAlignmentAdjustment();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollViewAdjustedConfiguration(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ScrollViewAdjustedConfiguration and conformance ScrollViewAdjustedConfiguration();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollViewChildSafeAreaInsets(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ScrollViewChildSafeAreaInsets and conformance ScrollViewChildSafeAreaInsets();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollViewAlignmentAdjustment(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ScrollViewAlignmentAdjustment and conformance ScrollViewAlignmentAdjustment();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollViewChildContainerSize(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ScrollViewChildContainerSize and conformance ScrollViewChildContainerSize();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollViewAdjustedProperties(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ScrollViewAdjustedProperties and conformance ScrollViewAdjustedProperties();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollViewResponderPosition(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ScrollViewResponderPosition and conformance ScrollViewResponderPosition();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollViewDisplayListFrame(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ScrollViewDisplayListFrame and conformance ScrollViewDisplayListFrame();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollViewContentFrameSize(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ScrollViewContentFrameSize and conformance ScrollViewContentFrameSize();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollViewAdjustedSafeArea(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ScrollViewAdjustedSafeArea and conformance ScrollViewAdjustedSafeArea();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollViewAdjustedPosition(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ScrollViewAdjustedPosition and conformance ScrollViewAdjustedPosition();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollViewLayoutComputer(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ScrollViewLayoutComputer and conformance ScrollViewLayoutComputer();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollViewDefaultAnchors(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ScrollViewDefaultAnchors and conformance ScrollViewDefaultAnchors();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollViewChildTransform(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ScrollViewChildTransform and conformance ScrollViewChildTransform();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollViewResponderSize(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ScrollViewResponderSize and conformance ScrollViewResponderSize();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollViewChildSafeArea(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ScrollViewChildSafeArea and conformance ScrollViewChildSafeArea();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollViewChildPosition(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ScrollViewChildPosition and conformance ScrollViewChildPosition();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollViewAdjustedState(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ScrollViewAdjustedState and conformance ScrollViewAdjustedState();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance LazyCollectedPlacements(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LazyCollectedPlacements and conformance LazyCollectedPlacements();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollViewContentFrame(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ScrollViewContentFrame and conformance ScrollViewContentFrame();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollViewAdjustedSize(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ScrollViewAdjustedSize and conformance ScrollViewAdjustedSize();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollViewDisplayList(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ScrollViewDisplayList and conformance ScrollViewDisplayList();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance LazyViewGeometry(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LazyViewGeometry and conformance LazyViewGeometry();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance LazyViewPhase(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LazyViewPhase and conformance LazyViewPhase();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t one-time initialization function for _sharedNamespaceID()
{
  uint64_t result = AGMakeUniqueID();
  static _PresentationTransitionCompatibility._sharedNamespaceID = result;
  return result;
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.setter in conformance EnableLazyLayoutReuseLoggingAlways(char a1)
{
  uint64_t result = swift_beginAccess();
  static EnableLazyLayoutReuseLoggingAlways.cacheduint64_t Value = a1;
  return result;
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.setter in conformance EnableLazyLayoutReuseLogging(char a1)
{
  uint64_t result = swift_beginAccess();
  static EnableLazyLayoutReuseLogging.cacheduint64_t Value = a1;
  return result;
}

unint64_t lazy protocol witness table accessor for type EnsureNavigationStateSeeds and conformance EnsureNavigationStateSeeds()
{
  unint64_t result = lazy protocol witness table cache variable for type EnsureNavigationStateSeeds and conformance EnsureNavigationStateSeeds;
  if (!lazy protocol witness table cache variable for type EnsureNavigationStateSeeds and conformance EnsureNavigationStateSeeds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnsureNavigationStateSeeds and conformance EnsureNavigationStateSeeds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnsureNavigationStateSeeds and conformance EnsureNavigationStateSeeds;
  if (!lazy protocol witness table cache variable for type EnsureNavigationStateSeeds and conformance EnsureNavigationStateSeeds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnsureNavigationStateSeeds and conformance EnsureNavigationStateSeeds);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ContentMarginModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ContentMarginModifier()
{
  lazy protocol witness table accessor for type ContentMarginModifier and conformance ContentMarginModifier();

  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

unint64_t lazy protocol witness table accessor for type ContentMarginModifier and conformance ContentMarginModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ContentMarginModifier and conformance ContentMarginModifier;
  if (!lazy protocol witness table cache variable for type ContentMarginModifier and conformance ContentMarginModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentMarginModifier and conformance ContentMarginModifier);
  }
  return result;
}

uint64_t type metadata completion function for ResolvedButtonStyle()
{
  uint64_t result = type metadata accessor for PrimitiveButtonStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for SearchFieldState()
{
  uint64_t result = type metadata accessor for AttributedString();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeWithCopy for ToolbarStorage.ID(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_DWORD *initializeWithCopy for Transform(_DWORD *a1, int *a2, uint64_t a3)
{
  int v4 = *a2;
  unint64_t v3 = (unint64_t)a2 + 7;
  *a1 = v4;
  long long v5 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *long long v5 = *(_DWORD *)(v3 & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v6 = (_DWORD *)(((v3 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v7 = *v6;
  char v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v9 = *v8;
  uint64_t v10 = (void *)(((unint64_t)v9 + 11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (void *)(((unint64_t)v8 + 11) & 0xFFFFFFFFFFFFFFF8);
  void *v10 = *v11;
  uint64_t v32 = *(void *)(a3 + 16);
  uint64_t v12 = *(void *)(v32 - 8);
  uint64_t v13 = *(unsigned int *)(v12 + 84);
  uint64_t v14 = *(_DWORD *)(v12 + 80);
  unint64_t v15 = *(_DWORD *)(v12 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  int v16 = (unsigned char *)(((unint64_t)v10 + v14 + 8) & v15);
  uint64_t v17 = (unsigned char *)(((unint64_t)v11 + v14 + 8) & v15);
  if (v13 <= 0xFB) {
    int v18 = 251;
  }
  else {
    int v18 = *(_DWORD *)(v12 + 84);
  }
  if (v13 <= 0x7FFFFFFF) {
    int v19 = 0x7FFFFFFF;
  }
  else {
    int v19 = *(_DWORD *)(v12 + 84);
  }
  uint64_t v31 = ~v14;
  uint64_t v20 = v14 + 1;
  uint64_t v21 = *(void *)(*(void *)(v32 - 8) + 64) + 7;
  unint64_t v22 = (v21 + ((v14 + 1) & ~v14)) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = v22 + 8;
  size_t v24 = ((v22 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_retain();
  if (v18 == v19)
  {
    if (v13 <= 0xFB)
    {
      unsigned int v25 = *v17;
      unsigned int v26 = v25 - 1;
      if (v25 < 2) {
        unsigned int v26 = 0;
      }
      uint64_t v27 = a1;
      if (v26 >= 4) {
        goto LABEL_20;
      }
      goto LABEL_14;
    }
    int v29 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v12 + 48))((unint64_t)&v17[v20] & v31, v13, v32);
  }
  else
  {
    unint64_t v28 = *(void *)&v17[v23];
    if (v28 >= 0xFFFFFFFF) {
      LODWORD(v28) = -1;
    }
    int v29 = v28 + 1;
  }
  uint64_t v27 = a1;
  if (v29)
  {
LABEL_20:
    memcpy(v16, v17, v24);
    goto LABEL_21;
  }
  LOBYTE(v25) = *v17;
LABEL_14:
  *int v16 = v25;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 16))((unint64_t)&v16[v20] & v31, (unint64_t)&v17[v20] & v31, v32);
  *(void *)((v21 + ((unint64_t)&v16[v20] & v31)) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v21
                                                                                               + ((unint64_t)&v17[v20] & v31)) & 0xFFFFFFFFFFFFFFF8);
  *(void *)&v16[v23] = *(void *)&v17[v23];
  swift_bridgeObjectRetain();
LABEL_21:
  v16[v24] = v17[v24];
  return v27;
}

unsigned char *storeEnumTagSinglePayload for AnimationCompletionCriteria(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

BOOL NavigableListModifier.IsEditing.value.getter()
{
  NavigableListModifier.IsEditing.editMode.getter((uint64_t)&v4);
  uint64_t v0 = v5;
  if (!v5) {
    return 0;
  }
  uint64_t v1 = v4;
  type metadata accessor for _GraphValue<Namespace.ID>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<EditMode>, (uint64_t)&type metadata for EditMode, MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v3);
  outlined consume of Binding<NavigationSplitViewColumn>?(v1, v0);
  return v3 != 0;
}

uint64_t NavigableListModifier.IsEditing.editMode.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for Binding<EditMode>?();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(void *)Value;
  uint64_t v3 = *(void *)(Value + 8);
  *(void *)a1 = *(void *)Value;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(Value + 16);

  return outlined copy of Binding<NavigationSplitViewColumn>?(v4, v3);
}

uint64_t static NavigationStackReader._makeView(view:inputs:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6 = a5;
  uint64_t v69 = a6;
  uint64_t v150 = *MEMORY[0x1E4F143B8];
  uint64_t v78 = *a1;
  int v10 = *((_DWORD *)a1 + 2);
  unint64_t v81 = a1[2];
  int v11 = *((_DWORD *)a1 + 6);
  int v82 = v10;
  LODWORD(v83) = v11;
  HIDWORD(v83) = *((_DWORD *)a1 + 7);
  unsigned int v12 = *((_DWORD *)a1 + 8);
  unsigned int v86 = *((_DWORD *)a1 + 9);
  unsigned int v87 = v12;
  uint64_t v84 = a1[5];
  uint64_t v88 = a1[6];
  unsigned int v13 = *((_DWORD *)a1 + 14);
  unsigned int v92 = *((_DWORD *)a1 + 15);
  unsigned int v93 = v13;
  unsigned int v94 = *((_DWORD *)a1 + 16);
  unsigned int v14 = *((_DWORD *)a1 + 17);
  unsigned int v90 = *((_DWORD *)a1 + 18);
  unsigned int v91 = v14;
  unsigned int v89 = *((_DWORD *)a1 + 19);
  int v85 = *((_DWORD *)a1 + 20);
  uint64_t v120 = a2;
  uint64_t v121 = a3;
  unint64_t v122 = a4;
  uint64_t v123 = a5;
  type metadata accessor for NavigationStackReader();
  type metadata accessor for _GraphValue();
  uint64_t v15 = MEMORY[0x1E4F41808];
  _GraphValue.subscript.getter();
  uint64_t v16 = v15;
  uint64_t v17 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F3F590];
  _s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_1(0, &lazy cache variable for type metadata for _GraphValue<Namespace.ID>, v16, MEMORY[0x1E4F3F590]);
  LODWORD(v74) = _GraphValue.value.getter();
  uint64_t v116 = a2;
  uint64_t v117 = a3;
  unint64_t v118 = a4;
  uint64_t v119 = v6;
  _s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationPath>, (uint64_t)&type metadata for AnyNavigationPath, MEMORY[0x1E4F41638]);
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue<Binding<AnyNavigationPath>>();
  LODWORD(v72) = _GraphValue.value.getter();
  uint64_t v112 = a2;
  uint64_t v113 = a3;
  unint64_t v114 = a4;
  uint64_t v115 = v6;
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue();
  unsigned int v76 = _GraphValue.value.getter();
  uint64_t v108 = a2;
  uint64_t v109 = a3;
  unint64_t v110 = a4;
  uint64_t v111 = v6;
  uint64_t v18 = MEMORY[0x1E4FBB390];
  _GraphValue.subscript.getter();
  _s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_1(0, &lazy cache variable for type metadata for _GraphValue<Bool>, v18, v17);
  LODWORD(v66) = _GraphValue.value.getter();
  uint64_t v104 = a2;
  uint64_t v105 = a3;
  unint64_t v106 = a4;
  uint64_t v107 = v6;
  type metadata accessor for NavigationStateHost();
  _GraphValue.subscript.getter();
  type metadata accessor for Attribute<(authority: NavigationAuthority?, computedEnvironment: EnvironmentValues)>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<NavigationStateHost>, (uint64_t (*)(uint64_t))type metadata accessor for NavigationStateHost, MEMORY[0x1E4F3F590]);
  unsigned int v75 = _GraphValue.value.getter();
  uint64_t v79 = a2;
  uint64_t v80 = v6;
  uint64_t v100 = a2;
  uint64_t v101 = a3;
  unint64_t v102 = a4;
  uint64_t v103 = v6;
  *(void *)&long long v141 = a2;
  unint64_t v77 = a4;
  type metadata accessor for NavigationStackReader.TransformBox();
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue();
  int v59 = _GraphValue.value.getter();
  lazy protocol witness table accessor for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  LODWORD(v71) = a2;
  unint64_t v65 = lazy protocol witness table accessor for type NavigationAuthority.StackKeyViewInputKey and conformance NavigationAuthority.StackKeyViewInputKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  int v19 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F4E778];
  _s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_1(0, &lazy cache variable for type metadata for External<NavigationSplitColumn>, (uint64_t)&type metadata for NavigationSplitColumn, MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<NavigationSplitColumn> and conformance External<A>(&lazy protocol witness table cache variable for type External<NavigationSplitColumn> and conformance External<A>, &lazy cache variable for type metadata for External<NavigationSplitColumn>, (uint64_t)&type metadata for NavigationSplitColumn);
  int v20 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v21 = MEMORY[0x1E4FBB550];
  _s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_1(0, &lazy cache variable for type metadata for External<Int>, MEMORY[0x1E4FBB550], v19);
  uint64_t v23 = v22;
  v58[7] = lazy protocol witness table accessor for type External<NavigationSplitColumn> and conformance External<A>(&lazy protocol witness table cache variable for type External<Int> and conformance External<A>, &lazy cache variable for type metadata for External<Int>, v21);
  v58[8] = v23;
  *(void *)char v134 = v141;
  *(_DWORD *)&v134[8] = v74;
  *(_DWORD *)&v134[12] = v20;
  *(_DWORD *)&v134[16] = Attribute.init<A>(body:value:flags:update:)();
  *(void *)&long long v141 = v79;
  *((void *)&v141 + 1) = a3;
  unint64_t v142 = a4;
  *(void *)&long long v143 = v6;
  uint64_t v98 = type metadata accessor for NavigationStackReader.StackKey();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<NavigationState.StackContent.Key?>(0, &lazy cache variable for type metadata for Attribute<NavigationState.StackContent.Key?>, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key, MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v134, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_26, (uint64_t)&v97, v98, MEMORY[0x1E4FBC248], v24, MEMORY[0x1E4FBC278], v25);
  unint64_t v74 = 0;
  LODWORD(v19) = v141;
  unint64_t v64 = lazy protocol witness table accessor for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v26 = v141;
  *(void *)&long long v141 = v78;
  DWORD2(v141) = v82;
  unint64_t v142 = v81;
  *(void *)&long long v143 = v83;
  *((void *)&v143 + 1) = __PAIR64__(v86, v87);
  uint64_t v144 = v84;
  uint64_t v145 = v88;
  *(void *)&long long v146 = __PAIR64__(v92, v93);
  *((void *)&v146 + 1) = __PAIR64__(v91, v94);
  unint64_t v147 = __PAIR64__(v89, v90);
  LODWORD(v148) = v85;
  int v27 = _ViewInputs.environment.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_OWORD *)char v134 = xmmword_18834BB90;
  *(void *)&v134[16] = 0;
  *(void *)((char *)&v141 + 4) = v26;
  LODWORD(v141) = v76;
  HIDWORD(v141) = v27;
  unint64_t v142 = __PAIR64__(v19, v75);
  *(void *)&long long v143 = __PAIR64__(v76, v72);
  BYTE8(v143) = v71;
  outlined init with take of NavigationAuthority?((uint64_t)v134, (uint64_t)&v144);
  *(void *)char v134 = v79;
  uint64_t v68 = a3;
  *(void *)&v134[8] = a3;
  *(void *)&v134[16] = a4;
  *(void *)&long long v135 = v6;
  uint64_t v28 = type metadata accessor for NavigationStackReader.ChildEnvironment();
  _OWORD v96[2] = v28;
  v96[3] = swift_getWitnessTable();
  type metadata accessor for Attribute<(authority: NavigationAuthority?, computedEnvironment: EnvironmentValues)>(0, &lazy cache variable for type metadata for Attribute<(authority: NavigationAuthority?, computedEnvironment: EnvironmentValues)>, (uint64_t (*)(uint64_t))type metadata accessor for (authority: NavigationAuthority?, computedEnvironment: EnvironmentValues), MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v141, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_21, (uint64_t)v96, v28, MEMORY[0x1E4FBC248], v29, MEMORY[0x1E4FBC278], v30);
  v58[6] = 0;
  (*(void (**)(long long *, uint64_t))(*(void *)(v28 - 8) + 8))(&v141, v28);
  int v70 = *(_DWORD *)v134;
  int v67 = (int)v19;
  unint64_t v62 = AGCreateWeakAttribute();
  unint64_t v63 = HIDWORD(v62);
  AGGraphCreateOffsetAttribute2();
  unint64_t v31 = AGCreateWeakAttribute();
  *(void *)&long long v141 = v78;
  unint64_t v73 = HIDWORD(v31);
  unint64_t v74 = v31;
  DWORD2(v141) = v82;
  unint64_t v142 = v81;
  *(void *)&long long v143 = v83;
  *((void *)&v143 + 1) = __PAIR64__(v86, v87);
  uint64_t v144 = v84;
  uint64_t v145 = v88;
  *(void *)&long long v146 = __PAIR64__(v92, v93);
  *((void *)&v146 + 1) = __PAIR64__(v91, v94);
  unint64_t v147 = __PAIR64__(v89, v90);
  LODWORD(v148) = v85;
  int v61 = _ViewInputs.environment.getter();
  *(void *)&long long v141 = v78;
  DWORD2(v141) = v82;
  unint64_t v142 = v81;
  *(void *)&long long v143 = v83;
  *((void *)&v143 + 1) = __PAIR64__(v86, v87);
  uint64_t v144 = v84;
  uint64_t v145 = v88;
  *(void *)&long long v146 = __PAIR64__(v92, v93);
  *((void *)&v146 + 1) = __PAIR64__(v91, v94);
  unint64_t v147 = __PAIR64__(v89, v90);
  LODWORD(v148) = v85;
  unsigned int v60 = _ViewInputs.viewPhase.getter();
  *(void *)&long long v141 = v78;
  DWORD2(v141) = v82;
  unint64_t v142 = v81;
  LODWORD(v6) = HIDWORD(v83);
  *(void *)&long long v143 = v83;
  *((void *)&v143 + 1) = __PAIR64__(v86, v87);
  uint64_t v32 = v84;
  uint64_t v33 = v88;
  uint64_t v144 = v84;
  uint64_t v145 = v88;
  *(void *)&long long v146 = __PAIR64__(v92, v93);
  *((void *)&v146 + 1) = __PAIR64__(v91, v94);
  unint64_t v147 = __PAIR64__(v89, v90);
  LODWORD(v148) = v85;
  LODWORD(v21) = _ViewInputs.transaction.getter();
  type metadata accessor for BoundNavigationPathDetector.PathObservation();
  uint64_t v34 = swift_allocObject();
  uint64_t v35 = v34 + OBJC_IVAR____TtCV7SwiftUI27BoundNavigationPathDetector15PathObservation_tracking;
  uint64_t v36 = type metadata accessor for ObservationTracking();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v35, 1, 1, v36);
  *(unsigned char *)(v34 + OBJC_IVAR____TtCV7SwiftUI27BoundNavigationPathDetector15PathObservation_updateObserved) = 0;
  UpdateCycleDetector.init()();
  int v37 = DWORD2(v141);
  char v38 = BYTE12(v141);
  uint64_t v39 = v141;
  *(void *)&long long v141 = __PAIR64__(v63, v62);
  *((void *)&v141 + 1) = __PAIR64__(v66, v72);
  unint64_t v142 = __PAIR64__(v73, v74);
  LODWORD(v143) = v61;
  BYTE4(v143) = v71;
  *((void *)&v143 + 1) = __PAIR64__(v21, v60);
  uint64_t v144 = v34;
  uint64_t v145 = v39;
  LODWORD(v146) = v37;
  BYTE4(v146) = v38;
  DWORD2(v146) = 0;
  unint64_t v147 = 0;
  uint64_t v148 = 0;
  uint64_t v149 = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type BoundNavigationPathDetector and conformance BoundNavigationPathDetector();
  uint64_t v66 = MEMORY[0x1E4FBC848] + 8;
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  *(void *)&long long v141 = v78;
  DWORD2(v141) = v82;
  unint64_t v142 = v81;
  *(void *)&long long v143 = __PAIR64__(v6, v83);
  *((void *)&v143 + 1) = __PAIR64__(v86, v87);
  uint64_t v144 = v32;
  uint64_t v145 = v33;
  *(void *)&long long v146 = __PAIR64__(v92, v93);
  *((void *)&v146 + 1) = __PAIR64__(v91, v94);
  unint64_t v147 = __PAIR64__(v89, v90);
  LODWORD(v148) = v85;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AGGraphCreateOffsetAttribute2();
  _ViewInputs.environment.setter();
  v134[0] = 0;
  lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
  PropertyList.subscript.setter();
  v134[0] = 1;
  unint64_t v72 = lazy protocol witness table accessor for type IsInNavigationV4Context and conformance IsInNavigationV4Context();
  PropertyList.subscript.setter();
  *(void *)char v134 = v62;
  PropertyList.subscript.setter();
  *(void *)char v134 = v74;
  PropertyList.subscript.setter();
  PreferenceKeys.add(_:)();
  unint64_t v71 = lazy protocol witness table accessor for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  uint64_t v40 = *(void *)v134;
  uint64_t KeyPath = swift_getKeyPath();
  *(_DWORD *)char v134 = v75;
  *(void *)&v134[8] = KeyPath;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for NavigationSeedHost(0);
  type metadata accessor for Focus<NavigationStateHost, NavigationSeedHost>();
  lazy protocol witness table accessor for type NavigationSelectionHost and conformance NavigationSelectionHost(&lazy protocol witness table cache variable for type Focus<NavigationStateHost, NavigationSeedHost> and conformance Focus<A, B>, (void (*)(uint64_t))type metadata accessor for Focus<NavigationStateHost, NavigationSeedHost>);
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  uint64_t v42 = AGCreateWeakAttribute();
  *(void *)char v134 = v40;
  *(void *)&v134[8] = v42;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type EnsureNavigationStateSeeds and conformance EnsureNavigationStateSeeds();
  Attribute.init<A>(body:value:flags:update:)();
  *(void *)char v134 = AGCreateWeakAttribute();
  PropertyList.subscript.setter();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v134[0])
  {
    *(void *)char v134 = 0;
    *(_DWORD *)char v134 = Attribute.init<A>(body:value:flags:update:)();
    lazy protocol witness table accessor for type NavigationAuthority.DepthKey and conformance NavigationAuthority.DepthKey();
    lazy protocol witness table accessor for type Attribute<Int> and conformance Attribute<A>();
    uint64_t v43 = _GraphInputs.subscript.setter();
    v95[0] = v76;
    v95[1] = v67;
    _OWORD v95[2] = v74;
    v95[3] = v73;
    MEMORY[0x1F4188790](v43);
    uint64_t v44 = v80;
    *(void *)char v134 = v79;
    *(void *)&v134[8] = v68;
    *(void *)&v134[16] = v77;
    *(void *)&long long v135 = v80;
    uint64_t v45 = type metadata accessor for NavigationStackReader.ExtractedRoot();
    type metadata accessor for ReadDestinationsModifier();
    type metadata accessor for ModifiedContent();
    type metadata accessor for _PreferenceTransformModifier<InspectorStorageV5.PreferenceKey>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<NavigationDestinationKey>, (uint64_t)&type metadata for NavigationDestinationKey, (uint64_t)&protocol witness table for NavigationDestinationKey, MEMORY[0x1E4F41108]);
    type metadata accessor for ModifiedContent();
    type metadata accessor for PositionedNavigationDestinationProcessor();
    v58[2] = type metadata accessor for ModifiedContent();
    v58[3] = v45;
    v58[4] = swift_getWitnessTable();
    uint64_t v46 = type metadata accessor for Attribute();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v95, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)v58, v45, MEMORY[0x1E4FBC248], v46, MEMORY[0x1E4FBC278], v47);
    _GraphValue.init(_:)();
    *(void *)char v134 = v141;
    *(_DWORD *)&v134[8] = DWORD2(v141);
    long long v135 = v143;
    *(void *)&v134[16] = v142;
    uint64_t v136 = v144;
    uint64_t v137 = v145;
    long long v138 = v146;
    unint64_t v139 = v147;
    int v140 = v148;
    uint64_t v128 = v44;
    long long v129 = &protocol witness table for ReadDestinationsModifier<A>;
    uint64_t v48 = swift_getWitnessTable();
    uint64_t v49 = lazy protocol witness table accessor for type _PreferenceTransformModifier<InspectorStorageV5.PreferenceKey> and conformance _PreferenceTransformModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<NavigationDestinationKey> and conformance _PreferenceTransformModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<NavigationDestinationKey>, (uint64_t)&type metadata for NavigationDestinationKey, (uint64_t)&protocol witness table for NavigationDestinationKey);
    uint64_t v126 = v48;
    uint64_t v127 = v49;
    uint64_t v124 = swift_getWitnessTable();
    long long v125 = &protocol witness table for PositionedNavigationDestinationProcessor<A>;
    swift_getWitnessTable();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    *(void *)char v134 = v78;
    *(_DWORD *)&v134[8] = v82;
    *(void *)&v134[16] = v81;
    *(void *)&long long v135 = v83;
    *((void *)&v135 + 1) = __PAIR64__(v86, v87);
    uint64_t v136 = v32;
    uint64_t v137 = v33;
    *(void *)&long long v138 = __PAIR64__(v92, v93);
    *((void *)&v138 + 1) = __PAIR64__(v91, v94);
    unint64_t v139 = __PAIR64__(v89, v90);
    int v140 = v85;
    swift_getKeyPath();
    unsigned int v75 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    *(void *)char v134 = v78;
    *(_DWORD *)&v134[8] = v82;
    *(void *)&v134[16] = v81;
    *(void *)&long long v135 = v83;
    *((void *)&v135 + 1) = __PAIR64__(v86, v87);
    uint64_t v136 = v32;
    uint64_t v137 = v33;
    *(void *)&long long v138 = __PAIR64__(v92, v93);
    *((void *)&v138 + 1) = __PAIR64__(v91, v94);
    unint64_t v139 = __PAIR64__(v89, v90);
    int v140 = v85;
    int v51 = _ViewInputs.viewPhase.getter();
    UpdateCycleDetector.init()();
    int v52 = *(_DWORD *)&v134[8];
    char v53 = v134[12];
    uint64_t v54 = *(void *)v134;
    *(_DWORD *)char v134 = v75;
    *(_DWORD *)&v134[4] = OffsetAttribute2;
    *(void *)&v134[12] = v54;
    *(_DWORD *)&v134[8] = v51;
    *(_DWORD *)&v134[20] = v52;
    LOBYTE(v135) = v53;
    DWORD1(v135) = 0;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type UpdateNavigationEventHandlers and conformance UpdateNavigationEventHandlers();
    Attribute.init<A>(body:value:flags:update:)();
    static AGAttributeFlags.transactional.getter();
    AGGraphSetFlags();
    *(void *)char v134 = v79;
    *(void *)&v134[8] = v68;
    *(void *)&v134[16] = v77;
    *(void *)&long long v135 = v80;
    type metadata accessor for NavigationStackReader.AppliedBody();
    type metadata accessor for PositionedNavigationDestinationProcessor();
    type metadata accessor for ModifiedContent();
    type metadata accessor for _PreferenceTransformModifier<InspectorStorageV5.PreferenceKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<InspectorStorageV5.PreferenceKey>, (uint64_t)&type metadata for InspectorStorageV5.PreferenceKey, (uint64_t)&protocol witness table for InspectorStorageV5.PreferenceKey, MEMORY[0x1E4F41108]);
    type metadata accessor for ModifiedContent();
    *(_DWORD *)char v134 = v67;
    *(_DWORD *)&v134[4] = v59;
    *(_DWORD *)&v134[8] = v76;
    *(_DWORD *)&v134[12] = v74;
    *(_DWORD *)&v134[16] = v73;
    swift_getWitnessTable();
    _GraphValue.init<A>(_:)();
    *(void *)char v134 = v141;
    *(_DWORD *)&v134[8] = DWORD2(v141);
    long long v135 = v143;
    *(void *)&v134[16] = v142;
    uint64_t v136 = v144;
    uint64_t v137 = v145;
    long long v138 = v146;
    unint64_t v139 = v147;
    int v140 = v148;
    unint64_t v132 = v77;
    uint64_t v133 = &protocol witness table for PositionedNavigationDestinationProcessor<A>;
    uint64_t v55 = swift_getWitnessTable();
    uint64_t v56 = lazy protocol witness table accessor for type _PreferenceTransformModifier<InspectorStorageV5.PreferenceKey> and conformance _PreferenceTransformModifier<A>(&lazy protocol witness table cache variable for type _PreferenceTransformModifier<InspectorStorageV5.PreferenceKey> and conformance _PreferenceTransformModifier<A>, &lazy cache variable for type metadata for _PreferenceTransformModifier<InspectorStorageV5.PreferenceKey>, (uint64_t)&type metadata for InspectorStorageV5.PreferenceKey, (uint64_t)&protocol witness table for InspectorStorageV5.PreferenceKey);
    uint64_t v130 = v55;
    uint64_t v131 = v56;
    swift_getWitnessTable();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  return swift_release();
}

uint64_t NavigationStackReader.ChildEnvironment.key.getter()
{
  return *(void *)AGGraphGetValue();
}

uint64_t outlined init with take of NavigationAuthority?(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_1(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _GraphValue<Namespace.ID>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type External<NavigationSplitColumn> and conformance External<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_1(255, a2, a3, MEMORY[0x1E4F4E778]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Attribute<(authority: NavigationAuthority?, computedEnvironment: EnvironmentValues)>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

double static NavigationDestinationModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void)@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, double *a9@<X8>)
{
  uint64_t v55 = a7;
  uint64_t v54 = a6;
  unint64_t v64 = a3;
  unint64_t v65 = a4;
  uint64_t v66 = a9;
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  int v53 = *a1;
  uint64_t v11 = *(void *)a2;
  unsigned int v56 = *(_DWORD *)(a2 + 8);
  uint64_t v12 = *(void *)(a2 + 16);
  uint64_t v57 = *(void *)(a2 + 24);
  int v58 = *(_DWORD *)(a2 + 32);
  int v59 = *(_DWORD *)(a2 + 36);
  uint64_t v14 = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a2 + 48);
  int v15 = *(_DWORD *)(a2 + 56);
  int v60 = *(_DWORD *)(a2 + 60);
  int v16 = *(_DWORD *)(a2 + 68);
  int v61 = *(_DWORD *)(a2 + 64);
  int v17 = *(_DWORD *)(a2 + 76);
  int v62 = *(_DWORD *)(a2 + 72);
  int v63 = *(_DWORD *)(a2 + 80);
  lazy protocol witness table accessor for type IsInNavigationV4Context and conformance IsInNavigationV4Context();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v71 != 1)
  {
    _StringGuts.grow(_:)(206);
    v28._uint64_t countAndFlagsBits = 0xD0000000000000B6;
    v28._object = (void *)0x80000001883285A0;
    String.append(_:)(v28);
    v69[0] = a5;
    swift_getMetatypeMetadata();
    v29._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30._uint64_t countAndFlagsBits = 0xD000000000000016;
    v30._object = (void *)0x8000000188328660;
    String.append(_:)(v30);
    MEMORY[0x18C112B90](0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    uint64_t v71 = v11;
    unint64_t v72 = v56 | 0xE000000000000000;
    uint64_t v73 = v12;
    uint64_t v74 = v57;
    int v75 = v58;
    int v76 = v59;
    uint64_t v77 = v14;
    uint64_t v78 = v13;
    int v79 = v15;
    int v80 = v60;
    int v81 = v61;
    int v82 = v16;
    int v83 = v62;
    int v84 = v17;
    goto LABEL_10;
  }
  int v50 = v16;
  int v51 = v17;
  int v52 = v15;
  lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  char v18 = static SemanticFeature.isEnabled.getter();
  unint64_t v19 = 0xD000000000000014;
  if (v18) {
    unint64_t v19 = 0;
  }
  uint64_t v49 = v19;
  uint64_t v20 = a8;
  if (v18) {
    uint64_t v21 = (void *)0xE000000000000000;
  }
  else {
    uint64_t v21 = (void *)0x8000000188328680;
  }
  unint64_t v72 = 0xE000000000000000;
  _StringGuts.grow(_:)(410);
  v22._object = (void *)0x80000001883286A0;
  v22._uint64_t countAndFlagsBits = 0x1000000000000180;
  String.append(_:)(v22);
  v69[0] = a5;
  swift_getMetatypeMetadata();
  v23._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._uint64_t countAndFlagsBits = 0xD000000000000015;
  v24._object = (void *)0x8000000188328830;
  String.append(_:)(v24);
  v25._uint64_t countAndFlagsBits = v49;
  v25._object = v21;
  String.append(_:)(v25);
  uint64_t v26 = v20;
  swift_bridgeObjectRelease();
  v27._uint64_t countAndFlagsBits = 46;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  MEMORY[0x18C112B90](0, 0xE000000000000000);
  swift_bridgeObjectRelease();
  if (static SemanticFeature.isEnabled.getter())
  {
    uint64_t v71 = v11;
    LODWORD(v72) = v56;
    uint64_t v73 = v12;
    uint64_t v74 = v57;
    int v75 = v58;
    int v76 = v59;
    uint64_t v77 = v14;
    uint64_t v78 = v13;
    int v79 = v52;
    int v80 = v60;
    int v81 = v61;
    int v82 = v50;
    int v83 = v62;
    int v84 = v51;
LABEL_10:
    int v85 = v63;
    v64();
    return result;
  }
  LODWORD(v69[0]) = v53;
  uint64_t v32 = v54;
  uint64_t v33 = v55;
  type metadata accessor for NavigationDestinationModifier();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  closure #1 in static NavigationDestinationModifier._makeView(modifier:inputs:body:)(1, a5, v54, v55, v26);
  uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  uint64_t v35 = v26;
  int v36 = OffsetAttribute2;
  uint64_t v71 = v11;
  unint64_t v72 = __PAIR64__(HIDWORD(v54), v56);
  uint64_t v73 = v12;
  uint64_t v74 = v57;
  int v75 = v58;
  int v76 = v59;
  uint64_t v77 = v14;
  uint64_t v78 = v13;
  int v37 = v52;
  int v79 = v52;
  int v80 = v60;
  int v81 = v61;
  int v82 = v50;
  int v83 = v62;
  int v84 = v51;
  int v85 = v63;
  char v38 = ((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t *))v64)(&v67, OffsetAttribute2, &v71);
  unint64_t v65 = &v49;
  LODWORD(v69[0]) = v36;
  v69[1] = 0;
  int v70 = 0;
  MEMORY[0x1F4188790](v38);
  uint64_t v71 = a5;
  unint64_t v72 = v32;
  uint64_t v73 = v33;
  uint64_t v74 = v35;
  uint64_t v46 = type metadata accessor for NavigationDestinationModifier.SeededResolver();
  uint64_t v71 = a5;
  unint64_t v72 = v32;
  uint64_t v73 = v33;
  uint64_t v74 = v35;
  uint64_t SeededResolver = type metadata accessor for NavigationDestinationModifier.MakeSeededResolver();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v39 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v69, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v45, SeededResolver, MEMORY[0x1E4FBC248], v39, MEMORY[0x1E4FBC278], v40);
  swift_release();
  uint64_t v41 = AGCreateWeakAttribute();
  uint64_t v71 = v13;
  LODWORD(v72) = v37;
  MEMORY[0x1F4188790](v41);
  v45[0] = a5;
  v45[1] = v32;
  uint64_t v46 = v33;
  uint64_t SeededResolver = v35;
  uint64_t WitnessTable = __PAIR64__(v43, v42);
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  uint64_t v44 = v66;
  *(void *)uint64_t v66 = v67;
  double result = v68;
  v44[1] = v68;
  return result;
}

BOOL static ShouldUseNavigationLinkV4Modifier.evaluate(inputs:)(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type IsInNavigationV4Context and conformance IsInNavigationV4Context();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  BOOL result = 1;
  if ((v5 & 1) == 0 && a2 != MEMORY[0x1E4FBC248])
  {
    type metadata accessor for NavigationState.ListKey?(0, (unint64_t *)&lazy cache variable for type metadata for Never?, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB718]);
    return v4 == a2;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IsInNavigationV4Context and conformance IsInNavigationV4Context()
{
  unint64_t result = lazy protocol witness table cache variable for type IsInNavigationV4Context and conformance IsInNavigationV4Context;
  if (!lazy protocol witness table cache variable for type IsInNavigationV4Context and conformance IsInNavigationV4Context)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInNavigationV4Context and conformance IsInNavigationV4Context);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsInNavigationV4Context and conformance IsInNavigationV4Context;
  if (!lazy protocol witness table cache variable for type IsInNavigationV4Context and conformance IsInNavigationV4Context)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInNavigationV4Context and conformance IsInNavigationV4Context);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsInNavigationV4Context and conformance IsInNavigationV4Context;
  if (!lazy protocol witness table cache variable for type IsInNavigationV4Context and conformance IsInNavigationV4Context)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInNavigationV4Context and conformance IsInNavigationV4Context);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsInNavigationV4Context and conformance IsInNavigationV4Context;
  if (!lazy protocol witness table cache variable for type IsInNavigationV4Context and conformance IsInNavigationV4Context)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInNavigationV4Context and conformance IsInNavigationV4Context);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsInNavigationV4Context and conformance IsInNavigationV4Context;
  if (!lazy protocol witness table cache variable for type IsInNavigationV4Context and conformance IsInNavigationV4Context)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInNavigationV4Context and conformance IsInNavigationV4Context);
  }
  return result;
}

uint64_t closure #1 in static NavigationDestinationModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  void v9[2] = type metadata accessor for NavigationDestinationModifier();
  FunctionTypeMetadata1 = swift_getFunctionTypeMetadata1();
  uint64_t v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, FunctionTypeMetadata1, MEMORY[0x1E4FBC248], v6, MEMORY[0x1E4FBC278], v7);
  return v11;
}

uint64_t type metadata accessor for NavigationDestinationModifier.MakeSeededResolver()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for NavigationStackReader.ExtractedRoot()
{
  return swift_getGenericMetadata();
}

void type metadata accessor for Focus<NavigationStateHost, NavigationSeedHost>()
{
  if (!lazy cache variable for type metadata for Focus<NavigationStateHost, NavigationSeedHost>)
  {
    type metadata accessor for NavigationStateHost();
    type metadata accessor for NavigationSeedHost(255);
    unint64_t v0 = type metadata accessor for Focus();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Focus<NavigationStateHost, NavigationSeedHost>);
    }
  }
}

uint64_t NavigationStackReader.AppliedBody.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  int v44 = a3;
  uint64_t v43 = a2;
  uint64_t v40 = a8;
  uint64_t v13 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  int v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for ModifiedContent();
  uint64_t v41 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  int v17 = (char *)&v33 - v16;
  uint64_t v39 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v47 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v55 = a4;
  *((void *)&v55 + 1) = a5;
  uint64_t v56 = a6;
  uint64_t v57 = a7;
  uint64_t v45 = type metadata accessor for NavigationStackReader.AppliedBody();
  type metadata accessor for PositionedNavigationDestinationProcessor();
  uint64_t v38 = type metadata accessor for ModifiedContent();
  uint64_t v37 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v38);
  int v36 = (char *)&v33 - v20;
  *(void *)&long long v55 = a4;
  *((void *)&v55 + 1) = a5;
  uint64_t v46 = a6;
  uint64_t v56 = a6;
  uint64_t v57 = a7;
  type metadata accessor for NavigationStackReader.TransformBox();
  _s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_1(0, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key, MEMORY[0x1E4FBB718]);
  uint64_t result = AGGraphGetValue();
  uint64_t v22 = *(unsigned __int8 *)(result + 8);
  if (v22 == 6)
  {
    __break(1u);
  }
  else
  {
    uint64_t v34 = *(void *)(result + 16);
    uint64_t v33 = *(void *)result;
    Swift::String v23 = *(void (**)(uint64_t, uint64_t, uint64_t, char *))AGGraphGetValue();
    uint64_t v35 = a1;
    uint64_t Value = AGGraphGetValue();
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, Value, a5);
    *(void *)&long long v55 = 0;
    swift_retain();
    MEMORY[0x18C113660](&v55, a5, &type metadata for StackDepthModifier, a7);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, a5);
    v23(v33, v22, v34, v17);
    swift_release();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v17, v42);
    uint64_t v25 = v46;
    NavigationStackReader.AppliedBody.authority.getter((uint64_t)v53);
    uint64_t v26 = a4;
    if (v54 == 2)
    {
      outlined destroy of NavigationAuthority??((uint64_t)v53);
      long long v55 = xmmword_18834BB90;
      uint64_t v56 = 0;
      uint64_t v27 = v39;
      uint64_t v28 = v38;
      uint64_t v29 = v37;
      Swift::String v30 = v47;
      unint64_t v31 = v36;
      uint64_t v32 = v45;
    }
    else
    {
      outlined init with copy of NavigationAuthority?((uint64_t)v53, (uint64_t)v49);
      uint64_t v32 = v45;
      if (v50 == 1)
      {
        long long v55 = xmmword_18834BB90;
        uint64_t v56 = 0;
      }
      else
      {
        outlined init with take of NavigationAuthority((uint64_t)v49, (uint64_t)v48);
        outlined init with copy of NavigationAuthority((uint64_t)v48, (uint64_t)&v55);
        outlined destroy of NavigationAuthority((uint64_t)v48);
      }
      uint64_t v27 = v39;
      uint64_t v28 = v38;
      uint64_t v29 = v37;
      Swift::String v30 = v47;
      unint64_t v31 = v36;
      outlined destroy of NavigationAuthority?((uint64_t)v53);
    }
    View.processNavigationDestinations<A>(authority:processor:)((uint64_t)&v55, v32, v26, v32, v25);
    outlined destroy of NavigationAuthority?((uint64_t)&v55);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v30, v26);
    uint64_t v51 = v25;
    int v52 = &protocol witness table for PositionedNavigationDestinationProcessor<A>;
    swift_getWitnessTable();
    View.transformPreference<A>(_:_:)();
    return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v31, v28);
  }
  return result;
}

uint64_t type metadata accessor for NavigationStackReader.TransformBox()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for NavigationStackReader.AppliedBody()
{
  return swift_getGenericMetadata();
}

uint64_t View.processNavigationDestinations<A>(authority:processor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  outlined init with copy of NavigationAuthority?(a1, (uint64_t)v9);
  outlined init with take of NavigationStackViewPosition?((uint64_t)v9, (uint64_t)v10, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  uint64_t v7 = type metadata accessor for PositionedNavigationDestinationProcessor();
  MEMORY[0x18C113660](v10, a3, v7, a5);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)(v7 - 8) + 8))(v10, v7);
}

uint64_t static PositionedNavigationDestinationProcessor._makeView(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, _DWORD *, unsigned char *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, void *a6@<X8>)
{
  uint64_t v52 = a4;
  uint64_t v53 = a5;
  uint64_t v56 = a6;
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  LODWORD(v43) = *a1;
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v8 = a2[2];
  unsigned int v10 = *((_DWORD *)a2 + 6);
  unsigned int v9 = *((_DWORD *)a2 + 7);
  unsigned int v11 = *((_DWORD *)a2 + 8);
  unsigned int v12 = *((_DWORD *)a2 + 9);
  uint64_t v14 = a2[5];
  uint64_t v13 = a2[6];
  int v15 = *((_DWORD *)a2 + 14);
  int v16 = *((_DWORD *)a2 + 15);
  unsigned int v17 = *((_DWORD *)a2 + 16);
  unsigned int v18 = *((_DWORD *)a2 + 17);
  int v19 = *((_DWORD *)a2 + 18);
  int v20 = *((_DWORD *)a2 + 19);
  int v21 = *((_DWORD *)a2 + 20);
  *(void *)int v60 = *a2;
  int v51 = v7;
  *(_DWORD *)&v60[8] = v7;
  uint64_t v62 = v8;
  unint64_t v63 = __PAIR64__(v9, v10);
  unsigned int v50 = v9;
  unint64_t v64 = __PAIR64__(v12, v11);
  uint64_t v65 = v14;
  uint64_t v66 = v13;
  uint64_t v55 = v13;
  int v54 = v15;
  int v67 = v15;
  int v68 = v16;
  int v49 = v16;
  unsigned int v48 = v17;
  unint64_t v69 = __PAIR64__(v18, v17);
  unsigned int v47 = v18;
  int v46 = v19;
  int v70 = v19;
  int v71 = v20;
  int v45 = v20;
  int v44 = v21;
  int v72 = v21;
  a3(&v57, a1, v60);
  uint64_t v22 = v57;
  int v23 = v58;
  int v24 = v59;
  *(void *)int v60 = v57;
  *(_DWORD *)&v60[8] = v58;
  int v61 = v59;
  uint64_t result = _ViewOutputs.subscript.getter();
  if ((result & 0x100000000) == 0)
  {
    *(_DWORD *)int v60 = v43;
    uint64_t v43 = result;
    type metadata accessor for PositionedNavigationDestinationProcessor();
    type metadata accessor for _GraphValue();
    _GraphValue.value.getter();
    closure #1 in static PositionedNavigationDestinationProcessor._makeView(modifier:inputs:body:)(1);
    AGGraphCreateOffsetAttribute2();
    uint64_t v42 = AGCreateWeakAttribute();
    *(void *)int v60 = v6;
    *(_DWORD *)&v60[8] = v51;
    uint64_t v62 = v8;
    unint64_t v63 = __PAIR64__(v50, v10);
    unint64_t v64 = __PAIR64__(v12, v11);
    uint64_t v26 = v55;
    uint64_t v65 = v14;
    uint64_t v66 = v55;
    int v27 = v54;
    int v67 = v54;
    int v68 = v49;
    unint64_t v69 = __PAIR64__(v47, v48);
    int v70 = v46;
    int v71 = v45;
    int v72 = v44;
    int v51 = _ViewInputs.viewPhase.getter();
    lazy protocol witness table accessor for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    char v28 = v60[0];
    uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 8))(v52, v53);
    unint64_t v31 = v30;
    UpdateCycleDetector.init()();
    int v32 = *(_DWORD *)&v60[8];
    char v33 = v61;
    unint64_t v34 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    uint64_t v35 = *(void *)v60;
    *(_DWORD *)int v60 = v43;
    *(void *)&v60[4] = v42;
    int v61 = v51;
    LOBYTE(v62) = v28;
    unint64_t v63 = v29;
    unint64_t v64 = v31;
    uint64_t v65 = v35;
    LODWORD(v66) = v32;
    BYTE4(v66) = v33;
    int v67 = 0;
    unint64_t v69 = v34;
    MEMORY[0x1F4188790](v34);
    uint64_t v40 = type metadata accessor for PositionedNavigationDestinationProcessor.PollingRule();
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for NavigationStackViewPosition?(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<()>, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4F4E740]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v60, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_7, (uint64_t)&v39, v40, MEMORY[0x1E4FBC248], v36, MEMORY[0x1E4FBC278], v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static AGAttributeFlags.transactional.getter();
    AGGraphSetFlags();
    *(void *)int v60 = v26;
    *(_DWORD *)&v60[8] = v27;
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v22 = v57;
    int v23 = v58;
    int v24 = v59;
  }
  uint64_t v38 = v56;
  *uint64_t v56 = v22;
  *((_DWORD *)v38 + 2) = v23;
  *((_DWORD *)v38 + 3) = v24;
  return result;
}

uint64_t type metadata accessor for PositionedNavigationDestinationProcessor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #1 in static PositionedNavigationDestinationProcessor._makeView(modifier:inputs:body:)(uint64_t a1)
{
  _OWORD v7[2] = type metadata accessor for PositionedNavigationDestinationProcessor();
  type metadata accessor for NavigationStackViewPosition?(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_22, (uint64_t)v7, v3, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t type metadata accessor for PositionedNavigationDestinationProcessor.PollingRule()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined init with take of NavigationStackViewPosition?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for NavigationStackViewPosition?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

double NavigationStackReader.AppliedBody.authority.getter@<D0>(uint64_t a1@<X8>)
{
  _s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_1(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of NavigationAuthority?(WeakValue, a1);
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a1 = xmmword_18834C6B0;
    *(void *)(a1 + 16) = 0;
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in NavigationStack.body.getter@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return closure #1 in closure #1 in NavigationStack.body.getter(a1, a2, a3, a4, *(void *)(v5 + 32), a5);
}

uint64_t closure #1 in closure #1 in NavigationStack.body.getter@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = MEMORY[0x1F4188790](v12);
  int v16 = (char *)v19 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))((char *)v19 - v15, a4, v12, v14);
  v19[0] = a5;
  v19[1] = &protocol witness table for StackDepthModifier;
  swift_getWitnessTable();
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a6, v16, v12);
  uint64_t result = type metadata accessor for NavigationStackStyledCore();
  uint64_t v18 = a6 + *(int *)(result + 36);
  *(void *)uint64_t v18 = a1;
  *(unsigned char *)(v18 + 8) = a2;
  *(void *)(v18 + 16) = a3;
  return result;
}

double NavigationStack.init<>(path:root:)@<D0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X3>, double a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  double v14 = (int *)type metadata accessor for NavigationStack();
  *(void *)(a7 + v14[11]) = 0;
  uint64_t v15 = a7 + v14[13];
  *(void *)uint64_t v15 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(void *)(v15 + 8) = 0;
  *(unsigned char *)(v15 + 16) = 0;
  a2();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a3, *(void *)&a4, a5, a6);
  uint64_t v16 = type metadata accessor for Binding();
  *(double *)&long long v19 = a4;
  *((void *)&v19 + 1) = a5;
  type metadata accessor for AnyNavigationPath.ToHomogeneous();
  swift_getWitnessTable();
  Binding.projecting<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a1, v16);
  uint64_t v17 = a7 + v14[12];
  *(void *)uint64_t v17 = a3;
  double result = a4;
  *(_OWORD *)(v17 + 8) = v19;
  *(unsigned char *)(v17 + 24) = 1;
  return result;
}

uint64_t NavigationStack.body.getter(uint64_t *a1)
{
  uint64_t v3 = a1[3];
  type metadata accessor for ModifiedContent();
  uint64_t v15 = a1[4];
  uint64_t v4 = v15;
  uint64_t v16 = &protocol witness table for StackDepthModifier;
  swift_getWitnessTable();
  void v14[2] = type metadata accessor for NavigationStackStyledCore();
  v14[3] = v3;
  v14[4] = &protocol witness table for NavigationStackStyledCore<A>;
  void v14[5] = v15;
  type metadata accessor for NavigationStackReader();
  type metadata accessor for ModifiedContent();
  v14[0] = &protocol witness table for NavigationStackReader<A, B>;
  v14[1] = lazy protocol witness table accessor for type NavigationCommonModifier and conformance NavigationCommonModifier();
  swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for _UnaryViewAdaptor();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  unsigned int v11 = (char *)v14 - v10;
  closure #1 in NavigationStack.body.getter(v1, a1[2], v3, v4, (uint64_t)v8);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v6 + 8);
  v12(v8, v5);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  return ((uint64_t (*)(char *, uint64_t))v12)(v11, v5);
}

uint64_t closure #1 in NavigationStack.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v33 = a2;
  uint64_t v39 = a5;
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (uint64_t)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = v9;
  type metadata accessor for ModifiedContent();
  uint64_t v46 = a4;
  unsigned int v47 = &protocol witness table for StackDepthModifier;
  uint64_t v38 = MEMORY[0x1E4F3FBC0];
  swift_getWitnessTable();
  uint64_t v35 = type metadata accessor for NavigationStackStyledCore();
  uint64_t v42 = v35;
  uint64_t v43 = a3;
  int v44 = &protocol witness table for NavigationStackStyledCore<A>;
  uint64_t v45 = a4;
  uint64_t v10 = type metadata accessor for NavigationStackReader();
  uint64_t v36 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v29 - v11;
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v37 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v29 - v17;
  uint64_t v19 = type metadata accessor for NavigationStack();
  uint64_t v34 = Namespace.wrappedValue.getter();
  uint64_t v20 = NavigationStack.$path.getter(v19);
  uint64_t v31 = v21;
  uint64_t v32 = v20;
  uint64_t v30 = v22;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v19 + 24) - 8) + 16))(v9, a1);
  LOBYTE(v9) = *(unsigned char *)(a1 + *(int *)(v19 + 48) + 24);
  uint64_t v23 = NavigationStack.localStateHost.getter();
  int v24 = (void *)swift_allocObject();
  void v24[2] = v33;
  v24[3] = a3;
  v24[4] = a4;
  uint64_t v25 = NavigationStackReader.init(namespace:path:root:hasImplicitState:stateHost:transform:)(v34, v32, v31, v30, v29, (v9 & 1) == 0, v23, (uint64_t)partial apply for closure #1 in closure #1 in NavigationStack.body.getter, v12, (uint64_t)v24, v35, a3);
  MEMORY[0x18C113660](v25, v10, &type metadata for NavigationCommonModifier, &protocol witness table for NavigationStackReader<A, B>);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v12, v10);
  unint64_t v26 = lazy protocol witness table accessor for type NavigationCommonModifier and conformance NavigationCommonModifier();
  uint64_t v40 = &protocol witness table for NavigationStackReader<A, B>;
  unint64_t v41 = v26;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v15);
  int v27 = *(void (**)(char *, uint64_t))(v37 + 8);
  v27(v15, v13);
  static ViewBuilder.buildExpression<A>(_:)(v18);
  return ((uint64_t (*)(char *, uint64_t))v27)(v18, v13);
}

uint64_t type metadata accessor for NavigationStack()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for NavigationStackReader(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 8))((v3
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80)
                                                                                            + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80));
  swift_release();

  return swift_release();
}

uint64_t type metadata accessor for NavigationStackReader()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for NavigationStackStyledCore()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t NavigationStackReader.init(namespace:path:root:hasImplicitState:stateHost:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(void *)a9 = a1;
  *((void *)a9 + 1) = a2;
  *((void *)a9 + 2) = a3;
  *((void *)a9 + 3) = a4;
  uint64_t v17 = (int *)type metadata accessor for NavigationStackReader();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a12 - 8) + 32))(&a9[v17[14]], a5, a12);
  a9[v17[15]] = a6;
  *(void *)&a9[v17[16]] = a7;
  uint64_t v19 = &a9[v17[17]];
  *(void *)uint64_t v19 = a8;
  *((void *)v19 + 1) = a10;
  return result;
}

uint64_t NavigationStack.$path.getter(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1 + 48));
  uint64_t v3 = *v2;
  if (v2[3])
  {
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    type metadata accessor for UInt32?(0, (unint64_t *)&lazy cache variable for type metadata for State<AnyNavigationPath>, (uint64_t)&type metadata for AnyNavigationPath, MEMORY[0x1E4F41580]);
    State.projectedValue.getter();
    return v5;
  }
  return v3;
}

uint64_t NavigationStack.localStateHost.getter()
{
  type metadata accessor for NavigationStateHost();
  lazy protocol witness table accessor for type NavigationStateHost and conformance NavigationStateHost();

  return StateObject.wrappedValue.getter();
}

unint64_t lazy protocol witness table accessor for type NavigationStateHost and conformance NavigationStateHost()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationStateHost and conformance NavigationStateHost;
  if (!lazy protocol witness table cache variable for type NavigationStateHost and conformance NavigationStateHost)
  {
    type metadata accessor for NavigationStateHost();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationStateHost and conformance NavigationStateHost);
  }
  return result;
}

uint64_t type metadata accessor for AnyNavigationPath.ToHomogeneous()
{
  return swift_getGenericMetadata();
}

uint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<InspectorStorageV5.PreferenceKey> and conformance _PreferenceTransformModifier<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _PreferenceTransformModifier<InspectorStorageV5.PreferenceKey>(255, a2, a3, a4, MEMORY[0x1E4F41108]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BoundNavigationPathDetector and conformance BoundNavigationPathDetector()
{
  unint64_t result = lazy protocol witness table cache variable for type BoundNavigationPathDetector and conformance BoundNavigationPathDetector;
  if (!lazy protocol witness table cache variable for type BoundNavigationPathDetector and conformance BoundNavigationPathDetector)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BoundNavigationPathDetector and conformance BoundNavigationPathDetector);
  }
  return result;
}

uint64_t type metadata accessor for BoundNavigationPathDetector.PathObservation()
{
  uint64_t result = type metadata singleton initialization cache for BoundNavigationPathDetector.PathObservation;
  if (!type metadata singleton initialization cache for BoundNavigationPathDetector.PathObservation) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t protocol witness for static NavigationDestinationProcessor.processorDescription.getter in conformance _NavigationSplitReader.Core()
{
  return 0xD000000000000019;
}

uint64_t type metadata accessor for NavigationStackReader.StackKey()
{
  return swift_getGenericMetadata();
}

void type metadata accessor for _GraphValue<Binding<AnyNavigationPath>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<Binding<AnyNavigationPath>>)
  {
    _s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationPath>, (uint64_t)&type metadata for AnyNavigationPath, MEMORY[0x1E4F41638]);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<Binding<AnyNavigationPath>>);
    }
  }
}

void type metadata accessor for Attribute<NavigationState.StackContent.Key?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    _s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_1(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t protocol witness for static NavigationDestinationProcessor.processorDescription.getter in conformance NavigationStackReader<A, B>.AppliedBody()
{
  return static NavigationStackReader.AppliedBody.processorDescription.getter();
}

uint64_t static NavigationStackReader.AppliedBody.processorDescription.getter()
{
  return 0x426465696C707041;
}

uint64_t partial apply for closure #1 in _IntroDocumentView<>.init<A>(_:for:_:onDocumentOpen:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in _IntroDocumentView<>.init<A>(_:for:_:onDocumentOpen:)(a1, *(void (**)(uint64_t))(v2 + 64), *(void *)(v2 + 72), *(void *)(v2 + 24), a2);
}

uint64_t closure #1 in _IntroDocumentView<>.init<A>(_:for:_:onDocumentOpen:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  v19[1] = a3;
  uint64_t v20 = a2;
  uint64_t v21 = a5;
  uint64_t v7 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v19 - v11;
  _s10Foundation3URLVSgMaTm_9(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<URL>, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBBE00]);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  unint64_t v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_18834BB80;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v14 + 16))(v16 + v15, a1, v13);
  v20(v16);
  swift_bridgeObjectRelease();
  static ViewBuilder.buildExpression<A>(_:)(v9);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v9, a4);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v17)(v12, a4);
}

uint64_t specialized static TextFieldLabelDisplayModeModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PropertyList.subscript.setter();
}

unint64_t lazy protocol witness table accessor for type _GraphInputs.TextFieldLabelDisplayModeKey and conformance _GraphInputs.TextFieldLabelDisplayModeKey()
{
  unint64_t result = lazy protocol witness table cache variable for type _GraphInputs.TextFieldLabelDisplayModeKey and conformance _GraphInputs.TextFieldLabelDisplayModeKey;
  if (!lazy protocol witness table cache variable for type _GraphInputs.TextFieldLabelDisplayModeKey and conformance _GraphInputs.TextFieldLabelDisplayModeKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GraphInputs.TextFieldLabelDisplayModeKey and conformance _GraphInputs.TextFieldLabelDisplayModeKey);
  }
  return result;
}

void storeEnumTagSinglePayload for SubscriptionView(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) + v11;
  uint64_t v14 = *(void *)(*(void *)(v8 - 8) + 64) + 7;
  unint64_t v15 = ((v14 + (v13 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v12 >= a3)
  {
    int v19 = 0;
    int v20 = a2 - v12;
    if (a2 <= v12)
    {
LABEL_19:
      switch(v19)
      {
        case 1:
          a1[v15] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 2:
          *(_WORD *)&a1[v15] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 3:
          goto LABEL_49;
        case 4:
          *(_DWORD *)&a1[v15] = 0;
          goto LABEL_31;
        default:
LABEL_31:
          if (a2)
          {
LABEL_32:
            if (v7 == v12)
            {
              uint64_t v23 = *(void (**)(void))(v6 + 56);
              v23();
            }
            else
            {
              unint64_t v24 = (unint64_t)&a1[v13] & ~v11;
              if (v10 == v12)
              {
                uint64_t v25 = *(void (**)(unint64_t))(v9 + 56);
                v25(v24);
              }
              else
              {
                unint64_t v26 = (void *)((v14 + v24) & 0xFFFFFFFFFFFFFFF8);
                if ((a2 & 0x80000000) != 0)
                {
                  uint64_t v27 = a2 ^ 0x80000000;
                  v26[1] = 0;
                }
                else
                {
                  uint64_t v27 = a2 - 1;
                }
                *unint64_t v26 = v27;
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v16 = a3 - v12;
    if (((v14 + (v13 & ~v11)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v17 = v16 + 1;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v17 >= 0x10000) {
      int v18 = 4;
    }
    else {
      int v18 = 2;
    }
    if (v17 < 0x100) {
      int v18 = 1;
    }
    if (v17 >= 2) {
      int v19 = v18;
    }
    else {
      int v19 = 0;
    }
    int v20 = a2 - v12;
    if (a2 <= v12) {
      goto LABEL_19;
    }
  }
  if (((v14 + (v13 & ~v11)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v21 = v20;
  }
  else {
    int v21 = 1;
  }
  if (((v14 + (v13 & ~v11)) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v22 = ~v12 + a2;
    bzero(a1, ((v14 + (v13 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 16);
    *(_DWORD *)a1 = v22;
  }
  switch(v19)
  {
    case 1:
      a1[v15] = v21;
      break;
    case 2:
      *(_WORD *)&a1[v15] = v21;
      break;
    case 3:
LABEL_49:
      __break(1u);
      break;
    case 4:
      *(_DWORD *)&a1[v15] = v21;
      break;
    default:
      return;
  }
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(unsigned int *a1, uint64_t a2, void (*a3)(void *__return_ptr, void))
{
  _OWORD v4[2] = *MEMORY[0x1E4F143B8];
  a3(v4, *a1);
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

double SearchToolbarItem.ChildEnvironment.value.getter@<D0>(_OWORD *a1@<X8>)
{
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v3 = Value[1];
  *(void *)&long long v7 = *Value;
  *((void *)&v7 + 1) = v3;
  uint64_t v5 = *Value;
  swift_retain();
  swift_retain();
  EnvironmentValues.horizontalSizeClass.getter();
  if (v6 != 2 && (v6 & 1) != 0)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>);
    swift_retain();
    if (v3)
    {
      swift_retain_n();
      swift_retain();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      swift_retain();
      swift_retain();
      PropertyList.subscript.getter();
      swift_release();
    }
    swift_release_n();
    if ((v5 & 0xFE) == 2)
    {
      EnvironmentValues.dynamicTypeSize.getter();
      EnvironmentValues.dynamicTypeSize.setter();
    }
  }
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
    swift_release();
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AutocorrectionTypeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AutocorrectionTypeKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    swift_release();
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AutocorrectionTypeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AutocorrectionTypeKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  double result = *(double *)&v7;
  *a1 = v7;
  return result;
}

uint64_t partial apply for closure #1 in SystemScrollViewContainer.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in SystemScrollViewContainer.body.getter(v1[4], v1[2], v1[3], a1);
}

uint64_t base witness table accessor for _AttributeBody in ToolbarModifier<A, B>.HostKeys()
{
  return swift_getWitnessTable();
}

uint64_t type metadata completion function for FileImportExportBridge.Presentation()
{
  uint64_t result = type metadata accessor for FileImportOperation(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for FileExportOperation(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void type metadata completion function for DialogActionContext()
{
  _s7SwiftUI16CommandOperationVSgMaTm_0(319, &lazy cache variable for type metadata for DialogActionContext.CancelType?, (void (*)(uint64_t))type metadata accessor for DialogActionContext.CancelType);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t type metadata completion function for CustomPreviewResponder()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UseImageBackground()
{
  lazy protocol witness table accessor for type UseImageBackground and conformance UseImageBackground();
  PropertyList.subscript.getter();
  return v1;
}

void @objc UIHostingController.viewWillDisappear(_:)(void *a1, uint64_t a2, char a3)
{
  id v4 = a1;
  UIHostingController.viewDidAppear(_:)(a3, (SEL *)&selRef_viewWillDisappear_, (uint64_t (*)(id))specialized UIHostingController._viewWillDisappear(_:));
}

uint64_t type metadata completion function for UIHostingConfiguration()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for UIHostingConfigurationStorage(319);
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance Observer<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ScrollBehaviorModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3F8](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t one-time initialization function for carPlay()
{
  uint64_t result = MEMORY[0x18C115780](0xD00000000000001FLL, 0x800000018832B270);
  static UISceneSessionRole.carPlay = result;
  return result;
}

uint64_t partial apply for closure #1 in AppBodyAccessor.updateBody(of:changed:)()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 24) + 24))(*(void *)(v0 + 16));
}

uint64_t assignWithCopy for HostingContentViewRootModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  char v6 = (uint64_t *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 72);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v9 = (uint64_t *)(a2 + 72);
  uint64_t v8 = *(void *)(a2 + 72);
  if (v7 == 1)
  {
    if (v8 == 1)
    {
      uint64_t v10 = *v9;
      *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
      uint64_t *v6 = v10;
    }
    else
    {
      *(void *)(a1 + 72) = v8;
      *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
      swift_retain();
    }
  }
  else if (v8 == 1)
  {
    outlined destroy of ListItemTint(a1 + 72);
    char v11 = *(unsigned char *)(a2 + 80);
    uint64_t *v6 = *v9;
    *(unsigned char *)(a1 + 80) = v11;
  }
  else
  {
    *(void *)(a1 + 72) = v8;
    swift_retain();
    swift_release();
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  }
  uint64_t v12 = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = v12;
  uint64_t v13 = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 104) = v13;
  uint64_t v14 = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 120) = v14;
  uint64_t v15 = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 136) = v15;
  uint64_t v16 = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 152) = v16;
  uint64_t v17 = *(void *)(a2 + 168);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 168) = v17;
  *(unsigned char *)(a1 + 177) = *(unsigned char *)(a2 + 177);
  uint64_t v18 = *(int *)(a3 + 32);
  int v19 = (void *)(a1 + v18);
  int v20 = (void *)(a2 + v18);
  uint64_t v21 = type metadata accessor for UICellConfigurationState();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v19, 1, v21);
  int v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (!v25)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 24))(v19, v20, v21);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v22 + 8))(v19, v21);
    goto LABEL_13;
  }
  if (v25)
  {
LABEL_13:
    type metadata accessor for UICellConfigurationState?(0);
    memcpy(v19, v20, *(void *)(*(void *)(v26 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v22 + 16))(v19, v20, v21);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  return a1;
}

void __DictionaryDecoder.unbox_(_:as:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v52 = a3;
  int v60 = a4;
  type metadata accessor for (key: String, value: Encodable)?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v51 - v9;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v53 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (key: String, value: Encodable)?(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928]);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v51 - v15;
  uint64_t v17 = type metadata accessor for Date();
  if (v17 == a2 || type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSDate) == a2)
  {
    __DictionaryDecoder.unbox(_:as:)(a1, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4F27928], (uint64_t)v16);
    if (v5) {
      return;
    }
    uint64_t v24 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v16, 1, v17) != 1)
    {
      char v28 = v60;
      v60[3] = v17;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v28);
      (*(void (**)(uint64_t *, char *, uint64_t))(v24 + 32))(boxed_opaque_existential_1, v16, v17);
      return;
    }
    outlined destroy of (key: String, value: Any)((uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], (uint64_t (*)(void))type metadata accessor for (key: String, value: Encodable)?);
    goto LABEL_22;
  }
  uint64_t v18 = MEMORY[0x1E4F277C0];
  if (a2 == MEMORY[0x1E4F277C0]
    || type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSData) == a2)
  {
    uint64_t v25 = specialized __DictionaryDecoder.unbox(_:as:)(a1);
    if (v5) {
      return;
    }
    if (v26 >> 60 != 15)
    {
      uint64_t v34 = v60;
      v60[3] = v18;
      *uint64_t v34 = v25;
      v34[1] = v26;
      return;
    }
    goto LABEL_22;
  }
  if (v11 != a2 && type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSURL) != a2)
  {
    type metadata accessor for NSDecimal(0);
    uint64_t v20 = v19;
    if (v19 != a2
      && type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSDecimalNumber) != a2)
    {
      uint64_t v21 = swift_conformsToProtocol2();
      if (v21) {
        uint64_t v22 = v21;
      }
      else {
        uint64_t v22 = 0;
      }
      if (v21) {
        uint64_t v23 = a2;
      }
      else {
        uint64_t v23 = 0;
      }
      if (v23)
      {
        specialized __DictionaryDecoder.unbox<A>(_:as:)(a1, v23, v22, v60);
      }
      else
      {
        outlined init with copy of Any(a1, (uint64_t)v57);
        uint64_t v42 = (char **)(v4 + 16);
        swift_beginAccess();
        outlined init with copy of Any((uint64_t)v57, (uint64_t)&v54);
        uint64_t v43 = *(char **)(v4 + 16);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v4 + 16) = v43;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v43 + 2) + 1, 1, v43);
          *uint64_t v42 = v43;
        }
        unint64_t v46 = *((void *)v43 + 2);
        unint64_t v45 = *((void *)v43 + 3);
        if (v46 >= v45 >> 1)
        {
          uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v45 > 1), v46 + 1, 1, v43);
          *uint64_t v42 = v43;
        }
        *((void *)v43 + 2) = v46 + 1;
        outlined init with take of Any(&v54, &v43[32 * v46 + 32]);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
        swift_endAccess();
        uint64_t v55 = type metadata accessor for __DictionaryDecoder();
        uint64_t v56 = lazy protocol witness table accessor for type __DictionaryEncoder and conformance __DictionaryEncoder(&lazy protocol witness table cache variable for type __DictionaryDecoder and conformance __DictionaryDecoder, (void (*)(uint64_t))type metadata accessor for __DictionaryDecoder);
        *(void *)&long long v54 = v4;
        uint64_t v58 = a2;
        uint64_t v59 = v52;
        __swift_allocate_boxed_opaque_existential_1(v57);
        swift_retain();
        dispatch thunk of Decodable.init(from:)();
        if (v5)
        {
          __swift_deallocate_boxed_opaque_existential_0((uint64_t)v57);
        }
        else
        {
          uint64_t v47 = v58;
          unsigned int v48 = __swift_project_boxed_opaque_existential_1(v57, v58);
          int v49 = v60;
          v60[3] = v47;
          unsigned int v50 = __swift_allocate_boxed_opaque_existential_1(v49);
          (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v47 - 8) + 16))(v50, v48, v47);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
        }
        swift_beginAccess();
        _DictionaryDecodingStorage.popContainer()();
        swift_endAccess();
      }
      return;
    }
    uint64_t v35 = __DictionaryDecoder.unbox(_:as:)(a1);
    if (v5) {
      return;
    }
    if ((v37 & 0x100000000) == 0)
    {
      uint64_t v38 = v60;
      v60[3] = v20;
      uint64_t *v38 = v35;
      v38[1] = v36;
      *((_DWORD *)v38 + 4) = v37;
      return;
    }
LABEL_22:
    uint64_t v27 = v60;
    *(_OWORD *)int v60 = 0u;
    *((_OWORD *)v27 + 1) = 0u;
    return;
  }
  __DictionaryDecoder.unbox(_:as:)(a1, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4F276F0], (uint64_t)v10);
  if (!v5)
  {
    uint64_t v30 = v53;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v10, 1, v11) == 1)
    {
      outlined destroy of (key: String, value: Any)((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], (uint64_t (*)(void))type metadata accessor for (key: String, value: Encodable)?);
      uint64_t v31 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v33 = v32;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v31 - 8) + 104))(v33, *MEMORY[0x1E4FBBA78], v31);
      swift_willThrow();
    }
    else
    {
      uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
      v39(v13, v10, v11);
      uint64_t v40 = v60;
      v60[3] = v11;
      unint64_t v41 = __swift_allocate_boxed_opaque_existential_1(v40);
      v39((char *)v41, v13, v11);
    }
  }
}

void type metadata accessor for (key: String, value: Encodable)?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for External<Bool>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s14AttributeGraph8ExternalVySbGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPasteControl>>()
{
  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPasteControl>>)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPasteControl>, (uint64_t)&type metadata for UIKitPasteControl, (uint64_t)&protocol witness table for UIKitPasteControl, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPasteControl> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for RemoteSheetContainerVCWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPasteControl>>);
    }
  }
}

uint64_t _DictionaryKeyedDecodingContainer.superDecoder()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  v14[3] = &unk_1ED468578;
  v14[4] = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  uint64_t v12 = swift_allocObject();
  v14[0] = v12;
  *(void *)(v12 + 16) = 0x7265707573;
  *(void *)(v12 + 24) = 0xE500000000000000;
  *(void *)(v12 + 32) = 0;
  *(unsigned char *)(v12 + 40) = 1;
  return _DictionaryKeyedDecodingContainer._superDecoder(forKey:)(v14, a1, a2, a3, a4, a5, a6);
}

unint64_t lazy protocol witness table accessor for type External<Bool> and conformance External<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type External<Bool> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<Bool> and conformance External<A>)
  {
    type metadata accessor for _GraphValue<ReplacedRootDismissModifier>(255, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<Bool> and conformance External<A>);
  }
  return result;
}

uint64_t SearchFieldConfigurationReader.MakeContent.value.getter@<X0>(unint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v20 = a7;
  unint64_t v19 = HIDWORD(a1);
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, &lazy cache variable for type metadata for SearchFieldConfiguration?, type metadata accessor for SearchFieldConfiguration, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v19 - v15;
  SearchFieldConfigurationReader.MakeContent.config.getter(a1, a2, a3, a4, a5, a6, (uint64_t)&v19 - v15);
  uint64_t v22 = a3;
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  int v26 = a1;
  int v27 = v19;
  int v28 = a2;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in SearchFieldConfigurationReader.MakeContent.value.getter, (uint64_t)v21, MEMORY[0x1E4FBC248], a3, v17, v20);
  return outlined destroy of SearchFieldConfiguration.Data?((uint64_t)v16, &lazy cache variable for type metadata for SearchFieldConfiguration?, type metadata accessor for SearchFieldConfiguration, v13);
}

uint64_t SearchFieldConfigurationReader.MakeContent.config.getter@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  int v25 = a2;
  uint64_t v9 = type metadata accessor for SearchFieldConfiguration.Data(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = &v24[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, &lazy cache variable for type metadata for SearchFieldConfiguration.Data?, type metadata accessor for SearchFieldConfiguration.Data, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = &v24[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v17);
  unint64_t v19 = &v24[-v18];
  uint64_t Value = AGGraphGetValue();
  _s7SwiftUI24SearchFieldConfigurationV4DataVSgWOcTm_0(Value, (uint64_t)v19, &lazy cache variable for type metadata for SearchFieldConfiguration.Data?, type metadata accessor for SearchFieldConfiguration.Data, v13);
  _s7SwiftUI24SearchFieldConfigurationV4DataVSgWOcTm_0((uint64_t)v19, (uint64_t)v16, &lazy cache variable for type metadata for SearchFieldConfiguration.Data?, type metadata accessor for SearchFieldConfiguration.Data, v13);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v16, 1, v9) == 1)
  {
    uint64_t v21 = type metadata accessor for SearchFieldConfiguration(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(a7, 1, 1, v21);
  }
  else
  {
    outlined init with take of SearchFieldState((uint64_t)v16, (uint64_t)v12, type metadata accessor for SearchFieldConfiguration.Data);
    closure #1 in SearchFieldConfigurationReader.MakeContent.config.getter((uint64_t)v12, a1, v25, v26, v27, v28, v29, a7);
    _s7SwiftUI16SearchFieldStateVWOhTm_5((uint64_t)v12, type metadata accessor for SearchFieldConfiguration.Data);
    uint64_t v22 = type metadata accessor for SearchFieldConfiguration(0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(a7, 0, 1, v22);
  }
  return outlined destroy of SearchFieldConfiguration.Data?((uint64_t)v19, &lazy cache variable for type metadata for SearchFieldConfiguration.Data?, type metadata accessor for SearchFieldConfiguration.Data, MEMORY[0x1E4FBB718]);
}

uint64_t getEnumTagSinglePayload for SearchFieldConfiguration.Data(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1882842C8);
}

uint64_t EditMenuResponderFilter.updateValue()()
{
  uint64_t v1 = v0;
  AGGraphGetValue();
  int v3 = v2;
  AGGraphGetValue();
  if (((v3 | v4) & 1) != 0
    || (type metadata accessor for Attribute<(_:)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]), !AGGraphGetOutputValue()))
  {
    uint64_t v5 = *(void *)(v1 + 32);
    *(double *)(v5 + 224) = MEMORY[0x18C114450]();
    *(void *)(v5 + 232) = v6;
    *(double *)(v5 + 240) = MEMORY[0x18C10C240]();
    *(void *)(v5 + 248) = v7;
  }
  uint64_t v8 = *(void *)(v1 + 32);
  *(_DWORD *)(v8 + 304) = *(_DWORD *)AGGraphGetValue();
  *(void *)(v8 + 256) = AGCreateWeakAttribute();
  *(unsigned char *)(v8 + 264) = *(unsigned char *)AGGraphGetValue();
  type metadata accessor for Attribute<(_:)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  uint64_t Value = AGGraphGetValue();
  if (v10)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    uint64_t Value = swift_bridgeObjectRelease();
  }
  double v11 = MEMORY[0x18C10C240](Value);
  double v13 = v12;
  AGGraphGetValue();
  *(double *)(v8 + 280) = v11 - MEMORY[0x18C10C240]();
  *(double *)(v8 + 288) = v13 - v14;
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for EventFilter<()>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_188351940;
    *(void *)(v16 + 32) = v8;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey()
{
  unint64_t result = lazy protocol witness table cache variable for type _JSONKey and conformance _JSONKey;
  if (!lazy protocol witness table cache variable for type _JSONKey and conformance _JSONKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _JSONKey and conformance _JSONKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _JSONKey and conformance _JSONKey;
  if (!lazy protocol witness table cache variable for type _JSONKey and conformance _JSONKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _JSONKey and conformance _JSONKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _JSONKey and conformance _JSONKey;
  if (!lazy protocol witness table cache variable for type _JSONKey and conformance _JSONKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _JSONKey and conformance _JSONKey);
  }
  return result;
}

uint64_t partial apply for closure #2 in closure #1 in FocusStoreLocation.set(_:transaction:)(char a1)
{
  uint64_t v2 = type metadata accessor for FocusStore.Entry();
  return FocusStore.Entry.updateFocus(_:)(a1, v2);
}

uint64_t FocusStore.Entry.updateFocus(_:)(char a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0) + 8;
  MEMORY[0x1F4188790](v8);
  char v10 = v32 - v9 + 8;
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v12 = v11;
  MEMORY[0x1F4188790](v11);
  double v14 = v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0) + 8;
  uint64_t v15 = type metadata accessor for FocusStore.Entry.Target();
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = v32 - v17 + 8;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v19 + 16))((unsigned char *)v32 - v17 + 8, v2 + *(int *)(a2 + 40), v15, v16);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of Binding<SearchFieldState>((uint64_t)v18, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
    MEMORY[0x18C113DA0](v12);
    int v20 = static SearchFocusUpdate.nextSeed++;
    uint64_t v21 = &v10[*(int *)(v5 + 44)];
    *(_DWORD *)uint64_t v21 = v20;
    void v21[4] = a1 & 1;
    if ((a1 & 1) == 0 || *v10 != 2) {
      goto LABEL_15;
    }
    int v22 = v10[2];
    outlined init with copy of SearchFieldState((uint64_t)v10, (uint64_t)v7, type metadata accessor for SearchFieldState);
    if (v22 == 2)
    {
      int v22 = v7[3];
      outlined destroy of SearchFieldState((uint64_t)v7, type metadata accessor for SearchFieldState);
      if (v22 == 2)
      {
        char v23 = 0;
LABEL_14:
        unsigned char *v10 = v23;
        v10[*(int *)(v5 + 40)] = 1;
LABEL_15:
        dispatch thunk of AnyLocation.set(_:transaction:)();
        outlined destroy of SearchFieldState((uint64_t)v10, type metadata accessor for SearchFieldState);
        uint64_t v28 = type metadata accessor for Binding<SearchFieldState>;
        uint64_t v29 = (uint64_t)v14;
        return outlined destroy of SearchFieldState(v29, (uint64_t (*)(void))v28);
      }
    }
    else
    {
      outlined destroy of SearchFieldState((uint64_t)v7, type metadata accessor for SearchFieldState);
    }
    char v23 = v22 & 1;
    goto LABEL_14;
  }
  outlined init with take of Binding<SearchFieldState>((uint64_t)(v18 + 8), (uint64_t)v33, (uint64_t (*)(void))type metadata accessor for WeakBox<FocusBridge>);
  if (a1)
  {
    FocusStore.Entry.defaultFocusItem.getter(a2, (uint64_t)v32);
    MEMORY[0x1F4188790](v24);
    *(&v31 - 2) = (uint64_t)v33;
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI9FocusItemV_s5NeverOytTg5((void (*)(uint64_t *__return_ptr, unsigned char *))partial apply for closure #1 in FocusStore.Entry.updateFocus(_:));
    outlined destroy of SearchFieldState((uint64_t)v32, (uint64_t (*)(void))type metadata accessor for FocusItem?);
    outlined destroy of SearchFieldState((uint64_t)v33, (uint64_t (*)(void))type metadata accessor for WeakBox<FocusBridge>);
  }
  else
  {
    if (swift_weakLoadStrong())
    {
      int v25 = (void *)FocusBridge.host.getter();
      if (v25)
      {
        uint64_t v26 = v25;
        id v27 = objc_msgSend(v25, sel_firstResponder);
        objc_msgSend(v27, sel_resignFirstResponder);
        swift_release();
      }
      else
      {
        swift_release();
      }
    }
    outlined destroy of SearchFieldState((uint64_t)v33, (uint64_t (*)(void))type metadata accessor for WeakBox<FocusBridge>);
  }
  uint64_t v28 = type metadata accessor for WeakBox<ViewResponder>;
  uint64_t v29 = (uint64_t)v18;
  return outlined destroy of SearchFieldState(v29, (uint64_t (*)(void))v28);
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI9FocusItemV_s5NeverOytTg5(void (*a1)(uint64_t *__return_ptr, unsigned char *))
{
  outlined init with copy of AccessibilityScrollableContext?(v1, (uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, MEMORY[0x1E4FBB718]);
  if (v8) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = v9 == 1;
  }
  uint64_t v4 = v3;
  if (!v3)
  {
    outlined init with take of FocusItem((uint64_t)v7, (uint64_t)v6);
    a1(&v10, v6);
    outlined destroy of FocusItem((uint64_t)v6);
  }
  return v4;
}

uint64_t partial apply for closure #1 in FocusStore.Entry.updateFocus(_:)(uint64_t a1)
{
  return closure #1 in FocusStore.Entry.updateFocus(_:)(a1);
}

uint64_t closure #1 in FocusStore.Entry.updateFocus(_:)(uint64_t a1)
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    FocusBridge.moveFocus(to:designatedPlatformResponder:)(a1, 0);
    return swift_release();
  }
  return result;
}

void FocusBridge.moveFocus(to:designatedPlatformResponder:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  FocusBridge.focusedItem.getter((uint64_t)v27);
  outlined init with copy of FocusItem(a1, (uint64_t)v24);
  char v6 = specialized static FocusItem.isFocusChange(from:to:)((uint64_t)v27, (uint64_t)v24);
  outlined destroy of FocusItem?((uint64_t)v24);
  outlined destroy of FocusItem?((uint64_t)v27);
  if (v6)
  {
    uint64_t v7 = FocusBridge.host.getter();
    if (v7)
    {
      uint64_t v10 = (void *)v7;
      uint64_t v11 = v8;
      uint64_t v12 = v9;
      FocusBridge.focusedItem.getter((uint64_t)v27);
      uint64_t v14 = v31;
      uint64_t v13 = v32;
      outlined destroy of FocusItem?((uint64_t)v27);
      if (!v14 && v13 == 1)
      {
        if (swift_weakLoadStrong())
        {
          swift_release();
          id v15 = v10;
          double v16 = specialized static FocusBridge.representedFocusItem(_:in:)(a1, v15);

          if (v16)
          {
            if (swift_weakLoadStrong())
            {
              uint64_t v25 = 0;
              swift_weakInit();
              int v26 = 0;
              swift_unknownObjectWeakInit();
              swift_unknownObjectWeakAssign();
              outlined init with take of WeakBox<UIFocusItem>((uint64_t)v27, (uint64_t)v24);
              v24[32] = 1;
              uint64_t v25 = 0;
              swift_weakAssign();
              v24[33] = 0;
              outlined init with take of FocusItem((uint64_t)v24, (uint64_t)v27);
              FocusBridge.moveFocus(to:designatedPlatformResponder:)(v27, 0);

              swift_unknownObjectRelease();
              swift_release();
              outlined destroy of FocusItem((uint64_t)v27);
            }
            else
            {

              swift_unknownObjectRelease();
            }
            return;
          }
        }
      }
      if ((FocusBridge.canAcceptFocus.getter() & 1) == 0)
      {
LABEL_29:

        return;
      }
      id v17 = (id)FocusItem.platformResponder.getter();
      if (v17)
      {
        if (FocusItem.isFocusable.getter())
        {
          if ((static SemanticFeature.isEnabled.getter() & 1) == 0) {
            goto LABEL_16;
          }
          uint64_t v18 = UIView.firstFocusableDescendant.getter();
        }
        else
        {
          uint64_t v18 = 0;
        }

        id v17 = v18;
      }
LABEL_16:
      outlined init with copy of FocusItem.Base(a1, (uint64_t)v27);
      int v19 = v30;
      outlined destroy of FocusItem.Base((uint64_t)v27);
      if (v19)
      {
        if (!v17)
        {
          outlined init with copy of FocusItem.Base(a1, (uint64_t)v27);
          if (v30 == 1)
          {
            outlined init with take of WeakBox<UIFocusItem>((uint64_t)v27, (uint64_t)v24);
            uint64_t v20 = MEMORY[0x18C119DF0](v24);
            outlined destroy of WeakBox<FocusBridge>((uint64_t)v24, &lazy cache variable for type metadata for WeakBox<UIFocusItem>, 255, (uint64_t (*)(uint64_t))type metadata accessor for UIFocusItem, MEMORY[0x1E4F41720]);
            if (v20)
            {
              *(void *)(v3 + 160) = v20;
              swift_unknownObjectRetain();
              swift_unknownObjectRelease();
              objc_msgSend(v10, sel_setNeedsFocusUpdate);
              type metadata accessor for UIFocusSystem();
              swift_unknownObjectRetain();
              uint64_t v21 = (void *)static UIFocusSystem.focusSystem(for:)();
              swift_unknownObjectRelease();
              if (v21)
              {
                objc_msgSend(v21, sel_requestFocusUpdateToEnvironment_, v10);
                swift_unknownObjectRelease();

                return;
              }
              swift_unknownObjectRelease();
            }
          }
          else
          {
            outlined destroy of FocusItem.Base((uint64_t)v27);
          }
          goto LABEL_29;
        }
      }
      else
      {
        outlined init with copy of FocusItem(a1, (uint64_t)v27);
        FocusBridge.focusedItem.setter((uint64_t)v27);

        id v17 = a2;
        if (!a2) {
          id v17 = v10;
        }
        id v22 = a2;
      }
      id v23 = v17;
      swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v28 = v11;
      uint64_t v29 = v12;
      swift_unknownObjectWeakInit();
      swift_retain();
      static Update.enqueueAction(_:)();

      swift_release();
      outlined destroy of weak FallbackResponderProvider?((uint64_t)v27);
      swift_release();
    }
  }
}

uint64_t outlined init with copy of FocusItem(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for FocusItem(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 32);
  if (v4 == 2)
  {
    swift_unknownObjectWeakCopyInit();
    char v5 = 2;
  }
  else
  {
    if (v4 != 1)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
      uint64_t v6 = *(void *)(a2 + 16);
      uint64_t v7 = *(void *)(a2 + 24);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = v6;
      *(void *)(a1 + 24) = v7;
      *(unsigned char *)(a1 + 32) = 0;
      swift_retain();
      goto LABEL_7;
    }
    swift_unknownObjectWeakCopyInit();
    char v5 = 1;
  }
  *(unsigned char *)(a1 + 32) = v5;
LABEL_7:
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  swift_weakCopyInit();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

uint64_t specialized static FocusItem.isFocusChange(from:to:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of FocusItem?(a1, (uint64_t)v11);
  outlined init with copy of FocusItem?(a2, (uint64_t)v14);
  if (v12) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = v13 == 1;
  }
  if (v3)
  {
    if (v15) {
      BOOL v4 = 0;
    }
    else {
      BOOL v4 = v16 == 1;
    }
    if (v4)
    {
      outlined destroy of FocusItem?((uint64_t)v11);
      char v5 = 0;
      return v5 & 1;
    }
  }
  else
  {
    outlined init with copy of FocusItem?((uint64_t)v11, (uint64_t)v10);
    if (v15 || v16 != 1)
    {
      outlined init with take of FocusItem((uint64_t)v10, (uint64_t)v9);
      outlined init with take of FocusItem((uint64_t)v14, (uint64_t)v8);
      char v6 = FocusItem.hasEqualIdentity(to:)((uint64_t)v8);
      outlined destroy of FocusItem((uint64_t)v8);
      outlined destroy of FocusItem((uint64_t)v9);
      char v5 = v6 ^ 1;
      outlined destroy of FocusItem?((uint64_t)v11);
      return v5 & 1;
    }
    outlined destroy of FocusItem((uint64_t)v10);
  }
  outlined destroy of WeakBox<UIFocusItem>((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for (FocusItem?, FocusItem?));
  char v5 = 1;
  return v5 & 1;
}

uint64_t outlined destroy of WeakBox<UIFocusItem>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI7WeakBoxVySo11UIFocusItem_pGWOhTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  _s7SwiftUI7WeakBoxVySo11UIFocusItem_pGMaTm_0(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

void type metadata accessor for (FocusItem?, FocusItem?)()
{
  if (!lazy cache variable for type metadata for (FocusItem?, FocusItem?))
  {
    type metadata accessor for _ContiguousArrayStorage<Text>(255, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (FocusItem?, FocusItem?));
    }
  }
}

void closure #2 in FocusBridge.firstResponderDidChange(to:rootResponder:)(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, id a4@<X5>, uint64_t a5@<X6>, void *a6@<X7>, unsigned char *a7@<X8>)
{
  (*(void (**)(void *__return_ptr, void))(a2 + 16))(v23, *a1);
  if (v23[5]) {
    BOOL v13 = 0;
  }
  else {
    BOOL v13 = v23[6] == 1;
  }
  if (v13)
  {
    outlined destroy of FocusItem?((uint64_t)v23);
  }
  else
  {
    outlined init with take of FocusItem((uint64_t)v23, (uint64_t)v24);
    char v14 = FocusItem.isFocusable.getter();
    outlined init with copy of FocusItem((uint64_t)v24, (uint64_t)v23);
    if (v14)
    {
      id v15 = (id)FocusItem.platformResponder.getter();
      if (!v15) {
        id v15 = a3;
      }
      id v16 = v15;

      outlined destroy of FocusItem((uint64_t)v23);
      if (v16 == a4)
      {
        outlined destroy of FocusItem?(a5);
        outlined init with take of FocusItem((uint64_t)v24, a5);
        *a7 = 2;
        return;
      }
    }
    else
    {
      outlined destroy of FocusItem((uint64_t)v23);
    }
    uint64_t v17 = FocusItem.platformResponder.getter();
    if (v17)
    {
      uint64_t v18 = (void *)v17;
      if (a6)
      {
        id v19 = a6;
        if (objc_msgSend(v19, sel_isDescendantOfView_, v18))
        {
          uint64_t v21 = 0;
          swift_weakInit();
          int v22 = 0;
          swift_unknownObjectWeakInit();
          swift_unknownObjectWeakAssign();
          outlined init with take of WeakBox<UIView>((uint64_t)v23, (uint64_t)v20);
          v20[32] = 2;
          uint64_t v21 = a2;
          swift_weakAssign();
          v20[33] = 0;
          outlined init with take of FocusItem((uint64_t)v20, (uint64_t)v23);

          outlined destroy of FocusItem((uint64_t)v24);
          outlined assign with take of FocusItem?((uint64_t)v23, a5);
          *a7 = 2;
          return;
        }
        outlined destroy of FocusItem((uint64_t)v24);
      }
      else
      {
        outlined destroy of FocusItem((uint64_t)v24);
      }
    }
    else
    {
      outlined destroy of FocusItem((uint64_t)v24);
    }
  }
  *a7 = 0;
}

void UIViewResponder.focusItem.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = MEMORY[0x18C119DF0](v1 + 6);
  if (!v4)
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    *(void *)(a1 + 48) = 1;
    *(_DWORD *)(a1 + 56) = 0;
    return;
  }
  char v5 = (void *)v4;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusSystem);
  id v13 = v5;
  uint64_t v6 = (void *)static UIFocusSystem.focusSystem(for:)();

  if (v6)
  {

    id v7 = objc_msgSend(v13, sel_traitCollection);
    id v8 = objc_msgSend(v7, sel_userInterfaceIdiom);

    id v9 = (id)(*(uint64_t (**)(void))(class metadata base offset for PlatformViewResponderBase + *v2 + 48))();
    if (!v9
      && ((static SemanticFeature.isEnabled.getter() & 1) == 0 || (id v9 = UIView.firstFocusableDescendant.getter()) == 0))
    {
      id v9 = v13;
    }
    uint64_t v10 = v9;
    uint64_t v18 = 0;
    swift_weakInit();
    int v19 = 0;
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of WeakBox<UIFocusItem>((uint64_t)v14, (uint64_t)v15);
    char v16 = 1;
    uint64_t v18 = &protocol witness table for UIViewResponder;
    swift_weakAssign();
    BOOL v17 = v8 == (id)3;
    outlined init with take of FocusItem((uint64_t)v15, a1);

LABEL_13:
    return;
  }
  if ((*(uint64_t (**)(void))(class metadata base offset for UIViewResponder + *v2 + 16))())
  {
    id v11 = (id)(*(uint64_t (**)(void))(class metadata base offset for PlatformViewResponderBase + *v2 + 48))();
    if (!v11) {
      id v11 = v13;
    }
    uint64_t v12 = v11;
    uint64_t v18 = 0;
    swift_weakInit();
    int v19 = 0;
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of WeakBox<UIView>((uint64_t)v14, (uint64_t)v15);
    swift_retain();

    char v16 = 2;
    uint64_t v18 = &protocol witness table for UIViewResponder;
    swift_weakAssign();
    swift_release();
    BOOL v17 = 0;
    outlined init with take of FocusItem((uint64_t)v15, a1);
    goto LABEL_13;
  }
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 48) = 1;
  *(_DWORD *)(a1 + 56) = 0;
}

uint64_t outlined init with take of FocusItem(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithTake for FocusItem(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 32);
  if (v4 == 2)
  {
    swift_unknownObjectWeakTakeInit();
    char v5 = 2;
  }
  else if (v4 == 1)
  {
    swift_unknownObjectWeakTakeInit();
    char v5 = 1;
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    char v5 = *(unsigned char *)(a2 + 32);
  }
  *(unsigned char *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  swift_weakTakeInit();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

uint64_t UIViewResponder.wantsSwiftUIFocusItem.getter()
{
  uint64_t v1 = (*(uint64_t (**)(void))(class metadata base offset for PlatformViewResponderBase + *v0 + 48))();
  if (v1)
  {
    uint64_t v2 = (void *)v1;
  }
  else
  {
    uint64_t v2 = (void *)MEMORY[0x18C119DF0](v0 + 6);
    if (!v2) {
      return 0;
    }
  }
  if ((static SemanticFeature.isEnabled.getter() & 1) == 0)
  {
    uint64_t v4 = (uint64_t)objc_msgSend(v2, sel_canBecomeFirstResponder);
    goto LABEL_8;
  }
  uint64_t v3 = UIView.firstFocusableDescendant.getter();

  if (!v3) {
    return 0;
  }
  uint64_t v4 = 1;
  uint64_t v2 = v3;
LABEL_8:

  return v4;
}

void PlatformViewResponderBase.preferredFocusableView.getter()
{
}

void *UIView.firstFocusableDescendant.getter()
{
  type metadata accessor for _ContiguousArrayStorage<[UIView]>();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18834BB80;
  type metadata accessor for _ContiguousArrayStorage<Text>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_188351940;
  *(void *)(v2 + 32) = v0;
  uint64_t v6 = v2;
  specialized Array._endMutation()();
  *(void *)(inited + 32) = v6;
  id v3 = v0;
  swift_bridgeObjectRetain();
  for (unint64_t i = (void *)PlatformSubtreeIterator.next()(); i; unint64_t i = (void *)PlatformSubtreeIterator.next()())
  {
    if (objc_msgSend(i, sel_canBecomeFirstResponder)) {
      break;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return i;
}

void type metadata accessor for _ContiguousArrayStorage<[UIView]>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<[UIView]>)
  {
    type metadata accessor for WeakBox<UIView>(255, (unint64_t *)&lazy cache variable for type metadata for [UIView], MEMORY[0x1E4FBB320]);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<[UIView]>);
    }
  }
}

uint64_t PlatformSubtreeIterator.next()()
{
  uint64_t v3 = *(void *)(v0 + 8);
  if (v3 > 9) {
    return 0;
  }
  uint64_t v4 = (void *)v0;
  char v5 = *(void **)v0;
  if (!*(void *)(*(void *)v0 + 16)) {
    return 0;
  }
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    uint64_t v6 = v5[2];
    if (v6) {
      goto LABEL_5;
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  char v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  uint64_t v6 = v5[2];
  if (!v6) {
    goto LABEL_13;
  }
LABEL_5:
  uint64_t v7 = v6 - 1;
  unint64_t v0 = v5[v7 + 4];
  _OWORD v5[2] = v7;
  *uint64_t v4 = v5;
  unint64_t v21 = v0;
  unint64_t v2 = v0 >> 62;
  if (!(v0 >> 62))
  {
    if (*(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_14:
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (v10)
  {
    swift_bridgeObjectRetain();
    id v1 = (id)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v1)
    {
LABEL_7:
      if ((v0 & 0xC000000000000001) == 0)
      {
        if (!*(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_29;
        }
        id v1 = *(id *)(v0 + 32);
        if (!v2) {
          goto LABEL_10;
        }
        goto LABEL_19;
      }
LABEL_18:
      id v1 = (id)MEMORY[0x18C117680](0, v0);
      if (!v2)
      {
LABEL_10:
        unint64_t v8 = v0 & 0xFFFFFFFFFFFFFF8;
        int64_t v9 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_20:
        if (!v9)
        {
          __break(1u);
          goto LABEL_44;
        }
        specialized Array.replaceSubrange<A>(_:with:)(0, 1);
        self;
        if (!swift_dynamicCastObjCClass() || (self, swift_dynamicCastObjCClass()))
        {
          unint64_t v0 = v21;
          if (!(v21 >> 62))
          {
            if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_25;
            }
            goto LABEL_30;
          }
LABEL_29:
          swift_bridgeObjectRetain();
          uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v12)
          {
LABEL_25:
            unint64_t v2 = v5[2];
            unint64_t v8 = v5[3];
            int64_t v9 = v2 + 1;
            if (v2 < v8 >> 1)
            {
LABEL_26:
              _OWORD v5[2] = v9;
              v5[v2 + 4] = v0;
              *uint64_t v4 = v5;
LABEL_31:
              id v13 = objc_msgSend(v1, sel_subviews);
              type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
              unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              if (v14 >> 62)
              {
                swift_bridgeObjectRetain();
                uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
              }
              swift_bridgeObjectRelease();
              if (v15 && v5[2] <= 3uLL)
              {
                id v16 = objc_msgSend(v1, sel_effectiveUserInterfaceLayoutDirection);
                id v17 = objc_msgSend(v1, sel_subviews);
                unint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

                if (v16 == (id)1) {
                  unint64_t v18 = specialized Sequence.reversed()(v18);
                }
                unint64_t v20 = v5[2];
                unint64_t v19 = v5[3];
                if (v20 >= v19 >> 1) {
                  char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v5);
                }
                _OWORD v5[2] = v20 + 1;
                v5[v20 + 4] = v18;
                *uint64_t v4 = v5;
              }
              v4[1] = v3 + 1;
              return (uint64_t)v1;
            }
LABEL_44:
            char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9, 1, v5);
            goto LABEL_26;
          }
LABEL_30:
          swift_bridgeObjectRelease();
          goto LABEL_31;
        }
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        id v1 = 0;
        *uint64_t v4 = MEMORY[0x1E4FBC860];
        v4[1] = v3 + 1;
        return (uint64_t)v1;
      }
LABEL_19:
      swift_bridgeObjectRetain();
      int64_t v9 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

void type metadata accessor for [UIView]()
{
  if (!lazy cache variable for type metadata for [UIView])
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIView);
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [UIView]);
    }
  }
}

void *PlatformUnaryViewResponder.visit(applying:)@<X0>(void *(*a1)(uint64_t *__return_ptr, uint64_t)@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = a1(&v7, v2);
  char v5 = v7;
  if (!(_BYTE)v7)
  {
    swift_retain();
    MultiViewResponder.visit(applying:)();
    uint64_t result = (void *)swift_release();
    char v5 = v6;
  }
  *a2 = v5;
  return result;
}

uint64_t partial apply for closure #1 in ResponderNode.visitBaseFocusResponders(applying:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return closure #1 in ResponderNode.visitBaseFocusResponders(applying:)(a1, *(void (**)(uint64_t, uint64_t))(v2 + 16), a2);
}

uint64_t closure #1 in ResponderNode.visitBaseFocusResponders(applying:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t)@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = swift_conformsToProtocol2();
  if (result) {
    uint64_t v7 = result;
  }
  else {
    uint64_t v7 = 0;
  }
  if (result) {
    uint64_t v8 = a1;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8)
  {
    swift_retain();
    a2(v8, v7);
    return swift_release();
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t partial apply for closure #1 in ResponderNode.visitFocusResponders(applying:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return closure #1 in ResponderNode.visitFocusResponders(applying:)(a1, *(void (**)(uint64_t, uint64_t))(v2 + 16), a2);
}

uint64_t closure #1 in ResponderNode.visitFocusResponders(applying:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t)@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = swift_conformsToProtocol2();
  if (result) {
    uint64_t v7 = result;
  }
  else {
    uint64_t v7 = 0;
  }
  if (result) {
    uint64_t v8 = a1;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8)
  {
    swift_retain();
    a2(v8, v7);
    return swift_release();
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t partial apply for closure #1 in FocusStore.Entry.defaultFocusItem.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  return closure #1 in FocusStore.Entry.defaultFocusItem.getter(a1, a2, *(void *)(v3 + 16), a3);
}

uint64_t closure #1 in FocusStore.Entry.defaultFocusItem.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  void (*v12)(void *__return_ptr, uint64_t, uint64_t);
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  char v21;
  uint64_t result;
  unsigned char v23[48];
  uint64_t v24;
  int v25;
  void v26[5];
  uint64_t v27;
  uint64_t v28;

  uint64_t v8 = swift_conformsToProtocol2();
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v8) {
    uint64_t v10 = a1;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v10)
  {
    uint64_t v11 = *v10;
    uint64_t v12 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v9 + 16);
    swift_retain();
    v12(v26, v11, v9);
    if (v27 || v28 != 1)
    {
      id v13 = FocusItem.isFocusable.getter();
      outlined destroy of FocusItem((uint64_t)v26);
      if (v13)
      {
        v12(v26, v11, v9);
        swift_release();
LABEL_24:
        outlined assign with take of FocusItem?((uint64_t)v26, a3);
        goto LABEL_26;
      }
    }
    else
    {
      outlined destroy of SearchFieldState((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for FocusItem?);
    }
    swift_release();
  }
  unint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(*a1, a2);
  if (!v14) {
    goto LABEL_26;
  }
  uint64_t v15 = v14;
  swift_getObjectType();
  id v16 = swift_conformsToProtocol2();
  if (v16) {
    id v17 = v16;
  }
  else {
    id v17 = 0;
  }
  if (v16) {
    unint64_t v18 = v15;
  }
  else {
    unint64_t v18 = 0;
  }
  if (v18)
  {
    uint64_t ObjectType = swift_getObjectType();
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v17 + 24))(ObjectType, v17))
    {
      uint64_t v24 = 0;
      swift_weakInit();
      uint64_t v25 = 0;
      swift_unknownObjectWeakInit();
      swift_unknownObjectWeakAssign();
      outlined init with take of Binding<SearchFieldState>((uint64_t)v26, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for WeakBox<UIFocusItem>);
      v23[32] = 1;
      uint64_t v24 = 0;
      swift_weakAssign();
      v23[33] = 0;
      outlined init with take of FocusItem((uint64_t)v23, (uint64_t)v26);
      swift_unknownObjectRelease();
      goto LABEL_24;
    }
  }
  swift_unknownObjectRelease();
LABEL_26:
  outlined init with copy of SearchFieldState(a3, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for FocusItem?);
  if (v28 == 1 && v27 == 0) {
    unint64_t v21 = 0;
  }
  else {
    unint64_t v21 = 2;
  }
  uint64_t result = outlined destroy of SearchFieldState((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for FocusItem?);
  *a4 = v21;
  return result;
}

uint64_t outlined assign with take of FocusItem?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for FocusItem?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t protocol witness for UIKitHostedContainerFocusItem.providesDefaultFocusItems.getter in conformance UIKitContainerFocusResponderItem<A>()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t protocol witness for BaseFocusResponder.platformItem.getter in conformance FocusStateBindingResponder()
{
  specialized FocusStateBindingResponder.hostedItem.getter();

  return swift_unknownObjectRetain();
}

uint64_t specialized FocusStateBindingResponder.hostedItem.getter()
{
  uint64_t result = *(void *)(v0 + 296);
  if (!result)
  {
    type metadata accessor for UIKitContainerFocusResponderItem<FocusStateBindingResponder>();
    uint64_t v3 = v2;
    uint64_t v4 = objc_allocWithZone(v2);
    swift_weakInit();
    swift_unknownObjectWeakInit();
    char v5 = &v4[direct field offset for UIKitContainerFocusResponderItem.frame];
    *char v5 = 0u;
    v5[1] = 0u;
    v4[direct field offset for UIKitContainerFocusResponderItem.isEnabled] = 1;
    *(void *)&v4[direct field offset for UIKitContainerFocusResponderItem.cachedCoordinateSpace] = 0;
    swift_weakAssign();
    v8.receiver = v4;
    v8.super_class = v3;
    id v6 = objc_msgSendSuper2(&v8, sel_init);
    uint64_t v7 = *(void **)(v0 + 296);
    *(void *)(v0 + 296) = v6;

    return *(void *)(v0 + 296);
  }
  return result;
}

void partial apply for closure #2 in FocusBridge.firstResponderDidChange(to:rootResponder:)(void *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  closure #2 in FocusBridge.firstResponderDidChange(to:rootResponder:)(a1, a2, *(void **)(v3 + 16), *(id *)(v3 + 40), *(void *)(v3 + 48), *(void **)(v3 + 56), a3);
}

uint64_t FocusItem.platformResponder.getter()
{
  outlined init with copy of FocusItem.Base(v0, (uint64_t)v4);
  if (v5 == 2)
  {
    outlined init with take of WeakBox<UIView>((uint64_t)v4, (uint64_t)v6);
    uint64_t v1 = MEMORY[0x18C119DF0](v6);
    outlined destroy of WeakBox<UIView>((uint64_t)v6);
    return v1;
  }
  outlined destroy of FocusItem.Base((uint64_t)v4);
  outlined init with copy of FocusItem.Base(v0, (uint64_t)v4);
  if (v5 != 1)
  {
    outlined destroy of FocusItem.Base((uint64_t)v4);
    return 0;
  }
  outlined init with take of WeakBox<UIFocusItem>((uint64_t)v4, (uint64_t)v6);
  if (!MEMORY[0x18C119DF0](v6))
  {
    outlined destroy of WeakBox<UIFocusItem>((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WeakBox<UIFocusItem>);
    return 0;
  }
  if (*(unsigned char *)(v0 + 33))
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusSystem);
    swift_unknownObjectRetain();
    uint64_t v2 = (void *)static UIFocusSystem.focusSystem(for:)();
    swift_unknownObjectRelease();
    if (v2)
    {

      outlined destroy of WeakBox<UIFocusItem>((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WeakBox<UIFocusItem>);
      swift_unknownObjectRelease();
      return 0;
    }
  }
  outlined destroy of WeakBox<UIFocusItem>((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WeakBox<UIFocusItem>);
  self;
  uint64_t v1 = swift_dynamicCastObjCClass();
  if (!v1) {
    swift_unknownObjectRelease();
  }
  return v1;
}

uint64_t FocusItem.isFocusable.getter()
{
  outlined init with copy of FocusItem.Base(v0, (uint64_t)v9);
  if (!v10)
  {
    unsigned __int8 v2 = v9[4];
    swift_release();
    return v2 & 1;
  }
  if (v10 != 1)
  {
    outlined init with take of WeakBox<UIView>((uint64_t)v9, (uint64_t)&v8);
    if (swift_weakLoadStrong())
    {
      type metadata accessor for UIViewResponder();
      uint64_t v3 = (void *)swift_dynamicCastClass();
      if (v3)
      {
        unsigned __int8 v2 = (*(uint64_t (**)(void))(class metadata base offset for UIViewResponder + *v3 + 16))();
        swift_release();
        goto LABEL_18;
      }
      swift_release();
    }
    uint64_t v4 = MEMORY[0x18C119DF0](&v8);
    if (!v4)
    {
      outlined destroy of WeakBox<UIView>((uint64_t)&v8);
      goto LABEL_16;
    }
    char v5 = (void *)v4;
    if (static SemanticFeature.isEnabled.getter())
    {
      id v6 = UIView.firstFocusableDescendant.getter();
      unsigned __int8 v2 = v6 != 0;

      if (v6) {
    }
      }
    else
    {
      unsigned __int8 v2 = objc_msgSend(v5, sel_canBecomeFirstResponder);
    }
LABEL_18:
    outlined destroy of WeakBox<UIView>((uint64_t)&v8);
    return v2 & 1;
  }
  outlined init with take of WeakBox<UIFocusItem>((uint64_t)v9, (uint64_t)&v8);
  uint64_t v1 = (void *)MEMORY[0x18C119DF0](&v8);
  if (!v1)
  {
    outlined destroy of WeakBox<UIFocusItem>((uint64_t)&v8, (uint64_t (*)(void))type metadata accessor for WeakBox<UIFocusItem>);
LABEL_16:
    unsigned __int8 v2 = 0;
    return v2 & 1;
  }
  unsigned __int8 v2 = objc_msgSend(v1, sel_canBecomeFocused);
  swift_unknownObjectRelease();
  outlined destroy of WeakBox<UIFocusItem>((uint64_t)&v8, (uint64_t (*)(void))type metadata accessor for WeakBox<UIFocusItem>);
  return v2 & 1;
}

void type metadata accessor for UIKitContainerFocusResponderItem<FocusStateBindingResponder>()
{
  if (!lazy cache variable for type metadata for UIKitContainerFocusResponderItem<FocusStateBindingResponder>)
  {
    type metadata accessor for FocusStateBindingResponder();
    unint64_t v0 = type metadata accessor for UIKitContainerFocusResponderItem();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitContainerFocusResponderItem<FocusStateBindingResponder>);
    }
  }
}

uint64_t type metadata accessor for FocusStateBindingResponder()
{
  uint64_t result = type metadata singleton initialization cache for FocusStateBindingResponder;
  if (!type metadata singleton initialization cache for FocusStateBindingResponder) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for UIKitContainerFocusResponderItem()
{
  return __swift_instantiateGenericMetadata();
}

void FocusBridge.didChangeFocusItem(from:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = FocusBridge.host.getter();
  if (v4)
  {
    id v7 = (id)v4;
    if (specialized static FocusItem.isFocusChange(from:to:)(a1, a2))
    {
      outlined init with copy of FocusItem?(a1, (uint64_t)v11);
      if (v12 || v13 != 1)
      {
        outlined init with copy of FocusItem.Base((uint64_t)v11, (uint64_t)v8);
        if (v10)
        {
          outlined destroy of FocusItem.Base((uint64_t)v8);
        }
        else
        {
          char v5 = v9;
          swift_retain();
          v5(0);
          swift_release_n();
        }
        outlined destroy of FocusItem((uint64_t)v11);
      }
      else
      {
        outlined destroy of FocusItem?((uint64_t)v11);
      }
      outlined init with copy of FocusItem?(a2, (uint64_t)v11);
      if (v12 || v13 != 1)
      {
        outlined init with copy of FocusItem.Base((uint64_t)v11, (uint64_t)v8);
        if (v10)
        {
          outlined destroy of FocusItem.Base((uint64_t)v8);
        }
        else
        {
          id v6 = v9;
          swift_retain();
          v6(1);
          swift_release_n();
        }
        outlined destroy of FocusItem((uint64_t)v11);
      }
      else
      {
        outlined destroy of FocusItem?((uint64_t)v11);
      }
      swift_getObjectType();
      v11[0] = 128;
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    }
    else
    {
    }
  }
}

uint64_t outlined init with copy of FocusItem.Base(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for FocusItem.Base(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 32);
  if (v3 >= 3) {
    unsigned int v3 = *(_DWORD *)a2 + 3;
  }
  if (v3 == 2)
  {
    swift_unknownObjectWeakCopyInit();
    char v4 = 2;
  }
  else
  {
    if (v3 != 1)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
      uint64_t v5 = *(void *)(a2 + 16);
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = v5;
      *(void *)(a1 + 24) = v6;
      *(unsigned char *)(a1 + 32) = 0;
      swift_retain();
      return a1;
    }
    swift_unknownObjectWeakCopyInit();
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 32) = v4;
  return a1;
}

uint64_t outlined destroy of FocusItem.Base(uint64_t a1)
{
  return a1;
}

uint64_t destroy for FocusItem.Base(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 32);
  if (v1 >= 3) {
    unsigned int v1 = *(_DWORD *)a1 + 3;
  }
  if (v1 == 2 || v1 == 1) {
    return swift_unknownObjectWeakDestroy();
  }
  else {
    return swift_release();
  }
}

uint64_t base witness table accessor for _AttributeBody in ToString<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in AccessibilityRepresentableStyleModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in UpdateCollectionViewListCoordinator<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in ContainerBackgroundRendererModifier<A>.ChildEnvironment()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in OptionalSelectionManagerProjection<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Hashable in OptionalSelectionManagerProjection<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in OnScrollVisibilityChangeModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in SearchFieldConfigurationReader<A, B>.MakeContent()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in DefaultListNavigationLinkStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ToolbarButtonContentModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedNavigationSplitStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ToolbarButtonLabelModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SelectionContainerModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedProgressViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for MultiViewModifier in ControlGroupStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveViewModifier in ControlGroupStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for ProgressViewStyle.Body : View in CircularProgressViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in BindKeyboardShortcutItems<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for MultiViewModifier in UIKitButtonStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveViewModifier in UIKitButtonStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for MultiViewModifier in SearchFieldStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveViewModifier in SearchFieldStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in PlatformItemTintModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ProgressViewStyle.Body : View in DefaultProgressViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for SearchFieldStyle.Body : View in ToolbarSearchFieldStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in ToolbarSearchFieldStyle.Implementation()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for MultiViewModifier in TokenFieldStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveViewModifier in TokenFieldStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Sequence in ShadowSectionCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Collection in ShadowSectionCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in SearchPrimitiveModifier<A>.FocusStoreListFilter()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in SearchPrimitiveModifier<A>.MakeDefaultView()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in SearchPrimitiveModifier<A>.MakeForwardEnv()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in SearchPrimitiveModifier<A>.MakeModifier()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in TextFieldStyleModifier<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t base witness table accessor for MultiViewModifier in TextFieldStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveViewModifier in TextFieldStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in NavigationStackReader<A, B>.ChildEnvironment()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in NavigationStackReader<A, B>.StackKey()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for View.Body : View in NavigationSplitReader()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in NavigableListModifier<A>.IsEditing()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in NavigableListModifier<A>.EnsureNavigationAuthority()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in NavigableListModifier<A>.ListKey()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in NavigableListModifier<A>.BoundListSelectionDetector()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for MultiViewModifier in GroupBoxStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveViewModifier in GroupBoxStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for MultiViewModifier in StepperStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveViewModifier in StepperStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for ListDiffable.SectionIDs : BidirectionalCollection in ShadowListDataSource<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedProgressView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for CustomHoverEffect.Body : CustomHoverEffect in HighlightHoverEffect()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in ButtonActionModifier<A>.PlatformSelectionBehavior()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SubmitScopeModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for MultiViewModifier in SliderStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveViewModifier in SliderStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Sequence in ShadowRowCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for View.Body : View in NavigationSplitCore()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for SectionStyle.Body : View in DefaultSectionStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in ToolbarButtonStyle.ResolvedBody()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for Equatable in ToAnyListSelection<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Hashable in ToAnyListSelection<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in SearchOverlayView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for SectionStyle.Body : View in PlainSectionStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for MultiViewModifier in MenuStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveViewModifier in MenuStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in MakeRepresentable<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in ToolbarModifier<A, B>.TransformSearch()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for ViewModifier in SearchModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in AsAnySelection<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Hashable in AsAnySelection<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PropertyKey in _GraphInputs.SelectionBasedStorageKey<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in BaseModifier<A>.Child()
{
  return swift_getWitnessTable();
}

{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in ToolbarItem<A, B>.MakeView()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for View.Body : View in BarItemView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in _ListValue<A, B>.Init2()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for TextFieldStyle._Body : View in SearchFieldConfigurationTextFieldStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(unint64_t *a1)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

void (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(uint64_t a1)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(unsigned int *a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init(type:)())(uint64_t a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init(type:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init(type:);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance SectionStyleModifier<A>()
{
  return static StyleModifier._viewListCount(inputs:body:)();
}

uint64_t type metadata completion function for LazyLayoutComputer.Engine()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for MinorProperties()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SectionStyleConfiguration.Actions(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

void storeEnumTagSinglePayload for ProgressViewStyleModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 >= a2)
  {
    switch(v11)
    {
      case 1:
        a1[v8] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 3:
LABEL_34:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        goto LABEL_20;
      default:
LABEL_20:
        if (a2)
        {
LABEL_21:
          id v16 = *(void (**)(void))(v6 + 56);
          v16();
        }
        break;
    }
  }
  else
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        break;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        break;
      default:
        return;
    }
  }
}

uint64_t static ToolbarItemPlacement.navigationBarTrailing.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(&one-time initialization token for navigationBarTrailing, (uint64_t)&static ToolbarItemPlacement.navigationBarTrailing, a1);
}

uint64_t specialized NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(void *a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  id v12 = objc_msgSend(a1, sel_viewControllers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (a3)
  {
    if (v13 >> 62) {
      goto LABEL_16;
    }
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      swift_bridgeObjectRelease();
      if (v14 != 1) {
        break;
      }
      uint64_t v15 = outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>(a2);
      uint64_t v16 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v15);
      if (v17)
      {
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>(a2);
        break;
      }
      uint64_t v18 = 0;
      char v19 = 0;
      while (1)
      {
        uint64_t v20 = v18 + 1;
        if (__OFADD__(v18, 1)) {
          break;
        }
        uint64_t v16 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(v16, v19 & 1);
        char v19 = v22 & 1;
        ++v18;
        if ((v22 & 1) != 0 && v21 >= 2u)
        {
          outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>(a2);
          BOOL v23 = v20 != 1;
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_16:
      swift_bridgeObjectRetain();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    BOOL v23 = 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    BOOL v23 = 0;
  }
LABEL_14:
  uint64_t v39 = 0;
  char v40 = 1;
  outlined init with copy of NavigationAuthority((uint64_t)v6 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v6) + 0x68), (uint64_t)v38);
  NavigationAuthority.controllerCache.getter();
  uint64_t v24 = outlined destroy of NavigationAuthority((uint64_t)v38);
  MEMORY[0x1F4188790](v24);
  uint64_t v33 = a2;
  uint64_t v34 = a4;
  uint64_t v35 = v6;
  uint64_t v36 = a1;
  uint64_t v37 = &v39;
  MEMORY[0x1F4188790](v25);
  v28[2] = v6;
  char v29 = a5 & 1;
  uint64_t v30 = a4;
  uint64_t v31 = a1;
  BOOL v32 = v23;
  specialized NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)((unint64_t)a1, 0, (void (*)(uint64_t *))partial apply for specialized closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:), v26, (void (*)(unint64_t))partial apply for specialized closure #2 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:), (uint64_t)v28);
  return swift_release();
}

{
  void *v5;
  void *v6;
  id v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unsigned __int8 v21;
  char v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void v28[3];
  char v29;
  uint64_t v30;
  void *v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t *v37;
  unsigned char v38[24];
  uint64_t v39;
  char v40;

  uint64_t v6 = v5;
  id v12 = objc_msgSend(a1, sel_viewControllers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (a3)
  {
    if (v13 >> 62) {
      goto LABEL_16;
    }
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      swift_bridgeObjectRelease();
      if (v14 != 1) {
        break;
      }
      uint64_t v15 = outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>(a2);
      uint64_t v16 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v15);
      if (v17)
      {
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>(a2);
        break;
      }
      uint64_t v18 = 0;
      char v19 = 0;
      while (1)
      {
        uint64_t v20 = v18 + 1;
        if (__OFADD__(v18, 1)) {
          break;
        }
        uint64_t v16 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(v16, v19 & 1);
        char v19 = v22 & 1;
        ++v18;
        if ((v22 & 1) != 0 && v21 >= 2u)
        {
          outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>(a2);
          BOOL v23 = v20 != 1;
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_16:
      swift_bridgeObjectRetain();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    BOOL v23 = 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    BOOL v23 = 0;
  }
LABEL_14:
  uint64_t v39 = 0;
  char v40 = 1;
  outlined init with copy of NavigationAuthority((uint64_t)v6 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v6) + 0x68), (uint64_t)v38);
  NavigationAuthority.controllerCache.getter();
  uint64_t v24 = outlined destroy of NavigationAuthority((uint64_t)v38);
  MEMORY[0x1F4188790](v24);
  uint64_t v33 = a2;
  uint64_t v34 = a4;
  uint64_t v35 = v6;
  uint64_t v36 = a1;
  uint64_t v37 = &v39;
  MEMORY[0x1F4188790](v25);
  v28[2] = v6;
  char v29 = a5 & 1;
  uint64_t v30 = a4;
  uint64_t v31 = a1;
  BOOL v32 = v23;
  specialized NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)((unint64_t)a1, 0, (void (*)(uint64_t *))partial apply for specialized closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:), v26, (void (*)(unint64_t))partial apply for specialized closure #2 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:), (uint64_t)v28);
  return swift_release();
}

{
  void *v5;
  void *v6;
  id v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unsigned __int8 v21;
  char v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void v28[3];
  char v29;
  uint64_t v30;
  void *v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t *v37;
  unsigned char v38[24];
  uint64_t v39;
  char v40;

  uint64_t v6 = v5;
  id v12 = objc_msgSend(a1, sel_viewControllers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (a3)
  {
    if (v13 >> 62) {
      goto LABEL_16;
    }
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      swift_bridgeObjectRelease();
      if (v14 != 1) {
        break;
      }
      uint64_t v15 = outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>(a2);
      uint64_t v16 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v15);
      if (v17)
      {
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>(a2);
        break;
      }
      uint64_t v18 = 0;
      char v19 = 0;
      while (1)
      {
        uint64_t v20 = v18 + 1;
        if (__OFADD__(v18, 1)) {
          break;
        }
        uint64_t v16 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(v16, v19 & 1);
        char v19 = v22 & 1;
        ++v18;
        if ((v22 & 1) != 0 && v21 >= 2u)
        {
          outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>(a2);
          BOOL v23 = v20 != 1;
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_16:
      swift_bridgeObjectRetain();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    BOOL v23 = 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    BOOL v23 = 0;
  }
LABEL_14:
  uint64_t v39 = 0;
  char v40 = 1;
  outlined init with copy of NavigationAuthority((uint64_t)v6 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v6) + 0x68), (uint64_t)v38);
  NavigationAuthority.controllerCache.getter();
  uint64_t v24 = outlined destroy of NavigationAuthority((uint64_t)v38);
  MEMORY[0x1F4188790](v24);
  uint64_t v33 = a2;
  uint64_t v34 = a4;
  uint64_t v35 = v6;
  uint64_t v36 = a1;
  uint64_t v37 = &v39;
  MEMORY[0x1F4188790](v25);
  v28[2] = v6;
  char v29 = a5 & 1;
  uint64_t v30 = a4;
  uint64_t v31 = a1;
  BOOL v32 = v23;
  specialized NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)((unint64_t)a1, 0, (void (*)(uint64_t *))partial apply for specialized closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:), v26, (void (*)(unint64_t))partial apply for specialized closure #2 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:), (uint64_t)v28);
  return swift_release();
}

id specialized NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)(unint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4, void (*a5)(unint64_t), uint64_t a6)
{
  uint64_t v108 = a6;
  uint64_t v109 = a5;
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v9 - 8);
  int v11 = (char *)v105 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (uint64_t)v105 - v13;
  MEMORY[0x1F4188790](v15);
  uint64_t v115 = (char *)v105 - v16;
  uint64_t v127 = 0;
  uint64_t v125 = v6;
  unint64_t v126 = MEMORY[0x1E4FBC860];
  swift_unknownObjectWeakInit();
  swift_retain();
  a3(&v125);
  unint64_t v17 = v126;
  if (v126 >> 62) {
    goto LABEL_107;
  }
  uint64_t v18 = *(void *)((v126 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  while (1)
  {
    unint64_t v112 = v17;
    if (!v18) {
      break;
    }
    unint64_t v119 = v17 & 0xC000000000000001;
    uint64_t v20 = 4;
    *(void *)&long long v19 = 138412290;
    long long v111 = v19;
    *(void *)&long long v19 = 138412546;
    long long v106 = v19;
    v105[1] = MEMORY[0x1E4FBC840] + 8;
    uint64_t v113 = v11;
    uint64_t v114 = v14;
    uint64_t v118 = v18;
    unint64_t v117 = a1;
    while (1)
    {
      id v27 = v119 ? (id)MEMORY[0x18C117680](v20 - 4, v17) : *(id *)(v17 + 8 * v20);
      uint64_t v28 = v27;
      uint64_t v25 = v20 - 3;
      if (__OFADD__(v20 - 4, 1)) {
        break;
      }
      id v29 = objc_msgSend(v27, sel_navigationController);
      uint64_t v30 = v29;
      if (v29)
      {
        if (a1)
        {
          if (v29 == (id)a1)
          {
            unint64_t v41 = v115;
            static Log.navigation.getter();
            uint64_t v42 = type metadata accessor for Logger();
            uint64_t v43 = *(void *)(v42 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42) != 1)
            {
              uint64_t v110 = v43;
              uint64_t v116 = v20 - 3;
              id v46 = (id)a1;
              id v47 = v28;
              id v48 = v46;
              id v49 = v47;
              unsigned int v50 = Logger.logObject.getter();
              os_log_type_t v51 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v50, v51))
              {
                uint64_t v52 = swift_slowAlloc();
                uint64_t v53 = (void *)swift_slowAlloc();
                uint64_t v107 = swift_slowAlloc();
                v121[0] = v107;
                *(_DWORD *)uint64_t v52 = v106;
                *(void *)(v52 + 4) = v49;
                *uint64_t v53 = v49;

                *(_WORD *)(v52 + 12) = 2080;
                unint64_t v128 = (unint64_t)v30;
                _sSo16UIViewControllerCSgMaTm_0(0, &lazy cache variable for type metadata for UINavigationController?, (unint64_t *)&lazy cache variable for type metadata for UINavigationController);
                id v48 = v48;
                uint64_t v54 = String.init<A>(describing:)();
                *(void *)(v52 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, v121);

                swift_bridgeObjectRelease();
                _os_log_impl(&dword_1872C6000, v50, v51, "[NavigationHostingControllerCache_UIKit] %@ containment skipped because sourceNavigationController and destination were equal %s", (uint8_t *)v52, 0x16u);
                _sSo16UIViewControllerCSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for NSObject?, (unint64_t *)&lazy cache variable for type metadata for NSObject);
                swift_arrayDestroy();
                MEMORY[0x18C119C60](v53, -1, -1);
                uint64_t v56 = v107;
                swift_arrayDestroy();
                MEMORY[0x18C119C60](v56, -1, -1);
                uint64_t v57 = v52;
                int v11 = v113;
                MEMORY[0x18C119C60](v57, -1, -1);
              }
              else
              {
              }
              unint64_t v17 = v112;
              uint64_t v14 = v114;
              uint64_t v26 = v118;
              (*(void (**)(char *, uint64_t))(v110 + 8))(v115, v42);
LABEL_36:
              uint64_t v25 = v116;
              goto LABEL_8;
            }

            uint64_t v37 = (uint64_t)v41;
            goto LABEL_27;
          }
          id v31 = (id)a1;
          id v32 = v30;
          objc_msgSend(v28, sel_willMoveToParentViewController_, 0);
          id result = objc_msgSend(v28, sel_view);
          if (!result)
          {
            __break(1u);
            return result;
          }
          uint64_t v34 = result;
          objc_msgSend(result, sel_removeFromSuperview);

          specialized mustRemove #1 <A>(_:from:) in NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)(v28, v32, (uint64_t)&v127);
          unint64_t v17 = v112;
          uint64_t v26 = v118;
          uint64_t v25 = v20 - 3;
          goto LABEL_7;
        }
      }
      else if (!a1)
      {
        static Log.navigation.getter();
        uint64_t v44 = type metadata accessor for Logger();
        uint64_t v45 = *(void *)(v44 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v11, 1, v44) != 1)
        {
          uint64_t v116 = v20 - 3;
          uint64_t v58 = v28;
          uint64_t v59 = Logger.logObject.getter();
          os_log_type_t v60 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v59, v60))
          {
            uint64_t v61 = swift_slowAlloc();
            uint64_t v62 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v61 = v111;
            *(void *)(v61 + 4) = v58;
            *uint64_t v62 = v58;
            _sSo16UIViewControllerCSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for NSObject?, (unint64_t *)&lazy cache variable for type metadata for NSObject);
            swift_arrayDestroy();
            unint64_t v63 = v62;
            uint64_t v14 = v114;
            MEMORY[0x18C119C60](v63, -1, -1);
            MEMORY[0x18C119C60](v61, -1, -1);
            unint64_t v64 = v59;
            uint64_t v59 = v58;
          }
          else
          {

            unint64_t v64 = v58;
          }
          unint64_t v17 = v112;

          (*(void (**)(char *, uint64_t))(v45 + 8))(v11, v44);
          uint64_t v26 = v118;
          goto LABEL_36;
        }

        uint64_t v37 = (uint64_t)v11;
        goto LABEL_27;
      }
      static Log.navigation.getter();
      uint64_t v35 = type metadata accessor for Logger();
      uint64_t v36 = *(void *)(v35 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v14, 1, v35) == 1)
      {

        uint64_t v37 = v14;
LABEL_27:
        outlined destroy of UINavigationPresentationAdaptor?(v37, (uint64_t (*)(void))type metadata accessor for Logger?);
        unint64_t v17 = v112;
        uint64_t v26 = v118;
        goto LABEL_8;
      }
      id v38 = v28;
      uint64_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v21 = swift_slowAlloc();
        char v22 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = v111;
        *(void *)(v21 + 4) = v38;
        void *v22 = v38;

        _os_log_impl(&dword_1872C6000, v39, v40, "[NavigationHostingControllerCache_UIKit] %@ containment skipped because sourceNavigationController or destination were nil", (uint8_t *)v21, 0xCu);
        _sSo16UIViewControllerCSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for NSObject?, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        swift_arrayDestroy();
        BOOL v23 = v22;
        int v11 = v113;
        MEMORY[0x18C119C60](v23, -1, -1);
        uint64_t v24 = v21;
        uint64_t v14 = v114;
        MEMORY[0x18C119C60](v24, -1, -1);
      }
      else
      {
      }
      uint64_t v25 = v20 - 3;

      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v14, v35);
      unint64_t v17 = v112;
      uint64_t v26 = v118;
LABEL_7:
      a1 = v117;
LABEL_8:
      ++v20;
      if (v25 == v26) {
        goto LABEL_37;
      }
    }
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    swift_bridgeObjectRetain_n();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_37:
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (!v127) {
    goto LABEL_94;
  }
  unint64_t v65 = a1;
  uint64_t v66 = *(void *)(v127 + 64);
  uint64_t v110 = v127 + 64;
  uint64_t v67 = 1 << *(unsigned char *)(v127 + 32);
  if (v67 < 64) {
    uint64_t v68 = ~(-1 << v67);
  }
  else {
    uint64_t v68 = -1;
  }
  a1 = v68 & v66;
  *(void *)&long long v111 = (unint64_t)(v67 + 63) >> 6;
  uint64_t v69 = swift_bridgeObjectRetain();
  unint64_t v70 = 0;
  uint64_t v71 = 0;
  unint64_t v119 = MEMORY[0x1E4FBC838] + 8;
  uint64_t v113 = (char *)v69;
  while (2)
  {
    if (a1)
    {
      uint64_t v116 = (a1 - 1) & a1;
      unint64_t v117 = v70;
      unint64_t v72 = __clz(__rbit64(a1)) | (v70 << 6);
      goto LABEL_58;
    }
    BOOL v73 = __OFADD__(v70, 1);
    uint64_t v74 = v70 + 1;
    if (v73) {
      goto LABEL_105;
    }
    a1 = v65;
    if (v74 >= (uint64_t)v111) {
      goto LABEL_93;
    }
    unint64_t v75 = *(void *)(v110 + 8 * v74);
    if (v75)
    {
LABEL_57:
      uint64_t v116 = (v75 - 1) & v75;
      unint64_t v117 = v74;
      unint64_t v72 = __clz(__rbit64(v75)) + (v74 << 6);
LABEL_58:
      uint64_t v77 = 8 * v72;
      unint64_t v78 = *(void *)(*(void *)(v69 + 56) + v77);
      uint64_t v14 = (uint64_t)*(id *)(*(void *)(v69 + 48) + v77);
      swift_bridgeObjectRetain();
      id v79 = objc_msgSend((id)v14, sel_viewControllers);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
      unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      swift_bridgeObjectRetain();
      specialized _ArrayProtocol.filter(_:)(v17, v78);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend((id)v14, sel_setViewControllers_, isa);

      uint64_t v118 = v71;
      uint64_t v115 = (char *)v14;
      if ((v78 & 0xC000000000000001) != 0)
      {
        __CocoaSet.makeIterator()();
        type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
        lazy protocol witness table accessor for type NavigationStackHostingController<AnyView> and conformance NSObject();
        Set.Iterator.init(_cocoa:)();
        unint64_t v78 = v128;
        unint64_t v81 = v129;
        uint64_t v82 = v130;
        uint64_t v83 = v131;
        a1 = v132;
      }
      else
      {
        uint64_t v83 = 0;
        uint64_t v84 = -1 << *(unsigned char *)(v78 + 32);
        unint64_t v81 = v78 + 56;
        uint64_t v82 = ~v84;
        uint64_t v85 = -v84;
        if (v85 < 64) {
          uint64_t v86 = ~(-1 << v85);
        }
        else {
          uint64_t v86 = -1;
        }
        a1 = v86 & *(void *)(v78 + 56);
      }
      uint64_t v114 = v82;
      int64_t v87 = (unint64_t)(v82 + 64) >> 6;
      if ((v78 & 0x8000000000000000) == 0) {
        goto LABEL_68;
      }
LABEL_65:
      uint64_t v88 = __CocoaSet.Iterator.next()();
      if (!v88) {
        goto LABEL_42;
      }
      uint64_t v120 = v88;
      type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      unint64_t v17 = v121[0];
      swift_unknownObjectRelease();
      uint64_t v14 = v83;
      int v11 = (char *)a1;
      if (!v17)
      {
LABEL_42:
        outlined consume of Set<UIPress>.Iterator._Variant();

        uint64_t v69 = (uint64_t)v113;
        uint64_t v71 = v118;
        unint64_t v70 = v117;
        a1 = v116;
        continue;
      }
      while (1)
      {
        objc_msgSend((id)v17, sel_removeFromParentViewController);
        objc_msgSend((id)v17, sel_willMoveToParentViewController_, v65);

        uint64_t v83 = v14;
        a1 = (unint64_t)v11;
        if ((v78 & 0x8000000000000000) != 0) {
          goto LABEL_65;
        }
LABEL_68:
        if (a1)
        {
          int v11 = (char *)((a1 - 1) & a1);
          unint64_t v89 = __clz(__rbit64(a1)) | (v83 << 6);
          uint64_t v14 = v83;
        }
        else
        {
          int64_t v90 = v83 + 1;
          if (__OFADD__(v83, 1))
          {
            __break(1u);
            goto LABEL_104;
          }
          if (v90 >= v87) {
            goto LABEL_42;
          }
          unint64_t v91 = *(void *)(v81 + 8 * v90);
          uint64_t v14 = v83 + 1;
          if (!v91)
          {
            uint64_t v14 = v83 + 2;
            if (v83 + 2 >= v87) {
              goto LABEL_42;
            }
            unint64_t v91 = *(void *)(v81 + 8 * v14);
            if (!v91)
            {
              uint64_t v14 = v83 + 3;
              if (v83 + 3 >= v87) {
                goto LABEL_42;
              }
              unint64_t v91 = *(void *)(v81 + 8 * v14);
              if (!v91)
              {
                uint64_t v14 = v83 + 4;
                if (v83 + 4 >= v87) {
                  goto LABEL_42;
                }
                unint64_t v91 = *(void *)(v81 + 8 * v14);
                if (!v91)
                {
                  uint64_t v14 = v83 + 5;
                  if (v83 + 5 >= v87) {
                    goto LABEL_42;
                  }
                  unint64_t v91 = *(void *)(v81 + 8 * v14);
                  if (!v91)
                  {
                    uint64_t v92 = v83 + 6;
                    while (v87 != v92)
                    {
                      unint64_t v91 = *(void *)(v81 + 8 * v92++);
                      if (v91)
                      {
                        uint64_t v14 = v92 - 1;
                        goto LABEL_85;
                      }
                    }
                    goto LABEL_42;
                  }
                }
              }
            }
          }
LABEL_85:
          int v11 = (char *)((v91 - 1) & v91);
          unint64_t v89 = __clz(__rbit64(v91)) + (v14 << 6);
        }
        unint64_t v17 = (unint64_t)*(id *)(*(void *)(v78 + 48) + 8 * v89);
        if (!v17) {
          goto LABEL_42;
        }
      }
    }
    break;
  }
  uint64_t v76 = v74 + 1;
  if (v74 + 1 >= (uint64_t)v111) {
    goto LABEL_93;
  }
  unint64_t v75 = *(void *)(v110 + 8 * v76);
  if (v75) {
    goto LABEL_56;
  }
  uint64_t v76 = v74 + 2;
  if (v74 + 2 >= (uint64_t)v111) {
    goto LABEL_93;
  }
  unint64_t v75 = *(void *)(v110 + 8 * v76);
  if (v75) {
    goto LABEL_56;
  }
  uint64_t v76 = v74 + 3;
  if (v74 + 3 >= (uint64_t)v111) {
    goto LABEL_93;
  }
  unint64_t v75 = *(void *)(v110 + 8 * v76);
  if (v75) {
    goto LABEL_56;
  }
  uint64_t v76 = v74 + 4;
  if (v74 + 4 >= (uint64_t)v111) {
    goto LABEL_93;
  }
  unint64_t v75 = *(void *)(v110 + 8 * v76);
  if (v75)
  {
LABEL_56:
    uint64_t v74 = v76;
    goto LABEL_57;
  }
  while (1)
  {
    uint64_t v74 = v76 + 1;
    if (__OFADD__(v76, 1)) {
      goto LABEL_106;
    }
    if (v74 >= (uint64_t)v111) {
      break;
    }
    unint64_t v75 = *(void *)(v110 + 8 * v74);
    ++v76;
    if (v75) {
      goto LABEL_57;
    }
  }
LABEL_93:
  swift_release();
  unint64_t v17 = v112;
LABEL_94:
  v109(v17);
  swift_bridgeObjectRelease();
  if (v127)
  {
    uint64_t v93 = -1 << *(unsigned char *)(v127 + 32);
    uint64_t v94 = ~v93;
    uint64_t v95 = *(void *)(v127 + 64);
    uint64_t v96 = -v93;
    v121[0] = v127;
    v121[1] = v127 + 64;
    if (v96 < 64) {
      uint64_t v97 = ~(-1 << v96);
    }
    else {
      uint64_t v97 = -1;
    }
    v121[2] = v94;
    v121[3] = 0;
    v121[4] = v97 & v95;
    v121[5] = (uint64_t)closure #2 in NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:);
    v121[6] = 0;
    unint64_t v122 = 0xF000000000000007;
    long long v123 = 0u;
    long long v124 = 0u;
    specialized FlattenSequence.Iterator.next()();
    if (v98)
    {
      uint64_t v99 = v98;
      uint64_t v100 = MEMORY[0x1E4F41618];
      uint64_t v101 = MEMORY[0x1E4F41610];
      do
      {
        objc_msgSend(v99, sel_didMoveToParentViewController_, a1);
        id v102 = *(id *)&v99[direct field offset for UIHostingController.host];
        static ViewRendererHostProperties.all.getter();
        type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, v100, v101, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
        lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
        ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

        specialized FlattenSequence.Iterator.next()();
        uint64_t v99 = v103;
      }
      while (v103);
    }
    uint64_t v104 = v122;
    outlined consume of Set<UIPress>.Iterator._Variant();
    swift_release();
    outlined consume of Set<NavigationStackHostingController<AnyView>>.Iterator?(v104);
  }
  return (id)outlined destroy of NavigationHostingControllerCache_UIKit.Source((uint64_t)&v125);
}

uint64_t specialized UIHostingController.prepareNavigationBar(in:navigationController:isRoot:)(uint64_t a1, uint64_t a2, UINavigationController *a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = a2;
  uint64_t v9 = a1;
  uint64_t v10 = *(void *)&v4[direct field offset for UIHostingController.toolbarBridge];
  if (!v10) {
    goto LABEL_6;
  }
  uint64_t v11 = *(void *)(v10 + direct field offset for ToolbarBridge.navigationAdaptor);
  uint64_t v12 = *(void *)(v11 + 16);
  if (!v12) {
    goto LABEL_6;
  }
  uint64_t v13 = v11 + 32;
  swift_bridgeObjectRetain();
  char v14 = 0;
  do
  {
    outlined init with copy of UINavigationItemAdaptorStorage.Adaptor(v13, (uint64_t)&aBlock);
    outlined init with copy of TableColumnList((uint64_t)&aBlock, (uint64_t)&v29);
    outlined destroy of UINavigationItemAdaptorStorage.Adaptor((uint64_t)&aBlock);
    uint64_t v15 = v31;
    uint64_t v16 = v32;
    __swift_project_boxed_opaque_existential_1(&v29, v31);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v16 + 8))(&v40, v15, v16);
    v14 |= v40;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v29);
    v13 += 48;
    --v12;
  }
  while (v12);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v9 = a1;
  uint64_t v8 = a2;
  if ((v14 & 2) == 0)
  {
LABEL_6:
    char v18 = ~a4;
    id v19 = [(UINavigationController *)a3 splitViewController];
    long long aBlock = xmmword_18834C6B0;
    uint64_t v35 = 0;
    LOBYTE(v36) = 0;
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakInit();

    BOOL v39 = (a4 & 1) == 0;
    uint64_t v20 = (uint64_t)v5 + direct field offset for UIHostingController.overrides;
    swift_beginAccess();
    outlined assign with take of HostingControllerOverrides((uint64_t)&aBlock, v20);
    swift_endAccess();
    if (v18)
    {
      specialized UIHostingController.resolveRequiredBridges(in:allowedActions:)(1, 0, 3uLL);
      specialized UIHostingController.updateIncomingBoundsIfNeeded(navigationController:)(a3);
      uint64_t v21 = self;
      uint64_t v22 = swift_allocObject();
      *(void *)(v22 + 16) = v5;
      uint64_t v23 = swift_allocObject();
      *(void *)(v23 + 16) = partial apply for specialized closure #1 in UIHostingController.performRender();
      *(void *)(v23 + 24) = v22;
      uint64_t v37 = partial apply for thunk for @callee_guaranteed () -> ();
      uint64_t v38 = v23;
      *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
      *((void *)&aBlock + 1) = 1107296256;
      uint64_t v35 = thunk for @escaping @callee_guaranteed () -> ();
      uint64_t v36 = &block_descriptor_58;
      uint64_t v24 = _Block_copy(&aBlock);
      id v25 = v5;
      swift_retain();
      swift_release();
      objc_msgSend(v21, sel_performWithoutAnimation_, v24);
      _Block_release(v24);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      uint64_t result = swift_release();
      if (isEscapingClosureAtFileLocation)
      {
        __break(1u);
        return result;
      }
    }
    else
    {
      specialized UIHostingController.promoteTitle(in:)(v9, v8);
    }
    long long v29 = xmmword_18834C6B0;
    uint64_t v30 = 0;
    LOBYTE(v31) = 0;
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakInit();
    char v33 = 2;
    outlined init with take of HostingControllerOverrides((uint64_t)&v29, (uint64_t)&aBlock);
    swift_beginAccess();
    outlined assign with take of HostingControllerOverrides((uint64_t)&aBlock, v20);
    return swift_endAccess();
  }
  return result;
}

void @objc UIHostingController.didMove(toParent:)(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = a1;
  UIHostingController.willMove(toParent:)((uint64_t)a3, (SEL *)&selRef_didMoveToParentViewController_, (uint64_t (*)(uint64_t))UIHostingController._didMove(toParent:));
}

void @objc UIHostingController.willMove(toParent:)(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = a1;
  UIHostingController.willMove(toParent:)((uint64_t)a3, (SEL *)&selRef_willMoveToParentViewController_, (uint64_t (*)(uint64_t))UIHostingController._willMove(toParent:));
}

uint64_t UIHostingController.willMove(toParent:)(uint64_t a1, SEL *a2, uint64_t (*a3)(uint64_t))
{
  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for UIHostingController();
  objc_msgSendSuper2(&v8, *a2, a1);
  return a3(a1);
}

Swift::Void __swiftcall UIHostingController._willMove(toParent:)(UIViewController_optional *toParent)
{
  if (toParent)
  {
    long long v4 = xmmword_18834C6B0;
    uint64_t v5 = 0;
    char v6 = 0;
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakInit();
    char v7 = 2;
    outlined init with take of HostingControllerOverrides((uint64_t)&v4, (uint64_t)&v8);
  }
  else
  {
    id v2 = objc_msgSend(v1, sel_navigationController);
    id v3 = objc_msgSend(v1, sel_splitViewController);
    long long v8 = xmmword_18834C6B0;
    uint64_t v9 = 0;
    char v10 = 0;
    swift_unknownObjectWeakInit();

    swift_unknownObjectWeakInit();
    char v11 = 2;
  }
  UIHostingController.overrides.setter((uint64_t)&v8);
}

uint64_t UIHostingController.overrides.setter(uint64_t a1)
{
  uint64_t v3 = v1 + direct field offset for UIHostingController.overrides;
  swift_beginAccess();
  outlined assign with take of HostingControllerOverrides(a1, v3);
  return swift_endAccess();
}

uint64_t outlined assign with take of HostingControllerOverrides(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t assignWithTake for HostingControllerOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8) == 2)
  {
    if (v4 != 2)
    {
      swift_unknownObjectWeakTakeInit();
LABEL_8:
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      goto LABEL_9;
    }
  }
  else
  {
    if (v4 != 2)
    {
      swift_unknownObjectWeakTakeAssign();
      goto LABEL_8;
    }
    outlined destroy of PushTarget(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
LABEL_9:
  swift_unknownObjectWeakTakeAssign();
  swift_unknownObjectWeakTakeAssign();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

Swift::Void __swiftcall UIHostingController._didMove(toParent:)(UIViewController_optional *toParent)
{
  long long v2 = xmmword_18834FC50;
  if (toParent) {
    char v1 = 1;
  }
  else {
    char v1 = 2;
  }
  UIHostingController.resolveRequiredBridges(in:allowedActions:)((uint64_t *)&v2, v1);
}

void specialized UIHostingController.promoteTitle(in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v38 = a2;
  uint64_t v34 = (void *)type metadata accessor for Locale();
  uint64_t v36 = *(v34 - 1);
  MEMORY[0x1F4188790](v34);
  uint64_t v35 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v39 = v2;
  uint64_t v5 = *(void **)&v2[direct field offset for UIHostingController.host];
  _s7SwiftUI14_UIHostingViewCyAA03AnyD0VGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<AnyView> and conformance _UIHostingView<A>, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  id v6 = v5;
  ViewRendererHost.preferenceValue<A>(_:)();

  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = v46;
  uint64_t v10 = v47;
  uint64_t v11 = v48;
  unint64_t v12 = v49;
  uint64_t v14 = v50;
  uint64_t v13 = v51;
  uint64_t v41 = v52;
  int v40 = v53;
  if (v49 >= 2)
  {
    uint64_t v46 = a1;
    uint64_t v47 = v38;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v43 = 0;
    outlined copy of Text?(v9, v10, v48, v49);
    outlined copy of Transaction?(v14);
    swift_retain();
    char v42 = v11 & 1;
    uint64_t v7 = Text.resolveString(in:with:idiom:)();
    uint64_t v8 = v15;
    outlined consume of NavigationTitleStorage?(v9, v10, v11, v12, v14);
  }
  uint64_t v37 = v13;
  id v16 = objc_msgSend(v39, sel_navigationItem);
  if (v8)
  {
    unint64_t v17 = (void *)MEMORY[0x18C115780](v7, v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v17 = 0;
  }
  objc_msgSend(v16, sel_setTitle_, v17);

  uint64_t v18 = v38;
  uint64_t v46 = a1;
  uint64_t v47 = v38;
  if (EnvironmentValues.accessibilityEnabled.getter())
  {
    uint64_t v33 = v14;
    uint64_t v32 = v11;
    if (v12 >= 2)
    {
      uint64_t v46 = a1;
      uint64_t v47 = v18;
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      outlined copy of NavigationTitleStorage?(v9, v10, v11, v12, v14);
      outlined copy of Text?(v9, v10, v11, v12);
      LOBYTE(v43) = v11 & 1;
      id v19 = (void *)static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)();
      outlined consume of Text.Storage(v9, v10, v11 & 1);
      swift_bridgeObjectRelease();
      outlined consume of NavigationTitleStorage?(v9, v10, v11, v12, v14);
    }
    else
    {
      id v19 = 0;
    }
    uint64_t v20 = v34;
    id v21 = v39;
    id v22 = objc_msgSend(v39, sel_navigationItem);
    uint64_t v34 = v19;
    objc_msgSend(v22, sel_setAccessibilityAttributedLabel_, v19);

    uint64_t v46 = a1;
    uint64_t v47 = v18;
    uint64_t v23 = v35;
    EnvironmentValues.locale.getter();
    uint64_t v24 = Locale.bcp47LanguageCode.getter();
    uint64_t v26 = v25;
    (*(void (**)(char *, void *))(v36 + 8))(v23, v20);
    id v27 = objc_msgSend(v21, sel_navigationItem);
    if (v26)
    {
      uint64_t v28 = (void *)MEMORY[0x18C115780](v24, v26);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = 0;
    }
    uint64_t v29 = v33;
    char v30 = v32;
    objc_msgSend(v27, sel_setAccessibilityLanguage_, v28);
    outlined consume of NavigationTitleStorage?(v9, v10, v30, v12, v29);
  }
  else
  {
    outlined consume of NavigationTitleStorage?(v9, v10, v11, v12, v14);
  }
}

uint64_t lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void, uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI14_UIHostingViewCyAA03AnyD0VGMaTm_0(255, a2, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void specialized FlattenSequence.Iterator.next()()
{
  char v1 = v0;
  uint64_t v2 = v0[7];
  while (1)
  {
    if ((~v2 & 0xF000000000000007) == 0) {
      goto LABEL_16;
    }
    if ((v2 & 0x8000000000000000) == 0) {
      break;
    }
    if (__CocoaSet.Iterator.next()())
    {
      _s7SwiftUI14_UIHostingViewCyAA03AnyD0VGMaTm_0(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      if (v23) {
        return;
      }
    }
LABEL_16:
    uint64_t v16 = specialized LazyMapSequence.Iterator.next()();
    uint64_t v2 = v16;
    if (!v16) {
      return;
    }
    if ((v16 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      __CocoaSet.makeIterator()();
      _s7SwiftUI14_UIHostingViewCyAA03AnyD0VGMaTm_0(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
      lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type NavigationStackHostingController<AnyView> and conformance NSObject, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
      Set.Iterator.init(_cocoa:)();
      uint64_t v4 = v25;
      uint64_t v6 = v26;
      uint64_t v3 = v27;
      uint64_t v9 = v28;
      swift_bridgeObjectRelease();
      uint64_t v2 = v24;
    }
    else
    {
      uint64_t v3 = 0;
      uint64_t v4 = v16 + 56;
      uint64_t v5 = -1 << *(unsigned char *)(v16 + 32);
      uint64_t v6 = ~v5;
      uint64_t v7 = -v5;
      if (v7 < 64) {
        uint64_t v8 = ~(-1 << v7);
      }
      else {
        uint64_t v8 = -1;
      }
      uint64_t v9 = v8 & *(void *)(v16 + 56);
    }
    outlined consume of Set<NavigationStackHostingController<AnyView>>.Iterator?(v1[7]);
    v1[7] = v2;
    unsigned char v1[8] = v4;
    v1[9] = v6;
    v1[10] = v3;
    v1[11] = v9;
  }
  uint64_t v11 = v1[10];
  unint64_t v10 = v1[11];
  if (v10)
  {
    uint64_t v12 = (v10 - 1) & v10;
    unint64_t v13 = __clz(__rbit64(v10)) | (v11 << 6);
LABEL_11:
    uint64_t v14 = *(void **)(*(void *)(v2 + 48) + 8 * v13);
    id v15 = v14;
    goto LABEL_12;
  }
  int64_t v17 = v11 + 1;
  if (!__OFADD__(v11, 1))
  {
    int64_t v18 = (unint64_t)(v1[9] + 64) >> 6;
    if (v17 >= v18)
    {
      uint64_t v14 = 0;
      uint64_t v12 = 0;
      goto LABEL_12;
    }
    uint64_t v19 = v1[8];
    unint64_t v20 = *(void *)(v19 + 8 * v17);
    if (v20)
    {
LABEL_22:
      uint64_t v12 = (v20 - 1) & v20;
      unint64_t v13 = __clz(__rbit64(v20)) + (v17 << 6);
      uint64_t v11 = v17;
      goto LABEL_11;
    }
    int64_t v21 = v11 + 2;
    if (v11 + 2 >= v18) {
      goto LABEL_38;
    }
    unint64_t v20 = *(void *)(v19 + 8 * v21);
    if (v20)
    {
LABEL_26:
      int64_t v17 = v21;
      goto LABEL_22;
    }
    if (v11 + 3 < v18)
    {
      unint64_t v20 = *(void *)(v19 + 8 * (v11 + 3));
      if (v20)
      {
        int64_t v17 = v11 + 3;
        goto LABEL_22;
      }
      int64_t v21 = v11 + 4;
      if (v11 + 4 >= v18)
      {
        uint64_t v14 = 0;
        uint64_t v12 = 0;
        v11 += 3;
LABEL_12:
        v1[10] = v11;
        v1[11] = v12;
        if (v14) {
          return;
        }
        goto LABEL_16;
      }
      unint64_t v20 = *(void *)(v19 + 8 * v21);
      if (v20) {
        goto LABEL_26;
      }
      int64_t v17 = v11 + 5;
      if (v11 + 5 < v18)
      {
        unint64_t v20 = *(void *)(v19 + 8 * v17);
        if (v20) {
          goto LABEL_22;
        }
        int64_t v17 = v18 - 1;
        uint64_t v22 = v11 + 6;
        while (v18 != v22)
        {
          unint64_t v20 = *(void *)(v19 + 8 * v22++);
          if (v20)
          {
            int64_t v17 = v22 - 1;
            goto LABEL_22;
          }
        }
LABEL_38:
        uint64_t v14 = 0;
        uint64_t v12 = 0;
        uint64_t v11 = v17;
        goto LABEL_12;
      }
    }
    uint64_t v14 = 0;
    uint64_t v12 = 0;
    uint64_t v11 = v21;
    goto LABEL_12;
  }
  __break(1u);
}

uint64_t outlined consume of Set<NavigationStackHostingController<AnyView>>.Iterator?(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0) {
    return outlined consume of Set<UIPress>.Iterator._Variant();
  }
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, unint64_t a2)
{
  unint64_t v2 = a1;
  uint64_t v34 = MEMORY[0x1E4FBC860];
  if (a1 >> 62) {
    goto LABEL_27;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      unint64_t v26 = v2;
      unint64_t v4 = 0;
      unint64_t v5 = v2 & 0xC000000000000001;
      uint64_t v6 = v2 & 0xFFFFFFFFFFFFFF8;
      unint64_t v33 = v2 + 32;
      unint64_t v2 = a2;
      unint64_t v31 = a2 + 56;
      unint64_t v28 = v5;
      uint64_t v29 = v3;
      uint64_t v27 = v6;
      while (v5)
      {
        id v7 = (id)MEMORY[0x18C117680](v4, v26);
LABEL_10:
        uint64_t v8 = v7;
        if (__OFADD__(v4++, 1)) {
          goto LABEL_26;
        }
        _s7SwiftUI14_UIHostingViewCyAA03AnyD0VGMaTm_0(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
        if (swift_dynamicCastClass())
        {
          if ((a2 & 0xC000000000000001) != 0)
          {
            id v10 = v8;
            char v11 = __CocoaSet.contains(_:)();

            if (v11)
            {

              goto LABEL_6;
            }
          }
          else if (*(void *)(a2 + 16))
          {
            Swift::Int v12 = *(void *)(a2 + 40);
            id v30 = v8;
            Swift::Int v13 = NSObject._rawHashValue(seed:)(v12);
            uint64_t v14 = -1 << *(unsigned char *)(a2 + 32);
            unint64_t v15 = v13 & ~v14;
            if ((*(void *)(v31 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
            {
              id v16 = *(id *)(*(void *)(a2 + 48) + 8 * v15);
              char v17 = static NSObject.== infix(_:_:)();

              if (v17)
              {
LABEL_18:

                unint64_t v5 = v28;
                uint64_t v3 = v29;
                uint64_t v6 = v27;
                goto LABEL_6;
              }
              uint64_t v18 = ~v14;
              for (unint64_t i = v15 + 1; ; unint64_t i = v20 + 1)
              {
                uint64_t v20 = i & v18;
                if (((*(void *)(v31 + (((i & v18) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v18)) & 1) == 0) {
                  break;
                }
                id v21 = *(id *)(*(void *)(a2 + 48) + 8 * v20);
                char v22 = static NSObject.== infix(_:_:)();

                if (v22) {
                  goto LABEL_18;
                }
              }
            }

            unint64_t v5 = v28;
            uint64_t v3 = v29;
            uint64_t v6 = v27;
          }
        }
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
LABEL_6:
        if (v4 == v3) {
          return v34;
        }
      }
      if (v4 < *(void *)(v6 + 16)) {
        break;
      }
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      unint64_t v24 = v2;
      uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
      unint64_t v2 = v24;
      uint64_t v3 = v25;
      if (!v25) {
        return MEMORY[0x1E4FBC860];
      }
    }
    id v7 = *(id *)(v33 + 8 * v4);
    goto LABEL_10;
  }
  return MEMORY[0x1E4FBC860];
}

uint64_t closure #2 in NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

void partial apply for specialized closure #2 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(int64_t a1)
{
  specialized closure #2 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(a1, *(void **)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(void *)(v1 + 32), *(UINavigationController **)(v1 + 40), *(unsigned char *)(v1 + 48));
}

{
  partial apply for specialized closure #2 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(a1);
}

{
  partial apply for specialized closure #2 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(a1);
}

void specialized closure #2 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(int64_t a1, void *a2, unint64_t a3, uint64_t a4, UINavigationController *a5, char a6)
{
  unint64_t v85 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62) {
    goto LABEL_102;
  }
  uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    Swift::Int v12 = (void *)MEMORY[0x1E4FBC8C8];
    if (v11)
    {
      unint64_t v8 = a1 & 0xC000000000000001;
      if ((a1 & 0xC000000000000001) == 0)
      {
        if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_109:
          __break(1u);
LABEL_110:
          id v34 = (id)MEMORY[0x18C117680](0, a1);
          goto LABEL_39;
        }
        id v13 = *(id *)(a1 + 32);
LABEL_7:
        uint64_t v14 = v13;
        swift_bridgeObjectRelease();
        unint64_t v7 = v14;
        uint64_t v6 = (uint64_t)a2;
        specialized NavigationStackCoordinator.configureAsRoot(_:transparentBackground:)((void *)v7, a3 & 1);

        if (v11 >= 1)
        {
          swift_bridgeObjectRetain();
          uint64_t v15 = 0;
          while (1)
          {
            if (v8) {
              id v16 = (char *)MEMORY[0x18C117680](v15, a1);
            }
            else {
              id v16 = (char *)*(id *)(a1 + 8 * v15 + 32);
            }
            char v17 = v16;
            uint64_t v18 = direct field offset for UIHostingController.host;
            id v19 = objc_msgSend(*(id *)&v16[direct field offset for UIHostingController.host], sel_window, v77);
            if (v19)
            {

              uint64_t v20 = *(void **)&v17[v18];
              uint64_t v21 = *(void *)((char *)v20 + *(void *)((*v12 & *v20) + 0x68));
              uint64_t v22 = *(void *)(v21 + 136);
              *(_OWORD *)(v21 + 136) = xmmword_18834FC50;
              uint64_t v23 = v20;
              outlined consume of EnvironmentValues?(v22);
              if (MEMORY[0x18C119DF0](v21 + 24))
              {
                swift_getObjectType();
                LOWORD(v91) = 2;
                ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

                swift_unknownObjectRelease();
              }
              else
              {
              }
              goto LABEL_10;
            }
            unint64_t v24 = *(id *)&v17[v18];
            id v25 = objc_msgSend(v17, sel_traitCollection);
            uint64_t v26 = *(void *)((char *)v24 + *(void *)((*v12 & *v24) + 0x68));
            id v27 = *(id *)(v26 + 168);
            *(void *)(v26 + 168) = v25;
            id v28 = v25;
            uint64_t v29 = v28;
            if (v27)
            {
              if (v28 && v28 == v27)
              {
LABEL_24:

LABEL_26:
                goto LABEL_27;
              }
            }
            else if (!v28)
            {

              goto LABEL_26;
            }
            if (!MEMORY[0x18C119DF0](v26 + 24)) {
              goto LABEL_24;
            }
            swift_getObjectType();
            LOWORD(v91) = 2;
            ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

            swift_unknownObjectRelease();
LABEL_27:
            Swift::Int v12 = (void *)MEMORY[0x1E4FBC8C8];
LABEL_10:
            if (v11 == ++v15) {
              goto LABEL_28;
            }
          }
        }
        goto LABEL_109;
      }
LABEL_107:
      id v13 = (id)MEMORY[0x18C117680](0, a1);
      goto LABEL_7;
    }
LABEL_28:
    swift_bridgeObjectRelease();
    if (v85)
    {
      swift_bridgeObjectRetain();
      a3 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      a3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    if (__OFSUB__(a3, 1))
    {
      __break(1u);
      goto LABEL_107;
    }
    unint64_t v78 = a3;
    uint64_t v79 = v11;
    specialized BidirectionalCollection.suffix(_:)(a3 - 1, a1);
    uint64_t v6 = v30;
    a3 = v31;
    unint64_t v7 = (unint64_t)v32;
    swift_bridgeObjectRelease();
    char v95 = 0;
    if (v85)
    {
      swift_bridgeObjectRetain();
      if (!_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_41;
      }
    }
    else
    {
      uint64_t v33 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v33) {
        goto LABEL_41;
      }
    }
    unint64_t v83 = a1 & 0xC000000000000001;
    if ((a1 & 0xC000000000000001) != 0) {
      goto LABEL_110;
    }
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      swift_bridgeObjectRetain();
      id v37 = (id)MEMORY[0x18C117680](a3, a1);
      swift_bridgeObjectRelease();
LABEL_47:
      uint64_t v38 = (char *)a2 + *(void *)((*v12 & *a2) + 0x70);
      swift_beginAccess();
      if (!*((void *)v38 + 2)) {
        goto LABEL_117;
      }
      uint64_t v39 = *((void *)v38 + 1);
      swift_retain();
      uint64_t v40 = swift_retain();
      specialized UIHostingController.prepareNavigationBar(in:navigationController:isRoot:)(v40, v39, a5, v78 == 1);
      swift_release();
      swift_release();

      goto LABEL_49;
    }
    id v34 = *(id *)(a1 + 32);
LABEL_39:
    uint64_t v35 = v34;
    int64_t v36 = v7 >> 1;
    uint64_t v82 = (void *)((v7 >> 1) - a3);
    if (v7 >> 1 == a3) {
      break;
    }
    unint64_t v7 = 0;
    if (a1 < 0) {
      uint64_t v49 = a1;
    }
    else {
      uint64_t v49 = a1 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t v77 = v49;
    unint64_t v50 = v6 + 8 * a3;
    while ((uint64_t)(a3 + v7) < v36)
    {
      id v51 = *(id *)(v50 + 8 * v7);
      id v52 = [(UINavigationController *)a5 splitViewController];
      long long v91 = xmmword_18834C6B0;
      uint64_t v92 = 0;
      char v93 = 0;
      swift_unknownObjectWeakInit();
      swift_unknownObjectWeakInit();

      char v94 = 2;
      unint64_t v8 = (unint64_t)v51 + direct field offset for UIHostingController.overrides;
      swift_beginAccess();
      outlined assign with take of HostingControllerOverrides((uint64_t)&v91, v8);
      swift_endAccess();
      specialized UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)(v35, 0);
      long long v87 = xmmword_18834C6B0;
      uint64_t v88 = 0;
      char v89 = 0;
      swift_unknownObjectWeakInit();
      swift_unknownObjectWeakInit();
      char v90 = 2;
      outlined init with take of HostingControllerOverrides((uint64_t)&v87, (uint64_t)&v91);
      swift_beginAccess();
      outlined assign with take of HostingControllerOverrides((uint64_t)&v91, v8);
      swift_endAccess();

      if (v95) {
        goto LABEL_41;
      }
      if (v85)
      {
        swift_bridgeObjectRetain();
        uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v53 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      uint64_t v54 = (char *)(v7 + 1);
      if (v7 + 1 == v53) {
        goto LABEL_41;
      }
      if (v83)
      {
        id v55 = (id)MEMORY[0x18C117680](v7 + 1, a1);
      }
      else
      {
        if ((unint64_t)v54 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_100;
        }
        id v55 = *(id *)(a1 + 8 * v7 + 40);
      }
      uint64_t v35 = v55;
      if (__OFADD__(v54, 1)) {
        goto LABEL_101;
      }
      if (v82 == (void *)++v7) {
        goto LABEL_40;
      }
    }
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    if (a1 < 0) {
      uint64_t v6 = a1;
    }
    else {
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_40:

LABEL_41:
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  Swift::Int v12 = (void *)MEMORY[0x1E4FBC8C8];
  if (!v79)
  {
LABEL_49:
    if (v85)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
      swift_bridgeObjectRetain();
      _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [(UINavigationController *)a5 setViewControllers:isa animated:a6 & 1];

    if ((a6 & 1) == 0)
    {
      static Semantics.v6.getter();
      if (isLinkedOnOrAfter(_:)())
      {
        swift_bridgeObjectRetain();
        specialized Collection.dropLast(_:)(1, a1);
        uint64_t v43 = v42;
        uint64_t v45 = v44;
        unint64_t v47 = v46;
        swift_bridgeObjectRelease();
        unint64_t v48 = (v47 >> 1) - v45;
        if (v47 >> 1 != v45)
        {
          if ((uint64_t)(v47 >> 1) <= v45) {
            goto LABEL_116;
          }
          uint64_t v56 = (void **)(v43 + 8 * v45);
          uint64_t v86 = MEMORY[0x1E4FBC848] + 8;
          do
          {
            uint64_t v57 = *v56;
            uint64_t v58 = *(void **)((char *)*v56 + direct field offset for UIHostingController.host);
            uint64_t v59 = *(void *)((char *)v58 + *(void *)((*v12 & *v58) + 0x68));
            uint64_t v60 = MEMORY[0x18C119DF0](v59 + 16);
            if (v60)
            {
              uint64_t v61 = (void *)v60;
              id v62 = v57;
              unint64_t v63 = v58;
              swift_retain();
            }
            else
            {
              swift_unknownObjectWeakAssign();
              id v64 = v57;
              unint64_t v65 = v58;
              swift_retain();
            }
            if (MEMORY[0x18C119DF0](v59 + 24))
            {
              swift_unknownObjectRelease();
            }
            else
            {
              *(void *)(v59 + 32) = lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
              swift_unknownObjectWeakAssign();
            }
            if (MEMORY[0x18C119DF0](v59 + 40))
            {
              swift_unknownObjectRelease();
            }
            else
            {
              *(void *)(v59 + 48) = &protocol witness table for _UIHostingView<A>;
              swift_unknownObjectWeakAssign();
            }
            uint64_t v66 = *(void *)(v59 + 72);
            swift_beginAccess();
            if (MEMORY[0x18C119DF0](v66 + 40))
            {

              swift_unknownObjectRelease();
            }
            else
            {
              lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
              uint64_t v67 = v58;
              swift_retain();
              DisplayList.ViewRenderer.host.setter();

              swift_release();
            }
            uint64_t v68 = (void *)MEMORY[0x18C119DF0](v59 + 16);
            Swift::Int v12 = (void *)MEMORY[0x1E4FBC8C8];
            if (v68)
            {
              uint64_t v69 = v68;
              char v95 = 0;
              id v70 = objc_msgSend(v68, sel_window);

              if (v70)
              {
                char v72 = 2;
              }
              else
              {
                char v95 = 1;
                char v72 = 3;
              }
              if (*(unsigned char *)(v59 + 220) == 1)
              {
                char v95 = v72;
                type metadata accessor for PPTTestCase?(0, (unint64_t *)&lazy cache variable for type metadata for ()?, v86, MEMORY[0x1E4FBB718]);
                uint64_t v73 = static Update.locked<A>(_:)();
                uint64_t v74 = *(void **)(v59 + 176);
                if (v74)
                {
                  MEMORY[0x1F4188790](v73);
                  id v76 = v75;
                  static Update.locked<A>(_:)();

                  uint64_t v74 = *(void **)(v59 + 176);
                }
                *(void *)(v59 + 176) = 0;
              }
              MEMORY[0x1F4188790](v71);
              static Update.ensure<A>(_:)();

              swift_release();
            }
            else
            {

              swift_release();
            }
            ++v56;
            --v48;
          }
          while (v48);
        }
        swift_unknownObjectRelease();
      }
    }
    return;
  }
  a3 = v79 - 1;
  if (__OFSUB__(v79, 1)) {
    goto LABEL_112;
  }
  if ((a1 & 0xC000000000000001) != 0) {
    goto LABEL_113;
  }
  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (a3 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v37 = *(id *)(a1 + 8 * a3 + 32);
    goto LABEL_47;
  }
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  __break(1u);
}

void specialized PresentationHostingController.setBackgroundTransparency(preferenceValue:)(unsigned __int8 a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = direct field offset for UIHostingController.host;
  unint64_t v4 = *(void **)(v1 + direct field offset for UIHostingController.host);
  unint64_t v5 = (void *)MEMORY[0x1E4FBC8C8];
  int v6 = *(_DWORD *)((char *)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x88));
  int v7 = a1;
  char v8 = *(unsigned char *)(v1 + direct field offset for PresentationHostingController.presentationWantsTransparentBackground);
  uint64_t v9 = v4;
  specialized _UIHostingView.setWantsTransparentBackground(for:_:)(4, v8, (uint64_t (*)(void))specialized _UIHostingView.updateBackgroundColor());

  if (v7 != 2)
  {
    id v10 = *(id *)(v2 + v3);
    specialized _UIHostingView.setWantsTransparentBackground(for:_:)(8, v7 & 1, (uint64_t (*)(void))specialized _UIHostingView.updateBackgroundColor());
  }
  uint64_t v11 = *(void **)(v2 + v3);
  if ((v6 == 0) == (*(_DWORD *)((char *)v11 + *(void *)((*v5 & *v11) + 0x88)) != 0))
  {
    _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesV02__E14_searchStorage33_01524358DA8FEB8BCC0A94C08F00494ALLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
    Swift::Int v12 = v11;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
}

void specialized NavigationStackCoordinator.configureAsRoot(_:transparentBackground:)(void *a1, char a2)
{
  unint64_t v5 = (char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x60);
  *((unsigned char *)a1 + *(void *)((*a1 & *MEMORY[0x1E4FBC8C8]) + 0x3D0)) = v5[8];
  uint64_t v6 = direct field offset for UIHostingController.host;
  int v7 = *(void **)((char *)a1 + direct field offset for UIHostingController.host);
  char v8 = self;
  id v9 = v7;
  id v10 = objc_msgSend(v8, sel_currentDevice);
  id v11 = objc_msgSend(v10, sel_userInterfaceIdiom);

  char v12 = v11 == (id)5 && v5[8] == 0;
  specialized _UIHostingView.setWantsTransparentBackground(for:_:)(1, v12);

  id v13 = *(id *)((char *)a1 + v6);
  specialized _UIHostingView.setWantsTransparentBackground(for:_:)(4, a2 & 1);
}

uint64_t specialized _UIHostingView.setWantsTransparentBackground(for:_:)(uint64_t a1, char a2)
{
  return specialized _UIHostingView.setWantsTransparentBackground(for:_:)(a1, a2, (uint64_t (*)(void))specialized _UIHostingView.updateBackgroundColor());
}

{
  return specialized _UIHostingView.setWantsTransparentBackground(for:_:)(a1, a2, (uint64_t (*)(void))specialized _UIHostingView.updateBackgroundColor());
}

uint64_t specialized Collection.dropLast(_:)(uint64_t result, unint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  unint64_t v2 = a2;
  uint64_t v3 = result;
  unint64_t v4 = a2 >> 62;
  if (a2 >> 62)
  {
LABEL_19:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v12 = v11 - v3;
    if (__OFSUB__(v11, v3))
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v14 < 0)
    {
LABEL_33:
      __break(1u);
      return result;
    }
    if (v13 >= (v12 & ~(v12 >> 63)) || v13 <= -1) {
      uint64_t v16 = v12 & ~(v12 >> 63);
    }
    else {
      uint64_t v16 = v13;
    }
    if (v12 >= 1) {
      uint64_t v7 = v16;
    }
    else {
      uint64_t v7 = v12 & ~(v12 >> 63);
    }
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v17 >= v7) {
      goto LABEL_10;
    }
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  unint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v5 >= ((v5 - result) & ~((uint64_t)(v5 - result) >> 63))) {
    uint64_t v6 = (v5 - result) & ~((uint64_t)(v5 - result) >> 63);
  }
  else {
    uint64_t v6 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((uint64_t)(v5 - result) >= 1) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = (v5 - result) & ~((uint64_t)(v5 - result) >> 63);
  }
  if ((uint64_t)v5 < v7) {
    goto LABEL_31;
  }
LABEL_10:
  if ((v2 & 0xC000000000000001) != 0 && v7)
  {
    type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
    Swift::Int v8 = 0;
    do
    {
      Swift::Int v9 = v8 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v8);
      Swift::Int v8 = v9;
    }
    while (v7 != v9);
  }
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.subscript.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  return v10;
}

uint64_t specialized BidirectionalCollection.suffix(_:)(uint64_t result, unint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
LABEL_30:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v6 = -v5;
    if (!__OFSUB__(0, v5)) {
      goto LABEL_4;
    }
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  unint64_t v2 = a2;
  uint64_t v3 = result;
  unint64_t v4 = a2 >> 62;
  if (a2 >> 62) {
    goto LABEL_30;
  }
  uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = -v5;
  if (__OFSUB__(0, v5)) {
    goto LABEL_32;
  }
LABEL_4:
  uint64_t v7 = -v3;
  if (v6 > 0 || v6 <= v7)
  {
    Swift::Int v8 = v5 - v3;
    if (__OFADD__(v5, v7))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v5 < v8)
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v4)
    {
LABEL_8:
      uint64_t v9 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_13;
    }
  }
  else
  {
    if (v5 < 0)
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    Swift::Int v8 = 0;
    if (!v4) {
      goto LABEL_8;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
LABEL_13:
  if (v9 < v8)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v8 < 0)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v10 < v5) {
    goto LABEL_35;
  }
  if (v5 < 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if ((v2 & 0xC000000000000001) != 0 && v8 != v5)
  {
    if (v8 < (unint64_t)v5)
    {
      type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
      Swift::Int v11 = v8;
      do
      {
        Swift::Int v12 = v11 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v11);
        Swift::Int v11 = v12;
      }
      while (v5 != v12);
      goto LABEL_25;
    }
LABEL_40:
    __break(1u);
    return result;
  }
LABEL_25:
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.subscript.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v13 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  return v13;
}

uint64_t partial apply for specialized closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t partial apply for specialized closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(uint64_t a1)
{
  return partial apply for specialized closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))specialized closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:));
}

{
  return partial apply for specialized closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))specialized closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:));
}

{
  return partial apply for specialized closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))specialized closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:));
}

void specialized UIHostingController.updateIncomingBoundsIfNeeded(navigationController:)(UINavigationController *a1)
{
  void (*v24)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  id v41;
  uint64_t ObjectType;
  void v43[2];
  __C::CGRect_optional v44;
  double v45[4];
  char v46;
  uint64_t vars8;
  CGRect v48;
  CGRect v49;

  uint64_t v2 = v1;
  uint64_t v4 = direct field offset for UIHostingController.host;
  objc_msgSend(*(id *)(v2 + direct field offset for UIHostingController.host), sel_bounds);
  v49.origin.x = 0.0;
  v49.origin.y = 0.0;
  v49.size.width = 0.0;
  v49.size.height = 0.0;
  if (CGRectEqualToRect(v48, v49))
  {
    id v5 = [(UINavigationController *)a1 viewIfLoaded];
    if (v5)
    {
      uint64_t v6 = v5;
      objc_msgSend(v5, sel_bounds);
      double v8 = v7;
      double v10 = v9;
      double v12 = v11;
      double v14 = v13;

      uint64_t v15 = *(void **)(v2 + v4);
      objc_msgSend(v15, sel_setBounds_, v8, v10, v12, v14);
    }
    else
    {
      id v16 = [(UINavigationController *)a1 splitViewController];
      if (v16
        && (uint64_t v17 = v16,
            UISplitViewController.columnBounds(forNavController:)(&v44, a1),
            v17,
            outlined init with take of CGRect?((uint64_t)&v44, (uint64_t)v45),
            (v46 & 1) == 0))
      {
        objc_msgSend(*(id *)(v2 + v4), sel_setBounds_, v45[0], v45[1], v45[2], v45[3]);
      }
      else if ((unint64_t)static RepresentableContextValues.current >= 2)
      {
        swift_beginAccess();
        uint64_t Strong = swift_weakLoadStrong();
        if (Strong)
        {
          uint64_t v19 = Strong;
          uint64_t v20 = Strong + 200;
          swift_beginAccess();
          uint64_t v21 = MEMORY[0x18C119DF0](v20);
          uint64_t v22 = *(void *)(v19 + 208);
          swift_release();
          if (v21)
          {
            uint64_t ObjectType = swift_getObjectType();
            uint64_t v23 = type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for UIViewControllerProvider);
            unint64_t v24 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 16);
            swift_unknownObjectRetain();
            v24(v43, v23, v23, ObjectType, v22);
            swift_unknownObjectRelease();
            if (v43[0])
            {
              id v25 = v43[1];
              uint64_t v26 = swift_getObjectType();
              id v27 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v26, v25);
              swift_unknownObjectRelease();
              if (v27)
              {
                id v28 = v27;
                uint64_t v29 = objc_msgSend(v28, sel_splitViewController);
                if (v29)
                {
                  uint64_t v30 = v29;

                  swift_unknownObjectRelease();
                  return;
                }
                unint64_t v31 = objc_msgSend(v28, sel_viewIfLoaded);
                if (v31)
                {
                  uint64_t v32 = v31;
                  objc_msgSend(v31, sel_bounds);
                  id v34 = v33;
                  int64_t v36 = v35;
                  uint64_t v38 = v37;
                  uint64_t v40 = v39;

                  uint64_t v41 = *(id *)(v2 + v4);
                  objc_msgSend(v41, sel_setBounds_, v34, v36, v38, v40);
                }
              }
            }
            swift_unknownObjectRelease();
          }
        }
      }
    }
  }
}

void *type metadata accessor for LeadingTrailingLabeledContentStyle_Phone._Body()
{
  return &unk_1ED48A1D0;
}

void closure #1 in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(char a1, void *a2, void *a3, char a4)
{
  if (a1)
  {
    performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(a2, a3, a4 & 1);
  }
  else
  {
    double v7 = self;
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = a2;
    *(void *)(v8 + 24) = a3;
    *(unsigned char *)(v8 + 32) = a4 & 1;
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)partial apply;
    *(void *)(v9 + 24) = v8;
    v14[4] = closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)partial apply;
    void v14[5] = v9;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 1107296256;
    void v14[2] = thunk for @escaping @callee_guaranteed () -> ();
    v14[3] = &block_descriptor_116_0;
    double v10 = _Block_copy(v14);
    double v11 = a2;
    id v12 = a3;
    swift_retain();
    swift_release();
    objc_msgSend(v7, sel_performWithoutAnimation_, v10);
    _Block_release(v10);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (isEscapingClosureAtFileLocation) {
      __break(1u);
    }
  }
}

uint64_t partial apply for closure #1 in NavigationSelectionHost.selectionSeedByStackKey.setter()
{
  return closure #1 in NavigationSelectionHost.selectionSeedByStackKey.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t closure #1 in NavigationSelectionHost.selectionSeedByStackKey.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t SwiftUIPrivacyReductionAccessibilityProvider.Modifier.body(content:)@<X0>(char a1@<W1>, void *a2@<X8>)
{
  if (a1) {
    unint64_t v3 = dword_1ED40C180 | ((unint64_t)dword_1ED40C180 << 32);
  }
  else {
    unint64_t v3 = (unint64_t)dword_1ED40C158 << 32;
  }
  uint64_t result = specialized View.accessibility<A>(_:_:isEnabled:)(v3, 1, v6);
  uint64_t v5 = v6[1];
  *a2 = v6[0];
  a2[1] = v5;
  return result;
}

uint64_t specialized View.accessibility<A>(_:_:isEnabled:)@<X0>(unint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  if (a2)
  {
    unsigned int v4 = a1;
    unint64_t v5 = HIDWORD(a1);
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v12 = Dictionary.init(minimumCapacity:)();
    _s7SwiftUI31AnyAccessibilityPropertiesEntry_pSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, MEMORY[0x1E4F41090]);
    v11[3] = v6;
    v11[4] = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C17NullableOptionSetVyAA0C10VisibilityVGGACyxGAA03AnycdE0AAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>);
    v11[0] = __PAIR64__(v5, v4);
    specialized Dictionary.subscript.setter((uint64_t)v11, MEMORY[0x1E4F40AA8]);
    uint64_t v7 = v12;
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v7 = Dictionary.init(minimumCapacity:)();
  }
  uint64_t v12 = v7;
  AccessibilityAttachment.init(properties:)();
  uint64_t v8 = v11[0];
  uint64_t v9 = v11[1];
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v8;
  *(void *)(result + 24) = v9;
  *a3 = result;
  a3[1] = 0;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance LazyContainerModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = lazy protocol witness table accessor for type LazyContainerModifier and conformance LazyContainerModifier();

  return MEMORY[0x1F40FF7D0](a1, a2, a3, a4, a5, v10);
}

unint64_t lazy protocol witness table accessor for type LazyContainerModifier and conformance LazyContainerModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyContainerModifier and conformance LazyContainerModifier;
  if (!lazy protocol witness table cache variable for type LazyContainerModifier and conformance LazyContainerModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyContainerModifier and conformance LazyContainerModifier);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for AccessibilityScrollableContextModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  *(void *)(a1 + 8) = a4();
  uint64_t result = a5();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t outlined init with take of WeakBox<UIFocusItem>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for WeakBox<UIFocusItem>(0, &lazy cache variable for type metadata for WeakBox<UIFocusItem>, 255, (uint64_t (*)(uint64_t))type metadata accessor for UIFocusItem, MEMORY[0x1E4F41720]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t closure #1 in TabSectionActionsModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v20[1] = a3;
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TabSectionActions();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  double v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  double v14 = (char *)v20 - v13;
  type metadata accessor for TabSectionActionsModifier();
  swift_getWitnessTable();
  uint64_t v15 = type metadata accessor for _ViewModifier_Content();
  uint64_t WitnessTable = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(WitnessTable);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a2);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v11, v7, a2);
  uint64_t v17 = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v11);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v11, v8);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v14, v8);
  uint64_t v23 = v11;
  v21[0] = v15;
  v21[1] = v8;
  v20[2] = WitnessTable;
  void v20[3] = v17;
  static ViewBuilder.buildBlock<each A>(_:)((uint64_t)v22, 2uLL, (uint64_t)v21);
  v18(v14, v8);
  return ((uint64_t (*)(char *, uint64_t))v18)(v11, v8);
}

uint64_t closure #1 in View.tabItem<A>(_:)@<X0>(uint64_t (*a1)(double)@<X0>, uint64_t a2@<X3>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  v21[1] = a4;
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)v21 - v16;
  uint64_t v18 = a1(v15);
  MEMORY[0x18C113660](v18, a2, &type metadata for UpdateDefaultTabFill, a3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a2);
  void v21[2] = a3;
  v21[3] = &protocol witness table for UpdateDefaultTabFill;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v13);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v13, v10);
  static ViewBuilder.buildExpression<A>(_:)(v17);
  return ((uint64_t (*)(char *, uint64_t))v19)(v17, v10);
}

uint64_t TabSectionActionsModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  swift_getWitnessTable();
  type metadata accessor for _ViewModifier_Content();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  type metadata accessor for TabSectionActions();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  uint64_t v6 = type metadata accessor for Group();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = &v16[-v11];
  uint64_t v17 = v4;
  uint64_t v18 = v5;
  uint64_t v19 = v2;
  uint64_t WitnessTable = swift_getWitnessTable();
  Group<A>.init(content:)();
  uint64_t v20 = WitnessTable;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v9);
  uint64_t v14 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
  v14(v9, v6);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(unsigned char *, uint64_t))v14)(v12, v6);
}

uint64_t key path getter for EnvironmentValues.tabBarPlacement : EnvironmentValues@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabBarPlacementKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabBarPlacementKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabBarPlacementKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabBarPlacementKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabBarPlacementKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabBarPlacementKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

void SearchOverlayView.body.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(unsigned __int8 *)(v1 + 32);
  outlined copy of Environment<Bool>.Content(v3, *(unsigned char *)(v1 + 32));
  int v5 = specialized Environment.wrappedValue.getter(v3, v4);
  outlined consume of Environment<Bool?>.Content(v3, v4);
  if (v5 != 7 && (*(unsigned char *)v1 & 1) != 0)
  {
    char v6 = 0;
    if ((*(unsigned char *)(v1 + 1) & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  char v6 = 1;
  if (*(unsigned char *)(v1 + 1))
  {
LABEL_4:
    outlined copy of Environment<Bool>.Content(v3, v4);
    specialized Environment.wrappedValue.getter(v3, v4);
    outlined consume of Environment<Bool?>.Content(v3, v4);
  }
LABEL_5:
  *(unsigned char *)a1 = v6;
  *(_OWORD *)(a1 + 8) = xmmword_18834BB90;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  outlined copy of ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>?(0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  outlined consume of ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>?(0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}

void outlined copy of ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2 != 1)
  {
    char v17 = a5 & 1;
    char v18 = a7 & 1;
    swift_bridgeObjectRetain();
    outlined copy of Environment<Bool>.Content(a4, v17);
    outlined copy of Environment<Bool>.Content(a6, v18);
    outlined copy of Environment<Bool>.Content(a8, a9 & 1);
    swift_retain();
    outlined copy of Binding<NavigationSplitViewColumn>?(a12, a13);
  }
}

void outlined consume of ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2 != 1)
  {
    uint64_t v17 = a5 & 1;
    uint64_t v18 = a7 & 1;
    swift_bridgeObjectRelease();
    outlined consume of Environment<Bool?>.Content(a4, v17);
    outlined consume of Environment<Bool?>.Content(a6, v18);
    outlined consume of Environment<Bool?>.Content(a8, a9 & 1);
    swift_release();
    outlined consume of Binding<NavigationSplitViewColumn>?(a12, a13);
  }
}

uint64_t destroy for ResolvedBorderedButton(uint64_t a1)
{
  outlined consume of Environment<Material?>.Content(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 56), *(unsigned __int8 *)(a1 + 64));
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 72), *(unsigned __int8 *)(a1 + 80));
  swift_release();
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 104), *(unsigned __int8 *)(a1 + 112));
  outlined consume of Environment<CGFloat?>.Content(*(void *)(a1 + 120), *(unsigned __int8 *)(a1 + 128), *(unsigned char *)(a1 + 129));
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 136), *(unsigned __int8 *)(a1 + 144));
  outlined consume of Environment<Color?>.Content(*(void *)(a1 + 152), *(unsigned __int8 *)(a1 + 160));
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 184), *(unsigned __int8 *)(a1 + 192));
  outlined consume of Environment<KeyboardShortcut?>.Content(*(void *)(a1 + 200), *(void *)(a1 + 208), *(void *)(a1 + 216), *(unsigned __int8 *)(a1 + 224), *(unsigned char *)(a1 + 225));
  uint64_t v2 = *(void *)(a1 + 232);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 240);

  return outlined consume of Environment<Bool?>.Content(v2, v3);
}

{
  uint64_t vars8;

  outlined consume of Environment<Bool?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
  outlined consume of Environment<Color?>.Content(*(void *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
  outlined consume of Environment<CGFloat?>.Content(*(void *)(a1 + 64), *(unsigned __int8 *)(a1 + 72), *(unsigned char *)(a1 + 73));
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 80), *(unsigned __int8 *)(a1 + 88));
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 96), *(unsigned __int8 *)(a1 + 104));
  outlined consume of Environment<KeyboardShortcut?>.Content(*(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(unsigned __int8 *)(a1 + 136), *(unsigned char *)(a1 + 137));
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 144), *(unsigned __int8 *)(a1 + 152));

  return swift_release();
}

void *ResolvedBorderedButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 208);
  *(_OWORD *)&v40[16] = *(_OWORD *)(v1 + 192);
  *(_OWORD *)&v40[32] = v3;
  *(_OWORD *)&unsigned char v40[48] = *(_OWORD *)(v1 + 224);
  v40[64] = *(unsigned char *)(v1 + 240);
  long long v4 = *(_OWORD *)(v1 + 144);
  v38[8] = *(_OWORD *)(v1 + 128);
  void v38[9] = v4;
  long long v5 = *(_OWORD *)(v1 + 176);
  long long v39 = *(_OWORD *)(v1 + 160);
  *(_OWORD *)uint64_t v40 = v5;
  long long v6 = *(_OWORD *)(v1 + 80);
  v38[4] = *(_OWORD *)(v1 + 64);
  _OWORD v38[5] = v6;
  long long v7 = *(_OWORD *)(v1 + 112);
  v38[6] = *(_OWORD *)(v1 + 96);
  v38[7] = v7;
  long long v8 = *(_OWORD *)(v1 + 16);
  v38[0] = *(_OWORD *)v1;
  v38[1] = v8;
  long long v9 = *(_OWORD *)(v1 + 48);
  _OWORD v38[2] = *(_OWORD *)(v1 + 32);
  v38[3] = v9;
  v41[0] = *(_OWORD *)&v40[8];
  v41[1] = *(_OWORD *)&v40[24];
  v42[0] = *(_OWORD *)&v40[40];
  *(_OWORD *)((char *)v42 + 9) = *(_OWORD *)&v40[49];
  __src[0] = *(_OWORD *)&v40[8];
  __src[1] = *(_OWORD *)&v40[24];
  __src[2] = *(_OWORD *)&v40[40];
  *(_OWORD *)((char *)&__src[2] + 9) = *(_OWORD *)&v40[49];
  v31[0] = static VerticalAlignment.center.getter();
  v31[1] = 0;
  char v32 = 1;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v34 = BorderedButtonSpec.defaultFont.getter();
  uint64_t v35 = swift_getKeyPath();
  char v36 = 1;
  v25[0] = v31[0];
  v25[1] = 0;
  char v26 = 1;
  uint64_t v27 = KeyPath;
  uint64_t v28 = v34;
  uint64_t v29 = v35;
  char v30 = 1;
  swift_retain();
  swift_retain();
  swift_retain();
  closure #2 in ResolvedBorderedButton.body.getter(v31, (uint64_t)v38, (uint64_t)__src);
  closure #3 in ResolvedBorderedButton.body.getter(v25, (uint64_t)v38, (uint64_t)&__src[13] + 8);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v10 = unk_1ED43ABE0;
  if ((unk_1ED43ABE0 & ~qword_1ED43ABD8) == 0) {
    uint64_t v10 = 0;
  }
  uint64_t v11 = v10 | qword_1ED43ABD8;
  uint64_t v12 = *((void *)&v39 + 1);
  char v13 = v40[0];
  uint64_t v14 = *(void *)&v41[0];
  uint64_t v15 = BYTE8(v41[0]);
  outlined retain of ResolvedBorderedButton((uint64_t)v38);
  outlined retain of BorderedButtonSpec((uint64_t)v41, (void (*)(void, void))outlined copy of Environment<MenuActionDismissBehavior>.Content, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Environment<KeyboardShortcut?>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v14, v15);
  specialized Environment.wrappedValue.getter(v14, v15, v31);
  outlined consume of Environment<Bool?>.Content(v14, v15);
  outlined retain of BorderedButtonSpec((uint64_t)v41, (void (*)(void, void))outlined consume of Environment<Bool?>.Content, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Environment<KeyboardShortcut?>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  LOBYTE(v14) = v31[0];
  static EdgeInsets.zero.getter();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  swift_release();
  swift_release();
  swift_release();
  outlined release of ResolvedBorderedButton((uint64_t)v38);
  LOBYTE(v31[0]) = v13;
  uint64_t result = memcpy((void *)a1, __src, 0x1A8uLL);
  *(unsigned char *)(a1 + 424) = v14;
  *(void *)(a1 + 432) = v12;
  *(unsigned char *)(a1 + 440) = v31[0];
  *(void *)(a1 + 448) = v17;
  *(void *)(a1 + 456) = v19;
  *(void *)(a1 + 464) = v21;
  *(void *)(a1 + 472) = v23;
  *(unsigned char *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = v11;
  return result;
}

unint64_t closure #2 in ResolvedBorderedButton.body.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  char v76 = *((unsigned char *)a1 + 16);
  uint64_t v8 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v9 = a1[5];
  char v78 = *((unsigned char *)a1 + 48);
  long long v10 = *(_OWORD *)(a2 + 104);
  long long v11 = *(_OWORD *)(a2 + 136);
  _OWORD v102[2] = *(_OWORD *)(a2 + 120);
  v103[0] = v11;
  *(_OWORD *)((char *)v103 + 9) = *(_OWORD *)(a2 + 145);
  v102[0] = *(_OWORD *)(a2 + 88);
  v102[1] = v10;
  uint64_t v12 = v10;
  uint64_t v13 = BYTE8(v10);
  outlined retain of ResolvedBorderedButton(a2);
  outlined retain of BorderedButtonStyle_Phone((uint64_t)v102);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v12, v13);
  char v14 = specialized Environment.wrappedValue.getter(v12, v13);
  outlined consume of Environment<Bool?>.Content(v12, v13);
  outlined release of BorderedButtonStyle_Phone((uint64_t)v102);
  uint64_t v79 = v6;
  uint64_t v80 = v5;
  if (v14 & 1) != 0 && (BYTE8(v102[0]))
  {
    uint64_t v69 = static Color.white.getter();
  }
  else
  {
    long long v15 = *(_OWORD *)(a2 + 208);
    long long v92 = *(_OWORD *)(a2 + 192);
    long long v93 = v15;
    long long v94 = *(_OWORD *)(a2 + 224);
    char v95 = *(unsigned char *)(a2 + 240);
    long long v16 = *(_OWORD *)(a2 + 144);
    long long v88 = *(_OWORD *)(a2 + 128);
    long long v89 = v16;
    long long v17 = *(_OWORD *)(a2 + 176);
    long long v90 = *(_OWORD *)(a2 + 160);
    long long v91 = v17;
    long long v18 = *(_OWORD *)(a2 + 80);
    long long v84 = *(_OWORD *)(a2 + 64);
    long long v85 = v18;
    long long v19 = *(_OWORD *)(a2 + 112);
    long long v86 = *(_OWORD *)(a2 + 96);
    long long v87 = v19;
    long long v20 = *(_OWORD *)(a2 + 16);
    long long v81 = *(_OWORD *)a2;
    long long v82 = v20;
    long long v21 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)unint64_t v83 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v83[16] = v21;
    ResolvedBorderedButton.colorSpec.getter((uint64_t)&v96);
    uint64_t v22 = v97;
    unsigned __int8 v23 = v98;
    unint64_t v24 = v99;
    outlined copy of BorderedButtonColorSpec.LabelStyle(v99);
    swift_release();
    outlined consume of Material?(v22, v23);
    uint64_t v69 = v24;
    outlined consume of BorderedButtonColorSpec.LabelStyle(v24);
  }
  outlined release of ResolvedBorderedButton(a2);
  long long v25 = *(_OWORD *)(a2 + 200);
  v100[0] = *(_OWORD *)(a2 + 184);
  v100[1] = v25;
  v101[0] = *(_OWORD *)(a2 + 216);
  *(_OWORD *)((char *)v101 + 9) = *(_OWORD *)(a2 + 225);
  long long v26 = *(_OWORD *)(a2 + 200);
  long long v81 = *(_OWORD *)(a2 + 184);
  long long v82 = v26;
  *(_OWORD *)unint64_t v83 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)&v83[9] = *(_OWORD *)(a2 + 225);
  uint64_t v75 = v7;
  swift_retain();
  uint64_t v74 = v9;
  swift_retain();
  swift_retain();
  double v27 = BorderedButtonSpec.padding.getter();
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  char v73 = static Edge.Set.all.getter();
  long long v34 = *(_OWORD *)(a2 + 208);
  long long v92 = *(_OWORD *)(a2 + 192);
  long long v93 = v34;
  long long v94 = *(_OWORD *)(a2 + 224);
  char v95 = *(unsigned char *)(a2 + 240);
  long long v35 = *(_OWORD *)(a2 + 144);
  long long v88 = *(_OWORD *)(a2 + 128);
  long long v89 = v35;
  long long v36 = *(_OWORD *)(a2 + 176);
  long long v90 = *(_OWORD *)(a2 + 160);
  long long v91 = v36;
  long long v37 = *(_OWORD *)(a2 + 80);
  long long v84 = *(_OWORD *)(a2 + 64);
  long long v85 = v37;
  long long v38 = *(_OWORD *)(a2 + 112);
  long long v86 = *(_OWORD *)(a2 + 96);
  long long v87 = v38;
  long long v39 = *(_OWORD *)(a2 + 16);
  long long v81 = *(_OWORD *)a2;
  long long v82 = v39;
  long long v40 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)unint64_t v83 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v83[16] = v40;
  ResolvedBorderedButton.imageBackgroundSpec.getter((uint64_t)&v96);
  uint64_t v41 = v97;
  unsigned __int8 v42 = v98;
  uint64_t v71 = v8;
  unint64_t v43 = v99;
  uint64_t v72 = Color.opacity(_:)();
  swift_release();
  outlined consume of Material?(v41, v42);
  outlined consume of BorderedButtonColorSpec.LabelStyle(v43);
  char v70 = static Edge.Set.all.getter();
  long long v44 = *(_OWORD *)(a2 + 208);
  long long v92 = *(_OWORD *)(a2 + 192);
  long long v93 = v44;
  long long v94 = *(_OWORD *)(a2 + 224);
  char v95 = *(unsigned char *)(a2 + 240);
  long long v45 = *(_OWORD *)(a2 + 144);
  long long v88 = *(_OWORD *)(a2 + 128);
  long long v89 = v45;
  long long v46 = *(_OWORD *)(a2 + 176);
  long long v90 = *(_OWORD *)(a2 + 160);
  long long v91 = v46;
  long long v47 = *(_OWORD *)(a2 + 80);
  long long v84 = *(_OWORD *)(a2 + 64);
  long long v85 = v47;
  long long v48 = *(_OWORD *)(a2 + 112);
  long long v86 = *(_OWORD *)(a2 + 96);
  long long v87 = v48;
  long long v49 = *(_OWORD *)(a2 + 16);
  long long v81 = *(_OWORD *)a2;
  long long v82 = v49;
  long long v50 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)unint64_t v83 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v83[16] = v50;
  ResolvedBorderedButton.imageBackgroundSpec.getter((uint64_t)&v96);
  uint64_t v52 = v97;
  uint64_t v51 = v98;
  unint64_t v53 = v99;
  char v54 = ~(_BYTE)v98;
  outlined copy of Material?(v97, v98);
  swift_release();
  outlined consume of Material?(v52, v51);
  unint64_t result = outlined consume of BorderedButtonColorSpec.LabelStyle(v53);
  if (v54)
  {
    char v56 = static Edge.Set.all.getter();
    char v57 = v76;
    uint64_t v77 = *(void *)(a2 + 168);
    char v58 = *(unsigned char *)(a2 + 176);
    uint64_t v59 = *(void *)&v100[0];
    uint64_t v60 = BYTE8(v100[0]);
    outlined retain of ResolvedBorderedButton(a2);
    outlined retain of BorderedButtonSpec((uint64_t)v100, (void (*)(void, void))outlined copy of Environment<MenuActionDismissBehavior>.Content, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Environment<KeyboardShortcut?>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
    outlined copy of Environment<MenuActionDismissBehavior>.Content(v59, v60);
    specialized Environment.wrappedValue.getter(v59, v60, &v81);
    outlined consume of Environment<Bool?>.Content(v59, v60);
    outlined retain of BorderedButtonSpec((uint64_t)v100, (void (*)(void, void))outlined consume of Environment<Bool?>.Content, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Environment<KeyboardShortcut?>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
    LOBYTE(v59) = v81;
    static EdgeInsets.zero.getter();
    uint64_t v62 = v61;
    uint64_t v64 = v63;
    uint64_t v66 = v65;
    uint64_t v68 = v67;
    unint64_t result = outlined release of ResolvedBorderedButton(a2);
    LOBYTE(v81) = v58;
    *(void *)a3 = v80;
    *(void *)(a3 + 8) = v79;
    *(unsigned char *)(a3 + 16) = v57;
    *(void *)(a3 + 24) = v71;
    *(void *)(a3 + 32) = v75;
    *(void *)(a3 + 40) = v74;
    *(unsigned char *)(a3 + 48) = v78;
    *(void *)(a3 + 56) = v69;
    *(unsigned char *)(a3 + 64) = v73;
    *(double *)(a3 + 72) = v27;
    *(void *)(a3 + 80) = v29;
    *(void *)(a3 + 88) = v31;
    *(void *)(a3 + 96) = v33;
    *(unsigned char *)(a3 + 104) = 0;
    *(void *)(a3 + 112) = v72;
    *(unsigned char *)(a3 + 120) = v70;
    *(void *)(a3 + 128) = v52;
    *(unsigned char *)(a3 + 136) = v51;
    *(_DWORD *)(a3 + 140) = HIDWORD(v51);
    *(unsigned char *)(a3 + 144) = v56;
    *(unsigned char *)(a3 + 152) = v59;
    *(void *)(a3 + 160) = v77;
    *(unsigned char *)(a3 + 168) = v81;
    *(void *)(a3 + 176) = v62;
    *(void *)(a3 + 184) = v64;
    *(void *)(a3 + 192) = v66;
    *(void *)(a3 + 200) = v68;
    *(_WORD *)(a3 + 208) = 256;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t outlined consume of Material.ID(uint64_t a1, unsigned __int8 a2)
{
  if (a2 == 2) {
    return swift_bridgeObjectRelease();
  }
  if (a2 <= 1u) {
    return swift_release();
  }
  return result;
}

uint64_t ResolvedBorderedButton.imageBackgroundSpec.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *((void *)v1 + 3);
  char v3 = *((unsigned char *)v1 + 32);
  uint64_t v4 = *((void *)v1 + 5);
  char v5 = *((unsigned char *)v1 + 48);
  int v6 = *((unsigned __int8 *)v1 + 81);
  char v7 = *((unsigned char *)v1 + 82);
  char v34 = *((unsigned char *)v1 + 83);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v4, v5 & 1);
  char v8 = specialized Environment.wrappedValue.getter(v4, v5 & 1);
  outlined consume of Environment<Bool?>.Content(v4, v5 & 1);
  if (v8)
  {
    uint64_t v9 = static Color.clear.getter();
    static Material.thick.getter();
    long long v36 = *v1;
    uint64_t v37 = *((void *)v1 + 2);
    uint64_t v38 = v2;
    char v39 = v3;
    *(_DWORD *)long long v40 = *(_DWORD *)((char *)v1 + 33);
    *(_DWORD *)&v40[3] = *((_DWORD *)v1 + 9);
    uint64_t v41 = v4;
    char v42 = v5;
    long long v43 = *(long long *)((char *)v1 + 49);
    long long v44 = *(long long *)((char *)v1 + 65);
    char v45 = v6;
    char v46 = v7;
    char v47 = v34;
    long long v54 = *(long long *)((char *)v1 + 180);
    long long v55 = *(long long *)((char *)v1 + 196);
    v56[0] = *(long long *)((char *)v1 + 212);
    *(_OWORD *)((char *)v56 + 13) = *(long long *)((char *)v1 + 225);
    long long v50 = *(long long *)((char *)v1 + 116);
    long long v51 = *(long long *)((char *)v1 + 132);
    long long v52 = *(long long *)((char *)v1 + 148);
    long long v53 = *(long long *)((char *)v1 + 164);
    long long v48 = *(long long *)((char *)v1 + 84);
    long long v49 = *(long long *)((char *)v1 + 100);
    unint64_t v10 = ResolvedBorderedButton.resolvedTint.getter();
    uint64_t v11 = v10;
    if (v10 >> 62)
    {
      if (v10 >> 62 != 1)
      {
        outlined copy of Environment<MenuActionDismissBehavior>.Content(v2, v3 & 1);
        specialized Environment.wrappedValue.getter(v2, v3 & 1, &v36);
        outlined consume of Environment<Bool?>.Content(v2, v3 & 1);
        if (v36)
        {
          if (v34)
          {
            static Material.ultraThin.getter();
            outlined consume of Material.ID(v57, v58);
            uint64_t v57 = v36;
            unsigned __int8 v58 = BYTE8(v36);
            unsigned int v59 = HIDWORD(v36);
            LOBYTE(v36) = 0;
            Color.init(_:white:opacity:)();
            if ((v7 & 1) != 0 || v6 != 1) {
              static Color.accentColor.getter();
            }
            else {
              static Color.red.getter();
            }
            uint64_t v11 = Color.over(_:)();
            swift_release();
            uint64_t result = swift_release();
          }
          else
          {
            if ((v7 & 1) != 0 || v6 != 1) {
              uint64_t result = static Color.accentColor.getter();
            }
            else {
              uint64_t result = static Color.red.getter();
            }
            uint64_t v11 = result;
          }
          double v27 = 1.0;
          double v28 = 1.0;
        }
        else
        {
          if ((v7 & 1) != 0 || v6 != 1) {
            uint64_t result = static Color.accentColor.getter();
          }
          else {
            uint64_t result = static Color.red.getter();
          }
          uint64_t v11 = result;
          double v28 = 1.0;
          if (v34)
          {
            static Material.thin.getter();
            uint64_t result = outlined consume of Material.ID(v57, v58);
            uint64_t v57 = v36;
            unsigned __int8 v58 = BYTE8(v36);
            unsigned int v59 = HIDWORD(v36);
            double v27 = 0.75;
          }
          else
          {
            double v27 = 1.0;
          }
        }
        goto LABEL_49;
      }
      uint64_t v12 = v10 & 0x3FFFFFFFFFFFFFFFLL;
      outlined copy of Environment<MenuActionDismissBehavior>.Content(v2, v3 & 1);
      specialized Environment.wrappedValue.getter(v2, v3 & 1, &v36);
      outlined consume of Environment<Bool?>.Content(v2, v3 & 1);
      if ((v36 & 1) == 0)
      {
        uint64_t result = swift_release();
        if (v34)
        {
          static Material.ultraThin.getter();
          uint64_t result = outlined consume of Material.ID(v57, v58);
          uint64_t v11 = 0;
          uint64_t v57 = v36;
          unsigned __int8 v58 = BYTE8(v36);
          unsigned int v59 = HIDWORD(v36);
          double v27 = 0.75;
          double v28 = 0.75;
          uint64_t v9 = v12;
          goto LABEL_49;
        }
LABEL_21:
        uint64_t v11 = 0;
        double v27 = 1.0;
        double v28 = 1.0;
        uint64_t v9 = v12;
LABEL_49:
        uint64_t v32 = v57;
        unint64_t v33 = v58 | ((unint64_t)v59 << 32);
        *(void *)a1 = v9;
        *(double *)(a1 + 8) = v28;
        *(void *)(a1 + 16) = 0x3FF0000000000000;
        *(void *)(a1 + 24) = v32;
        *(void *)(a1 + 32) = v33;
        *(unsigned char *)(a1 + 40) = 0;
        *(void *)(a1 + 48) = v11;
        *(double *)(a1 + 56) = v27;
        *(void *)(a1 + 64) = 0x3FF0000000000000;
        return result;
      }
      if ((v34 & 1) == 0)
      {
        uint64_t result = swift_release();
        goto LABEL_21;
      }
      LOBYTE(v36) = 0;
      double v28 = 1.0;
      Color.init(_:white:opacity:)();
      uint64_t v29 = Color.over(_:)();
      swift_release();
      swift_release();
      static Material.ultraThin.getter();
      swift_release();
      uint64_t result = outlined consume of Material.ID(v57, v58);
      uint64_t v11 = 0;
LABEL_43:
      uint64_t v57 = v36;
      unsigned __int8 v58 = BYTE8(v36);
      unsigned int v59 = HIDWORD(v36);
      double v27 = 0.75;
      uint64_t v9 = v29;
      goto LABEL_49;
    }
    outlined copy of Environment<MenuActionDismissBehavior>.Content(v2, v3 & 1);
    specialized Environment.wrappedValue.getter(v2, v3 & 1, &v36);
    outlined consume of Environment<Bool?>.Content(v2, v3 & 1);
    if ((v36 & 1) == 0)
    {
      if (static Color.yellow.getter() != v11) {
        dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
      }
      swift_release();
      uint64_t v29 = Color.opacity(_:)();
      uint64_t result = swift_release();
      double v28 = 1.0;
      if ((v34 & 1) == 0)
      {
        double v27 = 1.0;
        uint64_t v9 = v29;
        goto LABEL_49;
      }
      static Material.ultraThin.getter();
      uint64_t result = outlined consume of Material.ID(v57, v58);
      goto LABEL_43;
    }
    if (static Color.red.getter() != v11)
    {
      char v26 = dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
      swift_release();
      if (v26)
      {
LABEL_29:
        uint64_t v30 = Color.opacity(_:)();
        uint64_t result = swift_release();
        double v27 = 1.0;
        if (v34)
        {
          swift_retain();
          static Material.ultraThin.getter();
          outlined consume of Material.ID(v57, v58);
          uint64_t v57 = v36;
          unsigned __int8 v58 = BYTE8(v36);
          unsigned int v59 = HIDWORD(v36);
          LOBYTE(v36) = 0;
          Color.init(_:white:opacity:)();
          uint64_t v31 = Color.over(_:)();
          swift_release();
          swift_release();
          uint64_t result = swift_release();
          uint64_t v11 = v31;
        }
        double v28 = 1.0;
        uint64_t v9 = v30;
        goto LABEL_49;
      }
      if (static Color.pink.getter() != v11)
      {
        dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
        swift_release();
        goto LABEL_29;
      }
    }
    swift_release();
    goto LABEL_29;
  }
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v2, v3 & 1);
  specialized Environment.wrappedValue.getter(v2, v3 & 1, &v36);
  outlined consume of Environment<Bool?>.Content(v2, v3 & 1);
  char v14 = v36;
  uint64_t v15 = static Color.clear.getter();
  static Material.ultraThin.getter();
  if (v14)
  {
    uint64_t v16 = v36;
    unint64_t v17 = BYTE8(v36) | ((unint64_t)HIDWORD(v36) << 32);
    LOBYTE(v57) = 0;
    uint64_t result = Color.init(_:white:opacity:)();
    *(void *)a1 = v15;
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)(a1 + 8) = _Q0;
    *(void *)(a1 + 24) = v16;
    *(void *)(a1 + 32) = v17;
    *(unsigned char *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = result;
    *(_OWORD *)(a1 + 56) = xmmword_188368AD0;
  }
  else
  {
    uint64_t v23 = v36;
    unint64_t v24 = BYTE8(v36) | ((unint64_t)HIDWORD(v36) << 32);
    LOBYTE(v57) = 0;
    uint64_t result = Color.init(_:white:opacity:)();
    *(void *)a1 = v15;
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)(a1 + 8) = _Q0;
    *(void *)(a1 + 24) = v23;
    *(void *)(a1 + 32) = v24;
    *(unsigned char *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = result;
    *(_OWORD *)(a1 + 56) = xmmword_188368AC0;
  }
  return result;
}

uint64_t outlined copy of Material.ID(uint64_t a1, unsigned __int8 a2)
{
  if (a2 == 2) {
    return swift_bridgeObjectRetain();
  }
  if (a2 <= 1u) {
    return swift_retain();
  }
  return result;
}

double closure #3 in ResolvedBorderedButton.body.getter@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v86 = a1[1];
  uint64_t v87 = *a1;
  char v85 = *((unsigned char *)a1 + 16);
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  char v82 = *((unsigned char *)a1 + 48);
  long long v8 = *(_OWORD *)(a2 + 208);
  long long v105 = *(_OWORD *)(a2 + 192);
  long long v106 = v8;
  long long v107 = *(_OWORD *)(a2 + 224);
  char v108 = *(unsigned char *)(a2 + 240);
  long long v9 = *(_OWORD *)(a2 + 144);
  long long v101 = *(_OWORD *)(a2 + 128);
  long long v102 = v9;
  long long v10 = *(_OWORD *)(a2 + 176);
  long long v103 = *(_OWORD *)(a2 + 160);
  long long v104 = v10;
  long long v11 = *(_OWORD *)(a2 + 80);
  long long v97 = *(_OWORD *)(a2 + 64);
  long long v98 = v11;
  long long v12 = *(_OWORD *)(a2 + 112);
  long long v99 = *(_OWORD *)(a2 + 96);
  long long v100 = v12;
  long long v13 = *(_OWORD *)(a2 + 16);
  long long v94 = *(_OWORD *)a2;
  long long v95 = v13;
  long long v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)uint64_t v96 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v96[16] = v14;
  ResolvedBorderedButton.colorSpec.getter((uint64_t)&v111);
  uint64_t v15 = *((void *)&v112 + 1);
  unsigned __int8 v16 = v113;
  double v81 = *((double *)v114 + 1);
  unint64_t v17 = *(void *)&v114[0];
  swift_release();
  outlined consume of Material?(v15, v16);
  outlined consume of BorderedButtonColorSpec.LabelStyle(v17);
  long long v18 = *(_OWORD *)(a2 + 104);
  long long v19 = *(_OWORD *)(a2 + 136);
  long long v113 = *(_OWORD *)(a2 + 120);
  v114[0] = v19;
  *(_OWORD *)((char *)v114 + 9) = *(_OWORD *)(a2 + 145);
  long long v111 = *(_OWORD *)(a2 + 88);
  long long v112 = v18;
  uint64_t v20 = v18;
  uint64_t v21 = BYTE8(v18);
  uint64_t v84 = v6;
  swift_retain();
  uint64_t v83 = v7;
  swift_retain();
  uint64_t v88 = v5;
  swift_retain();
  outlined retain of ResolvedBorderedButton(a2);
  outlined retain of BorderedButtonStyle_Phone((uint64_t)&v111);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v20, v21);
  LOBYTE(v17) = specialized Environment.wrappedValue.getter(v20, v21);
  outlined consume of Environment<Bool?>.Content(v20, v21);
  outlined release of BorderedButtonStyle_Phone((uint64_t)&v111);
  if (v17 & 1) != 0 && (BYTE8(v111))
  {
    unint64_t v31 = static Color.white.getter();
  }
  else
  {
    long long v22 = *(_OWORD *)(a2 + 208);
    long long v105 = *(_OWORD *)(a2 + 192);
    long long v106 = v22;
    long long v107 = *(_OWORD *)(a2 + 224);
    char v108 = *(unsigned char *)(a2 + 240);
    long long v23 = *(_OWORD *)(a2 + 144);
    long long v101 = *(_OWORD *)(a2 + 128);
    long long v102 = v23;
    long long v24 = *(_OWORD *)(a2 + 176);
    long long v103 = *(_OWORD *)(a2 + 160);
    long long v104 = v24;
    long long v25 = *(_OWORD *)(a2 + 80);
    long long v97 = *(_OWORD *)(a2 + 64);
    long long v98 = v25;
    long long v26 = *(_OWORD *)(a2 + 112);
    long long v99 = *(_OWORD *)(a2 + 96);
    long long v100 = v26;
    long long v27 = *(_OWORD *)(a2 + 16);
    long long v94 = *(_OWORD *)a2;
    long long v95 = v27;
    long long v28 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)uint64_t v96 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v96[16] = v28;
    ResolvedBorderedButton.colorSpec.getter((uint64_t)&v89);
    uint64_t v29 = v90;
    unsigned __int8 v30 = v91;
    unint64_t v31 = v93;
    outlined copy of BorderedButtonColorSpec.LabelStyle(v93);
    swift_release();
    outlined consume of Material?(v29, v30);
    outlined consume of BorderedButtonColorSpec.LabelStyle(v31);
  }
  outlined release of ResolvedBorderedButton(a2);
  long long v32 = *(_OWORD *)(a2 + 200);
  v109[0] = *(_OWORD *)(a2 + 184);
  v109[1] = v32;
  v110[0] = *(_OWORD *)(a2 + 216);
  *(_OWORD *)((char *)v110 + 9) = *(_OWORD *)(a2 + 225);
  long long v33 = *(_OWORD *)(a2 + 200);
  long long v94 = *(_OWORD *)(a2 + 184);
  long long v95 = v33;
  *(_OWORD *)uint64_t v96 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)&v96[9] = *(_OWORD *)(a2 + 225);
  double v34 = BorderedButtonSpec.padding.getter();
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  char v77 = static Edge.Set.all.getter();
  uint64_t v41 = static Alignment.center.getter();
  uint64_t v79 = v42;
  uint64_t v80 = v41;
  uint64_t v78 = *(void *)(a2 + 168);
  char v43 = *(unsigned char *)(a2 + 176);
  uint64_t v44 = *(void *)&v109[0];
  uint64_t v45 = BYTE8(v109[0]);
  outlined retain of ResolvedBorderedButton(a2);
  outlined retain of BorderedButtonSpec((uint64_t)v109, (void (*)(void, void))outlined copy of Environment<MenuActionDismissBehavior>.Content, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Environment<KeyboardShortcut?>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v44, v45);
  specialized Environment.wrappedValue.getter(v44, v45, &v94);
  outlined consume of Environment<Bool?>.Content(v44, v45);
  outlined retain of BorderedButtonSpec((uint64_t)v109, (void (*)(void, void))outlined consume of Environment<Bool?>.Content, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Environment<KeyboardShortcut?>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  char v46 = v94;
  static EdgeInsets.zero.getter();
  uint64_t v48 = v47;
  uint64_t v50 = v49;
  uint64_t v52 = v51;
  uint64_t v54 = v53;
  outlined release of ResolvedBorderedButton(a2);
  long long v55 = *(_OWORD *)(a2 + 208);
  long long v105 = *(_OWORD *)(a2 + 192);
  long long v106 = v55;
  long long v107 = *(_OWORD *)(a2 + 224);
  char v108 = *(unsigned char *)(a2 + 240);
  long long v56 = *(_OWORD *)(a2 + 144);
  long long v101 = *(_OWORD *)(a2 + 128);
  long long v102 = v56;
  long long v57 = *(_OWORD *)(a2 + 176);
  long long v103 = *(_OWORD *)(a2 + 160);
  long long v104 = v57;
  long long v58 = *(_OWORD *)(a2 + 80);
  long long v97 = *(_OWORD *)(a2 + 64);
  long long v98 = v58;
  long long v59 = *(_OWORD *)(a2 + 112);
  long long v99 = *(_OWORD *)(a2 + 96);
  long long v100 = v59;
  long long v60 = *(_OWORD *)(a2 + 16);
  long long v94 = *(_OWORD *)a2;
  long long v95 = v60;
  long long v61 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)uint64_t v96 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v96[16] = v61;
  ResolvedBorderedButton.colorSpec.getter((uint64_t)&v89);
  uint64_t v62 = v90;
  unsigned __int8 v63 = v91;
  unint64_t v64 = v93;
  uint64_t v65 = Color.opacity(_:)();
  swift_release();
  outlined consume of Material?(v62, v63);
  outlined consume of BorderedButtonColorSpec.LabelStyle(v64);
  long long v66 = *(_OWORD *)(a2 + 208);
  long long v105 = *(_OWORD *)(a2 + 192);
  long long v106 = v66;
  long long v107 = *(_OWORD *)(a2 + 224);
  char v108 = *(unsigned char *)(a2 + 240);
  long long v67 = *(_OWORD *)(a2 + 144);
  long long v101 = *(_OWORD *)(a2 + 128);
  long long v102 = v67;
  long long v68 = *(_OWORD *)(a2 + 176);
  long long v103 = *(_OWORD *)(a2 + 160);
  long long v104 = v68;
  long long v69 = *(_OWORD *)(a2 + 80);
  long long v97 = *(_OWORD *)(a2 + 64);
  long long v98 = v69;
  long long v70 = *(_OWORD *)(a2 + 112);
  long long v99 = *(_OWORD *)(a2 + 96);
  long long v100 = v70;
  long long v71 = *(_OWORD *)(a2 + 16);
  long long v94 = *(_OWORD *)a2;
  long long v95 = v71;
  long long v72 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)uint64_t v96 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v96[16] = v72;
  ResolvedBorderedButton.colorSpec.getter((uint64_t)&v89);
  uint64_t v73 = v90;
  LOBYTE(v62) = v91;
  char v74 = v92;
  unint64_t v75 = v93;
  swift_release();
  outlined consume of Material?(v73, v62);
  outlined consume of BorderedButtonColorSpec.LabelStyle(v75);
  *(void *)a3 = v87;
  *(void *)(a3 + 8) = v86;
  *(unsigned char *)(a3 + 16) = v85;
  *(void *)(a3 + 24) = v88;
  *(void *)(a3 + 32) = v84;
  *(void *)(a3 + 40) = v83;
  *(unsigned char *)(a3 + 48) = v82;
  double result = v81;
  *(double *)(a3 + 56) = v81;
  *(void *)(a3 + 64) = v31;
  *(unsigned char *)(a3 + 72) = v77;
  *(double *)(a3 + 80) = v34;
  *(void *)(a3 + 88) = v36;
  *(void *)(a3 + 96) = v38;
  *(void *)(a3 + 104) = v40;
  *(unsigned char *)(a3 + 112) = 0;
  *(unsigned char *)(a3 + 120) = v46;
  *(void *)(a3 + 128) = v78;
  *(unsigned char *)(a3 + 136) = v43;
  *(void *)(a3 + 144) = v48;
  *(void *)(a3 + 152) = v50;
  *(void *)(a3 + 160) = v52;
  *(void *)(a3 + 168) = v54;
  *(void *)(a3 + 176) = v65;
  *(_WORD *)(a3 + 184) = 256;
  *(unsigned char *)(a3 + 186) = v74;
  *(void *)(a3 + 192) = v80;
  *(void *)(a3 + 200) = v79;
  return result;
}

unint64_t outlined consume of BorderedButtonColorSpec.LabelStyle(unint64_t result)
{
  if (result >= 3) {
    return swift_release();
  }
  return result;
}

uint64_t outlined retain of BorderedButtonSpec(uint64_t a1, void (*a2)(void, void), void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 41);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v13 = *(unsigned __int8 *)(a1 + 40);
  a2(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
  a3(v7, v8, v9, v13, v10);
  a4(v11, v12);
  return a1;
}

__n128 ResolvedBorderedButton.colorSpec.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  char v5 = *(unsigned char *)(v1 + 16);
  uint64_t v6 = (long long *)(v1 + 17);
  outlined copy of Environment<Material?>.Content(*(void *)v1, v3, v5 & 1);
  specialized Environment.wrappedValue.getter(v4, v3, v5 & 1, &v20);
  outlined consume of Environment<Material?>.Content(v4, v3, v5 & 1);
  char v7 = ~(_BYTE)v21;
  outlined consume of Material?(v20, v21);
  long long v8 = v6[11];
  long long v33 = v6[10];
  long long v34 = v8;
  long long v9 = v6[13];
  long long v35 = v6[12];
  long long v36 = v9;
  long long v10 = v6[7];
  long long v29 = v6[6];
  long long v30 = v10;
  long long v11 = v6[9];
  long long v31 = v6[8];
  long long v32 = v11;
  long long v12 = v6[3];
  long long v25 = v6[2];
  long long v26 = v12;
  long long v13 = v6[5];
  long long v27 = v6[4];
  long long v28 = v13;
  long long v14 = v6[1];
  long long v23 = *v6;
  uint64_t v20 = v4;
  uint64_t v21 = v3;
  char v22 = v5;
  long long v24 = v14;
  if (v7) {
    ResolvedBorderedButton.materialBackgroundSpec.getter((uint64_t)&v37);
  }
  else {
    ResolvedBorderedButton.opaqueBackgroundSpec.getter((uint64_t)&v37);
  }
  __n128 result = v38;
  long long v16 = v39;
  char v17 = v40;
  uint64_t v18 = v41;
  long long v19 = v42;
  *(void *)a1 = v37;
  *(__n128 *)(a1 + 8) = result;
  *(_OWORD *)(a1 + 24) = v16;
  *(unsigned char *)(a1 + 40) = v17;
  *(void *)(a1 + 48) = v18;
  *(_OWORD *)(a1 + 56) = v19;
  return result;
}

uint64_t outlined copy of Material?(uint64_t a1, unsigned __int8 a2)
{
  if (a2 != 0xFF) {
    return outlined copy of Material.ID(a1, a2);
  }
  return a1;
}

double ResolvedBorderedButton.opaqueBackgroundSpec.getter@<D0>(uint64_t a1@<X8>)
{
  long long v3 = v1[13];
  long long v70 = v1[12];
  long long v71 = v3;
  long long v72 = v1[14];
  char v73 = *((unsigned char *)v1 + 240);
  long long v4 = v1[9];
  long long v66 = v1[8];
  long long v67 = v4;
  long long v5 = v1[11];
  long long v68 = v1[10];
  long long v69 = v5;
  long long v6 = v1[5];
  long long v62 = v1[4];
  long long v63 = v6;
  long long v7 = v1[7];
  long long v64 = v1[6];
  long long v65 = v7;
  long long v8 = v1[1];
  long long v58 = *v1;
  long long v59 = v8;
  long long v9 = v1[3];
  long long v60 = v1[2];
  long long v61 = v9;
  uint64_t v10 = v9;
  outlined copy of Environment<MenuActionDismissBehavior>.Content(*((void *)&v60 + 1), v9);
  char v11 = specialized Environment.wrappedValue.getter(*((uint64_t *)&v60 + 1), v10);
  outlined consume of Environment<Bool?>.Content(*((void *)&v60 + 1), v10);
  if ((v11 & 1) == 0)
  {
    double v25 = 0.75;
    double v26 = 1.0;
    uint64_t v20 = 1;
    uint64_t v21 = static Color.secondarySystemFill.getter();
    goto LABEL_11;
  }
  long long v12 = v1[13];
  v56[12] = v1[12];
  v56[13] = v12;
  v56[14] = v1[14];
  char v57 = *((unsigned char *)v1 + 240);
  long long v13 = v1[9];
  v56[8] = v1[8];
  v56[9] = v13;
  long long v14 = v1[11];
  v56[10] = v1[10];
  v56[11] = v14;
  long long v15 = v1[5];
  v56[4] = v1[4];
  v56[5] = v15;
  long long v16 = v1[7];
  v56[6] = v1[6];
  v56[7] = v16;
  long long v17 = v1[1];
  v56[0] = *v1;
  v56[1] = v17;
  long long v18 = v1[3];
  _OWORD v56[2] = v1[2];
  v56[3] = v18;
  unint64_t v19 = ResolvedBorderedButton.resolvedTint.getter();
  uint64_t v20 = v19;
  if (!(v19 >> 62))
  {
    uint64_t v29 = static Color.secondarySystemFill.getter();
    uint64_t v30 = *((void *)&v59 + 1);
    uint64_t v31 = v60;
    outlined copy of Environment<MenuActionDismissBehavior>.Content(*((void *)&v59 + 1), v60);
    specialized Environment.wrappedValue.getter(*((uint64_t *)&v59 + 1), v60, v56);
    outlined consume of Environment<Bool?>.Content(v30, v31);
    char v32 = v56[0];
    uint64_t v33 = *((void *)&v62 + 1);
    uint64_t v34 = v63;
    outlined copy of Environment<MenuActionDismissBehavior>.Content(*((void *)&v62 + 1), v63);
    char v35 = specialized Environment.wrappedValue.getter(v33, v34);
    outlined consume of Environment<Bool?>.Content(v33, v34);
    BOOL v37 = (v35 & 1) == 0 && v35 != 2;
    if ((v32 & 1) == 0)
    {
      if (!v37)
      {
        if (static Color.yellow.getter() != v20) {
          dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
        }
        swift_release();
        uint64_t v53 = Color.opacity(_:)();
        swift_release();
        uint64_t v29 = v53;
      }
      if (BYTE3(v63)) {
        double v25 = 0.75;
      }
      else {
        double v25 = 1.0;
      }
      if (BYTE3(v63)) {
        double v26 = 0.65;
      }
      else {
        double v26 = 1.0;
      }
      uint64_t v21 = v29;
      goto LABEL_11;
    }
    if (v37)
    {
      swift_retain();
      uint64_t v21 = v29;
      goto LABEL_54;
    }
    if (static Color.red.getter() != v20)
    {
      char v46 = dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
      swift_release();
      if (v46)
      {
LABEL_53:
        uint64_t v21 = Color.opacity(_:)();
LABEL_54:
        if (BYTE3(v63) == 1)
        {
          LOBYTE(v56[0]) = 0;
          double v25 = 1.0;
          Color.init(_:white:opacity:)();
          uint64_t v51 = Color.over(_:)();
          swift_release();
          swift_release();
          swift_release();
          double v26 = 1.4;
          uint64_t v20 = v51;
        }
        else
        {
          swift_release();
          double v26 = 1.0;
          double v25 = 1.0;
        }
        goto LABEL_11;
      }
      if (static Color.pink.getter() != v20)
      {
        dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
        swift_release();
        goto LABEL_53;
      }
    }
    swift_release();
    goto LABEL_53;
  }
  if (v19 >> 62 == 1)
  {
    uint64_t v21 = v19 & 0x3FFFFFFFFFFFFFFFLL;
    outlined copy of Environment<MenuActionDismissBehavior>.Content(*((void *)&v62 + 1), v63);
    char v22 = specialized Environment.wrappedValue.getter(*((uint64_t *)&v62 + 1), v63);
    outlined consume of Environment<Bool?>.Content(*((void *)&v62 + 1), v63);
    uint64_t v20 = 0;
    if (v22 != 2 && (v22 & 1) == 0)
    {
      swift_retain();
      uint64_t v20 = v21;
    }
    if (BYTE3(v63) == 1)
    {
      uint64_t v23 = *((void *)&v59 + 1);
      uint64_t v24 = v60;
      outlined copy of Environment<MenuActionDismissBehavior>.Content(*((void *)&v59 + 1), v60);
      specialized Environment.wrappedValue.getter(*((uint64_t *)&v59 + 1), v60, v56);
      outlined consume of Environment<Bool?>.Content(v23, v24);
      double v25 = 0.75;
      if (LOBYTE(v56[0]) == 1)
      {
        LOBYTE(v56[0]) = 0;
        double v26 = 1.0;
        Color.init(_:white:opacity:)();
        uint64_t v27 = Color.over(_:)();
        swift_release();
        swift_release();
        uint64_t v21 = v27;
      }
      else
      {
        double v26 = 0.75;
      }
      goto LABEL_11;
    }
    outlined copy of Environment<MenuActionDismissBehavior>.Content(*((void *)&v62 + 1), v63);
    specialized Environment.wrappedValue.getter(*((uint64_t *)&v62 + 1), v63);
    outlined consume of Environment<Bool?>.Content(*((void *)&v62 + 1), v63);
    double v26 = 1.0;
    uint64_t v42 = Color.opacity(_:)();
    swift_release();
LABEL_51:
    uint64_t v21 = v42;
    double v25 = 1.0;
    goto LABEL_11;
  }
  uint64_t v21 = static Color.secondarySystemFill.getter();
  int v38 = BYTE1(v63);
  char v39 = BYTE2(v63);
  if (BYTE3(v63) == 1)
  {
    uint64_t v40 = *((void *)&v59 + 1);
    uint64_t v41 = v60;
    outlined copy of Environment<MenuActionDismissBehavior>.Content(*((void *)&v59 + 1), v60);
    specialized Environment.wrappedValue.getter(*((uint64_t *)&v59 + 1), v60, v56);
    outlined consume of Environment<Bool?>.Content(v40, v41);
    if (v56[0])
    {
      LOBYTE(v56[0]) = 0;
      Color.init(_:white:opacity:)();
      uint64_t v42 = Color.over(_:)();
      swift_release();
      LOBYTE(v56[0]) = 0;
      Color.init(_:white:opacity:)();
      if (v38 == 1) {
        char v43 = v39;
      }
      else {
        char v43 = 1;
      }
      if (v43) {
        static Color.accentColor.getter();
      }
      else {
        static Color.red.getter();
      }
      uint64_t v20 = Color.over(_:)();
      swift_release();
      swift_release();
      swift_release();
      double v26 = 1.0;
      goto LABEL_51;
    }
    if (v38 == 1) {
      char v47 = v39;
    }
    else {
      char v47 = 1;
    }
    if (v47) {
      uint64_t v48 = static Color.accentColor.getter();
    }
    else {
      uint64_t v48 = static Color.red.getter();
    }
    uint64_t v20 = v48;
    double v26 = 0.75;
    double v25 = 0.75;
  }
  else
  {
    outlined copy of Environment<MenuActionDismissBehavior>.Content(*((void *)&v62 + 1), v63);
    char v44 = specialized Environment.wrappedValue.getter(*((uint64_t *)&v62 + 1), v63);
    outlined consume of Environment<Bool?>.Content(*((void *)&v62 + 1), v63);
    if (v44)
    {
      if (BYTE1(v63) == 1) {
        char v49 = BYTE2(v63);
      }
      else {
        char v49 = 1;
      }
      outlined retain of ResolvedBorderedButton((uint64_t)&v58);
      if (v49)
      {
        static Color.accentColor.getter();
        uint64_t v50 = static Color.accentColor.getter();
      }
      else
      {
        static Color.red.getter();
        uint64_t v50 = static Color.red.getter();
      }
      uint64_t v52 = v50;
      outlined release of ResolvedBorderedButton((uint64_t)&v58);
      if (v52 == static Color.yellow.getter())
      {
        swift_release_n();
      }
      else
      {
        dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
        swift_release();
        swift_release();
      }
      uint64_t v45 = Color.opacity(_:)();
      swift_release();
    }
    else
    {
      swift_retain();
      uint64_t v45 = v21;
    }
    if (v38 == 1) {
      char v54 = v39;
    }
    else {
      char v54 = 1;
    }
    outlined retain of ResolvedBorderedButton((uint64_t)&v58);
    if (v54) {
      uint64_t v55 = static Color.accentColor.getter();
    }
    else {
      uint64_t v55 = static Color.red.getter();
    }
    uint64_t v20 = v55;
    swift_release();
    outlined release of ResolvedBorderedButton((uint64_t)&v58);
    double v26 = 1.0;
    uint64_t v21 = v45;
    double v25 = 1.0;
  }
LABEL_11:
  *(void *)a1 = v21;
  *(double *)(a1 + 8) = v26;
  *(void *)(a1 + 16) = 0x3FF0000000000000;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = xmmword_188368AE0;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = v20;
  *(double *)(a1 + 56) = v25;
  *(void *)(a1 + 64) = 0x3FF0000000000000;
  return result;
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t (*a4)(void)@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t (*a7)(void)@<X6>, uint64_t *a8@<X8>)
{
  if (a3)
  {
    *a8 = a1;
    a8[1] = a2;
    return outlined copy of Environment<RenameAction?>.Content(a1, a2, 1, a4);
  }
  else
  {
    outlined copy of Environment<RenameAction?>.Content(a1, a2, 0, a4);
    os_log_type_t v13 = static os_log_type_t.fault.getter();
    long long v14 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v14, v13))
    {
      unint64_t v19 = a7;
      long long v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      uint64_t v20 = v16;
      *(_DWORD *)long long v15 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a5, a6, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v14, v13, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v16, -1, -1);
      long long v17 = v15;
      a7 = v19;
      MEMORY[0x18C119C60](v17, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<TriggerSubmitAction?>.Content(a1, a2, 0, a7);
    swift_release();
    return swift_release();
  }
}

uint64_t outlined copy of Environment<RenameAction?>.Content(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(void))
{
  if (a3) {
    return a4();
  }
  else {
    return swift_retain();
  }
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  return specialized Environment.wrappedValue.getter(a1, a2, a3, (uint64_t (*)(void))outlined copy of Material?, 0xD000000000000012, 0x8000000188328400, (uint64_t (*)(void))outlined consume of Material?, a4);
}

{
  os_log_type_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t vars8;

  if (a3)
  {
    *a4 = a1;
    a4[1] = a2;
    return outlined copy of Environment<EnvironmentValues>.Content(a1, a2, 1);
  }
  else
  {
    outlined copy of Environment<EnvironmentValues>.Content(a1, a2, 0);
    long long v6 = static os_log_type_t.fault.getter();
    long long v7 = static Log.runtimeIssuesLog.getter();
    long long v8 = v6;
    if (os_log_type_enabled(v7, v6))
    {
      long long v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      long long v12 = v10;
      *(_DWORD *)long long v9 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x80000001883282E0, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v7, v8, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v10, -1, -1);
      MEMORY[0x18C119C60](v9, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<EnvironmentValues>.Content(a1, a2, 0);
    swift_release();
    return swift_release();
  }
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, a3, (uint64_t (*)(void))outlined copy of AppIntentExecutor?, 0xD000000000000016, 0x80000001883281F0, (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, a4);
}

uint64_t outlined release of ResolvedBorderedButton(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 80);
  unsigned int v12 = *(unsigned __int8 *)(a1 + 112);
  uint64_t v13 = *(void *)(a1 + 104);
  uint64_t v14 = *(void *)(a1 + 120);
  uint64_t v17 = *(void *)(a1 + 136);
  char v15 = *(unsigned char *)(a1 + 129);
  unsigned int v16 = *(unsigned __int8 *)(a1 + 144);
  uint64_t v19 = *(void *)(a1 + 152);
  unsigned int v18 = *(unsigned __int8 *)(a1 + 160);
  unsigned int v21 = *(unsigned __int8 *)(a1 + 192);
  uint64_t v24 = *(void *)(a1 + 208);
  uint64_t v25 = *(void *)(a1 + 200);
  uint64_t v22 = *(void *)(a1 + 184);
  uint64_t v23 = *(void *)(a1 + 216);
  uint64_t v28 = *(void *)(a1 + 232);
  char v26 = *(unsigned char *)(a1 + 225);
  unsigned int v27 = *(unsigned __int8 *)(a1 + 240);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 128);
  unsigned int v20 = *(unsigned __int8 *)(a1 + 224);
  outlined consume of Environment<Material?>.Content(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  outlined consume of Environment<Bool?>.Content(v2, v3);
  outlined consume of Environment<Bool?>.Content(v4, v5);
  outlined consume of Environment<Bool?>.Content(v6, v7);
  outlined consume of Environment<Bool?>.Content(v8, v9);
  swift_release();
  outlined consume of Environment<Bool?>.Content(v13, v12);
  outlined consume of Environment<CGFloat?>.Content(v14, v10, v15);
  outlined consume of Environment<Bool?>.Content(v17, v16);
  outlined consume of Environment<Color?>.Content(v19, v18);
  outlined consume of Environment<Bool?>.Content(v22, v21);
  outlined consume of Environment<KeyboardShortcut?>.Content(v25, v24, v23, v20, v26);
  outlined consume of Environment<Bool?>.Content(v28, v27);
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = *(unsigned char *)(a1 + 73);
  uint64_t v13 = *(void *)(a1 + 80);
  unsigned int v12 = *(unsigned __int8 *)(a1 + 88);
  unsigned int v18 = *(void *)(a1 + 120);
  uint64_t v19 = *(void *)(a1 + 112);
  unsigned int v16 = *(void *)(a1 + 96);
  uint64_t v17 = *(void *)(a1 + 128);
  unsigned int v20 = *(unsigned char *)(a1 + 137);
  unsigned int v21 = *(unsigned __int8 *)(a1 + 152);
  uint64_t v22 = *(void *)(a1 + 144);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 72);
  uint64_t v14 = *(unsigned __int8 *)(a1 + 136);
  char v15 = *(unsigned __int8 *)(a1 + 104);
  outlined consume of Environment<Bool?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
  outlined consume of Environment<Bool?>.Content(v2, v3);
  outlined consume of Environment<Bool?>.Content(v4, v5);
  outlined consume of Environment<Color?>.Content(v6, v7);
  outlined consume of Environment<CGFloat?>.Content(v8, v10, v9);
  outlined consume of Environment<Bool?>.Content(v13, v12);
  outlined consume of Environment<Bool?>.Content(v16, v15);
  outlined consume of Environment<KeyboardShortcut?>.Content(v19, v18, v17, v14, v20);
  outlined consume of Environment<Bool?>.Content(v22, v21);
  swift_release();
  return a1;
}

uint64_t outlined consume of Environment<Material?>.Content(uint64_t a1, unsigned __int8 a2, char a3)
{
  if (a3) {
    return outlined consume of Material?(a1, a2);
  }
  else {
    return swift_release();
  }
}

uint64_t outlined release of BorderedButtonStyle_Phone(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  char v5 = *(unsigned char *)(a1 + 41);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 72);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 40);
  swift_release();
  outlined consume of Environment<Bool?>.Content(v2, v3);
  outlined consume of Environment<CGFloat?>.Content(v4, v10, v5);
  outlined consume of Environment<Bool?>.Content(v6, v7);
  outlined consume of Environment<Color?>.Content(v8, v9);
  return a1;
}

uint64_t outlined retain of BorderedButtonStyle_Phone(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  char v5 = *(unsigned char *)(a1 + 41);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 72);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 40);
  swift_retain();
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v2, v3);
  outlined copy of Environment<CGFloat?>.Content(v4, v10, v5);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v6, v7);
  outlined copy of Environment<Color?>.Content(v8, v9);
  return a1;
}

unint64_t outlined copy of BorderedButtonColorSpec.LabelStyle(unint64_t result)
{
  if (result >= 3) {
    return swift_retain();
  }
  return result;
}

double BorderedButtonSpec.padding.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *((unsigned __int8 *)v0 + 8);
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = *((unsigned __int8 *)v0 + 40);
  char v7 = *((unsigned char *)v0 + 41);
  uint64_t v8 = v0[6];
  uint64_t v9 = *((unsigned __int8 *)v0 + 56);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(*v0, v2);
  outlined copy of Environment<KeyboardShortcut?>.Content(v3, v4, v5, v6, v7);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v8, v9);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v1, v2);
  specialized Environment.wrappedValue.getter(v1, v2, &v14);
  outlined consume of Environment<Bool?>.Content(v1, v2);
  outlined consume of Environment<Bool?>.Content(v1, v2);
  outlined consume of Environment<KeyboardShortcut?>.Content(v3, v4, v5, v6, v7);
  outlined consume of Environment<Bool?>.Content(v8, v9);
  double v10 = 15.0;
  if (v14 - 3 >= 2) {
    double v10 = 7.0;
  }
  if (v14 >= 2u) {
    double v11 = v10;
  }
  else {
    double v11 = 5.0;
  }
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v1, v2);
  outlined copy of Environment<KeyboardShortcut?>.Content(v3, v4, v5, v6, v7);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v8, v9);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v8, v9);
  specialized Environment.wrappedValue.getter(v8, v9, &v13);
  outlined consume of Environment<Bool?>.Content(v8, v9);
  outlined consume of Environment<Bool?>.Content(v1, v2);
  outlined consume of Environment<KeyboardShortcut?>.Content(v3, v4, v5, v6, v7);
  outlined consume of Environment<Bool?>.Content(v8, v9);
  return v11;
}

uint64_t BorderedButtonSpec.defaultFont.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *((unsigned __int8 *)v0 + 8);
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  char v6 = *((unsigned char *)v0 + 41);
  uint64_t v7 = v0[6];
  uint64_t v8 = *((unsigned __int8 *)v0 + 56);
  uint64_t v9 = *((unsigned __int8 *)v0 + 40);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(*v0, v2);
  outlined copy of Environment<KeyboardShortcut?>.Content(v3, v4, v5, v9, v6);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v7, v8);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v1, v2);
  specialized Environment.wrappedValue.getter(v1, v2, &v12);
  outlined consume of Environment<Bool?>.Content(v1, v2);
  outlined consume of Environment<Bool?>.Content(v1, v2);
  outlined consume of Environment<KeyboardShortcut?>.Content(v3, v4, v5, v9, v6);
  outlined consume of Environment<Bool?>.Content(v7, v8);
  if (v12 < 2u) {
    char v10 = 5;
  }
  else {
    char v10 = 6;
  }
  char v22 = v10;
  char v21 = 4;
  uint64_t v12 = v1;
  char v13 = v2;
  uint64_t v14 = v3;
  uint64_t v15 = v4;
  uint64_t v16 = v5;
  char v17 = v9;
  char v18 = v6;
  uint64_t v19 = v7;
  char v20 = v8;
  if (BorderedButtonSpec.isDefault.getter()) {
    static Font.Weight.bold.getter();
  }
  else {
    static Font.Weight.regular.getter();
  }
  return static Font.system(_:design:weight:)();
}

BOOL BorderedButtonSpec.isDefault.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 40);
  int v5 = *(unsigned __int8 *)(v0 + 41);
  outlined copy of Environment<KeyboardShortcut?>.Content(v1, v2, v3, v4, v5);
  specialized Environment.wrappedValue.getter(v1, v2, v3, v4 | (v5 << 8), (uint64_t)&v11);
  outlined consume of Environment<KeyboardShortcut?>.Content(v1, v2, v3, v4, v5);
  if (!v12)
  {
    swift_bridgeObjectRelease();
LABEL_14:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v6 = v13;
  int v7 = v14;
  BOOL v8 = v11 == 13 && v12 == 0xE100000000000000;
  if (!v8 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  return !v6 && v7 == 0;
}

uint64_t static ViewThatFits._makeView(view:inputs:)()
{
  return static View.makeDebuggableView(view:inputs:)();
}

uint64_t closure #1 in static ViewThatFits._makeView(view:inputs:)(uint64_t a1)
{
  _OWORD v5[2] = type metadata accessor for ViewThatFits();
  uint64_t v6 = type metadata accessor for _VariadicView.Tree();
  uint64_t v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v5, v6, MEMORY[0x1E4FBC248], v2, MEMORY[0x1E4FBC278], v3);
  return v7;
}

uint64_t type metadata accessor for ViewThatFits()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for _LazyLayoutViewCache()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t protocol witness for StyleableView.configuration.getter in conformance ResolvedToggleStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  char v4 = *((unsigned char *)v1 + 16);
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  char v7 = *((unsigned char *)v1 + 40);
  char v8 = *((unsigned char *)v1 + 41);
  uint64_t v9 = v1[6];
  uint64_t v10 = v1[7];
  uint64_t v11 = v1[8];
  uint64_t v12 = (void *)v1[9];
  uint64_t v14 = v1[10];
  uint64_t v13 = v1[11];
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = v7;
  *(unsigned char *)(a1 + 41) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v12;
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v13;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return outlined copy of ToggleStyleConfiguration.Effect(v9, v10, v11, v12);
}

uint64_t initializeWithCopy for PositionedNavigationDestinationProcessor.PollingRule(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 4) = *(void *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 45) = *(void *)(a2 + 45);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t UIKitBarButtonItemGroup.didChangeGroupItem(from:)(uint64_t a1)
{
  unint64_t v185 = (void *)a1;
  uint64_t v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  type metadata accessor for ToolbarStorage.Item?(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8);
  v179 = (char *)&v152 - v4;
  uint64_t v180 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
  uint64_t v172 = *(void *)(v180 - 8);
  MEMORY[0x1F4188790](v180);
  uint64_t v6 = (char *)&v152 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v152 - v8;
  type metadata accessor for ToolbarStorage.Item?(0, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item, v2);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v174 = (uint64_t)&v152 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v183 = (uint64_t)&v152 - v13;
  uint64_t v173 = type metadata accessor for ToolbarStorage.Item(0);
  uint64_t v184 = *(void *)(v173 - 8);
  MEMORY[0x1F4188790](v173);
  uint64_t v176 = (uint64_t)&v152 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  v182 = (char *)&v152 - v16;
  type metadata accessor for ToolbarStorage.Item?(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem, v2);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v152 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  char v22 = (char *)&v152 - v21;
  uint64_t v23 = type metadata accessor for ToolbarStorage.GroupItem(0);
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  v175 = (char *)&v152 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v178 = (char *)&v152 - v27;
  MEMORY[0x1F4188790](v28);
  uint64_t v177 = (uint64_t)&v152 - v29;
  MEMORY[0x1F4188790](v30);
  uint64_t v181 = (char *)&v152 - v31;
  double v33 = MEMORY[0x1F4188790](v32);
  char v35 = (char *)&v152 - v34;
  uint64_t result = MEMORY[0x18C119DF0](&v1[OBJC_IVAR____TtC7SwiftUI23UIKitBarButtonItemGroup_viewController], v33);
  if (result)
  {
    BOOL v37 = (void *)result;
    unint64_t v169 = v6;
    uint64_t v171 = OBJC_IVAR____TtC7SwiftUI23UIKitBarButtonItemGroup_edge;
    int v170 = v1[OBJC_IVAR____TtC7SwiftUI23UIKitBarButtonItemGroup_edge];
    unint64_t v186 = (unsigned __int8 *)v1;
    uint64_t v38 = (uint64_t)&v1[OBJC_IVAR____TtC7SwiftUI23UIKitBarButtonItemGroup_groupItem];
    swift_beginAccess();
    _s7SwiftUI16PlatformItemListV0D0VSgWOcTm_0(v38, (uint64_t)v22, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem);
    char v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
    if (v39(v22, 1, v23) == 1)
    {

      return _s7SwiftUI16PlatformItemListV0D0VSgWOhTm_0((uint64_t)v22, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem);
    }
    _s7SwiftUI16PlatformItemListV0D0VWObTm_2((uint64_t)v22, (uint64_t)v35, type metadata accessor for ToolbarStorage.GroupItem);
    _s7SwiftUI16PlatformItemListV0D0VSgWOcTm_0((uint64_t)v185, (uint64_t)v19, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem);
    unsigned int v40 = v39(v19, 1, v23);
    uint64_t v159 = v23;
    v160 = v9;
    uint64_t v163 = v37;
    if (v40 == 1)
    {
      _s7SwiftUI16PlatformItemListV0D0VSgWOhTm_0((uint64_t)v19, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem);
      uint64_t v41 = MEMORY[0x1E4FBC860];
    }
    else
    {
      uint64_t v42 = *((void *)v19 + 9);
      swift_bridgeObjectRetain();
      outlined destroy of (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)((uint64_t)v19, type metadata accessor for ToolbarStorage.GroupItem);
      uint64_t v41 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI14ToolbarStorageV4ItemVG_AH2IDVs5NeverOTg503_s7d18UI23UIKitBarButtonh30GroupC09didChangegF04fromyAA14fg20V0gF0VSg_tFAG2IDVAG0V52Vcfu_32d237e9c4ce9601f416b0dbfaac74f787AnLTf3nnnpk_nTf1cn_nTm(v42);
      swift_bridgeObjectRelease();
    }
    v164 = v35;
    uint64_t v43 = swift_bridgeObjectRetain();
    uint64_t v44 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI14ToolbarStorageV4ItemVG_AH2IDVs5NeverOTg503_s7d18UI23UIKitBarButtonh30GroupC09didChangegF04fromyAA14fg20V0gF0VSg_tFAG2IDVAG0V52Vcfu_32d237e9c4ce9601f416b0dbfaac74f787AnLTf3nnnpk_nTf1cn_nTm(v43);
    uint64_t v162 = 0;
    swift_bridgeObjectRelease();
    *(void *)&long long v190 = MEMORY[0x1E4FBC860];
    specialized CollectionChanges.formChanges<A, B>(from:to:)(v41, v44);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v45 = v190;
    uint64_t v46 = specialized CollectionChanges.Projection.init(kind:changes:)(0, v190);
    uint64_t v48 = v47;
    uint64_t v50 = v49;
    uint64_t v52 = v51;
    uint64_t v161 = v45;
    swift_bridgeObjectRetain();
    id v53 = v186;
    if (v52 == v50)
    {
LABEL_21:
      swift_bridgeObjectRelease();
      LODWORD(v167) = specialized CollectionChanges.Projection.init(kind:changes:)(1, v161);
      uint64_t v168 = v71;
      unint64_t v185 = (void *)v72;
      if (v57 == v72)
      {
        swift_bridgeObjectRetain();
        char v74 = v163;
        uint64_t v73 = (uint64_t)v164;
        uint64_t v76 = (uint64_t)v179;
        unint64_t v75 = v180;
LABEL_23:
        swift_bridgeObjectRelease();
        int v77 = specialized CollectionChanges.Projection.init(kind:changes:)(2, v161);
        uint64_t v157 = v80;
        unint64_t v65 = (unint64_t)v186;
        if (v78 == v79)
        {
LABEL_24:
          swift_bridgeObjectRelease();
          _s7SwiftUI16PlatformItemListV0D0VSgWOcTm_0(v73 + *(int *)(v159 + 44), v76, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
          if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v172 + 48))(v76, 1, v75) == 1)
          {
            _s7SwiftUI16PlatformItemListV0D0VSgWOhTm_0(v76, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
          }
          else
          {
            uint64_t v138 = (uint64_t)v160;
            _s7SwiftUI16PlatformItemListV0D0VWObTm_2(v76, (uint64_t)v160, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
            uint64_t v139 = (uint64_t)v169;
            _s7SwiftUI16PlatformItemListV0D0VWOcTm_3(v138, (uint64_t)v169, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
            if (swift_getEnumCaseMultiPayload() != 1)
            {
              long long v140 = *(_OWORD *)(v139 + 48);
              long long v192 = *(_OWORD *)(v139 + 32);
              long long v193 = v140;
              long long v194 = *(_OWORD *)(v139 + 64);
              uint64_t v195 = *(void *)(v139 + 80);
              long long v141 = *(_OWORD *)(v139 + 16);
              long long v190 = *(_OWORD *)v139;
              long long v191 = v141;
              id v142 = objc_msgSend((id)v65, sel_representativeItem);
              if (v142)
              {

                id v143 = objc_msgSend(v186, sel_representativeItem);
                if (v143)
                {
                  uint64_t v144 = v143;
                  type metadata accessor for UIKitBarButtonItem(0);
                  uint64_t v145 = swift_dynamicCastClass();
                  if (v145)
                  {
                    uint64_t v146 = v145;
                    outlined init with copy of _ViewList_View((uint64_t)&v190, (uint64_t)v188);
                    uint64_t v147 = v146 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_listView;
                    swift_beginAccess();
                    uint64_t v148 = MEMORY[0x1E4F3F308];
                    outlined init with copy of _ViewList_View?(v147, (uint64_t)v187, &lazy cache variable for type metadata for _ViewList_View?, MEMORY[0x1E4F3F308]);
                    swift_beginAccess();
                    outlined assign with copy of _ViewList_View?((uint64_t)v188, v147, (uint64_t)&lazy cache variable for type metadata for _ViewList_View?, v148, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ToolbarItemPlacement.Role?);
                    swift_endAccess();
                    UIKitBarButtonItem.listView.didset();
                    _sypSgWOhTm_11((uint64_t)v188, &lazy cache variable for type metadata for _ViewList_View?, v148);
                    _sypSgWOhTm_11((uint64_t)v187, &lazy cache variable for type metadata for _ViewList_View?, v148);
                  }
                }
                goto LABEL_126;
              }
LABEL_125:
              uint64_t v149 = v163;
              id v150 = specialized static UIKitBarButtonItem.makeRepresentativeItem(view:context:)((uint64_t)&v190, v163, v170);
              objc_msgSend(v186, sel_setRepresentativeItem_, v150);

LABEL_126:
              outlined destroy of _ViewList_View((uint64_t)&v190);
              outlined destroy of (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)((uint64_t)v160, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
              return outlined destroy of (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)((uint64_t)v164, type metadata accessor for ToolbarStorage.GroupItem);
            }
            outlined destroy of (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)((uint64_t)v160, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
            outlined destroy of (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)(v139, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
            char v74 = v163;
            uint64_t v73 = (uint64_t)v164;
          }
          objc_msgSend((id)v65, sel_setRepresentativeItem_, 0);

          return outlined destroy of (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)(v73, type metadata accessor for ToolbarStorage.GroupItem);
        }
LABEL_68:
        unint64_t v101 = v78;
        uint64_t v156 = v157 + 32;
        uint64_t v167 = v184 + 48;
        uint64_t v168 = v184 + 56;
        uint64_t v165 = &v198;
        uint64_t v166 = (void *)(v176 + 104);
        uint64_t v153 = v157 + 104;
        uint64_t v161 = MEMORY[0x1E4FBC848] + 8;
        int v155 = v77;
        uint64_t v154 = v79;
        while (1)
        {
          if ((v101 & 0x8000000000000000) != 0) {
            goto LABEL_134;
          }
          unint64_t v102 = *(void *)(v157 + 16);
          uint64_t v103 = (uint64_t)v178;
          if (v101 >= v102) {
            goto LABEL_135;
          }
          uint64_t v104 = v156 + 40 * v101;
          if (*(unsigned __int8 *)(v104 + 32) < 2u)
          {
            *(void *)&long long v190 = 0;
            *((void *)&v190 + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(17);
            swift_bridgeObjectRelease();
            *(void *)&long long v190 = 0x2064696C61766E69;
            *((void *)&v190 + 1) = 0xEF203A7865646E69;
            *(void *)&v188[0] = v101;
            goto LABEL_143;
          }
          uint64_t v105 = *(void *)v104;
          uint64_t v106 = *(void *)(v104 + 8);
          uint64_t v107 = v101 + 1;
          if ((uint64_t)(v101 + 1) < v79) {
            break;
          }
          uint64_t v107 = v79;
LABEL_86:
          unint64_t v158 = v107;
          if (v105 != v106)
          {
            if (v106 >= v105)
            {
              unint64_t v109 = v105;
              uint64_t v181 = (char *)v105;
              uint64_t v177 = v106;
              if (v105 >= v106)
              {
LABEL_139:
                __break(1u);
LABEL_140:
                _fatalErrorMessage(_:_:file:line:flags:)();
                __break(1u);
LABEL_141:
                *(void *)&long long v190 = 0;
                *((void *)&v190 + 1) = 0xE000000000000000;
                swift_bridgeObjectRetain();
                _StringGuts.grow(_:)(23);
                swift_bridgeObjectRelease();
                *(void *)&long long v190 = 0xD000000000000015;
                *((void *)&v190 + 1) = 0x800000018832DE70;
                for (*(void *)&v188[0] = v65; ; *(void *)&v188[0] = v65)
                {
LABEL_143:
                  v151._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                  String.append(_:)(v151);
                  swift_bridgeObjectRelease();
                  _assertionFailure(_:_:file:line:flags:)();
                  __break(1u);
LABEL_144:
                  *(void *)&long long v190 = 0;
                  *((void *)&v190 + 1) = 0xE000000000000000;
                  _StringGuts.grow(_:)(17);
                  swift_bridgeObjectRelease();
                  *(void *)&long long v190 = 0x2064696C61766E69;
                  *((void *)&v190 + 1) = 0xEF203A7865646E69;
                }
              }
              while (2)
              {
                id v113 = objc_msgSend((id)v65, sel_barButtonItems);
                type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
                uint64_t v114 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

                if ((v114 & 0xC000000000000001) != 0)
                {
                  id v115 = (id)MEMORY[0x18C117680](v109, v114);
                }
                else
                {
                  if ((v109 & 0x8000000000000000) != 0) {
                    goto LABEL_128;
                  }
                  if (v109 >= *(void *)((v114 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                    goto LABEL_130;
                  }
                  id v115 = *(id *)(v114 + 8 * v109 + 32);
                }
                uint64_t v116 = (uint64_t)v115;
                swift_bridgeObjectRelease();
                type metadata accessor for UIKitBarButtonItem(0);
                uint64_t v117 = swift_dynamicCastClassUnconditional();
                int v118 = *(unsigned __int8 *)(v65 + v171);
                if (v118 == 2 || (v118 & 1) != 0)
                {
                  _s7SwiftUI16PlatformItemListV0D0VWOcTm_3((uint64_t)v164, v103, type metadata accessor for ToolbarStorage.GroupItem);
                  uint64_t v119 = (uint64_t)v175;
                }
                else
                {
                  _s7SwiftUI16PlatformItemListV0D0VWOcTm_3((uint64_t)v164, v103, type metadata accessor for ToolbarStorage.GroupItem);
                  uint64_t v119 = (uint64_t)v175;
                  if (v109)
                  {
                    outlined destroy of (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)(v103, type metadata accessor for ToolbarStorage.GroupItem);
                    char v120 = 2;
LABEL_105:
                    unint64_t v185 = (void *)v116;
                    unint64_t v65 = OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_edge;
                    *(unsigned char *)(v117 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_edge) = v120;
                    if (v105 < 0) {
                      goto LABEL_129;
                    }
                    uint64_t v123 = *((void *)v164 + 9);
                    if (v109 >= *(void *)(v123 + 16)) {
                      goto LABEL_131;
                    }
                    uint64_t v125 = v183;
                    uint64_t v124 = v184;
                    _s7SwiftUI16PlatformItemListV0D0VWOcTm_3(v123+ ((*(unsigned __int8 *)(v184 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v184 + 80))+ *(void *)(v184 + 72) * v109, v183, type metadata accessor for ToolbarStorage.Item);
                    uint64_t v126 = v173;
                    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v124 + 56))(v125, 0, 1, v173);
                    uint64_t v127 = v117 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_item;
                    swift_beginAccess();
                    v182 = v163;
                    uint64_t v128 = v117;
                    outlined assign with copy of _ViewList_View?(v125, v127, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.Item?, (uint64_t)type metadata accessor for ToolbarStorage.Item, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ToolbarStorage.Item?);
                    swift_endAccess();
                    uint64_t v129 = v127;
                    uint64_t v130 = v174;
                    _s7SwiftUI16PlatformItemListV0D0VSgWOcTm_0(v129, v174, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item);
                    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v124 + 48))(v130, 1, v126) == 1)
                    {
                      _s7SwiftUI16PlatformItemListV0D0VSgWOhTm_0(v130, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item);
                      uint64_t v110 = v185;
                      unint64_t v65 = (unint64_t)v186;
                      uint64_t v76 = (uint64_t)v179;
                      unint64_t v75 = v180;
                      uint64_t v111 = v177;
                      uint64_t v103 = (uint64_t)v178;
                      uint64_t v105 = (uint64_t)v181;
                      long long v112 = v182;
                    }
                    else
                    {
                      _s7SwiftUI16PlatformItemListV0D0VWObTm_2(v130, v176, type metadata accessor for ToolbarStorage.Item);
                      outlined init with copy of _ViewList_View((uint64_t)v166, (uint64_t)v188);
                      char v131 = *(unsigned char *)(v117 + v65);
                      swift_unknownObjectWeakInit();
                      swift_unknownObjectWeakAssign();
                      _s7SwiftUI16PlatformItemListV0D0VWObTm_2((uint64_t)v187, (uint64_t)v165, (uint64_t (*)(void))type metadata accessor for WeakBox<UIBarButtonItem>);
                      long long v192 = v188[2];
                      long long v193 = v188[3];
                      long long v194 = v188[4];
                      uint64_t v195 = v189;
                      long long v190 = v188[0];
                      long long v191 = v188[1];
                      char v196 = v131;
                      char v197 = 0;
                      uint64_t v132 = OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_host;
                      uint64_t v133 = *(void **)(v117 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_host);
                      outlined init with copy of BarItemView((uint64_t)&v190, (uint64_t)v188);
                      outlined init with copy of BarItemView((uint64_t)v188, (uint64_t)v187);
                      uint64_t v134 = (uint64_t)v133 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v133) + 0x60);
                      swift_beginAccess();
                      long long v135 = v133;
                      outlined assign with take of BarItemView((uint64_t)v187, v134);
                      swift_endAccess();
                      v187[0] = 1;
                      _s7SwiftUI16UIKitBarItemHostCyAA0dE4ViewVGMaTm_0(0, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
                      lazy protocol witness table accessor for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
                      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
                      outlined destroy of BarItemView((uint64_t)v188);

                      id v136 = objc_msgSend(*(id *)(v128 + v132), sel_window);
                      uint64_t v111 = v177;
                      if (v136)
                      {
                      }
                      else
                      {
                        MEMORY[0x1F4188790](0);
                        uint64_t v137 = v162;
                        static Update.ensure<A>(_:)();
                        uint64_t v162 = v137;
                      }
                      uint64_t v110 = v185;
                      unint64_t v65 = (unint64_t)v186;
                      uint64_t v76 = (uint64_t)v179;
                      unint64_t v75 = v180;
                      uint64_t v103 = (uint64_t)v178;
                      uint64_t v105 = (uint64_t)v181;
                      long long v112 = v182;
                      outlined destroy of BarItemView((uint64_t)&v190);
                      outlined destroy of (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)(v176, type metadata accessor for ToolbarStorage.Item);
                    }
                    ++v109;
                    _s7SwiftUI16PlatformItemListV0D0VSgWOhTm_0(v183, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item);

                    if (v111 == v109) {
                      goto LABEL_69;
                    }
                    continue;
                  }
                }
                break;
              }
              _s7SwiftUI16PlatformItemListV0D0VWOcTm_3(v103, v119, type metadata accessor for ToolbarStorage.GroupItem);
              if (v118)
              {
                uint64_t v121 = v117;
                uint64_t v122 = *(void *)(*(void *)(v119 + 72) + 16);
                outlined destroy of (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)(v103, type metadata accessor for ToolbarStorage.GroupItem);
                outlined destroy of (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)(v119, type metadata accessor for ToolbarStorage.GroupItem);
                BOOL v92 = v109 == v122 - 1;
                uint64_t v117 = v121;
                char v120 = v170;
                if (!v92) {
                  char v120 = 2;
                }
              }
              else
              {
                outlined destroy of (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)(v103, type metadata accessor for ToolbarStorage.GroupItem);
                outlined destroy of (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)(v119, type metadata accessor for ToolbarStorage.GroupItem);
                char v120 = v170;
              }
              goto LABEL_105;
            }
LABEL_138:
            __break(1u);
            goto LABEL_139;
          }
LABEL_69:
          unint64_t v101 = v158;
          uint64_t v79 = v154;
          char v74 = v163;
          uint64_t v73 = (uint64_t)v164;
          LOBYTE(v77) = v155;
          if (v158 == v154) {
            goto LABEL_24;
          }
        }
        if (v107 == v102)
        {
LABEL_142:
          *(void *)&long long v190 = 0;
          *((void *)&v190 + 1) = 0xE000000000000000;
          swift_bridgeObjectRetain();
          _StringGuts.grow(_:)(23);
          swift_bridgeObjectRelease();
          *(void *)&long long v190 = 0xD000000000000015;
          *((void *)&v190 + 1) = 0x800000018832DE70;
          *(void *)&v188[0] = v101;
          goto LABEL_143;
        }
        char v108 = (unsigned char *)(v153 + 40 * v101);
        while (v107 < (uint64_t)v102)
        {
          if (*v108)
          {
            if (*v108 == 1)
            {
              if (v77 == 1) {
                goto LABEL_86;
              }
            }
            else if (v77 == 2)
            {
              goto LABEL_86;
            }
          }
          else if (!(_BYTE)v77)
          {
            goto LABEL_86;
          }
          ++v107;
          v108 += 40;
          if (v102 == v107) {
            goto LABEL_142;
          }
        }
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
        goto LABEL_136;
      }
    }
    else
    {
      unint64_t v54 = v52;
      uint64_t v168 = v48;
      LODWORD(v167) = v46;
      uint64_t v165 = (uint64_t *)v52;
      uint64_t v166 = (void *)v50;
      while (1)
      {
        unint64_t v185 = (void *)specialized CollectionChanges.Projection.index(before:)(v54, v46, v48);
        uint64_t v55 = specialized CollectionChanges.Projection.subscript.getter((unint64_t)v185, v46, v48);
        if (v56 != v55) {
          break;
        }
LABEL_20:
        unint64_t v54 = (unint64_t)v185;
        uint64_t v48 = v168;
        uint64_t v46 = v167;
        if (v185 == v166) {
          goto LABEL_21;
        }
      }
      uint64_t v58 = v55;
      uint64_t v59 = v56;
      uint64_t v60 = -v56;
      while (v58 < v59)
      {
        id v61 = objc_msgSend(v53, sel_barButtonItems);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
        uint64_t v62 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *(void *)&long long v190 = v62;
        if (!isUniquelyReferenced_nonNull_bridgeObject || v62 < 0 || (v62 & 0x4000000000000000) != 0)
        {
          uint64_t v62 = specialized _ArrayBuffer._consumeAndCreateNew()(v62);
          *(void *)&long long v190 = v62;
        }
        uint64_t v64 = v59 - 1;
        unint64_t v65 = v62 & 0xFFFFFFFFFFFFFF8;
        unint64_t v66 = *(void *)(v65 + 16);
        if (v59 - 1 >= v66) {
          goto LABEL_27;
        }
        if ((uint64_t)(v60 + v66) < 0) {
          goto LABEL_140;
        }
        unint64_t v67 = v66 - 1;
        unint64_t v68 = v65 + 8 * v59;
        long long v69 = *(void **)(v68 + 24);
        memmove((void *)(v68 + 24), (const void *)(v68 + 32), 8 * (v60 + v66));
        *(void *)(v65 + 16) = v67;
        specialized Array._endMutation()();

        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v53 = v186;
        objc_msgSend(v186, sel_setBarButtonItems_, isa);

        ++v60;
        --v59;
        if (v58 == v64) {
          goto LABEL_20;
        }
      }
      __break(1u);
LABEL_27:
      __break(1u);
    }
    unint64_t v65 = v57;
    uint64_t v81 = v168;
    uint64_t v166 = (void *)(v168 + 32);
    swift_bridgeObjectRetain();
    uint64_t v165 = (uint64_t *)(v81 + 104);
    char v74 = v163;
    uint64_t v73 = (uint64_t)v164;
    uint64_t v83 = (uint64_t)v181;
    uint64_t v82 = (uint64_t)v182;
    while (1)
    {
      if ((v65 & 0x8000000000000000) != 0) {
        goto LABEL_132;
      }
      unint64_t v84 = *(void *)(v168 + 16);
      if (v65 >= v84) {
        goto LABEL_133;
      }
      uint64_t v85 = (uint64_t)v166 + 40 * v65;
      if (*(unsigned __int8 *)(v85 + 32) >= 2u) {
        goto LABEL_144;
      }
      uint64_t v76 = *(void *)v85;
      uint64_t v86 = *(void *)(v85 + 8);
      uint64_t v87 = (uint64_t)v185;
      if ((uint64_t)(v65 + 1) < (uint64_t)v185)
      {
        if (v65 + 1 == v84) {
          goto LABEL_141;
        }
        uint64_t v88 = &v165[5 * v65];
        uint64_t v87 = v65 + 1;
        while (v87 < (uint64_t)v84)
        {
          if (*(unsigned char *)v88)
          {
            if (*(unsigned char *)v88 == 1)
            {
              if (v167 == 1) {
                goto LABEL_44;
              }
            }
            else if (v167 == 2)
            {
              goto LABEL_44;
            }
          }
          else if (!(_BYTE)v167)
          {
            goto LABEL_44;
          }
          ++v87;
          v88 += 5;
          if (v84 == v87) {
            goto LABEL_141;
          }
        }
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
        goto LABEL_125;
      }
LABEL_44:
      if (v76 != v86) {
        break;
      }
LABEL_29:
      unint64_t v65 = v87;
      uint64_t v76 = (uint64_t)v179;
      unint64_t v75 = v180;
      if ((void *)v87 == v185) {
        goto LABEL_23;
      }
    }
    if (v86 >= v76)
    {
      if (v76 < v86)
      {
        while (1)
        {
          if (v76 < 0) {
            goto LABEL_123;
          }
          uint64_t v89 = *(void *)(v73 + 72);
          uint64_t v90 = v186;
          if ((unint64_t)v76 >= *(void *)(v89 + 16)) {
            goto LABEL_124;
          }
          _s7SwiftUI16PlatformItemListV0D0VWOcTm_3(v89+ ((*(unsigned __int8 *)(v184 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v184 + 80))+ *(void *)(v184 + 72) * v76, v82, type metadata accessor for ToolbarStorage.Item);
          int v91 = v90[v171];
          BOOL v92 = v91 != 2 && (v91 & 1) == 0;
          if (v92)
          {
            _s7SwiftUI16PlatformItemListV0D0VWOcTm_3(v73, v83, type metadata accessor for ToolbarStorage.GroupItem);
            if (v76)
            {
              outlined destroy of (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)(v83, type metadata accessor for ToolbarStorage.GroupItem);
              int v93 = 2;
              goto LABEL_61;
            }
          }
          else
          {
            _s7SwiftUI16PlatformItemListV0D0VWOcTm_3(v73, v83, type metadata accessor for ToolbarStorage.GroupItem);
          }
          uint64_t v94 = v177;
          _s7SwiftUI16PlatformItemListV0D0VWOcTm_3(v83, v177, type metadata accessor for ToolbarStorage.GroupItem);
          if (v91)
          {
            uint64_t v95 = *(void *)(*(void *)(v94 + 72) + 16);
            outlined destroy of (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)(v83, type metadata accessor for ToolbarStorage.GroupItem);
            outlined destroy of (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)(v94, type metadata accessor for ToolbarStorage.GroupItem);
            if (v76 == v95 - 1) {
              int v93 = v170;
            }
            else {
              int v93 = 2;
            }
          }
          else
          {
            outlined destroy of (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)(v83, type metadata accessor for ToolbarStorage.GroupItem);
            outlined destroy of (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)(v94, type metadata accessor for ToolbarStorage.GroupItem);
            int v93 = v170;
          }
LABEL_61:
          id v96 = v74;
          unint64_t v65 = (unint64_t)specialized static UIKitBarButtonItem.makeGroupItem(item:context:)(v82, v96, v93);
          id v97 = objc_msgSend(v186, sel_barButtonItems);
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
          unint64_t v75 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          *(void *)&long long v190 = v75;
          if (v75 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v100 = _CocoaArrayWrapper.endIndex.getter();
            int v77 = swift_bridgeObjectRelease();
            if (v100 < v76)
            {
LABEL_67:
              __break(1u);
              goto LABEL_68;
            }
          }
          else if (*(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10) < v76)
          {
            goto LABEL_67;
          }
          uint64_t v98 = v76 + 1;
          specialized Array.replaceSubrange<A>(_:with:)(v76, v76, v65);
          Class v99 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          objc_msgSend(v186, sel_setBarButtonItems_, v99);

          uint64_t v82 = (uint64_t)v182;
          outlined destroy of (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)((uint64_t)v182, type metadata accessor for ToolbarStorage.Item);
          uint64_t v76 = v98;
          BOOL v92 = v86 == v98;
          char v74 = v163;
          uint64_t v73 = (uint64_t)v164;
          uint64_t v83 = (uint64_t)v181;
          if (v92) {
            goto LABEL_29;
          }
        }
      }
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }
LABEL_136:
    __break(1u);
    goto LABEL_137;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ToolbarStorage.GroupItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187DC6C34);
}

void UIKitBarButtonItem.updatePlatformItem(_:)(uint64_t a1)
{
  type metadata accessor for ToolbarStorage.Item?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v15 - v4;
  if (*(void *)(a1 + 16))
  {
    PlatformItemList.mergedContentItem.getter(a1, (uint64_t)v5);
    uint64_t v6 = type metadata accessor for PlatformItemList.Item();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 0, 1, v6);
  }
  else
  {
    uint64_t v7 = type metadata accessor for PlatformItemList.Item();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v5, 1, 1, v7);
  }
  uint64_t v8 = (uint64_t)&v1[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_platformItem];
  swift_beginAccess();
  outlined assign with take of _ViewList_View?((uint64_t)v5, v8, (uint64_t)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t)type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ToolbarStorage.Item?);
  swift_endAccess();
  UIKitBarButtonItem.updateRepresentation()();
  char v9 = UIKitBarButtonItem.updateBridging()();
  uint64_t v10 = 0;
  if (v9) {
    goto LABEL_8;
  }
  id v11 = objc_msgSend(v1, sel_customView, 0);
  uint64_t v12 = OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_host;
  if (!v11
    || (id v13 = v11, v14 = *(id *)&v1[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_host], v11, v13 != v14))
  {
    uint64_t v10 = *(void *)&v1[v12];
LABEL_8:
    objc_msgSend(v1, sel_setCustomView_, v10);
  }
}

uint64_t outlined assign with take of _ViewList_View?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 40))(a2, a1, v8);
  return a2;
}

void UIKitBarButtonItem.updateRepresentation()()
{
  unint64_t v1 = v0;
  type metadata accessor for ToolbarStorage.Item?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v49 - v3;
  uint64_t v5 = type metadata accessor for PlatformItemList.Item();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  id v11 = (char *)&v49 - v10;
  uint64_t v12 = (void **)&v0[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_platformItem];
  swift_beginAccess();
  id v13 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v6 + 48);
  id v14 = 0;
  if (!v13(v12, 1, v5))
  {
    uint64_t v15 = v12[72];
    if (v15 || (uint64_t v15 = *v12) != 0)
    {
      id v16 = objc_msgSend(v15, sel_string);
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v50 = v4;
      *(void *)&long long v51 = v6;
      uint64_t v18 = v5;
      uint64_t v19 = v11;
      uint64_t v20 = v1;
      uint64_t v21 = v8;
      uint64_t v22 = v17;
      uint64_t v24 = v23;

      uint64_t v25 = v22;
      uint64_t v8 = v21;
      unint64_t v1 = v20;
      id v11 = v19;
      uint64_t v5 = v18;
      uint64_t v6 = v51;
      id v14 = (void *)MEMORY[0x18C115780](v25, v24);
      uint64_t v4 = v50;
      swift_bridgeObjectRelease();
    }
    else
    {
      id v14 = 0;
    }
  }
  objc_msgSend(v1, sel_setTitle_, v14);

  if (v13(v12, 1, v5))
  {
    uint64_t v26 = 0;
  }
  else
  {
    _s7SwiftUI16PlatformItemListV0D0VWOcTm_3((uint64_t)v12, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    uint64_t v26 = (void *)PlatformItemList.Item.image.getter();
    outlined destroy of (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  }
  objc_msgSend(v1, sel_setImage_, v26);

  if (v13(v12, 1, v5) || (unint64_t)v12[51] < 2)
  {
    objc_msgSend(v1, sel_setAction_, 0);
    objc_msgSend(v1, sel_setTarget_, 0);
  }
  else
  {
    objc_msgSend(v1, sel_setAction_, sel_performAction_);
    objc_msgSend(v1, sel_setTarget_, v1);
  }
  _s7SwiftUI16PlatformItemListV0D0VSgWOcTm_0((uint64_t)v12, (uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
  if (v13((void **)v4, 1, v5) == 1)
  {
    _s7SwiftUI16PlatformItemListV0D0VSgWOhTm_0((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
LABEL_31:
    id v40 = 0;
    goto LABEL_32;
  }
  _s7SwiftUI16PlatformItemListV0D0VWObTm_2((uint64_t)v4, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  if ((PlatformItemList.Item.isValidMenuRepresentation.getter() & 1) == 0)
  {
    uint64_t v44 = (uint64_t)v8;
LABEL_30:
    outlined destroy of (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)(v44, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    goto LABEL_31;
  }
  uint64_t v50 = v8;
  _s7SwiftUI16PlatformItemListV0D0VWOcTm_3((uint64_t)v8, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBBE00];
  type metadata accessor for ToolbarStorage.Item?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBBE00]);
  unint64_t v28 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v29 = swift_allocObject();
  long long v51 = xmmword_18834BB80;
  *(_OWORD *)(v29 + 16) = xmmword_18834BB80;
  _s7SwiftUI16PlatformItemListV0D0VWObTm_2((uint64_t)v11, v29 + v28, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  unint64_t v30 = MEMORY[0x1E4FBC860];
  uint64_t v60 = MEMORY[0x1E4FBC860];
  unint64_t v31 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  LOBYTE(v52) = 0;
  type metadata accessor for ToolbarStorage.Item?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, v27);
  uint64_t v32 = type metadata accessor for MenuVisitor.MenuStackGroup();
  unint64_t v33 = (*(unsigned __int8 *)(*(void *)(v32 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v32 - 8) + 80);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = v51;
  if (one-time initialization token for empty != -1) {
    swift_once();
  }
  uint64_t v35 = __swift_project_value_buffer(v32, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
  _s7SwiftUI16PlatformItemListV0D0VWOcTm_3(v35, v34 + v33, (uint64_t (*)(void))type metadata accessor for MenuVisitor.MenuStackGroup);
  char v36 = (char)v52;
  uint64_t v52 = 0;
  char v53 = 0;
  uint64_t v54 = MEMORY[0x1E4FBC868];
  unint64_t v55 = v31;
  unint64_t v56 = v30;
  uint64_t v57 = MEMORY[0x1E4FBC868];
  char v58 = v36;
  uint64_t v59 = v34;
  MenuVisitor.visit(_:uniqueNames:)(v29, &v60);
  swift_bridgeObjectRelease();
  unint64_t v37 = v56;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  if (!(v37 >> 62))
  {
    uint64_t v38 = (uint64_t)v50;
    if (*(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_18;
    }
LABEL_28:
    swift_bridgeObjectRelease();
    if ((*((unsigned char *)v1 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_hasOwnMenuSection) & 1) == 0)
    {
      id v40 = 0;
      goto LABEL_41;
    }
LABEL_29:
    uint64_t v44 = v38;
    goto LABEL_30;
  }
  swift_bridgeObjectRetain();
  uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v38 = (uint64_t)v50;
  if (!v45) {
    goto LABEL_28;
  }
LABEL_18:
  if ((v37 & 0xC000000000000001) != 0)
  {
    id v39 = (id)MEMORY[0x18C117680](0, v37);
    goto LABEL_21;
  }
  if (*(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v39 = *(id *)(v37 + 32);
LABEL_21:
    id v40 = v39;
    swift_bridgeObjectRelease();
    if ((*((unsigned char *)v1 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_hasOwnMenuSection) & 1) == 0)
    {
LABEL_41:
      outlined destroy of (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)(v38, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
LABEL_32:
      id v46 = objc_msgSend(v1, sel_menuRepresentation);
      if (v46)
      {
        id v47 = v46;

        if (v40 && v47 == v40) {
          goto LABEL_39;
        }
      }
      else if (!v40)
      {
LABEL_38:
        id v47 = v40;
LABEL_39:

        return;
      }
      objc_msgSend(v1, sel_setMenuRepresentation_, v40);
      goto LABEL_38;
    }
    if (v40)
    {
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
      type metadata accessor for ToolbarItemPlacement.Role?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
      uint64_t v41 = swift_allocObject();
      *(_OWORD *)(v41 + 16) = xmmword_188351940;
      *(void *)(v41 + 32) = v40;
      uint64_t v52 = (UIMenu *)v41;
      specialized Array._endMutation()();
      v42._uint64_t countAndFlagsBits = 0;
      v42._object = (void *)0xE000000000000000;
      v61.value.super.Class isa = 0;
      v61.is_nil = 0;
      UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v52, v42, (Swift::String_optional)0, v61, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)v52, v48);
      id v40 = v43;
      goto LABEL_41;
    }
    goto LABEL_29;
  }
  __break(1u);
}

uint64_t outlined destroy of (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of PlatformItemList.Item?(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  _s7SwiftUI16CommandOperationVSgMaTm_0(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t _s7SwiftUI16PlatformItemListV0D0VSgWOcTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  type metadata accessor for ToolbarStorage.Item?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void type metadata accessor for ToolbarStorage.Item?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined init with take of PlatformItemList.Item(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI16PlatformItemListV0D0VWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI16PlatformItemListV0D0VWObTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI16PlatformItemListV0D0VWObTm_2(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t UIKitBarButtonItem.updateBridging()()
{
  type metadata accessor for ToolbarStorage.Item?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v80 - v2;
  uint64_t v4 = type metadata accessor for PlatformItemList.Item();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v82 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v83 = (uint64_t)&v80 - v8;
  static Semantics.v3.getter();
  char v9 = isLinkedOnOrAfter(_:)();
  uint64_t v10 = (uint64_t)&v0[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_platformItem];
  swift_beginAccess();
  id v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  unint64_t v84 = (int *)v4;
  if (!v11(v10, 1, v4) && *(unsigned char *)(v10 + 634) != 3)
  {
    static Semantics.v3.getter();
    if (isLinkedOnOrAfter(_:)())
    {
      static Semantics.v5.getter();
      v9 &= isLinkedOnOrAfter(_:)();
    }
  }
  uint64_t v85 = v0;
  uint64_t v12 = *(void **)&v0[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_host];
  _s7SwiftUI16UIKitBarItemHostCyAA0dE4ViewVGMaTm_0(0, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost);
  lazy protocol witness table accessor for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost);
  id v13 = v12;
  ViewRendererHost.preferenceValue<A>(_:)();

  int v14 = v89;
  BOOL v15 = v88 == 1;
  static Semantics.v5.getter();
  if (isLinkedOnOrAfter(_:)() & v14 & v15 & 1) == 0 && (v9) {
    return 0;
  }
  id v16 = v85;
  uint64_t v17 = &v85[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_item];
  swift_beginAccess();
  uint64_t v18 = type metadata accessor for ToolbarStorage.Item(0);
  uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48);
  if (v19(v17, 1, v18)) {
    return 0;
  }
  uint64_t v81 = v17 + 48;
  outlined init with copy of ToolbarItemPlacement.Role((uint64_t)(v17 + 48), (uint64_t)&v88);
  outlined init with copy of ToolbarItemPlacement.Role((uint64_t)&v88, (uint64_t)v101);
  if (v102 == 2)
  {
    BOOL v21 = (unint64_t)(*(void *)v101 - 21) <= 1 || *(void *)v101 == 4;
    if (v21 || *(void *)v101 == 1)
    {
      int8x16_t v23 = vorrq_s8(*(int8x16_t *)&v101[8], *(int8x16_t *)&v101[24]);
      if (!*(void *)&vorr_s8(*(int8x8_t *)v23.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)))
      {
        outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v88);
        return 0;
      }
    }
  }
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)v101);
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v88);
  id v24 = objc_msgSend(v16, sel_title);
  if (v24)
  {
  }
  else
  {
    id v25 = objc_msgSend(v16, sel_image);

    if (!v25) {
      return 0;
    }
  }
  _s7SwiftUI16PlatformItemListV0D0VSgWOcTm_0(v10, (uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
  if (v11((uint64_t)v3, 1, (uint64_t)v84) == 1)
  {
    _s7SwiftUI16PlatformItemListV0D0VSgWOhTm_0((uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
    return 0;
  }
  uint64_t v26 = v83;
  _s7SwiftUI16PlatformItemListV0D0VWObTm_2((uint64_t)v3, v83, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  if (v19(v17, 1, v18))
  {
    memset(v101, 0, sizeof(v101));
    char v102 = -1;
  }
  else
  {
    outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v81, (uint64_t)v101);
  }
  uint64_t v97 = 5;
  long long v98 = 0u;
  long long v99 = 0u;
  char v100 = 2;
  outlined init with copy of _ViewList_View?((uint64_t)v101, (uint64_t)&v88, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
  outlined init with copy of _ViewList_View?((uint64_t)&v97, (uint64_t)v94, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
  if (v93 == 255)
  {
    _sypSgWOhTm_11((uint64_t)&v97, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
    _sypSgWOhTm_11((uint64_t)v101, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
    if (v96 == 255)
    {
      _sypSgWOhTm_11((uint64_t)&v88, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
      uint64_t v30 = 2;
      id v28 = v85;
      uint64_t v29 = (uint64_t)v82;
      goto LABEL_37;
    }
  }
  else
  {
    outlined init with copy of _ViewList_View?((uint64_t)&v88, (uint64_t)v87, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
    if (v96 != 255)
    {
      outlined init with take of ToolbarItemPlacement.Role((uint64_t)v94, (uint64_t)v86);
      char v27 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v87, (uint64_t)v86);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v86);
      _sypSgWOhTm_11((uint64_t)&v97, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
      _sypSgWOhTm_11((uint64_t)v101, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v87);
      _sypSgWOhTm_11((uint64_t)&v88, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
      id v28 = v85;
      uint64_t v29 = (uint64_t)v82;
      if (v27)
      {
        uint64_t v30 = 2;
        goto LABEL_37;
      }
      goto LABEL_36;
    }
    _sypSgWOhTm_11((uint64_t)&v97, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
    _sypSgWOhTm_11((uint64_t)v101, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v87);
  }
  outlined destroy of (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)((uint64_t)&v88, (uint64_t (*)(void))type metadata accessor for (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?));
  id v28 = v85;
  uint64_t v29 = (uint64_t)v82;
LABEL_36:
  uint64_t v30 = 0;
LABEL_37:
  if ((id)v30 != objc_msgSend(v28, sel_style)) {
    objc_msgSend(v28, sel_setStyle_, v30);
  }
  if (objc_msgSend(v28, sel_isEnabled) != *(unsigned __int8 *)(v26 + 56)) {
    objc_msgSend(v28, sel_setEnabled_);
  }
  BOOL v31 = *(void *)(v26 + 408) != 1 && *(unsigned __int8 *)(v26 + 464) == 1;
  objc_msgSend(v28, sel_setSpringLoaded_, v31);
  uint64_t v32 = *(void **)v26;
  _s7SwiftUI16PlatformItemListV0D0VWOcTm_3(v26, v29, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  if (v32)
  {
    id v33 = v32;
    outlined destroy of (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)(v29, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  }
  else
  {
    uint64_t v34 = *(void **)(v29 + 576);
    id v33 = v34;
    outlined destroy of (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)(v29, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    if (!v34) {
      goto LABEL_50;
    }
  }
  if ((uint64_t)objc_msgSend(v33, sel_length) >= 1)
  {
    id v35 = objc_msgSend(v33, sel_attributesAtIndex_effectiveRange_, 0, 0);
    type metadata accessor for NSAttributedStringKey(0);
    _s7SwiftUI14_UIHostingViewCyAA01_d5List_D0VGACyxGAA0D12RendererHostAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    id v36 = v85;
    v37.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v36, sel_setTitleTextAttributes_forState_, v37.super.isa, 0);

    goto LABEL_51;
  }

LABEL_50:
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  type metadata accessor for NSAttributedStringKey(0);
  _s7SwiftUI14_UIHostingViewCyAA01_d5List_D0VGACyxGAA0D12RendererHostAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
  id v36 = v85;
  v37.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v36, sel_setTitleTextAttributes_forState_, v37.super.isa, 0);
LABEL_51:

  int v38 = *(unsigned __int8 *)(v26 + 634);
  if (v38 != 3) {
    objc_msgSend(v36, sel_setSelected_, v38 == 0);
  }
  uint64_t v39 = *(void *)(v26 + 616);
  if (v39)
  {
    uint64_t v40 = MEMORY[0x1E4FBC860];
    *(void *)unint64_t v101 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    unint64_t v41 = specialized Dictionary.init(dictionaryLiteral:)(v40);
    LOBYTE(v88) = 0;
    type metadata accessor for ToolbarStorage.Item?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, MEMORY[0x1E4FBBE00]);
    uint64_t v42 = type metadata accessor for MenuVisitor.MenuStackGroup();
    unint64_t v43 = (*(unsigned __int8 *)(*(void *)(v42 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v42 - 8) + 80);
    uint64_t v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = xmmword_18834BB80;
    if (one-time initialization token for empty != -1) {
      swift_once();
    }
    uint64_t v45 = __swift_project_value_buffer(v42, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
    _s7SwiftUI16PlatformItemListV0D0VWOcTm_3(v45, v44 + v43, (uint64_t (*)(void))type metadata accessor for MenuVisitor.MenuStackGroup);
    char v46 = v88;
    uint64_t v88 = 0;
    unsigned __int8 v89 = 0;
    uint64_t v90 = MEMORY[0x1E4FBC868];
    unint64_t v91 = v41;
    UIMenuElementSize v92 = v40;
    uint64_t v93 = MEMORY[0x1E4FBC868];
    v94[0] = v46;
    uint64_t v95 = v44;
    MenuVisitor.visit(_:uniqueNames:)(v39, (uint64_t *)v101);
    swift_bridgeObjectRelease();
    UIMenuElementSize v47 = v92;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v48 = *(void *)(v26 + 328);
    UIMenuOptions v49 = 2;
    if (v48 >> 62 == 3)
    {
      id v36 = v85;
      if ((v48 & 0xFFFFFFFFFFFFFFFCLL) != 0x3FFFFFFFCLL)
      {
        UIMenuOptions v49 = 2;
        if (v48 == 0xC000000000000000 && *(void *)(v26 + 296) == 4)
        {
          uint64_t v50 = *(void *)(v26 + 304);
          uint64_t v51 = *(void *)(v26 + 312);
          uint64_t v52 = *(void *)(v26 + 320);
          if (!(v51 | v50 | v52))
          {
            uint64_t v53 = *(void *)(v26 + 336);
            uint64_t v54 = *(void *)(v26 + 344);
            uint64_t v55 = *(void *)(v26 + 352);
            uint64_t v56 = *(void *)(v26 + 360);
            uint64_t v57 = *(void *)(v26 + 368);
            uint64_t v58 = *(void *)(v26 + 376);
            uint64_t v59 = *(void *)(v26 + 392);
            if (!(v54 | v53 | v55 | v56 | v57 | v58 | *(void *)(v26 + 384) | v59))
            {
              if (*(unsigned char *)(v26 + 633) == 1) {
                UIMenuOptions v49 = 1;
              }
              else {
                UIMenuOptions v49 = 2 * (*(unsigned char *)(v26 + 633) != 0);
              }
              outlined copy of PlatformItemList.Item.SystemItem((id)4, v50, v51, v52, 0xC000000000000000, v53, v54, v55, v56, v57, v58, *(void *)(v26 + 384), v59);
            }
          }
        }
      }
    }
    else
    {
      id v36 = v85;
    }
    uint64_t v60 = (UIMenu *)type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
    v61._uint64_t countAndFlagsBits = 0;
    v61._object = (void *)0xE000000000000000;
    v103.value.super.Class isa = 0;
    v103.is_nil = 0;
    UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v60, v61, (Swift::String_optional)0, v103, 0, v49, v47, v79);
    long long v63 = v62;
    objc_msgSend(v36, sel_setMenu_, v62);

    unint64_t v64 = *(void *)(v26 + 408);
    if (v64 >= 2 && (*(unsigned char *)(v26 + v84[31]) & 1) == 0)
    {
      uint64_t v65 = *(void *)(v26 + 416);
      swift_retain();
      id v66 = objc_msgSend(v36, sel_title);
      if (v66)
      {
        unint64_t v67 = v66;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
        id v68 = objc_msgSend(v85, sel_image);
        uint64_t v69 = swift_allocObject();
        *(void *)(v69 + 16) = v64;
        *(void *)(v69 + 24) = v65;
        swift_retain();
        id v36 = v85;
        long long v70 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
        objc_msgSend(v36, sel_setPrimaryAction_, v70);

        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v64);
LABEL_73:
        uint64_t v71 = v84;
        objc_msgSend(v36, sel_setPreferredMenuElementOrder_, qword_1883C29C0[*(char *)(v26 + v84[32])]);
        objc_msgSend(v36, sel_setChangesSelectionAsPrimaryAction_, *(unsigned char *)(v26 + v71[31]) & 1);
        goto LABEL_74;
      }
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v64);
    }
    objc_msgSend(v36, sel_setPrimaryAction_, 0);
    goto LABEL_73;
  }
LABEL_74:
  if (*(void *)(v26 + v84[33]))
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
    uint64_t v72 = swift_retain();
    id v36 = v85;
    id v73 = UIColor.init(_:)(v72);
  }
  else
  {
    id v73 = 0;
  }
  id v74 = objc_msgSend(v36, sel_tintColor);
  unint64_t v75 = v74;
  if (v73)
  {
    if (v74)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
      id v76 = v73;
      char v77 = static NSObject.== infix(_:_:)();

      if (v77) {
        goto LABEL_84;
      }
    }
  }
  else
  {
    if (!v74)
    {
      id v76 = 0;
      goto LABEL_84;
    }
  }
  objc_msgSend(v36, sel_setTintColor_, v73);
  id v76 = v73;
LABEL_84:
  uint64_t v78 = v83;
  specialized PlatformItemList.Item.applyAccessibilityProperties(to:)(v36, v83);

  outlined destroy of (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)(v78, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  return 1;
}

void type metadata accessor for UIKitBarItemHost<BarItemView>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type BarItemView and conformance BarItemView();
    unint64_t v7 = a3(a1, &type metadata for BarItemView, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void _s7SwiftUI16UIKitBarItemHostCyAA0dE4ViewVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI16UIKitBarItemHostCyAA0dE4ViewVGMaTm_0(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t PlatformItemList.Item.image.getter()
{
  uint64_t v1 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = MEMORY[0x1E4F41550];
  _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2(v0 + 64, (uint64_t)v23, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
  _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2((uint64_t)v23, (uint64_t)&v24, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v4);
  uint64_t v5 = 0;
  if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v24) != 1)
  {
    if (v36)
    {
      outlined retain of Image.Resolved?((uint64_t)v23, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of Image.Resolved?);
      swift_unknownObjectRetain();
      self;
      uint64_t v5 = swift_dynamicCastObjCClassUnconditional();
      outlined init with copy of PlatformItemList.Item(v0, (uint64_t)v3);
      if (v5)
      {
        outlined retain of Image.Resolved?((uint64_t)v23, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
LABEL_7:
        outlined destroy of CommandOperation((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        return v5;
      }
    }
    else
    {
      _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2((uint64_t)v23, (uint64_t)&v11, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
      outlined retain of Image.Resolved((uint64_t)&v11);
      outlined init with copy of PlatformItemList.Item(v0, (uint64_t)v3);
    }
    id v6 = v24;
    char v7 = v25;
    id v11 = v24;
    char v12 = v25;
    long long v13 = v26;
    uint64_t v14 = v27;
    char v15 = v28;
    long long v16 = v29;
    char v17 = v30;
    long long v18 = v31;
    long long v19 = v32;
    char v20 = v33;
    char v21 = v34;
    __int16 v22 = v35;
    uint64_t v8 = *((void *)v3 + 6);
    outlined copy of GraphicsImage.Contents?(v24, v25);
    uint64_t v5 = (uint64_t)GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(0, 0, v8);
    outlined retain of Image.Resolved?((uint64_t)v23, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
    outlined consume of GraphicsImage.Contents?(v6, v7);
    goto LABEL_7;
  }
  return v5;
}

uint64_t _s7SwiftUI5ImageVAAE8ResolvedVSgWOg(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 120) >> 1;
  int v2 = -2 - v1;
  if (-2 - (int)v1 < 0) {
    int v2 = -1;
  }
  if (v1 > 0x80000000) {
    return (v2 + 1);
  }
  else {
    return 0;
  }
}

uint64_t outlined retain of Image.Resolved?(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))
{
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(unsigned __int16 *)(a1 + 176) | (*(unsigned __int8 *)(a1 + 178) << 16));
  return a1;
}

void outlined consume of Image.Resolved?(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  if (a16 >> 1 != 4294967294)
  {
    outlined consume of GraphicsImage.Contents?(a1, a2);
    outlined consume of AccessibilityImageLabel?(a14, a15, a16);
    swift_unknownObjectRelease();
    swift_release();
  }
}

uint64_t PlatformItemList.Item.isValidMenuRepresentation.getter()
{
  uint64_t v1 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  id v6 = (char *)&v15 - v5;
  uint64_t v7 = *v0;
  _s7SwiftUI16PlatformItemListV0D0VWOcTm_3((uint64_t)v0, (uint64_t)&v15 - v5, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  if (v7)
  {
    outlined destroy of (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    BOOL v8 = 1;
    uint64_t v9 = v0[77];
    if (v9)
    {
LABEL_3:
      BOOL v10 = *(void *)(v9 + 16) != 0;
      goto LABEL_6;
    }
  }
  else
  {
    id v11 = (void *)*((void *)v6 + 72);
    id v12 = v11;
    outlined destroy of (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);

    BOOL v8 = v11 != 0;
    uint64_t v9 = v0[77];
    if (v9) {
      goto LABEL_3;
    }
  }
  BOOL v10 = 0;
LABEL_6:
  _s7SwiftUI16PlatformItemListV0D0VWOcTm_3((uint64_t)v0, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  if (v8)
  {
    uint64_t v13 = *((void *)v3 + 51);
    outlined destroy of (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    return v13 != 1 || v10;
  }
  else
  {
    outlined destroy of (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  }
  return v10;
}

void destroy for ToolbarStorage.GroupItem(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(a1 + 56) == 1) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  }
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {

      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v6 = *(void *)(v4 + 184);
      unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((v6 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
      {
        int v8 = *(unsigned __int8 *)(v4 + 72);
        if (v8 != 255)
        {
          outlined consume of GraphicsImage.Contents(*(void **)(v4 + 64), v8);
          uint64_t v6 = *(void *)(v4 + 184);
          unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
        }
        if (v7 != 0x1FFFFFFFELL) {
          outlined consume of AccessibilityImageLabel(*(void *)(v4 + 168), *(void *)(v4 + 176), v6);
        }
        swift_unknownObjectRelease();
        swift_release();
      }
      if (*(void *)(v4 + 256))
      {
        swift_bridgeObjectRelease();
        uint64_t v9 = *(void **)(v4 + 264);
        if ((unint64_t)v9 >= 2) {

        }
        swift_release();
        swift_release();
      }
      unint64_t v10 = *(void *)(v4 + 328);
      if (v10 >> 2 != 0xFFFFFFFF) {
        outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v4 + 296), *(void *)(v4 + 304), *(void *)(v4 + 312), *(void *)(v4 + 320), v10, *(void *)(v4 + 336), *(void *)(v4 + 344), *(void *)(v4 + 352), *(void *)(v4 + 360), *(void *)(v4 + 368), *(void *)(v4 + 376), *(void *)(v4 + 384), *(void *)(v4 + 392));
      }
      uint64_t v11 = *(void *)(v4 + 408);
      if (v11)
      {
        if (v11 == 1)
        {
LABEL_24:
          swift_bridgeObjectRelease();
          if (*(void *)(v4 + 504)) {
            swift_release();
          }
          if (*(void *)(v4 + 528))
          {
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
          }
          if (*(void *)(v4 + 552) != 1)
          {
            swift_release();
            if (*(void *)(v4 + 560)) {
              swift_release();
            }
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v12 = v4 + *(int *)(type metadata accessor for PlatformItemList.Item() + 112);
          uint64_t v13 = type metadata accessor for CommandOperation();
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
          {
            uint64_t v14 = v12 + *(int *)(v13 + 20);
            outlined consume of Text.Storage(*(void *)v14, *(void *)(v14 + 8), *(unsigned char *)(v14 + 16));
            swift_bridgeObjectRelease();
            uint64_t v15 = v14 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            uint64_t v16 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
            if (*(void *)(v12 + *(int *)(v13 + 24))) {
              swift_release();
            }
          }
          swift_release();
          return;
        }
        swift_release();
      }
      if (*(void *)(v4 + 424)) {
        swift_release();
      }
      if (*(void *)(v4 + 440)) {
        swift_release();
      }
      goto LABEL_24;
    }
    __swift_destroy_boxed_opaque_existential_1(v4);
    swift_release();
    swift_bridgeObjectRelease();
    char v17 = *(void **)(v4 + 80);
  }
}

uint64_t type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ToolbarStorage.GroupItem.CollapsedContent);
}

uint64_t specialized CollectionChanges.Projection.init(kind:changes:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return result;
  }
  uint64_t v3 = 0;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = (unsigned __int8 *)(a2 + 64);
  while (1)
  {
    int v7 = *v5;
    v5 += 40;
    int v6 = v7;
    if (!v7)
    {
      if (!(_BYTE)result) {
        goto LABEL_12;
      }
      goto LABEL_4;
    }
    if (v6 != 1) {
      break;
    }
    if (result == 1) {
      goto LABEL_12;
    }
LABEL_4:
    if (v2 == ++v3) {
      goto LABEL_12;
    }
  }
  if (result != 2) {
    goto LABEL_4;
  }
LABEL_12:
  for (unint64_t i = (unsigned char *)(a2 + 40 * v2 + 24); ; i -= 40)
  {
    uint64_t v9 = v4 - 1;
    if (v4 - 1 >= v2) {
      break;
    }
    if (*i)
    {
      if (*i == 1)
      {
        if (result == 1) {
          return result;
        }
      }
      else if (result == 2)
      {
        return result;
      }
    }
    else if (!(_BYTE)result)
    {
      return result;
    }
    --v4;
    if (!v9) {
      return result;
    }
  }
  __break(1u);
  return result;
}

void type metadata accessor for WeakBox<UIBarButtonItem>()
{
  if (!lazy cache variable for type metadata for WeakBox<UIBarButtonItem>)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
    unint64_t v0 = type metadata accessor for WeakBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIBarButtonItem>);
    }
  }
}

uint64_t type metadata accessor for UIKitBarItemHost()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for CustomHoverEffectPrimitiveViewModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t closure #5 in UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a3;
  uint64_t v14 = a2;
  uint64_t v15 = a5;
  uint64_t v16 = a4;
  uint64_t v6 = type metadata accessor for CollectionViewListRoot();
  uint64_t v7 = a1 + *(int *)(v6 + 52);
  v12[2] = v6;
  uint64_t v8 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_4, (uint64_t)v12, v8, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v10);
  return v13;
}

void *initializeWithCopy for SidebarListBody(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = ~v8;
  uint64_t v10 = (v8 + 16) & ~v8;
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v12 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) == 0)
  {
    uint64_t v13 = *v12;
    if ((unint64_t)*v12 >= 0xFFFFFFFF) {
      LODWORD(v13) = -1;
    }
    size_t v14 = v10 + v11;
    if (v13 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *__dst = *__src;
    uint64_t v15 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v15 = *v12;
    uint64_t v21 = ((unint64_t)v15 + v8 + 8) & v9;
    uint64_t v16 = *(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16);
    swift_retain();
    swift_retain();
    v16(v21, ((unint64_t)v12 + v8 + 8) & v9, v6);
    goto LABEL_8;
  }
  size_t v14 = v10 + v11;
  if (!(*(unsigned int (**)(unint64_t))(v7 + 48))(((unint64_t)v12 + v8 + 8) & v9)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(__dst, __src, v14);
LABEL_8:
  char v17 = (void *)(((unint64_t)__dst + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  long long v18 = (void *)(((unint64_t)__src + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  *char v17 = *v18;
  uint64_t v19 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v19 + 16))(((unint64_t)v17 + *(unsigned __int8 *)(v19 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80), ((unint64_t)v18 + *(unsigned __int8 *)(v19 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  return __dst;
}

uint64_t closure #1 in closure #2 in SidebarListBody.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[0] = v7;
  v13[1] = v8;
  v13[2] = v9;
  _OWORD v13[3] = v10;
  uint64_t v11 = type metadata accessor for SidebarListBody();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v11 + 56));
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

uint64_t SidebarListBody.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v3 = a1[2];
  uint64_t v2 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = type metadata accessor for SidebarListBody.CollectionViewBody();
  v19[1] = type metadata accessor for SidebarListBody.TableViewRoot();
  uint64_t v7 = type metadata accessor for _VariadicView.Tree();
  uint64_t v36 = MEMORY[0x1E4F405E0];
  uint64_t v37 = v6;
  uint64_t v38 = v7;
  uint64_t v39 = MEMORY[0x1E4F405D8];
  uint64_t v8 = type metadata accessor for StaticIf();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  size_t v14 = (char *)v19 - v13;
  uint64_t v27 = v3;
  uint64_t v28 = v2;
  uint64_t v29 = v4;
  uint64_t v30 = v5;
  uint64_t v31 = v20;
  uint64_t v22 = v3;
  uint64_t v23 = v2;
  uint64_t v24 = v4;
  uint64_t v25 = v5;
  uint64_t v26 = v20;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v34 = swift_getWitnessTable();
  uint64_t v35 = v4;
  uint64_t v18 = swift_getWitnessTable();
  StaticIf<>.init(_:then:else:)();
  uint64_t v32 = WitnessTable;
  uint64_t v33 = v18;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v11);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v11, v8);
  static ViewBuilder.buildExpression<A>(_:)(v14);
  return ((uint64_t (*)(char *, uint64_t))v16)(v14, v8);
}

uint64_t InsettableGroupedListBody.CollectionViewBody.init(selection:insetMode:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = swift_getKeyPath();
  *(_WORD *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = swift_getKeyPath();
  *(_WORD *)(a5 + 24) = 0;
  *(void *)(a5 + 32) = swift_getKeyPath();
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 56) = 0u;
  *(_OWORD *)(a5 + 72) = 0u;
  *(_OWORD *)(a5 + 82) = 0u;
  uint64_t v10 = (int *)type metadata accessor for InsettableGroupedListBody.CollectionViewBody();
  uint64_t v11 = a5 + v10[15];
  type metadata accessor for Binding();
  uint64_t v12 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v11, a1, v12);
  outlined init with take of SectionInsetMode(a2, a5 + v10[16]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + v10[17], a3, a4);
}

uint64_t InsettableGroupedListBody.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v3 = a1[2];
  uint64_t v2 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v6 = type metadata accessor for InsettableGroupedListBody.CollectionViewBody();
  v19[1] = type metadata accessor for InsettableGroupedListBody.TableViewRoot();
  void v19[2] = type metadata accessor for _VariadicView.Tree();
  type metadata accessor for ViewInputFlagModifier<PreferBaselineAlignedHeaders>();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  unint64_t v20 = lazy protocol witness table accessor for type CollectionViewGroupedListsEnabled and conformance CollectionViewGroupedListsEnabled();
  uint64_t v39 = &unk_1ED45E580;
  uint64_t v40 = v6;
  uint64_t v41 = v7;
  unint64_t v42 = v20;
  uint64_t v8 = type metadata accessor for StaticIf();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  size_t v14 = (char *)v19 - v13;
  uint64_t v28 = v3;
  uint64_t v29 = v2;
  uint64_t v30 = v5;
  uint64_t v31 = v4;
  uint64_t v32 = v21;
  uint64_t v23 = v3;
  uint64_t v24 = v2;
  uint64_t v25 = v5;
  uint64_t v26 = v4;
  uint64_t v27 = v21;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v37 = swift_getWitnessTable();
  uint64_t v38 = v5;
  uint64_t v35 = swift_getWitnessTable();
  uint64_t v36 = &protocol witness table for ViewInputFlagModifier<A>;
  uint64_t v18 = swift_getWitnessTable();
  StaticIf<>.init(_:then:else:)();
  uint64_t v33 = WitnessTable;
  uint64_t v34 = v18;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v11);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v11, v8);
  static ViewBuilder.buildExpression<A>(_:)(v14);
  return ((uint64_t (*)(char *, uint64_t))v16)(v14, v8);
}

unint64_t lazy protocol witness table accessor for type CollectionViewGroupedListsEnabled and conformance CollectionViewGroupedListsEnabled()
{
  unint64_t result = lazy protocol witness table cache variable for type CollectionViewGroupedListsEnabled and conformance CollectionViewGroupedListsEnabled;
  if (!lazy protocol witness table cache variable for type CollectionViewGroupedListsEnabled and conformance CollectionViewGroupedListsEnabled)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollectionViewGroupedListsEnabled and conformance CollectionViewGroupedListsEnabled);
  }
  return result;
}

uint64_t closure #1 in InsettableGroupedListBody.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v30 = a5;
  uint64_t v34 = a6;
  uint64_t v33 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v32 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding();
  uint64_t v31 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v31 - 8);
  MEMORY[0x1F4188790](v31);
  size_t v14 = (char *)v29 - v13;
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  v29[1] = a3;
  uint64_t v37 = a4;
  uint64_t v38 = a5;
  uint64_t v15 = a4;
  uint64_t v16 = type metadata accessor for InsettableGroupedListBody.CollectionViewBody();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v21 = MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)v29 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v14, a1, v31, v21);
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  uint64_t v37 = v15;
  uint64_t v38 = v30;
  uint64_t v24 = type metadata accessor for InsettableGroupedListBody();
  outlined init with take of SectionInsetMode(a1 + *(int *)(v24 + 52), (uint64_t)&v35);
  uint64_t v25 = a1 + *(int *)(v24 + 56);
  uint64_t v26 = (uint64_t)v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v32, v25, a2);
  InsettableGroupedListBody.CollectionViewBody.init(selection:insetMode:content:)((uint64_t)v14, (uint64_t)&v35, v26, a2, (uint64_t)v19);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v19);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v17 + 8);
  v27(v19, v16);
  static ViewBuilder.buildExpression<A>(_:)(v23);
  return ((uint64_t (*)(char *, uint64_t))v27)(v23, v16);
}

uint64_t type metadata accessor for InsettableGroupedListBody.CollectionViewBody()
{
  return swift_getGenericMetadata();
}

uint64_t closure #2 in InsettableGroupedListBody.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v37 = a1;
  uint64_t v40 = a6;
  type metadata accessor for Binding();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v31 - v12;
  uint64_t v50 = a2;
  uint64_t v51 = a3;
  uint64_t v52 = a4;
  uint64_t v53 = a5;
  uint64_t v35 = type metadata accessor for InsettableGroupedListBody.TableViewRoot();
  MEMORY[0x1F4188790](v35);
  uint64_t v34 = (uint64_t)&v31 - v14;
  uint64_t v15 = type metadata accessor for _VariadicView.Tree();
  uint64_t v39 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v32 = (char *)&v31 - v16;
  type metadata accessor for ViewInputFlagModifier<PreferBaselineAlignedHeaders>();
  uint64_t v17 = type metadata accessor for ModifiedContent();
  uint64_t v38 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v33 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v20 = MEMORY[0x1F4188790](v19);
  uint64_t v36 = (char *)&v31 - v21;
  uint64_t v22 = v37;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v13, v37, v10, v20);
  uint64_t v50 = a2;
  uint64_t v51 = a3;
  uint64_t v52 = a4;
  uint64_t v53 = a5;
  uint64_t v23 = type metadata accessor for InsettableGroupedListBody();
  outlined init with take of SectionInsetMode(v22 + *(int *)(v23 + 52), (uint64_t)&v50);
  InsettableGroupedListBody.TableViewRoot.init(selection:insetMode:)((uint64_t)v13, (uint64_t)&v50, v34);
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  uint64_t v43 = a4;
  uint64_t v44 = a5;
  uint64_t v45 = v22;
  uint64_t v24 = v32;
  _VariadicView.Tree.init(_:content:)();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v49 = a4;
  uint64_t v25 = swift_getWitnessTable();
  unint64_t v26 = lazy protocol witness table accessor for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders();
  uint64_t v27 = v33;
  View.input<A>(_:)((uint64_t)&type metadata for PreferBaselineAlignedHeaders, v15, (uint64_t)&type metadata for PreferBaselineAlignedHeaders, v25, v26);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v24, v15);
  uint64_t v46 = v25;
  UIMenuElementSize v47 = &protocol witness table for ViewInputFlagModifier<A>;
  swift_getWitnessTable();
  uint64_t v28 = v36;
  static ViewBuilder.buildExpression<A>(_:)(v27);
  uint64_t v29 = *(void (**)(char *, uint64_t))(v38 + 8);
  v29(v27, v17);
  static ViewBuilder.buildExpression<A>(_:)(v28);
  return ((uint64_t (*)(char *, uint64_t))v29)(v28, v17);
}

void type metadata accessor for ViewInputFlagModifier<PreferBaselineAlignedHeaders>()
{
  if (!lazy cache variable for type metadata for ViewInputFlagModifier<PreferBaselineAlignedHeaders>)
  {
    lazy protocol witness table accessor for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders();
    unint64_t v0 = type metadata accessor for ViewInputFlagModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<PreferBaselineAlignedHeaders>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders()
{
  unint64_t result = lazy protocol witness table cache variable for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders;
  if (!lazy protocol witness table cache variable for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders;
  if (!lazy protocol witness table cache variable for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders;
  if (!lazy protocol witness table cache variable for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders;
  if (!lazy protocol witness table cache variable for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders;
  if (!lazy protocol witness table cache variable for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders);
  }
  return result;
}

uint64_t InsettableGroupedListBody.TableViewRoot.init(selection:insetMode:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = swift_getKeyPath();
  *(_WORD *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = swift_getKeyPath();
  *(_WORD *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = swift_getKeyPath();
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 82) = 0u;
  uint64_t v6 = type metadata accessor for InsettableGroupedListBody.TableViewRoot();
  uint64_t v7 = a3 + *(int *)(v6 + 60);
  type metadata accessor for Binding();
  uint64_t v8 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7, a1, v8);
  return outlined init with take of SectionInsetMode(a2, a3 + *(int *)(v6 + 64));
}

uint64_t type metadata accessor for InsettableGroupedListBody.TableViewRoot()
{
  return swift_getGenericMetadata();
}

uint64_t closure #1 in SidebarListBody.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v32 = a1;
  uint64_t v35 = a6;
  type metadata accessor for Binding();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v33 = *(void *)(v10 - 8);
  uint64_t v34 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v31 = (char *)&v30 - v11;
  uint64_t v12 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  uint64_t v16 = a4;
  uint64_t v30 = a4;
  uint64_t v17 = a5;
  uint64_t v18 = type metadata accessor for SidebarListBody.CollectionViewBody();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v30 - v23;
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  uint64_t v38 = v16;
  uint64_t v39 = v17;
  uint64_t v25 = type metadata accessor for SidebarListBody();
  uint64_t v26 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v32 + *(int *)(v25 + 56), a2);
  uint64_t v27 = (uint64_t)v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v31, v26, v34);
  SidebarListBody.CollectionViewBody.init(content:selection:)((uint64_t)v15, v27, a2, (uint64_t)v21);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v21);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v19 + 8);
  v28(v21, v18);
  static ViewBuilder.buildExpression<A>(_:)(v24);
  return ((uint64_t (*)(char *, uint64_t))v28)(v24, v18);
}

uint64_t SidebarListBody.CollectionViewBody.init(content:selection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = swift_getKeyPath();
  *(_WORD *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = swift_getKeyPath();
  *(_WORD *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = swift_getKeyPath();
  *(unsigned char *)(a4 + 40) = 0;
  *(void *)(a4 + 48) = swift_getKeyPath();
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 98) = 0u;
  uint64_t v8 = type metadata accessor for SidebarListBody.CollectionViewBody();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4 + *(int *)(v8 + 64), a1, a3);
  uint64_t v9 = a4 + *(int *)(v8 + 68);
  type metadata accessor for Binding();
  uint64_t v10 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9, a2, v10);
}

uint64_t type metadata accessor for SidebarListBody.CollectionViewBody()
{
  return swift_getGenericMetadata();
}

uint64_t initializeWithCopy for InsettableGroupedListBody.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)a2;
  char v6 = *(unsigned char *)(a2 + 9);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)a2, v7, v6);
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 9) = v6;
  uint64_t v47 = a1;
  unint64_t v8 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)v9;
  LOBYTE(v5) = *(unsigned char *)(v9 + 9);
  unsigned __int8 v11 = *(unsigned char *)(v9 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)v9, v11, v5);
  *(void *)unint64_t v8 = v10;
  *(unsigned char *)(v8 + 8) = v11;
  *(unsigned char *)(v8 + 9) = v5;
  unint64_t v12 = (v8 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v9 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = *(void *)v13;
  uint64_t v15 = *(void *)(v13 + 8);
  uint64_t v16 = *(void *)(v13 + 16);
  uint64_t v17 = *(void *)(v13 + 24);
  uint64_t v18 = *(void *)(v13 + 32);
  uint64_t v19 = *(void *)(v13 + 40);
  uint64_t v20 = *(void *)(v13 + 48);
  uint64_t v21 = *(void *)(v13 + 56);
  char v44 = *(unsigned char *)(v13 + 64);
  char v45 = *(unsigned char *)(v13 + 65);
  outlined copy of Environment<ListPadding>.Content(*(void *)v13, v15, v16, v17, v18, v19, v20, v21, v44, v45);
  *(void *)unint64_t v12 = v14;
  *(void *)(v12 + 8) = v15;
  *(void *)(v12 + 16) = v16;
  *(void *)(v12 + 24) = v17;
  *(void *)(v12 + 32) = v18;
  *(void *)(v12 + 40) = v19;
  *(void *)(v12 + 48) = v20;
  *(void *)(v12 + 56) = v21;
  *(unsigned char *)(v12 + 64) = v44;
  *(unsigned char *)(v12 + 65) = v45;
  uint64_t v22 = *(void *)(a3 + 24);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v25 = (v24 | 7) + 66;
  uint64_t v26 = (void *)((v25 + v12) & ~(v24 | 7));
  uint64_t v27 = (void *)((v25 + v13) & ~(v24 | 7));
  uint64_t v28 = ~v24;
  uint64_t v29 = (v24 + 16) & ~v24;
  uint64_t v30 = *(void *)(v23 + 64);
  uint64_t v31 = (uint64_t *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v23 + 84) & 0x80000000) == 0)
  {
    uint64_t v32 = *v31;
    if ((unint64_t)*v31 >= 0xFFFFFFFF) {
      LODWORD(v32) = -1;
    }
    size_t v33 = v29 + v30;
    if (v32 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *uint64_t v26 = *v27;
    uint64_t v34 = (void *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v34 = *v31;
    uint64_t v35 = v24 + 8;
    uint64_t v36 = ((unint64_t)v34 + v24 + 8) & v28;
    unint64_t v37 = ((unint64_t)v31 + v35) & v28;
    uint64_t v38 = *(void (**)(uint64_t, unint64_t, uint64_t))(v23 + 16);
    swift_retain();
    swift_retain();
    v38(v36, v37, v22);
    goto LABEL_8;
  }
  size_t v33 = v29 + v30;
  if (!(*(unsigned int (**)(unint64_t))(v23 + 48))(((unint64_t)v31 + v24 + 8) & v28)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v26, v27, v33);
LABEL_8:
  unint64_t v39 = ((unint64_t)v27 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v40 = ((unint64_t)v26 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v41 = *(_OWORD *)v39;
  long long v42 = *(_OWORD *)(v39 + 16);
  *(_WORD *)(v40 + 32) = *(_WORD *)(v39 + 32);
  *(_OWORD *)unint64_t v40 = v41;
  *(_OWORD *)(v40 + 16) = v42;
  return v47;
}

uint64_t destroy for InsettableGroupedListBody.TableViewRoot(uint64_t a1, uint64_t a2)
{
  outlined consume of Environment<CGFloat?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *(unsigned char *)(a1 + 9));
  unint64_t v4 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<CGFloat?>.Content(*(void *)v4, *(unsigned __int8 *)(v4 + 8), *(unsigned char *)(v4 + 9));
  unint64_t v5 = (v4 + 17) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<ListPadding>.Content(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), *(void *)(v5 + 32), *(void *)(v5 + 40), *(void *)(v5 + 48), *(void *)(v5 + 56), *(unsigned char *)(v5 + 64), *(unsigned char *)(v5 + 65));
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (v5 + (v9 | 7) + 66) & ~(v9 | 7);
  uint64_t v11 = ~v9;
  unint64_t v12 = (uint64_t *)((v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) != 0)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    uint64_t result = (*(uint64_t (**)(unint64_t))(v7 + 48))(((unint64_t)v12 + v9 + 8) & v11);
    uint64_t v8 = v16;
    if (result) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v13 = *v12;
  if ((unint64_t)*v12 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  uint64_t result = (v13 + 1);
  if (v13 == -1)
  {
LABEL_7:
    uint64_t v17 = v8;
    swift_release();
    swift_release();
    uint64_t v15 = *(uint64_t (**)(unint64_t, uint64_t))(v17 + 8);
    return v15(((unint64_t)v12 + v9 + 8) & v11, v6);
  }
  return result;
}

uint64_t SidebarListBody.CollectionViewBody.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v71 = a2;
  uint64_t v67 = *(void *)(a1 + 24);
  uint64_t v4 = v67;
  type metadata accessor for Binding();
  uint64_t v61 = type metadata accessor for Optional();
  uint64_t v60 = *(void *)(v61 - 8);
  MEMORY[0x1F4188790](v61);
  uint64_t v59 = &v54[-v5];
  uint64_t v73 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(v73 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v72 = &v54[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v65 = *(void *)(a1 + 32);
  uint64_t v64 = *(void *)(a1 + 40);
  *(void *)&long long v94 = v9;
  *((void *)&v94 + 1) = v4;
  *(void *)&long long v95 = v65;
  *((void *)&v95 + 1) = v64;
  uint64_t v58 = type metadata accessor for CollectionViewListRoot();
  uint64_t v70 = *(void *)(v58 - 8);
  MEMORY[0x1F4188790](v58);
  long long v63 = &v54[-v10];
  uint64_t v62 = type metadata accessor for ModifiedContent();
  uint64_t v69 = *(void *)(v62 - 8);
  MEMORY[0x1F4188790](v62);
  id v66 = &v54[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v12);
  id v68 = &v54[-v13];
  uint64_t v14 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = &v54[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = &v54[-v19];
  uint64_t v21 = *(void *)(v2 + 32);
  char v22 = *(unsigned char *)(v2 + 40);
  outlined copy of Environment<Bool>.Content(v21, v22);
  char v23 = specialized Environment.wrappedValue.getter(v21, v22);
  outlined consume of Environment<Bool>.Content(v21, v22);
  uint64_t v24 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v15 + 104);
  uint64_t v25 = (unsigned int *)MEMORY[0x1E4FB10E0];
  if ((v23 & 1) == 0) {
    uint64_t v25 = (unsigned int *)MEMORY[0x1E4FB10C0];
  }
  uint64_t v26 = *v25;
  uint64_t v57 = v20;
  uint64_t v56 = v14;
  v24(v20, v26, v14);
  outlined copy of Environment<Bool>.Content(v21, v22);
  char v27 = specialized Environment.wrappedValue.getter(v21, v22);
  outlined consume of Environment<Bool>.Content(v21, v22);
  if (v27) {
    double v28 = 44.0;
  }
  else {
    double v28 = 28.0;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v72, v2 + *(int *)(a1 + 64), v73);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v15 + 16))(v17, v20, v14);
  uint64_t v29 = *(void *)v2;
  uint64_t v30 = *(unsigned __int8 *)(v2 + 8);
  int v31 = *(unsigned __int8 *)(v2 + 9);
  outlined copy of Environment<CGFloat?>.Content(*(void *)v2, v30, *(unsigned char *)(v2 + 9));
  uint64_t v32 = specialized Environment.wrappedValue.getter(v29, v30 | (v31 << 8));
  int v55 = v33 & 1;
  outlined consume of Environment<CGFloat?>.Content(v29, v30, v31);
  uint64_t v34 = *(void *)(v2 + 16);
  uint64_t v35 = *(unsigned __int8 *)(v2 + 24);
  LODWORD(v30) = *(unsigned __int8 *)(v2 + 25);
  outlined copy of Environment<CGFloat?>.Content(v34, v35, *(unsigned char *)(v2 + 25));
  double v36 = COERCE_DOUBLE(specialized Environment.wrappedValue.getter(v34, v35 | (v30 << 8)));
  char v38 = v37;
  outlined consume of Environment<CGFloat?>.Content(v34, v35, v30);
  if ((v38 & 1) == 0) {
    double v28 = v36;
  }
  uint64_t v39 = (uint64_t)v59;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v60 + 16))(v59, v2 + *(int *)(a1 + 68), v61);
  long long v40 = *(_OWORD *)(v2 + 96);
  long long v96 = *(_OWORD *)(v2 + 80);
  long long v97 = v40;
  __int16 v98 = *(_WORD *)(v2 + 112);
  long long v41 = *(_OWORD *)(v2 + 64);
  long long v94 = *(_OWORD *)(v2 + 48);
  long long v95 = v41;
  outlined retain of Environment<ListPadding>((uint64_t)&v94, (void (*)(void, void, void, void, void, void, void, void, _WORD))outlined copy of Environment<ListPadding>.Content);
  specialized Environment.wrappedValue.getter((uint64_t)v85);
  outlined retain of Environment<ListPadding>((uint64_t)&v94, (void (*)(void, void, void, void, void, void, void, void, _WORD))outlined consume of Environment<ListPadding>.Content);
  v76[0] = v85[0];
  uint64_t v77 = v86;
  char v78 = v87;
  uint64_t v79 = v88;
  char v80 = v89;
  uint64_t v81 = v90;
  char v82 = v91;
  uint64_t v83 = v92;
  char v84 = v93;
  long long v42 = v63;
  CollectionViewListRoot.init(content:style:minRowHeight:minHeaderHeight:selection:listPadding:)((uint64_t)v72, (uint64_t)v17, v32, v55, v39, v76, v73, (uint64_t)v63, v28);
  uint64_t v43 = v58;
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v58, &protocol witness table for CollectionViewListRoot<A, B>, v44, v45);
  uint64_t v46 = type metadata accessor for AccessibilitySidebarListModifier();
  uint64_t WitnessTable = swift_getWitnessTable();
  id v74 = &protocol witness table for CollectionViewListRoot<A, B>;
  unint64_t v75 = &protocol witness table for AccessibilityAttachmentModifier;
  uint64_t v48 = v62;
  uint64_t v49 = swift_getWitnessTable();
  uint64_t v50 = v66;
  View.accessibilityConfiguration<A>(_:)(v49, v43, v46, (uint64_t)&protocol witness table for CollectionViewListRoot<A, B>, WitnessTable);
  (*(void (**)(unsigned char *, uint64_t))(v70 + 8))(v42, v43);
  (*(void (**)(unsigned char *, uint64_t))(v15 + 8))(v57, v56);
  uint64_t v51 = v68;
  static ViewBuilder.buildExpression<A>(_:)(v50);
  uint64_t v52 = *(void (**)(unsigned char *, uint64_t))(v69 + 8);
  v52(v50, v48);
  static ViewBuilder.buildExpression<A>(_:)(v51);
  return ((uint64_t (*)(unsigned char *, uint64_t))v52)(v51, v48);
}

uint64_t CollectionViewListRoot.init(content:style:minRowHeight:minHeaderHeight:selection:listPadding:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, double a9@<D0>)
{
  char v14 = *a6;
  uint64_t v15 = *((void *)a6 + 1);
  char v30 = a6[16];
  uint64_t v29 = *((void *)a6 + 3);
  char v28 = a6[32];
  uint64_t v27 = *((void *)a6 + 5);
  char v26 = a6[48];
  uint64_t v25 = *((void *)a6 + 7);
  char v24 = a6[64];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(a8, a1, a7);
  uint64_t v16 = (int *)type metadata accessor for CollectionViewListRoot();
  uint64_t v17 = a8 + v16[13];
  uint64_t v18 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v17, a2, v18);
  uint64_t v19 = a8 + v16[14];
  *(void *)uint64_t v19 = a3;
  *(unsigned char *)(v19 + 8) = a4 & 1;
  *(double *)(a8 + v16[15]) = a9;
  uint64_t v20 = a8 + v16[16];
  type metadata accessor for Binding();
  uint64_t v21 = type metadata accessor for Optional();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32))(v20, a5, v21);
  uint64_t v23 = a8 + v16[17];
  *(unsigned char *)uint64_t v23 = v14;
  *(void *)(v23 + 8) = v15;
  *(unsigned char *)(v23 + 16) = v30;
  *(void *)(v23 + 24) = v29;
  *(unsigned char *)(v23 + 32) = v28;
  *(void *)(v23 + 40) = v27;
  *(unsigned char *)(v23 + 48) = v26;
  *(void *)(v23 + 56) = v25;
  *(unsigned char *)(v23 + 64) = v24;
  return result;
}

uint64_t type metadata accessor for CollectionViewListRoot()
{
  return swift_getGenericMetadata();
}

uint64_t InsettableGroupedListBody.CollectionViewBody.body.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v6 = *(_OWORD *)(a1 + 32);
  v16[0] = *(_OWORD *)(a1 + 16);
  v16[1] = v6;
  uint64_t v7 = type metadata accessor for CollectionViewListRoot();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v16 - v12;
  InsettableGroupedListBody.CollectionViewBody.style.getter(a1, (uint64_t)v5);
  InsettableGroupedListBody.CollectionViewBody.collectionViewListRoot(style:)((uint64_t)v5, a1, (uint64_t)v10);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  static ViewBuilder.buildExpression<A>(_:)(v10);
  char v14 = *(void (**)(char *, uint64_t))(v8 + 8);
  v14(v10, v7);
  static ViewBuilder.buildExpression<A>(_:)(v13);
  return ((uint64_t (*)(char *, uint64_t))v14)(v13, v7);
}

uint64_t InsettableGroupedListBody.CollectionViewBody.effectiveListPadding.getter@<X0>(uint64_t a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 80);
  uint64_t v6[2] = *(_OWORD *)(v1 + 64);
  v6[3] = v3;
  __int16 v7 = *(_WORD *)(v1 + 96);
  long long v4 = *(_OWORD *)(v1 + 48);
  v6[0] = *(_OWORD *)(v1 + 32);
  v6[1] = v4;
  outlined retain of Environment<ListPadding>((uint64_t)v6, (void (*)(void, void, void, void, void, void, void, void, _WORD))outlined copy of Environment<ListPadding>.Content);
  specialized Environment.wrappedValue.getter(a1);
  return outlined retain of Environment<ListPadding>((uint64_t)v6, (void (*)(void, void, void, void, void, void, void, void, _WORD))outlined consume of Environment<ListPadding>.Content);
}

uint64_t outlined retain of Environment<ListPadding>(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, _WORD))
{
  return a1;
}

uint64_t destroy for SidebarListBody.CollectionViewBody(uint64_t a1, uint64_t a2)
{
  outlined consume of Environment<CGFloat?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *(unsigned char *)(a1 + 9));
  unint64_t v4 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<CGFloat?>.Content(*(void *)v4, *(unsigned __int8 *)(v4 + 8), *(unsigned char *)(v4 + 9));
  outlined consume of Environment<Bool>.Content(*(void *)((v4 + 17) & 0xFFFFFFFFFFFFFFF8), *(unsigned char *)(((v4 + 17) & 0xFFFFFFFFFFFFFFF8) + 8));
  unint64_t v5 = (v4 + 33) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<ListPadding>.Content(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), *(void *)(v5 + 32), *(void *)(v5 + 40), *(void *)(v5 + 48), *(void *)(v5 + 56), *(unsigned char *)(v5 + 64), *(unsigned char *)(v5 + 65));
  uint64_t v6 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v6 + 80) + 66) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v8);
  uint64_t v9 = *(void *)(v7 + 56);
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = v11;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v8 + v9 + (v13 | 7)) & ~(v13 | 7);
  uint64_t v15 = ~v13;
  uint64_t v16 = (uint64_t *)((v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v11 + 84) & 0x80000000) != 0)
  {
    uint64_t v20 = *(void *)(v10 - 8);
    uint64_t result = (*(uint64_t (**)(unint64_t))(v11 + 48))(((unint64_t)v16 + v13 + 8) & v15);
    uint64_t v12 = v20;
    if (result) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v17 = *v16;
  if ((unint64_t)*v16 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  uint64_t result = (v17 + 1);
  if (v17 == -1)
  {
LABEL_7:
    uint64_t v21 = v12;
    swift_release();
    swift_release();
    uint64_t v19 = *(uint64_t (**)(unint64_t, uint64_t))(v21 + 8);
    return v19(((unint64_t)v16 + v13 + 8) & v15, v10);
  }
  return result;
}

uint64_t destroy for CollectionViewListRoot(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56);
  uint64_t v6 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7 + 8;
  unint64_t v9 = (v5 + a1 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v9, v6);
  unint64_t v10 = (*(void *)(v8 + 56) + v9 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = v12;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = ~v14;
  uint64_t v16 = (uint64_t *)((((v10 + (v14 | 7) + 8) & ~(v14 | 7)) + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v12 + 84) & 0x80000000) != 0)
  {
    uint64_t v20 = *(void *)(v11 - 8);
    uint64_t result = (*(uint64_t (**)(unint64_t))(v12 + 48))(((unint64_t)v16 + v14 + 8) & v15);
    uint64_t v13 = v20;
    if (result) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v17 = *v16;
  if ((unint64_t)*v16 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  uint64_t result = (v17 + 1);
  if (v17 == -1)
  {
LABEL_7:
    uint64_t v21 = v13;
    swift_release();
    swift_release();
    uint64_t v19 = *(uint64_t (**)(unint64_t, uint64_t))(v21 + 8);
    return v19(((unint64_t)v16 + v14 + 8) & v15, v11);
  }
  return result;
}

uint64_t destroy for SidebarListStyle.BodyContent(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = a1 & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<Bool?>.Content(*(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned __int8 *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16));
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (v3 + *(unsigned __int8 *)(v4 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

uint64_t destroy for InsettableGroupedListBody.CollectionViewBody(uint64_t a1, uint64_t a2)
{
  outlined consume of Environment<CGFloat?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *(unsigned char *)(a1 + 9));
  unint64_t v4 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<CGFloat?>.Content(*(void *)v4, *(unsigned __int8 *)(v4 + 8), *(unsigned char *)(v4 + 9));
  unint64_t v5 = (v4 + 17) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<ListPadding>.Content(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), *(void *)(v5 + 32), *(void *)(v5 + 40), *(void *)(v5 + 48), *(void *)(v5 + 56), *(unsigned char *)(v5 + 64), *(unsigned char *)(v5 + 65));
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + (v8 | 7) + 66) & ~(v8 | 7);
  uint64_t v10 = ~v8;
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v12 = (uint64_t *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) != 0)
  {
    if (!(*(unsigned int (**)(unint64_t))(v7 + 48))(((unint64_t)v12 + v8 + 8) & v10))
    {
LABEL_5:
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)v12 + v8 + 8) & v10, v6);
    }
  }
  else
  {
    uint64_t v13 = *v12;
    if ((unint64_t)*v12 >= 0xFFFFFFFF) {
      LODWORD(v13) = -1;
    }
    if (v13 == -1) {
      goto LABEL_5;
    }
  }
  uint64_t v14 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v15 = *(uint64_t (**)(unint64_t))(v14 + 8);
  unint64_t v16 = (((v11 + ((v8 + 16) & v10) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v14 + 80) + 34) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);

  return v15(v16);
}

uint64_t outlined consume of Environment<ListPadding>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  if ((a10 & 1) == 0) {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for SidebarListBody.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)a2;
  char v6 = *(unsigned char *)(a2 + 9);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)a2, v7, v6);
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 9) = v6;
  uint64_t v48 = a1;
  unint64_t v8 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)v9;
  LOBYTE(v5) = *(unsigned char *)(v9 + 9);
  unsigned __int8 v11 = *(unsigned char *)(v9 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)v9, v11, v5);
  *(void *)unint64_t v8 = v10;
  *(unsigned char *)(v8 + 8) = v11;
  *(unsigned char *)(v8 + 9) = v5;
  unint64_t v12 = (v8 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v9 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = *(void *)v13;
  LOBYTE(v5) = *(unsigned char *)(v13 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v13, v5);
  *(void *)unint64_t v12 = v14;
  *(unsigned char *)(v12 + 8) = v5;
  unint64_t v15 = (v8 + 33) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v9 + 33) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = *(void *)v16;
  uint64_t v18 = *(void *)(v16 + 8);
  uint64_t v19 = *(void *)(v16 + 16);
  uint64_t v20 = *(void *)(v16 + 24);
  uint64_t v21 = *(void *)(v16 + 32);
  uint64_t v22 = *(void *)(v16 + 40);
  uint64_t v23 = *(void *)(v16 + 48);
  uint64_t v24 = *(void *)(v16 + 56);
  char v45 = *(unsigned char *)(v16 + 64);
  char v46 = *(unsigned char *)(v16 + 65);
  outlined copy of Environment<ListPadding>.Content(*(void *)v16, v18, v19, v20, v21, v22, v23, v24, v45, v46);
  *(void *)unint64_t v15 = v17;
  *(void *)(v15 + 8) = v18;
  *(void *)(v15 + 16) = v19;
  *(void *)(v15 + 24) = v20;
  *(void *)(v15 + 32) = v21;
  *(void *)(v15 + 40) = v22;
  *(void *)(v15 + 48) = v23;
  *(void *)(v15 + 56) = v24;
  *(unsigned char *)(v15 + 64) = v45;
  *(unsigned char *)(v15 + 65) = v46;
  uint64_t v25 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v26 = v25 + 16;
  uint64_t v27 = *(unsigned __int8 *)(v25 + 80);
  uint64_t v28 = (v27 + 66 + v15) & ~v27;
  uint64_t v29 = (v27 + 66 + v16) & ~v27;
  (*(void (**)(uint64_t, uint64_t))(v25 + 16))(v28, v29);
  uint64_t v30 = *(void *)(v26 + 48);
  uint64_t v31 = *(void *)(a3 + 24);
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(unsigned __int8 *)(v32 + 80);
  uint64_t v34 = (v33 | 7) + v30;
  uint64_t v35 = (void *)((v34 + v28) & ~(v33 | 7));
  double v36 = (void *)((v34 + v29) & ~(v33 | 7));
  uint64_t v37 = ~v33;
  uint64_t v38 = *(void *)(v32 + 64);
  uint64_t v39 = (uint64_t *)(((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v32 + 84) & 0x80000000) == 0)
  {
    uint64_t v40 = *v39;
    if ((unint64_t)*v39 >= 0xFFFFFFFF) {
      LODWORD(v40) = -1;
    }
    if (v40 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *uint64_t v35 = *v36;
    long long v41 = (void *)(((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8);
    *long long v41 = *v39;
    uint64_t v42 = ((unint64_t)v41 + v33 + 8) & v37;
    uint64_t v43 = *(void (**)(uint64_t, unint64_t, uint64_t))(v32 + 16);
    swift_retain();
    swift_retain();
    v43(v42, ((unint64_t)v39 + v33 + 8) & v37, v31);
    return v48;
  }
  if (!(*(unsigned int (**)(unint64_t))(v32 + 48))(((unint64_t)v39 + v33 + 8) & v37)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v35, v36, ((v33 + 16) & ~v33) + v38);
  return v48;
}

uint64_t initializeWithCopy for InsettableGroupedListBody.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)a2;
  char v6 = *(unsigned char *)(a2 + 9);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)a2, v7, v6);
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 9) = v6;
  uint64_t v47 = a1;
  unint64_t v8 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)v9;
  LOBYTE(v5) = *(unsigned char *)(v9 + 9);
  unsigned __int8 v11 = *(unsigned char *)(v9 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)v9, v11, v5);
  *(void *)unint64_t v8 = v10;
  *(unsigned char *)(v8 + 8) = v11;
  *(unsigned char *)(v8 + 9) = v5;
  unint64_t v12 = (v8 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v9 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = *(void *)v13;
  uint64_t v15 = *(void *)(v13 + 8);
  uint64_t v16 = *(void *)(v13 + 16);
  uint64_t v17 = *(void *)(v13 + 24);
  uint64_t v18 = *(void *)(v13 + 32);
  uint64_t v19 = *(void *)(v13 + 40);
  uint64_t v20 = *(void *)(v13 + 48);
  uint64_t v21 = *(void *)(v13 + 56);
  char v45 = *(unsigned char *)(v13 + 64);
  char v46 = *(unsigned char *)(v13 + 65);
  outlined copy of Environment<ListPadding>.Content(*(void *)v13, v15, v16, v17, v18, v19, v20, v21, v45, v46);
  *(void *)unint64_t v12 = v14;
  *(void *)(v12 + 8) = v15;
  *(void *)(v12 + 16) = v16;
  *(void *)(v12 + 24) = v17;
  *(void *)(v12 + 32) = v18;
  *(void *)(v12 + 40) = v19;
  *(void *)(v12 + 48) = v20;
  *(void *)(v12 + 56) = v21;
  *(unsigned char *)(v12 + 64) = v45;
  *(unsigned char *)(v12 + 65) = v46;
  uint64_t v22 = *(void *)(a3 + 24);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v25 = (v24 | 7) + 66;
  uint64_t v26 = (void *)((v25 + v12) & ~(v24 | 7));
  uint64_t v27 = (void *)((v25 + v13) & ~(v24 | 7));
  uint64_t v28 = ~v24;
  uint64_t v29 = (v24 + 16) & ~v24;
  uint64_t v30 = *(void *)(v23 + 64);
  uint64_t v31 = (uint64_t *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v23 + 84) & 0x80000000) == 0)
  {
    uint64_t v32 = *v31;
    if ((unint64_t)*v31 >= 0xFFFFFFFF) {
      LODWORD(v32) = -1;
    }
    size_t v33 = v29 + v30;
    if (v32 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *uint64_t v26 = *v27;
    uint64_t v34 = (void *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v34 = *v31;
    uint64_t v35 = v24 + 8;
    uint64_t v36 = ((unint64_t)v34 + v24 + 8) & v28;
    unint64_t v37 = ((unint64_t)v31 + v35) & v28;
    uint64_t v38 = *(void (**)(uint64_t, unint64_t, uint64_t))(v23 + 16);
    swift_retain();
    swift_retain();
    v38(v36, v37, v22);
    goto LABEL_8;
  }
  size_t v33 = v29 + v30;
  if (!(*(unsigned int (**)(unint64_t))(v23 + 48))(((unint64_t)v31 + v24 + 8) & v28)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v26, v27, v33);
LABEL_8:
  unint64_t v39 = ((unint64_t)v26 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v40 = ((unint64_t)v27 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v41 = *(_OWORD *)v40;
  long long v42 = *(_OWORD *)(v40 + 16);
  *(_WORD *)(v39 + 32) = *(_WORD *)(v40 + 32);
  *(_OWORD *)unint64_t v39 = v41;
  *(_OWORD *)(v39 + 16) = v42;
  uint64_t v43 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v43 + 16))((*(unsigned __int8 *)(v43 + 80) + 34 + v39) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80), (*(unsigned __int8 *)(v43 + 80) + 34 + v40) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80));
  return v47;
}

uint64_t outlined copy of Environment<ListPadding>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  if ((a10 & 1) == 0) {
    return swift_retain();
  }
  return result;
}

uint64_t initializeWithCopy for CollectionViewListRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9 + 16;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = v7 + v11;
  uint64_t v13 = (v7 + v11 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v13, v14, v8);
  uint64_t v15 = *(void *)(v10 + 48);
  uint64_t v16 = v15 + v13;
  uint64_t v17 = v15 + v14;
  unint64_t v18 = (v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  char v20 = *(unsigned char *)(v19 + 8);
  *(void *)unint64_t v18 = *(void *)v19;
  *(unsigned char *)(v18 + 8) = v20;
  uint64_t v21 = (void *)((v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = (void *)((v17 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v21 = *v22;
  uint64_t v23 = *(void *)(a3 + 24);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(_DWORD *)(v24 + 80);
  uint64_t v26 = v25 + 8;
  unint64_t v27 = *(_DWORD *)(v24 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v28 = (void *)(((unint64_t)v21 + v25 + 8) & v27);
  uint64_t v29 = (void *)(((unint64_t)v22 + v25 + 8) & v27);
  uint64_t v30 = ~v25;
  uint64_t v31 = (v25 + 16) & ~v25;
  uint64_t v32 = *(void *)(v24 + 64);
  size_t v33 = (uint64_t *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v24 + 84) & 0x80000000) == 0)
  {
    uint64_t v34 = *v33;
    if ((unint64_t)*v33 >= 0xFFFFFFFF) {
      LODWORD(v34) = -1;
    }
    size_t v35 = v31 + v32;
    if (v34 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *uint64_t v28 = *v29;
    uint64_t v36 = (void *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v36 = *v33;
    unint64_t v44 = ((unint64_t)v36 + v26) & v30;
    unint64_t v37 = *(void (**)(unint64_t, unint64_t, uint64_t))(v24 + 16);
    swift_retain();
    swift_retain();
    v37(v44, ((unint64_t)v33 + v26) & v30, v23);
    goto LABEL_8;
  }
  size_t v35 = v31 + v32;
  if (!(*(unsigned int (**)(unint64_t))(v24 + 48))(((unint64_t)v33 + v26) & v30)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v28, v29, v35);
LABEL_8:
  unint64_t v38 = ((unint64_t)v28 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v39 = ((unint64_t)v29 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v38 = *(_OWORD *)v39;
  long long v40 = *(_OWORD *)(v39 + 16);
  long long v41 = *(_OWORD *)(v39 + 32);
  long long v42 = *(_OWORD *)(v39 + 48);
  *(unsigned char *)(v38 + 64) = *(unsigned char *)(v39 + 64);
  *(_OWORD *)(v38 + 32) = v41;
  *(_OWORD *)(v38 + 48) = v42;
  *(_OWORD *)(v38 + 16) = v40;
  return a1;
}

unint64_t initializeWithCopy for SidebarListStyle.BodyContent(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  char v8 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  outlined copy of Environment<Bool>.Content(v7, v8);
  *(void *)(v5 + 8) = v7;
  *(unsigned char *)(v5 + 16) = v8;
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 16))((*(unsigned __int8 *)(v9 + 80) + 17 + v5) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(unsigned __int8 *)(v9 + 80) + 17 + v6) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

void specialized Environment.wrappedValue.getter(uint64_t a1@<X8>)
{
  if (*(unsigned char *)(v1 + 65) == 1)
  {
    char v3 = *(unsigned char *)(v1 + 64);
    uint64_t v4 = *(void *)(v1 + 56);
    char v5 = *(_DWORD *)(v1 + 48);
    uint64_t v6 = *(void *)(v1 + 40);
    char v7 = *(_DWORD *)(v1 + 32);
    uint64_t v8 = *(void *)(v1 + 24);
    char v9 = *(_DWORD *)(v1 + 16);
    uint64_t v10 = *(void *)(v1 + 8);
    *(unsigned char *)a1 = *(void *)v1;
    *(void *)(a1 + 8) = v10;
    *(unsigned char *)(a1 + 16) = v9 & 1;
    *(void *)(a1 + 24) = v8;
    *(unsigned char *)(a1 + 32) = v7 & 1;
    *(void *)(a1 + 40) = v6;
    *(unsigned char *)(a1 + 48) = v5 & 1;
    *(void *)(a1 + 56) = v4;
    *(unsigned char *)(a1 + 64) = v3 & 1;
  }
  else
  {
    outlined retain of Environment<ListPadding>(v1, (void (*)(void, void, void, void, void, void, void, void, _WORD))outlined copy of Environment<ListPadding>.Content);
    os_log_type_t v11 = static os_log_type_t.fault.getter();
    uint64_t v12 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v13 = v11;
    if (os_log_type_enabled(v12, v11))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      uint64_t v16 = v15;
      *(_DWORD *)uint64_t v14 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x646461507473694CLL, 0xEB00000000676E69, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v12, v13, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v15, -1, -1);
      MEMORY[0x18C119C60](v14, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined retain of Environment<ListPadding>(v1, (void (*)(void, void, void, void, void, void, void, void, _WORD))outlined consume of Environment<ListPadding>.Content);
    swift_release();
    swift_release();
  }
}

uint64_t InsettableGroupedListBody.CollectionViewBody.style.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  MEMORY[0x1F4188790](a1);
  char v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v2 + *(int *)(v8 + 72);
  if (*(unsigned char *)(v9 + 33) != 1
    || ((int v10 = *(unsigned __int8 *)(v9 + 32),
         uint64_t v11 = *(void *)(v9 + 16) | *(void *)(v9 + 24) | *(void *)v9 | *(void *)(v9 + 8),
         !v10)
      ? (BOOL v12 = v11 == 0)
      : (BOOL v12 = 0),
        !v12))
  {
    unint64_t v39 = v7;
    uint64_t v40 = v5;
    uint64_t v41 = a2;
    uint64_t v38 = v2;
    InsettableGroupedListBody.CollectionViewBody.effectiveListPadding.getter((uint64_t)&v42);
    uint64_t v13 = v43;
    char v14 = v44;
    uint64_t v15 = v45;
    char v16 = v46;
    uint64_t v17 = v47;
    char v18 = v48;
    uint64_t v19 = v49;
    char v20 = v50;
    uint64_t v42 = v43;
    LOBYTE(v43) = v44;
    uint64_t v44 = v45;
    LOBYTE(v45) = v46;
    uint64_t v46 = v47;
    LOBYTE(v47) = v48;
    uint64_t v48 = v49;
    LOBYTE(v49) = v50;
    uint64_t v21 = OptionalEdgeInsets.leading.getter();
    if (v22) {
      goto LABEL_12;
    }
    if ((v21 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      goto LABEL_12;
    }
    uint64_t v42 = v13;
    LOBYTE(v43) = v14;
    uint64_t v44 = v15;
    LOBYTE(v45) = v16;
    uint64_t v46 = v17;
    LOBYTE(v47) = v18;
    uint64_t v48 = v19;
    LOBYTE(v49) = v20;
    uint64_t v23 = OptionalEdgeInsets.trailing.getter();
    if (v24)
    {
LABEL_12:
      uint64_t v26 = v39;
      uint64_t v27 = v40;
      (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v39, v38, a1);
      uint64_t v28 = v41;
    }
    else
    {
      uint64_t v25 = v23 & 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v26 = v39;
      uint64_t v27 = v40;
      (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v39, v38, a1);
      uint64_t v28 = v41;
      if (!v25)
      {
        InsettableGroupedListBody.CollectionViewBody.effectiveListPadding.getter((uint64_t)&v42);
        int v29 = v42;
        (*(void (**)(char *, uint64_t))(v27 + 8))(v26, a1);
        if (!v29)
        {
          uint64_t v30 = (unsigned int *)MEMORY[0x1E4FB10D8];
LABEL_15:
          uint64_t v31 = *v30;
          uint64_t v32 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 104))(v28, v31, v32);
        }
LABEL_14:
        uint64_t v30 = (unsigned int *)MEMORY[0x1E4FB10C0];
        goto LABEL_15;
      }
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v26, a1);
    goto LABEL_14;
  }
  uint64_t v34 = *MEMORY[0x1E4FB10D8];
  uint64_t v35 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 104);

  return v36(a2, v34, v35);
}

uint64_t InsettableGroupedListBody.CollectionViewBody.collectionViewListRoot(style:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v35 = a3;
  uint64_t v34 = *(void *)(a2 + 24);
  type metadata accessor for Binding();
  uint64_t v33 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v33 - 8);
  MEMORY[0x1F4188790](v33);
  uint64_t v32 = &v28[-v7];
  uint64_t v8 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (uint64_t)&v28[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v31 = v11;
  uint64_t v12 = *(void *)(a2 + 16);
  double v14 = MEMORY[0x1F4188790](v13);
  char v16 = &v28[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v17 + 16))(v16, v3 + *(int *)(a2 + 68), v12, v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  uint64_t v18 = *(void *)v3;
  uint64_t v19 = *(unsigned __int8 *)(v3 + 8);
  LODWORD(v8) = *(unsigned __int8 *)(v3 + 9);
  outlined copy of Environment<CGFloat?>.Content(*(void *)v3, v19, *(unsigned char *)(v3 + 9));
  uint64_t v30 = specialized Environment.wrappedValue.getter(v18, v19 | (v8 << 8));
  int v29 = v20 & 1;
  outlined consume of Environment<CGFloat?>.Content(v18, v19, v8);
  uint64_t v21 = *(void *)(v3 + 16);
  uint64_t v22 = *(unsigned __int8 *)(v3 + 24);
  LODWORD(v19) = *(unsigned __int8 *)(v3 + 25);
  outlined copy of Environment<CGFloat?>.Content(v21, v22, *(unsigned char *)(v3 + 25));
  double v23 = COERCE_DOUBLE(specialized Environment.wrappedValue.getter(v21, v22 | (v19 << 8)));
  LOBYTE(v11) = v24;
  outlined consume of Environment<CGFloat?>.Content(v21, v22, v19);
  if (v11) {
    double v25 = 28.0;
  }
  else {
    double v25 = v23;
  }
  uint64_t v26 = (uint64_t)v32;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v32, v3 + *(int *)(a2 + 60), v33);
  InsettableGroupedListBody.CollectionViewBody.effectiveListPadding.getter((uint64_t)v45);
  v36[0] = v45[0];
  uint64_t v37 = v46;
  char v38 = v47;
  uint64_t v39 = v48;
  char v40 = v49;
  uint64_t v41 = v50;
  char v42 = v51;
  uint64_t v43 = v52;
  char v44 = v53;
  return CollectionViewListRoot.init(content:style:minRowHeight:minHeaderHeight:selection:listPadding:)((uint64_t)v16, v31, v30, v29, v26, v36, v12, v35, v25);
}

uint64_t type metadata accessor for AccessibilitySidebarListModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for ButtonAction()
{
  uint64_t result = type metadata accessor for LinkDestination();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

Swift::Void __swiftcall ScrollViewCommitMutation.apply()()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 120);
  char v2 = *(unsigned char *)(v0 + 176);
  uint64_t v3 = (_DWORD *)MEMORY[0x1E4F4E7A0];
  if ((~*(void *)(v0 + 96) & 0xF000000000000004) != 0 && AGWeakAttributeGetAttribute() != *v3) {
    AGGraphSetValue();
  }
  if (v1 != 5 && AGWeakAttributeGetAttribute() != *v3) {
    AGGraphSetValue();
  }
  if ((v2 & 1) == 0 && AGWeakAttributeGetAttribute() != *v3)
  {
    type metadata accessor for CGSize(0);
    AGGraphSetValue();
  }
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance CaptureViewRespondersModifier(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  int v6 = *((_DWORD *)a2 + 8);
  uint64_t v7 = a2[5];
  uint64_t v8 = a2[6];
  int v9 = *((_DWORD *)a2 + 20);
  int v10 = *((_DWORD *)a2 + 9) | 0x80;
  uint64_t v13 = *a2;
  int v14 = v4;
  uint64_t v15 = v5;
  uint64_t v16 = a2[3];
  int v17 = v6;
  int v18 = v10;
  uint64_t v19 = v7;
  uint64_t v20 = v8;
  long long v21 = *(_OWORD *)(a2 + 7);
  uint64_t v22 = a2[9];
  int v23 = v9;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v11 = swift_bridgeObjectRetain_n();
  a3(v11, &v13);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.listPadding : EnvironmentValues@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.listPadding.getter((uint64_t)v11);
  uint64_t v3 = v12;
  char v4 = v13;
  uint64_t v5 = v14;
  char v6 = v15;
  uint64_t v7 = v16;
  char v8 = v17;
  uint64_t v9 = v18;
  char v10 = v19;
  *(unsigned char *)a1 = v11[0];
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(unsigned char *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(unsigned char *)(a1 + 64) = v10;
  return result;
}

uint64_t EnvironmentValues.listPadding.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  OptionalEdgeInsets.init()();
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListPaddingAnchorKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListPaddingAnchorKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListPaddingAnchorKey>);
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  char v30 = v57;
  uint64_t v55 = v4;
  uint64_t v56 = v3;
  EnvironmentValues.contentMarginProxy.getter((uint64_t)&v57);
  uint64_t v27 = v57;
  char v26 = v58;
  uint64_t v29 = v59;
  char v28 = v60;
  uint64_t v25 = v61;
  uint64_t v5 = v63;
  char v23 = v62;
  char v24 = v64;
  uint64_t v6 = v65;
  char v7 = v66;
  uint64_t v8 = v67;
  char v9 = v68;
  uint64_t v10 = v69;
  char v11 = v70;
  uint64_t v12 = v71;
  char v13 = v72;
  OptionalEdgeInsets.init()();
  uint64_t v47 = v6;
  char v48 = v7;
  uint64_t v49 = v8;
  char v50 = v9;
  uint64_t v51 = v10;
  char v52 = v11;
  uint64_t v53 = v12;
  char v54 = v13;
  static OptionalEdgeInsets.none.getter();
  uint64_t v31 = v39;
  char v32 = v40;
  uint64_t v33 = v41;
  char v34 = v42;
  uint64_t v35 = v43;
  char v36 = v44;
  uint64_t v37 = v45;
  char v38 = v46;
  uint64_t result = MEMORY[0x18C110940](&v47, &v31);
  *(unsigned char *)a1 = v30;
  uint64_t v15 = v27;
  if ((result & 1) == 0) {
    uint64_t v15 = v6;
  }
  *(void *)(a1 + 8) = v15;
  char v16 = v26;
  if ((result & 1) == 0) {
    char v16 = v7;
  }
  *(unsigned char *)(a1 + 16) = v16 & 1;
  uint64_t v17 = v29;
  if ((result & 1) == 0) {
    uint64_t v17 = v8;
  }
  char v18 = v28;
  if ((result & 1) == 0) {
    char v18 = v9;
  }
  uint64_t v19 = v25;
  if ((result & 1) == 0) {
    uint64_t v19 = v10;
  }
  char v20 = v23;
  if (result)
  {
    uint64_t v21 = v5;
  }
  else
  {
    char v20 = v11;
    uint64_t v21 = v12;
  }
  *(void *)(a1 + 24) = v17;
  *(unsigned char *)(a1 + 32) = v18 & 1;
  char v22 = v24;
  if ((result & 1) == 0) {
    char v22 = v13;
  }
  *(void *)(a1 + 40) = v19;
  *(unsigned char *)(a1 + 48) = v20 & 1;
  *(void *)(a1 + 56) = v21;
  *(unsigned char *)(a1 + 64) = v22 & 1;
  return result;
}

id protocol witness for static EnvironmentKey.defaultValue.getter in conformance NSManagedObjectContextEnvironmentKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  char v2 = (void *)static NSManagedObjectContextEnvironmentKey.defaultValue;
  *a1 = static NSManagedObjectContextEnvironmentKey.defaultValue;

  return v2;
}

uint64_t destroy for CheckmarkToggleStyle(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
  outlined consume of Environment<HoverEffectContext?>.Content(*(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 72), *(unsigned char *)(a1 + 80));
  uint64_t v2 = *(void *)(a1 + 88);
  char v3 = *(unsigned char *)(a1 + 96);

  return outlined consume of Environment<Bool>.Content(v2, v3);
}

uint64_t initializeWithTake for NavigationStackCore.NavigationStackRepresentableRoot(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_weakTakeInit();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  return a1;
}

uint64_t destroy for WindowGroup(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80) & 0xF8 | 7;
  uint64_t v6 = (unsigned __int8 *)((a1 + v5 + 32) & ~v5);
  if (*(void *)(v4 + 64) <= 0x10uLL) {
    uint64_t v7 = 16;
  }
  else {
    uint64_t v7 = *(void *)(v4 + 64);
  }
  unsigned int v8 = v6[v7];
  unsigned int v9 = v8 - 2;
  if (v8 >= 2)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *v6;
        goto LABEL_15;
      case 2:
        int v11 = *(unsigned __int16 *)v6;
        goto LABEL_15;
      case 3:
        int v11 = *(unsigned __int16 *)v6 | (v6[2] << 16);
        goto LABEL_15;
      case 4:
        int v11 = *(_DWORD *)v6;
LABEL_15:
        int v12 = (v11 | (v9 << (8 * v7))) + 2;
        unsigned int v8 = v11 + 2;
        if (v7 < 4) {
          unsigned int v8 = v12;
        }
        break;
      default:
        break;
    }
  }
  if (v8 == 1) {
    swift_release();
  }
  else {
    (*(void (**)(unsigned __int8 *))(v4 + 8))(v6);
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)((((((unint64_t)&v6[v7 + 8] & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
  {
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ToolbarModifier<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t type metadata completion function for _TaskModifier()
{
  uint64_t result = type metadata accessor for TaskPriority();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for PrimitiveButtonStyleConfiguration()
{
  uint64_t result = type metadata accessor for ButtonAction();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeWithCopy for FocusState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64) + 7;
  unsigned int v9 = (void *)((v8 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)((v8 + a2) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v9 = *v10;
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = ((unint64_t)v9 + v11 + 8) & ~v11;
  uint64_t v13 = ((unint64_t)v10 + v11 + 8) & ~v11;
  swift_retain();
  v7(v12, v13, v5);
  return a1;
}

uint64_t protocol witness for CommandsTypeVisitor.visit<A>(type:) in conformance TupleCommandContent<A>.MakeList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return TupleCommandContent.MakeList.visit<A>(type:)(a1, a4, a2, a3);
}

uint64_t TupleCommandContent.MakeList.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  LODWORD(v19) = *(_DWORD *)v4;
  type metadata accessor for TupleCommandContent();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  _GraphValue.init(_:)();
  int v8 = *(_DWORD *)(v4 + 16);
  uint64_t v9 = *(void *)(v4 + 24);
  int v10 = *(_DWORD *)(v4 + 64);
  uint64_t v19 = *(void *)(v4 + 8);
  int v20 = v8;
  uint64_t v21 = v9;
  long long v11 = *(_OWORD *)(v4 + 48);
  long long v22 = *(_OWORD *)(v4 + 32);
  long long v23 = v11;
  int v24 = v10;
  (*(void (**)(uint64_t *__return_ptr, char *, uint64_t *, uint64_t, uint64_t))(a4 + 32))(&v26, v25, &v19, a3, a4);
  uint64_t v12 = v26;
  int v13 = v27;
  uint64_t v14 = *(void *)(v4 + 80);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v14 + 16) + 1, 1, (char *)v14);
    uint64_t v14 = result;
  }
  unint64_t v17 = *(void *)(v14 + 16);
  unint64_t v16 = *(void *)(v14 + 24);
  if (v17 >= v16 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, (char *)v14);
    uint64_t v14 = result;
  }
  *(void *)(v14 + 16) = v17 + 1;
  unint64_t v18 = v14 + 16 * v17;
  *(void *)(v18 + 32) = v12;
  *(_DWORD *)(v18 + 40) = v13;
  *(void *)(v5 + 80) = v14;
  return result;
}

uint64_t type metadata accessor for TupleCommandContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static Commands._makeCommands(content:inputs:) in conformance CommandGroup<A>@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroup._makeCommands(content:inputs:)(a1);
}

uint64_t static CommandGroup._makeCommands(content:inputs:)@<X0>(uint64_t a1@<X8>)
{
  PreferencesOutputs.init()();
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  return result;
}

uint64_t partial apply for closure #1 in ToolbarModifier.TransformToolbar.updateValue()(uint64_t a1)
{
  return closure #1 in ToolbarModifier.TransformToolbar.updateValue()(a1, v1 + 2, v1[10], v1[11]);
}

void @objc UIHostingController.viewWillAppear(_:)(void *a1, uint64_t a2, Swift::Bool a3)
{
  id v4 = a1;
  UIHostingController.viewWillAppear(_:)(a3);
}

Swift::Void __swiftcall UIHostingController.viewWillAppear(_:)(Swift::Bool a1)
{
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for UIHostingController();
  objc_msgSendSuper2(&v3, sel_viewWillAppear_, a1);
  UIHostingController._viewWillAppear(_:)(a1);
}

Swift::Void __swiftcall UIHostingController._viewWillAppear(_:)(Swift::Bool a1)
{
  uint64_t v2 = v1;
  long long v8 = xmmword_18834FC50;
  UIHostingController.resolveRequiredBridges(in:allowedActions:)((uint64_t *)&v8, 3);
  specialized UIHostingController.prepareForNavigationTransition(_:)();
  specialized UIHostingController.coordinateListSelection(transitionCoordinator:isAnimated:)(objc_msgSend(v1, sel_transitionCoordinator));
  swift_unknownObjectRelease();
  id v4 = (void *)specialized UIHostingController.toolbarBridge.getter();
  if (v4)
  {
    id v5 = v4;
    ToolbarBridge.willAppear<A>(hostingController:)(v2);
  }
  uint64_t v6 = (void *)specialized UIHostingController.barAppearanceBridge.getter();
  if (v6)
  {
    id v7 = v6;
    BarAppearanceBridge.willAppear<A>(animated:hostingController:)(a1, v2);
  }
}

void specialized UIHostingController.prepareForNavigationTransition(_:)()
{
  unint64_t v1 = v0;
  uint64_t v2 = (void *)specialized UIHostingController.host.getter();
  type metadata accessor for _UIHostingView();
  id v3 = v2;
  swift_getWitnessTable();
  char v4 = ViewRendererHost.isRendering.getter();

  if ((v4 & 1) == 0)
  {
    specialized UIHostingController.host.getter();
    specialized _UIHostingView.viewGraph.getter();
    swift_retain();
    GraphHost.environment.getter();
    swift_release();
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsEagerNavigationTransitionEnabled>, (uint64_t)&type metadata for EnvironmentValues.IsEagerNavigationTransitionEnabled, (uint64_t)&protocol witness table for EnvironmentValues.IsEagerNavigationTransitionEnabled, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsEagerNavigationTransitionEnabled> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsEagerNavigationTransitionEnabled>, (uint64_t)&type metadata for EnvironmentValues.IsEagerNavigationTransitionEnabled, (uint64_t)&protocol witness table for EnvironmentValues.IsEagerNavigationTransitionEnabled);
    swift_retain_n();
    if (v11)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    if (v10 == 1)
    {
      id v5 = (UINavigationController *)objc_msgSend(v1, sel_navigationController);
      if (v5)
      {
        uint64_t v6 = v5;
        id v7 = [(UINavigationController *)v5 viewControllers];
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
        unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        LOBYTE(v7) = specialized Sequence<>.contains(_:)((uint64_t)v1, v8);
        swift_bridgeObjectRelease();
        if (v7)
        {
          UIHostingController.updateIncomingBoundsIfNeeded(navigationController:)(v6);
          uint64_t v9 = (UINavigationController *)(id)specialized UIHostingController.host.getter();
          _UIHostingView.renderForPreferences(updateDisplayList:)(1);

          uint64_t v6 = v9;
        }
      }
    }
  }
}

void specialized UIHostingController.coordinateListSelection(transitionCoordinator:isAnimated:)(void *a1)
{
  if (a1)
  {
    swift_unknownObjectRetain();
    id v2 = UIHostingController.topOrBottomContentScrollView()();
    if (v2)
    {
      id v4 = v2;
      if (objc_msgSend(a1, sel_viewControllerForKey_, *MEMORY[0x1E4FB30C8]))
      {
        id v3 = (id)specialized UIHostingController.host.getter();
        _UIHostingView.containingViewController.getter();
      }
      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
}

uint64_t BarAppearanceBridge.willAppear<A>(animated:hostingController:)(char a1, void *a2)
{
  BarAppearanceBridge.UpdateContext.init<A>(hostingController:)(a2, v4);
  BarAppearanceBridge.willAppear(animated:updateContext:)(a1, (uint64_t)v4);
  return outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)v4);
}

uint64_t BarAppearanceBridge.willAppear(animated:updateContext:)(char a1, uint64_t a2)
{
  uint64_t v3 = v2;
  outlined init with copy of BarAppearanceBridge.UpdateContext(a2, (uint64_t)v47);
  uint64_t v4 = v2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_updateContext;
  swift_beginAccess();
  uint64_t v30 = v4;
  outlined assign with take of BarAppearanceBridge.UpdateContext?((uint64_t)v47, v4);
  swift_endAccess();
  id v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_barConfigurations);
  swift_beginAccess();
  uint64_t v31 = *v5 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(*v5 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(*v5 + 64);
  int64_t v32 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v35 = *v5;
  swift_bridgeObjectRetain();
  int64_t v9 = 0;
  uint64_t v34 = v2;
  while (v8)
  {
    unint64_t v12 = __clz(__rbit64(v8));
    uint64_t v13 = (v8 - 1) & v8;
    unint64_t v14 = v12 | (v9 << 6);
LABEL_26:
    outlined init with copy of ToolbarPlacement.Role(*(void *)(v35 + 48) + 40 * v14, (uint64_t)v47);
    outlined init with take of ToolbarPlacement.Role((uint64_t)v47, (uint64_t)v46);
    swift_beginAccess();
    uint64_t v18 = *v5;
    if (!*(void *)(*v5 + 16)) {
      goto LABEL_35;
    }
    uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v46);
    if ((v20 & 1) == 0) {
      goto LABEL_35;
    }
    unint64_t v41 = v13;
    int64_t v42 = v9;
    uint64_t v21 = *(void *)(v18 + 56) + 80 * v19;
    uint64_t v22 = *(void *)(v21 + 8);
    uint64_t v23 = *(void *)(v21 + 16);
    char v24 = *(unsigned char *)(v21 + 24);
    uint64_t v25 = *(void *)(v21 + 32);
    char v40 = *(unsigned char *)(v21 + 40);
    uint64_t v39 = *(void *)(v21 + 48);
    char v26 = *(unsigned char *)(v21 + 56);
    char v27 = *(unsigned char *)(v21 + 57);
    char v38 = *(unsigned char *)(v21 + 58);
    char v36 = *(unsigned char *)v21;
    char v37 = *(unsigned char *)(v21 + 72);
    swift_endAccess();
    swift_retain();
    swift_retain_n();
    swift_retain_n();
    if (a1) {
      uint64_t v10 = static Animation.default.getter();
    }
    else {
      uint64_t v10 = 0;
    }
    swift_retain();
    swift_release();
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v46, (uint64_t)v45);
    LOBYTE(v49) = v36;
    *((void *)&v49 + 1) = v22;
    uint64_t v50 = v23;
    char v51 = v24;
    uint64_t v52 = v25;
    char v53 = v40;
    uint64_t v54 = v39;
    char v55 = v26;
    char v56 = v27;
    char v57 = v38;
    uint64_t v58 = v10;
    char v59 = v37;
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v43 = *v5;
    *id v5 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v49, (uint64_t)v45, isUniquelyReferenced_nonNull_native);
    *id v5 = v43;
    swift_bridgeObjectRelease();
    outlined destroy of ToolbarPlacement.Role((uint64_t)v45);
    swift_endAccess();
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v46, (uint64_t)v44);
    swift_beginAccess();
    specialized Set._Variant.insert(_:)((uint64_t)v45, (uint64_t)v44);
    swift_endAccess();
    outlined destroy of ToolbarPlacement.Role((uint64_t)v45);
    outlined destroy of ToolbarPlacement.Role((uint64_t)v46);
    swift_release();
    swift_release();
    swift_release();
    uint64_t v3 = v34;
    unint64_t v8 = v41;
    int64_t v9 = v42;
  }
  int64_t v15 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    uint64_t result = swift_endAccess();
    __break(1u);
    return result;
  }
  if (v15 >= v32) {
    goto LABEL_30;
  }
  unint64_t v16 = *(void *)(v31 + 8 * v15);
  ++v9;
  if (v16) {
    goto LABEL_25;
  }
  int64_t v9 = v15 + 1;
  if (v15 + 1 >= v32) {
    goto LABEL_30;
  }
  unint64_t v16 = *(void *)(v31 + 8 * v9);
  if (v16) {
    goto LABEL_25;
  }
  int64_t v9 = v15 + 2;
  if (v15 + 2 >= v32) {
    goto LABEL_30;
  }
  unint64_t v16 = *(void *)(v31 + 8 * v9);
  if (v16) {
    goto LABEL_25;
  }
  int64_t v9 = v15 + 3;
  if (v15 + 3 >= v32) {
    goto LABEL_30;
  }
  unint64_t v16 = *(void *)(v31 + 8 * v9);
  if (v16) {
    goto LABEL_25;
  }
  int64_t v9 = v15 + 4;
  if (v15 + 4 >= v32) {
    goto LABEL_30;
  }
  unint64_t v16 = *(void *)(v31 + 8 * v9);
  if (v16)
  {
LABEL_25:
    uint64_t v13 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v9 << 6);
    goto LABEL_26;
  }
  int64_t v17 = v15 + 5;
  if (v17 < v32)
  {
    unint64_t v16 = *(void *)(v31 + 8 * v17);
    if (!v16)
    {
      while (1)
      {
        int64_t v9 = v17 + 1;
        if (__OFADD__(v17, 1)) {
          goto LABEL_34;
        }
        if (v9 >= v32) {
          goto LABEL_30;
        }
        unint64_t v16 = *(void *)(v31 + 8 * v9);
        ++v17;
        if (v16) {
          goto LABEL_25;
        }
      }
    }
    int64_t v9 = v17;
    goto LABEL_25;
  }
LABEL_30:
  swift_release();
  BarAppearanceBridge.updateBarsToConfiguration()();
  uint64_t v28 = OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_pendingUpdates;
  if ((*(unsigned char *)(v3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_pendingUpdates) & 2) != 0) {
    BarAppearanceBridge.platformUpdateNavigationAdaptor()();
  }
  uint64_t v48 = 0;
  memset(v47, 0, sizeof(v47));
  swift_beginAccess();
  outlined assign with take of BarAppearanceBridge.UpdateContext?((uint64_t)v47, v30);
  uint64_t result = swift_endAccess();
  *(void *)(v3 + v28) = 0;
  return result;
}

uint64_t ToolbarBridge.navigationItemWillAppear<A>(hostingController:)(uint64_t result)
{
  if (*(void *)(*(void *)(v1 + direct field offset for ToolbarBridge.navigationAdaptor) + 16))
  {
    MEMORY[0x1F4188790](result);
    swift_bridgeObjectRetain();
    static Update.ensure<A>(_:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t ToolbarBridge.willAppear<A>(hostingController:)(void *a1)
{
  ToolbarBridge.updateToolbarVisibility<A>(hostingController:)(a1);
  ToolbarBridge.updateTabBar<A>(hostingController:)(a1);

  return ToolbarBridge.navigationItemWillAppear<A>(hostingController:)((uint64_t)a1);
}

void ToolbarBridge.updateToolbarVisibility<A>(hostingController:)(void *a1)
{
  uint64_t v3 = *(void **)(v1 + direct field offset for ToolbarBridge.platformVended + 32);
  if (!v3) {
    return;
  }
  unint64_t v4 = *(void *)(v1 + direct field offset for ToolbarBridge.platformVended + 16);
  id v12 = v3;
  if (v4 >> 62)
  {
    id v10 = v3;
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter())
    {
LABEL_4:
      swift_bridgeObjectRelease();
      id v7 = objc_msgSend(v12, sel_superview);

      if (!v7)
      {
        id v8 = objc_msgSend(a1, sel_view);
        if (!v8)
        {
          __break(1u);
          return;
        }
        int64_t v9 = v8;
        objc_msgSend(v8, sel_addSubview_, v12);
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v6 = v3;
    swift_bridgeObjectRetain();
    if (v5) {
      goto LABEL_4;
    }
  }
  id v11 = objc_msgSend(v12, sel_superview);

  if (v11)
  {
    swift_bridgeObjectRelease();
    objc_msgSend(v12, sel_removeFromSuperview);
LABEL_11:

    return;
  }

  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall UIHostingController.updateIncomingBoundsIfNeeded(navigationController:)(UINavigationController *navigationController)
{
  void (*v22)(void *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  id v39;
  void v40[2];
  __C::CGRect_optional v41;
  double v42[4];
  char v43;
  uint64_t vars8;
  CGRect v45;
  CGRect v46;

  objc_msgSend((id)specialized UIHostingController.host.getter(), sel_bounds);
  v46.origin.x = 0.0;
  v46.origin.y = 0.0;
  v46.size.width = 0.0;
  v46.size.height = 0.0;
  if (CGRectEqualToRect(v45, v46))
  {
    id v2 = [(UINavigationController *)navigationController viewIfLoaded];
    if (v2)
    {
      uint64_t v3 = v2;
      objc_msgSend(v2, sel_bounds);
      double v5 = v4;
      double v7 = v6;
      double v9 = v8;
      double v11 = v10;

      id v12 = (void *)specialized UIHostingController.host.getter();
      objc_msgSend(v12, sel_setBounds_, v5, v7, v9, v11);
    }
    else
    {
      id v13 = [(UINavigationController *)navigationController splitViewController];
      if (v13
        && (unint64_t v14 = v13,
            UISplitViewController.columnBounds(forNavController:)(&v41, navigationController),
            v14,
            outlined init with take of CGRect?((uint64_t)&v41, (uint64_t)v42),
            (v43 & 1) == 0))
      {
        objc_msgSend((id)specialized UIHostingController.host.getter(), sel_setBounds_, v42[0], v42[1], v42[2], v42[3]);
      }
      else if ((unint64_t)static RepresentableContextValues.current >= 2)
      {
        swift_beginAccess();
        uint64_t Strong = swift_weakLoadStrong();
        if (Strong)
        {
          uint64_t v16 = Strong;
          uint64_t v17 = Strong + 200;
          swift_beginAccess();
          uint64_t v18 = MEMORY[0x18C119DF0](v17);
          uint64_t v19 = *(void *)(v16 + 208);
          swift_release();
          if (v18)
          {
            uint64_t ObjectType = swift_getObjectType();
            unint64_t v21 = type metadata accessor for UIViewControllerProvider();
            uint64_t v22 = *(void (**)(void *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t))(v19 + 16);
            swift_unknownObjectRetain();
            v22(v40, v21, v21, ObjectType, v19);
            swift_unknownObjectRelease();
            if (v40[0])
            {
              uint64_t v23 = v40[1];
              char v24 = swift_getObjectType();
              uint64_t v25 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v24, v23);
              swift_unknownObjectRelease();
              if (v25)
              {
                char v26 = v25;
                char v27 = objc_msgSend(v26, sel_splitViewController);
                if (v27)
                {
                  uint64_t v28 = v27;

                  swift_unknownObjectRelease();
                  return;
                }
                uint64_t v29 = objc_msgSend(v26, sel_viewIfLoaded);
                if (v29)
                {
                  uint64_t v30 = v29;
                  objc_msgSend(v29, sel_bounds);
                  int64_t v32 = v31;
                  uint64_t v34 = v33;
                  char v36 = v35;
                  char v38 = v37;

                  uint64_t v39 = (id)specialized UIHostingController.host.getter();
                  objc_msgSend(v39, sel_setBounds_, v32, v34, v36, v38);
                }
              }
            }
            swift_unknownObjectRelease();
          }
        }
      }
    }
  }
}

id UIHostingController.topOrBottomContentScrollView()()
{
  id result = objc_msgSend(v0, sel_contentScrollViewForEdge_, 1);
  if (!result) {
    return objc_msgSend(v0, sel_contentScrollViewForEdge_, 4);
  }
  return result;
}

Swift::Void __swiftcall _UIHostingView.renderForPreferences(updateDisplayList:)(Swift::Bool updateDisplayList)
{
  _UIHostingView.base.getter();
  UIHostingViewBase.renderForPreferences(updateDisplayList:)(updateDisplayList);

  swift_release();
}

void closure #1 in BarAppearanceBridge.updateNavigationVisibilities(navigationController:)(id a1@<X1>, void **a2@<X0>, uint64_t a3@<X2>, char *a4@<X8>)
{
  id v8 = *a2;
  id v9 = objc_msgSend(a1, sel_topViewController);
  id v10 = objc_msgSend(a1, sel_view);
  if (v10)
  {
    double v11 = v10;
    id v12 = objc_msgSend(v10, sel_window);

    if (!v12) {
      goto LABEL_17;
    }

    BOOL v13 = v9 && v9 == v8;
    char v14 = v13;
    id v15 = objc_msgSend(a1, sel_viewControllers);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    char v17 = specialized Sequence<>.contains(_:)((uint64_t)v8, v16);
    swift_bridgeObjectRelease();
    unsigned int v18 = objc_msgSend(v8, sel__appearState);
    unsigned int v19 = objc_msgSend(v8, sel__appearState);
    if ((v14 & 1) == 0)
    {
      if (v17)
      {

LABEL_37:
        char v27 = 1;
        goto LABEL_38;
      }
      if (v18 != 2 && v19 != 1)
      {
LABEL_17:

        char v27 = 0;
LABEL_38:
        *a4 = v27;
        return;
      }
    }
    swift_getObjectType();
    int v75 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__isFromSwiftUI);
    char v20 = (uint64_t *)(a3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_barConfigurations);
    swift_beginAccess();
    char v66 = v20;
    uint64_t v21 = *v20;
    memset(v78, 0, sizeof(v78));
    uint64_t v73 = a4;
    uint64_t v74 = (uint64_t)a2;
    char v72 = v9;
    char v71 = v14;
    id v56 = a1;
    char v57 = v8;
    if (*(void *)(v21 + 16))
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v78);
      if (v23)
      {
        uint64_t v24 = *(void *)(v21 + 56) + 80 * v22;
        char v70 = *(unsigned char *)v24;
        uint64_t v25 = *(void *)(v24 + 16);
        char v64 = *(unsigned char *)(v24 + 24);
        uint64_t v60 = *(void *)(v24 + 48);
        uint64_t v62 = *(void *)(v24 + 32);
        char v58 = *(unsigned char *)(v24 + 56);
        char v54 = *(unsigned char *)(v24 + 40);
        char v55 = *(unsigned char *)(v24 + 57);
        uint64_t v76 = *(void *)(v24 + 64);
        uint64_t v77 = *(void *)(v24 + 8);
        LOBYTE(v68) = *(unsigned char *)(v24 + 58);
        BYTE4(v68) = *(unsigned char *)(v24 + 72);
        swift_retain();
        swift_retain();
        uint64_t v26 = v25;
        swift_retain();
      }
      else
      {
        uint64_t v68 = 0;
        uint64_t v76 = 0;
        uint64_t v77 = 0;
        uint64_t v60 = 0;
        uint64_t v62 = 0;
        char v64 = 0;
        uint64_t v26 = 0;
        char v70 = 0;
        char v58 = 1;
        char v54 = 1;
        char v55 = 2;
      }
      swift_bridgeObjectRelease();
      char v31 = v64;
      uint64_t v29 = v60;
      uint64_t v30 = v62;
      char v33 = v58;
      char v35 = v54;
      char v34 = v55;
      uint64_t v28 = v76;
      uint64_t v32 = v77;
    }
    else
    {
      uint64_t v68 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      char v31 = 0;
      uint64_t v26 = 0;
      uint64_t v32 = 0;
      char v70 = 0;
      char v33 = 1;
      char v34 = 2;
      char v35 = 1;
    }
    outlined destroy of ToolbarPlacement.Role((uint64_t)v78);
    char v36 = UIViewController.hasNavigationBarContent(updateContext:)(v74);
    v78[0] = v70;
    *(void *)&v78[8] = v32;
    *(void *)&v78[16] = v26;
    unsigned char v78[24] = v31;
    *(void *)&v78[32] = v30;
    char v79 = v35;
    uint64_t v80 = v29;
    char v81 = v33;
    char v82 = v34;
    char v83 = v68;
    uint64_t v84 = v28;
    char v85 = BYTE4(v68);
    char v37 = specialized BarAppearanceBridge.resolveIsHidden(config:edge:isFromSwiftUI:hasContent:)(v78, 0, v75, v36 & 1);
    if (v37 != 2) {
      objc_msgSend(v56, sel_setNavigationBarHidden_animated_, v37 & 1, v28 != 0);
    }
    uint64_t v38 = *v66;
    memset(v78, 0, 24);
    *(_OWORD *)&unsigned char v78[24] = xmmword_188382680;
    a4 = v73;
    if (*(void *)(v38 + 16))
    {
      swift_bridgeObjectRetain();
      uint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v78);
      if (v40)
      {
        uint64_t v41 = *(void *)(v38 + 56) + 80 * v39;
        uint64_t v42 = *(void *)(v41 + 8);
        uint64_t v43 = *(void *)(v41 + 16);
        LOBYTE(v69) = *(unsigned char *)(v41 + 24);
        BYTE4(v69) = *(unsigned char *)v41;
        char v44 = *(unsigned char *)(v41 + 40);
        uint64_t v65 = *(void *)(v41 + 48);
        uint64_t v67 = *(void *)(v41 + 32);
        char v45 = *(unsigned char *)(v41 + 57);
        char v63 = *(unsigned char *)(v41 + 58);
        uint64_t v46 = *(void *)(v41 + 64);
        char v59 = *(unsigned char *)(v41 + 56);
        char v61 = *(unsigned char *)(v41 + 72);
        swift_retain();
        swift_retain();
        swift_retain();
      }
      else
      {
        uint64_t v46 = 0;
        char v63 = 0;
        uint64_t v65 = 0;
        uint64_t v67 = 0;
        uint64_t v69 = 0;
        uint64_t v43 = 0;
        uint64_t v42 = 0;
        char v59 = 1;
        char v61 = 0;
        char v45 = 2;
        char v44 = 1;
      }
      uint64_t v47 = (id *)v74;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v46 = 0;
      char v63 = 0;
      uint64_t v65 = 0;
      uint64_t v67 = 0;
      uint64_t v69 = 0;
      uint64_t v43 = 0;
      uint64_t v42 = 0;
      char v59 = 1;
      char v61 = 0;
      char v45 = 2;
      char v44 = 1;
      uint64_t v47 = (id *)v74;
    }
    outlined destroy of ToolbarPlacement.Role((uint64_t)v78);
    id v48 = objc_msgSend(*v47, sel_toolbarItems);
    if (v48)
    {
      long long v49 = v48;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
      unint64_t v50 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v50 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v51 = *(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      BOOL v52 = v51 != 0;
    }
    else
    {
      BOOL v52 = 0;
    }
    v78[0] = BYTE4(v69);
    *(void *)&v78[8] = v42;
    *(void *)&v78[16] = v43;
    unsigned char v78[24] = v69;
    *(void *)&v78[32] = v67;
    char v79 = v44;
    uint64_t v80 = v65;
    char v81 = v59;
    char v82 = v45;
    char v83 = v63;
    uint64_t v84 = v46;
    char v85 = v61;
    char v53 = specialized BarAppearanceBridge.resolveIsHidden(config:edge:isFromSwiftUI:hasContent:)(v78, 1, v75, v52);
    if (v53 != 2) {
      objc_msgSend(v56, sel_setToolbarHidden_animated_, v53 & 1, v46 != 0);
    }
    BarAppearanceBridge.updateNavigationBarMargins(_:isTop:)(v57, v71);

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_37;
  }
  __break(1u);
}

uint64_t specialized BarAppearanceBridge.resolveIsHidden(config:edge:isFromSwiftUI:hasContent:)(unsigned __int8 *a1, char a2, int a3, int a4)
{
  int v7 = *a1;
  int v8 = a1[24];
  if (a3) {
    goto LABEL_6;
  }
  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) == 0 && (a2 & 1) == 0) {
    return 0;
  }
  if (!v7) {
    return 2;
  }
LABEL_6:
  unsigned int v10 = v8 != 1;
  if ((a2 & 1) == 0) {
    v10 &= static SemanticFeature.isEnabled.getter();
  }
  if (v7) {
    return v7 != 1;
  }
  else {
    return a3 & ~a4 & v10;
  }
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    goto LABEL_20;
  }
  uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v4 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      id v5 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      id v5 = (id)MEMORY[0x18C117680](0, a2);
LABEL_5:
      double v6 = v5;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
      char v7 = static NSObject.== infix(_:_:)();

      if (v7)
      {
LABEL_6:
        swift_bridgeObjectRelease();
        return 1;
      }
      if (v3 == 1) {
        goto LABEL_18;
      }
      if (v4) {
        break;
      }
      unint64_t v4 = 5;
      while (1)
      {
        unint64_t v12 = v4 - 3;
        if (__OFADD__(v4 - 4, 1)) {
          break;
        }
        id v13 = *(id *)(a2 + 8 * v4);
        char v14 = static NSObject.== infix(_:_:)();

        if (v14) {
          goto LABEL_6;
        }
        ++v4;
        if (v12 == v3) {
          goto LABEL_18;
        }
      }
      __break(1u);
    }
    uint64_t v9 = 1;
    while (1)
    {
      MEMORY[0x18C117680](v9, a2);
      uint64_t v10 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        break;
      }
      char v11 = static NSObject.== infix(_:_:)();
      swift_unknownObjectRelease();
      if (v11) {
        goto LABEL_6;
      }
      ++v9;
      if (v10 == v3) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return 0;
}

{
  uint64_t v3;
  unint64_t v4;
  id v5;
  void *v6;
  char v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  id v13;
  char v14;

  if (a2 >> 62) {
    goto LABEL_20;
  }
  uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v4 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      id v5 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      id v5 = (id)MEMORY[0x18C117680](0, a2);
LABEL_5:
      double v6 = v5;
      type metadata accessor for AccessibilityNode();
      char v7 = static NSObject.== infix(_:_:)();

      if (v7)
      {
LABEL_6:
        swift_bridgeObjectRelease();
        return 1;
      }
      if (v3 == 1) {
        goto LABEL_18;
      }
      if (v4) {
        break;
      }
      unint64_t v4 = 5;
      while (1)
      {
        unint64_t v12 = v4 - 3;
        if (__OFADD__(v4 - 4, 1)) {
          break;
        }
        id v13 = *(id *)(a2 + 8 * v4);
        char v14 = static NSObject.== infix(_:_:)();

        if (v14) {
          goto LABEL_6;
        }
        ++v4;
        if (v12 == v3) {
          goto LABEL_18;
        }
      }
      __break(1u);
    }
    uint64_t v9 = 1;
    while (1)
    {
      MEMORY[0x18C117680](v9, a2);
      uint64_t v10 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        break;
      }
      char v11 = static NSObject.== infix(_:_:)();
      swift_unknownObjectRelease();
      if (v11) {
        goto LABEL_6;
      }
      ++v9;
      if (v10 == v3) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return 0;
}

void BarAppearanceBridge.updateNavigationBarMargins(_:isTop:)(void *a1, char a2)
{
  long long v40 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastEnvironment);
  EnvironmentValues.contentMarginProxy.getter((uint64_t)&v47);
  uint64_t v5 = v55;
  char v6 = v56;
  uint64_t v7 = v57;
  char v8 = v58;
  uint64_t v9 = v59;
  char v10 = v60;
  uint64_t v11 = v61;
  char v12 = v62;
  OptionalEdgeInsets.init()();
  uint64_t v32 = v5;
  char v33 = v6;
  uint64_t v34 = v7;
  char v35 = v8;
  uint64_t v36 = v9;
  char v37 = v10;
  uint64_t v38 = v11;
  char v39 = v12;
  static OptionalEdgeInsets.none.getter();
  uint64_t v16 = v24;
  char v17 = v25;
  uint64_t v18 = v26;
  char v19 = v27;
  uint64_t v20 = v28;
  char v21 = v29;
  uint64_t v22 = v30;
  char v23 = v31;
  MEMORY[0x18C110940](&v32, &v16);
  if (a2)
  {
    uint64_t v47 = v5;
    char v48 = v6;
    uint64_t v49 = v7;
    char v50 = v8;
    uint64_t v51 = v9;
    char v52 = v10;
    uint64_t v53 = v11;
    char v54 = v12;
    static OptionalEdgeInsets.none.getter();
    uint64_t v32 = v40;
    char v33 = BYTE8(v40);
    uint64_t v34 = v41;
    char v35 = v42;
    uint64_t v36 = v43;
    char v37 = v44;
    uint64_t v38 = v45;
    char v39 = v46;
    if ((MEMORY[0x18C110940](&v47, &v32) & 1) == 0)
    {
      id v13 = objc_msgSend(a1, sel_navigationController);
      if (v13)
      {
        char v14 = v13;
        id v15 = objc_msgSend(v13, sel_navigationBar);

        if (v15)
        {
          uint64_t v47 = v5;
          char v48 = v6;
          uint64_t v49 = v7;
          char v50 = v8;
          uint64_t v51 = v9;
          char v52 = v10;
          uint64_t v53 = v11;
          char v54 = v12;
          static Edge.Set.all.getter();
          OptionalEdgeInsets.in(edges:)();
          objc_msgSend(v15, sel_setDirectionalLayoutMargins_);
        }
      }
    }
  }
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, void (*a5)(void))
{
  char v6 = (char)result;
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    a5(0);
    uint64_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size_0(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    uint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  char v14 = v11 + 32;
  id v15 = a4 + 32;
  if (v6)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9]) {
      memmove(v14, v15, 16 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v9);
  }
  swift_bridgeObjectRelease();
  return v11;
}

{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;

  char v6 = (char)result;
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    a5(0);
    uint64_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size_0(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    uint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v11 + 32;
  char v14 = a4 + 32;
  id v15 = 40 * v9;
  if (v6)
  {
    if (v11 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_bridgeObjectRelease();
  return v11;
}

void type metadata accessor for _ContiguousArrayStorage<Range<Int>>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>)
  {
    type metadata accessor for _TraitWritingModifier<DropOntoTraitKey>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4FBB6A0]);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    }
  }
}

void type metadata accessor for _TraitWritingModifier<DropOntoTraitKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    type metadata accessor for AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityAttachment.Key>, (uint64_t)&type metadata for AccessibilityAttachment.Key, (uint64_t)&protocol witness table for AccessibilityAttachment.Key, MEMORY[0x1E4F41108]);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t get_witness_table_7SwiftUI4ViewRzSHRd__r__lAA15ModifiedContentVyxAA29ScrollPositionBindingModifierVGAaBHPxAaBHD1__AfA0cI0HPyHCHCTm()
{
  return swift_getWitnessTable();
}

void type metadata completion function for DialogActionContext.CancelType()
{
  _s7SwiftUI16CommandOperationVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PlatformItemList.Item();
    if (v1 <= 0x3F) {
      swift_initEnumMetadataMultiPayload();
    }
  }
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TransformScrollIndicators(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TransformScrollIndicators(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance TransformScrollIndicators()
{
  lazy protocol witness table accessor for type TransformScrollIndicators and conformance TransformScrollIndicators();

  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

uint64_t type metadata completion function for LazyTransition()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t partial apply for closure #1 in FocusStoreLocation.set(_:transaction:)()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(v0[2] - 8) + 80);
  return closure #1 in FocusStoreLocation.set(_:transaction:)(v0[4], (uint64_t)v0 + ((v1 + 40) & ~v1), (void (*)(char *, char *, uint64_t))((char *)v0+ ((*(void *)(*(void *)(v0[2] - 8) + 64)+ v1+ ((v1 + 40) & ~v1)) & ~v1)), v0[2], v0[3]);
}

ValueMetadata *type metadata accessor for NavigationStackRepresentable()
{
  return &type metadata for NavigationStackRepresentable;
}

uint64_t ViewThatFits.init(in:content:)()
{
  return _VariadicView.Tree.init(_:content:)();
}

double one-time initialization function for navigationBarTrailing()
{
  static ToolbarItemPlacement.navigationBarTrailing = 10;
  double result = 0.0;
  unk_1E9006DC0 = 0u;
  unk_1E9006DD0 = 0u;
  byte_1E9006DE0 = 2;
  return result;
}

uint64_t type metadata completion function for ToolbarStorage.Entry.Kind()
{
  uint64_t result = type metadata accessor for ToolbarStorage.Item(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ToolbarStorage.GroupItem(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t View.onOpenURL(perform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return View.onOpenURL(perform:)(a1, a2, a3, a4, (uint64_t)partial apply for closure #1 in View.onOpenURL(perform:), a5);
}

{
  return View.onOpenURL(perform:)(a1, a2, a3, a4, (uint64_t)partial apply for closure #1 in View.onOpenURL(perform:), a5);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in NavigationLinkTraitValueModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for TokenFieldConfiguration(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for TokenFieldConfiguration);
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in ToolbarButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in static ToolbarModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for ToolbarModifier();
  uint64_t v6 = a1 + *(int *)(v5 + 44);
  void v10[2] = v5;
  v10[3] = a3;
  uint64_t v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v10, a3, MEMORY[0x1E4FBC248], v7, MEMORY[0x1E4FBC278], v8);
  return v10[5];
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ButtonStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF88](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedNavigationStackStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedNavigationStackStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedNavigationStackStyle and conformance ResolvedNavigationStackStyle();

  return MEMORY[0x1F40FDF90](a1, a2, a3, v6);
}

unsigned __int8 *assignWithTake for SelectionManagerBox(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(void *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v8 = *(void *)(v6 + 64);
  }
  else {
    size_t v8 = v7 + 1;
  }
  if (v8 <= v7) {
    unint64_t v9 = *(void *)(v6 + 64);
  }
  else {
    unint64_t v9 = v8;
  }
  if (v9 <= 8) {
    uint64_t v10 = 8;
  }
  else {
    uint64_t v10 = v9;
  }
  unsigned int v11 = a1[v10];
  unsigned int v12 = v11 - 3;
  if (v11 >= 3)
  {
    if (v10 <= 3) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a1;
        goto LABEL_20;
      case 2:
        int v14 = *(unsigned __int16 *)a1;
        goto LABEL_20;
      case 3:
        int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_20;
      case 4:
        int v14 = *(_DWORD *)a1;
LABEL_20:
        int v15 = (v14 | (v12 << (8 * v10))) + 3;
        unsigned int v11 = v14 + 3;
        if (v10 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  if (v11 == 2) {
    goto LABEL_25;
  }
  if (v11 != 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5)) {
LABEL_25:
  }
    (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
LABEL_27:
  unsigned int v16 = a2[v10];
  unsigned int v17 = v16 - 3;
  if (v16 >= 3)
  {
    if (v10 <= 3) {
      uint64_t v18 = v10;
    }
    else {
      uint64_t v18 = 4;
    }
    switch(v18)
    {
      case 1:
        int v19 = *a2;
        goto LABEL_36;
      case 2:
        int v19 = *(unsigned __int16 *)a2;
        goto LABEL_36;
      case 3:
        int v19 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_36;
      case 4:
        int v19 = *(_DWORD *)a2;
LABEL_36:
        int v20 = (v19 | (v17 << (8 * v10))) + 3;
        unsigned int v16 = v19 + 3;
        if (v10 < 4) {
          unsigned int v16 = v20;
        }
        break;
      default:
        break;
    }
  }
  if (v16 == 2)
  {
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
    char v21 = 2;
  }
  else if (v16 == 1)
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      memcpy(a1, a2, v8);
      char v21 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v21 = 1;
      (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
  }
  else
  {
    char v21 = 0;
    *(void *)a1 = *(void *)a2;
  }
  a1[v10] = v21;
  return a1;
}

uint64_t EnvironmentValues.updateFidelity.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<UpdateFidelityKey>();
    _s10Foundation4DateVACSLAAWlTm_6(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<UpdateFidelityKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<UpdateFidelityKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<UpdateFidelityKey>();
    _s10Foundation4DateVACSLAAWlTm_6(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<UpdateFidelityKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<UpdateFidelityKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

void type metadata accessor for EnvironmentPropertyKey<UpdateFidelityKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<UpdateFidelityKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UpdateFidelityKey>);
    }
  }
}

uint64_t protocol witness for StyleableView.configuration.getter in conformance ResolvedNavigationSplitStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  int v3 = *(_DWORD *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v6 = *(void *)(v1 + 40);
  char v7 = *(unsigned char *)(v1 + 48);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v6;
  *(unsigned char *)(a1 + 48) = v7;
  swift_retain();
  swift_retain();
  swift_retain();

  return swift_retain();
}

uint64_t InsettableGroupedListBodyRule.value.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v4 = a1[7];
  uint64_t v19 = a1[4];
  uint64_t v20 = v4;
  uint64_t v5 = v4;
  uint64_t v21 = type metadata accessor for SelectionManagerBox();
  type metadata accessor for Binding();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  unint64_t v9 = (char *)&v19 - v8;
  uint64_t v11 = a1[5];
  v32[0] = a1[2];
  uint64_t v10 = v32[0];
  v32[1] = v19;
  uint64_t v32[2] = v11;
  v32[3] = v5;
  uint64_t v12 = type metadata accessor for _ListValue();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  int v15 = (char *)&v19 - v14;
  InsettableGroupedListBodyRule.base.getter((uint64_t)&v19 - v14);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, &v15[*(int *)(v12 + 52)], v6);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  outlined init with take of SectionInsetMode(v2 + 8, (uint64_t)v32);
  uint64_t v16 = a1[3];
  uint64_t v23 = v10;
  uint64_t v24 = v16;
  uint64_t v25 = v19;
  uint64_t v26 = v11;
  uint64_t v27 = a1[6];
  uint64_t v28 = v20;
  uint64_t v29 = v2;
  type metadata accessor for StyleContextWriter();
  type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v30 = &protocol witness table for ListStyleContent;
  uint64_t v31 = WitnessTable;
  swift_getWitnessTable();
  swift_getWitnessTable();
  return InsettableGroupedListBody.init(selection:insetMode:content:)((uint64_t)v9, (uint64_t)v32, (uint64_t (*)(uint64_t))partial apply for closure #1 in InsettableGroupedListBodyRule.value.getter, v22);
}

uint64_t InsettableGroupedListBody.init(selection:insetMode:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X8>)
{
  type metadata accessor for Binding();
  uint64_t v8 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a4, a1, v8);
  uint64_t v9 = type metadata accessor for InsettableGroupedListBody();
  uint64_t v10 = outlined init with take of SectionInsetMode(a2, a4 + *(int *)(v9 + 52));
  return a3(v10);
}

uint64_t outlined init with take of SectionInsetMode(uint64_t a1, uint64_t a2)
{
  return a2;
}

__n128 __swift_memcpy34_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t partial apply for closure #1 in InsettableGroupedListBodyRule.value.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in InsettableGroupedListBodyRule.value.getter(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], a1);
}

uint64_t closure #1 in InsettableGroupedListBodyRule.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  v21[1] = a7;
  uint64_t v22 = a1;
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v25 = a6;
  uint64_t v13 = type metadata accessor for _ListValue();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)v21 - v15;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  type metadata accessor for InsettableGroupedListBodyRule();
  InsettableGroupedListBodyRule.base.getter((uint64_t)v16);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  View.styleContext<A>(_:)();
  type metadata accessor for StyleContextWriter();
  type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  void v21[2] = &protocol witness table for ListStyleContent;
  v21[3] = WitnessTable;
  uint64_t v18 = swift_getWitnessTable();
  uint64_t v19 = static ViewBuilder.buildExpression<A>(_:)(v18);
  return static ViewBuilder.buildExpression<A>(_:)(v19);
}

uint64_t closure #1 in closure #2 in InsettableGroupedListBody.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[0] = v7;
  v13[1] = v8;
  v13[2] = v9;
  _OWORD v13[3] = v10;
  uint64_t v11 = type metadata accessor for InsettableGroupedListBody();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v11 + 56));
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

uint64_t type metadata accessor for InsettableGroupedListBody()
{
  return swift_getGenericMetadata();
}

uint64_t closure #1 in closure #1 in SidebarListStyle.Body.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = &type metadata for SidebarListStyle;
  v8[1] = a2;
  v8[2] = &protocol witness table for SidebarListStyle;
  v8[3] = a3;
  uint64_t v3 = type metadata accessor for _ListValue();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v8 - v5;
  SidebarListStyle.Body.base.getter((uint64_t)v8 - v5);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t destroy for _ListValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  uint64_t result = (*(uint64_t (**)(void))v4)();
  uint64_t v6 = *(void *)(v4 + 56);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  uint64_t v10 = (void *)((((v6 + a1 + v9) & ~v9) + 15) & 0xFFFFFFFFFFFFFFF8);
  if (*v10 < 0xFFFFFFFFuLL) {
    return result;
  }
  int v11 = *(_DWORD *)(v8 + 84);
  uint64_t v22 = *(void *)(v7 - 8);
  unint64_t v12 = *(void *)(v8 + 64);
  swift_release();
  swift_release();
  uint64_t v13 = (unsigned __int8 *)(((unint64_t)v10 + v9 + 8) & ~v9);
  if (v11) {
    unint64_t v14 = v12;
  }
  else {
    unint64_t v14 = v12 + 1;
  }
  if (v14 <= v12) {
    unint64_t v14 = v12;
  }
  if (v14 <= 8) {
    unint64_t v14 = 8;
  }
  unsigned int v15 = v13[v14];
  unsigned int v16 = v15 - 3;
  if (v15 >= 3)
  {
    if (v14 <= 3) {
      uint64_t v17 = v14;
    }
    else {
      uint64_t v17 = 4;
    }
    switch(v17)
    {
      case 1:
        int v18 = *v13;
        goto LABEL_18;
      case 2:
        int v18 = *(unsigned __int16 *)v13;
        goto LABEL_18;
      case 3:
        int v18 = *(unsigned __int16 *)v13 | (v13[2] << 16);
        goto LABEL_18;
      case 4:
        int v18 = *(_DWORD *)v13;
LABEL_18:
        int v19 = (v18 | (v16 << (8 * v14))) + 3;
        unsigned int v15 = v18 + 3;
        if (v14 < 4) {
          unsigned int v15 = v19;
        }
        break;
      default:
        break;
    }
  }
  if (v15 == 2)
  {
    uint64_t v20 = v22;
LABEL_25:
    uint64_t v21 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v20 + 8);
    return v21(v13, v7);
  }
  if (v15 == 1)
  {
    uint64_t result = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v22 + 48))(v13, 1, v7);
    uint64_t v20 = v22;
    if (result) {
      return result;
    }
    goto LABEL_25;
  }

  return swift_bridgeObjectRelease();
}

uint64_t static ResolvedList._makeViewList(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v5 = *a1;
  uint64_t v6 = *(void *)a2;
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  int v9 = *(_DWORD *)(a2 + 24);
  int v10 = *(_DWORD *)(a2 + 28);
  int v11 = *(_DWORD *)(a2 + 32);
  int v16 = *(_DWORD *)(a2 + 36);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v17 = *(void *)(a2 + 48);
  uint64_t v18 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a2 + 72);
  int v19 = *(_DWORD *)(a2 + 64);
  char v20 = *(unsigned char *)(a2 + 80);
  lazy protocol witness table accessor for type ListStyleInput and conformance ListStyleInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v24)
  {
    uint64_t v14 = v25;
    v37[0] = v5;
    uint64_t v24 = v6;
    LODWORD(v25) = v7;
    uint64_t v26 = v8;
    int v27 = v9;
    int v28 = v10;
    int v29 = v11;
    int v30 = v16;
    uint64_t v31 = v12;
    uint64_t v32 = v17;
    uint64_t v33 = v18;
    int v34 = v19;
    uint64_t v35 = v13;
    char v36 = v20;
    return (*(uint64_t (**)(_DWORD *))(v14 + 16))(v37);
  }
  else
  {
    v37[0] = v5;
    uint64_t v24 = v6;
    LODWORD(v25) = v7;
    uint64_t v26 = v8;
    int v27 = v9;
    int v28 = v10;
    int v29 = v11;
    int v30 = v16;
    uint64_t v31 = v12;
    uint64_t v32 = v17;
    uint64_t v33 = v18;
    int v34 = v19;
    uint64_t v35 = v13;
    char v36 = v20;
    return static ResolvedList.makeViewList<A>(view:style:inputs:)((uint64_t)v37, 0, &v24, a3, (uint64_t)&type metadata for DefaultListStyle, a4, (uint64_t)&protocol witness table for DefaultListStyle, a5);
  }
}

uint64_t type metadata accessor for _ListValue.Init2()
{
  return swift_getGenericMetadata();
}

uint64_t static ResolvedList.makeViewList<A>(view:style:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v34 = a2;
  *(void *)&long long v42 = a1;
  uint64_t v43 = a8;
  uint64_t v13 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  unsigned int v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = v17;
  uint64_t v45 = v16;
  uint64_t v46 = v19;
  uint64_t v47 = v18;
  uint64_t v20 = type metadata accessor for _ListValue.Init1();
  uint64_t v33 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v32 - v24;
  int v26 = *(_DWORD *)v42;
  uint64_t v37 = *a3;
  int v36 = *((_DWORD *)a3 + 2);
  uint64_t v35 = a3[2];
  long long v42 = *(_OWORD *)(a3 + 5);
  uint64_t v41 = a3[7];
  int v40 = *((_DWORD *)a3 + 16);
  uint64_t v39 = a3[9];
  int v38 = *((unsigned __int8 *)a3 + 80);
  LODWORD(v44) = v26;
  type metadata accessor for ResolvedList();
  type metadata accessor for _GraphValue();
  uint64_t v27 = a3[3];
  uint64_t v28 = a3[4];
  LODWORD(a3) = _GraphValue.value.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v34, a5);
  *(_DWORD *)uint64_t v25 = a3;
  uint64_t v44 = a5;
  uint64_t v45 = a4;
  uint64_t v46 = a7;
  uint64_t v47 = a6;
  uint64_t v29 = type metadata accessor for _ListValue.Init1();
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v25[*(int *)(v29 + 52)], v15, a5);
  uint64_t v30 = v33;
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v22, v25, v20);
  uint64_t v44 = a5;
  uint64_t v45 = a4;
  uint64_t v46 = a7;
  uint64_t v47 = a6;
  type metadata accessor for _ListValue();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  uint64_t v44 = v37;
  LODWORD(v45) = v36;
  uint64_t v46 = v35;
  uint64_t v47 = v27;
  uint64_t v48 = v28;
  long long v49 = v42;
  uint64_t v50 = v41;
  int v51 = v40;
  uint64_t v52 = v39;
  char v53 = v38;
  (*(void (**)(char *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 16))(v54, &v44, a4, a6, a5, a7);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v25, v20);
}

uint64_t type metadata accessor for _ListValue.Init1()
{
  return swift_getGenericMetadata();
}

uint64_t static DefaultListStyle._makeViewList<A>(value:inputs:)()
{
  return static ModifiedContent<>._makeViewList(view:inputs:)();
}

uint64_t type metadata accessor for DefaultListStyle.Body()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t DefaultListStyle.Body.value.getter@<X0>(int a1@<W0>, ValueMetadata *a2@<X1>, _UNKNOWN **a3@<X2>, uint64_t a4@<X8>)
{
  int v58 = a1;
  uint64_t v63 = a4;
  type metadata accessor for SelectionManagerBox();
  swift_getWitnessTable();
  uint64_t v56 = type metadata accessor for _ListStyleConfiguration();
  uint64_t v54 = *(void *)(v56 - 8);
  MEMORY[0x1F4188790](v56);
  uint64_t v48 = (char *)&v47 - v6;
  uint64_t v74 = (uint64_t)&type metadata for DefaultListStyle;
  int v75 = a2;
  uint64_t v76 = &protocol witness table for DefaultListStyle;
  uint64_t v77 = a3;
  uint64_t v7 = type metadata accessor for _ListValue();
  MEMORY[0x1F4188790](v7 - 8);
  int v9 = (char *)&v47 - v8;
  uint64_t v74 = (uint64_t)a2;
  int v75 = &type metadata for ListStyleContent;
  uint64_t v76 = a3;
  uint64_t v77 = &protocol witness table for ListStyleContent;
  uint64_t v10 = type metadata accessor for List();
  uint64_t v52 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v47 - v11;
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier>();
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v55 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  unsigned int v15 = (char *)&v47 - v14;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ListStyleWriter<InlineListStyle>, EmptyModifier>();
  uint64_t v16 = type metadata accessor for ModifiedContent();
  uint64_t v57 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v47 = (uint64_t)&v47 - v17;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarStyleContext>, ListStyleWriter<SidebarListStyle>, EmptyModifier>();
  uint64_t v18 = type metadata accessor for ModifiedContent();
  uint64_t v59 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v50 = (uint64_t)&v47 - v19;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ContentListStyleContext>, ListStyleWriter<InsetListStyle>, EmptyModifier>();
  uint64_t v49 = type metadata accessor for ModifiedContent();
  uint64_t v61 = *(void *)(v49 - 8);
  MEMORY[0x1F4188790](v49);
  uint64_t v51 = (uint64_t)&v47 - v20;
  type metadata accessor for StaticIf<_SemanticFeature_v3, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier>();
  uint64_t v60 = type metadata accessor for ModifiedContent();
  uint64_t v62 = *(void *)(v60 - 8);
  MEMORY[0x1F4188790](v60);
  uint64_t v53 = (uint64_t)&v47 - v21;
  uint64_t v22 = v9;
  DefaultListStyle.Body.base.getter((uint64_t)v9);
  uint64_t v23 = (uint64_t)v48;
  (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v48, v22, v56);
  List<>.init(_:)(v23, (uint64_t)v12);
  LOWORD(v74) = 2;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.listStyle<A, B>(_:idiom:)((uint64_t)&v74, v25, v10, (uint64_t)&type metadata for MultimodalListStyle, MEMORY[0x1E4F40BF8], WitnessTable, (uint64_t)v15);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v12, v10);
  uint64_t v26 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier>);
  uint64_t v72 = WitnessTable;
  uint64_t v73 = v26;
  uint64_t v27 = swift_getWitnessTable();
  unint64_t v28 = lazy protocol witness table accessor for type GroupedFormStyleContext and conformance GroupedFormStyleContext();
  uint64_t v29 = v47;
  View.listStyle<A, B>(_:in:)(v28, v30, v13, (uint64_t)&type metadata for InlineListStyle, (uint64_t)&type metadata for GroupedFormStyleContext, v27, v28, v47);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v15, v13);
  uint64_t v31 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ListStyleWriter<InlineListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ListStyleWriter<InlineListStyle>, EmptyModifier>);
  uint64_t v70 = v27;
  uint64_t v71 = v31;
  uint64_t v32 = swift_getWitnessTable();
  uint64_t v33 = v50;
  View.listStyle<A, B>(_:in:)(v32, v34, v16, (uint64_t)&type metadata for SidebarListStyle, MEMORY[0x1E4F404D0], v32, MEMORY[0x1E4F404C8], v50);
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v29, v16);
  uint64_t v74 = 3;
  uint64_t v35 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SidebarStyleContext>, ListStyleWriter<SidebarListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarStyleContext>, ListStyleWriter<SidebarListStyle>, EmptyModifier>);
  uint64_t v68 = v32;
  uint64_t v69 = v35;
  uint64_t v36 = swift_getWitnessTable();
  uint64_t v37 = v51;
  View.listStyle<A, B>(_:in:)((uint64_t)&v74, v38, v18, (uint64_t)&type metadata for InsetListStyle, MEMORY[0x1E4F40C28], v36, MEMORY[0x1E4F40C20], v51);
  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v33, v18);
  uint64_t v39 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ContentListStyleContext>, ListStyleWriter<InsetListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ContentListStyleContext>, ListStyleWriter<InsetListStyle>, EmptyModifier>);
  uint64_t v66 = v36;
  uint64_t v67 = v39;
  uint64_t v40 = v49;
  uint64_t v41 = swift_getWitnessTable();
  uint64_t v42 = v53;
  View.listStyle<A, B>(_:if:)(v41, v40, MEMORY[0x1E4F405B8], (uint64_t)&type metadata for InsetGroupedListStyle, v41, MEMORY[0x1E4F405B0], v53);
  (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v37, v40);
  LOBYTE(v74) = 2;
  uint64_t v43 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v3, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v3, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier>);
  uint64_t v64 = v41;
  uint64_t v65 = v43;
  uint64_t v44 = v60;
  uint64_t v45 = swift_getWitnessTable();
  View.listStyle<A>(_:)((uint64_t)&v74, v44, (uint64_t)&type metadata for PlainListStyle, v45);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 8))(v42, v44);
}

uint64_t destroy for List(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = *(_DWORD *)(v5 + 84);
  unint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  uint64_t v9 = ~v8;
  uint64_t v10 = (void *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if (*v10 <= 0xFFFFFFFEuLL)
  {
    if (v6) {
      unint64_t v19 = *(void *)(v5 + 64);
    }
    else {
      unint64_t v19 = v7 + 1;
    }
    if (v19 <= v7) {
      unint64_t v19 = *(void *)(v5 + 64);
    }
    if (v19 <= 8) {
      uint64_t v14 = 8;
    }
    else {
      uint64_t v14 = v19;
    }
  }
  else
  {
    swift_release();
    swift_release();
    BOOL v11 = v6 == 0;
    uint64_t v12 = (unsigned __int8 *)(((unint64_t)v10 + v8 + 8) & v9);
    if (v11) {
      unint64_t v13 = v7 + 1;
    }
    else {
      unint64_t v13 = v7;
    }
    if (v13 <= v7) {
      unint64_t v13 = v7;
    }
    if (v13 <= 8) {
      uint64_t v14 = 8;
    }
    else {
      uint64_t v14 = v13;
    }
    unsigned int v15 = v12[v14];
    unsigned int v16 = v15 - 3;
    if (v15 >= 3)
    {
      if (v14 <= 3) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *v12;
          goto LABEL_27;
        case 2:
          int v18 = *(unsigned __int16 *)v12;
          goto LABEL_27;
        case 3:
          int v18 = *(unsigned __int16 *)(((unint64_t)v10 + v8 + 8) & v9) | (*(unsigned __int8 *)((((unint64_t)v10 + v8 + 8) & v9) + 2) << 16);
          goto LABEL_27;
        case 4:
          int v18 = *(_DWORD *)v12;
LABEL_27:
          int v20 = (v18 | (v16 << (8 * v14))) + 3;
          unsigned int v15 = v18 + 3;
          if (v14 < 4) {
            unsigned int v15 = v20;
          }
          break;
        default:
          break;
      }
    }
    if (v15 == 2)
    {
LABEL_32:
      (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(v12, v4);
      goto LABEL_34;
    }
    if (v15 == 1)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(v12, 1, v4)) {
        goto LABEL_34;
      }
      goto LABEL_32;
    }
    swift_bridgeObjectRelease();
  }
LABEL_34:
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 8))((a1
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80)
                                                                                            + v14
                                                                                            + ((v8 + 16) & v9)
                                                                                            + 1) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80));

  return outlined consume of HoverCallback();
}

uint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t View.listStyle<A, B>(_:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v39 = a6;
  uint64_t v35 = a2;
  uint64_t v36 = a7;
  uint64_t v37 = a8;
  uint64_t v38 = a3;
  uint64_t v10 = *(void *)(a5 - 8);
  uint64_t v33 = a1;
  uint64_t v34 = v10;
  MEMORY[0x1F4188790](a1);
  uint64_t v32 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v14);
  unsigned int v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for ListStyleWriter();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  int v20 = (char *)&v31 - v19;
  uint64_t v21 = type metadata accessor for StyleContextAcceptsPredicate();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v42 = v21;
  uint64_t v43 = v17;
  uint64_t v44 = MEMORY[0x1E4F3F740];
  uint64_t v45 = WitnessTable;
  uint64_t v23 = type metadata accessor for StaticIf();
  uint64_t v24 = *(void *)(v23 - 8);
  double v25 = MEMORY[0x1F4188790](v23);
  uint64_t v27 = (char *)&v31 - v26;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v16, v33, a4, v25);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v20, v16, a4);
  uint64_t v28 = v34;
  uint64_t v29 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v32, v35, a5);
  uint64_t v41 = a5;
  uint64_t v42 = (uint64_t)v29;
  uint64_t v40 = v36;
  ViewModifier.requiring<A>(_:)();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v29, a5);
  MEMORY[0x18C113660](v27, v38, v23, v39);
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v27, v23);
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarStyleContext>, ListStyleWriter<SidebarListStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SidebarStyleContext>, ListStyleWriter<SidebarListStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarStyleContext>);
    _s7SwiftUI23InterfaceIdiomPredicateVyAA018ClarityUIInterfaceD0VGMaTm_0(255, &lazy cache variable for type metadata for ListStyleWriter<SidebarListStyle>, (uint64_t)&type metadata for SidebarListStyle, (uint64_t)&protocol witness table for SidebarListStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ListStyleWriter);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SidebarStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SidebarStyleContext>, ListStyleWriter<SidebarListStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ListStyleWriter<InlineListStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ListStyleWriter<InlineListStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>);
    _s7SwiftUI23InterfaceIdiomPredicateVyAA018ClarityUIInterfaceD0VGMaTm_0(255, &lazy cache variable for type metadata for ListStyleWriter<InlineListStyle>, (uint64_t)&type metadata for InlineListStyle, (uint64_t)&protocol witness table for InlineListStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ListStyleWriter);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ListStyleWriter<InlineListStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ContentListStyleContext>, ListStyleWriter<InsetListStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ContentListStyleContext>, ListStyleWriter<InsetListStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<ContentListStyleContext>);
    _s7SwiftUI23InterfaceIdiomPredicateVyAA018ClarityUIInterfaceD0VGMaTm_0(255, &lazy cache variable for type metadata for ListStyleWriter<InsetListStyle>, (uint64_t)&type metadata for InsetListStyle, (uint64_t)&protocol witness table for InsetListStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ListStyleWriter);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<ContentListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<ContentListStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ContentListStyleContext>, ListStyleWriter<InsetListStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier>)
  {
    _s7SwiftUI23InterfaceIdiomPredicateVyAA018ClarityUIInterfaceD0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, MEMORY[0x1E4F40BF8], MEMORY[0x1E4F40BF0], MEMORY[0x1E4F40C60]);
    _s7SwiftUI23InterfaceIdiomPredicateVyAA018ClarityUIInterfaceD0VGMaTm_0(255, &lazy cache variable for type metadata for ListStyleWriter<MultimodalListStyle>, (uint64_t)&type metadata for MultimodalListStyle, (uint64_t)&protocol witness table for MultimodalListStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ListStyleWriter);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<ClarityUIInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<_SemanticFeature_v3, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v3, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier>)
  {
    _s7SwiftUI23InterfaceIdiomPredicateVyAA018ClarityUIInterfaceD0VGMaTm_0(255, &lazy cache variable for type metadata for ListStyleWriter<InsetGroupedListStyle>, (uint64_t)&type metadata for InsetGroupedListStyle, (uint64_t)&protocol witness table for InsetGroupedListStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ListStyleWriter);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<_SemanticFeature_v3, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier>);
    }
  }
}

uint64_t View.listStyle<A, B>(_:idiom:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v28 = a6;
  v23[1] = a5;
  uint64_t v24 = a1;
  uint64_t v26 = a7;
  uint64_t v27 = a3;
  uint64_t v25 = a2;
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ListStyleWriter();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v23 - v13;
  uint64_t v15 = type metadata accessor for InterfaceIdiomPredicate();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v29 = v15;
  uint64_t v30 = v11;
  uint64_t v31 = MEMORY[0x1E4F3F740];
  uint64_t v32 = WitnessTable;
  uint64_t v17 = type metadata accessor for StaticIf();
  uint64_t v18 = *(void *)(v17 - 8);
  double v19 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)v23 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, v24, a4, v19);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v14, v10, a4);
  ViewModifier.requiring<A>(_:)(v25, v11);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  MEMORY[0x18C113660](v21, v27, v17, v28);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v21, v17);
}

uint64_t View.listStyle<A, B>(_:if:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v27 = a5;
  uint64_t v25 = a7;
  uint64_t v26 = a2;
  uint64_t v11 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ListStyleWriter();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v25 - v16;
  uint64_t v28 = a3;
  uint64_t v29 = v18;
  uint64_t v30 = MEMORY[0x1E4F3F740];
  uint64_t v31 = a6;
  uint64_t v19 = type metadata accessor for StaticIf();
  uint64_t v20 = *(void *)(v19 - 8);
  double v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v25 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v13, a1, a4, v21);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v17, v13, a4);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v23, v17, v14);
  MEMORY[0x18C113660](v23, v26, v19, v27);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, v19);
}

uint64_t List<>.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for SelectionManagerBox();
  uint64_t v4 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a2, 1, 1, v4);
  uint64_t v5 = type metadata accessor for List();
  *(void *)(a2 + *(int *)(v5 + 56)) = 0;
  uint64_t v6 = a2 + *(int *)(v5 + 60);
  *(void *)uint64_t v6 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(void *)(v6 + 8) = 0;
  *(unsigned char *)(v6 + 16) = 0;
  uint64_t v7 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24))(a2, a1, v7);
  swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for _ListStyleConfiguration();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a1, v8);
}

uint64_t DefaultListStyle.Body.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _ListValue();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t ViewModifier.requiring<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for InterfaceIdiomPredicate();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v2, a2);
  swift_getWitnessTable();
  return StaticIf<>.init<>(_:then:)();
}

uint64_t _ListValue.Init1.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  type metadata accessor for SelectionManagerBox();
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for _ListStyleConfiguration();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v18 - v6;
  uint64_t v8 = type metadata accessor for ResolvedList();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  double v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v15, v2 + *(int *)(a1 + 52), v11, v13);
  _ListValue.Init1.base.getter((uint64_t)v10);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
  return _ListValue.init(style:configuration:)((uint64_t)v15, (uint64_t)v7, v11, v19);
}

uint64_t _ListValue.Init2.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  v17[0] = a3;
  v17[1] = a2;
  type metadata accessor for SelectionManagerBox();
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for _ListStyleConfiguration();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v17 - v6;
  uint64_t v8 = type metadata accessor for ResolvedList();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)v17 - v9;
  uint64_t v11 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, Value, a1);
  _ListValue.Init2.base.getter((uint64_t)v10);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
  return _ListValue.init(style:configuration:)((uint64_t)v14, (uint64_t)v7, a1, v17[0]);
}

void *initializeWithCopy for ResolvedList(void *__dst, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = *(_DWORD *)(v5 + 84);
  unint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  uint64_t v9 = ~v8;
  uint64_t v10 = (uint64_t *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = *v10;
  if ((unint64_t)*v10 < 0xFFFFFFFF)
  {
    uint64_t v21 = (v8 + 16) & v9;
    if (v6) {
      unint64_t v22 = *(void *)(v5 + 64);
    }
    else {
      unint64_t v22 = v7 + 1;
    }
    if (v22 > v7) {
      unint64_t v7 = v22;
    }
    if (v7 <= 8) {
      unint64_t v7 = 8;
    }
    memcpy(__dst, a2, v7 + v21 + 1);
  }
  else
  {
    BOOL v12 = v6 == 0;
    *__dst = *a2;
    uint64_t v13 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v13 = v11;
    uint64_t v14 = (void *)(((unint64_t)v13 + v8 + 8) & v9);
    uint64_t v15 = (unsigned __int8 *)(((unint64_t)v10 + v8 + 8) & v9);
    if (v12) {
      size_t v16 = v7 + 1;
    }
    else {
      size_t v16 = v7;
    }
    if (v16 > v7) {
      unint64_t v7 = v16;
    }
    if (v7 <= 8) {
      uint64_t v17 = 8;
    }
    else {
      uint64_t v17 = v7;
    }
    unsigned int v18 = v15[v17];
    swift_retain();
    swift_retain();
    if (v18 >= 3)
    {
      if (v17 <= 3) {
        uint64_t v19 = v17;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *v15;
          goto LABEL_27;
        case 2:
          int v20 = *(unsigned __int16 *)v15;
          goto LABEL_27;
        case 3:
          int v20 = *(unsigned __int16 *)v15 | (v15[2] << 16);
          goto LABEL_27;
        case 4:
          int v20 = *(_DWORD *)v15;
LABEL_27:
          int v23 = (v20 | ((v18 - 3) << (8 * v17))) + 3;
          unsigned int v24 = v20 + 3;
          if (v17 >= 4) {
            unsigned int v18 = v24;
          }
          else {
            unsigned int v18 = v23;
          }
          break;
        default:
          break;
      }
    }
    if (v18 == 2)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(v14, v15, v4);
      char v25 = 2;
LABEL_38:
      *((unsigned char *)v14 + v17) = v25;
      return __dst;
    }
    if (v18 == 1)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(v15, 1, v4))
      {
        memcpy(v14, v15, v16);
      }
      else
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(v14, v15, v4);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v14, 0, 1, v4);
      }
      char v25 = 1;
      goto LABEL_38;
    }
    *uint64_t v14 = *(void *)v15;
    *((unsigned char *)v14 + v17) = 0;
    swift_bridgeObjectRetain();
  }
  return __dst;
}

uint64_t _ListValue.Init2.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ResolvedList();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t SidebarListStyle.Body.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _ListValue();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t InsettableGroupedListBodyRule.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _ListValue();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t initializeWithCopy for _ListValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  uint64_t v11 = *(void *)(v6 + 48) + v10;
  uint64_t v12 = ~v10;
  uint64_t v13 = (char *)((v11 + a1) & ~v10);
  uint64_t v14 = (void *)((v11 + a2) & ~v10);
  unint64_t v15 = *(void *)(v8 + 64);
  size_t v16 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  if (*v16 < 0xFFFFFFFFuLL)
  {
    uint64_t v26 = (v10 + 16) & v12;
    if (v9) {
      unint64_t v27 = *(void *)(*(void *)(v7 - 8) + 64);
    }
    else {
      unint64_t v27 = v15 + 1;
    }
    if (v27 > v15) {
      unint64_t v15 = v27;
    }
    if (v15 <= 8) {
      unint64_t v15 = 8;
    }
    memcpy(v13, v14, (v26 | 1) + v15);
  }
  else
  {
    *(void *)uint64_t v13 = *v14;
    unint64_t v17 = (unint64_t)(v13 + 15);
    *(void *)(v17 & 0xFFFFFFFFFFFFFFF8) = *v16;
    uint64_t v18 = v10 + 8;
    uint64_t v19 = (void *)((v18 + (v17 & 0xFFFFFFFFFFFFFFF8)) & v12);
    int v20 = (unsigned __int8 *)(((unint64_t)v16 + v18) & v12);
    if (v9) {
      size_t v21 = v15;
    }
    else {
      size_t v21 = v15 + 1;
    }
    if (v21 > v15) {
      unint64_t v15 = v21;
    }
    if (v15 <= 8) {
      uint64_t v22 = 8;
    }
    else {
      uint64_t v22 = v15;
    }
    unsigned int v23 = v20[v22];
    swift_retain();
    swift_retain();
    if (v23 >= 3)
    {
      if (v22 <= 3) {
        uint64_t v24 = v22;
      }
      else {
        uint64_t v24 = 4;
      }
      switch(v24)
      {
        case 1:
          int v25 = *v20;
          goto LABEL_27;
        case 2:
          int v25 = *(unsigned __int16 *)v20;
          goto LABEL_27;
        case 3:
          int v25 = *(unsigned __int16 *)v20 | (v20[2] << 16);
          goto LABEL_27;
        case 4:
          int v25 = *(_DWORD *)v20;
LABEL_27:
          int v28 = (v25 | ((v23 - 3) << (8 * v22))) + 3;
          unsigned int v29 = v25 + 3;
          if (v22 >= 4) {
            unsigned int v23 = v29;
          }
          else {
            unsigned int v23 = v28;
          }
          break;
        default:
          break;
      }
    }
    if (v23 == 2)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v8 + 16))(v19, v20, v7);
      char v30 = 2;
LABEL_38:
      *((unsigned char *)v19 + v22) = v30;
      return a1;
    }
    if (v23 == 1)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v8 + 48))(v20, 1, v7))
      {
        memcpy(v19, v20, v21);
      }
      else
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v8 + 16))(v19, v20, v7);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v19, 0, 1, v7);
      }
      char v30 = 1;
      goto LABEL_38;
    }
    void *v19 = *(void *)v20;
    *((unsigned char *)v19 + v22) = 0;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t _ListValue.init(style:configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t v6 = a4 + *(int *)(type metadata accessor for _ListValue() + 52);
  type metadata accessor for SelectionManagerBox();
  swift_getWitnessTable();
  uint64_t v7 = type metadata accessor for _ListStyleConfiguration();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v6, a2, v7);
}

uint64_t type metadata accessor for _ListValue()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata completion function for _ListValue()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    type metadata accessor for SelectionManagerBox();
    swift_getWitnessTable();
    uint64_t result = type metadata accessor for _ListStyleConfiguration();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t ResolvedList.init(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for SelectionManagerBox();
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for _ListStyleConfiguration();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);

  return v5(a2, a1, v4);
}

uint64_t type metadata accessor for _ListStyleConfiguration()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _ListValue.Init1.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ResolvedList();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t implicit closure #1 in static NavigationDestinationModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a1;
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  uint64_t v14 = a4;
  uint64_t v15 = a5;
  uint64_t v10 = type metadata accessor for NavigationDestinationModifier.PreferenceTransform();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for [NavigationDestinationResolverBase](0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v8, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_3, (uint64_t)v9, v10, MEMORY[0x1E4FBC248], v5, MEMORY[0x1E4FBC278], v6);
  return v12;
}

void type metadata accessor for [NavigationDestinationResolverBase](uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t type metadata accessor for NavigationDestinationModifier.PreferenceTransform()
{
  return swift_getGenericMetadata();
}

uint64_t AnyNavigationPath.HomogeneousBoxBase.updatePossibilities(for:into:)(unint64_t a1, uint64_t a2, char a3)
{
  return specialized ResolvedNavigationDestinations.updatePossibilities<A>(for:over:)(a1, a2, a3);
}

uint64_t specialized ResolvedNavigationDestinations.updatePossibilities<A>(for:over:)(unint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    goto LABEL_2;
  }
  if ((unint64_t)(a2 + 1) < 2)
  {
LABEL_4:
    uint64_t v11 = *(void *)(v3 + 16);
    swift_bridgeObjectRetain();
    ResolvedNavigationDestinations.ejectDestinations(at:)(a2);
    swift_bridgeObjectRelease();
    ResolvedNavigationDestinations.setPossibilities(_:depth:)(a1, a2);
    swift_bridgeObjectRelease();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    char v8 = ResolvedNavigationDestinations.domainDiffers(from:)(v11);
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = v8 & 1;
    uint64_t v5 = 0x100000000;
    return v5 | v4;
  }
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    outlined consume of ResolvedNavigationDestinations.ChangeRequest(a1, a2, 0);
    if (!v10) {
      goto LABEL_4;
    }
  }
  else if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_4;
  }
  MEMORY[0x18C112B90](0xD000000000000065, 0x8000000188326EF0);
LABEL_2:
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  return v5 | v4;
}

uint64_t ResolvedNavigationDestinations.domainDiffers(from:)(uint64_t a1)
{
  uint64_t v2 = a1;
  uint64_t v3 = 0;
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v35 = v4;
  while (1)
  {
    while (1)
    {
      if (*(void *)(v2 + 16))
      {
        unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
        if (v9) {
          break;
        }
      }
      uint64_t v10 = 0;
      if (!*(void *)(v4 + 16)) {
        goto LABEL_13;
      }
LABEL_9:
      specialized __RawDictionaryStorage.find<A>(_:)(v3);
      if ((v11 & 1) == 0) {
        goto LABEL_13;
      }
      uint64_t result = swift_bridgeObjectRetain();
      if (v10) {
        goto LABEL_14;
      }
LABEL_11:
      if (!result) {
        return result;
      }
      uint64_t v12 = *(void *)(result + 16);
LABEL_29:
      uint64_t result = swift_bridgeObjectRelease();
      if (v12) {
        return 1;
      }
LABEL_3:
      BOOL v7 = __OFADD__(v3++, 1);
      if (v7)
      {
        __break(1u);
        return result;
      }
    }
    uint64_t v10 = *(void *)(*(void *)(v2 + 56) + 8 * v8);
    swift_bridgeObjectRetain();
    if (*(void *)(v4 + 16)) {
      goto LABEL_9;
    }
LABEL_13:
    uint64_t result = 0;
    if (!v10) {
      goto LABEL_11;
    }
LABEL_14:
    if (!result)
    {
      uint64_t v12 = *(void *)(v10 + 16);
      goto LABEL_29;
    }
    uint64_t v13 = *(void *)(v10 + 16);
    uint64_t v14 = *(void *)(result + 16);
    if (v13) {
      break;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v14) {
      return 1;
    }
    BOOL v7 = __OFADD__(v3++, 1);
    if (v7)
    {
      __break(1u);
LABEL_45:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  if (!v14 || v13 != v14) {
    goto LABEL_45;
  }
  uint64_t v37 = result;
  uint64_t v15 = Set.init(minimumCapacity:)();
  uint64_t v16 = 0;
  uint64_t v17 = v15 + 56;
  while (2)
  {
    while (1)
    {
      uint64_t v18 = *(void *)(v10 + 32 + 8 * v16++);
      uint64_t v19 = static Hasher._hash(seed:_:)();
      uint64_t v20 = -1 << *(unsigned char *)(v15 + 32);
      unint64_t v21 = v19 & ~v20;
      if (((*(void *)(v17 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
        break;
      }
      uint64_t v22 = *(void *)(v15 + 48);
      if (*(void *)(v22 + 8 * v21) != v18)
      {
        uint64_t v23 = ~v20;
        do
        {
          unint64_t v21 = (v21 + 1) & v23;
          if (((*(void *)(v17 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
            goto LABEL_26;
          }
        }
        while (*(void *)(v22 + 8 * v21) != v18);
      }
      if (v16 == v13) {
        goto LABEL_31;
      }
    }
LABEL_26:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v18, v21, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    if (v16 != v13)
    {
      uint64_t v17 = v15 + 56;
      continue;
    }
    break;
  }
LABEL_31:
  swift_bridgeObjectRelease();
  uint64_t v25 = Set.init(minimumCapacity:)();
  uint64_t v26 = 0;
  uint64_t v27 = v25 + 56;
  while (2)
  {
    while (1)
    {
      uint64_t v28 = *(void *)(v37 + 32 + 8 * v26++);
      uint64_t v29 = static Hasher._hash(seed:_:)();
      uint64_t v30 = -1 << *(unsigned char *)(v25 + 32);
      unint64_t v31 = v29 & ~v30;
      if (((*(void *)(v27 + ((v31 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v31) & 1) == 0) {
        break;
      }
      uint64_t v32 = *(void *)(v25 + 48);
      if (*(void *)(v32 + 8 * v31) != v28)
      {
        uint64_t v33 = ~v30;
        do
        {
          unint64_t v31 = (v31 + 1) & v33;
          if (((*(void *)(v27 + ((v31 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v31) & 1) == 0) {
            goto LABEL_39;
          }
        }
        while (*(void *)(v32 + 8 * v31) != v28);
      }
      if (v26 == v13) {
        goto LABEL_2;
      }
    }
LABEL_39:
    char v34 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v28, v31, v34);
    swift_bridgeObjectRelease();
    if (v26 != v13)
    {
      uint64_t v27 = v25 + 56;
      continue;
    }
    break;
  }
LABEL_2:
  swift_bridgeObjectRelease();
  char v5 = specialized static Set.== infix(_:_:)(v15, v25);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v4 = v35;
  uint64_t v2 = a1;
  if (v5) {
    goto LABEL_3;
  }
  return 1;
}

uint64_t ResolvedNavigationDestinations.updatePossibilities(for:over:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8 = v5;
  uint64_t v9 = v4;
  uint64_t v10 = a2;
  unint64_t v11 = a1;
  if (!a3)
  {
    uint64_t v13 = ResolvedNavigationDestinations.ejectDestinations(at:)(a2);
    if (v13)
    {
      uint64_t v14 = specialized Set.init<A>(_:)(v13);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v14 = MEMORY[0x1E4FBC870];
    }
    unint64_t v11 = ResolvedNavigationDestinations.setPossibilities(_:depth:)(v11, v10);
    unint64_t v4 = specialized static Set.== infix(_:_:)(v14, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!__OFADD__(v10, 1))
    {
      LODWORD(v12) = (v4 & 1) == 0;
      if (v10 + 1 == *(void *)(v9 + 24)) {
        goto LABEL_20;
      }
      goto LABEL_95;
    }
    __break(1u);
    goto LABEL_99;
  }
  if (a3 == 1)
  {
    LODWORD(v12) = ResolvedNavigationDestinations.popDestinationStack(_:)(a1) & 1;
    goto LABEL_20;
  }
  if (!(a1 | a2))
  {
    uint64_t v24 = *(void *)(v4 + 24);
    BOOL v22 = __OFADD__(v24, 1);
    uint64_t v25 = v24 + 1;
    if (v22)
    {
LABEL_100:
      __break(1u);
      goto LABEL_101;
    }
    *(void *)(v4 + 24) = v25;
    if (*(unsigned __int8 *)(v4 + 72) > 1u)
    {
      LODWORD(v12) = 0;
      uint64_t v23 = 0;
      return v23 | v12;
    }
    unint64_t v11 = *(void *)a4;
    uint64_t v26 = *(void *)(a4 + 8);
    unint64_t v18 = *(void *)(a4 + 16);
    unint64_t v4 = *(void *)(a4 + 32);
    uint64_t v27 = *(void *)a4 >> 62;
    LODWORD(v62) = *(unsigned __int8 *)(a4 + 24);
    uint64_t v61 = v27;
    if ((v62 & 1) == 0)
    {
      if (v27) {
        goto LABEL_125;
      }
      uint64_t v31 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
      outlined copy of NavigationPath.Representation(v11, v26, v18, 0);
      swift_bridgeObjectRetain();
      if (v4 >> 62) {
        goto LABEL_126;
      }
      goto LABEL_62;
    }
    unint64_t v60 = *(void *)(a4 + 32);
    if (v27) {
      goto LABEL_113;
    }
    uint64_t v28 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    outlined copy of NavigationPath.Representation(v11, v26, v18, 1);
    swift_bridgeObjectRetain();
    outlined copy of NavigationPath.Representation(v11, v26, v18, 1);
    while (1)
    {
      uint64_t v29 = *(void *)(v26 + 16);
      unint64_t v4 = v28 + v29;
      if (__OFADD__(v28, v29))
      {
        __break(1u);
      }
      else if (!(v18 >> 62))
      {
        uint64_t v30 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_29;
      }
      swift_bridgeObjectRetain();
      uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_29:
      outlined consume of NavigationPath.Representation(v11, v26, v18, 1);
      BOOL v22 = __OFADD__(v4, v30);
      uint64_t v31 = v4 + v30;
      if (!v22)
      {
        unint64_t v4 = v60;
        if (!(v60 >> 62)) {
          goto LABEL_62;
        }
        goto LABEL_126;
      }
      __break(1u);
LABEL_117:
      uint64_t v36 = v62;
      outlined copy of NavigationPath.Representation(v6, v62, v11, 1);
      swift_bridgeObjectRetain();
      outlined copy of NavigationPath.Representation(v6, v62, v11, 1);
      swift_bridgeObjectRetain();
      uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_42:
      uint64_t v37 = *(void *)(v36 + 16);
      uint64_t v38 = v35 + v37;
      if (__OFADD__(v35, v37))
      {
        __break(1u);
      }
      else if (!(v11 >> 62))
      {
        uint64_t v39 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_45;
      }
      swift_bridgeObjectRetain();
      uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_45:
      uint64_t v7 = v62;
      outlined consume of NavigationPath.Representation(v6, v62, v11, 1);
      outlined consume of NavigationPath.Representation(v6, v62, v11, 1);
      uint64_t v32 = swift_bridgeObjectRelease();
      BOOL v22 = __OFADD__(v38, v39);
      uint64_t v40 = v38 + v39;
      if (!v22)
      {
        unint64_t v18 = v59;
        BOOL v22 = __OFADD__(v40, v59);
        uint64_t v26 = v40 + v59;
        if (!v22) {
          goto LABEL_81;
        }
        goto LABEL_77;
      }
      __break(1u);
LABEL_121:
      uint64_t v42 = v62;
      outlined copy of NavigationPath.Representation(v6, v62, v11, 1);
      swift_bridgeObjectRetain();
      outlined copy of NavigationPath.Representation(v6, v62, v11, 1);
      swift_bridgeObjectRetain();
      uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_53:
      uint64_t v43 = *(void *)(v42 + 16);
      unint64_t v18 = v41 + v43;
      if (__OFADD__(v41, v43))
      {
        __break(1u);
      }
      else if (!(v11 >> 62))
      {
        uint64_t v44 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_56;
      }
      swift_bridgeObjectRetain();
      uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_56:
      uint64_t v7 = v62;
      outlined consume of NavigationPath.Representation(v6, v62, v11, 1);
      outlined consume of NavigationPath.Representation(v6, v62, v11, 1);
      uint64_t v32 = swift_bridgeObjectRelease();
      BOOL v22 = __OFADD__(v18, v44);
      uint64_t v26 = v18 + v44;
      if (!v22)
      {
        unint64_t v18 = v59;
        unint64_t v45 = v26 + v59;
        if (!__OFADD__(v26, v59)) {
          goto LABEL_80;
        }
        goto LABEL_136;
      }
      __break(1u);
LABEL_125:
      outlined copy of NavigationPath.Representation(v11, v26, v18, 0);
      swift_bridgeObjectRetain();
      outlined copy of NavigationPath.Representation(v11, v26, v18, 0);
      uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
      outlined consume of NavigationPath.Representation(v11, v26, v18, 0);
      if (!(v4 >> 62))
      {
LABEL_62:
        unint64_t v6 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_63;
      }
LABEL_126:
      swift_bridgeObjectRetain();
      unint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_63:
      outlined consume of NavigationPath.Representation(v11, v26, v18, v62);
      swift_bridgeObjectRelease();
      unint64_t v46 = v31 + v6;
      if (__OFADD__(v31, v6))
      {
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
        goto LABEL_112;
      }
      uint64_t v32 = v46 - 1;
      if (__OFSUB__(v46, 1)) {
        goto LABEL_110;
      }
      uint64_t v7 = v6;
      if (v62)
      {
        uint64_t v62 = v46 - 1;
        unint64_t v59 = v6;
        if (v61)
        {
          outlined copy of NavigationPath.Representation(v11, v26, v18, 1);
          swift_bridgeObjectRetain();
          outlined copy of NavigationPath.Representation(v11, v26, v18, 1);
          swift_bridgeObjectRetain();
          uint64_t v47 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v47 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
          outlined copy of NavigationPath.Representation(v11, v26, v18, 1);
          swift_bridgeObjectRetain();
          outlined copy of NavigationPath.Representation(v11, v26, v18, 1);
        }
        uint64_t v48 = *(void *)(v26 + 16);
        uint64_t v49 = v47 + v48;
        if (__OFADD__(v47, v48))
        {
          __break(1u);
        }
        else if (!(v18 >> 62))
        {
          uint64_t v50 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
          goto LABEL_71;
        }
        swift_bridgeObjectRetain();
        uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
LABEL_71:
        outlined consume of NavigationPath.Representation(v11, v26, v18, 1);
        outlined consume of NavigationPath.Representation(v11, v26, v18, 1);
        swift_bridgeObjectRelease();
        BOOL v22 = __OFADD__(v49, v50);
        unint64_t v6 = v49 + v50;
        if (!v22)
        {
          uint64_t v7 = v59;
          goto LABEL_73;
        }
        __break(1u);
LABEL_131:
        uint64_t v7 = v62;
        outlined copy of NavigationPath.Representation(v6, v62, v11, 0);
        swift_bridgeObjectRetain();
        outlined copy of NavigationPath.Representation(v6, v62, v11, 0);
        uint64_t v58 = _CocoaArrayWrapper.endIndex.getter();
        outlined consume of NavigationPath.Representation(v6, v62, v11, 0);
        outlined consume of NavigationPath.Representation(v6, v62, v11, 0);
        uint64_t v32 = swift_bridgeObjectRelease();
        BOOL v22 = __OFADD__(v58, v18);
        uint64_t v26 = v58 + v18;
        if (!v22) {
          goto LABEL_81;
        }
LABEL_77:
        __break(1u);
LABEL_78:
        if (v6 >> 62)
        {
          uint64_t v7 = v62;
          outlined copy of NavigationPath.Representation(v6, v62, v11, 0);
          swift_bridgeObjectRetain();
          outlined copy of NavigationPath.Representation(v6, v62, v11, 0);
          uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
          outlined consume of NavigationPath.Representation(v6, v62, v11, 0);
          outlined consume of NavigationPath.Representation(v6, v62, v11, 0);
          uint64_t v32 = swift_bridgeObjectRelease();
          unint64_t v45 = v26 + v18;
          if (!__OFADD__(v26, v18))
          {
LABEL_80:
            uint64_t v26 = v45 - 1;
            if (!__OFSUB__(v45, 1)) {
              goto LABEL_81;
            }
            goto LABEL_111;
          }
        }
        else
        {
          uint64_t v26 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
          unint64_t v45 = v26 + v18;
          if (!__OFADD__(v26, v18)) {
            goto LABEL_80;
          }
        }
LABEL_136:
        __break(1u);
LABEL_137:
        uint64_t v62 = v32;
        outlined copy of NavigationPath.Representation(v11, v26, v18, 0);
        swift_bridgeObjectRetain();
        outlined copy of NavigationPath.Representation(v11, v26, v18, 0);
        unint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
        outlined consume of NavigationPath.Representation(v11, v26, v18, 0);
        outlined consume of NavigationPath.Representation(v11, v26, v18, 0);
        swift_bridgeObjectRelease();
LABEL_73:
        uint64_t v32 = v62;
        goto LABEL_87;
      }
      if (v61) {
        goto LABEL_137;
      }
      unint64_t v6 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_87:
      if (!__OFADD__(v6, v7))
      {
        uint64_t result = NavigationPath.updatePossibilities(from:to:into:)(v32, v6 + v7, v9);
        if (!v8)
        {
          uint64_t v54 = *(void *)(v9 + 24);
          uint64_t result = v54 - 1;
          if (!__OFSUB__(v54, 1))
          {
            uint64_t v55 = *(void *)(v9 + 16);
            LODWORD(v12) = *(void *)(v55 + 16)
                        && (unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(result), (v57 & 1) != 0)
                        && *(void *)(*(void *)(*(void *)(v55 + 56) + 8 * v56) + 16);
            goto LABEL_95;
          }
          __break(1u);
        }
        return result;
      }
LABEL_112:
      __break(1u);
LABEL_113:
      outlined copy of NavigationPath.Representation(v11, v26, v18, 1);
      swift_bridgeObjectRetain();
      outlined copy of NavigationPath.Representation(v11, v26, v18, 1);
      swift_bridgeObjectRetain();
      uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v12 = a1 ^ 1 | a2;
  if (!v12) {
    goto LABEL_20;
  }
  uint64_t v16 = *(void *)(v4 + 24);
  uint64_t v17 = v16 - 1;
  if (__OFSUB__(v16, 1))
  {
LABEL_99:
    __break(1u);
    goto LABEL_100;
  }
  uint64_t v61 = *(void *)(v4 + 16);
  swift_bridgeObjectRetain();
  ResolvedNavigationDestinations.popDestinationStack(_:)(v17);
  unint64_t v6 = *(void *)a4;
  unint64_t v18 = *(void *)(a4 + 8);
  unint64_t v11 = *(void *)(a4 + 16);
  LOBYTE(v10) = *(unsigned char *)(a4 + 24);
  unint64_t v4 = *(void *)(a4 + 32);
  if ((v10 & 1) == 0)
  {
    if (v6 >> 62) {
      goto LABEL_108;
    }
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    outlined copy of NavigationPath.Representation(*(void *)a4, *(void *)(a4 + 8), *(void *)(a4 + 16), 0);
    swift_bridgeObjectRetain();
    goto LABEL_34;
  }
  unint64_t v60 = *(void *)(a4 + 32);
  if (v6 >> 62) {
    goto LABEL_104;
  }
  uint64_t v19 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  outlined copy of NavigationPath.Representation(v6, v18, v11, 1);
  swift_bridgeObjectRetain();
  outlined copy of NavigationPath.Representation(v6, v18, v11, 1);
  while (1)
  {
    uint64_t v20 = *(void *)(v18 + 16);
    unint64_t v4 = v19 + v20;
    if (__OFADD__(v19, v20))
    {
      __break(1u);
    }
    else if (!(v11 >> 62))
    {
      uint64_t v21 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_15;
    }
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
LABEL_15:
    outlined consume of NavigationPath.Representation(v6, v18, v11, 1);
    BOOL v22 = __OFADD__(v4, v21);
    uint64_t v7 = v4 + v21;
    if (v22)
    {
      __break(1u);
LABEL_108:
      outlined copy of NavigationPath.Representation(v6, v18, v11, 0);
      swift_bridgeObjectRetain();
      outlined copy of NavigationPath.Representation(v6, v18, v11, 0);
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      outlined consume of NavigationPath.Representation(v6, v18, v11, 0);
    }
    else
    {
      unint64_t v4 = v60;
    }
LABEL_34:
    uint64_t v62 = v18;
    if (v4 >> 62)
    {
LABEL_101:
      swift_bridgeObjectRetain();
      unint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v18 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    outlined consume of NavigationPath.Representation(v6, v62, v11, v10);
    uint64_t v32 = swift_bridgeObjectRelease();
    unint64_t v33 = v7 + v18;
    if (__OFADD__(v7, v18))
    {
      __break(1u);
      goto LABEL_103;
    }
    BOOL v22 = __OFADD__(v33, 1);
    unint64_t v34 = v33 + 1;
    if (!v22) {
      break;
    }
LABEL_103:
    __break(1u);
LABEL_104:
    outlined copy of NavigationPath.Representation(v6, v18, v11, 1);
    swift_bridgeObjectRetain();
    outlined copy of NavigationPath.Representation(v6, v18, v11, 1);
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  *(void *)(v9 + 24) = v34;
  if (*(unsigned __int8 *)(v9 + 72) > 1u)
  {
    if ((v10 & 1) == 0) {
      goto LABEL_78;
    }
    unint64_t v59 = v18;
    if (v6 >> 62) {
      goto LABEL_121;
    }
    uint64_t v41 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v42 = v62;
    outlined copy of NavigationPath.Representation(v6, v62, v11, 1);
    swift_bridgeObjectRetain();
    outlined copy of NavigationPath.Representation(v6, v62, v11, 1);
    goto LABEL_53;
  }
  if (v10)
  {
    unint64_t v59 = v18;
    if (v6 >> 62) {
      goto LABEL_117;
    }
    uint64_t v35 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v36 = v62;
    outlined copy of NavigationPath.Representation(v6, v62, v11, 1);
    swift_bridgeObjectRetain();
    outlined copy of NavigationPath.Representation(v6, v62, v11, 1);
    goto LABEL_42;
  }
  if (v6 >> 62) {
    goto LABEL_131;
  }
  uint64_t v51 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  BOOL v22 = __OFADD__(v51, v18);
  uint64_t v26 = v51 + v18;
  if (v22) {
    goto LABEL_77;
  }
LABEL_81:
  NavigationPath.updatePossibilities(from:to:into:)(0, v26 & ~(v26 >> 63), v9);
  if (v8) {
    return swift_bridgeObjectRelease();
  }
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  char v53 = ResolvedNavigationDestinations.domainDiffers(from:)(v61);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  LODWORD(v12) = v53 & 1;
  if (v26 <= 0)
  {
LABEL_20:
    uint64_t v23 = 0;
    return v23 | v12;
  }
LABEL_95:
  uint64_t v23 = 0x100000000;
  return v23 | v12;
}

uint64_t ResolvedNavigationDestinations.setPossibilities(_:depth:)(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = a1;
  if (a1 >> 62)
  {
LABEL_66:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
LABEL_67:
    uint64_t v7 = (char *)MEMORY[0x1E4FBC860];
LABEL_68:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v87 = v3[2];
    v3[2] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v7, a2, isUniquelyReferenced_nonNull_native);
    v3[2] = v87;
    swift_bridgeObjectRelease();
    uint64_t v76 = specialized Set.init<A>(_:)((uint64_t)v7);
    swift_bridgeObjectRelease();
    return v76;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v6) {
    goto LABEL_67;
  }
LABEL_3:
  unint64_t v83 = v5 & 0xC000000000000001;
  uint64_t v7 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v8 = 4;
  uint64_t v79 = v5;
  uint64_t v80 = a2;
  uint64_t v81 = v6;
  char v78 = v3;
  while (1)
  {
    uint64_t v9 = v8 - 4;
    if (v83)
    {
      uint64_t v10 = MEMORY[0x18C117680](v8 - 4, v5);
      uint64_t v11 = v8 - 3;
      if (__OFADD__(v9, 1)) {
        goto LABEL_59;
      }
    }
    else
    {
      uint64_t v10 = *(void *)(v5 + 8 * v8);
      swift_retain();
      uint64_t v11 = v8 - 3;
      if (__OFADD__(v9, 1))
      {
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
    }
    uint64_t v84 = v11;
    uint64_t v85 = v8;
    uint64_t v12 = (*(uint64_t (**)(void))(*(void *)v10 + 80))();
    uint64_t v13 = v12;
    if (a2 != -1)
    {
      if (*(void *)(*v3 + 16))
      {
        specialized __RawDictionaryStorage.find<A>(_:)(v12);
        if (v14)
        {
          _StringGuts.grow(_:)(153);
          v15._uint64_t countAndFlagsBits = 0x100000000000001FLL;
          v15._object = (void *)0x8000000188326E30;
          String.append(_:)(v15);
          v16._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)v10 + 88))();
          String.append(_:)(v16);
          swift_bridgeObjectRelease();
          v17._uint64_t countAndFlagsBits = 0x1000000000000078;
          v17._object = (void *)0x8000000188326E50;
          String.append(_:)(v17);
          MEMORY[0x18C112B90](0, 0xE000000000000000);
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_6;
        }
      }
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
    }
    unint64_t v19 = *((void *)v7 + 2);
    unint64_t v18 = *((void *)v7 + 3);
    if (v19 >= v18 >> 1) {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v19 + 1, 1, v7);
    }
    *((void *)v7 + 2) = v19 + 1;
    *(void *)&v7[8 * v19 + 32] = v13;
    swift_retain();
    if (a2 != -1)
    {
      char v20 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v21 = *v3;
      uint64_t v86 = (void *)*v3;
      *uint64_t v3 = 0x8000000000000000;
      unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
      uint64_t v24 = *(void *)(v21 + 16);
      BOOL v25 = (v22 & 1) == 0;
      uint64_t v26 = v24 + v25;
      if (__OFADD__(v24, v25)) {
        goto LABEL_60;
      }
      char v27 = v22;
      if (*(void *)(v21 + 24) < v26)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, v20);
        unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
        if ((v27 & 1) != (v29 & 1)) {
          goto LABEL_70;
        }
        unint64_t v23 = v28;
        uint64_t v30 = v86;
        if ((v27 & 1) == 0) {
          goto LABEL_38;
        }
LABEL_33:
        uint64_t v42 = v30[7];
        swift_release();
        *(void *)(v42 + 8 * v23) = v10;
LABEL_40:
        *uint64_t v3 = v30;
        goto LABEL_45;
      }
      if (v20)
      {
        uint64_t v30 = v86;
        if (v22) {
          goto LABEL_33;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        uint64_t v30 = v86;
        if (v27) {
          goto LABEL_33;
        }
      }
LABEL_38:
      v30[(v23 >> 6) + 8] |= 1 << v23;
      uint64_t v44 = 8 * v23;
      *(void *)(v30[6] + v44) = v13;
      *(void *)(v30[7] + v44) = v10;
      uint64_t v45 = v30[2];
      BOOL v46 = __OFADD__(v45, 1);
      uint64_t v47 = v45 + 1;
      if (v46) {
        goto LABEL_63;
      }
      _OWORD v30[2] = v47;
      goto LABEL_40;
    }
    char v31 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v32 = (void *)v3[1];
    v3[1] = 0x8000000000000000;
    unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    uint64_t v35 = v32[2];
    BOOL v36 = (v33 & 1) == 0;
    uint64_t v37 = v35 + v36;
    if (__OFADD__(v35, v36)) {
      goto LABEL_62;
    }
    char v38 = v33;
    if (v32[3] >= v37)
    {
      if (v31)
      {
        uint64_t v41 = v32;
        if ((v33 & 1) == 0) {
          goto LABEL_42;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        uint64_t v41 = v32;
        if ((v38 & 1) == 0) {
          goto LABEL_42;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, v31);
      unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
      if ((v38 & 1) != (v40 & 1)) {
        goto LABEL_70;
      }
      unint64_t v34 = v39;
      uint64_t v41 = v32;
      if ((v38 & 1) == 0)
      {
LABEL_42:
        v41[(v34 >> 6) + 8] |= 1 << v34;
        uint64_t v48 = 8 * v34;
        *(void *)(v41[6] + v48) = v13;
        *(void *)(v41[7] + v48) = v10;
        uint64_t v49 = v41[2];
        BOOL v46 = __OFADD__(v49, 1);
        uint64_t v50 = v49 + 1;
        if (v46) {
          goto LABEL_65;
        }
        _OWORD v41[2] = v50;
        goto LABEL_44;
      }
    }
    uint64_t v43 = v41[7];
    swift_release();
    *(void *)(v43 + 8 * v34) = v10;
LABEL_44:
    v3[1] = v41;
LABEL_45:
    uint64_t v51 = swift_bridgeObjectRelease();
    uint64_t v52 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 96))(v51);
    if (v53) {
      break;
    }
    swift_release();
LABEL_5:
    uint64_t v6 = v81;
LABEL_6:
    uint64_t v8 = v85 + 1;
    if (v84 == v6) {
      goto LABEL_68;
    }
  }
  uint64_t v54 = v52;
  uint64_t v55 = v53;
  char v82 = v7;
  uint64_t v56 = (*(uint64_t (**)(void))(*(void *)v10 + 104))();
  if (v56)
  {
    uint64_t v59 = v56;
    a2 = v57;
    uint64_t v5 = v58;
    char v60 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v61 = (void *)v3[4];
    v3[4] = 0x8000000000000000;
    uint64_t v62 = v54;
    unint64_t v64 = specialized __RawDictionaryStorage.find<A>(_:)(v54, v55);
    uint64_t v65 = v61[2];
    BOOL v66 = (v63 & 1) == 0;
    uint64_t v67 = v65 + v66;
    if (__OFADD__(v65, v66)) {
      goto LABEL_61;
    }
    uint64_t v3 = v63;
    if (v61[3] >= v67)
    {
      if (v60)
      {
        if ((v63 & 1) == 0) {
          goto LABEL_56;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v3 & 1) == 0) {
          goto LABEL_56;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v67, v60);
      unint64_t v68 = specialized __RawDictionaryStorage.find<A>(_:)(v62, v55);
      if ((v3 & 1) != (v69 & 1)) {
        goto LABEL_71;
      }
      unint64_t v64 = v68;
      if ((v3 & 1) == 0)
      {
LABEL_56:
        v61[(v64 >> 6) + 8] |= 1 << v64;
        uint64_t v71 = (uint64_t *)(v61[6] + 16 * v64);
        uint64_t *v71 = v62;
        v71[1] = v55;
        uint64_t v72 = (uint64_t *)(v61[7] + 24 * v64);
        *uint64_t v72 = v59;
        v72[1] = a2;
        _OWORD v72[2] = v5;
        uint64_t v73 = v61[2];
        BOOL v46 = __OFADD__(v73, 1);
        uint64_t v74 = v73 + 1;
        if (v46) {
          goto LABEL_64;
        }
        v61[2] = v74;
        swift_bridgeObjectRetain();
        goto LABEL_58;
      }
    }
    uint64_t v70 = (uint64_t *)(v61[7] + 24 * v64);
    *uint64_t v70 = v59;
    v70[1] = a2;
    v70[2] = v5;
LABEL_58:
    uint64_t v3 = v78;
    v78[4] = v61;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = v79;
    a2 = v80;
    uint64_t v7 = v82;
    goto LABEL_5;
  }
  __break(1u);
LABEL_70:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_71:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void update #1 (edge:) in UIKitContentScrollViewBridge.update()(uint64_t a1, id a2, uint64_t a3, void *a4, void *a5)
{
  id v10 = objc_msgSend(a2, sel_contentScrollViewForEdge_, a1);
  if (v10)
  {
    uint64_t v11 = v10;
    swift_getObjectType();
    if (objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__isFromSwiftUI))
    {
    }
    else
    {
      swift_beginAccess();
      uint64_t v12 = *(void *)(a3 + 32);
      if (*(void *)(v12 + 16) && (uint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v14 & 1) != 0)) {
        Swift::String v15 = *(void **)(*(void *)(v12 + 56) + 8 * v13);
      }
      else {
        Swift::String v15 = 0;
      }
      swift_endAccess();

      if (!v15 || v11 != v15) {
        return;
      }
    }
  }
  if ((a1 == 4 || (a5 = a4, a1 == 1)) && a5)
  {
    id v16 = a5;
    objc_msgSend(a2, sel_setContentScrollView_forEdge_, v16, a1);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = *(void *)(a3 + 32);
    *(void *)(a3 + 32) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v16, a1, isUniquelyReferenced_nonNull_native);
    *(void *)(a3 + 32) = v24;
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  else
  {
    objc_msgSend(a2, sel_setContentScrollView_forEdge_, 0, a1);
    unint64_t v18 = (uint64_t *)(a3 + 32);
    swift_beginAccess();
    uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if (v20)
    {
      unint64_t v21 = v19;
      char v22 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v23 = *v18;
      uint64_t v25 = *v18;
      *unint64_t v18 = 0x8000000000000000;
      if ((v22 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v23 = v25;
      }
      specialized _NativeDictionary._delete(at:)(v21, v23);
      *unint64_t v18 = v23;
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
  }
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, void (*a3)(void))
{
  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  a3(0);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = result;
  if (*(void *)(v6 + 16))
  {
    char v36 = a2;
    uint64_t v35 = v4;
    int64_t v9 = 0;
    id v10 = (uint64_t *)(v6 + 64);
    uint64_t v11 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v33 = -1 << v11;
    uint64_t v34 = v11;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v13 = v12 & *(void *)(v6 + 64);
    int64_t v14 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v18 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v19 = v18 | (v9 << 6);
      }
      else
      {
        int64_t v20 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v20 >= v14) {
          goto LABEL_31;
        }
        unint64_t v21 = v10[v20];
        ++v9;
        if (!v21)
        {
          int64_t v9 = v20 + 1;
          if (v20 + 1 >= v14) {
            goto LABEL_31;
          }
          unint64_t v21 = v10[v9];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v14)
            {
LABEL_31:
              if ((v36 & 1) == 0)
              {
                uint64_t result = swift_release();
                unint64_t v4 = v35;
                goto LABEL_38;
              }
              if (v34 >= 64) {
                bzero((void *)(v6 + 64), 8 * v14);
              }
              else {
                uint64_t *v10 = v33;
              }
              unint64_t v4 = v35;
              *(void *)(v6 + 16) = 0;
              break;
            }
            unint64_t v21 = v10[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v9 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_40;
                }
                if (v9 >= v14) {
                  goto LABEL_31;
                }
                unint64_t v21 = v10[v9];
                ++v22;
                if (v21) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v9 = v22;
          }
        }
LABEL_21:
        unint64_t v13 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }
      uint64_t v23 = 8 * v19;
      uint64_t v24 = *(void *)(*(void *)(v6 + 48) + v23);
      uint64_t v25 = *(void *)(*(void *)(v6 + 56) + v23);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v27 = result & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v15 + 8 * (v27 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v27) & ~*(void *)(v15 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v29 = 0;
        unint64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v31 = v28 == v30;
          if (v28 == v30) {
            unint64_t v28 = 0;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v15 + 8 * v28);
        }
        while (v32 == -1);
        unint64_t v16 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(void *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t v17 = 8 * v16;
      *(void *)(*(void *)(v8 + 48) + v17) = v24;
      *(void *)(*(void *)(v8 + 56) + v17) = v25;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *unint64_t v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  a3(0);
  uint64_t v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  int64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  char v36 = v6 + 64;
  if (v9 < 64) {
    id v10 = ~(-1 << v9);
  }
  else {
    id v10 = -1;
  }
  uint64_t v11 = v10 & *(void *)(v6 + 64);
  uint64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      int64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    uint64_t v23 = (void *)(v6 + 64);
    uint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      uint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        uint64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        uint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            uint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    uint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    unint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    BOOL v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v28 = v17 == v27;
        if (v17 == v27) {
          uint64_t v17 = 0;
        }
        v26 |= v28;
        char v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    void *v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v4 = v8;
  return result;
}

void type metadata accessor for _DictionaryStorage<UInt, ObjectIdentifier>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<UInt, ObjectIdentifier>)
  {
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UInt, ObjectIdentifier>);
    }
  }
}

uint64_t ResolvedNavigationDestinations.ejectDestinations(at:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = v1[2];
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v6 & 1) == 0) {
    return 0;
  }
  uint64_t v7 = *(void *)(*(void *)(v3 + 56) + 8 * v5);
  swift_bridgeObjectRetain_n();
  specialized Dictionary._Variant.removeValue(forKey:)(a1);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8) {
    goto LABEL_34;
  }
  swift_bridgeObjectRetain();
  for (uint64_t i = 0; i != v8; ++i)
  {
    uint64_t v10 = *(void *)(v7 + 8 * i + 32);
    if (a1 == -1)
    {
      uint64_t v24 = v2[1];
      if (*(void *)(v24 + 16))
      {
        unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v7 + 8 * i + 32));
        if (v26)
        {
          unint64_t v27 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)(v24 + 56) + 8 * v25) + 96);
          uint64_t v28 = swift_retain();
          uint64_t v29 = v27(v28);
          uint64_t v31 = v30;
          swift_release();
          if (v31)
          {
            swift_bridgeObjectRetain();
            unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v31);
            char v34 = v33;
            swift_bridgeObjectRelease();
            if (v34)
            {
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v36 = v2[4];
              v2[4] = 0x8000000000000000;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                specialized _NativeDictionary.copy()();
              }
              swift_bridgeObjectRelease();
              specialized _NativeDictionary._delete(at:)(v32, v36);
              v2[4] = v36;
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
          }
        }
      }
      unint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
      if (v43)
      {
        unint64_t v44 = v42;
        int v45 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v46 = v2[1];
        v2[1] = 0x8000000000000000;
        if (!v45) {
          specialized _NativeDictionary.copy()();
        }
        specialized _NativeDictionary._delete(at:)(v44, v46);
        v2[1] = v46;
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v11 = *v2;
      if (*(void *)(*v2 + 16))
      {
        unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v7 + 8 * i + 32));
        if (v13)
        {
          int64_t v14 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)(v11 + 56) + 8 * v12) + 96);
          uint64_t v15 = swift_retain();
          uint64_t v16 = v14(v15);
          uint64_t v18 = v17;
          swift_release();
          if (v18)
          {
            swift_bridgeObjectRetain();
            unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v18);
            char v21 = v20;
            swift_bridgeObjectRelease();
            if (v21)
            {
              char v22 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v23 = v2[4];
              v2[4] = 0x8000000000000000;
              if ((v22 & 1) == 0) {
                specialized _NativeDictionary.copy()();
              }
              swift_bridgeObjectRelease();
              specialized _NativeDictionary._delete(at:)(v19, v23);
              v2[4] = v23;
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
          }
        }
      }
      unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
      if (v38)
      {
        unint64_t v39 = v37;
        int v40 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v41 = *v2;
        uint64_t v48 = *v2;
        *uint64_t v2 = 0x8000000000000000;
        if (!v40)
        {
          specialized _NativeDictionary.copy()();
          uint64_t v41 = v48;
        }
        specialized _NativeDictionary._delete(at:)(v39, v41);
        *uint64_t v2 = v41;
LABEL_6:
        swift_release();
        swift_bridgeObjectRelease();
        continue;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_34:
  swift_bridgeObjectRelease();
  return v7;
}

void type metadata accessor for _DictionaryStorage<Int, [ObjectIdentifier]>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<Int, [ObjectIdentifier]>)
  {
    type metadata accessor for FocusItem?(255, &lazy cache variable for type metadata for [ObjectIdentifier], MEMORY[0x1E4FBB058], MEMORY[0x1E4FBB320]);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Int, [ObjectIdentifier]>);
    }
  }
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  uint64_t v10 = v6 + 56;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t v11 = *(void *)(v6 + 48);
  if (*(void *)(v11 + 8 * v9) == a2) {
    goto LABEL_7;
  }
  uint64_t v12 = ~v8;
  unint64_t v9 = (v9 + 1) & v12;
  if (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_8:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v15;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_9;
  }
  while (*(void *)(v11 + 8 * v9) != a2)
  {
    unint64_t v9 = (v9 + 1) & v12;
    if (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
      goto LABEL_8;
    }
  }
LABEL_7:
  uint64_t result = 0;
LABEL_9:
  *a1 = a2;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    int64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t NavigationDestinationResolver.inputTypeTag.getter()
{
  uint64_t result = dynamic_cast_existential_2_conditional(*(void *)(*(void *)v0 + 144));
  if (result) {
    return _typeName(_:qualified:)();
  }
  return result;
}

uint64_t dynamic_cast_existential_2_conditional(uint64_t a1)
{
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    if (swift_conformsToProtocol2()) {
      return a1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t NavigationDestinationResolver.inputIdentifier.getter()
{
  return *(void *)(*(void *)v0 + 144);
}

void type metadata accessor for _DictionaryStorage<ObjectIdentifier, NavigationDestinationResolverBase>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, NavigationDestinationResolverBase>)
  {
    type metadata accessor for NavigationDestinationResolverBase();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, NavigationDestinationResolverBase>);
    }
  }
}

uint64_t type metadata accessor for NavigationDestinationResolverBase()
{
  return self;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  unint64_t v5 = v3;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  uint64_t v10 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()((void (*)(void))type metadata accessor for _DictionaryStorage<Int, [ObjectIdentifier]>);
    uint64_t v7 = v10;
  }
  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v5);
  specialized _NativeDictionary._delete(at:)(v5, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  char v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  uint64_t v10 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v7 = v10;
  }

  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 16 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  char v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v10 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v7 = v10;
  }
  outlined destroy of AnyHashable(*(void *)(v7 + 48) + 40 * v4);
  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  char v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  unint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 16 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

void *specialized _NativeDictionary.copy()(void (*a1)(void))
{
  uint64_t v2 = v1;
  a1(0);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  uint64_t result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    uint64_t v18 = *(void *)(*(void *)(v3 + 56) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = *(void *)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 56) + v17) = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v14) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;

  uint64_t v2 = v1;
  a1(0);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  uint64_t result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    char v22 = __clz(__rbit64(v20));
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v16 = v22 + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    uint64_t v18 = *(void *)(*(void *)(v3 + 56) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = *(void *)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 56) + v17) = v18;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v14) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  uint64_t v2 = v1;
  a1(0);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  uint64_t result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    uint64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v14) {
      goto LABEL_26;
    }
    int64_t v19 = *(void *)(v7 + 8 * v18);
    ++v10;
    if (!v19)
    {
      int64_t v10 = v18 + 1;
      if (v18 + 1 >= v14) {
        goto LABEL_26;
      }
      int64_t v19 = *(void *)(v7 + 8 * v10);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = *(void *)(*(void *)(v3 + 56) + 8 * v16);
    *(unsigned char *)(*(void *)(v5 + 48) + v16) = *(unsigned char *)(*(void *)(v3 + 48) + v16);
    *(void *)(*(void *)(v5 + 56) + 8 * v16) = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v20 = v18 + 2;
  if (v20 >= v14) {
    goto LABEL_26;
  }
  int64_t v19 = *(void *)(v7 + 8 * v20);
  if (v19)
  {
    int64_t v10 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    int64_t v19 = *(void *)(v7 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  uint64_t v2 = v1;
  a1(0);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  uint64_t result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    uint64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      uint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    int64_t v19 = v18[1];
    unint64_t v20 = 8 * v16;
    int64_t v21 = *(void *)(*(void *)(v3 + 56) + v20);
    char v22 = (void *)(*(void *)(v5 + 48) + v17);
    char *v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_retain();
  }
  unint64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  uint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t type metadata completion function for ContextMenuModifierCore()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance DisableDeferredAccessibilityAttachmentModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewInputsModifier._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t destroy for SearchToolbarItem(uint64_t a1, int *a2)
{
  swift_release();
  swift_release();
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_2(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v5 = *(int *)(v4 + 32);
  uint64_t v6 = a1 + *(int *)(type metadata accessor for SearchFieldState(0) + 36) + v5;
  uint64_t v7 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v9 = a1 + *(int *)(v8 + 24);
  int v10 = *(unsigned __int8 *)(v9 + 8);
  if (v10 != 255) {
    outlined consume of PlatformItemCollection.Storage(*(void *)v9, v10 & 1);
  }
  outlined consume of Text.Storage(*(void *)(a1 + *(int *)(v8 + 32)), *(void *)(a1 + *(int *)(v8 + 32) + 8), *(unsigned char *)(a1 + *(int *)(v8 + 32) + 16));
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v12 = a1 + a2[6];
  if (*(void *)v12)
  {

    swift_release();
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
  }
  uint64_t v13 = a1 + a2[7];
  if (*(void *)v13)
  {

    swift_release();
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
  }
  uint64_t v14 = a1 + a2[9];
  if (*(void *)v14)
  {

    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void type metadata accessor for (StackPlacement<LazyVStackLayout>, PlacementProperties<LazyVStackLayout>)()
{
  if (!lazy cache variable for type metadata for (StackPlacement<LazyVStackLayout>, PlacementProperties<LazyVStackLayout>))
  {
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for StackPlacement<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for StackPlacement);
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for PlacementProperties<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlacementProperties);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (StackPlacement<LazyVStackLayout>, PlacementProperties<LazyVStackLayout>));
    }
  }
}

ValueMetadata *type metadata accessor for Switch()
{
  return &type metadata for Switch;
}

ValueMetadata *type metadata accessor for Alert()
{
  return &type metadata for Alert;
}

ValueMetadata *type metadata accessor for Alert.Button.Style()
{
  return &type metadata for Alert.Button.Style;
}

ValueMetadata *type metadata accessor for _ResolvedMatchedTransitionSourceConfiguration.Shadow()
{
  return &type metadata for _ResolvedMatchedTransitionSourceConfiguration.Shadow;
}

ValueMetadata *type metadata accessor for PlatformItemNavigationSelectionStyleModifier()
{
  return &type metadata for PlatformItemNavigationSelectionStyleModifier;
}

ValueMetadata *type metadata accessor for LeadingTrailingLabeledContentStyle_Phone()
{
  return &type metadata for LeadingTrailingLabeledContentStyle_Phone;
}

ValueMetadata *type metadata accessor for AccessibilityLabeledContentLabelModifier()
{
  return &type metadata for AccessibilityLabeledContentLabelModifier;
}

ValueMetadata *type metadata accessor for AutomaticNavigationSplitViewStyle_Phone()
{
  return &type metadata for AutomaticNavigationSplitViewStyle_Phone;
}

ValueMetadata *type metadata accessor for ToolbarAppearanceModificationContext()
{
  return &type metadata for ToolbarAppearanceModificationContext;
}

ValueMetadata *type metadata accessor for AccessibilityCombinedLabeledContent()
{
  return &type metadata for AccessibilityCombinedLabeledContent;
}

ValueMetadata *type metadata accessor for _NavigationStackStyleConfiguration.Item()
{
  return &type metadata for _NavigationStackStyleConfiguration.Item;
}

ValueMetadata *type metadata accessor for WidgetBorderedProminentButtonStyle()
{
  return &type metadata for WidgetBorderedProminentButtonStyle;
}

ValueMetadata *type metadata accessor for OnScrollPhaseContextChangeModifier()
{
  return &type metadata for OnScrollPhaseContextChangeModifier;
}

ValueMetadata *type metadata accessor for WindowToolbarFullScreenVisibility.Role()
{
  return &type metadata for WindowToolbarFullScreenVisibility.Role;
}

ValueMetadata *type metadata accessor for TextInputSuggestionCompletionKind()
{
  return &type metadata for TextInputSuggestionCompletionKind;
}

void *type metadata accessor for CollectionViewGroupedListsEnabled()
{
  return &unk_1ED45E580;
}

ValueMetadata *type metadata accessor for IsSearchImplementedPreferenceKey()
{
  return &type metadata for IsSearchImplementedPreferenceKey;
}

ValueMetadata *type metadata accessor for AccessibilityLabeledContentStyle()
{
  return &type metadata for AccessibilityLabeledContentStyle;
}

ValueMetadata *type metadata accessor for ViewAlignedScrollTargetBehavior.LimitBehavior.Role()
{
  return &type metadata for ViewAlignedScrollTargetBehavior.LimitBehavior.Role;
}

ValueMetadata *type metadata accessor for ResetTabViewEnvironmentModifier()
{
  return &type metadata for ResetTabViewEnvironmentModifier;
}

ValueMetadata *type metadata accessor for ResolvedNavigationDestinations()
{
  return &type metadata for ResolvedNavigationDestinations;
}

ValueMetadata *type metadata accessor for ResetSearchEnvironmentModifier()
{
  return &type metadata for ResetSearchEnvironmentModifier;
}

ValueMetadata *type metadata accessor for ClearNavigationContextModifier()
{
  return &type metadata for ClearNavigationContextModifier;
}

ValueMetadata *type metadata accessor for ButtonContainerIsBorderedInput()
{
  return &type metadata for ButtonContainerIsBorderedInput;
}

ValueMetadata *type metadata accessor for MultimodalListStackLabelStyle()
{
  return &type metadata for MultimodalListStackLabelStyle;
}

void *type metadata accessor for DisclosureIndicatorShapeStyle()
{
  return &unk_1ED455AD8;
}

ValueMetadata *type metadata accessor for _NavigationTransitionOutputs.Content()
{
  return &type metadata for _NavigationTransitionOutputs.Content;
}

ValueMetadata *type metadata accessor for ResetFormEnvironmentModifier()
{
  return &type metadata for ResetFormEnvironmentModifier;
}

ValueMetadata *type metadata accessor for PreferBaselineAlignedHeaders()
{
  return &type metadata for PreferBaselineAlignedHeaders;
}

ValueMetadata *type metadata accessor for InsetGroupedListStyleContext()
{
  return &type metadata for InsetGroupedListStyleContext;
}

ValueMetadata *type metadata accessor for ToolbarBackgroundVisibility.Role()
{
  return &type metadata for ToolbarBackgroundVisibility.Role;
}

ValueMetadata *type metadata accessor for PlatformFallbackToggleStyle()
{
  return &type metadata for PlatformFallbackToggleStyle;
}

void *type metadata accessor for DisclosureIndicator_PhoneTV()
{
  return &unk_1ED44EFD0;
}

ValueMetadata *type metadata accessor for ColumnarLabeledContentStyle()
{
  return &type metadata for ColumnarLabeledContentStyle;
}

void *type metadata accessor for AccessibilityTechnologySet()
{
  return &unk_1ED44A2F8;
}

ValueMetadata *type metadata accessor for LabelVisibilityConfigured()
{
  return &type metadata for LabelVisibilityConfigured;
}

void *type metadata accessor for PagingScrollViewBehavior()
{
  return &unk_1ED442C90;
}

ValueMetadata *type metadata accessor for NavigationStrategy_Phone()
{
  return &type metadata for NavigationStrategy_Phone;
}

ValueMetadata *type metadata accessor for NavigationDestinationKey()
{
  return &type metadata for NavigationDestinationKey;
}

ValueMetadata *type metadata accessor for AccessibilityToggleStyle()
{
  return &type metadata for AccessibilityToggleStyle;
}

void *type metadata accessor for ResolvedToggleStyleBody.ArchiveBody()
{
  return &unk_1ED43FD50;
}

ValueMetadata *type metadata accessor for GroupedListStyleContext()
{
  return &type metadata for GroupedListStyleContext;
}

ValueMetadata *type metadata accessor for ContainerBackgroundKeys.PresentationKey()
{
  return &type metadata for ContainerBackgroundKeys.PresentationKey;
}

ValueMetadata *type metadata accessor for ColumnsFormStyleContext()
{
  return &type metadata for ColumnsFormStyleContext;
}

ValueMetadata *type metadata accessor for AccessibilityLabelStyle()
{
  return &type metadata for AccessibilityLabelStyle;
}

ValueMetadata *type metadata accessor for ToolbarDefaultItemKind.Kind()
{
  return &type metadata for ToolbarDefaultItemKind.Kind;
}

ValueMetadata *type metadata accessor for PlainDividerShapeStyle()
{
  return &type metadata for PlainDividerShapeStyle;
}

ValueMetadata *type metadata accessor for ToolbarItemLabelStyle()
{
  return &type metadata for ToolbarItemLabelStyle;
}

ValueMetadata *type metadata accessor for AnyShareConfiguration.Storage()
{
  return &type metadata for AnyShareConfiguration.Storage;
}

ValueMetadata *type metadata accessor for SearchFieldPlacement.NavigationBarDrawerDisplayMode()
{
  return &type metadata for SearchFieldPlacement.NavigationBarDrawerDisplayMode;
}

ValueMetadata *type metadata accessor for ScrollBounceBehavior.Role()
{
  return &type metadata for ScrollBounceBehavior.Role;
}

ValueMetadata *type metadata accessor for PageIndexDisplayMode()
{
  return &type metadata for PageIndexDisplayMode;
}

ValueMetadata *type metadata accessor for CheckmarkToggleStyle()
{
  return &type metadata for CheckmarkToggleStyle;
}

ValueMetadata *type metadata accessor for MultimodalListStyle()
{
  return &type metadata for MultimodalListStyle;
}

ValueMetadata *type metadata accessor for MultimodalListStyle.IconStyle()
{
  return &type metadata for MultimodalListStyle.IconStyle;
}

ValueMetadata *type metadata accessor for InsetListLabelStyle()
{
  return &type metadata for InsetListLabelStyle;
}

ValueMetadata *type metadata accessor for BodyLabelGroupStyle()
{
  return &type metadata for BodyLabelGroupStyle;
}

ValueMetadata *type metadata accessor for WrappingLabelStyle()
{
  return &type metadata for WrappingLabelStyle;
}

void *type metadata accessor for UseImageBackground()
{
  return &unk_1ED42A680;
}

ValueMetadata *type metadata accessor for ToolbarToggleStyle()
{
  return &type metadata for ToolbarToggleStyle;
}

ValueMetadata *type metadata accessor for InspectorStorageV5()
{
  return &type metadata for InspectorStorageV5;
}

ValueMetadata *type metadata accessor for InspectorStorageV5.PreferenceKey()
{
  return &type metadata for InspectorStorageV5.PreferenceKey;
}

ValueMetadata *type metadata accessor for FallbackLabelStyle()
{
  return &type metadata for FallbackLabelStyle;
}

ValueMetadata *type metadata accessor for EffectiveFormStyle()
{
  return &type metadata for EffectiveFormStyle;
}

ValueMetadata *type metadata accessor for ToolbarLegibility()
{
  return &type metadata for ToolbarLegibility;
}

ValueMetadata *type metadata accessor for ToolbarLegibility.Role()
{
  return &type metadata for ToolbarLegibility.Role;
}

ValueMetadata *type metadata accessor for SwitchToggleStyle()
{
  return &type metadata for SwitchToggleStyle;
}

ValueMetadata *type metadata accessor for SectionIndexLabel()
{
  return &type metadata for SectionIndexLabel;
}

ValueMetadata *type metadata accessor for PlainDividerStyle()
{
  return &type metadata for PlainDividerStyle;
}

ValueMetadata *type metadata accessor for IsInLazyContainer()
{
  return &type metadata for IsInLazyContainer;
}

ValueMetadata *type metadata accessor for _SizeFittingRoot()
{
  return &type metadata for _SizeFittingRoot;
}

ValueMetadata *type metadata accessor for _EventDirections()
{
  return &type metadata for _EventDirections;
}

void *type metadata accessor for TooltipHelpStyle()
{
  return &unk_1ED41FCE8;
}

ValueMetadata *type metadata accessor for SidebarListStyle()
{
  return &type metadata for SidebarListStyle;
}

uint64_t protocol witness for Rule.value.getter in conformance SidebarListStyle.Body<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return SidebarListStyle.Body.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t protocol witness for Rule.value.getter in conformance DefaultListStyle.Body<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DefaultListStyle.Body.value.getter(*v2, *(ValueMetadata **)(a1 + 16), *(_UNKNOWN ***)(a1 + 24), a2);
}

ValueMetadata *type metadata accessor for DefaultHelpStyle()
{
  return &type metadata for DefaultHelpStyle;
}

ValueMetadata *type metadata accessor for TooltipModifier()
{
  return &type metadata for TooltipModifier;
}

ValueMetadata *type metadata accessor for TabBarPlacement.Placement()
{
  return &type metadata for TabBarPlacement.Placement;
}

ValueMetadata *type metadata accessor for ListCoreOptions()
{
  return &type metadata for ListCoreOptions;
}

ValueMetadata *type metadata accessor for InlineListStyle()
{
  return &type metadata for InlineListStyle;
}

ValueMetadata *type metadata accessor for InsetListStyle()
{
  return &type metadata for InsetListStyle;
}

ValueMetadata *type metadata accessor for FillShapeStyle()
{
  return &type metadata for FillShapeStyle;
}

void *type metadata accessor for EmptyHelpStyle()
{
  return &unk_1ED416970;
}

void static KeyEquivalent.return.getter(void *a1@<X8>)
{
  *a1 = 13;
  a1[1] = 0xE100000000000000;
}

ValueMetadata *type metadata accessor for DragLiftEvent()
{
  return &type metadata for DragLiftEvent;
}

ValueMetadata *type metadata accessor for ListItemKind.Set()
{
  return &type metadata for ListItemKind.Set;
}

ValueMetadata *type metadata accessor for GridMetadata()
{
  return &type metadata for GridMetadata;
}

ValueMetadata *type metadata accessor for DraggingItem()
{
  return &type metadata for DraggingItem;
}

ValueMetadata *type metadata accessor for PortalKinds()
{
  return &type metadata for PortalKinds;
}

uint64_t objectdestroy_54Tm()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t objectdestroy_54Tm_0()
{
  swift_release();
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v3 = *(void *)(v0 + 288);
  unint64_t v4 = *(void *)(v0 + 320);
  if ((~v1 & 0x7000000000000007) != 0
    || (v2 & 0xF000000000000007) != 0xF000000000000007
    || (v3 & 0xFFFFFFFFFFFFFFF8) != 4194296
    || (v4 & 0xFFFFFFFFFF0000FCLL) != 0)
  {
    long long v11 = *(_OWORD *)(v0 + 296);
    outlined consume of NavigationState.Base(*(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 136), *(void *)(v0 + 144), *(void *)(v0 + 152), *(void *)(v0 + 160), *(void *)(v0 + 168),
      *(void *)(v0 + 176),
      *(void *)(v0 + 184),
      v1,
      *(void *)(v0 + 200),
      *(void *)(v0 + 208),
      *(void *)(v0 + 216),
      *(void *)(v0 + 224),
      *(void *)(v0 + 232),
      *(void *)(v0 + 240),
      *(void *)(v0 + 248),
      *(void *)(v0 + 256),
      *(void *)(v0 + 264),
      v2,
      *(void *)(v0 + 280),
      v3,
      v11,
      *((uint64_t *)&v11 + 1),
      *(void *)(v0 + 312),
      v4,
      *(void *)(v0 + 328));
  }
  long long v13 = *(_OWORD *)(v0 + 704);
  long long v10 = *(_OWORD *)(v0 + 672);
  long long v12 = *(_OWORD *)(v0 + 688);
  long long v9 = *(_OWORD *)(v0 + 640);
  outlined consume of NavigationState.Base(*(void *)(v0 + 416), *(void *)(v0 + 424), *(void *)(v0 + 432), *(void *)(v0 + 440), *(void *)(v0 + 448), *(void *)(v0 + 456), *(void *)(v0 + 464), *(void *)(v0 + 472), *(void *)(v0 + 480), *(void *)(v0 + 488), *(void *)(v0 + 496), *(void *)(v0 + 504), *(void *)(v0 + 512), *(void *)(v0 + 520), *(void *)(v0 + 528), *(void *)(v0 + 536), *(void *)(v0 + 544), *(void *)(v0 + 552), *(void *)(v0 + 560),
    *(void *)(v0 + 568),
    *(void *)(v0 + 576),
    *(void *)(v0 + 584),
    *(void *)(v0 + 592),
    *(void *)(v0 + 600),
    *(void *)(v0 + 608),
    *(void *)(v0 + 616),
    *(void *)(v0 + 624),
    *(void *)(v0 + 632),
    v9,
    *((uint64_t *)&v9 + 1),
    *(void *)(v0 + 656),
    *(void *)(v0 + 664),
    v10,
    *((uint64_t *)&v10 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((unint64_t *)&v13 + 1),
    *(void *)(v0 + 720));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();

  return swift_deallocObject();
}

uint64_t associated type witness table accessor for EnvironmentalModifier.ResolvedModifier : ViewModifier in CoreSheetPresentationModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for SheetAnchorProvider.Modifier : ViewModifier in NullSheetAnchor<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for Scene.Body : Scene in WindowGroup<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t TableRowForEachState.item(at:offset:)(uint64_t a1, uint64_t a2)
{
  uint64_t v111 = a2;
  uint64_t v112 = a1;
  uint64_t v107 = (void *)*v2;
  uint64_t v3 = v107;
  uint64_t v4 = v107[13];
  uint64_t v5 = (void *)v107[10];
  long long v94 = *(void **)(*(void *)(v4 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v102 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v103 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v100 = (char *)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  char v93 = (char *)&v89 - v9;
  uint64_t v106 = *(v5 - 1);
  MEMORY[0x1F4188790](v10);
  long long v12 = (char *)&v89 - v11;
  uint64_t v13 = v3[11];
  uint64_t v109 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v14);
  long long v99 = (char *)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  unint64_t v101 = (char *)&v89 - v17;
  MEMORY[0x1F4188790](v18);
  uint64_t v114 = (uint64_t)&v89 - v19;
  unint64_t v20 = (char *)v2 + v3[20];
  swift_beginAccess();
  uint64_t v21 = v3[12];
  uint64_t v22 = v3[14];
  *(void *)&long long v141 = v5;
  *((void *)&v141 + 1) = v13;
  uint64_t v113 = v13;
  *(void *)&long long v142 = v21;
  *((void *)&v142 + 1) = v4;
  uint64_t v108 = v4;
  uint64_t v110 = v22;
  *(void *)&long long v143 = v22;
  uint64_t v23 = type metadata accessor for ForEach();
  uint64_t v24 = *(void *)(v23 - 8);
  unint64_t v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  uint64_t v26 = v24 + 48;
  uint64_t result = v25(v20, 1, v23);
  if (result == 1)
  {
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v105 = v2;
  ForEach.idGenerator.getter();
  swift_endAccess();
  swift_beginAccess();
  uint64_t v97 = v26;
  __int16 v98 = v25;
  uint64_t result = v25(v20, 1, v23);
  if (result == 1)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v104 = v23;
  ForEach.data.getter();
  swift_endAccess();
  uint64_t v28 = v113;
  *(void *)&long long v141 = v5;
  *((void *)&v141 + 1) = v113;
  uint64_t v29 = v108;
  *(void *)&long long v142 = v21;
  *((void *)&v142 + 1) = v108;
  long long v96 = v20;
  uint64_t v30 = v110;
  *(void *)&long long v143 = v110;
  uint64_t v95 = type metadata accessor for ForEach.IDGenerator();
  ForEach.IDGenerator.makeID(data:index:offset:)();
  (*(void (**)(char *, void *))(v106 + 8))(v12, v5);
  swift_release();
  uint64_t v31 = (uint64_t)v105;
  unint64_t v32 = (void *)((char *)v105 + *(void *)(*v105 + 176));
  swift_beginAccess();
  uint64_t v33 = *v32;
  uint64_t v34 = v107[15];
  uint64_t v106 = v21;
  uint64_t v107 = v5;
  *(void *)&long long v141 = v5;
  *((void *)&v141 + 1) = v28;
  *(void *)&long long v142 = v21;
  *((void *)&v142 + 1) = v29;
  *(void *)&long long v143 = v30;
  *((void *)&v143 + 1) = v34;
  uint64_t v35 = type metadata accessor for TableRowForEachState.Item();
  MEMORY[0x18C115450](&v151, v114, v33, v28, v35, v30);
  uint64_t v36 = v151;
  if (v151)
  {
    swift_endAccess();
    unint64_t v37 = (void *)*v36;
    if (*((unsigned char *)v36 + *(void *)(*v36 + 200)) == 1)
    {
      TableRowForEachState.uneraseItem(_:)((uint64_t)v36);
      unint64_t v37 = (void *)*v36;
    }
    uint64_t v38 = v37[23];
    uint64_t v39 = *(void *)(*(void *)v31 + 192);
    uint64_t v40 = v113;
    if (*(_DWORD *)((char *)v36 + v38) == *(_DWORD *)(v31 + v39))
    {
      uint64_t v41 = v37[26];
      if (*((unsigned char *)v36 + v41)) {
        goto LABEL_9;
      }
      unint64_t v42 = (char *)v36 + v37[20];
      swift_beginAccess();
      uint64_t v44 = v102;
      uint64_t v43 = v103;
      int v45 = v93;
      (*(void (**)(char *, char *, uint64_t))(v102 + 16))(v93, v42, v103);
      swift_getAssociatedConformanceWitness();
      LOBYTE(v42) = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v43);
      if (v42)
      {
LABEL_9:
        (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v114, v40);
      }
      else
      {
        *((unsigned char *)v36 + v41) = 1;
        *(void *)&long long v131 = 0;
        *((void *)&v131 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(92);
        v80._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v80);
        swift_bridgeObjectRelease();
        v81._uint64_t countAndFlagsBits = 0x444920656874203ALL;
        v81._object = (void *)0xE900000000000020;
        String.append(_:)(v81);
        uint64_t v82 = v114;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v83._object = (void *)0x80000001883384A0;
        v83._uint64_t countAndFlagsBits = 0xD00000000000004FLL;
        String.append(_:)(v83);
        MEMORY[0x18C112B90](v131, *((void *)&v131 + 1));
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v82, v40);
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v114, v113);
      uint64_t v76 = (char *)v36 + *(void *)(*v36 + 160);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v102 + 24))(v76, v112, v103);
      swift_endAccess();
      *(uint64_t *)((char *)v36 + *(void *)(*v36 + 168)) = v111;
      *(uint64_t *)((char *)v36 + *(void *)(*v36 + 176)) = *(void *)(v31 + *(void *)(*(void *)v31 + 184));
      *(_DWORD *)((char *)v36 + v38) = *(_DWORD *)(v31 + v39);
    }
    return (uint64_t)v36;
  }
  char v93 = (char *)v35;
  long long v94 = v32;
  uint64_t v92 = v34;
  swift_endAccess();
  uint64_t result = (uint64_t)(id)AGSubgraphGetGraph();
  if (*(unsigned char *)(v31 + 188) == 1) {
    goto LABEL_28;
  }
  uint64_t v46 = (void *)result;
  uint64_t v47 = v31;
  uint64_t v48 = AGSubgraphCreate2();

  AGSubgraphAddChild();
  long long v49 = *(_OWORD *)(v31 + 128);
  long long v50 = *(_OWORD *)(v31 + 96);
  long long v147 = *(_OWORD *)(v31 + 112);
  long long v148 = v49;
  long long v51 = *(_OWORD *)(v31 + 128);
  long long v149 = *(_OWORD *)(v31 + 144);
  long long v52 = *(_OWORD *)(v31 + 64);
  long long v53 = *(_OWORD *)(v31 + 32);
  long long v143 = *(_OWORD *)(v31 + 48);
  long long v144 = v52;
  long long v54 = *(_OWORD *)(v31 + 64);
  long long v55 = *(_OWORD *)(v31 + 96);
  long long v145 = *(_OWORD *)(v31 + 80);
  long long v146 = v55;
  long long v56 = *(_OWORD *)(v31 + 32);
  long long v141 = *(_OWORD *)(v31 + 16);
  long long v142 = v56;
  long long v137 = v147;
  long long v138 = v51;
  long long v139 = *(_OWORD *)(v31 + 144);
  long long v133 = v143;
  long long v134 = v54;
  long long v135 = v145;
  long long v136 = v50;
  uint64_t v150 = *(void *)(v31 + 160);
  uint64_t v140 = *(void *)(v31 + 160);
  long long v131 = v141;
  long long v132 = v53;
  int v129 = 0;
  char v130 = 1;
  outlined retain of _TableRowInputs((uint64_t)&v141);
  AGGraphClearUpdate();
  id v57 = (id)AGSubgraphGetCurrent();
  char v91 = (void *)v48;
  AGSubgraphSetCurrent();
  uint64_t v58 = v114;
  closure #1 in TableRowForEachState.item(at:offset:)(v31, v114, &v129, &v131, &v127);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  uint64_t v59 = v127;
  int v60 = v128;
  uint64_t v61 = (uint64_t)v101;
  uint64_t v90 = *(void (**)(char *, uint64_t, uint64_t))(v109 + 16);
  v90(v101, v58, v113);
  *(void *)&long long v117 = v59;
  DWORD2(v117) = v60;
  uint64_t result = PreferencesOutputs.subscript.getter();
  uint64_t v62 = v103;
  uint64_t v63 = v98;
  if ((result & 0x100000000) != 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  int v64 = result;
  swift_bridgeObjectRelease();
  uint64_t v65 = (uint64_t)v100;
  (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v100, v112, v62);
  uint64_t v66 = *(void *)v47;
  uint64_t v112 = *(void *)(v47 + *(void *)(*(void *)v47 + 184));
  LODWORD(v103) = *(_DWORD *)(v47 + *(void *)(v66 + 192));
  uint64_t v67 = v96;
  swift_beginAccess();
  uint64_t result = v63(v67, 1, v104);
  if (result != 1)
  {
    ForEach.idGenerator.getter();
    uint64_t v68 = *(void *)&v115[0];
    swift_endAccess();
    *(void *)&long long v117 = v68;
    char v69 = ForEach.IDGenerator.isConstant.getter();
    swift_release();
    swift_allocObject();
    int v70 = v64;
    uint64_t v71 = v91;
    uint64_t v36 = specialized TableRowForEachState.Item.init(id:rows:subgraph:index:offset:contentID:seed:state:isConstant:)(v61, v70, (uint64_t)v91, v65, v111, v112, v103, v47, v69 & 1);
    uint64_t v72 = v113;
    v90(v99, v114, v113);
    *(void *)&v115[0] = v36;
    swift_beginAccess();
    uint64_t v73 = v110;
    type metadata accessor for Dictionary();
    id v74 = v71;
    swift_retain();
    Dictionary.subscript.setter();
    swift_endAccess();
    if (v130)
    {
      static Log.internalError(_:)();
      uint64_t v75 = v92;
    }
    else
    {
      *(void *)&long long v117 = v107;
      *((void *)&v117 + 1) = v72;
      *(void *)&long long v118 = v106;
      *((void *)&v118 + 1) = v108;
      uint64_t v75 = v92;
      *(void *)&long long v119 = v73;
      *((void *)&v119 + 1) = v92;
      uint64_t v77 = type metadata accessor for TableRowForEachState.ChildTraits();
      MEMORY[0x1F4188790](v77);
      *(&v89 - 4) = v78;
      *(&v89 - 3) = (uint64_t)partial apply for closure #2 in TableRowForEachState.item(at:offset:);
      uint64_t v88 = v36;
      AGGraphMutateAttribute();
    }
    uint64_t v79 = v47 + *(void *)(*(void *)v47 + 168);
    if (*(unsigned char *)(v79 + 8) == 1 && !*(void *)v79)
    {
      long long v123 = v137;
      long long v124 = v138;
      long long v125 = v139;
      long long v119 = v133;
      long long v120 = v134;
      long long v121 = v135;
      long long v122 = v136;
      long long v117 = v131;
      long long v118 = v132;
      v115[6] = v137;
      v115[7] = v138;
      v115[8] = v139;
      v115[2] = v133;
      v115[3] = v134;
      v115[4] = v135;
      v115[5] = v136;
      uint64_t v126 = v140;
      uint64_t v116 = v140;
      v115[0] = v131;
      v115[1] = v132;
      uint64_t v84 = *(uint64_t (**)(_OWORD *))(v75 + 56);
      outlined retain of _TableRowInputs((uint64_t)&v117);
      uint64_t v85 = v84(v115);
      char v87 = v86;

      outlined release of _TableRowInputs((uint64_t)&v117);
      (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v114, v72);
      if (v87)
      {
        *(void *)uint64_t v79 = 1;
        *(unsigned char *)(v79 + 8) = 1;
      }
      else
      {
        *(void *)uint64_t v79 = v85;
        *(unsigned char *)(v79 + 8) = 0;
      }
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v114, v72);
    }
    long long v123 = v137;
    long long v124 = v138;
    long long v125 = v139;
    uint64_t v126 = v140;
    long long v119 = v133;
    long long v120 = v134;
    long long v121 = v135;
    long long v122 = v136;
    long long v117 = v131;
    long long v118 = v132;
    outlined release of _TableRowInputs((uint64_t)&v117);
    return (uint64_t)v36;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for TableRowForEachState.ChildTraits()
{
  return swift_getGenericMetadata();
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>();
    type metadata accessor for StepperStyleModifier<MenuStepperStyle>(255, &lazy cache variable for type metadata for StepperStyleModifier<MenuStepperStyle>, (void (*)(void))lazy protocol witness table accessor for type MenuStepperStyle and conformance MenuStepperStyle);
    _s7SwiftUI28StyleContextAcceptsPredicateVyAA04MenucD0VGACyxGAA09ViewInputF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>, (void (*)(uint64_t))type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StepperStyleModifier<MenuStepperStyle>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for StepperStyleModifier();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout>, ViewInputFlagModifier<IsInHostingConfiguration>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>(uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout>, ViewInputFlagModifier<IsInHostingConfiguration>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout>, ViewInputFlagModifier<IsInHostingConfiguration>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout>, ViewInputFlagModifier<IsInHostingConfiguration>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>> and conformance <> ModifiedContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>();
    lazy protocol witness table accessor for type HostingContentViewRootModifier and conformance HostingContentViewRootModifier(&lazy protocol witness table cache variable for type _ViewModifier_Content<HostingContentViewRootModifier> and conformance _ViewModifier_Content<A>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<HostingContentViewRootModifier>);
    lazy protocol witness table accessor for type LabelStyleWritingModifier<SidebarLabelStyle> and conformance LabelStyleWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>)
  {
    type metadata accessor for _ViewModifier_Content<HostingContentViewRootModifier>();
    type metadata accessor for LabelStyleWritingModifier<SidebarLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<SidebarLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarLabelStyle and conformance SidebarLabelStyle, (uint64_t)&type metadata for SidebarLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<HostingContentViewRootModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<HostingContentViewRootModifier>)
  {
    type metadata accessor for HostingContentViewRootModifier(255);
    lazy protocol witness table accessor for type HostingContentViewRootModifier and conformance HostingContentViewRootModifier(&lazy protocol witness table cache variable for type HostingContentViewRootModifier and conformance HostingContentViewRootModifier, (void (*)(uint64_t))type metadata accessor for HostingContentViewRootModifier);
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<HostingContentViewRootModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type LabelStyleWritingModifier<SidebarLabelStyle> and conformance LabelStyleWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LabelStyleWritingModifier<SidebarLabelStyle> and conformance LabelStyleWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type LabelStyleWritingModifier<SidebarLabelStyle> and conformance LabelStyleWritingModifier<A>)
  {
    type metadata accessor for LabelStyleWritingModifier<SidebarLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<SidebarLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarLabelStyle and conformance SidebarLabelStyle, (uint64_t)&type metadata for SidebarLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<SidebarLabelStyle> and conformance LabelStyleWritingModifier<A>);
  }
  return result;
}

uint64_t closure #1 in PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.enqueueAction(ids:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v9 = (void *)swift_allocObject();
  void v9[2] = a3;
  void v9[3] = a4;
  v9[4] = v8;
  v9[5] = v7;
  void v9[6] = a2;
  swift_retain_n();
  swift_bridgeObjectRetain();
  static Update.enqueueAction(_:)();
  swift_release();

  return swift_release();
}

uint64_t type metadata completion function for ContextMenuModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t WindowGroup.init(id:title:lazyContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v17 = (int *)type metadata accessor for WindowGroup();
  uint64_t v18 = (void *)((char *)a9 + v17[10]);
  *(void *)((char *)a9 + v17[11]) = 0;
  uint64_t v19 = (void *)((char *)a9 + v17[12]);
  void *v19 = 0;
  v19[1] = 0;
  *uint64_t v18 = a1;
  v18[1] = a2;
  *a9 = a3;
  a9[1] = a4;
  a9[2] = a5;
  a9[3] = a6;
  unint64_t v20 = (void *)((char *)a9 + v17[9]);
  *unint64_t v20 = a7;
  v20[1] = a8;
  type metadata accessor for WindowGroupRootContent();

  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for WindowGroup()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for WindowGroup()
{
  uint64_t result = type metadata accessor for WindowGroupRootContent();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t partial apply for closure #1 in SceneBodyAccessor.updateBody(of:changed:)()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 24) + 24))(*(void *)(v0 + 16));
}

uint64_t WindowGroup.body.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = type metadata accessor for WindowGroupRootContent();
  uint64_t v8 = WindowGroupRootContent.makeContent()(v7);
  uint64_t v10 = *v2;
  uint64_t v9 = v2[1];
  uint64_t v11 = v2[2];
  uint64_t v12 = v2[3];
  uint64_t v13 = *(int *)(a1 + 40);
  uint64_t v14 = *(uint64_t *)((char *)v2 + *(int *)(a1 + 44));
  uint64_t v15 = (uint64_t *)((char *)v2 + *(int *)(a1 + 48));
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  uint64_t v18 = (uint64_t *)((char *)v3 + v13);
  uint64_t v19 = *v18;
  uint64_t v20 = v18[1];
  *a2 = v8;
  a2[1] = v10;
  a2[2] = v9;
  a2[3] = v11;
  a2[4] = v12;
  a2[5] = v14;
  a2[6] = v16;
  a2[7] = v17;
  a2[8] = v19;
  a2[9] = v20;
  a2[10] = v6;
  outlined copy of Text?(v10, v9, v11, v12);
  outlined copy of AppIntentExecutor?(v16);

  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for WindowGroupRootContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t WindowGroupRootContent.makeContent()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)v17 - v7;
  double v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (void *)((char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(void *, double))(v13 + 16))(v12, v10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v17[0] = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*v12, v12[1], v2, *(void *)(a1 + 24));
    v17[1] = v14;
    type metadata accessor for LazyView();
    swift_getWitnessTable();
    return AnyView.init<A>(_:)();
  }
  else
  {
    (*(void (**)(char *, void *, uint64_t))(v3 + 32))(v8, v12, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v8, v2);
    uint64_t v15 = AnyView.init<A>(_:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  }
  return v15;
}

uint64_t type metadata accessor for LazyView()
{
  return __swift_instantiateGenericMetadata();
}

void *initializeWithCopy for WindowGroupRootContent(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x10uLL) {
    uint64_t v4 = 16;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    uint64_t v10 = *((void *)a2 + 1);
    *a1 = *(void *)a2;
    a1[1] = v10;
    swift_retain();
    char v11 = 1;
  }
  else
  {
    (*(void (**)(void *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1);
    char v11 = 0;
  }
  *((unsigned char *)a1 + v4) = v11;
  return a1;
}

void type metadata completion function for ToolbarStorage.NavigationProperties()
{
  _s7SwiftUI16CommandOperationVSgMaTm_2(319, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t lazy protocol witness table accessor for type FocusBridge.Flags and conformance FocusBridge.Flags()
{
  unint64_t result = lazy protocol witness table cache variable for type FocusBridge.Flags and conformance FocusBridge.Flags;
  if (!lazy protocol witness table cache variable for type FocusBridge.Flags and conformance FocusBridge.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusBridge.Flags and conformance FocusBridge.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FocusBridge.Flags and conformance FocusBridge.Flags;
  if (!lazy protocol witness table cache variable for type FocusBridge.Flags and conformance FocusBridge.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusBridge.Flags and conformance FocusBridge.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FocusBridge.Flags and conformance FocusBridge.Flags;
  if (!lazy protocol witness table cache variable for type FocusBridge.Flags and conformance FocusBridge.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusBridge.Flags and conformance FocusBridge.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FocusBridge.Flags and conformance FocusBridge.Flags;
  if (!lazy protocol witness table cache variable for type FocusBridge.Flags and conformance FocusBridge.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusBridge.Flags and conformance FocusBridge.Flags);
  }
  return result;
}

uint64_t closure #1 in Attribute.init<A>(_:)partial apply@<X0>(unint64_t *a1@<X2>, void (*a2)(uint64_t)@<X3>, _DWORD *a3@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a3);
}

uint64_t partial apply for implicit closure #2 in static ToolbarModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #2 in static ToolbarModifier._makeView(modifier:inputs:body:)(*(_DWORD *)(v0 + 40), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), (uint64_t (*)(void))type metadata accessor for ToolbarModifier.TransformSearch, (uint64_t)&protocol conformance descriptor for ToolbarModifier<A, B>.TransformSearch, (uint64_t (*)(void))type metadata accessor for Attribute<(_:)>, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply);
}

uint64_t implicit closure #2 in static ToolbarModifier._makeView(modifier:inputs:body:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6, uint64_t (*a7)(void), uint64_t a8)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v14 = a1;
  uint64_t v16 = a5(0);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v10 = a7(0);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v14, a8, (uint64_t)v15, v16, MEMORY[0x1E4FBC248], v10, MEMORY[0x1E4FBC278], v11);
  return v13;
}

uint64_t type metadata accessor for ToolbarModifier.TransformSearch()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for Attribute<(_:)>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for (_:)(255, a3, a4);
    unint64_t v5 = type metadata accessor for Attribute();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for Attribute<(_:)>(uint64_t a1)
{
}

{
  type metadata accessor for Attribute<(_:)>(a1, &lazy cache variable for type metadata for Attribute<(_:)>, (unint64_t *)&lazy cache variable for type metadata for (_:), type metadata accessor for ToolbarStorage.NavigationProperties?);
}

{
  _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVSgMaTm_0(a1, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), MEMORY[0x1E4F4E740]);
}

uint64_t View.tabViewStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for _TabViewStyleWriter();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

void storeEnumTagSinglePayload for Label(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 >= a2)
  {
    switch(v17)
    {
      case 1:
        a1[v14] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 2:
        *(_WORD *)&a1[v14] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 3:
LABEL_41:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v14] = 0;
        goto LABEL_23;
      default:
LABEL_23:
        if (a2)
        {
LABEL_24:
          if (v7 >= v10)
          {
            uint64_t v24 = *(void (**)(void))(v6 + 56);
            v24();
          }
          else
          {
            unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
            uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
            v23(v22);
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        break;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        break;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        break;
      default:
        return;
    }
  }
}

uint64_t protocol witness for LayoutEngine.spacing() in conformance SizeFittingLayoutComputer.Engine@<X0>(void *a1@<X8>)
{
  static Spacing.zero.getter();
  uint64_t result = AGGraphWithUpdate();
  *a1 = v3;
  return result;
}

uint64_t base witness table accessor for View in ResolvedTextFieldStyle()
{
  return lazy protocol witness table accessor for type ResolvedTextFieldStyle and conformance ResolvedTextFieldStyle((unint64_t *)&lazy protocol witness table cache variable for type ResolvedTextFieldStyle and conformance ResolvedTextFieldStyle, (void (*)(uint64_t))type metadata accessor for ResolvedTextFieldStyle);
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedTextFieldStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedTextFieldStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type ResolvedTextFieldStyle and conformance ResolvedTextFieldStyle(&lazy protocol witness table cache variable for type ResolvedTextFieldStyle and conformance ResolvedTextFieldStyle, (void (*)(uint64_t))type metadata accessor for ResolvedTextFieldStyle);

  return MEMORY[0x1F40FDF90](a1, a2, a3, v6);
}

uint64_t lazy protocol witness table accessor for type ResolvedTextFieldStyle and conformance ResolvedTextFieldStyle(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined retain of DictionaryDecoder._Options(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  unint64_t v5 = *(void *)(a1 + 88);
  outlined copy of DictionaryDecoder.DateDecodingStrategy(*(id *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  outlined copy of DictionaryDecoder.KeyDecodingStrategy(v2);
  outlined copy of DictionaryEncoder.NonConformingFloatEncodingStrategy(v3, v4);
  outlined copy of DictionaryDecoder.KeyDecodingStrategy(v5);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined copy of DictionaryEncoder.NonConformingFloatEncodingStrategy(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t outlined copy of DictionaryDecoder.KeyDecodingStrategy(unint64_t result)
{
  if (result >= 2) {
    return swift_retain();
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in NavigationDestinationModifier<A, B>.MakeSeededResolver()
{
  return swift_getWitnessTable();
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

{
  uint64_t v2;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v4;
  uint64_t v6[2];

  uint64_t v2 = *a1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *a1 = v2;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v2 < 0 || (v2 & 0x4000000000000000) != 0)
  {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v6[0] = (v2 & 0xFFFFFFFFFFFFFF8) + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized Array._endMutation()();
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()()
{
}

uint64_t closure #1 in SearchField.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v52 = a2;
  uint64_t v44 = a1;
  uint64_t v54 = a5;
  uint64_t v45 = type metadata accessor for ResolvedSearchFieldStyle(0);
  MEMORY[0x1F4188790](v45);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TextFieldStyleModifier<SearchFieldConfigurationTextFieldStyle>(255, &lazy cache variable for type metadata for TextFieldStyleModifier<SearchFieldConfigurationTextFieldStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchFieldConfigurationTextFieldStyle and conformance SearchFieldConfigurationTextFieldStyle, (uint64_t)&type metadata for SearchFieldConfigurationTextFieldStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextFieldStyleModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for TextFieldStyleModifier<SearchFieldConfigurationTextFieldStyle>(255, (unint64_t *)&lazy cache variable for type metadata for TokenFieldStyleModifier<SearchFieldConfigurationTokenFieldStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchFieldConfigurationTokenFieldStyle and conformance SearchFieldConfigurationTokenFieldStyle, (uint64_t)&type metadata for SearchFieldConfigurationTokenFieldStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TokenFieldStyleModifier);
  uint64_t v9 = type metadata accessor for ModifiedContent();
  unint64_t v10 = lazy protocol witness table accessor for type SearchFieldConfiguration.Control and conformance SearchFieldConfiguration.Control();
  unint64_t v49 = v10;
  uint64_t v75 = a4;
  uint64_t v76 = &protocol witness table for TextFieldStyleModifier<A>;
  uint64_t v51 = MEMORY[0x1E4F3FBC0];
  uint64_t WitnessTable = swift_getWitnessTable();
  id v74 = &protocol witness table for TokenFieldStyleModifier<A>;
  uint64_t v48 = v9;
  uint64_t v46 = swift_getWitnessTable();
  char v69 = &type metadata for SearchFieldConfiguration.Control;
  int v70 = (ValueMetadata *)v9;
  unint64_t v71 = v10;
  uint64_t v72 = v46;
  type metadata accessor for StaticSourceWriter();
  uint64_t v41 = type metadata accessor for ModifiedContent();
  uint64_t v53 = *(void *)(v41 - 8);
  MEMORY[0x1F4188790](v41);
  uint64_t v40 = (char *)&v39 - v11;
  uint64_t IsNotConfiguredFromStyle = type metadata accessor for SearchField.IsNotConfiguredFromStyle();
  uint64_t v13 = swift_getWitnessTable();
  unint64_t HasSuggestions = lazy protocol witness table accessor for type SearchHasSuggestions and conformance SearchHasSuggestions();
  char v69 = (ValueMetadata *)IsNotConfiguredFromStyle;
  int v70 = &type metadata for SearchHasSuggestions;
  unint64_t v71 = v13;
  uint64_t v72 = HasSuggestions;
  uint64_t v15 = type metadata accessor for AndOperationViewInputPredicate();
  type metadata accessor for StaticSourceWriter<SearchFieldConfiguration.Suggestions, _UnaryViewAdaptor<ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>?>>();
  int v17 = v16;
  uint64_t v42 = swift_getWitnessTable();
  char v69 = (ValueMetadata *)v15;
  int v70 = v17;
  unint64_t v71 = MEMORY[0x1E4F3F740];
  uint64_t v72 = v42;
  uint64_t v47 = type metadata accessor for StaticIf();
  uint64_t v18 = type metadata accessor for ModifiedContent();
  uint64_t v50 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  unsigned int v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v43 = (char *)&v39 - v22;
  uint64_t v23 = v44;
  uint64_t v24 = (uint64_t)v8;
  _s7SwiftUI16SearchFieldStateVWOcTm_0(v44, (uint64_t)v8, type metadata accessor for SearchFieldConfiguration);
  uint64_t v25 = a3;
  uint64_t v60 = a3;
  uint64_t v61 = a4;
  uint64_t v26 = a4;
  uint64_t v27 = v52;
  uint64_t v62 = v52;
  uint64_t v28 = lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index(&lazy protocol witness table cache variable for type ResolvedSearchFieldStyle and conformance ResolvedSearchFieldStyle, (void (*)(uint64_t))type metadata accessor for ResolvedSearchFieldStyle);
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for SearchFieldConfiguration.Control, (void (*)(double))partial apply for closure #1 in closure #1 in SearchField.body.getter, (uint64_t)v59, v45, (uint64_t)&type metadata for SearchFieldConfiguration.Control, v48, v28);
  _s7SwiftUI16SearchFieldStateVWOhTm_4(v24, type metadata accessor for ResolvedSearchFieldStyle);
  uint64_t v55 = v25;
  uint64_t v56 = v26;
  uint64_t v57 = v27;
  uint64_t v58 = v23;
  type metadata accessor for _UnaryViewAdaptor<ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>?>(0);
  uint64_t v30 = v29;
  uint64_t v67 = v28;
  uint64_t v68 = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t v31 = v41;
  uint64_t v32 = swift_getWitnessTable();
  lazy protocol witness table accessor for type SearchFieldConfiguration.Suggestions and conformance SearchFieldConfiguration.Suggestions();
  lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index(&lazy protocol witness table cache variable for type _UnaryViewAdaptor<ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>?> and conformance _UnaryViewAdaptor<A>, type metadata accessor for _UnaryViewAdaptor<ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>?>);
  uint64_t v33 = v30;
  uint64_t v34 = v40;
  View.viewAlias<A, B, C>(if:_:source:)(v15, (void (*)(double))partial apply for closure #2 in closure #1 in SearchField.body.getter, v31, v15, v33, (uint64_t)v20, v32, v42);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v34, v31);
  uint64_t v65 = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t v66 = MEMORY[0x1E4F3F738];
  uint64_t v35 = swift_getWitnessTable();
  uint64_t v63 = v32;
  uint64_t v64 = v35;
  swift_getWitnessTable();
  uint64_t v36 = v43;
  static ViewBuilder.buildExpression<A>(_:)(v20);
  unint64_t v37 = *(void (**)(char *, uint64_t))(v50 + 8);
  v37(v20, v18);
  static ViewBuilder.buildExpression<A>(_:)(v36);
  return ((uint64_t (*)(char *, uint64_t))v37)(v36, v18);
}

uint64_t type metadata accessor for SearchField.IsNotConfiguredFromStyle()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type SearchFieldConfiguration.Control and conformance SearchFieldConfiguration.Control()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchFieldConfiguration.Control and conformance SearchFieldConfiguration.Control;
  if (!lazy protocol witness table cache variable for type SearchFieldConfiguration.Control and conformance SearchFieldConfiguration.Control)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchFieldConfiguration.Control and conformance SearchFieldConfiguration.Control);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchFieldConfiguration.Control and conformance SearchFieldConfiguration.Control;
  if (!lazy protocol witness table cache variable for type SearchFieldConfiguration.Control and conformance SearchFieldConfiguration.Control)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchFieldConfiguration.Control and conformance SearchFieldConfiguration.Control);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchHasSuggestions and conformance SearchHasSuggestions()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchHasSuggestions and conformance SearchHasSuggestions;
  if (!lazy protocol witness table cache variable for type SearchHasSuggestions and conformance SearchHasSuggestions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchHasSuggestions and conformance SearchHasSuggestions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchHasSuggestions and conformance SearchHasSuggestions;
  if (!lazy protocol witness table cache variable for type SearchHasSuggestions and conformance SearchHasSuggestions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchHasSuggestions and conformance SearchHasSuggestions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchHasSuggestions and conformance SearchHasSuggestions;
  if (!lazy protocol witness table cache variable for type SearchHasSuggestions and conformance SearchHasSuggestions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchHasSuggestions and conformance SearchHasSuggestions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchHasSuggestions and conformance SearchHasSuggestions;
  if (!lazy protocol witness table cache variable for type SearchHasSuggestions and conformance SearchHasSuggestions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchHasSuggestions and conformance SearchHasSuggestions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchHasSuggestions and conformance SearchHasSuggestions;
  if (!lazy protocol witness table cache variable for type SearchHasSuggestions and conformance SearchHasSuggestions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchHasSuggestions and conformance SearchHasSuggestions);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in SearchField.body.getter()
{
  return closure #1 in closure #1 in SearchField.body.getter(v0[4], v0[2], v0[3]);
}

uint64_t closure #1 in closure #1 in SearchField.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for TextFieldStyleModifier<SearchFieldConfigurationTextFieldStyle>(255, &lazy cache variable for type metadata for TextFieldStyleModifier<SearchFieldConfigurationTextFieldStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchFieldConfigurationTextFieldStyle and conformance SearchFieldConfigurationTextFieldStyle, (uint64_t)&type metadata for SearchFieldConfigurationTextFieldStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextFieldStyleModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for TextFieldStyleModifier<SearchFieldConfigurationTextFieldStyle>(255, (unint64_t *)&lazy cache variable for type metadata for TokenFieldStyleModifier<SearchFieldConfigurationTokenFieldStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchFieldConfigurationTokenFieldStyle and conformance SearchFieldConfigurationTokenFieldStyle, (uint64_t)&type metadata for SearchFieldConfigurationTokenFieldStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TokenFieldStyleModifier);
  uint64_t v4 = type metadata accessor for ModifiedContent();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  unint64_t v10 = (char *)v14 - v9;
  uint64_t v11 = type metadata accessor for SearchField();
  SearchField.resolvedControl.getter(v11);
  void v14[2] = a3;
  v14[3] = &protocol witness table for TextFieldStyleModifier<A>;
  v14[0] = swift_getWitnessTable();
  v14[1] = &protocol witness table for TokenFieldStyleModifier<A>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v7);
  unsigned int v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v7, v4);
  static ViewBuilder.buildExpression<A>(_:)(v10);
  return ((uint64_t (*)(char *, uint64_t))v12)(v10, v4);
}

void type metadata accessor for TextFieldStyleModifier<SearchFieldConfigurationTextFieldStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t SearchField.resolvedControl.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  type metadata accessor for TextFieldStyleModifier<SearchFieldConfigurationTextFieldStyle>(255, &lazy cache variable for type metadata for TextFieldStyleModifier<SearchFieldConfigurationTextFieldStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchFieldConfigurationTextFieldStyle and conformance SearchFieldConfigurationTextFieldStyle, (uint64_t)&type metadata for SearchFieldConfigurationTextFieldStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextFieldStyleModifier);
  uint64_t v3 = type metadata accessor for ModifiedContent();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v12 - v5;
  uint64_t v7 = *(void *)(a1 + 24);
  unint64_t v8 = lazy protocol witness table accessor for type SearchFieldConfigurationTextFieldStyle and conformance SearchFieldConfigurationTextFieldStyle();
  View.textFieldStyle<A>(_:)(v8, v2, (uint64_t)&type metadata for SearchFieldConfigurationTextFieldStyle, v7);
  v12[0] = v7;
  v12[1] = &protocol witness table for TextFieldStyleModifier<A>;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v10 = lazy protocol witness table accessor for type SearchFieldConfigurationTokenFieldStyle and conformance SearchFieldConfigurationTokenFieldStyle();
  View.tokenFieldStyle<A>(_:)(v10, v3, (uint64_t)&type metadata for SearchFieldConfigurationTokenFieldStyle, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type SearchFieldConfigurationTokenFieldStyle and conformance SearchFieldConfigurationTokenFieldStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchFieldConfigurationTokenFieldStyle and conformance SearchFieldConfigurationTokenFieldStyle;
  if (!lazy protocol witness table cache variable for type SearchFieldConfigurationTokenFieldStyle and conformance SearchFieldConfigurationTokenFieldStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchFieldConfigurationTokenFieldStyle and conformance SearchFieldConfigurationTokenFieldStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchFieldConfigurationTextFieldStyle and conformance SearchFieldConfigurationTextFieldStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchFieldConfigurationTextFieldStyle and conformance SearchFieldConfigurationTextFieldStyle;
  if (!lazy protocol witness table cache variable for type SearchFieldConfigurationTextFieldStyle and conformance SearchFieldConfigurationTextFieldStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchFieldConfigurationTextFieldStyle and conformance SearchFieldConfigurationTextFieldStyle);
  }
  return result;
}

uint64_t View.tokenFieldStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TokenFieldStyleModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t type metadata accessor for TokenFieldStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t View.textFieldStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TextFieldStyleModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t type metadata accessor for TextFieldStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t View.viewAlias<A, B, C>(if:_:source:)@<X0>(uint64_t a1@<X0>, void (*a2)(double)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8)
{
  uint64_t v32 = a3;
  uint64_t v29 = a2;
  uint64_t v30 = a6;
  uint64_t v31 = a7;
  v28[1] = a4;
  v28[2] = a8;
  uint64_t v10 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = v13;
  uint64_t v34 = v14;
  uint64_t v35 = v16;
  uint64_t v36 = v15;
  uint64_t v17 = type metadata accessor for StaticSourceWriter();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  unsigned int v20 = (char *)v28 - v19;
  uint64_t v33 = a4;
  uint64_t v34 = v21;
  uint64_t v35 = MEMORY[0x1E4F3F740];
  uint64_t v36 = a8;
  uint64_t v22 = type metadata accessor for StaticIf();
  uint64_t v23 = *(void *)(v22 - 8);
  double v24 = MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)v28 - v25;
  v29(v24);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v20, v12, a5);
  ViewModifier.requiring<A>(_:)();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  MEMORY[0x18C113660](v26, v32, v22, v31);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v26, v22);
}

uint64_t SearchPrimitiveModifier.FocusStoreListFilter.updateValue()(uint64_t a1)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  uint64_t v69 = type metadata accessor for SearchFieldState(0);
  uint64_t v68 = *(void *)(v69 - 8);
  MEMORY[0x1F4188790](v69);
  uint64_t v58 = (unsigned __int8 *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (SearchFieldState?, SearchFieldState?)();
  uint64_t v5 = v4 - 8;
  MEMORY[0x1F4188790](v4);
  uint64_t v67 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SearchFieldState?(0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v59 = (unsigned __int8 *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v66 = (uint64_t)&v58 - v10;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v58 - v12;
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v65 = *(void *)(a1 + 16);
  uint64_t v64 = v14;
  uint64_t v15 = type metadata accessor for SearchField();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v58 - v20;
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v60 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22 - 8);
  uint64_t v62 = (uint64_t)&v58 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = v23;
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&v58 - v25;
  SearchPrimitiveModifier.FocusStoreListFilter.searchField.getter((uint64_t)v21);
  uint64_t v63 = v26;
  SearchField.$state.getter((uint64_t)v26);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v16 + 8);
  v27(v21, v15);
  uint64_t v28 = (uint64_t)v13;
  SearchPrimitiveModifier.FocusStoreListFilter.searchField.getter((uint64_t)v18);
  SearchField.state.getter();
  v27(v18, v15);
  uint64_t v29 = v69;
  uint64_t v30 = v68;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(v13, 0, 1, v69);
  uint64_t v31 = *(int *)(a1 + 44);
  uint64_t v32 = (uint64_t)v67;
  uint64_t v33 = v66;
  _s7SwiftUI7BindingVy10Foundation16AttributedStringVGWOcTm_0(v1 + v31, v66, (uint64_t (*)(void))type metadata accessor for SearchFieldState?);
  uint64_t v34 = *(int *)(v5 + 56);
  uint64_t v35 = v30;
  uint64_t v36 = v32 + v34;
  _s7SwiftUI7BindingVy10Foundation16AttributedStringVGWOcTm_0(v28, v32, (uint64_t (*)(void))type metadata accessor for SearchFieldState?);
  _s7SwiftUI7BindingVy10Foundation16AttributedStringVGWOcTm_0(v33, v36, (uint64_t (*)(void))type metadata accessor for SearchFieldState?);
  unint64_t v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
  if (v37(v32, 1, v29) != 1)
  {
    uint64_t v39 = v59;
    _s7SwiftUI7BindingVy10Foundation16AttributedStringVGWOcTm_0(v32, (uint64_t)v59, (uint64_t (*)(void))type metadata accessor for SearchFieldState?);
    if (v37(v36, 1, v29) != 1)
    {
      uint64_t v40 = v58;
      outlined init with take of SearchFieldState?(v36, (uint64_t)v58, type metadata accessor for SearchFieldState);
      char v41 = specialized static SearchFieldState.== infix(_:_:)(v39, v40);
      outlined destroy of SearchEnvironmentWritingModifier((uint64_t)v40, type metadata accessor for SearchFieldState);
      outlined destroy of SearchEnvironmentWritingModifier(v33, (uint64_t (*)(void))type metadata accessor for SearchFieldState?);
      outlined destroy of SearchEnvironmentWritingModifier(v28, (uint64_t (*)(void))type metadata accessor for SearchFieldState?);
      outlined destroy of SearchEnvironmentWritingModifier((uint64_t)v39, type metadata accessor for SearchFieldState);
      outlined destroy of SearchEnvironmentWritingModifier(v32, (uint64_t (*)(void))type metadata accessor for SearchFieldState?);
      char v38 = v41 ^ 1;
      goto LABEL_8;
    }
    outlined destroy of SearchEnvironmentWritingModifier(v33, (uint64_t (*)(void))type metadata accessor for SearchFieldState?);
    outlined destroy of SearchEnvironmentWritingModifier(v28, (uint64_t (*)(void))type metadata accessor for SearchFieldState?);
    outlined destroy of SearchEnvironmentWritingModifier((uint64_t)v39, type metadata accessor for SearchFieldState);
    goto LABEL_6;
  }
  outlined destroy of SearchEnvironmentWritingModifier(v33, (uint64_t (*)(void))type metadata accessor for SearchFieldState?);
  outlined destroy of SearchEnvironmentWritingModifier(v28, (uint64_t (*)(void))type metadata accessor for SearchFieldState?);
  if (v37(v36, 1, v29) != 1)
  {
LABEL_6:
    outlined destroy of SearchEnvironmentWritingModifier(v32, (uint64_t (*)(void))type metadata accessor for (SearchFieldState?, SearchFieldState?));
    char v38 = 1;
    goto LABEL_8;
  }
  outlined destroy of SearchEnvironmentWritingModifier(v32, (uint64_t (*)(void))type metadata accessor for SearchFieldState?);
  char v38 = 0;
LABEL_8:
  uint64_t v42 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  _s7SwiftUI5StateVySbGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for SearchFocusContext?, (uint64_t)&type metadata for SearchFocusContext, MEMORY[0x1E4FBB718]);
  uint64_t Value = AGGraphGetValue();
  char v45 = v44;
  _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOcTm_0(Value, (uint64_t)v73, (unint64_t *)&lazy cache variable for type metadata for SearchFocusContext?, (uint64_t)&type metadata for SearchFocusContext, v42);
  _s7SwiftUI5StateVySbGMaTm_2(0, &lazy cache variable for type metadata for [Namespace.ID], MEMORY[0x1E4F41808], MEMORY[0x1E4FBB320]);
  uint64_t v46 = (uint64_t *)AGGraphGetValue();
  char v48 = v47;
  type metadata accessor for (_:)();
  if (!AGGraphGetOutputValue() || (v38 & 1) != 0 || (v45 & 1) != 0 || (v48 & 1) != 0)
  {
    uint64_t v50 = *v46;
    swift_bridgeObjectRetain();
    DisplayList.Version.init(forUpdate:)();
    uint64_t v51 = v72[0];
    uint64_t v52 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
    _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOcTm_0((uint64_t)v73, (uint64_t)v72, (unint64_t *)&lazy cache variable for type metadata for SearchFocusContext?, (uint64_t)&type metadata for SearchFocusContext, MEMORY[0x1E4FBB718]);
    uint64_t v53 = (uint64_t)v63;
    uint64_t v54 = v62;
    _s7SwiftUI7BindingVy10Foundation16AttributedStringVGWOcTm_0((uint64_t)v63, v62, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
    unint64_t v55 = (*(unsigned __int8 *)(v60 + 80) + 112) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
    uint64_t v56 = swift_allocObject();
    outlined init with take of SearchFocusContext?((uint64_t)v72, v56 + 16);
    *(void *)(v56 + 96) = v51;
    *(void *)(v56 + 104) = v50;
    outlined init with take of SearchFieldState?(v54, v56 + v55, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
    int v70 = partial apply for closure #1 in SearchPrimitiveModifier.FocusStoreListFilter.updateValue();
    uint64_t v71 = v56;
    AGGraphSetOutputValue();
    swift_release();
    _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOhTm_1((uint64_t)v73, (unint64_t *)&lazy cache variable for type metadata for SearchFocusContext?, (uint64_t)&type metadata for SearchFocusContext, v52);
    uint64_t v49 = v53;
  }
  else
  {
    _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOhTm_1((uint64_t)v73, (unint64_t *)&lazy cache variable for type metadata for SearchFocusContext?, (uint64_t)&type metadata for SearchFocusContext, MEMORY[0x1E4FBB718]);
    uint64_t v49 = (uint64_t)v63;
  }
  outlined destroy of SearchEnvironmentWritingModifier(v49, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
  return $defer #1 <A>() in SearchPrimitiveModifier.FocusStoreListFilter.updateValue()(v1);
}

uint64_t destroy for SearchField(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttributedString();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = ((v6 + 9) & ~v6) + *(void *)(v5 + 64);
  unint64_t v8 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  unint64_t v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v8 + ((v6 + 16) & ~(v6 | 3)) <= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = v8 + ((v6 + 16) & ~(v6 | 3));
  }
  unsigned int v11 = a1[v10];
  unsigned int v12 = v11 - 2;
  if (v11 >= 2)
  {
    if (v10 <= 3) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a1;
        if (v10 < 4) {
          goto LABEL_14;
        }
        goto LABEL_16;
      case 2:
        int v14 = *(unsigned __int16 *)a1;
        if (v10 >= 4) {
          goto LABEL_16;
        }
        goto LABEL_14;
      case 3:
        int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v10 < 4) {
          goto LABEL_14;
        }
        goto LABEL_16;
      case 4:
        int v14 = *(_DWORD *)a1;
        if (v10 < 4) {
LABEL_14:
        }
          unsigned int v11 = (v14 | (v12 << (8 * v10))) + 2;
        else {
LABEL_16:
        }
          unsigned int v11 = v14 + 2;
        break;
      default:
        break;
    }
  }
  uint64_t v15 = ~v6;
  if (v11 == 1)
  {
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))((v6+ ((((((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8) + (v6 | 3) + 8) & ~(v6 | 3)) + 7) & 0xFFFFFFFFFFFFFFFCLL)+ 5) & v15, v4);
  }
  else
  {
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v6 + 5) & v15, v4);
    swift_release();
  }
  unint64_t v16 = (unint64_t)&a1[v10 + 8] & 0xFFFFFFFFFFFFFFF8;
  unsigned int v17 = *(unsigned __int8 *)(v16 + 17);
  if (v17 >= 2) {
    unsigned int v17 = *(_DWORD *)v16 + 2;
  }
  if (v17 == 1) {
    swift_release();
  }
  swift_release();
  uint64_t v18 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v19 = *(uint64_t (**)(unint64_t))(v18 + 8);
  unint64_t v20 = (v16 + *(unsigned __int8 *)(v18 + 80) + 18) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);

  return v19(v20);
}

uint64_t SearchPrimitiveModifier.FocusStoreListFilter.searchField.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SearchField();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t type metadata accessor for SearchField()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static SearchPrimitiveModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v79 = a6;
  uint64_t v81 = a5;
  uint64_t v73 = a3;
  uint64_t v74 = a4;
  uint64_t v71 = a7;
  uint64_t v135 = *MEMORY[0x1E4F143B8];
  type metadata accessor for SearchFieldState?(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v76 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for SearchPrimitiveModifier.FocusStoreListFilter();
  uint64_t v70 = *(void *)(v78 - 8);
  MEMORY[0x1F4188790](v78);
  uint64_t v77 = (_DWORD *)((char *)&v70 - v11);
  int v88 = *a1;
  unint64_t v12 = *(void *)a2;
  LODWORD(v11) = *(_DWORD *)(a2 + 8);
  unint64_t v13 = *(void *)(a2 + 16);
  unsigned int v14 = *(_DWORD *)(a2 + 28);
  unsigned int v91 = *(_DWORD *)(a2 + 24);
  unsigned int v92 = v11;
  unsigned int v16 = *(_DWORD *)(a2 + 32);
  unsigned int v15 = *(_DWORD *)(a2 + 36);
  unint64_t v18 = *(void *)(a2 + 40);
  unint64_t v17 = *(void *)(a2 + 48);
  unsigned int v19 = *(_DWORD *)(a2 + 60);
  unsigned int v85 = *(_DWORD *)(a2 + 56);
  unint64_t v86 = __PAIR64__(v15, v16);
  unsigned int v20 = *(_DWORD *)(a2 + 68);
  unsigned int v83 = *(_DWORD *)(a2 + 64);
  unsigned int v84 = v19;
  unsigned int v80 = v20;
  unsigned int v21 = *(_DWORD *)(a2 + 76);
  unsigned int v89 = *(_DWORD *)(a2 + 72);
  unsigned int v90 = v14;
  LODWORD(v96) = v21;
  LODWORD(v95) = *(_DWORD *)(a2 + 80);
  unint64_t v22 = v12;
  unint64_t v126 = v12;
  unint64_t v128 = v13;
  unsigned int v127 = v11;
  *(void *)&long long v129 = __PAIR64__(v14, v91);
  *((void *)&v129 + 1) = __PAIR64__(v15, v16);
  unint64_t v130 = v18;
  unint64_t v131 = v17;
  unsigned int v23 = v15;
  *(void *)&long long v132 = __PAIR64__(v19, v85);
  *((void *)&v132 + 1) = __PAIR64__(v20, v83);
  unint64_t v133 = __PAIR64__(v21, v89);
  int v134 = v95;
  LOBYTE(v117) = 1;
  lazy protocol witness table accessor for type IsSearchAllowedInput and conformance IsSearchAllowedInput();
  unint64_t v94 = v22;
  swift_retain();
  unint64_t v93 = v13;
  swift_retain();
  unint64_t v87 = v18;
  swift_bridgeObjectRetain();
  unint64_t v82 = v17;
  swift_bridgeObjectRetain();
  PropertyList.subscript.setter();
  PreferenceKeys.add(_:)();
  PreferencesInputs.remove<A>(_:)();
  _GraphInputs.pushStableIndex(_:)(0);
  unint64_t v117 = v22;
  unint64_t v119 = v13;
  unsigned int v24 = v91;
  unsigned int v118 = v92;
  *(void *)&long long v120 = __PAIR64__(v90, v91);
  LODWORD(v13) = v90;
  unsigned int v26 = v85;
  unsigned int v25 = v86;
  *((void *)&v120 + 1) = __PAIR64__(v23, v86);
  unint64_t v121 = v18;
  unint64_t v122 = v17;
  *(void *)&long long v123 = __PAIR64__(v84, v85);
  LODWORD(v18) = v83;
  unsigned int v27 = v84;
  *((void *)&v123 + 1) = __PAIR64__(v80, v83);
  LODWORD(v17) = v80;
  unint64_t v124 = __PAIR64__(v96, v89);
  int v125 = v95;
  swift_getKeyPath();
  unsigned int v75 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  unint64_t v117 = v94;
  unint64_t v119 = v93;
  unsigned int v118 = v92;
  *(void *)&long long v120 = __PAIR64__(v13, v24);
  *((void *)&v120 + 1) = __PAIR64__(HIDWORD(v86), v25);
  unint64_t v121 = v87;
  unint64_t v122 = v82;
  *(void *)&long long v123 = __PAIR64__(v27, v26);
  *((void *)&v123 + 1) = __PAIR64__(v17, v18);
  unint64_t v124 = __PAIR64__(v96, v89);
  int v125 = v95;
  swift_getKeyPath();
  LODWORD(v22) = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  unint64_t v117 = __PAIR64__(v22, v75);
  uint64_t v28 = v81;
  uint64_t v29 = v79;
  v104[2] = type metadata accessor for SearchPrimitiveModifier.ForwardedEnvironment();
  uint64_t ForwardEnv = type metadata accessor for SearchPrimitiveModifier.MakeForwardEnv();
  v104[3] = ForwardEnv;
  v104[4] = swift_getWitnessTable();
  uint64_t v31 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v117, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)v104, ForwardEnv, MEMORY[0x1E4FBC248], v31, MEMORY[0x1E4FBC278], v32);
  unsigned int v33 = v107;
  LODWORD(v117) = v88;
  type metadata accessor for SearchPrimitiveModifier();
  uint64_t v34 = type metadata accessor for _GraphValue();
  LODWORD(ForwardEnv) = _GraphValue.value.getter();
  type metadata accessor for SearchPrimitiveModifier.SearchConfigModifier();
  unint64_t v117 = __PAIR64__(v33, ForwardEnv);
  unsigned int v75 = v33;
  type metadata accessor for SearchPrimitiveModifier.MakeModifier();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  unint64_t v117 = v126;
  unint64_t v119 = v128;
  long long v120 = v129;
  unint64_t v121 = v130;
  unint64_t v122 = v131;
  long long v123 = v132;
  unint64_t v124 = v133;
  unsigned int v118 = v127;
  int v125 = v134;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  static ViewModifier.makeDebuggableView(modifier:inputs:body:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  LODWORD(v117) = v88;
  uint64_t v74 = v34;
  _GraphValue.value.getter();
  if (*(void *)(*(void *)(type metadata accessor for SearchField() - 8) + 64)) {
    closure #1 in static SearchPrimitiveModifier._makeView(modifier:inputs:body:)(1);
  }
  uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  LODWORD(v73) = OffsetAttribute2;
  unint64_t v117 = v82;
  unsigned int v118 = v85;
  unsigned int v36 = v85;
  MEMORY[0x1F4188790](OffsetAttribute2);
  *(&v70 - 4) = v28;
  *(&v70 - 3) = v29;
  *((_DWORD *)&v70 - 4) = v37;
  unint64_t v39 = v38;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  unint64_t v117 = v94;
  unint64_t v119 = v93;
  unsigned int v40 = v92;
  unsigned int v118 = v92;
  *(void *)&long long v120 = __PAIR64__(v90, v91);
  unsigned int v41 = v86;
  *((void *)&v120 + 1) = v86;
  unint64_t v42 = v87;
  unint64_t v121 = v87;
  unint64_t v122 = v39;
  *(void *)&long long v123 = __PAIR64__(v84, v36);
  unsigned int v44 = v83;
  unsigned int v43 = v84;
  *((void *)&v123 + 1) = __PAIR64__(v80, v83);
  LODWORD(v39) = v80;
  unsigned int v45 = v89;
  unint64_t v124 = __PAIR64__(v96, v89);
  int v125 = v95;
  swift_getKeyPath();
  int v72 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  unint64_t v117 = v94;
  unint64_t v119 = v93;
  unsigned int v118 = v40;
  *(void *)&long long v120 = __PAIR64__(v90, v91);
  *((void *)&v120 + 1) = __PAIR64__(HIDWORD(v86), v41);
  unint64_t v121 = v42;
  unint64_t v46 = v82;
  unint64_t v122 = v82;
  unsigned int v47 = HIDWORD(v86);
  unsigned int v48 = v85;
  *(void *)&long long v123 = __PAIR64__(v43, v85);
  *((void *)&v123 + 1) = __PAIR64__(v39, v44);
  unint64_t v124 = __PAIR64__(v96, v45);
  int v125 = v95;
  swift_getKeyPath();
  int v49 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  uint64_t v50 = type metadata accessor for SearchFieldState(0);
  uint64_t v51 = (uint64_t)v76;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v76, 1, 1, v50);
  unint64_t v52 = v46;
  uint64_t v53 = v77;
  int v54 = v72;
  _DWORD *v77 = v73;
  v53[1] = v54;
  v53[2] = v49;
  uint64_t v55 = v79;
  uint64_t v56 = outlined init with take of SearchFieldState?(v51, (uint64_t)v53 + *(int *)(v78 + 44), (uint64_t (*)(void))type metadata accessor for SearchFieldState?);
  unint64_t v99 = v52;
  unsigned int v100 = v48;
  MEMORY[0x1F4188790](v56);
  *(&v70 - 4) = v81;
  *(&v70 - 3) = v55;
  *(&v70 - 2) = (uint64_t)v53;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  unint64_t v117 = v94;
  unint64_t v119 = v93;
  unsigned int v118 = v92;
  *(void *)&long long v120 = __PAIR64__(v90, v91);
  *((void *)&v120 + 1) = __PAIR64__(v47, v86);
  unint64_t v121 = v87;
  unint64_t v122 = v52;
  *(void *)&long long v123 = __PAIR64__(v84, v48);
  *((void *)&v123 + 1) = __PAIR64__(v39, v83);
  unint64_t v124 = __PAIR64__(v96, v89);
  int v125 = v95;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewInputs.implicitRootType.setter();
  _GraphInputs.pushStableIndex(_:)(1);
  unint64_t v57 = v101;
  unsigned int v58 = v102;
  unint64_t v107 = v101;
  unsigned int v108 = v102;
  uint64_t v59 = PreferencesOutputs.subscript.getter();
  LODWORD(v107) = v88;
  LODWORD(v51) = _GraphValue.value.getter();
  LOBYTE(v107) = BYTE4(v59) & 1;
  type metadata accessor for SearchPrimitiveModifier.DefaultSearchView();
  LODWORD(v107) = v59;
  BYTE4(v107) = BYTE4(v59) & 1;
  unsigned int v108 = v51;
  unsigned int v109 = v75;
  type metadata accessor for SearchPrimitiveModifier.MakeDefaultView();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  unint64_t v95 = v119;
  unint64_t v96 = v117;
  unint64_t v107 = v117;
  unint64_t v110 = v119;
  long long v111 = v120;
  unint64_t v93 = v122;
  unint64_t v94 = v121;
  unint64_t v112 = v121;
  unint64_t v113 = v122;
  long long v114 = v123;
  unint64_t v115 = v124;
  unsigned int v108 = v118;
  int v116 = v125;
  swift_getWitnessTable();
  static View.makeDebuggableView(view:inputs:)();
  unint64_t v60 = v105;
  unsigned int v61 = v106;
  unint64_t v105 = v57;
  unsigned int v106 = v58;
  unint64_t v97 = v60;
  LODWORD(v98) = v61;
  swift_bridgeObjectRetain();
  PairwisePreferenceCombinerVisitor.init(outputs:)();
  unint64_t v97 = v52;
  uint64_t v98 = 0;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    do
    {
      uint64_t v62 = (void (*)(unint64_t *, void))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      v62(&v105, 0);
      uint64_t v63 = v98;
      unint64_t v105 = v97;
      swift_bridgeObjectRetain();
      uint64_t v64 = PreferenceKeys.endIndex.getter();
      if (v63 < 0 || v63 >= v64) {
        __break(1u);
      }
      uint64_t v65 = v63 + 1;
      uint64_t v98 = v65;
      swift_bridgeObjectRelease();
      static PreferenceKey.visitKey<A>(_:)();
    }
    while (v65 != PreferenceKeys.endIndex.getter());
  }
  swift_bridgeObjectRelease();
  uint64_t v66 = v71;
  *(_DWORD *)(v71 + 12) = v103;
  uint64_t v67 = *((void *)&v111 + 1);
  int v68 = v112;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)uint64_t v66 = v67;
  *(_DWORD *)(v66 + 8) = v68;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(_DWORD *, uint64_t))(v70 + 8))(v77, v78);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for SearchPrimitiveModifier.ForwardedEnvironment()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t UIKitNavigationBridge.updateViewInputs(_:)()
{
  lazy protocol witness table accessor for type IsSearchAllowedInput and conformance IsSearchAllowedInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(unsigned char *)(v0 + 152) = v4;
  lazy protocol witness table accessor for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView();
  PropertyList.subscript.getter();
  char v1 = *(unsigned char *)(v0 + 153);
  *(unsigned char *)(v0 + 153) = v3;
  UIKitNavigationBridge.isRepresentingSheetNavigationView.didset(v1);
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsSearchAllowedPredicate()
{
  lazy protocol witness table accessor for type IsSearchAllowedInput and conformance IsSearchAllowedInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v1;
}

unint64_t lazy protocol witness table accessor for type IsSearchAllowedInput and conformance IsSearchAllowedInput()
{
  unint64_t result = lazy protocol witness table cache variable for type IsSearchAllowedInput and conformance IsSearchAllowedInput;
  if (!lazy protocol witness table cache variable for type IsSearchAllowedInput and conformance IsSearchAllowedInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsSearchAllowedInput and conformance IsSearchAllowedInput);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView()
{
  unint64_t result = lazy protocol witness table cache variable for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView;
  if (!lazy protocol witness table cache variable for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView;
  if (!lazy protocol witness table cache variable for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView;
  if (!lazy protocol witness table cache variable for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView;
  if (!lazy protocol witness table cache variable for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView;
  if (!lazy protocol witness table cache variable for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView);
  }
  return result;
}

void UIKitNavigationBridge.isRepresentingSheetNavigationView.didset(char a1)
{
  if (*(unsigned char *)(v1 + 153) != (a1 & 1))
  {
    uint64_t v2 = UIKitNavigationBridge.host.getter();
    if (v2)
    {
      char v3 = (void *)v2;
      type metadata accessor for _UIHostingView();
      swift_getWitnessTable();
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t destroy for SearchPrimitiveModifier.FocusStoreListFilter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 44);
  uint64_t v3 = type metadata accessor for SearchFieldState(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3);
  if (!result)
  {
    uint64_t v5 = v2 + *(int *)(v3 + 36);
    uint64_t v6 = type metadata accessor for AttributedString();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
    return v7(v5, v6);
  }
  return result;
}

uint64_t initializeWithCopy for SearchPrimitiveModifier.FocusStoreListFilter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 44);
  uint64_t v5 = (unsigned char *)(a1 + v4);
  uint64_t v6 = (unsigned char *)(a2 + v4);
  uint64_t v7 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v8 = *((void *)v7 - 1);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, int *))(v8 + 48))(v6, 1, v7))
  {
    type metadata accessor for SearchFieldState?(0);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    *uint64_t v5 = *v6;
    v5[1] = v6[1];
    *((_WORD *)v5 + 1) = *((_WORD *)v6 + 1);
    *((_DWORD *)v5 + 1) = *((_DWORD *)v6 + 1);
    v5[8] = v6[8];
    uint64_t v10 = v7[9];
    uint64_t v11 = &v5[v10];
    unint64_t v12 = &v6[v10];
    uint64_t v13 = type metadata accessor for AttributedString();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    v5[v7[10]] = v6[v7[10]];
    uint64_t v14 = v7[11];
    unsigned int v15 = &v5[v14];
    unsigned int v16 = &v6[v14];
    v15[4] = v16[4];
    *(_DWORD *)unsigned int v15 = *(_DWORD *)v16;
    (*(void (**)(unsigned char *, void, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchFieldState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187FFA3EC);
}

uint64_t type metadata accessor for SearchPrimitiveModifier.FocusStoreListFilter()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for SearchPrimitiveModifier.DefaultSearchView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined init with take of SearchFieldState?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t closure #1 in static SearchPrimitiveModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SearchPrimitiveModifier();
  uint64_t v3 = a1 + *(int *)(v2 + 36);
  _OWORD v7[2] = v2;
  uint64_t v8 = type metadata accessor for SearchField();
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, v8, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v9;
}

uint64_t $defer #1 <A>() in SearchPrimitiveModifier.FocusStoreListFilter.updateValue()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SearchField();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v16 - v4;
  uint64_t v6 = type metadata accessor for SearchPrimitiveModifier.FocusStoreListFilter();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v16 - v8;
  type metadata accessor for SearchFieldState?(0);
  double v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, a1, v6, v11);
  SearchPrimitiveModifier.FocusStoreListFilter.searchField.getter((uint64_t)v5);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  SearchField.state.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v14 = type metadata accessor for SearchFieldState(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 0, 1, v14);
  return outlined assign with take of SearchFieldState?((uint64_t)v13, a1 + *(int *)(v6 + 44));
}

uint64_t storeEnumTagSinglePayload for SearchFieldState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187FFA494);
}

uint64_t type metadata accessor for SearchPrimitiveModifier.MakeDefaultView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for SearchPrimitiveModifier.MakeForwardEnv()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #1 in SearchPrimitiveModifier.SearchConfigModifier.body(content:)()
{
  type metadata accessor for SearchField();
  _s7SwiftUI5StateVySbGMaTm_2(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F411E8]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<TriggerSubmitAction?>();
  uint64_t v0 = type metadata accessor for ModifiedContent();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)v14 - v5;
  uint64_t v7 = type metadata accessor for SearchPrimitiveModifier.SearchConfigModifier();
  SearchPrimitiveModifier.SearchConfigModifier.field.getter(v7, (uint64_t)v3);
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v9 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
  void v14[2] = WitnessTable;
  v14[3] = v9;
  uint64_t v10 = swift_getWitnessTable();
  uint64_t v11 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TriggerSubmitAction?> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TriggerSubmitAction?> and conformance _EnvironmentKeyWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<TriggerSubmitAction?>);
  v14[0] = v10;
  v14[1] = v11;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v3);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v1 + 8);
  v12(v3, v0);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return ((uint64_t (*)(char *, uint64_t))v12)(v6, v0);
}

uint64_t type metadata accessor for SearchPrimitiveModifier.SearchConfigModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t SearchPrimitiveModifier.SearchConfigModifier.field.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  v20[1] = a2;
  uint64_t v5 = type metadata accessor for SearchField();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v20 - v7;
  _s7SwiftUI5StateVySbGMaTm_2(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F411E8]);
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)v20 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, v3, v5, v11);
  swift_getKeyPath();
  uint64_t v14 = v3 + *(int *)(a1 + 40);
  LOBYTE(v21) = *(unsigned char *)v14;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_getKeyPath();
  uint64_t v16 = *(void *)(v14 + 8);
  uint64_t v17 = *(void *)(v14 + 16);
  uint64_t v21 = v16;
  uint64_t v22 = v17;
  outlined copy of AppIntentExecutor?(v16);
  unint64_t v18 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
  v20[2] = WitnessTable;
  void v20[3] = v18;
  swift_getWitnessTable();
  View.environment<A>(_:_:)();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v16);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t type metadata accessor for SearchPrimitiveModifier.MakeModifier()
{
  return __swift_instantiateGenericMetadata();
}

void storeEnumTagSinglePayload for TextInputSuggestions(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 1) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 >= a2)
  {
    switch(v13)
    {
      case 1:
        a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 3:
LABEL_39:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        goto LABEL_23;
      default:
LABEL_23:
        if (a2)
        {
LABEL_24:
          if (v7 > 0xFE)
          {
            unint64_t v18 = (unint64_t)&a1[v9 + 1] & ~v9;
            unsigned int v19 = *(void (**)(unint64_t))(v6 + 56);
            v19(v18);
          }
          else
          {
            *a1 = a2 + 1;
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        break;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        break;
      default:
        return;
    }
  }
}

uint64_t outlined init with take of SearchFocusContext?(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI5StateVySbGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for SearchFocusContext?, (uint64_t)&type metadata for SearchFocusContext, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of SearchFieldState?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for SearchFieldState?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #2 in closure #1 in SearchField.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v3 = *(void *)(v1 + 40);
  type metadata accessor for SearchField();

  return closure #1 in SearchField.suggestionsList(_:)(v4, v3, a1);
}

uint64_t assignWithTake for NavigationLinkButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    unsigned int v6 = *(unsigned __int8 *)(a1 + 17);
    if (v6 >= 2) {
      unsigned int v6 = *(_DWORD *)a1 + 2;
    }
    if (v6 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v7 = *(unsigned __int8 *)(a2 + 17);
    if (v7 >= 2) {
      unsigned int v7 = *(_DWORD *)a2 + 2;
    }
    if (v7 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      char v8 = 1;
    }
    else
    {
      char v8 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    *(unsigned char *)(a1 + 17) = v8;
  }
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v11 | 7) + 18;
  int v13 = (unsigned __int8 *)((v12 + a1) & ~(v11 | 7));
  unsigned int v14 = (unsigned __int8 *)((v12 + a2) & ~(v11 | 7));
  uint64_t v15 = ~v11;
  uint64_t v16 = v11 + 17;
  uint64_t v17 = *(void *)(v10 + 64);
  unint64_t v18 = ((v11 + 17) & ~v11) + v17;
  uint64_t v19 = v17 + 7;
  unint64_t v20 = ((((((((v17 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
      + 24;
  if (v20 <= v18) {
    unint64_t v21 = v18;
  }
  else {
    unint64_t v21 = v20;
  }
  unsigned int v22 = v13[v21];
  unsigned int v23 = v14[v21];
  if (v22 > 1)
  {
    if (v23 <= 1)
    {
      if (v23 != 1)
      {
LABEL_55:
        long long v49 = *(_OWORD *)v14;
        v13[16] = v14[16];
        *(_OWORD *)int v13 = v49;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 32))((unint64_t)&v13[v16] & v15, (unint64_t)&v14[v16] & v15, v9);
        v13[v21] = 0;
        goto LABEL_56;
      }
      goto LABEL_27;
    }
LABEL_39:
    memcpy(v13, v14, v21 + 1);
    goto LABEL_56;
  }
  if (v23 > 1)
  {
    if (v22 == 1)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v10 + 8))(v13, v9);
      swift_release();
      if (*(void *)(((((unint64_t)&v13[v19] & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
      {
        swift_release();
        swift_release();
      }
      unint64_t v36 = *(void *)(((((unint64_t)&v13[v19] & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v36 >= 0xFFFFFFFF) {
        LODWORD(v36) = -1;
      }
      if ((int)v36 - 1 < 0)
      {
        swift_weakDestroy();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v10 + 8))((unint64_t)&v13[v16] & v15, v9);
    }
    goto LABEL_39;
  }
  if (v13 == v14) {
    goto LABEL_56;
  }
  if (v22 == 1)
  {
    (*(void (**)(unsigned __int8 *, uint64_t))(v10 + 8))(v13, v9);
    unint64_t v51 = (unint64_t)&v13[v19] & 0xFFFFFFFFFFFFFFF8;
    swift_release();
    if (*(void *)(((v51 + 31) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
    {
      swift_release();
      swift_release();
    }
    unint64_t v24 = *(void *)(((v51 + 55) & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v24 >= 0xFFFFFFFF) {
      LODWORD(v24) = -1;
    }
    if ((int)v24 - 1 < 0)
    {
      swift_weakDestroy();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v10 + 8))((unint64_t)&v13[v16] & v15, v9);
  }
  unsigned int v37 = v14[v21];
  unsigned int v38 = v37 - 2;
  if (v37 >= 2)
  {
    if (v21 <= 3) {
      uint64_t v39 = v21;
    }
    else {
      uint64_t v39 = 4;
    }
    switch(v39)
    {
      case 1:
        int v40 = *v14;
        goto LABEL_52;
      case 2:
        int v40 = *(unsigned __int16 *)v14;
        goto LABEL_52;
      case 3:
        int v40 = *(unsigned __int16 *)v14 | (v14[2] << 16);
        goto LABEL_52;
      case 4:
        int v40 = *(_DWORD *)v14;
LABEL_52:
        int v48 = (v40 | (v38 << (8 * v21))) + 2;
        unsigned int v37 = v40 + 2;
        if (v21 < 4) {
          unsigned int v37 = v48;
        }
        break;
      default:
        break;
    }
  }
  if (v37 != 1) {
    goto LABEL_55;
  }
LABEL_27:
  (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v10 + 32))(v13, v14, v9);
  unsigned int v25 = (void *)((unint64_t)&v13[v19] & 0xFFFFFFFFFFFFFFF8);
  unsigned int v26 = (void *)((unint64_t)&v14[v19] & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v25 = *v26;
  unint64_t v27 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = ((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v27 = *(void *)v28;
  *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
  unint64_t v29 = ((unint64_t)v25 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = ((unint64_t)v26 + 31) & 0xFFFFFFFFFFFFFFF8;
  long long v31 = *(_OWORD *)v30;
  *(unsigned char *)(v29 + 16) = *(unsigned char *)(v30 + 16);
  *(_OWORD *)unint64_t v29 = v31;
  unint64_t v32 = ((unint64_t)v25 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v33 = ((unint64_t)v26 + 55) & 0xFFFFFFFFFFFFFFF8;
  int v34 = *(void *)(v33 + 8);
  if (*(void *)(v33 + 8) >= 0xFFFFFFFFuLL) {
    int v34 = -1;
  }
  if (v34 - 1 < 0)
  {
    unint64_t v32 = swift_weakTakeInit();
    *(_OWORD *)(v32 + 8) = *(_OWORD *)(v33 + 8);
  }
  else
  {
    long long v35 = *(_OWORD *)v33;
    *(void *)(v32 + 16) = *(void *)(v33 + 16);
    *(_OWORD *)unint64_t v32 = v35;
  }
  unsigned int v41 = (_OWORD *)((v32 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v42 = (long long *)((v33 + 31) & 0xFFFFFFFFFFFFFFF8);
  long long v43 = *v42;
  long long v44 = v42[2];
  v41[1] = v42[1];
  _OWORD v41[2] = v44;
  *unsigned int v41 = v43;
  unint64_t v45 = ((unint64_t)v41 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v46 = ((unint64_t)v42 + 55) & 0xFFFFFFFFFFFFFFF8;
  long long v47 = *(_OWORD *)v46;
  *(void *)(v45 + 16) = *(void *)(v46 + 16);
  *(_OWORD *)unint64_t v45 = v47;
  v13[v21] = 1;
LABEL_56:
  v13[v21 + 1] = v14[v21 + 1];
  return a1;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance LazyHGrid<A>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t assignWithCopy for Section(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 24;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 40) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 40);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 24;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 24))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 40) + 7;
  unint64_t v21 = (v20 + v18) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (v20 + v19) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = *(void *)(v22 + 8);
  if (*(void *)(v21 + 8) < 0xFFFFFFFFuLL)
  {
    if (v23 >= 0xFFFFFFFF)
    {
      *(void *)unint64_t v21 = *(void *)v22;
      *(void *)(v21 + 8) = *(void *)(v22 + 8);
      *(unsigned char *)(v21 + 16) = *(unsigned char *)(v22 + 16);
      swift_retain();
      swift_retain();
      return a1;
    }
LABEL_7:
    long long v24 = *(_OWORD *)v22;
    *(unsigned char *)(v21 + 16) = *(unsigned char *)(v22 + 16);
    *(_OWORD *)unint64_t v21 = v24;
    return a1;
  }
  if (v23 < 0xFFFFFFFF)
  {
    swift_release();
    swift_release();
    goto LABEL_7;
  }
  *(void *)unint64_t v21 = *(void *)v22;
  swift_retain();
  swift_release();
  *(void *)(v21 + 8) = *(void *)(v22 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(v21 + 16) = *(unsigned char *)(v22 + 16);
  return a1;
}

uint64_t closure #2 in BarAppearanceBridge.didUpdate(bar:barUpdates:)()
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.setter();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    return static Published.subscript.setter();
  }
  return result;
}

uint64_t type metadata completion function for DraggingPreviewModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for LabeledContent()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DefaultButtonStyle()
{
  return &type metadata for DefaultButtonStyle;
}

void closure #1 in UIHostingViewBase.sceneActivationStateDidChange(with:)(uint64_t a1)
{
  *(unsigned char *)(a1 + 221) = 0;
  unint64_t v2 = (void *)MEMORY[0x18C119DF0](a1 + 256);
  uint64_t v3 = v2;
  if (v2)
  {
    id v4 = objc_msgSend(v2, sel_activationState);
  }
  else
  {
    id v4 = 0;
  }
  *(void *)(a1 + 232) = v4;
  *(unsigned char *)(a1 + 240) = v3 == 0;
}

uint64_t type metadata completion function for NavigationStackCoordinator()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for ContainerBackground.ConcreteVersionSeedTracker()
{
  return swift_initClassMetadata2();
}

uint64_t getEnumTagSinglePayload for TextFieldState(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 92)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t base witness table accessor for Equatable in UIApplicationLaunchOptionsKey()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UIApplicationLaunchOptionsKey and conformance UIApplicationLaunchOptionsKey, type metadata accessor for UIApplicationLaunchOptionsKey);
}

uint64_t base witness table accessor for Equatable in _UIImageNamedColorStyle()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode((unint64_t *)&lazy protocol witness table cache variable for type _UIImageNamedColorStyle and conformance _UIImageNamedColorStyle, type metadata accessor for _UIImageNamedColorStyle);
}

uint64_t base witness table accessor for Equatable in UISplitViewControllerColumn()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UISplitViewControllerColumn and conformance UISplitViewControllerColumn, type metadata accessor for UISplitViewControllerColumn);
}

uint64_t base witness table accessor for Equatable in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
}

uint64_t lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type UISplitViewControllerColumn and conformance UISplitViewControllerColumn(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for UISplitViewControllerColumn(uint64_t a1)
{
}

void type metadata accessor for _UIImageNamedColorStyle(uint64_t a1)
{
}

void type metadata accessor for UIApplicationLaunchOptionsKey(uint64_t a1)
{
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance LazyTransaction(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LazyTransaction and conformance LazyTransaction();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t type metadata accessor for AnyNavigationLinkPresentedValueStorageBase()
{
  return self;
}

uint64_t base witness table accessor for _AttributeBody in AccessibilityChildrenModifier<A>.BridgedAttachment()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in InternalModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for AnyListSelection.StorageBase()
{
  return self;
}

ValueMetadata *type metadata accessor for AsyncImagePhase()
{
  return &type metadata for AsyncImagePhase;
}

uint64_t getEnumTagSinglePayload for LazyHGrid(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 32) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 32) & ~v6);
      }
      uint64_t v15 = *(void *)a1;
      if (*(void *)a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

uint64_t destroy for ContentShapeResponderFilter(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance NavigationSplitStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF88](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ToggleStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF78](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t type metadata accessor for _TuplePickerContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:)@<X0>(uint64_t a1@<X0>, Swift::Int a2@<X1>, void *a3@<X8>)
{
  return closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:)(a1, a2, *(void *)(v3 + 88), *(void *)(v3 + 96), *(void *)(v3 + 104), *(void *)(v3 + 112), *(void *)(v3 + 16), *(void *)(v3 + 24), a3, *(void *)(v3 + 32), *(void *)(v3 + 40), *(char **)(v3 + 48), *(char **)(v3 + 56), *(void *)(v3 + 64), *(char **)(v3 + 72), *(void *)(v3 + 80));
}

uint64_t closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:)@<X0>(uint64_t a1@<X0>, Swift::Int a2@<X1>, uint64_t a3@<X2>, Swift::Int a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, char *a12, char *a13, uint64_t a14, char *a15, uint64_t a16)
{
  uint64_t v125 = a7;
  uint64_t v126 = a8;
  uint64_t v122 = a6;
  uint64_t v116 = a5;
  Swift::Int v130 = a2;
  uint64_t v131 = a1;
  long long v120 = a9;
  uint64_t v114 = a14;
  uint64_t v124 = a10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v127 = type metadata accessor for CollectionDifference();
  uint64_t v115 = *(void *)(v127 - 8);
  MEMORY[0x1F4188790](v127);
  long long v123 = (char *)&v113 - v19;
  uint64_t v128 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v20);
  unsigned int v118 = (char *)&v113 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  unint64_t v117 = (char *)&v113 - v23;
  MEMORY[0x1F4188790](v24);
  unint64_t v119 = (char *)&v113 - v25;
  MEMORY[0x1F4188790](v26);
  unint64_t v133 = (char *)&v113 - v27;
  uint64_t v141 = Dictionary.init()();
  uint64_t v132 = a16;
  uint64_t v135 = (char *)type metadata accessor for Dictionary();
  Dictionary.reserveCapacity(_:)(a4);
  uint64_t v129 = a3;
  Swift::Int v121 = a4;
  uint64_t result = MEMORY[0x18C115740](a3, a4, AssociatedTypeWitness);
  if (result != v29)
  {
    uint64_t v30 = result;
    uint64_t v31 = v29;
    if (v29 < result)
    {
      __break(1u);
    }
    else if (result < v29)
    {
      unint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v128 + 16);
      uint64_t v33 = *(void *)(v128 + 72);
      uint64_t v34 = v129 + result * v33;
      long long v35 = v133;
      do
      {
        v32(v35, v34, AssociatedTypeWitness);
        uint64_t v138 = v30;
        LOBYTE(v139) = 0;
        Dictionary.subscript.setter();
        v34 += v33;
        ++v30;
      }
      while (v31 != v30);
      goto LABEL_6;
    }
    __break(1u);
    goto LABEL_70;
  }
LABEL_6:
  uint64_t v140 = Dictionary.init()();
  Swift::Int v36 = v130;
  Dictionary.reserveCapacity(_:)(v130);
  uint64_t result = MEMORY[0x18C115740](v131, v36, AssociatedTypeWitness);
  if (result != v37)
  {
    uint64_t v38 = result;
    uint64_t v39 = v37;
    if (v37 >= result)
    {
      if (result < v37)
      {
        int v134 = *(char **)(v128 + 16);
        uint64_t v40 = *(void *)(v128 + 72);
        uint64_t v41 = v131 + result * v40;
        unint64_t v42 = v133;
        do
        {
          ((void (*)(char *, uint64_t, uint64_t))v134)(v42, v41, AssociatedTypeWitness);
          uint64_t v138 = v38;
          LOBYTE(v139) = 0;
          Dictionary.subscript.setter();
          v41 += v40;
          ++v38;
        }
        while (v39 != v38);
        goto LABEL_11;
      }
LABEL_71:
      __break(1u);
      return result;
    }
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
LABEL_11:
  uint64_t v43 = swift_bridgeObjectRetain();
  uint64_t v44 = AssociatedTypeWitness;
  uint64_t v45 = v132;
  uint64_t v46 = MEMORY[0x18C1153A0](v43, AssociatedTypeWitness, MEMORY[0x1E4FBB550], v132);
  swift_bridgeObjectRelease();
  Swift::Int v47 = v121;
  if (v46 != v121
    || (uint64_t v48 = swift_bridgeObjectRetain(),
        uint64_t v49 = MEMORY[0x18C1153A0](v48, AssociatedTypeWitness, MEMORY[0x1E4FBB550], v45),
        swift_bridgeObjectRelease(),
        v49 != v130))
  {
    int v134 = a15;
    uint64_t v135 = a13;
    unint64_t v133 = a12;
    uint64_t v128 = a11;
    uint64_t v138 = v131;
    Swift::Int v139 = v130;
    uint64_t v136 = v129;
    Swift::Int v137 = v47;
    type metadata accessor for UnsafeBufferPointer();
    swift_getWitnessTable();
    BidirectionalCollection<>.difference<A>(from:)();
    uint64_t v138 = CollectionDifference.removals.getter();
    MEMORY[0x1F4188790](v138);
    uint64_t v56 = v126;
    *(&v113 - 10) = v125;
    *(&v113 - 9) = v56;
    *(&v113 - 8) = v124;
    *(&v113 - 7) = a11;
    *(&v113 - 6) = (uint64_t)a12;
    *(&v113 - 5) = (uint64_t)a13;
    uint64_t v57 = v114;
    *(&v113 - 4) = v114;
    *(&v113 - 3) = (uint64_t)a15;
    uint64_t v58 = v116;
    *(&v113 - 2) = v45;
    *(&v113 - 1) = v58;
    type metadata accessor for CollectionDifference.Change();
    uint64_t v59 = type metadata accessor for Array();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v131 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:), (uint64_t)(&v113 - 12), v59, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v61);
    swift_bridgeObjectRelease();
    uint64_t v62 = v127;
    uint64_t v63 = v123;
    uint64_t v138 = CollectionDifference.insertions.getter();
    MEMORY[0x1F4188790](v138);
    uint64_t v64 = v126;
    *(&v113 - 10) = v125;
    *(&v113 - 9) = v64;
    uint64_t v65 = v128;
    *(&v113 - 8) = v124;
    *(&v113 - 7) = v65;
    uint64_t v66 = v135;
    *(&v113 - 6) = (uint64_t)v133;
    *(&v113 - 5) = (uint64_t)v66;
    uint64_t v67 = v134;
    *(&v113 - 4) = v57;
    *(&v113 - 3) = (uint64_t)v67;
    *(&v113 - 2) = v132;
    *(&v113 - 1) = v58;
    uint64_t v69 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:), (uint64_t)(&v113 - 12), v59, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v68);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v115 + 8))(v63, v62);
    uint64_t v70 = v120;
    *long long v120 = v131;
    v70[1] = v69;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v50 = UnsafeBufferPointer.endIndex.getter();
  uint64_t v51 = UnsafeBufferPointer.endIndex.getter();
  uint64_t v52 = v51;
  LODWORD(v130) = v51 > 0;
  if (v50 <= 0 && v51 < 1)
  {
    uint64_t v53 = (char *)MEMORY[0x1E4FBC860];
    int v54 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v55 = v122;
    goto LABEL_63;
  }
  uint64_t v71 = 0;
  int v72 = 0;
  uint64_t v73 = v128 + 16;
  uint64_t v126 = v128 + 8;
  int v54 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v53 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v55 = v122;
  uint64_t v127 = v128 + 16;
  Swift::Int v121 = v50;
  uint64_t v116 = v51;
LABEL_18:
  int v134 = v53;
  while (2)
  {
    long long v123 = v72;
    while (1)
    {
      uint64_t v74 = *((void *)v54 + 2);
      uint64_t v75 = *((void *)v53 + 2);
      if (v75 + v74 > v55)
      {
        uint64_t v53 = v134;
        goto LABEL_63;
      }
      if ((char *)v52 == v72)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v74 + 1, 1, v54);
        }
        goto LABEL_30;
      }
      if (v50 == v71)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int v134 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v75 + 1, 1, v134);
        }
        unint64_t v97 = *((void *)v134 + 2);
        unint64_t v96 = *((void *)v134 + 3);
        uint64_t v73 = v127;
        if (v97 >= v96 >> 1)
        {
          unsigned int v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v96 > 1), v97 + 1, 1, v134);
          uint64_t v73 = v127;
          int v134 = v109;
        }
        uint64_t v98 = v134;
        *((void *)v134 + 2) = v97 + 1;
        uint64_t v53 = v98;
        *(void *)&v98[8 * v97 + 32] = v72++;
        uint64_t v71 = v50;
        goto LABEL_54;
      }
      uint64_t v135 = v54;
      uint64_t v76 = v128;
      uint64_t v77 = *(void *)(v128 + 72);
      uint64_t v125 = v71;
      uint64_t v78 = v129 + v77 * v71;
      uint64_t v79 = v72;
      uint64_t v80 = v44;
      uint64_t v81 = *(void (**)(void))(v128 + 16);
      uint64_t v82 = v73;
      ((void (*)(char *, uint64_t, uint64_t))v81)(v133, v78, v44);
      unsigned int v83 = v119;
      ((void (*)(char *, uint64_t, uint64_t))v81)(v119, v131 + v77 * (void)v79, v44);
      uint64_t v84 = v132;
      LODWORD(v124) = dispatch thunk of static Equatable.== infix(_:_:)();
      unsigned int v85 = *(void (**)(char *, uint64_t))(v76 + 8);
      unint64_t v86 = v133;
      v85(v83, v80);
      v85(v86, v80);
      if (v124) {
        break;
      }
      unint64_t v87 = v117;
      ((void (*)(char *, uint64_t, uint64_t))v81)(v117, v78, v80);
      MEMORY[0x18C115450](&v138, v87, v140, v80, MEMORY[0x1E4FBB550], v84);
      uint64_t v88 = v138;
      int v89 = v139;
      unsigned int v90 = v118;
      v81();
      MEMORY[0x18C115450](&v136, v90, v141, v80, MEMORY[0x1E4FBB550], v84);
      uint64_t v44 = v80;
      unsigned int v91 = v90;
      if (v89 != 1)
      {
        uint64_t v99 = v136;
        int v100 = v137;
        v85(v91, v80);
        v85(v87, v80);
        uint64_t v55 = v122;
        int v72 = v123;
        if (v100 == 1)
        {
          unint64_t v101 = v134;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v50 = v121;
          uint64_t v52 = v116;
          int v54 = v135;
          uint64_t v71 = v125;
          if (isUniquelyReferenced_nonNull_native) {
            goto LABEL_45;
          }
LABEL_61:
          unint64_t v101 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v101 + 2) + 1, 1, v101);
LABEL_45:
          unint64_t v104 = *((void *)v101 + 2);
          unint64_t v103 = *((void *)v101 + 3);
          unint64_t v105 = v101;
          if (v104 >= v103 >> 1) {
            unint64_t v105 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v103 > 1), v104 + 1, 1, v101);
          }
          *((void *)v105 + 2) = v104 + 1;
          uint64_t v53 = v105;
          *(void *)&v105[8 * v104 + 32] = v72++;
          uint64_t v73 = v127;
LABEL_54:
          LODWORD(v130) = (uint64_t)v72 < v52;
          if (v71 < v50 || (uint64_t)v72 < v52) {
            goto LABEL_18;
          }
          goto LABEL_63;
        }
        uint64_t v50 = v121;
        uint64_t v52 = v116;
        int v54 = v135;
        uint64_t v71 = v125;
        if (v88 < (uint64_t)v123)
        {
LABEL_49:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            int v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v54 + 2) + 1, 1, v54);
          }
          uint64_t v73 = v127;
          unint64_t v107 = *((void *)v54 + 2);
          unint64_t v106 = *((void *)v54 + 3);
          if (v107 >= v106 >> 1)
          {
            unint64_t v110 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v106 > 1), v107 + 1, 1, v54);
            uint64_t v73 = v127;
            int v54 = v110;
          }
          *((void *)v54 + 2) = v107 + 1;
          *(void *)&v54[8 * v107 + 32] = v71++;
          uint64_t v53 = v134;
          goto LABEL_54;
        }
        uint64_t v108 = v99 - v125;
        if (v99 >= v125)
        {
          unint64_t v101 = v134;
          if (v108 < v88 - (uint64_t)v123) {
            goto LABEL_49;
          }
        }
        else
        {
          unint64_t v101 = v134;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_61;
        }
        goto LABEL_45;
      }
      v85(v90, v80);
      v85(v87, v80);
      char v92 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v55 = v122;
      int v72 = v123;
      if (v92)
      {
        uint64_t v50 = v121;
        uint64_t v52 = v116;
        int v54 = v135;
      }
      else
      {
        int v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v135 + 2) + 1, 1, v135);
        uint64_t v50 = v121;
        uint64_t v52 = v116;
      }
      uint64_t v71 = v125;
LABEL_30:
      unint64_t v94 = *((void *)v54 + 2);
      unint64_t v93 = *((void *)v54 + 3);
      uint64_t v73 = v127;
      if (v94 >= v93 >> 1)
      {
        unint64_t v95 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v93 > 1), v94 + 1, 1, v54);
        uint64_t v73 = v127;
        int v54 = v95;
      }
      *((void *)v54 + 2) = v94 + 1;
      *(void *)&v54[8 * v94 + 32] = v71++;
      uint64_t v53 = v134;
      if (!((v71 < v50) | v130 & 1)) {
        goto LABEL_63;
      }
    }
    uint64_t v71 = v125 + 1;
    uint64_t v52 = v116;
    LODWORD(v130) = (uint64_t)(v123 + 1) < v116;
    uint64_t v50 = v121;
    uint64_t v44 = v80;
    int v72 = v123 + 1;
    uint64_t v53 = v134;
    int v54 = v135;
    uint64_t v73 = v82;
    uint64_t v55 = v122;
    if (v125 + 1 < v121 || (uint64_t)v72 < v116) {
      continue;
    }
    break;
  }
LABEL_63:
  if (*((void *)v53 + 2) + *((void *)v54 + 2) <= v55)
  {
    unint64_t v112 = v120;
    *long long v120 = v54;
    v112[1] = v53;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v111 = v120;
    *long long v120 = 0;
    v111[1] = 0;
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void type metadata accessor for _ContiguousArrayStorage<CollectionChanges<Int, Int>.Element>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<CollectionChanges<Int, Int>.Element>)
  {
    type metadata accessor for ListUpdate<Int, Int>(255, &lazy cache variable for type metadata for CollectionChanges<Int, Int>.Element, (uint64_t (*)(void, void *))type metadata accessor for CollectionChanges.Element);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CollectionChanges<Int, Int>.Element>);
    }
  }
}

void type metadata accessor for ListUpdate<Int, Int>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void *))
{
  if (!*a2)
  {
    v6[0] = MEMORY[0x1E4FBB550];
    v6[1] = MEMORY[0x1E4FBB550];
    uint64_t v6[2] = MEMORY[0x1E4FBB568];
    v6[3] = MEMORY[0x1E4FBB568];
    unint64_t v4 = a3(0, v6);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void *assignWithTake for SearchFieldConfiguration(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v7 = *(int *)(v6 + 32);
  int v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *int v8 = *((unsigned char *)a2 + v7);
  v8[1] = *((unsigned char *)a2 + v7 + 1);
  *((_WORD *)v8 + 1) = *(_WORD *)((char *)a2 + v7 + 2);
  v8[8] = *((unsigned char *)a2 + v7 + 8);
  *((_DWORD *)v8 + 1) = *(_DWORD *)((char *)a2 + v7 + 4);
  char v10 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v11 = v10[9];
  uint64_t v12 = &v8[v11];
  unsigned int v13 = &v9[v11];
  uint64_t v14 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  v8[v10[10]] = v9[v10[10]];
  uint64_t v15 = v10[11];
  uint64_t v16 = &v8[v15];
  uint64_t v17 = &v9[v15];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  uint64_t v18 = a3[6];
  uint64_t v19 = (uint64_t)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  int v21 = *((unsigned __int8 *)a1 + v18 + 8);
  if (v21 != 255)
  {
    int v22 = v20[8];
    if (v22 != 255)
    {
      uint64_t v23 = *(void *)v19;
      *(void *)uint64_t v19 = *(void *)v20;
      *(unsigned char *)(v19 + 8) = v22 & 1;
      outlined consume of PlatformItemCollection.Storage(v23, v21 & 1);
      goto LABEL_6;
    }
    outlined destroy of PlatformItemCollection(v19);
  }
  *(void *)uint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = v20[8];
LABEL_6:
  uint64_t v24 = a3[8];
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  uint64_t v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  char v27 = v26[16];
  uint64_t v28 = *(void *)((char *)a1 + v24);
  uint64_t v29 = *(void *)((char *)a1 + v24 + 8);
  char v30 = *((unsigned char *)a1 + v24 + 16);
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
  unsigned char v25[16] = v27;
  outlined consume of Text.Storage(v28, v29, v30);
  *((void *)v25 + 3) = *((void *)v26 + 3);
  swift_bridgeObjectRelease();
  return a1;
}

double static DetachDeferredAccessibilityAttachmentModifier._makeView(modifier:inputs:body:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, double *a4@<X8>)
{
  int v5 = *((_DWORD *)a2 + 2);
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[5];
  uint64_t v8 = a2[6];
  int v9 = *((_DWORD *)a2 + 20);
  uint64_t v12 = *a2;
  int v13 = v5;
  uint64_t v14 = v6;
  long long v15 = *(_OWORD *)(a2 + 3);
  uint64_t v16 = v7;
  uint64_t v17 = v8;
  long long v18 = *(_OWORD *)(a2 + 7);
  int v11 = v18;
  uint64_t v19 = a2[9];
  int v20 = v9;
  a3(&v21, a1, &v12);
  uint64_t v12 = v8;
  int v13 = v11;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    LOBYTE(v12) = 1;
    _ViewOutputs.subscript.setter();
  }
  *(void *)a4 = v21;
  double result = v22;
  a4[1] = v22;
  return result;
}

double static FocusStateBindingModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v62 = a4;
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  int v48 = *a1;
  int v8 = *(_DWORD *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  unsigned int v10 = *(_DWORD *)(a2 + 24);
  unsigned int v11 = *(_DWORD *)(a2 + 28);
  unsigned int v12 = *(_DWORD *)(a2 + 32);
  unsigned int v13 = *(_DWORD *)(a2 + 36);
  uint64_t v14 = *(void *)(a2 + 40);
  uint64_t v15 = *(void *)(a2 + 48);
  int v17 = *(_DWORD *)(a2 + 56);
  int v16 = *(_DWORD *)(a2 + 60);
  int v18 = *(_DWORD *)(a2 + 64);
  int v19 = *(_DWORD *)(a2 + 68);
  int v20 = *(_DWORD *)(a2 + 72);
  int v21 = *(_DWORD *)(a2 + 76);
  int v22 = *(_DWORD *)(a2 + 80);
  uint64_t v23 = *(void *)a2;
  *(void *)&long long v88 = *(void *)a2;
  int v24 = v8;
  DWORD2(v88) = v8;
  uint64_t v25 = v9;
  *(void *)&long long v89 = v9;
  unsigned int v66 = v12;
  unsigned int v67 = v10;
  *((void *)&v89 + 1) = __PAIR64__(v11, v10);
  int v59 = v16;
  unsigned int v60 = v11;
  unint64_t v90 = __PAIR64__(v13, v12);
  int v64 = v18;
  unsigned int v65 = v13;
  uint64_t v26 = v14;
  uint64_t v91 = v14;
  uint64_t v92 = v15;
  int v93 = v17;
  int v94 = v16;
  int v95 = v18;
  int v96 = v19;
  int v57 = v22;
  int v58 = v19;
  int v63 = v20;
  int v97 = v20;
  int v98 = v21;
  int v54 = v21;
  int v99 = v22;
  a3(&v68);
  *(void *)&long long v88 = v15;
  DWORD2(v88) = v17;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    Swift::Int v47 = a6;
    uint64_t v56 = a5;
    type metadata accessor for FocusStateBindingResponder();
    uint64_t v27 = swift_allocObject();
    swift_weakInit();
    *(void *)(v27 + 224) = MEMORY[0x1E4FBC860];
    uint64_t v49 = v23;
    swift_retain();
    uint64_t v50 = v25;
    swift_retain();
    uint64_t v28 = v26;
    int v29 = v17;
    int v61 = v17;
    uint64_t v30 = v28;
    uint64_t v51 = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    ViewTransform.init()();
    *(void *)(v27 + 272) = 0;
    *(void *)(v27 + 280) = 0;
    *(unsigned char *)(v27 + 288) = 1;
    *(void *)(v27 + 296) = 0;
    swift_release();
    *(void *)&long long v88 = v23;
    int v52 = v24;
    DWORD2(v88) = v24;
    *(void *)&long long v89 = v25;
    *((void *)&v89 + 1) = __PAIR64__(v60, v67);
    unint64_t v90 = __PAIR64__(v65, v66);
    uint64_t v91 = v30;
    uint64_t v92 = v15;
    int v93 = v29;
    int v94 = v59;
    uint64_t v53 = v15;
    int v95 = v64;
    int v96 = v58;
    int v97 = v63;
    int v98 = v54;
    int v99 = v57;
    uint64_t v55 = DefaultLayoutViewResponder.init(inputs:)();
    *(void *)&long long v88 = v49;
    DWORD2(v88) = v24;
    *(void *)&long long v89 = v50;
    *((void *)&v89 + 1) = __PAIR64__(v60, v67);
    unint64_t v90 = __PAIR64__(v65, v66);
    uint64_t v91 = v51;
    uint64_t v92 = v15;
    int v93 = v61;
    int v94 = v59;
    int v95 = v64;
    int v96 = v58;
    int v97 = v63;
    int v98 = v54;
    int v99 = v57;
    uint64_t v72 = v68;
    double v73 = v69;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    specialized FocusStateBindingResponderFilter.init(inputs:outputs:responder:)(v55, (uint64_t)v70);
    long long v88 = v70[0];
    long long v89 = v70[1];
    unint64_t v90 = v71;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    _sSay7SwiftUI13ViewResponderCGMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type FocusStateBindingResponderFilter and conformance FocusStateBindingResponderFilter();
    int v46 = Attribute.init<A>(body:value:flags:update:)();
    outlined release of TouchEvent((uint64_t)v70);
    LODWORD(v88) = v48;
    type metadata accessor for FocusStateBindingModifier();
    type metadata accessor for _GraphValue();
    int v48 = _GraphValue.value.getter();
    lazy protocol witness table accessor for type FocusedItemInputKey and conformance FocusedItemInputKey();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_retain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    unsigned int v45 = v88;
    *(void *)&long long v88 = v49;
    DWORD2(v88) = v24;
    *(void *)&long long v89 = v50;
    *((void *)&v89 + 1) = __PAIR64__(v60, v67);
    unint64_t v90 = __PAIR64__(v65, v66);
    uint64_t v91 = v51;
    uint64_t v92 = v15;
    int v93 = v61;
    int v94 = v59;
    int v95 = v64;
    int v96 = v58;
    int v97 = v63;
    int v98 = v54;
    int v99 = v57;
    swift_getKeyPath();
    unsigned int v44 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    *(void *)&long long v88 = v49;
    DWORD2(v88) = v24;
    *(void *)&long long v89 = v50;
    *((void *)&v89 + 1) = __PAIR64__(v60, v67);
    unsigned int v31 = v60;
    unint64_t v90 = __PAIR64__(v65, v66);
    uint64_t v91 = v51;
    uint64_t v92 = v15;
    int v93 = v61;
    int v94 = v59;
    int v95 = v64;
    int v96 = v58;
    int v97 = v63;
    int v98 = v54;
    int v32 = v54;
    int v33 = v57;
    int v99 = v57;
    swift_getKeyPath();
    LODWORD(v27) = _ViewInputs.mapEnvironment<A>(_:)();
    uint64_t v34 = swift_release();
    LODWORD(v88) = v48;
    *((void *)&v88 + 1) = v55;
    LODWORD(v30) = v61;
    *(void *)&long long v89 = __PAIR64__(v44, v45);
    DWORD2(v89) = v27;
    BYTE12(v89) = 0;
    MEMORY[0x1F4188790](v34);
    uint64_t v42 = type metadata accessor for FocusStateBindingModifier.ListItemFilter();
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for Attribute<FocusStoreList>(0, &lazy cache variable for type metadata for Attribute<FocusStoreList>, (uint64_t)&type metadata for FocusStoreList, MEMORY[0x1E4F4E740]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v88, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_18, (uint64_t)v41, v42, MEMORY[0x1E4FBC248], v35, MEMORY[0x1E4FBC278], v36);
    swift_release();
    int v37 = v72;
    uint64_t v72 = v49;
    LODWORD(v73) = v52;
    uint64_t v74 = v50;
    unsigned int v75 = v67;
    unsigned int v76 = v31;
    int v38 = v30;
    unsigned int v77 = v66;
    unsigned int v78 = v65;
    uint64_t v79 = v51;
    uint64_t v80 = v15;
    int v81 = v30;
    int v82 = v59;
    int v83 = v64;
    int v84 = v58;
    LODWORD(v30) = v46;
    int v85 = v63;
    int v86 = v32;
    int v87 = v33;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    UIKitHostedFocusItemLifecycle.init(inputs:responder:)(&v72, v30, (uint64_t)&v88);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type UIKitHostedFocusItemLifecycle and conformance UIKitHostedFocusItemLifecycle();
    Attribute.init<A>(body:value:flags:update:)();
    outlined destroy of UIKitHostedFocusItemLifecycle((uint64_t)&v88);
    static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.transactional.getter();
    AGGraphSetFlags();
    LOBYTE(v88) = 0;
    uint64_t v39 = _ViewOutputs.subscript.setter();
    *(void *)&long long v88 = v15;
    DWORD2(v88) = v38;
    MEMORY[0x1F4188790](v39);
    v41[0] = v62;
    v41[1] = v56;
    LODWORD(v42) = v37;
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_release();
    swift_bridgeObjectRelease();
    a6 = v47;
  }
  *a6 = v68;
  double result = v69;
  *((double *)a6 + 1) = v69;
  return result;
}

uint64_t View.focused<A>(_:equals:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v24 = a5;
  uint64_t v22 = a6;
  uint64_t v23 = a3;
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  uint64_t v7 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for FocusState.Binding();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  unsigned int v13 = (char *)&v20 - v12;
  uint64_t v14 = type metadata accessor for FocusStateBindingModifier();
  uint64_t v15 = *(void *)(v14 - 8);
  double v16 = MEMORY[0x1F4188790](v14);
  int v18 = (char *)&v20 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v13, v20, v10, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v21, a4);
  FocusStateBindingModifier.init(binding:value:)((uint64_t)v13, (uint64_t)v9, a4, (uint64_t)v18);
  MEMORY[0x18C113660](v18, v23, v14, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t FocusStateBindingModifier.init(binding:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for FocusState.Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a4, a1, v8);
  uint64_t v9 = a4 + *(int *)(type metadata accessor for FocusStateBindingModifier() + 36);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32);

  return v10(v9, a2, a3);
}

uint64_t FocusStateBindingModifier.ListItemFilter.updateValue()(uint64_t a1)
{
  uint64_t v2 = v1;
  v69[8] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v56 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  int v5 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v61 = type metadata accessor for FocusState.Binding();
  uint64_t v62 = *(void *)(v61 - 8);
  MEMORY[0x1F4188790](v61);
  uint64_t v64 = (uint64_t)&v48 - v8;
  uint64_t v9 = type metadata accessor for FocusStateBindingModifier();
  int v58 = *(uint64_t (**)())(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v55 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  int v57 = (char *)&v48 - v12;
  uint64_t v13 = *(void *)(v1 + 8);
  uint64_t v14 = *(void *)(v1 + 16);
  AGGraphGetValue();
  int v59 = v15;
  type metadata accessor for Attribute<FocusStoreList>(0, &lazy cache variable for type metadata for [Namespace.ID], MEMORY[0x1E4F41808], MEMORY[0x1E4FBB320]);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  int v18 = v17;
  uint64_t v63 = *Value;
  uint64_t v54 = v3;
  uint64_t v60 = v7;
  FocusStateBindingModifier.ListItemFilter.focusItem.getter(v14, (uint64_t)v69);
  if (v69[5] == 1 && v69[6] == 1)
  {
    swift_bridgeObjectRetain();
    outlined destroy of FocusItem??((uint64_t)v69);
    if ((*(unsigned char *)(v1 + 28) & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_8;
  }
  outlined init with take of FocusItem?((uint64_t)v69, (uint64_t)v65, (uint64_t)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Attribute<FocusStoreList>);
  if (v66 || v67 != 1)
  {
    swift_bridgeObjectRetain();
    char v19 = FocusItem.inFocusedResponderChain(_:)(v13);
    outlined destroy of FocusItem((uint64_t)v65);
    if ((v19 & 1) != *(unsigned char *)(v2 + 28)) {
      goto LABEL_10;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOhTm_0((uint64_t)v65, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, MEMORY[0x1E4FBB718]);
    if (*(unsigned char *)(v1 + 28))
    {
LABEL_8:
      char v19 = 0;
LABEL_10:
      *(unsigned char *)(v2 + 28) = v19 & 1;
LABEL_13:
      uint64_t v20 = AGGraphGetValue();
      uint64_t v50 = v5;
      uint64_t v21 = v58;
      uint64_t v22 = (char *)v58 + 16;
      uint64_t v23 = (void (*)(char *, uint64_t, uint64_t))*((void *)v58 + 2);
      uint64_t v24 = v57;
      v23(v57, v20, v9);
      int v59 = v22;
      uint64_t v25 = *(void (**)(uint64_t, char *, uint64_t))(v62 + 16);
      uint64_t v52 = v62 + 16;
      uint64_t v53 = v25;
      v25(v64, v24, v61);
      uint64_t v26 = (void (*)(char *, uint64_t))*((void *)v21 + 1);
      v26(v24, v9);
      uint64_t v27 = AGGraphGetValue();
      uint64_t v49 = v2;
      uint64_t v28 = v55;
      v23(v55, v27, v9);
      uint64_t v51 = v23;
      int v29 = *(void (**)(char *, char *, uint64_t))(v56 + 16);
      uint64_t v30 = (uint64_t)v50;
      uint64_t v31 = v54;
      v29(v50, &v28[*(int *)(v9 + 36)], v54);
      v26(v28, v9);
      int v58 = FocusStateBindingUpdateAction.init<A>(binding:value:)(v64, v30, v31, v60);
      uint64_t v56 = v32;
      uint64_t v33 = v49;
      uint64_t v34 = AGGraphGetValue();
      v23(v24, v34, v9);
      v29((char *)v30, &v24[*(int *)(v9 + 36)], v31);
      v26(v24, v9);
      uint64_t v35 = *(void *)(v33 + 8);
      _sSay7SwiftUI13ViewResponderCGMaTm_4(0, &lazy cache variable for type metadata for FocusBridge?, (uint64_t (*)(uint64_t))type metadata accessor for FocusBridge, MEMORY[0x1E4FBB718]);
      uint64_t v36 = (uint64_t *)AGGraphGetValue();
      int v37 = specialized FocusStoreUpdateAction.init<A>(value:responder:bridge:focusScopes:)(v30, v35, (uint64_t)&protocol witness table for FocusStateBindingResponder, *v36, v63, v31, v60);
      uint64_t v63 = v38;
      DisplayList.Version.init(forUpdate:)();
      uint64_t v39 = v69[0];
      uint64_t v40 = AGGraphGetValue();
      v51(v24, v40, v9);
      uint64_t v41 = v64;
      uint64_t v42 = v61;
      v53(v64, v24, v61);
      v26(v24, v9);
      uint64_t v43 = v42;
      uint64_t v44 = v41;
      uint64_t v45 = FocusState.Binding.propertyID.getter();
      (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v44, v43);
      LOBYTE(v28) = *(unsigned char *)(v33 + 28);
      v65[0] = v39;
      v65[1] = v45;
      v65[2] = v58;
      v65[3] = v56;
      v65[4] = v37;
      uint64_t v66 = v63;
      swift_weakInit();
      swift_weakInit();
      char v68 = (char)v28;
      type metadata accessor for Attribute<FocusStoreList>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<FocusStoreList.Item>, (uint64_t)&type metadata for FocusStoreList.Item, MEMORY[0x1E4FBBE00]);
      uint64_t v46 = swift_allocObject();
      *(_OWORD *)(v46 + 16) = xmmword_18834BB80;
      outlined init with take of FocusStoreList.Item((uint64_t)v65, v46 + 32);
      v65[0] = v46;
      AGGraphSetOutputValue();
      return swift_bridgeObjectRelease();
    }
  }
LABEL_11:
  if (((v59 | v18) & 1) != 0 || !AGGraphGetOutputValue()) {
    goto LABEL_13;
  }
  return swift_bridgeObjectRelease();
}

uint64_t destroy for AccessibilityFocusStoreListModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 15;
  swift_release();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v10 = v6 + 8;
  uint64_t v11 = *(void (**)(unint64_t, uint64_t))(v6 + 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  v11(((v4 & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & ~v7, v5);
  uint64_t v8 = (v7 + a1 + *(void *)(v10 + 56) + ((v7 + 16) & ~v7)) & ~v7;

  return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8, v5);
}

void *initializeWithCopy for AccessibilityFocusStoreListModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  uint64_t v9 = *(void *)(v7 - 8) + 16;
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(v7 - 8) + 80);
  uint64_t v11 = ((unint64_t)v5 + v10 + 8) & ~v10;
  uint64_t v12 = ((unint64_t)v6 + v10 + 8) & ~v10;
  swift_retain();
  swift_retain();
  v8(v11, v12, v7);
  uint64_t v13 = ((v10 + 16) & ~v10) + *(void *)(v9 + 48) + v10;
  v8(((unint64_t)a1 + v13) & ~v10, ((unint64_t)a2 + v13) & ~v10, v7);
  return a1;
}

uint64_t type metadata accessor for FocusStateBindingModifier()
{
  return __swift_instantiateGenericMetadata();
}

void *initializeWithCopy for FocusState.Binding(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 15;
  *a1 = v5;
  uint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v6 = *(void *)(v4 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  uint64_t v9 = *(unsigned __int8 *)(*(void *)(v7 - 8) + 80);
  uint64_t v10 = ((unint64_t)v6 + v9 + 8) & ~v9;
  unint64_t v11 = (v9 + 8 + (v4 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  swift_retain();
  swift_retain();
  v8(v10, v11, v7);
  return a1;
}

uint64_t (*FocusStateBindingUpdateAction.init<A>(binding:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v8 = type metadata accessor for FocusState.Binding();
  uint64_t v9 = *(void *)(v8 - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(a3 - 8);
  unint64_t v12 = (v10 + *(void *)(v9 + 64) + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a3;
  *(void *)(v13 + 24) = a4;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 32))(v13 + v10, a1, v8);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 32))(v13 + v12, a2, a3);
  return partial apply for closure #1 in FocusStateBindingUpdateAction.init<A>(binding:value:);
}

uint64_t type metadata accessor for FocusState.Binding()
{
  return __swift_instantiateGenericMetadata();
}

void FocusStateBindingModifier.ListItemFilter.focusItem.getter(int a1@<W2>, uint64_t a2@<X8>)
{
  if (*MEMORY[0x1E4F4E7A0] == a1)
  {
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(int64x2_t *)(a2 + 40) = vdupq_n_s64(1uLL);
    *(_DWORD *)(a2 + 56) = 0;
  }
  else
  {
    uint64_t v3 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
    type metadata accessor for Attribute<FocusStoreList>(0, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, MEMORY[0x1E4FBB718]);
    uint64_t Value = AGGraphGetValue();
    outlined init with copy of CollectionOfOne<FocusStoreList.Item>(Value, a2, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, v3);
  }
}

uint64_t (*specialized FocusStoreUpdateAction.init<A>(value:responder:bridge:focusScopes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))(uint64_t a1)
{
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 24) = a3;
  swift_weakInit();
  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  uint64_t v14 = *(void *)(a6 - 8);
  unint64_t v15 = (*(unsigned __int8 *)(v14 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v16 = (*(void *)(v14 + 64) + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  int v17 = (char *)swift_allocObject();
  *((void *)v17 + 2) = a6;
  *((void *)v17 + 3) = a7;
  *((void *)v17 + 4) = v12;
  *((void *)v17 + 5) = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 32))(&v17[v15], a1, a6);
  *(void *)&v17[v16] = a5;
  return partial apply for closure #1 in FocusStoreUpdateAction.init<A>(value:responder:bridge:focusScopes:);
}

uint64_t outlined init with take of FocusStoreList.Item(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithTake for FocusStoreList.Item(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_weakTakeInit();
  swift_weakTakeInit();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t destroy for FocusState.Binding(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 15;
  swift_release();
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = ((v3 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

uint64_t FocusState.Binding.propertyID.getter()
{
  type metadata accessor for FocusStoreLocation();
  if (swift_dynamicCastClass()) {
    return FocusStoreLocation.id.getter();
  }

  return type metadata accessor for FocusState.Binding.PrivateType();
}

uint64_t type metadata accessor for FocusStoreLocation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t FocusItem.inFocusedResponderChain(_:)(uint64_t a1)
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (swift_retain_n() == a1)
    {
LABEL_5:
      swift_release_n();
      swift_release();
      return 1;
    }
    else
    {
      while (1)
      {
        swift_retain();
        uint64_t v3 = dispatch thunk of ResponderNode.nextResponder.getter();
        swift_retain();
        swift_release_n();
        if (!v3) {
          break;
        }
        swift_release();
        if (v3 == a1) {
          goto LABEL_5;
        }
      }
      swift_release_n();
      return 0;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FocusStateBindingResponderFilter and conformance FocusStateBindingResponderFilter()
{
  unint64_t result = lazy protocol witness table cache variable for type FocusStateBindingResponderFilter and conformance FocusStateBindingResponderFilter;
  if (!lazy protocol witness table cache variable for type FocusStateBindingResponderFilter and conformance FocusStateBindingResponderFilter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusStateBindingResponderFilter and conformance FocusStateBindingResponderFilter);
  }
  return result;
}

uint64_t specialized FocusStateBindingResponderFilter.init(inputs:outputs:responder:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  int v9 = _ViewOutputs.viewResponders()();
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  int v8 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getKeyPath();
  int v7 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_retain();
  int v6 = _ViewInputs.transform.getter();
  int v5 = _ViewInputs.animatedPosition()();
  int v4 = _ViewInputs.animatedSize()();
  swift_getKeyPath();
  int v2 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *(_DWORD *)a2 = v9;
  *(_DWORD *)(a2 + 4) = v8;
  *(_DWORD *)(a2 + 8) = v7;
  *(void *)(a2 + 16) = a1;
  *(_DWORD *)(a2 + 24) = v6;
  *(_DWORD *)(a2 + 28) = v5;
  *(_DWORD *)(a2 + 32) = v4;
  *(_DWORD *)(a2 + 36) = v2;
  return result;
}

uint64_t type metadata accessor for FocusStateBindingModifier.ListItemFilter()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined release of TouchEvent(uint64_t a1)
{
  return a1;
}

uint64_t key path getter for EnvironmentValues.buttonBorderShape : EnvironmentValues@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonBorderShapeKey>, (uint64_t)&type metadata for ButtonBorderShapeKey, (uint64_t)&protocol witness table for ButtonBorderShapeKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonBorderShapeKey>, (uint64_t)&type metadata for ButtonBorderShapeKey, (uint64_t)&protocol witness table for ButtonBorderShapeKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_6(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonBorderShapeKey>, (uint64_t)&type metadata for ButtonBorderShapeKey, (uint64_t)&protocol witness table for ButtonBorderShapeKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance CoordinateSpaceTransform<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t static ToolbarItemPlacement.automatic.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }

  return outlined init with copy of ToolbarItemPlacement(a2, a3);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<MatchedTransitionSourceModifier>, MatchedTransitionSourceSourceMarkingEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<MatchedTransitionSourceModifier>, MatchedTransitionSourceSourceMarkingEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<MatchedTransitionSourceModifier>, MatchedTransitionSourceSourceMarkingEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<MatchedTransitionSourceModifier>, MatchedTransitionSourceSourceMarkingEffect>();
    lazy protocol witness table accessor for type EnvironmentReader<ModifiedContent<_ViewModifier_Content<MatchedTransitionSourceModifier>, MatchedTransitionSourceSourceMarkingEffect>> and conformance EnvironmentReader<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<MatchedTransitionSourceModifier> and conformance _ViewModifier_Content<A>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<MatchedTransitionSourceModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<MatchedTransitionSourceModifier>, MatchedTransitionSourceSourceMarkingEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type EnvironmentReader<ModifiedContent<_ViewModifier_Content<MatchedTransitionSourceModifier>, MatchedTransitionSourceSourceMarkingEffect>> and conformance EnvironmentReader<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<MatchedTransitionSourceModifier>, MatchedTransitionSourceSourceMarkingEffect>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<MatchedTransitionSourceModifier>, MatchedTransitionSourceSourceMarkingEffect>)
  {
    type metadata accessor for _ViewModifier_Content<MatchedTransitionSourceModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<MatchedTransitionSourceModifier>, MatchedTransitionSourceSourceMarkingEffect>);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<MatchedTransitionSourceModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<MatchedTransitionSourceModifier>)
  {
    lazy protocol witness table accessor for type MatchedTransitionSourceModifier and conformance MatchedTransitionSourceModifier();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<MatchedTransitionSourceModifier>);
    }
  }
}

void type metadata accessor for EnvironmentReader<ModifiedContent<_ViewModifier_Content<MatchedTransitionSourceModifier>, MatchedTransitionSourceSourceMarkingEffect>>()
{
  if (!lazy cache variable for type metadata for EnvironmentReader<ModifiedContent<_ViewModifier_Content<MatchedTransitionSourceModifier>, MatchedTransitionSourceSourceMarkingEffect>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<MatchedTransitionSourceModifier>, MatchedTransitionSourceSourceMarkingEffect>();
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<MatchedTransitionSourceModifier>, MatchedTransitionSourceSourceMarkingEffect> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for EnvironmentReader();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentReader<ModifiedContent<_ViewModifier_Content<MatchedTransitionSourceModifier>, MatchedTransitionSourceSourceMarkingEffect>>);
    }
  }
}

uint64_t key path getter for EnvironmentValues.withCurrentHostingController : EnvironmentValues(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t one-time initialization function for clarityUI()
{
  uint64_t result = MEMORY[0x18C115780](0xD00000000000002DLL, 0x800000018832B1C0);
  static UISceneSessionRole.clarityUI = result;
  return result;
}

uint64_t type metadata completion function for AccessibilityActionStorage()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for AccessibilityFocusStoreLocation()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeMetadata2();
    uint64_t v2 = type metadata accessor for Optional();
    if (v3 > 0x3F)
    {
      return v2;
    }
    else
    {
      type metadata accessor for AccessibilityFocusStore.Entry();
      uint64_t v0 = type metadata accessor for Optional();
      if (v4 <= 0x3F) {
        return swift_initClassMetadata2();
      }
    }
  }
  return v0;
}

void *specialized AccessibilityFocusStoreLocation.__allocating_init(host:resetValue:technologies:)(uint64_t a1, uint64_t a2, __int16 *a3)
{
  return specialized AccessibilityFocusStoreLocation.init(host:resetValue:technologies:)(a1, a2, a3);
}

void *specialized AccessibilityFocusStoreLocation.init(host:resetValue:technologies:)(uint64_t a1, uint64_t a2, __int16 *a3)
{
  uint64_t v5 = *v3;
  __int16 v6 = *a3;
  unint64_t v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  v3[2] = 0;
  v3[3] = v7;
  v3[4] = MEMORY[0x1E4FBC868];
  swift_weakInit();
  int v8 = (char *)v3 + *(void *)(class metadata base offset for AccessibilityFocusStoreLocation + *v3 + 48);
  uint64_t v9 = *(void *)(v5 + class metadata base offset for AccessibilityFocusStoreLocation);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56))(v8, 1, 1, TupleTypeMetadata2);
  uint64_t v11 = (char *)v3 + *(void *)(class metadata base offset for AccessibilityFocusStoreLocation + *v3 + 56);
  uint64_t v12 = type metadata accessor for AccessibilityFocusStore.Entry();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  *(void *)((char *)v3 + *(void *)(class metadata base offset for AccessibilityFocusStoreLocation + *v3 + 64)) = 0;
  *((unsigned char *)v3 + *(void *)(class metadata base offset for AccessibilityFocusStoreLocation + *v3 + 72)) = 0;
  swift_weakAssign();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))((char *)v3 + *(void *)(class metadata base offset for AccessibilityFocusStoreLocation + *v3 + 32), a2, v9);
  *(_WORD *)((char *)v3 + *(void *)(class metadata base offset for AccessibilityFocusStoreLocation + *v3 + 40)) = v6;
  return v3;
}

uint64_t AccessibilityFocusState.Box.update(property:phase:)(__int16 *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = v3;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = (void *)*((void *)v3 + 1);
  BOOL v30 = v10 == 0;
  int v29 = v10;
  if (v10)
  {
    uint64_t v11 = v10;
  }
  else
  {
    if (a1[1])
    {
      if (one-time initialization token for focusSupportingTechnologies != -1) {
        swift_once();
      }
      __int16 v12 = static AccessibilityTechnologies.focusSupportingTechnologies;
    }
    else
    {
      __int16 v13 = *a1;
      if (one-time initialization token for focusSupportingTechnologies != -1) {
        swift_once();
      }
      __int16 v12 = static AccessibilityTechnologies.focusSupportingTechnologies & v13;
    }
    uint64_t v14 = type metadata accessor for AccessibilityFocusState();
    if (*(void *)((char *)a1 + *(int *)(v14 + 40))
      && (type metadata accessor for AccessibilityFocusStoreLocation(), (uint64_t v15 = swift_dynamicCastClass()) != 0))
    {
      uint64_t v11 = (void *)v15;
      swift_retain();
    }
    else
    {
      type metadata accessor for AccessibilityFocusStoreLocation();
      type metadata accessor for GraphHost();
      uint64_t v16 = MEMORY[0x18C114840]();
      uint64_t v17 = (uint64_t)a1 + *(int *)(v14 + 44);
      LOWORD(v31) = v12;
      uint64_t v11 = specialized AccessibilityFocusStoreLocation.__allocating_init(host:resetValue:technologies:)(v16, v17, (__int16 *)&v31);
      swift_release();
    }
    *((void *)v4 + 1) = v11;
  }
  AccessibilityFocusState.Box.store.getter(*v4, &v31);
  unint64_t v18 = v32;
  if (v32)
  {
    uint64_t v19 = v33;
    uint64_t v20 = v31;
  }
  else
  {
    unint64_t v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    uint64_t v20 = 0;
    uint64_t v19 = MEMORY[0x1E4FBC868];
  }
  void v11[2] = v20;
  v11[3] = v18;
  v11[4] = v19;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  BOOL v21 = AccessibilityFocusStoreLocation.update()((uint64_t)v9);
  uint64_t v22 = type metadata accessor for AccessibilityFocusState();
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 24))((uint64_t)a1 + *(int *)(v22 + 36), v9, v6);
  uint64_t v24 = *((void *)v4 + 1);
  if (v24)
  {
    uint64_t v25 = *(int *)(v22 + 40);
    swift_retain();
    swift_release();
    *(void *)((char *)a1 + v25) = v24;
    if (*MEMORY[0x1E4F4E7A0] == *v4 || (uint64_t result = AGGraphGetValue(), (v26 & 1) != 0))
    {
      swift_weakInit();
      specialized closure #2 in AccessibilityFocusState.Box.update(property:phase:)();
      uint64_t result = swift_weakDestroy();
    }
    if (!v21)
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      char v28 = v30;
      return v28 & 1;
    }
    if (*((void *)v4 + 1))
    {
      BOOL v27 = v29 == 0;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      char v28 = v27 | AccessibilityFocusStoreLocation.wasRead.getter();
      return v28 & 1;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for AccessibilityFocusState()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t AccessibilityFocusStoreLocation.wasRead.getter()
{
  return *((unsigned __int8 *)v0 + *(void *)(class metadata base offset for AccessibilityFocusStoreLocation + *v0 + 72));
}

BOOL AccessibilityFocusStoreLocation.update()(uint64_t a1)
{
  uint64_t v22 = a1;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)(*v1 + class metadata base offset for AccessibilityFocusStoreLocation);
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v22 - v5;
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v23 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  __int16 v12 = (char *)&v22 - v11;
  __int16 v13 = (char *)v1 + v2[7];
  swift_beginAccess();
  uint64_t v14 = type metadata accessor for AccessibilityFocusStore.Entry();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14))
  {
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v15(v12, 1, 1, v3);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v12, v13, v3);
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v15(v12, 0, 1, v3);
  }
  AccessibilityFocusStoreLocation.getValue(forReading:)(0, (uint64_t)v6);
  uint64_t v16 = *(void (**)(uint64_t, char *, uint64_t))(v4 + 16);
  v16(v22, v6, v3);
  v16((uint64_t)v9, v6, v3);
  uint64_t v17 = ((uint64_t (*)(char *, void, uint64_t, uint64_t))v15)(v9, 0, 1, v3);
  MEMORY[0x1F4188790](v17);
  *(&v22 - 4) = v7;
  *(&v22 - 3) = (uint64_t)v9;
  *((_DWORD *)&v22 - 4) = 3;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v12, (uint64_t)_s14AttributeGraph13compareValues__7optionsSbx_xSo19AGComparisonOptionsVtlFSbSPyxGXEfU_TA_0, (uint64_t)(&v22 - 6), v7, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB390], MEMORY[0x1E4FBC278], v18);
  char v19 = v24;
  uint64_t v20 = *(void (**)(char *, uint64_t))(v23 + 8);
  v20(v9, v7);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v20(v12, v7);
  return (v19 & 1) == 0;
}

uint64_t AccessibilityFocusStoreLocation.getValue(forReading:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  char v4 = a1;
  uint64_t v27 = a2;
  uint64_t v25 = *(void *)(*(void *)(*(void *)v2 + class metadata base offset for AccessibilityFocusStoreLocation) - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v23 = (char *)&v22 - v5;
  uint64_t v26 = v6;
  uint64_t v7 = type metadata accessor for AccessibilityFocusStore.Entry();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v24 = (uint64_t)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  __int16 v13 = (char *)&v22 - v12;
  type metadata accessor for GraphHost();
  if (static GraphHost.isUpdating.getter() & 1) != 0 && (v4) {
    v2[*(void *)(class metadata base offset for AccessibilityFocusStoreLocation + *(void *)v2 + 72)] = 1;
  }
  uint64_t v14 = &v2[*(void *)(class metadata base offset for AccessibilityFocusStoreLocation + *(void *)v2 + 56)];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v13, v14, v8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48);
  int v16 = v15(v13, 1, v7);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  if (v16 == 1
    || *((void *)v3 + 2) != *(void *)&v3[*(void *)(class metadata base offset for AccessibilityFocusStoreLocation
                                                       + *(void *)v3
                                                       + 64)])
  {
    uint64_t v17 = v24;
    AccessibilityFocusStoreLocation.resolve()(v24);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 40))(v14, v17, v8);
    swift_endAccess();
    *(void *)&v3[*(void *)(class metadata base offset for AccessibilityFocusStoreLocation + *(void *)v3 + 64)] = *((void *)v3 + 2);
  }
  if (v15(v14, 1, v7)) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v25 + 16))(v27, &v3[*(void *)(class metadata base offset for AccessibilityFocusStoreLocation + *(void *)v3 + 32)], v26);
  }
  uint64_t v20 = v25;
  uint64_t v19 = v26;
  BOOL v21 = v23;
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v23, v14, v26);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v20 + 32))(v27, v21, v19);
}

uint64_t getEnumTagSinglePayload for AccessibilityFocusStore.Entry(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 >= a2)
  {
LABEL_26:
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v16 = *(void *)((result + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      return (v16 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *(unsigned __int8 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 3:
        __break(1u);
        return result;
      case 4:
        int v14 = *(_DWORD *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
LABEL_22:
        int v15 = v14 - 1;
        if (v10)
        {
          int v15 = 0;
          LODWORD(v10) = *(_DWORD *)result;
        }
        uint64_t result = v7 + (v10 | v15) + 1;
        break;
      default:
        goto LABEL_26;
    }
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityFocusStore.Entry()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t AccessibilityFocusStoreLocation.resolve()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AccessibilityFocusStore.Entry();
  unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(a1, 1, 1, v3);
  if (*(void *)(*(void *)(v1 + 32) + 16))
  {
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v1);
    if (v5)
    {
      uint64_t v6 = type metadata accessor for AccessibilityFocusStore.Key();
      MEMORY[0x1F4188790](v6);
      swift_retain();
      swift_getWitnessTable();
      PropertyList.forEach<A>(keyType:_:)();
      return swift_release();
    }
  }
  return result;
}

void storeEnumTagSinglePayload for AccessibilityFocusStore.Entry(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0) {
                uint64_t v20 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v20 = a2 - 1;
              }
              void *v19 = v20;
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      break;
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t AccessibilityFocusState.Box.store.getter@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (*MEMORY[0x1E4F4E7A0] == result)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    uint64_t Value = (void *)AGGraphGetValue();
    uint64_t v4 = Value[1];
    uint64_t v5 = Value[2];
    *a2 = *Value;
    a2[1] = v4;
    a2[2] = v5;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityFocusStoreLocation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized closure #2 in AccessibilityFocusState.Box.update(property:phase:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    AccessibilityFocusStoreLocation.performDeferredUpdate()();
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall AccessibilityFocusStoreLocation.performDeferredUpdate()()
{
  uint64_t v1 = (uint64_t *)(*v0 + class metadata base offset for AccessibilityFocusStoreLocation);
  uint64_t v2 = *v1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v22 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t v21 = v2;
  uint64_t v10 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v11);
  int v13 = (char *)&v21 - v12;
  int v14 = (char *)v0 + v1[6];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v9, v14, v4);
  uint64_t v15 = *(void *)(TupleTypeMetadata2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v9, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  }
  else
  {
    uint64_t v16 = *(void *)&v9[*(int *)(TupleTypeMetadata2 + 48)];
    int v17 = v9;
    uint64_t v18 = v21;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v17, v21);
    if (v16) {
      BOOL v19 = v16 == *(void *)((char *)v0
    }
                             + *(void *)(class metadata base offset for AccessibilityFocusStoreLocation + *v0 + 64));
    else {
      BOOL v19 = 1;
    }
    if (v19)
    {
      static Transaction.current.getter();
      AccessibilityFocusStoreLocation.set(_:transaction:)((uint64_t)v13);
      swift_release();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v18);
      return;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v18);
  }
  uint64_t v20 = v22;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v22, 1, 1, TupleTypeMetadata2);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v5 + 40))(v14, v20, v4);
  swift_endAccess();
}

uint64_t associated type witness table accessor for View.Body : View in LazyView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in ContextMenuPreviewResponderFilter<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for ViewModifier in ContextMenuPreviewModifier<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t specialized static _TableRowContentModifier._makeRows(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t, _OWORD *)@<X2>, uint64_t a3@<X8>)
{
  static DynamicPropertyCache.fields(of:)();
  long long v17 = *(_OWORD *)(a1 + 96);
  long long v18 = *(_OWORD *)(a1 + 112);
  long long v19 = *(_OWORD *)(a1 + 128);
  uint64_t v20 = *(void *)(a1 + 144);
  long long v13 = *(_OWORD *)(a1 + 32);
  long long v14 = *(_OWORD *)(a1 + 48);
  long long v15 = *(_OWORD *)(a1 + 64);
  long long v16 = *(_OWORD *)(a1 + 80);
  long long v11 = *(_OWORD *)a1;
  long long v12 = *(_OWORD *)(a1 + 16);
  outlined retain of _TableRowInputs(a1);
  type metadata accessor for TableRowContentModifierBodyAccessor<DropOntoTableRowModifier>(0, &lazy cache variable for type metadata for TableRowContentModifierBodyAccessor<_TypeSelectEquivalentTableRowModifier>, (void (*)(void))lazy protocol witness table accessor for type _TypeSelectEquivalentTableRowModifier and conformance _TypeSelectEquivalentTableRowModifier);
  lazy protocol witness table accessor for type TableRowContentModifierBodyAccessor<DropOntoTableRowModifier> and conformance TableRowContentModifierBodyAccessor<A>(&lazy protocol witness table cache variable for type TableRowContentModifierBodyAccessor<_TypeSelectEquivalentTableRowModifier> and conformance TableRowContentModifierBodyAccessor<A>, &lazy cache variable for type metadata for TableRowContentModifierBodyAccessor<_TypeSelectEquivalentTableRowModifier>, (void (*)(void))lazy protocol witness table accessor for type _TypeSelectEquivalentTableRowModifier and conformance _TypeSelectEquivalentTableRowModifier);
  BodyAccessor.makeBody(container:inputs:fields:)();
  v21[6] = v17;
  v21[7] = v18;
  v21[8] = v19;
  uint64_t v22 = v20;
  void v21[2] = v13;
  v21[3] = v14;
  void v21[4] = v15;
  v21[5] = v16;
  v21[0] = v11;
  v21[1] = v12;
  outlined retain of _TableRowInputs((uint64_t)v21);
  specialized static _TraitWritingTableRowModifier._makeRows(modifier:inputs:body:)(v10, (uint64_t)v21, a2);
  outlined release of _TableRowInputs((uint64_t)v21);
  if ((v9 & 1) == 0)
  {
    type metadata accessor for _TraitWritingTableRowModifier<DropOntoTraitKey>(0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingTableRowModifier<TypeSelectEquivalentKey>, (uint64_t)&type metadata for TypeSelectEquivalentKey, (uint64_t)&protocol witness table for TypeSelectEquivalentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier);
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  outlined release of _TableRowInputs((uint64_t)v21);
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(void *)a3 = v7;
  *(_DWORD *)(a3 + 8) = v8;
  return result;
}

{
  uint64_t result;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  uint64_t v20;
  _OWORD v21[9];
  uint64_t v22;

  static DynamicPropertyCache.fields(of:)();
  long long v17 = *(_OWORD *)(a1 + 96);
  long long v18 = *(_OWORD *)(a1 + 112);
  long long v19 = *(_OWORD *)(a1 + 128);
  uint64_t v20 = *(void *)(a1 + 144);
  long long v13 = *(_OWORD *)(a1 + 32);
  long long v14 = *(_OWORD *)(a1 + 48);
  long long v15 = *(_OWORD *)(a1 + 64);
  long long v16 = *(_OWORD *)(a1 + 80);
  long long v11 = *(_OWORD *)a1;
  long long v12 = *(_OWORD *)(a1 + 16);
  outlined retain of _TableRowInputs(a1);
  type metadata accessor for TableRowContentModifierBodyAccessor<DropOntoTableRowModifier>(0, &lazy cache variable for type metadata for TableRowContentModifierBodyAccessor<DeleteDisabledTableRowModifier>, (void (*)(void))lazy protocol witness table accessor for type DeleteDisabledTableRowModifier and conformance DeleteDisabledTableRowModifier);
  lazy protocol witness table accessor for type TableRowContentModifierBodyAccessor<DropOntoTableRowModifier> and conformance TableRowContentModifierBodyAccessor<A>(&lazy protocol witness table cache variable for type TableRowContentModifierBodyAccessor<DeleteDisabledTableRowModifier> and conformance TableRowContentModifierBodyAccessor<A>, &lazy cache variable for type metadata for TableRowContentModifierBodyAccessor<DeleteDisabledTableRowModifier>, (void (*)(void))lazy protocol witness table accessor for type DeleteDisabledTableRowModifier and conformance DeleteDisabledTableRowModifier);
  BodyAccessor.makeBody(container:inputs:fields:)();
  v21[6] = v17;
  v21[7] = v18;
  v21[8] = v19;
  uint64_t v22 = v20;
  void v21[2] = v13;
  v21[3] = v14;
  void v21[4] = v15;
  v21[5] = v16;
  v21[0] = v11;
  v21[1] = v12;
  outlined retain of _TableRowInputs((uint64_t)v21);
  specialized static _TraitWritingTableRowModifier._makeRows(modifier:inputs:body:)(v10, (uint64_t)v21, a2);
  outlined release of _TableRowInputs((uint64_t)v21);
  if ((v9 & 1) == 0)
  {
    type metadata accessor for _TraitWritingTableRowModifier<DropOntoTraitKey>(0, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<IsDeleteDisabledTraitKey>, (uint64_t)&type metadata for IsDeleteDisabledTraitKey, (uint64_t)&protocol witness table for IsDeleteDisabledTraitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier);
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  outlined release of _TableRowInputs((uint64_t)v21);
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(void *)a3 = v7;
  *(_DWORD *)(a3 + 8) = v8;
  return result;
}

{
  uint64_t result;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  uint64_t v20;
  _OWORD v21[9];
  uint64_t v22;

  static DynamicPropertyCache.fields(of:)();
  long long v17 = *(_OWORD *)(a1 + 96);
  long long v18 = *(_OWORD *)(a1 + 112);
  long long v19 = *(_OWORD *)(a1 + 128);
  uint64_t v20 = *(void *)(a1 + 144);
  long long v13 = *(_OWORD *)(a1 + 32);
  long long v14 = *(_OWORD *)(a1 + 48);
  long long v15 = *(_OWORD *)(a1 + 64);
  long long v16 = *(_OWORD *)(a1 + 80);
  long long v11 = *(_OWORD *)a1;
  long long v12 = *(_OWORD *)(a1 + 16);
  outlined retain of _TableRowInputs(a1);
  type metadata accessor for TableRowContentModifierBodyAccessor<DropOntoTableRowModifier>(0, &lazy cache variable for type metadata for TableRowContentModifierBodyAccessor<ItemProviderTableRowModifier>, (void (*)(void))lazy protocol witness table accessor for type ItemProviderTableRowModifier and conformance ItemProviderTableRowModifier);
  lazy protocol witness table accessor for type TableRowContentModifierBodyAccessor<DropOntoTableRowModifier> and conformance TableRowContentModifierBodyAccessor<A>(&lazy protocol witness table cache variable for type TableRowContentModifierBodyAccessor<ItemProviderTableRowModifier> and conformance TableRowContentModifierBodyAccessor<A>, &lazy cache variable for type metadata for TableRowContentModifierBodyAccessor<ItemProviderTableRowModifier>, (void (*)(void))lazy protocol witness table accessor for type ItemProviderTableRowModifier and conformance ItemProviderTableRowModifier);
  BodyAccessor.makeBody(container:inputs:fields:)();
  v21[6] = v17;
  v21[7] = v18;
  v21[8] = v19;
  uint64_t v22 = v20;
  void v21[2] = v13;
  v21[3] = v14;
  void v21[4] = v15;
  v21[5] = v16;
  v21[0] = v11;
  v21[1] = v12;
  outlined retain of _TableRowInputs((uint64_t)v21);
  specialized static _TraitWritingTableRowModifier._makeRows(modifier:inputs:body:)(v10, (uint64_t)v21, a2);
  outlined release of _TableRowInputs((uint64_t)v21);
  if ((v9 & 1) == 0)
  {
    type metadata accessor for _TraitWritingTableRowModifier<DropOntoTraitKey>(0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingTableRowModifier<ItemProviderTraitKey>, (uint64_t)&type metadata for ItemProviderTraitKey, (uint64_t)&protocol witness table for ItemProviderTraitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier);
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  outlined release of _TableRowInputs((uint64_t)v21);
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(void *)a3 = v7;
  *(_DWORD *)(a3 + 8) = v8;
  return result;
}

{
  uint64_t result;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  uint64_t v20;
  _OWORD v21[9];
  uint64_t v22;

  static DynamicPropertyCache.fields(of:)();
  long long v17 = *(_OWORD *)(a1 + 96);
  long long v18 = *(_OWORD *)(a1 + 112);
  long long v19 = *(_OWORD *)(a1 + 128);
  uint64_t v20 = *(void *)(a1 + 144);
  long long v13 = *(_OWORD *)(a1 + 32);
  long long v14 = *(_OWORD *)(a1 + 48);
  long long v15 = *(_OWORD *)(a1 + 64);
  long long v16 = *(_OWORD *)(a1 + 80);
  long long v11 = *(_OWORD *)a1;
  long long v12 = *(_OWORD *)(a1 + 16);
  outlined retain of _TableRowInputs(a1);
  type metadata accessor for TableRowContentModifierBodyAccessor<DropOntoTableRowModifier>(0, &lazy cache variable for type metadata for TableRowContentModifierBodyAccessor<OnInsertTableRowModifier>, (void (*)(void))lazy protocol witness table accessor for type OnInsertTableRowModifier and conformance OnInsertTableRowModifier);
  lazy protocol witness table accessor for type TableRowContentModifierBodyAccessor<DropOntoTableRowModifier> and conformance TableRowContentModifierBodyAccessor<A>(&lazy protocol witness table cache variable for type TableRowContentModifierBodyAccessor<OnInsertTableRowModifier> and conformance TableRowContentModifierBodyAccessor<A>, &lazy cache variable for type metadata for TableRowContentModifierBodyAccessor<OnInsertTableRowModifier>, (void (*)(void))lazy protocol witness table accessor for type OnInsertTableRowModifier and conformance OnInsertTableRowModifier);
  BodyAccessor.makeBody(container:inputs:fields:)();
  v21[6] = v17;
  v21[7] = v18;
  v21[8] = v19;
  uint64_t v22 = v20;
  void v21[2] = v13;
  v21[3] = v14;
  void v21[4] = v15;
  v21[5] = v16;
  v21[0] = v11;
  v21[1] = v12;
  outlined retain of _TableRowInputs((uint64_t)v21);
  specialized static _TraitWritingTableRowModifier._makeRows(modifier:inputs:body:)(v10, (uint64_t)v21, a2);
  outlined release of _TableRowInputs((uint64_t)v21);
  if ((v9 & 1) == 0)
  {
    type metadata accessor for _TraitWritingTableRowModifier<DropOntoTraitKey>(0, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<OnInsertTraitKey>, (uint64_t)&type metadata for OnInsertTraitKey, (uint64_t)&protocol witness table for OnInsertTraitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier);
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  outlined release of _TableRowInputs((uint64_t)v21);
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(void *)a3 = v7;
  *(_DWORD *)(a3 + 8) = v8;
  return result;
}

{
  uint64_t result;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  uint64_t v20;
  _OWORD v21[9];
  uint64_t v22;

  static DynamicPropertyCache.fields(of:)();
  long long v17 = *(_OWORD *)(a1 + 96);
  long long v18 = *(_OWORD *)(a1 + 112);
  long long v19 = *(_OWORD *)(a1 + 128);
  uint64_t v20 = *(void *)(a1 + 144);
  long long v13 = *(_OWORD *)(a1 + 32);
  long long v14 = *(_OWORD *)(a1 + 48);
  long long v15 = *(_OWORD *)(a1 + 64);
  long long v16 = *(_OWORD *)(a1 + 80);
  long long v11 = *(_OWORD *)a1;
  long long v12 = *(_OWORD *)(a1 + 16);
  outlined retain of _TableRowInputs(a1);
  type metadata accessor for TableRowContentModifierBodyAccessor<DropOntoTableRowModifier>(0, &lazy cache variable for type metadata for TableRowContentModifierBodyAccessor<OnDeleteTableRowModifier>, (void (*)(void))lazy protocol witness table accessor for type OnDeleteTableRowModifier and conformance OnDeleteTableRowModifier);
  lazy protocol witness table accessor for type TableRowContentModifierBodyAccessor<DropOntoTableRowModifier> and conformance TableRowContentModifierBodyAccessor<A>(&lazy protocol witness table cache variable for type TableRowContentModifierBodyAccessor<OnDeleteTableRowModifier> and conformance TableRowContentModifierBodyAccessor<A>, &lazy cache variable for type metadata for TableRowContentModifierBodyAccessor<OnDeleteTableRowModifier>, (void (*)(void))lazy protocol witness table accessor for type OnDeleteTableRowModifier and conformance OnDeleteTableRowModifier);
  BodyAccessor.makeBody(container:inputs:fields:)();
  v21[6] = v17;
  v21[7] = v18;
  v21[8] = v19;
  uint64_t v22 = v20;
  void v21[2] = v13;
  v21[3] = v14;
  void v21[4] = v15;
  v21[5] = v16;
  v21[0] = v11;
  v21[1] = v12;
  outlined retain of _TableRowInputs((uint64_t)v21);
  specialized static _TraitWritingTableRowModifier._makeRows(modifier:inputs:body:)(v10, (uint64_t)v21, a2);
  outlined release of _TableRowInputs((uint64_t)v21);
  if ((v9 & 1) == 0)
  {
    type metadata accessor for _TraitWritingTableRowModifier<DropOntoTraitKey>(0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingTableRowModifier<OnDeleteTraitKey>, (uint64_t)&type metadata for OnDeleteTraitKey, (uint64_t)&protocol witness table for OnDeleteTraitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier);
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  outlined release of _TableRowInputs((uint64_t)v21);
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(void *)a3 = v7;
  *(_DWORD *)(a3 + 8) = v8;
  return result;
}

{
  uint64_t result;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  uint64_t v20;
  _OWORD v21[9];
  uint64_t v22;

  static DynamicPropertyCache.fields(of:)();
  long long v17 = *(_OWORD *)(a1 + 96);
  long long v18 = *(_OWORD *)(a1 + 112);
  long long v19 = *(_OWORD *)(a1 + 128);
  uint64_t v20 = *(void *)(a1 + 144);
  long long v13 = *(_OWORD *)(a1 + 32);
  long long v14 = *(_OWORD *)(a1 + 48);
  long long v15 = *(_OWORD *)(a1 + 64);
  long long v16 = *(_OWORD *)(a1 + 80);
  long long v11 = *(_OWORD *)a1;
  long long v12 = *(_OWORD *)(a1 + 16);
  outlined retain of _TableRowInputs(a1);
  type metadata accessor for TableRowContentModifierBodyAccessor<DropOntoTableRowModifier>(0, &lazy cache variable for type metadata for TableRowContentModifierBodyAccessor<DropOntoTableRowModifier>, (void (*)(void))lazy protocol witness table accessor for type DropOntoTableRowModifier and conformance DropOntoTableRowModifier);
  lazy protocol witness table accessor for type TableRowContentModifierBodyAccessor<DropOntoTableRowModifier> and conformance TableRowContentModifierBodyAccessor<A>(&lazy protocol witness table cache variable for type TableRowContentModifierBodyAccessor<DropOntoTableRowModifier> and conformance TableRowContentModifierBodyAccessor<A>, &lazy cache variable for type metadata for TableRowContentModifierBodyAccessor<DropOntoTableRowModifier>, (void (*)(void))lazy protocol witness table accessor for type DropOntoTableRowModifier and conformance DropOntoTableRowModifier);
  BodyAccessor.makeBody(container:inputs:fields:)();
  v21[6] = v17;
  v21[7] = v18;
  v21[8] = v19;
  uint64_t v22 = v20;
  void v21[2] = v13;
  v21[3] = v14;
  void v21[4] = v15;
  v21[5] = v16;
  v21[0] = v11;
  v21[1] = v12;
  outlined retain of _TableRowInputs((uint64_t)v21);
  specialized static _TraitWritingTableRowModifier._makeRows(modifier:inputs:body:)(v10, (uint64_t)v21, a2);
  outlined release of _TableRowInputs((uint64_t)v21);
  if ((v9 & 1) == 0)
  {
    type metadata accessor for _TraitWritingTableRowModifier<DropOntoTraitKey>(0, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<DropOntoTraitKey>, (uint64_t)&type metadata for DropOntoTraitKey, (uint64_t)&protocol witness table for DropOntoTraitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier);
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  outlined release of _TableRowInputs((uint64_t)v21);
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(void *)a3 = v7;
  *(_DWORD *)(a3 + 8) = v8;
  return result;
}

{
  uint64_t result;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  uint64_t v20;
  _OWORD v21[9];
  uint64_t v22;

  static DynamicPropertyCache.fields(of:)();
  long long v17 = *(_OWORD *)(a1 + 96);
  long long v18 = *(_OWORD *)(a1 + 112);
  long long v19 = *(_OWORD *)(a1 + 128);
  uint64_t v20 = *(void *)(a1 + 144);
  long long v13 = *(_OWORD *)(a1 + 32);
  long long v14 = *(_OWORD *)(a1 + 48);
  long long v15 = *(_OWORD *)(a1 + 64);
  long long v16 = *(_OWORD *)(a1 + 80);
  long long v11 = *(_OWORD *)a1;
  long long v12 = *(_OWORD *)(a1 + 16);
  outlined retain of _TableRowInputs(a1);
  type metadata accessor for TableRowContentModifierBodyAccessor<DropOntoTableRowModifier>(0, &lazy cache variable for type metadata for TableRowContentModifierBodyAccessor<_HoverTableRowModifier>, (void (*)(void))lazy protocol witness table accessor for type _HoverTableRowModifier and conformance _HoverTableRowModifier);
  lazy protocol witness table accessor for type TableRowContentModifierBodyAccessor<DropOntoTableRowModifier> and conformance TableRowContentModifierBodyAccessor<A>(&lazy protocol witness table cache variable for type TableRowContentModifierBodyAccessor<_HoverTableRowModifier> and conformance TableRowContentModifierBodyAccessor<A>, &lazy cache variable for type metadata for TableRowContentModifierBodyAccessor<_HoverTableRowModifier>, (void (*)(void))lazy protocol witness table accessor for type _HoverTableRowModifier and conformance _HoverTableRowModifier);
  BodyAccessor.makeBody(container:inputs:fields:)();
  v21[6] = v17;
  v21[7] = v18;
  v21[8] = v19;
  uint64_t v22 = v20;
  void v21[2] = v13;
  v21[3] = v14;
  void v21[4] = v15;
  v21[5] = v16;
  v21[0] = v11;
  v21[1] = v12;
  outlined retain of _TableRowInputs((uint64_t)v21);
  specialized static _TraitWritingTableRowModifier._makeRows(modifier:inputs:body:)(v10, (uint64_t)v21, a2);
  outlined release of _TableRowInputs((uint64_t)v21);
  if ((v9 & 1) == 0)
  {
    type metadata accessor for _TraitWritingTableRowModifier<DropOntoTraitKey>(0, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<TableRowHoverActionTraitKey>, (uint64_t)&type metadata for TableRowHoverActionTraitKey, (uint64_t)&protocol witness table for TableRowHoverActionTraitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier);
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  outlined release of _TableRowInputs((uint64_t)v21);
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(void *)a3 = v7;
  *(_DWORD *)(a3 + 8) = v8;
  return result;
}